{"version":3,"file":"static/js/main.bae1350e.js","mappings":"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","sources":["../node_modules/classnames/index.js","../node_modules/invariant/browser.js","../node_modules/lodash.throttle/index.js","../node_modules/prop-types-extra/lib/all.js","../node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react-multi-carousel/index.js","../node_modules/react-multi-carousel/lib/Arrows.js","../node_modules/react-multi-carousel/lib/Carousel.js","../node_modules/react-multi-carousel/lib/CarouselItems.js","../node_modules/react-multi-carousel/lib/Dots.js","../node_modules/react-multi-carousel/lib/index.js","../node_modules/react-multi-carousel/lib/types.js","../node_modules/react-multi-carousel/lib/utils/clones.js","../node_modules/react-multi-carousel/lib/utils/common.js","../node_modules/react-multi-carousel/lib/utils/dots.js","../node_modules/react-multi-carousel/lib/utils/elementWidth.js","../node_modules/react-multi-carousel/lib/utils/index.js","../node_modules/react-multi-carousel/lib/utils/mouseOrTouchMove.js","../node_modules/react-multi-carousel/lib/utils/next.js","../node_modules/react-multi-carousel/lib/utils/previous.js","../node_modules/react-multi-carousel/lib/utils/throttle.js","../node_modules/react-multi-carousel/lib/utils/throwError.js","../node_modules/react-on-screen/lib/TrackVisibility.js","../node_modules/react-on-screen/lib/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../node_modules/shallowequal/index.js","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/create fake namespace object","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/load script","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","logo.svg","../node_modules/@restart/ui/esm/SelectableContext.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/uncontrollable/lib/esm/utils.js","../node_modules/uncontrollable/lib/esm/hook.js","../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","../node_modules/react-bootstrap/esm/ThemeProvider.js","../node_modules/react-bootstrap/esm/NavbarBrand.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/getComputedStyle.js","../node_modules/dom-helpers/esm/ownerWindow.js","../node_modules/dom-helpers/esm/hyphenate.js","../node_modules/dom-helpers/esm/hyphenateStyle.js","../node_modules/dom-helpers/esm/isTransform.js","../node_modules/dom-helpers/esm/css.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/react-transition-group/esm/config.js","../node_modules/react-transition-group/esm/TransitionGroupContext.js","../node_modules/react-transition-group/esm/utils/reflow.js","../node_modules/react-transition-group/esm/Transition.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/removeEventListener.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/transitionEnd.js","../node_modules/dom-helpers/esm/triggerEvent.js","../node_modules/react-bootstrap/esm/transitionEndListener.js","../node_modules/react-bootstrap/esm/createChainedFunction.js","../node_modules/react-bootstrap/esm/triggerBrowserReflow.js","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/react-bootstrap/esm/TransitionWrapper.js","../node_modules/react-bootstrap/esm/safeFindDOMNode.js","../node_modules/react-bootstrap/esm/Collapse.js","../node_modules/react-bootstrap/esm/NavbarContext.js","../node_modules/react-bootstrap/esm/NavbarCollapse.js","../node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/hooks/esm/useEventCallback.js","../node_modules/react-bootstrap/esm/NavbarToggle.js","../node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../node_modules/@restart/hooks/esm/useMediaQuery.js","../node_modules/@restart/hooks/esm/useBreakpoint.js","../node_modules/dom-helpers/esm/activeElement.js","../node_modules/dom-helpers/esm/contains.js","../node_modules/@restart/hooks/esm/useWillUnmount.js","../node_modules/@restart/hooks/esm/useUpdatedRef.js","../node_modules/@restart/ui/esm/DataKey.js","../node_modules/@restart/ui/esm/ModalManager.js","../node_modules/@restart/ui/esm/getScrollbarWidth.js","../node_modules/@restart/ui/esm/useWindow.js","../node_modules/@restart/ui/esm/useWaitForDOMRef.js","../node_modules/@restart/ui/esm/NoopTransition.js","../node_modules/@restart/ui/esm/ImperativeTransition.js","../node_modules/@restart/ui/esm/Modal.js","../node_modules/@restart/hooks/esm/useMounted.js","../node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/@restart/ui/esm/utils.js","../node_modules/react-bootstrap/esm/Fade.js","../node_modules/react-bootstrap/esm/OffcanvasBody.js","../node_modules/react-bootstrap/esm/OffcanvasToggling.js","../node_modules/react-bootstrap/esm/ModalContext.js","../node_modules/react-bootstrap/esm/CloseButton.js","../node_modules/react-bootstrap/esm/AbstractModalHeader.js","../node_modules/react-bootstrap/esm/OffcanvasHeader.js","../node_modules/react-bootstrap/esm/OffcanvasTitle.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/dom-helpers/esm/querySelectorAll.js","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-bootstrap/esm/BootstrapModalManager.js","../node_modules/dom-helpers/esm/addClass.js","../node_modules/dom-helpers/esm/hasClass.js","../node_modules/react-bootstrap/esm/Offcanvas.js","../node_modules/react-bootstrap/esm/NavbarOffcanvas.js","../node_modules/react-bootstrap/esm/NavbarText.js","../node_modules/react-bootstrap/esm/Navbar.js","../node_modules/react-bootstrap/esm/Container.js","../node_modules/@restart/ui/esm/NavContext.js","../node_modules/@restart/ui/esm/TabContext.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/@restart/ui/esm/NavItem.js","../node_modules/@restart/ui/esm/Nav.js","../node_modules/@restart/hooks/esm/useForceUpdate.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/NavItem.js","../node_modules/@restart/hooks/esm/useResizeObserver.js","../node_modules/@restart/ui/esm/Anchor.js","../node_modules/react-bootstrap/esm/NavLink.js","../node_modules/react-bootstrap/esm/Nav.js","assets/img/logo.svg","assets/img/nav-icon1.svg","assets/img/nav-icon2.svg","assets/img/nav-icon3.svg","../node_modules/@remix-run/router/history.ts","../node_modules/@remix-run/router/utils.ts","../node_modules/@remix-run/router/router.ts","../node_modules/react-router/lib/context.ts","../node_modules/react-router/lib/hooks.tsx","../node_modules/react-router/lib/components.tsx","../node_modules/react-router-dom/dom.ts","../node_modules/react-router-dom/index.tsx","../node_modules/react-router-hash-link/node_modules/tslib/tslib.es6.js","../node_modules/react-router-hash-link/src/HashLink.jsx","components/NavBar.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/Col.js","assets/img/header-img.svg","../node_modules/react-bootstrap-icons/dist/icons/arrow-right-circle.js","components/Banner.js","assets/img/arrow1.svg","assets/img/arrow2.svg","components/Skills.js","../node_modules/@restart/ui/node_modules/uncontrollable/lib/esm/index.js","../packages/@react-aria/ssr/src/SSRProvider.tsx","../node_modules/@restart/ui/esm/TabPanel.js","../node_modules/@restart/ui/esm/Tabs.js","../node_modules/react-bootstrap/esm/getTabTransitionComponent.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","../node_modules/react-bootstrap/esm/Button.js","components/ProjectCard.js","components/Projects.js","assets/img/contact-img.svg","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","components/Contact.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = all;\n\nvar _createChainableTypeChecker = require('./utils/createChainableTypeChecker');\n\nvar _createChainableTypeChecker2 = _interopRequireDefault(_createChainableTypeChecker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction all() {\n  for (var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++) {\n    validators[_key] = arguments[_key];\n  }\n\n  function allPropTypes() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var error = null;\n\n    validators.forEach(function (validator) {\n      if (error != null) {\n        return;\n      }\n\n      var result = validator.apply(undefined, args);\n      if (result != null) {\n        error = result;\n      }\n    });\n\n    return error;\n  }\n\n  return (0, _createChainableTypeChecker2.default)(allPropTypes);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createChainableTypeChecker;\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n// Mostly taken from ReactPropTypes.\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location, propFullName) {\n    var componentNameSafe = componentName || '<<anonymous>>';\n    var propFullNameSafe = propFullName || propName;\n\n    if (props[propName] == null) {\n      if (isRequired) {\n        return new Error('Required ' + location + ' `' + propFullNameSafe + '` was not specified ' + ('in `' + componentNameSafe + '`.'));\n      }\n\n      return null;\n    }\n\n    for (var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {\n      args[_key - 6] = arguments[_key];\n    }\n\n    return validate.apply(undefined, [props, propName, componentNameSafe, location, propFullNameSafe].concat(args));\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\nmodule.exports = exports['default'];","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}\nfunction Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}\nfunction Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}\nfunction Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}\nfunction ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=\nlh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction qh(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}\nfunction rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction sh(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function uh(a){var b=a._init;return b(a._payload)}\nfunction vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=xh(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),\nc.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}\nfunction Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);\nfunction Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];\nfunction Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}\nfunction ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction ei(a,b){return\"function\"===typeof b?b(a):b}\nfunction fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}\nfunction ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}\nfunction qi(a){var b=ci();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}\nfunction li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}\nfunction ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}\nfunction yi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}\nfunction Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}\nfunction ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}\nfunction Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,\n4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=\nci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,\nf,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Uh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Vh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},\nuseDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===\nO?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni=\"function\"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}\nfunction Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);\"function\"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}\nfunction Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}\nfunction aj(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}\nfunction ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}\nfunction ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?(\"function\"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?(\"function\"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}\nfunction kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}\nfunction mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction rj(a,b){b=qj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:\"visible\",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}\nfunction xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case \"together\":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;\nAj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};\nCj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Ej(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),\nBj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),\nnull;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;\nfunction Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}\nfunction Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}\nfunction Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}\nfunction ak(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;\nZj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}\nfunction ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,\na),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}\nfunction jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}\nfunction lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}\nfunction lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}\nfunction Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}\nfunction Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}\nfunction Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}\nfunction Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}\nfunction Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=\n0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}\nfunction Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}\nfunction uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}\nfunction Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}\nfunction Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;\nvar g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}\nfunction Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}\nfunction W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}\nfunction Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}\nfunction ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;\nWk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\nhj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}\nfunction al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction $k(a){if(\"function\"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction yh(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}\nfunction hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}\nnl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}\nnl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function ql(){}\nfunction rl(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,\"\",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,\"\",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}\nfunction sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};\nFc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;\nvar tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"};\nvar vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||\nkl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d=\"\",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version=\"18.2.0-next-9e3b772b8-20220608\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","module.exports = require('./lib');\n","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var React=require(\"react\"),LeftArrow=function(_a){var customLeftArrow=_a.customLeftArrow,getState=_a.getState,previous=_a.previous,disabled=_a.disabled,rtl=_a.rtl;if(customLeftArrow)return React.cloneElement(customLeftArrow,{onClick:function(){return previous()},carouselState:getState(),disabled:disabled,rtl:rtl});var rtlClassName=rtl?\"rtl\":\"\";return React.createElement(\"button\",{\"aria-label\":\"Go to previous slide\",className:\"react-multiple-carousel__arrow react-multiple-carousel__arrow--left \"+rtlClassName,onClick:function(){return previous()},type:\"button\",disabled:disabled})};exports.LeftArrow=LeftArrow;var RightArrow=function(_a){var customRightArrow=_a.customRightArrow,getState=_a.getState,next=_a.next,disabled=_a.disabled,rtl=_a.rtl;if(customRightArrow)return React.cloneElement(customRightArrow,{onClick:function(){return next()},carouselState:getState(),disabled:disabled,rtl:rtl});var rtlClassName=rtl?\"rtl\":\"\";return React.createElement(\"button\",{\"aria-label\":\"Go to next slide\",className:\"react-multiple-carousel__arrow react-multiple-carousel__arrow--right \"+rtlClassName,onClick:function(){return next()},type:\"button\",disabled:disabled})};exports.RightArrow=RightArrow;","\"use strict\";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])})(d,b)};return function(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}}();Object.defineProperty(exports,\"__esModule\",{value:!0});var React=require(\"react\"),utils_1=require(\"./utils\"),types_1=require(\"./types\"),Dots_1=require(\"./Dots\"),Arrows_1=require(\"./Arrows\"),CarouselItems_1=require(\"./CarouselItems\"),common_1=require(\"./utils/common\"),defaultTransitionDuration=400,defaultTransition=\"transform 400ms ease-in-out\",Carousel=function(_super){function Carousel(props){var _this=_super.call(this,props)||this;return _this.containerRef=React.createRef(),_this.listRef=React.createRef(),_this.state={itemWidth:0,slidesToShow:0,currentSlide:0,totalItems:React.Children.count(props.children),deviceType:\"\",domLoaded:!1,transform:0,containerWidth:0},_this.onResize=_this.onResize.bind(_this),_this.handleDown=_this.handleDown.bind(_this),_this.handleMove=_this.handleMove.bind(_this),_this.handleOut=_this.handleOut.bind(_this),_this.onKeyUp=_this.onKeyUp.bind(_this),_this.handleEnter=_this.handleEnter.bind(_this),_this.setIsInThrottle=_this.setIsInThrottle.bind(_this),_this.next=utils_1.throttle(_this.next.bind(_this),props.transitionDuration||defaultTransitionDuration,_this.setIsInThrottle),_this.previous=utils_1.throttle(_this.previous.bind(_this),props.transitionDuration||defaultTransitionDuration,_this.setIsInThrottle),_this.goToSlide=utils_1.throttle(_this.goToSlide.bind(_this),props.transitionDuration||defaultTransitionDuration,_this.setIsInThrottle),_this.onMove=!1,_this.initialX=0,_this.lastX=0,_this.isAnimationAllowed=!1,_this.direction=\"\",_this.initialY=0,_this.isInThrottle=!1,_this.transformPlaceHolder=0,_this}return __extends(Carousel,_super),Carousel.prototype.resetTotalItems=function(){var _this=this,totalItems=React.Children.count(this.props.children),currentSlide=utils_1.notEnoughChildren(this.state)?0:Math.max(0,Math.min(this.state.currentSlide,totalItems));this.setState({totalItems:totalItems,currentSlide:currentSlide},function(){_this.setContainerAndItemWidth(_this.state.slidesToShow,!0)})},Carousel.prototype.setIsInThrottle=function(isInThrottle){void 0===isInThrottle&&(isInThrottle=!1),this.isInThrottle=isInThrottle},Carousel.prototype.setTransformDirectly=function(position,withAnimation){var additionalTransfrom=this.props.additionalTransfrom;this.transformPlaceHolder=position;var currentTransform=common_1.getTransform(this.state,this.props,this.transformPlaceHolder);this.listRef&&this.listRef.current&&(this.setAnimationDirectly(withAnimation),this.listRef.current.style.transform=\"translate3d(\"+(currentTransform+additionalTransfrom)+\"px,0,0)\")},Carousel.prototype.setAnimationDirectly=function(animationAllowed){this.listRef&&this.listRef.current&&(this.listRef.current.style.transition=animationAllowed?this.props.customTransition||defaultTransition:\"none\")},Carousel.prototype.componentDidMount=function(){this.setState({domLoaded:!0}),this.setItemsToShow(),window.addEventListener(\"resize\",this.onResize),this.onResize(!0),this.props.keyBoardControl&&window.addEventListener(\"keyup\",this.onKeyUp),this.props.autoPlay&&(this.autoPlay=setInterval(this.next,this.props.autoPlaySpeed))},Carousel.prototype.setClones=function(slidesToShow,itemWidth,forResizing,resetCurrentSlide){var _this=this;void 0===resetCurrentSlide&&(resetCurrentSlide=!1),this.isAnimationAllowed=!1;var childrenArr=React.Children.toArray(this.props.children),initialSlide=utils_1.getInitialSlideInInfiniteMode(slidesToShow||this.state.slidesToShow,childrenArr),clones=utils_1.getClones(this.state.slidesToShow,childrenArr),currentSlide=childrenArr.length<this.state.slidesToShow?0:this.state.currentSlide;this.setState({totalItems:clones.length,currentSlide:forResizing&&!resetCurrentSlide?currentSlide:initialSlide},function(){_this.correctItemsPosition(itemWidth||_this.state.itemWidth)})},Carousel.prototype.setItemsToShow=function(shouldCorrectItemPosition,resetCurrentSlide){var _this=this,responsive=this.props.responsive;Object.keys(responsive).forEach(function(item){var _a=responsive[item],breakpoint=_a.breakpoint,items=_a.items,max=breakpoint.max,min=breakpoint.min,widths=[window.innerWidth];window.screen&&window.screen.width&&widths.push(window.screen.width);var screenWidth=Math.min.apply(Math,widths);min<=screenWidth&&screenWidth<=max&&(_this.setState({slidesToShow:items,deviceType:item}),_this.setContainerAndItemWidth(items,shouldCorrectItemPosition,resetCurrentSlide))})},Carousel.prototype.setContainerAndItemWidth=function(slidesToShow,shouldCorrectItemPosition,resetCurrentSlide){var _this=this;if(this.containerRef&&this.containerRef.current){var containerWidth=this.containerRef.current.offsetWidth,itemWidth_1=utils_1.getItemClientSideWidth(this.props,slidesToShow,containerWidth);this.setState({containerWidth:containerWidth,itemWidth:itemWidth_1},function(){_this.props.infinite&&_this.setClones(slidesToShow,itemWidth_1,shouldCorrectItemPosition,resetCurrentSlide)}),shouldCorrectItemPosition&&this.correctItemsPosition(itemWidth_1)}},Carousel.prototype.correctItemsPosition=function(itemWidth,isAnimationAllowed,setToDomDirectly){isAnimationAllowed&&(this.isAnimationAllowed=!0),!isAnimationAllowed&&this.isAnimationAllowed&&(this.isAnimationAllowed=!1);var nextTransform=this.state.totalItems<this.state.slidesToShow?0:-itemWidth*this.state.currentSlide;setToDomDirectly&&this.setTransformDirectly(nextTransform,!0),this.setState({transform:nextTransform})},Carousel.prototype.onResize=function(value){var shouldCorrectItemPosition;shouldCorrectItemPosition=!!this.props.infinite&&(\"boolean\"!=typeof value||!value),this.setItemsToShow(shouldCorrectItemPosition)},Carousel.prototype.componentDidUpdate=function(_a,_b){var _this=this,keyBoardControl=_a.keyBoardControl,autoPlay=_a.autoPlay,children=_a.children,containerWidth=_b.containerWidth,domLoaded=_b.domLoaded,currentSlide=_b.currentSlide;if(this.containerRef&&this.containerRef.current&&this.containerRef.current.offsetWidth!==containerWidth&&(this.itemsToShowTimeout&&clearTimeout(this.itemsToShowTimeout),this.itemsToShowTimeout=setTimeout(function(){_this.setItemsToShow(!0)},this.props.transitionDuration||defaultTransitionDuration)),keyBoardControl&&!this.props.keyBoardControl&&window.removeEventListener(\"keyup\",this.onKeyUp),!keyBoardControl&&this.props.keyBoardControl&&window.addEventListener(\"keyup\",this.onKeyUp),autoPlay&&!this.props.autoPlay&&this.autoPlay&&(clearInterval(this.autoPlay),this.autoPlay=void 0),autoPlay||!this.props.autoPlay||this.autoPlay||(this.autoPlay=setInterval(this.next,this.props.autoPlaySpeed)),children.length!==this.props.children.length?Carousel.clonesTimeout=setTimeout(function(){_this.props.infinite?_this.setClones(_this.state.slidesToShow,_this.state.itemWidth,!0,!0):_this.resetTotalItems()},this.props.transitionDuration||defaultTransitionDuration):this.props.infinite&&this.state.currentSlide!==currentSlide&&this.correctClonesPosition({domLoaded:domLoaded}),this.transformPlaceHolder!==this.state.transform&&(this.transformPlaceHolder=this.state.transform),this.props.autoPlay&&this.props.rewind&&!this.props.infinite&&utils_1.isInRightEnd(this.state)){var rewindBuffer=this.props.transitionDuration||defaultTransitionDuration;Carousel.isInThrottleTimeout=setTimeout(function(){_this.setIsInThrottle(!1),_this.resetAutoplayInterval(),_this.goToSlide(0,void 0,!!_this.props.rewindWithAnimation)},rewindBuffer+this.props.autoPlaySpeed)}},Carousel.prototype.correctClonesPosition=function(_a){var _this=this,domLoaded=_a.domLoaded,childrenArr=React.Children.toArray(this.props.children),_b=utils_1.checkClonesPosition(this.state,childrenArr,this.props),isReachingTheEnd=_b.isReachingTheEnd,isReachingTheStart=_b.isReachingTheStart,nextSlide=_b.nextSlide,nextPosition=_b.nextPosition;this.state.domLoaded&&domLoaded&&(isReachingTheEnd||isReachingTheStart)&&(this.isAnimationAllowed=!1,Carousel.transformTimeout=setTimeout(function(){_this.setState({transform:nextPosition,currentSlide:nextSlide})},this.props.transitionDuration||defaultTransitionDuration))},Carousel.prototype.next=function(slidesHavePassed){var _this=this;void 0===slidesHavePassed&&(slidesHavePassed=0);var _a=this.props,afterChange=_a.afterChange,beforeChange=_a.beforeChange;if(!utils_1.notEnoughChildren(this.state)){var _b=utils_1.populateNextSlides(this.state,this.props,slidesHavePassed),nextSlides=_b.nextSlides,nextPosition=_b.nextPosition,previousSlide=this.state.currentSlide;void 0!==nextSlides&&void 0!==nextPosition&&(\"function\"==typeof beforeChange&&beforeChange(nextSlides,this.getState()),this.isAnimationAllowed=!0,this.props.shouldResetAutoplay&&this.resetAutoplayInterval(),this.setState({transform:nextPosition,currentSlide:nextSlides},function(){\"function\"==typeof afterChange&&(Carousel.afterChangeTimeout=setTimeout(function(){afterChange(previousSlide,_this.getState())},_this.props.transitionDuration||defaultTransitionDuration))}))}},Carousel.prototype.previous=function(slidesHavePassed){var _this=this;void 0===slidesHavePassed&&(slidesHavePassed=0);var _a=this.props,afterChange=_a.afterChange,beforeChange=_a.beforeChange;if(!utils_1.notEnoughChildren(this.state)){var _b=utils_1.populatePreviousSlides(this.state,this.props,slidesHavePassed),nextSlides=_b.nextSlides,nextPosition=_b.nextPosition;if(void 0!==nextSlides&&void 0!==nextPosition){var previousSlide=this.state.currentSlide;\"function\"==typeof beforeChange&&beforeChange(nextSlides,this.getState()),this.isAnimationAllowed=!0,this.props.shouldResetAutoplay&&this.resetAutoplayInterval(),this.setState({transform:nextPosition,currentSlide:nextSlides},function(){\"function\"==typeof afterChange&&(Carousel.afterChangeTimeout2=setTimeout(function(){afterChange(previousSlide,_this.getState())},_this.props.transitionDuration||defaultTransitionDuration))})}}},Carousel.prototype.resetAutoplayInterval=function(){this.props.autoPlay&&(clearInterval(this.autoPlay),this.autoPlay=setInterval(this.next,this.props.autoPlaySpeed))},Carousel.prototype.componentWillUnmount=function(){window.removeEventListener(\"resize\",this.onResize),this.props.keyBoardControl&&window.removeEventListener(\"keyup\",this.onKeyUp),this.props.autoPlay&&this.autoPlay&&(clearInterval(this.autoPlay),this.autoPlay=void 0),this.itemsToShowTimeout&&clearTimeout(this.itemsToShowTimeout),Carousel.clonesTimeout&&clearTimeout(Carousel.clonesTimeout),Carousel.isInThrottleTimeout&&clearTimeout(Carousel.isInThrottleTimeout),Carousel.transformTimeout&&clearTimeout(Carousel.transformTimeout),Carousel.afterChangeTimeout&&clearTimeout(Carousel.afterChangeTimeout),Carousel.afterChangeTimeout2&&clearTimeout(Carousel.afterChangeTimeout2),Carousel.afterChangeTimeout3&&clearTimeout(Carousel.afterChangeTimeout3)},Carousel.prototype.resetMoveStatus=function(){this.onMove=!1,this.initialX=0,this.lastX=0,this.direction=\"\",this.initialY=0},Carousel.prototype.getCords=function(_a){var clientX=_a.clientX,clientY=_a.clientY;return{clientX:common_1.parsePosition(this.props,clientX),clientY:common_1.parsePosition(this.props,clientY)}},Carousel.prototype.handleDown=function(e){if(!(!types_1.isMouseMoveEvent(e)&&!this.props.swipeable||types_1.isMouseMoveEvent(e)&&!this.props.draggable||this.isInThrottle)){var _a=this.getCords(types_1.isMouseMoveEvent(e)?e:e.touches[0]),clientX=_a.clientX,clientY=_a.clientY;this.onMove=!0,this.initialX=clientX,this.initialY=clientY,this.lastX=clientX,this.isAnimationAllowed=!1}},Carousel.prototype.handleMove=function(e){if(!(!types_1.isMouseMoveEvent(e)&&!this.props.swipeable||types_1.isMouseMoveEvent(e)&&!this.props.draggable||utils_1.notEnoughChildren(this.state))){var _a=this.getCords(types_1.isMouseMoveEvent(e)?e:e.touches[0]),clientX=_a.clientX,clientY=_a.clientY,diffX=this.initialX-clientX,diffY=this.initialY-clientY;if(this.onMove){if(!(Math.abs(diffX)>Math.abs(diffY)))return;var _b=utils_1.populateSlidesOnMouseTouchMove(this.state,this.props,this.initialX,this.lastX,clientX,this.transformPlaceHolder),direction=_b.direction,nextPosition=_b.nextPosition,canContinue=_b.canContinue;direction&&(this.direction=direction,canContinue&&void 0!==nextPosition&&this.setTransformDirectly(nextPosition)),this.lastX=clientX}}},Carousel.prototype.handleOut=function(e){this.props.autoPlay&&!this.autoPlay&&(this.autoPlay=setInterval(this.next,this.props.autoPlaySpeed));var shouldDisableOnMobile=\"touchend\"===e.type&&!this.props.swipeable,shouldDisableOnDesktop=(\"mouseleave\"===e.type||\"mouseup\"===e.type)&&!this.props.draggable;if(!shouldDisableOnMobile&&!shouldDisableOnDesktop&&this.onMove){if(this.setAnimationDirectly(!0),\"right\"===this.direction)if(this.initialX-this.lastX>=this.props.minimumTouchDrag){var slidesHavePassed=Math.round((this.initialX-this.lastX)/this.state.itemWidth);this.next(slidesHavePassed)}else this.correctItemsPosition(this.state.itemWidth,!0,!0);if(\"left\"===this.direction)if(this.lastX-this.initialX>this.props.minimumTouchDrag){slidesHavePassed=Math.round((this.lastX-this.initialX)/this.state.itemWidth);this.previous(slidesHavePassed)}else this.correctItemsPosition(this.state.itemWidth,!0,!0);this.resetMoveStatus()}},Carousel.prototype.isInViewport=function(el){var _a=el.getBoundingClientRect(),_b=_a.top,top=void 0===_b?0:_b,_c=_a.left,left=void 0===_c?0:_c,_d=_a.bottom,bottom=void 0===_d?0:_d,_e=_a.right,right=void 0===_e?0:_e;return 0<=top&&0<=left&&bottom<=(window.innerHeight||document.documentElement.clientHeight)&&right<=(window.innerWidth||document.documentElement.clientWidth)},Carousel.prototype.isChildOfCarousel=function(el){return!!(el instanceof Element&&this.listRef&&this.listRef.current)&&this.listRef.current.contains(el)},Carousel.prototype.onKeyUp=function(e){var target=e.target;switch(e.keyCode){case 37:if(this.isChildOfCarousel(target))return this.previous();break;case 39:if(this.isChildOfCarousel(target))return this.next();break;case 9:if(this.isChildOfCarousel(target)&&target instanceof HTMLInputElement&&this.isInViewport(target))return this.next()}},Carousel.prototype.handleEnter=function(e){types_1.isMouseMoveEvent(e)&&this.autoPlay&&this.props.autoPlay&&this.props.pauseOnHover&&(clearInterval(this.autoPlay),this.autoPlay=void 0)},Carousel.prototype.goToSlide=function(slide,skipCallbacks,animationAllowed){var _this=this;if(void 0===animationAllowed&&(animationAllowed=!0),!this.isInThrottle){var itemWidth=this.state.itemWidth,_a=this.props,afterChange=_a.afterChange,beforeChange=_a.beforeChange,previousSlide=this.state.currentSlide;\"function\"!=typeof beforeChange||skipCallbacks&&(\"object\"!=typeof skipCallbacks||skipCallbacks.skipBeforeChange)||beforeChange(slide,this.getState()),this.isAnimationAllowed=animationAllowed,this.props.shouldResetAutoplay&&this.resetAutoplayInterval(),this.setState({currentSlide:slide,transform:-itemWidth*slide},function(){_this.props.infinite&&_this.correctClonesPosition({domLoaded:!0}),\"function\"!=typeof afterChange||skipCallbacks&&(\"object\"!=typeof skipCallbacks||skipCallbacks.skipAfterChange)||(Carousel.afterChangeTimeout3=setTimeout(function(){afterChange(previousSlide,_this.getState())},_this.props.transitionDuration||defaultTransitionDuration))})}},Carousel.prototype.getState=function(){return this.state},Carousel.prototype.renderLeftArrow=function(disbaled){var _this=this,_a=this.props,customLeftArrow=_a.customLeftArrow,rtl=_a.rtl;return React.createElement(Arrows_1.LeftArrow,{customLeftArrow:customLeftArrow,getState:function(){return _this.getState()},previous:this.previous,disabled:disbaled,rtl:rtl})},Carousel.prototype.renderRightArrow=function(disbaled){var _this=this,_a=this.props,customRightArrow=_a.customRightArrow,rtl=_a.rtl;return React.createElement(Arrows_1.RightArrow,{customRightArrow:customRightArrow,getState:function(){return _this.getState()},next:this.next,disabled:disbaled,rtl:rtl})},Carousel.prototype.renderButtonGroups=function(){var _this=this,customButtonGroup=this.props.customButtonGroup;return customButtonGroup?React.cloneElement(customButtonGroup,{previous:function(){return _this.previous()},next:function(){return _this.next()},goToSlide:function(slideIndex,skipCallbacks){return _this.goToSlide(slideIndex,skipCallbacks)},carouselState:this.getState()}):null},Carousel.prototype.renderDotsList=function(){var _this=this;return React.createElement(Dots_1.default,{state:this.state,props:this.props,goToSlide:this.goToSlide,getState:function(){return _this.getState()}})},Carousel.prototype.renderCarouselItems=function(){var clones=[];if(this.props.infinite){var childrenArr=React.Children.toArray(this.props.children);clones=utils_1.getClones(this.state.slidesToShow,childrenArr)}return React.createElement(CarouselItems_1.default,{clones:clones,goToSlide:this.goToSlide,state:this.state,notEnoughChildren:utils_1.notEnoughChildren(this.state),props:this.props})},Carousel.prototype.render=function(){var _a=this.props,deviceType=_a.deviceType,arrows=_a.arrows,renderArrowsWhenDisabled=_a.renderArrowsWhenDisabled,removeArrowOnDeviceType=_a.removeArrowOnDeviceType,infinite=_a.infinite,containerClass=_a.containerClass,sliderClass=_a.sliderClass,customTransition=_a.customTransition,additionalTransfrom=_a.additionalTransfrom,renderDotsOutside=_a.renderDotsOutside,renderButtonGroupOutside=_a.renderButtonGroupOutside,className=_a.className,rtl=_a.rtl;\"production\"!==process.env.NODE_ENV&&utils_1.throwError(this.state,this.props);var _b=utils_1.getInitialState(this.state,this.props),shouldRenderOnSSR=_b.shouldRenderOnSSR,shouldRenderAtAll=_b.shouldRenderAtAll,isLeftEndReach=utils_1.isInLeftEnd(this.state),isRightEndReach=utils_1.isInRightEnd(this.state),shouldShowArrows=arrows&&!(removeArrowOnDeviceType&&(deviceType&&-1<removeArrowOnDeviceType.indexOf(deviceType)||this.state.deviceType&&-1<removeArrowOnDeviceType.indexOf(this.state.deviceType)))&&!utils_1.notEnoughChildren(this.state)&&shouldRenderAtAll,disableLeftArrow=!infinite&&isLeftEndReach,disableRightArrow=!infinite&&isRightEndReach,currentTransform=common_1.getTransform(this.state,this.props);return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"react-multi-carousel-list \"+containerClass+\" \"+className,dir:rtl?\"rtl\":\"ltr\",ref:this.containerRef},React.createElement(\"ul\",{ref:this.listRef,className:\"react-multi-carousel-track \"+sliderClass,style:{transition:this.isAnimationAllowed?customTransition||defaultTransition:\"none\",overflow:shouldRenderOnSSR?\"hidden\":\"unset\",transform:\"translate3d(\"+(currentTransform+additionalTransfrom)+\"px,0,0)\"},onMouseMove:this.handleMove,onMouseDown:this.handleDown,onMouseUp:this.handleOut,onMouseEnter:this.handleEnter,onMouseLeave:this.handleOut,onTouchStart:this.handleDown,onTouchMove:this.handleMove,onTouchEnd:this.handleOut},this.renderCarouselItems()),shouldShowArrows&&(!disableLeftArrow||renderArrowsWhenDisabled)&&this.renderLeftArrow(disableLeftArrow),shouldShowArrows&&(!disableRightArrow||renderArrowsWhenDisabled)&&this.renderRightArrow(disableRightArrow),shouldRenderAtAll&&!renderButtonGroupOutside&&this.renderButtonGroups(),shouldRenderAtAll&&!renderDotsOutside&&this.renderDotsList()),shouldRenderAtAll&&renderDotsOutside&&this.renderDotsList(),shouldRenderAtAll&&renderButtonGroupOutside&&this.renderButtonGroups())},Carousel.defaultProps={slidesToSlide:1,infinite:!1,draggable:!0,swipeable:!0,arrows:!0,renderArrowsWhenDisabled:!1,containerClass:\"\",sliderClass:\"\",itemClass:\"\",keyBoardControl:!0,autoPlaySpeed:3e3,showDots:!1,renderDotsOutside:!1,renderButtonGroupOutside:!1,minimumTouchDrag:80,className:\"\",dotListClass:\"\",focusOnSelect:!1,centerMode:!1,additionalTransfrom:0,pauseOnHover:!0,shouldResetAutoplay:!0,rewind:!1,rtl:!1,rewindWithAnimation:!1},Carousel}(React.Component);exports.default=Carousel;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var React=require(\"react\"),utils_1=require(\"./utils\"),CarouselItems=function(_a){var props=_a.props,state=_a.state,goToSlide=_a.goToSlide,clones=_a.clones,notEnoughChildren=_a.notEnoughChildren,itemWidth=state.itemWidth,children=props.children,infinite=props.infinite,itemClass=props.itemClass,itemAriaLabel=props.itemAriaLabel,partialVisbile=props.partialVisbile,partialVisible=props.partialVisible,_b=utils_1.getInitialState(state,props),flexBisis=_b.flexBisis,shouldRenderOnSSR=_b.shouldRenderOnSSR,domFullyLoaded=_b.domFullyLoaded,partialVisibilityGutter=_b.partialVisibilityGutter;return _b.shouldRenderAtAll?(partialVisbile&&console.warn('WARNING: Please correct props name: \"partialVisible\" as old typo will be removed in future versions!'),React.createElement(React.Fragment,null,(infinite?clones:React.Children.toArray(children)).map(function(child,index){return React.createElement(\"li\",{key:index,\"data-index\":index,onClick:function(){props.focusOnSelect&&goToSlide(index)},\"aria-hidden\":utils_1.getIfSlideIsVisbile(index,state)?\"false\":\"true\",\"aria-label\":itemAriaLabel||(child.props.ariaLabel?child.props.ariaLabel:null),style:{flex:shouldRenderOnSSR?\"1 0 \"+flexBisis+\"%\":\"auto\",position:\"relative\",width:domFullyLoaded?((partialVisbile||partialVisible)&&partialVisibilityGutter&&!notEnoughChildren?itemWidth-partialVisibilityGutter:itemWidth)+\"px\":\"auto\"},className:\"react-multi-carousel-item \"+(utils_1.getIfSlideIsVisbile(index,state)?\"react-multi-carousel-item--active\":\"\")+\" \"+itemClass},child)}))):null};exports.default=CarouselItems;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var React=require(\"react\"),clones_1=require(\"./utils/clones\"),dots_1=require(\"./utils/dots\"),common_1=require(\"./utils/common\"),Dots=function(_a){var props=_a.props,state=_a.state,goToSlide=_a.goToSlide,getState=_a.getState,showDots=props.showDots,customDot=props.customDot,dotListClass=props.dotListClass,infinite=props.infinite,children=props.children;if(!showDots||common_1.notEnoughChildren(state))return null;var numberOfDotsToShow,currentSlide=state.currentSlide,slidesToShow=state.slidesToShow,slidesToSlide=common_1.getSlidesToSlide(state,props),childrenArr=React.Children.toArray(children);numberOfDotsToShow=infinite?Math.ceil(childrenArr.length/slidesToSlide):Math.ceil((childrenArr.length-slidesToShow)/slidesToSlide)+1;var nextSlidesTable=dots_1.getLookupTableForNextSlides(numberOfDotsToShow,state,props,childrenArr),lookupTable=clones_1.getOriginalIndexLookupTableByClones(slidesToShow,childrenArr),currentSlides=lookupTable[currentSlide];return React.createElement(\"ul\",{className:\"react-multi-carousel-dot-list \"+dotListClass},Array(numberOfDotsToShow).fill(0).map(function(_,index){var isActive,nextSlide;if(infinite){nextSlide=nextSlidesTable[index];var cloneIndex=lookupTable[nextSlide];isActive=currentSlides===cloneIndex||cloneIndex<=currentSlides&&currentSlides<cloneIndex+slidesToSlide}else{var maximumNextSlide=childrenArr.length-slidesToShow,possibileNextSlides=index*slidesToSlide;isActive=(nextSlide=maximumNextSlide<possibileNextSlides?maximumNextSlide:possibileNextSlides)===currentSlide||nextSlide<currentSlide&&currentSlide<nextSlide+slidesToSlide&&currentSlide<childrenArr.length-slidesToShow}return customDot?React.cloneElement(customDot,{index:index,active:isActive,key:index,onClick:function(){return goToSlide(nextSlide)},carouselState:getState()}):React.createElement(\"li\",{\"data-index\":index,key:index,className:\"react-multi-carousel-dot \"+(isActive?\"react-multi-carousel-dot--active\":\"\")},React.createElement(\"button\",{\"aria-label\":\"Go to slide \"+(index+1),onClick:function(){return goToSlide(nextSlide)}}))}))};exports.default=Dots;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var Carousel_1=require(\"./Carousel\");exports.default=Carousel_1.default;","\"use strict\";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])})(d,b)};return function(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}}();Object.defineProperty(exports,\"__esModule\",{value:!0});var React=require(\"react\");function isMouseMoveEvent(e){return\"clientY\"in e}exports.isMouseMoveEvent=isMouseMoveEvent;var Carousel=function(_super){function Carousel(){return null!==_super&&_super.apply(this,arguments)||this}return __extends(Carousel,_super),Carousel}(React.Component);exports.default=Carousel;","\"use strict\";function getOriginalCounterPart(index,_a,childrenArr){var slidesToShow=_a.slidesToShow,currentSlide=_a.currentSlide;return childrenArr.length>2*slidesToShow?index+2*slidesToShow:currentSlide>=childrenArr.length?childrenArr.length+index:index}function getOriginalIndexLookupTableByClones(slidesToShow,childrenArr){if(childrenArr.length>2*slidesToShow){for(var table={},firstBeginningOfClones=childrenArr.length-2*slidesToShow,firstEndOfClones=childrenArr.length-firstBeginningOfClones,firstCount=firstBeginningOfClones,i=0;i<firstEndOfClones;i++)table[i]=firstCount,firstCount++;var secondBeginningOfClones=childrenArr.length+firstEndOfClones,secondEndOfClones=secondBeginningOfClones+childrenArr.slice(0,2*slidesToShow).length,secondCount=0;for(i=secondBeginningOfClones;i<=secondEndOfClones;i++)table[i]=secondCount,secondCount++;var originalEnd=secondBeginningOfClones,originalCounter=0;for(i=firstEndOfClones;i<originalEnd;i++)table[i]=originalCounter,originalCounter++;return table}table={};var totalSlides=3*childrenArr.length,count=0;for(i=0;i<totalSlides;i++)table[i]=count,++count===childrenArr.length&&(count=0);return table}function getClones(slidesToShow,childrenArr){return childrenArr.length<slidesToShow?childrenArr:childrenArr.length>2*slidesToShow?childrenArr.slice(childrenArr.length-2*slidesToShow,childrenArr.length).concat(childrenArr,childrenArr.slice(0,2*slidesToShow)):childrenArr.concat(childrenArr,childrenArr)}function getInitialSlideInInfiniteMode(slidesToShow,childrenArr){return childrenArr.length>2*slidesToShow?2*slidesToShow:childrenArr.length}function checkClonesPosition(_a,childrenArr,props){var isReachingTheEnd,currentSlide=_a.currentSlide,slidesToShow=_a.slidesToShow,itemWidth=_a.itemWidth,totalItems=_a.totalItems,nextSlide=0,nextPosition=0,isReachingTheStart=0===currentSlide,originalFirstSlide=childrenArr.length-(childrenArr.length-2*slidesToShow);return childrenArr.length<slidesToShow?(nextPosition=nextSlide=0,isReachingTheStart=isReachingTheEnd=!1):childrenArr.length>2*slidesToShow?((isReachingTheEnd=currentSlide>=originalFirstSlide+childrenArr.length)&&(nextPosition=-itemWidth*(nextSlide=currentSlide-childrenArr.length)),isReachingTheStart&&(nextPosition=-itemWidth*(nextSlide=originalFirstSlide+(childrenArr.length-2*slidesToShow)))):((isReachingTheEnd=currentSlide>=2*childrenArr.length)&&(nextPosition=-itemWidth*(nextSlide=currentSlide-childrenArr.length)),isReachingTheStart&&(nextPosition=props.showDots?-itemWidth*(nextSlide=childrenArr.length):-itemWidth*(nextSlide=totalItems/3))),{isReachingTheEnd:isReachingTheEnd,isReachingTheStart:isReachingTheStart,nextSlide:nextSlide,nextPosition:nextPosition}}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.getOriginalCounterPart=getOriginalCounterPart,exports.getOriginalIndexLookupTableByClones=getOriginalIndexLookupTableByClones,exports.getClones=getClones,exports.getInitialSlideInInfiniteMode=getInitialSlideInInfiniteMode,exports.checkClonesPosition=checkClonesPosition;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var elementWidth_1=require(\"./elementWidth\");function notEnoughChildren(state){var slidesToShow=state.slidesToShow;return state.totalItems<slidesToShow}function getInitialState(state,props){var flexBisis,domLoaded=state.domLoaded,slidesToShow=state.slidesToShow,containerWidth=state.containerWidth,itemWidth=state.itemWidth,deviceType=props.deviceType,responsive=props.responsive,ssr=props.ssr,partialVisbile=props.partialVisbile,partialVisible=props.partialVisible,domFullyLoaded=Boolean(domLoaded&&slidesToShow&&containerWidth&&itemWidth);ssr&&deviceType&&!domFullyLoaded&&(flexBisis=elementWidth_1.getWidthFromDeviceType(deviceType,responsive));var shouldRenderOnSSR=Boolean(ssr&&deviceType&&!domFullyLoaded&&flexBisis);return{shouldRenderOnSSR:shouldRenderOnSSR,flexBisis:flexBisis,domFullyLoaded:domFullyLoaded,partialVisibilityGutter:elementWidth_1.getPartialVisibilityGutter(responsive,partialVisbile||partialVisible,deviceType,state.deviceType),shouldRenderAtAll:shouldRenderOnSSR||domFullyLoaded}}function getIfSlideIsVisbile(index,state){var currentSlide=state.currentSlide,slidesToShow=state.slidesToShow;return currentSlide<=index&&index<currentSlide+slidesToShow}function getTransformForCenterMode(state,props,transformPlaceHolder){var transform=transformPlaceHolder||state.transform;return!props.infinite&&0===state.currentSlide||notEnoughChildren(state)?transform:transform+state.itemWidth/2}function isInLeftEnd(_a){return!(0<_a.currentSlide)}function isInRightEnd(_a){var currentSlide=_a.currentSlide,totalItems=_a.totalItems;return!(currentSlide+_a.slidesToShow<totalItems)}function getTransformForPartialVsibile(state,partialVisibilityGutter,props,transformPlaceHolder){void 0===partialVisibilityGutter&&(partialVisibilityGutter=0);var currentSlide=state.currentSlide,slidesToShow=state.slidesToShow,isRightEndReach=isInRightEnd(state),shouldRemoveRightGutter=!props.infinite&&isRightEndReach,baseTransform=transformPlaceHolder||state.transform;if(notEnoughChildren(state))return baseTransform;var transform=baseTransform+currentSlide*partialVisibilityGutter;return shouldRemoveRightGutter?transform+(state.containerWidth-(state.itemWidth-partialVisibilityGutter)*slidesToShow):transform}function parsePosition(props,position){return props.rtl?-1*position:position}function getTransform(state,props,transformPlaceHolder){var partialVisbile=props.partialVisbile,partialVisible=props.partialVisible,responsive=props.responsive,deviceType=props.deviceType,centerMode=props.centerMode,transform=transformPlaceHolder||state.transform,partialVisibilityGutter=elementWidth_1.getPartialVisibilityGutter(responsive,partialVisbile||partialVisible,deviceType,state.deviceType);return parsePosition(props,partialVisible||partialVisbile?getTransformForPartialVsibile(state,partialVisibilityGutter,props,transformPlaceHolder):centerMode?getTransformForCenterMode(state,props,transformPlaceHolder):transform)}function getSlidesToSlide(state,props){var domLoaded=state.domLoaded,slidesToShow=state.slidesToShow,containerWidth=state.containerWidth,itemWidth=state.itemWidth,deviceType=props.deviceType,responsive=props.responsive,slidesToScroll=props.slidesToSlide||1,domFullyLoaded=Boolean(domLoaded&&slidesToShow&&containerWidth&&itemWidth);return props.ssr&&props.deviceType&&!domFullyLoaded&&Object.keys(responsive).forEach(function(device){var slidesToSlide=responsive[device].slidesToSlide;deviceType===device&&slidesToSlide&&(slidesToScroll=slidesToSlide)}),domFullyLoaded&&Object.keys(responsive).forEach(function(item){var _a=responsive[item],breakpoint=_a.breakpoint,slidesToSlide=_a.slidesToSlide,max=breakpoint.max,min=breakpoint.min;slidesToSlide&&window.innerWidth>=min&&window.innerWidth<=max&&(slidesToScroll=slidesToSlide)}),slidesToScroll}exports.notEnoughChildren=notEnoughChildren,exports.getInitialState=getInitialState,exports.getIfSlideIsVisbile=getIfSlideIsVisbile,exports.getTransformForCenterMode=getTransformForCenterMode,exports.isInLeftEnd=isInLeftEnd,exports.isInRightEnd=isInRightEnd,exports.getTransformForPartialVsibile=getTransformForPartialVsibile,exports.parsePosition=parsePosition,exports.getTransform=getTransform,exports.getSlidesToSlide=getSlidesToSlide;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var clones_1=require(\"./clones\"),common_1=require(\"./common\");function getLookupTableForNextSlides(numberOfDotsToShow,state,props,childrenArr){var table={},slidesToSlide=common_1.getSlidesToSlide(state,props);return Array(numberOfDotsToShow).fill(0).forEach(function(_,i){var nextSlide=clones_1.getOriginalCounterPart(i,state,childrenArr);if(0===i)table[0]=nextSlide;else{var now=table[i-1]+slidesToSlide;table[i]=now}}),table}exports.getLookupTableForNextSlides=getLookupTableForNextSlides;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var hasWarnAboutTypo=!1;function getPartialVisibilityGutter(responsive,partialVisible,serverSideDeviceType,clientSideDeviceType){var gutter=0,deviceType=clientSideDeviceType||serverSideDeviceType;return partialVisible&&deviceType&&(!hasWarnAboutTypo&&\"production\"!==process.env.NODE_ENV&&responsive[deviceType].paritialVisibilityGutter&&(hasWarnAboutTypo=!0,console.warn(\"You appear to be using paritialVisibilityGutter instead of partialVisibilityGutter which will be moved to partialVisibilityGutter in the future completely\")),gutter=responsive[deviceType].partialVisibilityGutter||responsive[deviceType].paritialVisibilityGutter),gutter}function getWidthFromDeviceType(deviceType,responsive){var itemWidth;responsive[deviceType]&&(itemWidth=(100/responsive[deviceType].items).toFixed(1));return itemWidth}function getItemClientSideWidth(props,slidesToShow,containerWidth){return Math.round(containerWidth/(slidesToShow+(props.centerMode?1:0)))}exports.getPartialVisibilityGutter=getPartialVisibilityGutter,exports.getWidthFromDeviceType=getWidthFromDeviceType,exports.getItemClientSideWidth=getItemClientSideWidth;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var clones_1=require(\"./clones\");exports.getOriginalCounterPart=clones_1.getOriginalCounterPart,exports.getClones=clones_1.getClones,exports.checkClonesPosition=clones_1.checkClonesPosition,exports.getInitialSlideInInfiniteMode=clones_1.getInitialSlideInInfiniteMode;var elementWidth_1=require(\"./elementWidth\");exports.getWidthFromDeviceType=elementWidth_1.getWidthFromDeviceType,exports.getPartialVisibilityGutter=elementWidth_1.getPartialVisibilityGutter,exports.getItemClientSideWidth=elementWidth_1.getItemClientSideWidth;var common_1=require(\"./common\");exports.getInitialState=common_1.getInitialState,exports.getIfSlideIsVisbile=common_1.getIfSlideIsVisbile,exports.getTransformForCenterMode=common_1.getTransformForCenterMode,exports.getTransformForPartialVsibile=common_1.getTransformForPartialVsibile,exports.isInLeftEnd=common_1.isInLeftEnd,exports.isInRightEnd=common_1.isInRightEnd,exports.notEnoughChildren=common_1.notEnoughChildren,exports.getSlidesToSlide=common_1.getSlidesToSlide;var throttle_1=require(\"./throttle\");exports.throttle=throttle_1.default;var throwError_1=require(\"./throwError\");exports.throwError=throwError_1.default;var next_1=require(\"./next\");exports.populateNextSlides=next_1.populateNextSlides;var previous_1=require(\"./previous\");exports.populatePreviousSlides=previous_1.populatePreviousSlides;var mouseOrTouchMove_1=require(\"./mouseOrTouchMove\");exports.populateSlidesOnMouseTouchMove=mouseOrTouchMove_1.populateSlidesOnMouseTouchMove;","\"use strict\";function populateSlidesOnMouseTouchMove(state,props,initialX,lastX,clientX,transformPlaceHolder){var direction,nextPosition,itemWidth=state.itemWidth,slidesToShow=state.slidesToShow,totalItems=state.totalItems,currentSlide=state.currentSlide,infinite=props.infinite,canContinue=!1,slidesHavePassedRight=Math.round((initialX-lastX)/itemWidth),slidesHavePassedLeft=Math.round((lastX-initialX)/itemWidth),isMovingLeft=initialX<clientX;if(clientX<initialX&&!!(slidesHavePassedRight<=slidesToShow)){direction=\"right\";var translateXLimit=Math.abs(-itemWidth*(totalItems-slidesToShow)),nextTranslate=transformPlaceHolder-(lastX-clientX),isLastSlide=currentSlide===totalItems-slidesToShow;(Math.abs(nextTranslate)<=translateXLimit||isLastSlide&&infinite)&&(nextPosition=nextTranslate,canContinue=!0)}isMovingLeft&&slidesHavePassedLeft<=slidesToShow&&(direction=\"left\",((nextTranslate=transformPlaceHolder+(clientX-lastX))<=0||0===currentSlide&&infinite)&&(canContinue=!0,nextPosition=nextTranslate));return{direction:direction,nextPosition:nextPosition,canContinue:canContinue}}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.populateSlidesOnMouseTouchMove=populateSlidesOnMouseTouchMove;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var common_1=require(\"./common\");function populateNextSlides(state,props,slidesHavePassed){void 0===slidesHavePassed&&(slidesHavePassed=0);var nextSlides,nextPosition,slidesToShow=state.slidesToShow,currentSlide=state.currentSlide,itemWidth=state.itemWidth,totalItems=state.totalItems,slidesToSlide=common_1.getSlidesToSlide(state,props),nextMaximumSlides=currentSlide+1+slidesHavePassed+slidesToShow+(0<slidesHavePassed?0:slidesToSlide);return nextPosition=nextMaximumSlides<=totalItems?-itemWidth*(nextSlides=currentSlide+slidesHavePassed+(0<slidesHavePassed?0:slidesToSlide)):totalItems<nextMaximumSlides&&currentSlide!==totalItems-slidesToShow?-itemWidth*(nextSlides=totalItems-slidesToShow):nextSlides=void 0,{nextSlides:nextSlides,nextPosition:nextPosition}}exports.populateNextSlides=populateNextSlides;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var React=require(\"react\"),common_1=require(\"./common\"),common_2=require(\"./common\");function populatePreviousSlides(state,props,slidesHavePassed){void 0===slidesHavePassed&&(slidesHavePassed=0);var nextSlides,nextPosition,currentSlide=state.currentSlide,itemWidth=state.itemWidth,slidesToShow=state.slidesToShow,children=props.children,showDots=props.showDots,infinite=props.infinite,slidesToSlide=common_1.getSlidesToSlide(state,props),nextMaximumSlides=currentSlide-slidesHavePassed-(0<slidesHavePassed?0:slidesToSlide),additionalSlides=(React.Children.toArray(children).length-slidesToShow)%slidesToSlide;return nextPosition=0<=nextMaximumSlides?(nextSlides=nextMaximumSlides,showDots&&!infinite&&0<additionalSlides&&common_2.isInRightEnd(state)&&(nextSlides=currentSlide-additionalSlides),-itemWidth*nextSlides):nextSlides=nextMaximumSlides<0&&0!==currentSlide?0:void 0,{nextSlides:nextSlides,nextPosition:nextPosition}}exports.populatePreviousSlides=populatePreviousSlides;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var throttle=function(func,limit,setIsInThrottle){var inThrottle;return function(){var args=arguments;inThrottle||(func.apply(this,args),inThrottle=!0,\"function\"==typeof setIsInThrottle&&setIsInThrottle(!0),setTimeout(function(){inThrottle=!1,\"function\"==typeof setIsInThrottle&&setIsInThrottle(!1)},limit))}};exports.default=throttle;","\"use strict\";function throwError(state,props){var partialVisbile=props.partialVisbile,partialVisible=props.partialVisible,centerMode=props.centerMode,ssr=props.ssr,responsive=props.responsive;if((partialVisbile||partialVisible)&&centerMode)throw new Error(\"center mode can not be used at the same time with partialVisible\");if(!responsive)throw ssr?new Error(\"ssr mode need to be used in conjunction with responsive prop\"):new Error(\"Responsive prop is needed for deciding the amount of items to show on the screen\");if(responsive&&\"object\"!=typeof responsive)throw new Error(\"responsive prop must be an object\")}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=throwError;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.throttle\"));\n\nvar _shallowequal = _interopRequireDefault(require(\"shallowequal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar TrackVisibility =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inheritsLoose(TrackVisibility, _PureComponent);\n\n  function TrackVisibility(props) {\n    var _this;\n\n    _this = _PureComponent.call(this, props) || this;\n\n    _this.isVisible = function (_ref, windowWidth, windowHeight) {\n      var top = _ref.top,\n          left = _ref.left,\n          bottom = _ref.bottom,\n          right = _ref.right,\n          width = _ref.width,\n          height = _ref.height;\n      var _this$props = _this.props,\n          offset = _this$props.offset,\n          partialVisibility = _this$props.partialVisibility;\n\n      if (top + right + bottom + left === 0) {\n        return false;\n      }\n\n      var topThreshold = 0 - offset;\n      var leftThreshold = 0 - offset;\n      var widthCheck = windowWidth + offset;\n      var heightCheck = windowHeight + offset;\n      return partialVisibility ? top + height >= topThreshold && left + width >= leftThreshold && bottom - height <= heightCheck && right - width <= widthCheck : top >= topThreshold && left >= leftThreshold && bottom <= heightCheck && right <= widthCheck;\n    };\n\n    _this.isComponentVisible = function () {\n      setTimeout(function () {\n        // isComponentVisible might be called from componentDidMount, before component ref is assigned\n        if (!_this.nodeRef || !_this.nodeRef.getBoundingClientRect) return;\n        var html = document.documentElement;\n        var once = _this.props.once;\n\n        var boundingClientRect = _this.nodeRef.getBoundingClientRect();\n\n        var windowWidth = window.innerWidth || html.clientWidth;\n        var windowHeight = window.innerHeight || html.clientHeight;\n\n        var isVisible = _this.isVisible(boundingClientRect, windowWidth, windowHeight);\n\n        if (isVisible && once) {\n          _this.removeListener();\n        }\n\n        _this.setState({\n          isVisible: isVisible\n        });\n      }, 0);\n    };\n\n    _this.setNodeRef = function (ref) {\n      return _this.nodeRef = ref;\n    };\n\n    _this.ownProps = Object.keys(TrackVisibility.propTypes);\n    _this.state = {\n      isVisible: false\n    };\n    _this.throttleCb = (0, _lodash.default)(_this.isComponentVisible, _this.props.throttleInterval);\n    props.nodeRef && _this.setNodeRef(props.nodeRef);\n    return _this;\n  }\n\n  var _proto = TrackVisibility.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.attachListener();\n    this.isComponentVisible();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!(0, _shallowequal.default)(this.getChildProps(this.props), this.getChildProps(prevProps))) {\n      this.isComponentVisible();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.removeListener();\n  };\n\n  _proto.attachListener = function attachListener() {\n    window.addEventListener('scroll', this.throttleCb);\n    window.addEventListener('resize', this.throttleCb);\n  };\n\n  _proto.removeListener = function removeListener() {\n    window.removeEventListener('scroll', this.throttleCb);\n    window.removeEventListener('resize', this.throttleCb);\n  };\n\n  _proto.getChildProps = function getChildProps(props) {\n    var _this2 = this;\n\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var childProps = {};\n    Object.keys(props).forEach(function (key) {\n      if (_this2.ownProps.indexOf(key) === -1) {\n        childProps[key] = props[key];\n      }\n    });\n    return childProps;\n  };\n\n  _proto.getChildren = function getChildren() {\n    var _this3 = this;\n\n    if (typeof this.props.children === 'function') {\n      return this.props.children(_extends({}, this.getChildProps(), {\n        isVisible: this.state.isVisible\n      }));\n    }\n\n    return _react.default.Children.map(this.props.children, function (child) {\n      return _react.default.cloneElement(child, _extends({}, _this3.getChildProps(), {\n        isVisible: _this3.state.isVisible\n      }));\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        style = _this$props2.style,\n        nodeRef = _this$props2.nodeRef,\n        Tag = _this$props2.tag;\n\n    var props = _extends({}, className && {\n      className: className\n    }, style && {\n      style: style\n    });\n\n    return _react.default.createElement(Tag, _extends({\n      ref: !nodeRef && this.setNodeRef\n    }, props), this.getChildren());\n  };\n\n  return TrackVisibility;\n}(_react.PureComponent);\n\nexports.default = TrackVisibility;\nTrackVisibility.propTypes = {\n  /**\n   * Define if the visibility need to be tracked once\n   */\n  once: _propTypes.default.bool,\n\n  /**\n   * Tweak the throttle interval\n   * Check https://css-tricks.com/debouncing-throttling-explained-examples/ for more details\n   */\n  throttleInterval: function throttleInterval(props, propName, component) {\n    var currentProp = props[propName];\n\n    if (!Number.isInteger(currentProp) || currentProp < 0) {\n      return new Error(\"The \" + propName + \" prop you provided to \" + component + \" is not a valid integer >= 0.\");\n    }\n\n    return null;\n  },\n\n  /**\n   * Pass one or more children to track\n   */\n  children: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.element, _propTypes.default.arrayOf(_propTypes.default.element)]),\n\n  /**\n   * Additional style to apply\n   */\n  style: _propTypes.default.object,\n\n  /**\n   * Additional className to apply\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * Define an offset. Can be useful for lazy loading\n   */\n  offset: _propTypes.default.number,\n\n  /**\n   * Update the visibility state as soon as a part of the tracked component is visible\n   */\n  partialVisibility: _propTypes.default.bool,\n\n  /**\n   * Exposed for testing but allows node other than internal wrapping <div /> to be tracked\n   * for visibility\n   */\n  nodeRef: _propTypes.default.object,\n\n  /**\n   * Define a custom tag\n   */\n  tag: _propTypes.default.string\n};\nTrackVisibility.defaultProps = {\n  once: false,\n  throttleInterval: 150,\n  offset: 0,\n  partialVisibility: false,\n  tag: 'div'\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _TrackVisibility = _interopRequireDefault(require(\"./TrackVisibility\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n* This file seems a bit useless anyway\n* */\nvar _default = _TrackVisibility.default;\nexports.default = _default;","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"7da95b79\" + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"portfolio:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/JBS/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkportfolio\"] = self[\"webpackChunkportfolio\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLogo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 841.9 595.3\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"#61DAFB\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 420.9,\n    cy: 296.5,\n    r: 45.7\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M520.5 78.1z\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.6ce24c58023cc2f8fd88fe9d219db6c6.svg\";\nexport { ForwardRef as ReactComponent };","import * as React from 'react';\nconst SelectableContext = /*#__PURE__*/React.createContext(null);\nexport const makeEventKey = (eventKey, href = null) => {\n  if (eventKey != null) return String(eventKey);\n  return href || null;\n};\nexport default SelectableContext;","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import invariant from 'invariant';\n\nvar noop = function noop() {};\n\nfunction readOnlyPropType(handler, name) {\n  return function (props, propName) {\n    if (props[propName] !== undefined) {\n      if (!props[handler]) {\n        return new Error(\"You have provided a `\" + propName + \"` prop to `\" + name + \"` \" + (\"without an `\" + handler + \"` handler prop. This will render a read-only field. \") + (\"If the field should be mutable use `\" + defaultKey(propName) + \"`. \") + (\"Otherwise, set `\" + handler + \"`.\"));\n      }\n    }\n  };\n}\n\nexport function uncontrolledPropTypes(controlledValues, displayName) {\n  var propTypes = {};\n  Object.keys(controlledValues).forEach(function (prop) {\n    // add default propTypes for folks that use runtime checks\n    propTypes[defaultKey(prop)] = noop;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var handler = controlledValues[prop];\n      !(typeof handler === 'string' && handler.trim().length) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop) : invariant(false) : void 0;\n      propTypes[prop] = readOnlyPropType(handler, displayName);\n    }\n  });\n  return propTypes;\n}\nexport function isProp(props, prop) {\n  return props[prop] !== undefined;\n}\nexport function defaultKey(key) {\n  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nexport function canAcceptRef(component) {\n  return !!component && (typeof component !== 'function' || component.prototype && component.prototype.isReactComponent);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nimport { useCallback, useRef, useState } from 'react';\nimport * as Utils from './utils';\n\nfunction useUncontrolledProp(propValue, defaultValue, handler) {\n  var wasPropRef = useRef(propValue !== undefined);\n\n  var _useState = useState(defaultValue),\n      stateValue = _useState[0],\n      setState = _useState[1];\n\n  var isProp = propValue !== undefined;\n  var wasProp = wasPropRef.current;\n  wasPropRef.current = isProp;\n  /**\n   * If a prop switches from controlled to Uncontrolled\n   * reset its value to the defaultValue\n   */\n\n  if (!isProp && wasProp && stateValue !== defaultValue) {\n    setState(defaultValue);\n  }\n\n  return [isProp ? propValue : stateValue, useCallback(function (value) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (handler) handler.apply(void 0, [value].concat(args));\n    setState(value);\n  }, [handler])];\n}\n\nexport { useUncontrolledProp };\nexport default function useUncontrolled(props, config) {\n  return Object.keys(config).reduce(function (result, fieldName) {\n    var _extends2;\n\n    var _ref = result,\n        defaultValue = _ref[Utils.defaultKey(fieldName)],\n        propsValue = _ref[fieldName],\n        rest = _objectWithoutPropertiesLoose(_ref, [Utils.defaultKey(fieldName), fieldName].map(_toPropertyKey));\n\n    var handlerName = config[fieldName];\n\n    var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]),\n        value = _useUncontrolledProp[0],\n        handler = _useUncontrolledProp[1];\n\n    return _extends({}, rest, (_extends2 = {}, _extends2[fieldName] = value, _extends2[handlerName] = handler, _extends2));\n  }, props);\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n","\"use client\";\n\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DEFAULT_BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport const DEFAULT_MIN_BREAKPOINT = 'xs';\nconst ThemeContext = /*#__PURE__*/React.createContext({\n  prefixes: {},\n  breakpoints: DEFAULT_BREAKPOINTS,\n  minBreakpoint: DEFAULT_MIN_BREAKPOINT\n});\nconst {\n  Consumer,\n  Provider\n} = ThemeContext;\nfunction ThemeProvider({\n  prefixes = {},\n  breakpoints = DEFAULT_BREAKPOINTS,\n  minBreakpoint = DEFAULT_MIN_BREAKPOINT,\n  dir,\n  children\n}) {\n  const contextValue = useMemo(() => ({\n    prefixes: {\n      ...prefixes\n    },\n    breakpoints,\n    minBreakpoint,\n    dir\n  }), [prefixes, breakpoints, minBreakpoint, dir]);\n  return /*#__PURE__*/_jsx(Provider, {\n    value: contextValue,\n    children: children\n  });\n}\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const {\n    prefixes\n  } = useContext(ThemeContext);\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\nexport function useBootstrapBreakpoints() {\n  const {\n    breakpoints\n  } = useContext(ThemeContext);\n  return breakpoints;\n}\nexport function useBootstrapMinBreakpoint() {\n  const {\n    minBreakpoint\n  } = useContext(ThemeContext);\n  return minBreakpoint;\n}\nexport function useIsRTL() {\n  const {\n    dir\n  } = useContext(ThemeContext);\n  return dir === 'rtl';\n}\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent;\n  // If it's a functional component make sure we don't break it with a ref\n  const {\n    prefix,\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\n  } = opts;\n  const Wrapped = /*#__PURE__*/React.forwardRef(({\n    ...props\n  }, ref) => {\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Component, {\n      ...props,\n      bsPrefix: bsPrefix\n    });\n  });\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\n  return Wrapped;\n}\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarBrand = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  as,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-brand');\n  const Component = as || (props.href ? 'a' : 'span');\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    ref: ref,\n    className: classNames(className, bsPrefix)\n  });\n});\nNavbarBrand.displayName = 'NavbarBrand';\nexport default NavbarBrand;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","import ownerWindow from './ownerWindow';\n/**\n * Returns one or all computed style properties of an element.\n * \n * @param node the element\n * @param psuedoElement the style property\n */\n\nexport default function getComputedStyle(node, psuedoElement) {\n  return ownerWindow(node).getComputedStyle(node, psuedoElement);\n}","import ownerDocument from './ownerDocument';\n/**\n * Returns the owner window of a given element.\n * \n * @param node the element\n */\n\nexport default function ownerWindow(node) {\n  var doc = ownerDocument(node);\n  return doc && doc.defaultView || window;\n}","var rUpper = /([A-Z])/g;\nexport default function hyphenate(string) {\n  return string.replace(rUpper, '-$1').toLowerCase();\n}","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js\n */\nimport hyphenate from './hyphenate';\nvar msPattern = /^ms-/;\nexport default function hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}","var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;\nexport default function isTransform(value) {\n  return !!(value && supportedTransforms.test(value));\n}","import getComputedStyle from './getComputedStyle';\nimport hyphenate from './hyphenateStyle';\nimport isTransform from './isTransform';\n\nfunction style(node, property) {\n  var css = '';\n  var transforms = '';\n\n  if (typeof property === 'string') {\n    return node.style.getPropertyValue(hyphenate(property)) || getComputedStyle(node).getPropertyValue(hyphenate(property));\n  }\n\n  Object.keys(property).forEach(function (key) {\n    var value = property[key];\n\n    if (!value && value !== 0) {\n      node.style.removeProperty(hyphenate(key));\n    } else if (isTransform(key)) {\n      transforms += key + \"(\" + value + \") \";\n    } else {\n      css += hyphenate(key) + \": \" + value + \";\";\n    }\n  });\n\n  if (transforms) {\n    css += \"transform: \" + transforms + \";\";\n  }\n\n  node.style.cssText += \";\" + css;\n}\n\nexport default style;","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default {\n  disabled: false\n};","import React from 'react';\nexport default React.createContext(null);","export var forceReflow = function forceReflow(node) {\n  return node.scrollTop;\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { forceReflow } from './utils/reflow';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749\n          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.\n          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.\n\n          if (node) forceReflow(node);\n        }\n\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","import css from './css';\nimport listen from './listen';\nimport triggerEvent from './triggerEvent';\n\nfunction parseDuration(node) {\n  var str = css(node, 'transitionDuration') || '';\n  var mult = str.indexOf('ms') === -1 ? 1000 : 1;\n  return parseFloat(str) * mult;\n}\n\nfunction emulateTransitionEnd(element, duration, padding) {\n  if (padding === void 0) {\n    padding = 5;\n  }\n\n  var called = false;\n  var handle = setTimeout(function () {\n    if (!called) triggerEvent(element, 'transitionend', true);\n  }, duration + padding);\n  var remove = listen(element, 'transitionend', function () {\n    called = true;\n  }, {\n    once: true\n  });\n  return function () {\n    clearTimeout(handle);\n    remove();\n  };\n}\n\nexport default function transitionEnd(element, handler, duration, padding) {\n  if (duration == null) duration = parseDuration(element) || 0;\n  var removeEmulate = emulateTransitionEnd(element, duration, padding);\n  var remove = listen(element, 'transitionend', handler);\n  return function () {\n    removeEmulate();\n    remove();\n  };\n}","/**\n * Triggers an event on a given element.\n * \n * @param node the element\n * @param eventName the event name to trigger\n * @param bubbles whether the event should bubble up\n * @param cancelable whether the event should be cancelable\n */\nexport default function triggerEvent(node, eventName, bubbles, cancelable) {\n  if (bubbles === void 0) {\n    bubbles = false;\n  }\n\n  if (cancelable === void 0) {\n    cancelable = true;\n  }\n\n  if (node) {\n    var event = document.createEvent('HTMLEvents');\n    event.initEvent(eventName, bubbles, cancelable);\n    node.dispatchEvent(event);\n  }\n}","import css from 'dom-helpers/css';\nimport transitionEnd from 'dom-helpers/transitionEnd';\nfunction parseDuration(node, property) {\n  const str = css(node, property) || '';\n  const mult = str.indexOf('ms') === -1 ? 1000 : 1;\n  return parseFloat(str) * mult;\n}\nexport default function transitionEndListener(element, handler) {\n  const duration = parseDuration(element, 'transitionDuration');\n  const delay = parseDuration(element, 'transitionDelay');\n  const remove = transitionEnd(element, e => {\n    if (e.target === element) {\n      remove();\n      handler(e);\n    }\n  }, duration + delay);\n}","/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\nfunction createChainedFunction(...funcs) {\n  return funcs.filter(f => f != null).reduce((acc, f) => {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n    if (acc === null) return f;\n    return function chainedFunction(...args) {\n      // @ts-ignore\n      acc.apply(this, args);\n      // @ts-ignore\n      f.apply(this, args);\n    };\n  }, null);\n}\nexport default createChainedFunction;","// reading a dimension prop will cause the browser to recalculate,\n// which will let our animations work\nexport default function triggerBrowserReflow(node) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  node.offsetHeight;\n}","import { useMemo } from 'react';\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\nexport default useMergedRefs;","\"use client\";\n\nimport React, { useCallback, useRef } from 'react';\nimport Transition from 'react-transition-group/Transition';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport safeFindDOMNode from './safeFindDOMNode';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Normalizes Transition callbacks when nodeRef is used.\nconst TransitionWrapper = /*#__PURE__*/React.forwardRef(({\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  addEndListener,\n  children,\n  childRef,\n  ...props\n}, ref) => {\n  const nodeRef = useRef(null);\n  const mergedRef = useMergedRefs(nodeRef, childRef);\n  const attachRef = r => {\n    mergedRef(safeFindDOMNode(r));\n  };\n  const normalize = callback => param => {\n    if (callback && nodeRef.current) {\n      callback(nodeRef.current, param);\n    }\n  };\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  const handleEnter = useCallback(normalize(onEnter), [onEnter]);\n  const handleEntering = useCallback(normalize(onEntering), [onEntering]);\n  const handleEntered = useCallback(normalize(onEntered), [onEntered]);\n  const handleExit = useCallback(normalize(onExit), [onExit]);\n  const handleExiting = useCallback(normalize(onExiting), [onExiting]);\n  const handleExited = useCallback(normalize(onExited), [onExited]);\n  const handleAddEndListener = useCallback(normalize(addEndListener), [addEndListener]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  return /*#__PURE__*/_jsx(Transition, {\n    ref: ref,\n    ...props,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    onExiting: handleExiting,\n    addEndListener: handleAddEndListener,\n    nodeRef: nodeRef,\n    children: typeof children === 'function' ? (status, innerProps) =>\n    // TODO: Types for RTG missing innerProps, so need to cast.\n    children(status, {\n      ...innerProps,\n      ref: attachRef\n    }) : /*#__PURE__*/React.cloneElement(children, {\n      ref: attachRef\n    })\n  });\n});\nexport default TransitionWrapper;","import ReactDOM from 'react-dom';\nexport default function safeFindDOMNode(componentOrElement) {\n  if (componentOrElement && 'setState' in componentOrElement) {\n    return ReactDOM.findDOMNode(componentOrElement);\n  }\n  return componentOrElement != null ? componentOrElement : null;\n}","import classNames from 'classnames';\nimport css from 'dom-helpers/css';\nimport React, { useMemo } from 'react';\nimport { ENTERED, ENTERING, EXITED, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport createChainedFunction from './createChainedFunction';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MARGINS = {\n  height: ['marginTop', 'marginBottom'],\n  width: ['marginLeft', 'marginRight']\n};\nfunction getDefaultDimensionValue(dimension, elem) {\n  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;\n  const value = elem[offset];\n  const margins = MARGINS[dimension];\n  return value +\n  // @ts-ignore\n  parseInt(css(elem, margins[0]), 10) +\n  // @ts-ignore\n  parseInt(css(elem, margins[1]), 10);\n}\nconst collapseStyles = {\n  [EXITED]: 'collapse',\n  [EXITING]: 'collapsing',\n  [ENTERING]: 'collapsing',\n  [ENTERED]: 'collapse show'\n};\nconst Collapse = /*#__PURE__*/React.forwardRef(({\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  className,\n  children,\n  dimension = 'height',\n  in: inProp = false,\n  timeout = 300,\n  mountOnEnter = false,\n  unmountOnExit = false,\n  appear = false,\n  getDimensionValue = getDefaultDimensionValue,\n  ...props\n}, ref) => {\n  /* Compute dimension */\n  const computedDimension = typeof dimension === 'function' ? dimension() : dimension;\n\n  /* -- Expanding -- */\n  const handleEnter = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = '0';\n  }, onEnter), [computedDimension, onEnter]);\n  const handleEntering = useMemo(() => createChainedFunction(elem => {\n    const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;\n    elem.style[computedDimension] = `${elem[scroll]}px`;\n  }, onEntering), [computedDimension, onEntering]);\n  const handleEntered = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onEntered), [computedDimension, onEntered]);\n\n  /* -- Collapsing -- */\n  const handleExit = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;\n    triggerBrowserReflow(elem);\n  }, onExit), [onExit, getDimensionValue, computedDimension]);\n  const handleExiting = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onExiting), [computedDimension, onExiting]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    \"aria-expanded\": props.role ? inProp : null,\n    onEnter: handleEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExit: handleExit,\n    onExiting: handleExiting,\n    childRef: children.ref,\n    in: inProp,\n    timeout: timeout,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit,\n    appear: appear,\n    children: (state, innerProps) => /*#__PURE__*/React.cloneElement(children, {\n      ...innerProps,\n      className: classNames(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal')\n    })\n  });\n});\n\n// @ts-ignore\n\nexport default Collapse;","\"use client\";\n\nimport * as React from 'react';\n\n// TODO: check\n\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'NavbarContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport Collapse from './Collapse';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarCollapse = /*#__PURE__*/React.forwardRef(({\n  children,\n  bsPrefix,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-collapse');\n  const context = useContext(NavbarContext);\n  return /*#__PURE__*/_jsx(Collapse, {\n    in: !!(context && context.expanded),\n    ...props,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      ref: ref,\n      className: bsPrefix,\n      children: children\n    })\n  });\n});\nNavbarCollapse.displayName = 'NavbarCollapse';\nexport default NavbarCollapse;","import { useEffect, useRef } from 'react';\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nexport default useCommittedRef;","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  const ref = useCommittedRef(fn);\n  return useCallback(function (...args) {\n    return ref.current && ref.current(...args);\n  }, [ref]);\n}","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarToggle = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  label = 'Toggle navigation',\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-toggler');\n  const {\n    onToggle,\n    expanded\n  } = useContext(NavbarContext) || {};\n  const handleClick = useEventCallback(e => {\n    if (onClick) onClick(e);\n    if (onToggle) onToggle();\n  });\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    ref: ref,\n    onClick: handleClick,\n    \"aria-label\": label,\n    className: classNames(className, bsPrefix, !expanded && 'collapsed'),\n    children: children || /*#__PURE__*/_jsx(\"span\", {\n      className: `${bsPrefix}-icon`\n    })\n  });\n});\nNavbarToggle.displayName = 'NavbarToggle';\nexport default NavbarToggle;","import { useEffect, useLayoutEffect } from 'react';\nconst isReactNative = typeof global !== 'undefined' &&\n// @ts-ignore\nglobal.navigator &&\n// @ts-ignore\nglobal.navigator.product === 'ReactNative';\nconst isDOM = typeof document !== 'undefined';\n\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","import useEffect from './useIsomorphicEffect';\nimport { useState } from 'react';\nconst matchersByWindow = new WeakMap();\nconst getMatcher = (query, targetWindow) => {\n  if (!query || !targetWindow) return undefined;\n  const matchers = matchersByWindow.get(targetWindow) || new Map();\n  matchersByWindow.set(targetWindow, matchers);\n  let mql = matchers.get(query);\n  if (!mql) {\n    mql = targetWindow.matchMedia(query);\n    mql.refCount = 0;\n    matchers.set(mql.media, mql);\n  }\n  return mql;\n};\n/**\n * Match a media query and get updates as the match changes. The media string is\n * passed directly to `window.matchMedia` and run as a Layout Effect, so initial\n * matches are returned before the browser has a chance to paint.\n *\n * ```tsx\n * function Page() {\n *   const isWide = useMediaQuery('min-width: 1000px')\n *\n *   return isWide ? \"very wide\" : 'not so wide'\n * }\n * ```\n *\n * Media query lists are also reused globally, hook calls for the same query\n * will only create a matcher once under the hood.\n *\n * @param query A media query\n * @param targetWindow The window to match against, uses the globally available one as a default.\n */\nexport default function useMediaQuery(query, targetWindow = typeof window === 'undefined' ? undefined : window) {\n  const mql = getMatcher(query, targetWindow);\n  const [matches, setMatches] = useState(() => mql ? mql.matches : false);\n  useEffect(() => {\n    let mql = getMatcher(query, targetWindow);\n    if (!mql) {\n      return setMatches(false);\n    }\n    let matchers = matchersByWindow.get(targetWindow);\n    const handleChange = () => {\n      setMatches(mql.matches);\n    };\n    mql.refCount++;\n    mql.addListener(handleChange);\n    handleChange();\n    return () => {\n      mql.removeListener(handleChange);\n      mql.refCount--;\n      if (mql.refCount <= 0) {\n        matchers == null ? void 0 : matchers.delete(mql.media);\n      }\n      mql = undefined;\n    };\n  }, [query]);\n  return matches;\n}","import useMediaQuery from './useMediaQuery';\nimport { useMemo } from 'react';\n/**\n * Create a responsive hook we a set of breakpoint names and widths.\n * You can use any valid css units as well as a numbers (for pixels).\n *\n * **NOTE:** The object key order is important! it's assumed to be in order from smallest to largest\n *\n * ```ts\n * const useBreakpoint = createBreakpointHook({\n *  xs: 0,\n *  sm: 576,\n *  md: 768,\n *  lg: 992,\n *  xl: 1200,\n * })\n * ```\n *\n * **Watch out!** using string values will sometimes construct media queries using css `calc()` which\n * is NOT supported in media queries by all browsers at the moment. use numbers for\n * the widest range of browser support.\n *\n * @param breakpointValues A object hash of names to breakpoint dimensions\n */\nexport function createBreakpointHook(breakpointValues) {\n  const names = Object.keys(breakpointValues);\n  function and(query, next) {\n    if (query === next) {\n      return next;\n    }\n    return query ? `${query} and ${next}` : next;\n  }\n  function getNext(breakpoint) {\n    return names[Math.min(names.indexOf(breakpoint) + 1, names.length - 1)];\n  }\n  function getMaxQuery(breakpoint) {\n    const next = getNext(breakpoint);\n    let value = breakpointValues[next];\n    if (typeof value === 'number') value = `${value - 0.2}px`;else value = `calc(${value} - 0.2px)`;\n    return `(max-width: ${value})`;\n  }\n  function getMinQuery(breakpoint) {\n    let value = breakpointValues[breakpoint];\n    if (typeof value === 'number') {\n      value = `${value}px`;\n    }\n    return `(min-width: ${value})`;\n  }\n\n  /**\n   * Match a set of breakpoints\n   *\n   * ```tsx\n   * const MidSizeOnly = () => {\n   *   const isMid = useBreakpoint({ lg: 'down', sm: 'up' });\n   *\n   *   if (isMid) return <div>On a Reasonable sized Screen!</div>\n   *   return null;\n   * }\n   * ```\n   * @param breakpointMap An object map of breakpoints and directions, queries are constructed using \"and\" to join\n   * breakpoints together\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n  /**\n   * Match a single breakpoint exactly, up, or down.\n   *\n   * ```tsx\n   * const PhoneOnly = () => {\n   *   const isSmall = useBreakpoint('sm', 'down');\n   *\n   *   if (isSmall) return <div>On a Small Screen!</div>\n   *   return null;\n   * }\n   * ```\n   *\n   * @param breakpoint The breakpoint key\n   * @param direction A direction 'up' for a max, 'down' for min, true to match only the breakpoint\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n  function useBreakpoint(breakpointOrMap, direction, window) {\n    let breakpointMap;\n    if (typeof breakpointOrMap === 'object') {\n      breakpointMap = breakpointOrMap;\n      window = direction;\n      direction = true;\n    } else {\n      direction = direction || true;\n      breakpointMap = {\n        [breakpointOrMap]: direction\n      };\n    }\n    let query = useMemo(() => Object.entries(breakpointMap).reduce((query, [key, direction]) => {\n      if (direction === 'up' || direction === true) {\n        query = and(query, getMinQuery(key));\n      }\n      if (direction === 'down' || direction === true) {\n        query = and(query, getMaxQuery(key));\n      }\n      return query;\n    }, ''), [JSON.stringify(breakpointMap)]);\n    return useMediaQuery(query, window);\n  }\n  return useBreakpoint;\n}\nconst useBreakpoint = createBreakpointHook({\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1400\n});\nexport default useBreakpoint;","import ownerDocument from './ownerDocument';\n/**\n * Returns the actively focused element safely.\n *\n * @param doc the document to check\n */\n\nexport default function activeElement(doc) {\n  if (doc === void 0) {\n    doc = ownerDocument();\n  }\n\n  // Support: IE 9 only\n  // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n  try {\n    var active = doc.activeElement; // IE11 returns a seemingly empty object in some cases when accessing\n    // document.activeElement from an <iframe>\n\n    if (!active || !active.nodeName) return null;\n    return active;\n  } catch (e) {\n    /* ie throws if no active element */\n    return doc.body;\n  }\n}","/* eslint-disable no-bitwise, no-cond-assign */\n\n/**\n * Checks if an element contains another given element.\n * \n * @param context the context element\n * @param node the element to check\n */\nexport default function contains(context, node) {\n  // HTML DOM and SVG DOM may have different support levels,\n  // so we need to check on context instead of a document root element.\n  if (context.contains) return context.contains(node);\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\n}","import useUpdatedRef from './useUpdatedRef';\nimport { useEffect } from 'react';\n\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\nexport default function useWillUnmount(fn) {\n  const onUnmount = useUpdatedRef(fn);\n  useEffect(() => () => onUnmount.current(), []);\n}","import { useRef } from 'react';\n\n/**\n * Returns a ref that is immediately updated with the new value\n *\n * @param value The Ref value\n * @category refs\n */\nexport default function useUpdatedRef(value) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  return valueRef;\n}","export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexport const PROPERTY_PREFIX = `rrUi`;\nexport function dataAttr(property) {\n  return `${ATTRIBUTE_PREFIX}${property}`;\n}\nexport function dataProp(property) {\n  return `${PROPERTY_PREFIX}${property}`;\n}","import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\nclass ModalManager {\n  constructor({\n    ownerDocument,\n    handleContainerOverflow = true,\n    isRTL = false\n  } = {}) {\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n  setModalAttributes(_modal) {\n    // For overriding\n  }\n  removeModalAttributes(_modal) {\n    // For overriding\n  }\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    };\n\n    // we are only interested in the actual `style` here\n    // because we will override it\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n    return modalIdx;\n  }\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n    if (modalIdx === -1) {\n      return;\n    }\n    this.modals.splice(modalIdx, 1);\n\n    // if that was the last modal in a container,\n    // clean up the container\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n    this.removeModalAttributes(modal);\n  }\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n}\nexport default ModalManager;","/**\n * Get the width of the vertical window scrollbar if it's visible\n */\nexport default function getBodyScrollbarWidth(ownerDocument = document) {\n  const window = ownerDocument.defaultView;\n  return Math.abs(window.innerWidth - ownerDocument.documentElement.clientWidth);\n}","import { createContext, useContext } from 'react';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\nexport const WindowProvider = Context.Provider;\n\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */\nexport default function useWindow() {\n  return useContext(Context);\n}","import ownerDocument from 'dom-helpers/ownerDocument';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport { useState, useEffect } from 'react';\nimport useWindow from './useWindow';\nexport const resolveContainerRef = (ref, document) => {\n  if (!canUseDOM) return null;\n  if (ref == null) return (document || ownerDocument()).body;\n  if (typeof ref === 'function') ref = ref();\n  if (ref && 'current' in ref) ref = ref.current;\n  if (ref && ('nodeType' in ref || ref.getBoundingClientRect)) return ref;\n  return null;\n};\nexport default function useWaitForDOMRef(ref, onResolved) {\n  const window = useWindow();\n  const [resolvedRef, setRef] = useState(() => resolveContainerRef(ref, window == null ? void 0 : window.document));\n  if (!resolvedRef) {\n    const earlyRef = resolveContainerRef(ref);\n    if (earlyRef) setRef(earlyRef);\n  }\n  useEffect(() => {\n    if (onResolved && resolvedRef) {\n      onResolved(resolvedRef);\n    }\n  }, [onResolved, resolvedRef]);\n  useEffect(() => {\n    const nextRef = resolveContainerRef(ref);\n    if (nextRef !== resolvedRef) {\n      setRef(nextRef);\n    }\n  }, [ref, resolvedRef]);\n  return resolvedRef;\n}","import useEventCallback from '@restart/hooks/useEventCallback';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport { cloneElement, useEffect, useRef } from 'react';\nfunction NoopTransition({\n  children,\n  in: inProp,\n  onExited,\n  mountOnEnter,\n  unmountOnExit\n}) {\n  const ref = useRef(null);\n  const hasEnteredRef = useRef(inProp);\n  const handleExited = useEventCallback(onExited);\n  useEffect(() => {\n    if (inProp) hasEnteredRef.current = true;else {\n      handleExited(ref.current);\n    }\n  }, [inProp, handleExited]);\n  const combinedRef = useMergedRefs(ref, children.ref);\n  const child = /*#__PURE__*/cloneElement(children, {\n    ref: combinedRef\n  });\n  if (inProp) return child;\n  if (unmountOnExit) {\n    return null;\n  }\n  if (!hasEnteredRef.current && mountOnEnter) {\n    return null;\n  }\n  return child;\n}\nexport default NoopTransition;","import useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport React, { useRef, cloneElement, useState } from 'react';\nimport NoopTransition from './NoopTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useTransition({\n  in: inProp,\n  onTransition\n}) {\n  const ref = useRef(null);\n  const isInitialRef = useRef(true);\n  const handleTransition = useEventCallback(onTransition);\n  useIsomorphicEffect(() => {\n    if (!ref.current) {\n      return undefined;\n    }\n    let stale = false;\n    handleTransition({\n      in: inProp,\n      element: ref.current,\n      initial: isInitialRef.current,\n      isStale: () => stale\n    });\n    return () => {\n      stale = true;\n    };\n  }, [inProp, handleTransition]);\n  useIsomorphicEffect(() => {\n    isInitialRef.current = false;\n    // this is for strict mode\n    return () => {\n      isInitialRef.current = true;\n    };\n  }, []);\n  return ref;\n}\n/**\n * Adapts an imperative transition function to a subset of the RTG `<Transition>` component API.\n *\n * ImperativeTransition does not support mounting options or `appear` at the moment, meaning\n * that it always acts like: `mountOnEnter={true} unmountOnExit={true} appear={true}`\n */\nexport default function ImperativeTransition({\n  children,\n  in: inProp,\n  onExited,\n  onEntered,\n  transition\n}) {\n  const [exited, setExited] = useState(!inProp);\n\n  // TODO: I think this needs to be in an effect\n  if (inProp && exited) {\n    setExited(false);\n  }\n  const ref = useTransition({\n    in: !!inProp,\n    onTransition: options => {\n      const onFinish = () => {\n        if (options.isStale()) return;\n        if (options.in) {\n          onEntered == null ? void 0 : onEntered(options.element, options.initial);\n        } else {\n          setExited(true);\n          onExited == null ? void 0 : onExited(options.element);\n        }\n      };\n      Promise.resolve(transition(options)).then(onFinish, error => {\n        if (!options.in) setExited(true);\n        throw error;\n      });\n    }\n  });\n  const combinedRef = useMergedRefs(ref, children.ref);\n  return exited && !inProp ? null : /*#__PURE__*/cloneElement(children, {\n    ref: combinedRef\n  });\n}\nexport function renderTransition(Component, runTransition, props) {\n  if (Component) {\n    return /*#__PURE__*/_jsx(Component, Object.assign({}, props));\n  }\n  if (runTransition) {\n    return /*#__PURE__*/_jsx(ImperativeTransition, Object.assign({}, props, {\n      transition: runTransition\n    }));\n  }\n  return /*#__PURE__*/_jsx(NoopTransition, Object.assign({}, props));\n}","const _excluded = [\"show\", \"role\", \"className\", \"style\", \"children\", \"backdrop\", \"keyboard\", \"onBackdropClick\", \"onEscapeKeyDown\", \"transition\", \"runTransition\", \"backdropTransition\", \"runBackdropTransition\", \"autoFocus\", \"enforceFocus\", \"restoreFocus\", \"restoreFocusOptions\", \"renderDialog\", \"renderBackdrop\", \"manager\", \"container\", \"onShow\", \"onHide\", \"onExit\", \"onExited\", \"onExiting\", \"onEnter\", \"onEntering\", \"onEntered\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */\n\nimport activeElement from 'dom-helpers/activeElement';\nimport contains from 'dom-helpers/contains';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport listen from 'dom-helpers/listen';\nimport { useState, useRef, useCallback, useImperativeHandle, forwardRef, useEffect } from 'react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport useMounted from '@restart/hooks/useMounted';\nimport useWillUnmount from '@restart/hooks/useWillUnmount';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport ModalManager from './ModalManager';\nimport useWaitForDOMRef from './useWaitForDOMRef';\nimport useWindow from './useWindow';\nimport { renderTransition } from './ImperativeTransition';\nimport { isEscKey } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nlet manager;\nfunction getManager(window) {\n  if (!manager) manager = new ModalManager({\n    ownerDocument: window == null ? void 0 : window.document\n  });\n  return manager;\n}\nfunction useModalManager(provided) {\n  const window = useWindow();\n  const modalManager = provided || getManager(window);\n  const modal = useRef({\n    dialog: null,\n    backdrop: null\n  });\n  return Object.assign(modal.current, {\n    add: () => modalManager.add(modal.current),\n    remove: () => modalManager.remove(modal.current),\n    isTopModal: () => modalManager.isTopModal(modal.current),\n    setDialogRef: useCallback(ref => {\n      modal.current.dialog = ref;\n    }, []),\n    setBackdropRef: useCallback(ref => {\n      modal.current.backdrop = ref;\n    }, [])\n  });\n}\nconst Modal = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n      show = false,\n      role = 'dialog',\n      className,\n      style,\n      children,\n      backdrop = true,\n      keyboard = true,\n      onBackdropClick,\n      onEscapeKeyDown,\n      transition,\n      runTransition,\n      backdropTransition,\n      runBackdropTransition,\n      autoFocus = true,\n      enforceFocus = true,\n      restoreFocus = true,\n      restoreFocusOptions,\n      renderDialog,\n      renderBackdrop = props => /*#__PURE__*/_jsx(\"div\", Object.assign({}, props)),\n      manager: providedManager,\n      container: containerRef,\n      onShow,\n      onHide = () => {},\n      onExit,\n      onExited,\n      onExiting,\n      onEnter,\n      onEntering,\n      onEntered\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const ownerWindow = useWindow();\n  const container = useWaitForDOMRef(containerRef);\n  const modal = useModalManager(providedManager);\n  const isMounted = useMounted();\n  const prevShow = usePrevious(show);\n  const [exited, setExited] = useState(!show);\n  const lastFocusRef = useRef(null);\n  useImperativeHandle(ref, () => modal, [modal]);\n  if (canUseDOM && !prevShow && show) {\n    lastFocusRef.current = activeElement(ownerWindow == null ? void 0 : ownerWindow.document);\n  }\n\n  // TODO: I think this needs to be in an effect\n  if (show && exited) {\n    setExited(false);\n  }\n  const handleShow = useEventCallback(() => {\n    modal.add();\n    removeKeydownListenerRef.current = listen(document, 'keydown', handleDocumentKeyDown);\n    removeFocusListenerRef.current = listen(document, 'focus',\n    // the timeout is necessary b/c this will run before the new modal is mounted\n    // and so steals focus from it\n    () => setTimeout(handleEnforceFocus), true);\n    if (onShow) {\n      onShow();\n    }\n\n    // autofocus after onShow to not trigger a focus event for previous\n    // modals before this one is shown.\n    if (autoFocus) {\n      var _modal$dialog$ownerDo, _modal$dialog;\n      const currentActiveElement = activeElement((_modal$dialog$ownerDo = (_modal$dialog = modal.dialog) == null ? void 0 : _modal$dialog.ownerDocument) != null ? _modal$dialog$ownerDo : ownerWindow == null ? void 0 : ownerWindow.document);\n      if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {\n        lastFocusRef.current = currentActiveElement;\n        modal.dialog.focus();\n      }\n    }\n  });\n  const handleHide = useEventCallback(() => {\n    modal.remove();\n    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();\n    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();\n    if (restoreFocus) {\n      var _lastFocusRef$current;\n      // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);\n      lastFocusRef.current = null;\n    }\n  });\n\n  // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120\n\n  // Show logic when:\n  //  - show is `true` _and_ `container` has resolved\n  useEffect(() => {\n    if (!show || !container) return;\n    handleShow();\n  }, [show, container, /* should never change: */handleShow]);\n\n  // Hide cleanup logic when:\n  //  - `exited` switches to true\n  //  - component unmounts;\n  useEffect(() => {\n    if (!exited) return;\n    handleHide();\n  }, [exited, handleHide]);\n  useWillUnmount(() => {\n    handleHide();\n  });\n\n  // --------------------------------\n\n  const handleEnforceFocus = useEventCallback(() => {\n    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {\n      return;\n    }\n    const currentActiveElement = activeElement(ownerWindow == null ? void 0 : ownerWindow.document);\n    if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {\n      modal.dialog.focus();\n    }\n  });\n  const handleBackdropClick = useEventCallback(e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n    onBackdropClick == null ? void 0 : onBackdropClick(e);\n    if (backdrop === true) {\n      onHide();\n    }\n  });\n  const handleDocumentKeyDown = useEventCallback(e => {\n    if (keyboard && isEscKey(e) && modal.isTopModal()) {\n      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);\n      if (!e.defaultPrevented) {\n        onHide();\n      }\n    }\n  });\n  const removeFocusListenerRef = useRef();\n  const removeKeydownListenerRef = useRef();\n  const handleHidden = (...args) => {\n    setExited(true);\n    onExited == null ? void 0 : onExited(...args);\n  };\n  if (!container) {\n    return null;\n  }\n  const dialogProps = Object.assign({\n    role,\n    ref: modal.setDialogRef,\n    // apparently only works on the dialog role element\n    'aria-modal': role === 'dialog' ? true : undefined\n  }, rest, {\n    style,\n    className,\n    tabIndex: -1\n  });\n  let dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/_jsx(\"div\", Object.assign({}, dialogProps, {\n    children: /*#__PURE__*/React.cloneElement(children, {\n      role: 'document'\n    })\n  }));\n  dialog = renderTransition(transition, runTransition, {\n    unmountOnExit: true,\n    mountOnEnter: true,\n    appear: true,\n    in: !!show,\n    onExit,\n    onExiting,\n    onExited: handleHidden,\n    onEnter,\n    onEntering,\n    onEntered,\n    children: dialog\n  });\n  let backdropElement = null;\n  if (backdrop) {\n    backdropElement = renderBackdrop({\n      ref: modal.setBackdropRef,\n      onClick: handleBackdropClick\n    });\n    backdropElement = renderTransition(backdropTransition, runBackdropTransition, {\n      in: !!show,\n      appear: true,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: backdropElement\n    });\n  }\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxs(_Fragment, {\n      children: [backdropElement, dialog]\n    }), container)\n  });\n});\nModal.displayName = 'Modal';\nexport default Object.assign(Modal, {\n  Manager: ModalManager\n});","import { useRef, useEffect } from 'react';\n\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\nexport default function useMounted() {\n  const mounted = useRef(true);\n  const isMounted = useRef(() => mounted.current);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","import { useEffect, useRef } from 'react';\n\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\nexport default function usePrevious(value) {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}","/* eslint-disable import/prefer-default-export */\nexport function isEscKey(e) {\n  return e.code === 'Escape' || e.keyCode === 27;\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { ENTERED, ENTERING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst fadeStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst Fade = /*#__PURE__*/React.forwardRef(({\n  className,\n  children,\n  transitionClasses = {},\n  onEnter,\n  ...rest\n}, ref) => {\n  const props = {\n    in: false,\n    timeout: 300,\n    mountOnEnter: false,\n    unmountOnExit: false,\n    appear: false,\n    ...rest\n  };\n  const handleEnter = useCallback((node, isAppearing) => {\n    triggerBrowserReflow(node);\n    onEnter == null ? void 0 : onEnter(node, isAppearing);\n  }, [onEnter]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    onEnter: handleEnter,\n    childRef: children.ref,\n    children: (status, innerProps) => /*#__PURE__*/React.cloneElement(children, {\n      ...innerProps,\n      className: classNames('fade', className, children.props.className, fadeStyles[status], transitionClasses[status])\n    })\n  });\n});\nFade.displayName = 'Fade';\nexport default Fade;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst OffcanvasBody = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas-body');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nOffcanvasBody.displayName = 'OffcanvasBody';\nexport default OffcanvasBody;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ENTERED, ENTERING, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport TransitionWrapper from './TransitionWrapper';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst transitionStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst OffcanvasToggling = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  in: inProp = false,\n  mountOnEnter = false,\n  unmountOnExit = false,\n  appear = false,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas');\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    in: inProp,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit,\n    appear: appear,\n    ...props,\n    childRef: children.ref,\n    children: (status, innerProps) => /*#__PURE__*/React.cloneElement(children, {\n      ...innerProps,\n      className: classNames(className, children.props.className, (status === ENTERING || status === EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])\n    })\n  });\n});\nOffcanvasToggling.displayName = 'OffcanvasToggling';\nexport default OffcanvasToggling;","\"use client\";\n\nimport * as React from 'react';\nconst ModalContext = /*#__PURE__*/React.createContext({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onHide() {}\n});\nexport default ModalContext;","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  /** An accessible label indicating the relevant information about the Close Button. */\n  'aria-label': PropTypes.string,\n  /** A callback fired after the Close Button is clicked. */\n  onClick: PropTypes.func,\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nconst CloseButton = /*#__PURE__*/React.forwardRef(({\n  className,\n  variant,\n  'aria-label': ariaLabel = 'Close',\n  ...props\n}, ref) => /*#__PURE__*/_jsx(\"button\", {\n  ref: ref,\n  type: \"button\",\n  className: classNames('btn-close', variant && `btn-close-${variant}`, className),\n  \"aria-label\": ariaLabel,\n  ...props\n}));\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nexport default CloseButton;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport CloseButton from './CloseButton';\nimport ModalContext from './ModalContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst AbstractModalHeader = /*#__PURE__*/React.forwardRef(({\n  closeLabel = 'Close',\n  closeVariant,\n  closeButton = false,\n  onHide,\n  children,\n  ...props\n}, ref) => {\n  const context = useContext(ModalContext);\n  const handleClick = useEventCallback(() => {\n    context == null ? void 0 : context.onHide();\n    onHide == null ? void 0 : onHide();\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    ref: ref,\n    ...props,\n    children: [children, closeButton && /*#__PURE__*/_jsx(CloseButton, {\n      \"aria-label\": closeLabel,\n      variant: closeVariant,\n      onClick: handleClick\n    })]\n  });\n});\nexport default AbstractModalHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractModalHeader from './AbstractModalHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst OffcanvasHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  closeLabel = 'Close',\n  closeButton = false,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas-header');\n  return /*#__PURE__*/_jsx(AbstractModalHeader, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    closeLabel: closeLabel,\n    closeButton: closeButton\n  });\n});\nOffcanvasHeader.displayName = 'OffcanvasHeader';\nexport default OffcanvasHeader;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport divWithClassName from './divWithClassName';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst OffcanvasTitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH5,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas-title');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nOffcanvasTitle.displayName = 'OffcanvasTitle';\nexport default OffcanvasTitle;","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", {\n  ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import addClass from 'dom-helpers/addClass';\nimport css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport removeClass from 'dom-helpers/removeClass';\nimport ModalManager from '@restart/ui/ModalManager';\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\nclass BootstrapModalManager extends ModalManager {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop];\n    // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n    element.dataset[prop] = actual;\n    css(element, {\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\n    });\n  }\n  restore(prop, element) {\n    const value = element.dataset[prop];\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      css(element, {\n        [prop]: value\n      });\n    }\n  }\n  setContainerStyle(containerState) {\n    super.setContainerStyle(containerState);\n    const container = this.getElement();\n    addClass(container, 'modal-open');\n    if (!containerState.scrollBarWidth) return;\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));\n  }\n  removeContainerStyle(containerState) {\n    super.removeContainerStyle(containerState);\n    const container = this.getElement();\n    removeClass(container, 'modal-open');\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore(paddingProp, el));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore(marginProp, el));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore(marginProp, el));\n  }\n}\nlet sharedManager;\nexport function getSharedManager(options) {\n  if (!sharedManager) sharedManager = new BootstrapModalManager(options);\n  return sharedManager;\n}\nexport default BootstrapModalManager;","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","\"use client\";\n\nimport classNames from 'classnames';\nimport useBreakpoint from '@restart/hooks/useBreakpoint';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport * as React from 'react';\nimport { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport BaseModal from '@restart/ui/Modal';\nimport Fade from './Fade';\nimport OffcanvasBody from './OffcanvasBody';\nimport OffcanvasToggling from './OffcanvasToggling';\nimport ModalContext from './ModalContext';\nimport NavbarContext from './NavbarContext';\nimport OffcanvasHeader from './OffcanvasHeader';\nimport OffcanvasTitle from './OffcanvasTitle';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BootstrapModalManager, { getSharedManager } from './BootstrapModalManager';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction DialogTransition(props) {\n  return /*#__PURE__*/_jsx(OffcanvasToggling, {\n    ...props\n  });\n}\nfunction BackdropTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, {\n    ...props\n  });\n}\nconst Offcanvas = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  'aria-labelledby': ariaLabelledby,\n  placement = 'start',\n  responsive,\n  /* BaseModal props */\n\n  show = false,\n  backdrop = true,\n  keyboard = true,\n  scroll = false,\n  onEscapeKeyDown,\n  onShow,\n  onHide,\n  container,\n  autoFocus = true,\n  enforceFocus = true,\n  restoreFocus = true,\n  restoreFocusOptions,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  backdropClassName,\n  manager: propsManager,\n  renderStaticNode = false,\n  ...props\n}, ref) => {\n  const modalManager = useRef();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas');\n  const {\n    onToggle\n  } = useContext(NavbarContext) || {};\n  const [showOffcanvas, setShowOffcanvas] = useState(false);\n  const hideResponsiveOffcanvas = useBreakpoint(responsive || 'xs', 'up');\n  useEffect(() => {\n    // Handles the case where screen is resized while the responsive\n    // offcanvas is shown. If `responsive` not provided, just use `show`.\n    setShowOffcanvas(responsive ? show && !hideResponsiveOffcanvas : show);\n  }, [show, responsive, hideResponsiveOffcanvas]);\n  const handleHide = useEventCallback(() => {\n    onToggle == null ? void 0 : onToggle();\n    onHide == null ? void 0 : onHide();\n  });\n  const modalContext = useMemo(() => ({\n    onHide: handleHide\n  }), [handleHide]);\n  function getModalManager() {\n    if (propsManager) return propsManager;\n    if (scroll) {\n      // Have to use a different modal manager since the shared\n      // one handles overflow.\n      if (!modalManager.current) modalManager.current = new BootstrapModalManager({\n        handleContainerOverflow: false\n      });\n      return modalManager.current;\n    }\n    return getSharedManager();\n  }\n  const handleEnter = (node, ...args) => {\n    if (node) node.style.visibility = 'visible';\n    onEnter == null ? void 0 : onEnter(node, ...args);\n  };\n  const handleExited = (node, ...args) => {\n    if (node) node.style.visibility = '';\n    onExited == null ? void 0 : onExited(...args);\n  };\n  const renderBackdrop = useCallback(backdropProps => /*#__PURE__*/_jsx(\"div\", {\n    ...backdropProps,\n    className: classNames(`${bsPrefix}-backdrop`, backdropClassName)\n  }), [backdropClassName, bsPrefix]);\n  const renderDialog = dialogProps => /*#__PURE__*/_jsx(\"div\", {\n    ...dialogProps,\n    ...props,\n    className: classNames(className, responsive ? `${bsPrefix}-${responsive}` : bsPrefix, `${bsPrefix}-${placement}`),\n    \"aria-labelledby\": ariaLabelledby,\n    children: children\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [!showOffcanvas && (responsive || renderStaticNode) && renderDialog({}), /*#__PURE__*/_jsx(ModalContext.Provider, {\n      value: modalContext,\n      children: /*#__PURE__*/_jsx(BaseModal, {\n        show: showOffcanvas,\n        ref: ref,\n        backdrop: backdrop,\n        container: container,\n        keyboard: keyboard,\n        autoFocus: autoFocus,\n        enforceFocus: enforceFocus && !scroll,\n        restoreFocus: restoreFocus,\n        restoreFocusOptions: restoreFocusOptions,\n        onEscapeKeyDown: onEscapeKeyDown,\n        onShow: onShow,\n        onHide: handleHide,\n        onEnter: handleEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: handleExited,\n        manager: getModalManager(),\n        transition: DialogTransition,\n        backdropTransition: BackdropTransition,\n        renderBackdrop: renderBackdrop,\n        renderDialog: renderDialog\n      })\n    })]\n  });\n});\nOffcanvas.displayName = 'Offcanvas';\nexport default Object.assign(Offcanvas, {\n  Body: OffcanvasBody,\n  Header: OffcanvasHeader,\n  Title: OffcanvasTitle\n});","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport Offcanvas from './Offcanvas';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarOffcanvas = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const context = useContext(NavbarContext);\n  return /*#__PURE__*/_jsx(Offcanvas, {\n    ref: ref,\n    show: !!(context != null && context.expanded),\n    ...props,\n    renderStaticNode: true\n  });\n});\nNavbarOffcanvas.displayName = 'NavbarOffcanvas';\nexport default NavbarOffcanvas;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nNavbarText.displayName = 'NavbarText';\nexport default NavbarText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport { useUncontrolled } from 'uncontrollable';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport NavbarOffcanvas from './NavbarOffcanvas';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport NavbarText from './NavbarText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Navbar = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    bsPrefix: initialBsPrefix,\n    expand = true,\n    variant = 'light',\n    bg,\n    fixed,\n    sticky,\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'nav',\n    expanded,\n    onToggle,\n    onSelect,\n    collapseOnSelect = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    expanded: 'onToggle'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');\n  const handleCollapse = useCallback((...args) => {\n    onSelect == null ? void 0 : onSelect(...args);\n    if (collapseOnSelect && expanded) {\n      onToggle == null ? void 0 : onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, onToggle]);\n\n  // will result in some false positives but that seems better\n  // than false negatives. strict `undefined` check allows explicit\n  // \"nulling\" of the role if the user really doesn't want one\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n  let expandClass = `${bsPrefix}-expand`;\n  if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;\n  const navbarContext = useMemo(() => ({\n    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),\n    bsPrefix,\n    expanded: !!expanded,\n    expand\n  }), [bsPrefix, expanded, expand, onToggle]);\n  return /*#__PURE__*/_jsx(NavbarContext.Provider, {\n    value: navbarContext,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: handleCollapse,\n      children: /*#__PURE__*/_jsx(Component, {\n        ref: ref,\n        ...controlledProps,\n        className: classNames(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)\n      })\n    })\n  });\n});\nNavbar.displayName = 'Navbar';\nexport default Object.assign(Navbar, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Offcanvas: NavbarOffcanvas,\n  Text: NavbarText,\n  Toggle: NavbarToggle\n});","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nexport default Container;","import * as React from 'react';\nconst NavContext = /*#__PURE__*/React.createContext(null);\nNavContext.displayName = 'NavContext';\nexport default NavContext;","import * as React from 'react';\nconst TabContext = /*#__PURE__*/React.createContext(null);\nexport default TabContext;","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","const _excluded = [\"as\", \"active\", \"eventKey\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Button from './Button';\nimport { dataAttr } from './DataKey';\nimport TabContext from './TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useNavItem({\n  key,\n  onClick,\n  active,\n  id,\n  role,\n  disabled\n}) {\n  const parentOnSelect = useContext(SelectableContext);\n  const navContext = useContext(NavContext);\n  const tabContext = useContext(TabContext);\n  let isActive = active;\n  const props = {\n    role\n  };\n  if (navContext) {\n    if (!role && navContext.role === 'tablist') props.role = 'tab';\n    const contextControllerId = navContext.getControllerId(key != null ? key : null);\n    const contextControlledId = navContext.getControlledId(key != null ? key : null);\n\n    // @ts-ignore\n    props[dataAttr('event-key')] = key;\n    props.id = contextControllerId || id;\n    isActive = active == null && key != null ? navContext.activeKey === key : active;\n\n    /**\n     * Simplified scenario for `mountOnEnter`.\n     *\n     * While it would make sense to keep 'aria-controls' for tabs that have been mounted at least\n     * once, it would also complicate the code quite a bit, for very little gain.\n     * The following implementation is probably good enough.\n     *\n     * @see https://github.com/react-restart/ui/pull/40#issuecomment-1009971561\n     */\n    if (isActive || !(tabContext != null && tabContext.unmountOnExit) && !(tabContext != null && tabContext.mountOnEnter)) props['aria-controls'] = contextControlledId;\n  }\n  if (props.role === 'tab') {\n    props['aria-selected'] = isActive;\n    if (!isActive) {\n      props.tabIndex = -1;\n    }\n    if (disabled) {\n      props.tabIndex = -1;\n      props['aria-disabled'] = true;\n    }\n  }\n  props.onClick = useEventCallback(e => {\n    if (disabled) return;\n    onClick == null ? void 0 : onClick(e);\n    if (key == null) {\n      return;\n    }\n    if (parentOnSelect && !e.isPropagationStopped()) {\n      parentOnSelect(key, e);\n    }\n  });\n  return [props, {\n    isActive\n  }];\n}\nconst NavItem = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: Component = Button,\n      active,\n      eventKey\n    } = _ref,\n    options = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [props, meta] = useNavItem(Object.assign({\n    key: makeEventKey(eventKey, options.href),\n    active\n  }, options));\n\n  // @ts-ignore\n  props[dataAttr('active')] = meta.isActive;\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, options, props, {\n    ref: ref\n  }));\n});\nNavItem.displayName = 'NavItem';\nexport default NavItem;","const _excluded = [\"as\", \"onSelect\", \"activeKey\", \"role\", \"onKeyDown\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport qsa from 'dom-helpers/querySelectorAll';\nimport * as React from 'react';\nimport { useContext, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport TabContext from './TabContext';\nimport { dataAttr, dataProp } from './DataKey';\nimport NavItem from './NavItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\nconst EVENT_KEY_ATTR = dataAttr('event-key');\nconst Nav = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n      as: Component = 'div',\n      onSelect,\n      activeKey,\n      role,\n      onKeyDown\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n  const forceUpdate = useForceUpdate();\n  const needsRefocusRef = useRef(false);\n  const parentOnSelect = useContext(SelectableContext);\n  const tabContext = useContext(TabContext);\n  let getControlledId, getControllerId;\n  if (tabContext) {\n    role = role || 'tablist';\n    activeKey = tabContext.activeKey;\n    // TODO: do we need to duplicate these?\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n  const listNode = useRef(null);\n  const getNextActiveTab = offset => {\n    const currentListNode = listNode.current;\n    if (!currentListNode) return null;\n    const items = qsa(currentListNode, `[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`);\n    const activeChild = currentListNode.querySelector('[aria-selected=true]');\n    if (!activeChild || activeChild !== document.activeElement) return null;\n    const index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    let nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n  const handleSelect = (key, event) => {\n    if (key == null) return;\n    onSelect == null ? void 0 : onSelect(key, event);\n    parentOnSelect == null ? void 0 : parentOnSelect(key, event);\n  };\n  const handleKeyDown = event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n    if (!tabContext) {\n      return;\n    }\n    let nextActiveChild;\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveTab(-1);\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveTab(1);\n        break;\n      default:\n        return;\n    }\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset[dataProp('EventKey')] || null, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n  useEffect(() => {\n    if (listNode.current && needsRefocusRef.current) {\n      const activeChild = listNode.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);\n      activeChild == null ? void 0 : activeChild.focus();\n    }\n    needsRefocusRef.current = false;\n  });\n  const mergedRef = useMergedRefs(ref, listNode);\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(NavContext.Provider, {\n      value: {\n        role,\n        // used by NavLink to determine it's role\n        activeKey: makeEventKey(activeKey),\n        getControlledId: getControlledId || noop,\n        getControllerId: getControllerId || noop\n      },\n      children: /*#__PURE__*/_jsx(Component, Object.assign({}, props, {\n        onKeyDown: handleKeyDown,\n        ref: mergedRef,\n        role: role\n      }))\n    })\n  });\n});\nNav.displayName = 'Nav';\nexport default Object.assign(Nav, {\n  Item: NavItem\n});","import { useReducer } from 'react';\n\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\nexport default function useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are strictly equal to the last state value\n  const [, dispatch] = useReducer(state => !state, false);\n  return dispatch;\n}","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavItem = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'nav-item');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nNavItem.displayName = 'NavItem';\nexport default NavItem;","import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nconst targetMap = new WeakMap();\nlet resizeObserver;\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(entries => {\n    entries.forEach(entry => {\n      const handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\nexport default function useResizeObserver(element) {\n  const [rect, setRect] = useState(null);\n  useEffect(() => {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, rect => {\n      setRect(rect);\n    });\n    return () => {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","const _excluded = [\"onKeyDown\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/anchor-has-content */\n\nimport * as React from 'react';\nimport { useEventCallback } from '@restart/hooks';\nimport { useButtonProps } from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n/**\n * An generic `<a>` component that covers a few A11y cases, ensuring that\n * cases where the `href` is missing or trivial like \"#\" are treated like buttons.\n */\nconst Anchor = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      onKeyDown\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps] = useButtonProps(Object.assign({\n    tagName: 'a'\n  }, props));\n  const handleKeyDown = useEventCallback(e => {\n    buttonProps.onKeyDown(e);\n    onKeyDown == null ? void 0 : onKeyDown(e);\n  });\n  if (isTrivialHref(props.href) || props.role === 'button') {\n    return /*#__PURE__*/_jsx(\"a\", Object.assign({\n      ref: ref\n    }, props, buttonProps, {\n      onKeyDown: handleKeyDown\n    }));\n  }\n  return /*#__PURE__*/_jsx(\"a\", Object.assign({\n    ref: ref\n  }, props, {\n    onKeyDown: onKeyDown\n  }));\n});\nAnchor.displayName = 'Anchor';\nexport default Anchor;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Anchor from '@restart/ui/Anchor';\nimport { useNavItem } from '@restart/ui/NavItem';\nimport { makeEventKey } from '@restart/ui/SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavLink = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  as: Component = Anchor,\n  active,\n  eventKey,\n  disabled = false,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'nav-link');\n  const [navItemProps, meta] = useNavItem({\n    key: makeEventKey(eventKey, props.href),\n    active,\n    disabled,\n    ...props\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    ...navItemProps,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, bsPrefix, disabled && 'disabled', meta.isActive && 'active')\n  });\n});\nNavLink.displayName = 'NavLink';\nexport default NavLink;","\"use client\";\n\nimport classNames from 'classnames';\nimport all from 'prop-types-extra/lib/all';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport BaseNav from '@restart/ui/Nav';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport CardHeaderContext from './CardHeaderContext';\nimport NavItem from './NavItem';\nimport NavLink from './NavLink';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Nav = /*#__PURE__*/React.forwardRef((uncontrolledProps, ref) => {\n  const {\n    as = 'div',\n    bsPrefix: initialBsPrefix,\n    variant,\n    fill = false,\n    justify = false,\n    navbar,\n    navbarScroll,\n    className,\n    activeKey,\n    ...props\n  } = useUncontrolled(uncontrolledProps, {\n    activeKey: 'onSelect'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'nav');\n  let navbarBsPrefix;\n  let cardHeaderBsPrefix;\n  let isNavbar = false;\n  const navbarContext = useContext(NavbarContext);\n  const cardHeaderContext = useContext(CardHeaderContext);\n  if (navbarContext) {\n    navbarBsPrefix = navbarContext.bsPrefix;\n    isNavbar = navbar == null ? true : navbar;\n  } else if (cardHeaderContext) {\n    ({\n      cardHeaderBsPrefix\n    } = cardHeaderContext);\n  }\n  return /*#__PURE__*/_jsx(BaseNav, {\n    as: as,\n    ref: ref,\n    activeKey: activeKey,\n    className: classNames(className, {\n      [bsPrefix]: !isNavbar,\n      [`${navbarBsPrefix}-nav`]: isNavbar,\n      [`${navbarBsPrefix}-nav-scroll`]: isNavbar && navbarScroll,\n      [`${cardHeaderBsPrefix}-${variant}`]: !!cardHeaderBsPrefix,\n      [`${bsPrefix}-${variant}`]: !!variant,\n      [`${bsPrefix}-fill`]: fill,\n      [`${bsPrefix}-justified`]: justify\n    }),\n    ...props\n  });\n});\nNav.displayName = 'Nav';\nexport default Object.assign(Nav, {\n  Item: NavItem,\n  Link: NavLink\n});","var _path, _path2, _path3, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLogo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 155,\n    height: 41,\n    viewBox: \"0 0 155 41\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0.728001V39.928H22.064V32.032H8.4V0.728001H0Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.0268 20.328C64.0268 9.016 54.9548 0 43.5308 0C32.1068 0 23.0348 9.016 23.0348 20.328C23.0348 31.64 32.1068 40.656 43.5308 40.656C54.9548 40.656 64.0268 31.64 64.0268 20.328ZM55.4028 20.328C55.4028 27.104 50.1948 32.48 43.5308 32.48C36.8668 32.48 31.6588 27.104 31.6588 20.328C31.6588 13.552 36.8668 8.176 43.5308 8.176C50.1948 8.176 55.4028 13.552 55.4028 20.328Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M107.11 10.136C103.918 3.808 97.3096 0 89.4136 0C78.1576 0 68.9176 9.128 68.9176 20.328C68.9176 31.528 77.9336 40.656 89.3576 40.656C100.558 40.656 108.734 32.256 108.734 21.28V18.144H88.3496V25.2H99.7176C98.6536 29.68 94.6216 32.76 89.4136 32.76C82.6936 32.76 77.4296 27.216 77.4296 20.328C77.4296 13.384 82.6936 7.952 89.3576 7.952C93.8936 7.952 97.5336 10.024 99.4936 13.832L107.11 10.136Z\",\n    fill: \"white\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M154.261 20.328C154.261 9.016 145.189 0 133.765 0C122.341 0 113.269 9.016 113.269 20.328C113.269 31.64 122.341 40.656 133.765 40.656C145.189 40.656 154.261 31.64 154.261 20.328ZM145.637 20.328C145.637 27.104 140.429 32.48 133.765 32.48C127.101 32.48 121.893 27.104 121.893 20.328C121.893 13.552 127.101 8.176 133.765 8.176C140.429 8.176 145.637 13.552 145.637 20.328Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.3c6c479cfa1d154dbfccd4d5f91320f4.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgNavIcon1(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.996 16V15.9993H16V10.1313C16 7.26065 15.382 5.04932 12.026 5.04932C10.4127 5.04932 9.33 5.93465 8.888 6.77398H8.84133V5.31732H5.65933V15.9993H8.97267V10.71C8.97267 9.31732 9.23667 7.97065 10.9613 7.97065C12.6607 7.97065 12.686 9.55998 12.686 10.7993V16H15.996Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0.264008 5.31812H3.58134V16.0001H0.264008V5.31812Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.92133 0C0.860667 0 0 0.860667 0 1.92133C0 2.982 0.860667 3.86067 1.92133 3.86067C2.982 3.86067 3.84267 2.982 3.84267 1.92133C3.842 0.860667 2.98133 0 1.92133 0V0Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNavIcon1);\nexport default __webpack_public_path__ + \"static/media/nav-icon1.dff40ae802524d8fc0cbce3f312abe4f.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgNavIcon2(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.54 2.65667H12.0007V0.112667C11.7487 0.078 10.882 0 9.87267 0C7.76667 0 6.324 1.32467 6.324 3.75933V6H4V8.844H6.324V16H9.17333V8.84467H11.4033L11.7573 6.00067H9.17267V4.04133C9.17333 3.21933 9.39467 2.65667 10.54 2.65667V2.65667Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNavIcon2);\nexport default __webpack_public_path__ + \"static/media/nav-icon2.a39f0e5e47e442dafcc5c9c320f19f6f.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgNavIcon3(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.00269 3.8916C5.73406 3.8916 3.89743 5.73024 3.89743 7.99686C3.89743 10.2655 5.73606 12.1021 8.00269 12.1021C10.2713 12.1021 12.108 10.2635 12.108 7.99686C12.108 5.72824 10.2693 3.8916 8.00269 3.8916V3.8916ZM8.00269 10.6615C6.53005 10.6615 5.33807 9.46884 5.33807 7.99686C5.33807 6.52489 6.53072 5.33224 8.00269 5.33224C9.47467 5.33224 10.6673 6.52489 10.6673 7.99686C10.668 9.46884 9.47533 10.6615 8.00269 10.6615V10.6615Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.2986 0.0502569C9.82665 -0.0184086 6.18071 -0.0150753 4.7074 0.0502569C3.41276 0.110922 2.27078 0.423584 1.35013 1.34423C-0.188512 2.88287 0.00815137 4.95617 0.00815137 7.99678C0.00815137 11.1087 -0.165179 13.134 1.35013 14.6493C2.89477 16.1933 4.99806 15.9913 8.00268 15.9913C11.0853 15.9913 12.1493 15.9933 13.2393 15.5713C14.7212 14.996 15.8399 13.6714 15.9492 11.2921C16.0185 9.81942 16.0145 6.17415 15.9492 4.70084C15.8172 1.89222 14.3099 0.188921 11.2986 0.0502569V0.0502569ZM13.6286 13.6314C12.6199 14.64 11.2206 14.55 7.98335 14.55C4.65007 14.55 3.31343 14.5993 2.33811 13.6214C1.2148 12.5034 1.41813 10.7081 1.41813 7.98612C1.41813 4.30285 1.04013 1.65023 4.73674 1.4609C5.58605 1.4309 5.83605 1.4209 7.97401 1.4209L8.00401 1.4409C11.5566 1.4409 14.3439 1.06891 14.5112 4.76484C14.5492 5.60816 14.5579 5.86149 14.5579 7.99612C14.5572 11.2907 14.6199 12.6354 13.6286 13.6314V13.6314Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.2706 4.6889C12.8004 4.6889 13.2299 4.2594 13.2299 3.72958C13.2299 3.19976 12.8004 2.77026 12.2706 2.77026C11.7408 2.77026 11.3113 3.19976 11.3113 3.72958C11.3113 4.2594 11.7408 4.6889 12.2706 4.6889Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNavIcon3);\nexport default __webpack_public_path__ + \"static/media/nav-icon3.72cef43bc93b04f52e29f022ef720f8b.svg\";\nexport { ForwardRef as ReactComponent };","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)(\\?)?/g, (_: string, paramName: string, isOptional) => {\n        params.push({ paramName, isOptional: isOptional != null });\n        return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else if (isPathRelative) {\n    let fromSegments =\n      routePathnames.length === 0\n        ? []\n        : routePathnames[routePathnames.length - 1]\n            .replace(/^\\//, \"\")\n            .split(\"/\");\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // With relative=\"path\", each leading .. segment means \"go up one URL segment\"\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        fromSegments.pop();\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = \"/\" + fromSegments.join(\"/\");\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // With relative=\"route\" (the default), each leading .. segment means\n      // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n      // difference from how <a href> works and a major reason we call this a\n      // \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(\n      (m) =>\n        m.route.loader &&\n        m.route.loader.hydrate !== true &&\n        ((loaderData && loaderData[m.route.id] !== undefined) ||\n          (errors && errors[m.route.id] !== undefined))\n    );\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        updateFetcherState(key, getLoadingFetcher(submission));\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission,\n        });\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(\n          `${method}() call aborted: ${request.method} ${request.url}`\n        );\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(\n        `${method}() call aborted: ${request.method} ${request.url}`\n      );\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (isInitialLoad) {\n      // On initial hydration we don't do any shouldRevalidate stuff - we just\n      // call the unhydrated loaders\n      return isUnhydratedRoute(state, match.route);\n    }\n\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\n// Is this route unhydrated (when v7_partialHydration=true) such that we need\n// to call it's loader on the initial router creation\nfunction isUnhydratedRoute(state: RouterState, route: AgnosticDataRouteObject) {\n  if (!route.loader) {\n    return false;\n  }\n  if (route.loader.hydrate) {\n    return true;\n  }\n  return (\n    state.loaderData[route.id] === undefined &&\n    (!state.errors ||\n      // Loader ran but errored - don't re-run\n      state.errors[route.id] === undefined)\n  );\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  v7_relativeSplatPath: boolean,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location,\n          v7_relativeSplatPath\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        data = await result.json();\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n","import * as React from \"react\";\nimport type {\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  AgnosticRouteMatch,\n  History,\n  LazyRouteFunction,\n  Location,\n  Action as NavigationType,\n  RelativeRoutingType,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject\n  // Omit `future` since those can be pulled from the `router`\n  // `NavigationContext` needs future since it doesn't have a `router` in all cases\n  extends Omit<NavigationContextObject, \"future\"> {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n  unstable_viewTransition?: boolean;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n  future: {\n    v7_relativeSplatPath: boolean;\n  };\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n  isDataRoute: boolean;\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n  isDataRoute: false,\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RevalidationState,\n  To,\n  UIMatch,\n} from \"@remix-run/router\";\nimport {\n  IDLE_BLOCKER,\n  Action as NavigationType,\n  UNSAFE_convertRouteMatchToUiMatch as convertRouteMatchToUiMatch,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  DataRouteMatch,\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nconst navigateEffectWarning =\n  `You should call navigate() in a React.useEffect(), not when ` +\n  `your component is first rendered.`;\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(\n  cb: Parameters<typeof React.useLayoutEffect>[0]\n) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  let { isDataRoute } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\n\nfunction useNavigateUnstable(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let { basename, future, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our history listener yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history (but only if we're not in a data router,\n      // otherwise it'll prepend the basename inside of the router).\n      // If this is a root navigation, then we navigate to the raw basename\n      // which allows the basename to have full control over the presence of a\n      // trailing slash on root links\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [\n      basename,\n      navigator,\n      routePathnamesJson,\n      locationPathname,\n      dataRouterContext,\n    ]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { future } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nexport function useRoutesImpl(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string,\n  dataRouterState?: RemixRouter[\"state\"],\n  future?: RemixRouter[\"future\"]\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterState,\n    future\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own <code style={codeStyles}>ErrorBoundary</code> or{\" \"}\n          <code style={codeStyles}>errorElement</code> prop on your route.\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\nconst defaultErrorElement = <DefaultErrorComponent />;\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (\n      state.location !== props.location ||\n      (state.revalidation !== \"idle\" && props.revalidation === \"idle\")\n    ) {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error !== undefined ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState: RemixRouter[\"state\"] | null = null,\n  future: RemixRouter[\"future\"] | null = null\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (\n        match.route.loader &&\n        match.route.id &&\n        dataRouterState.loaderData[match.route.id] === undefined &&\n        (!dataRouterState.errors ||\n          dataRouterState.errors[match.route.id] === undefined)\n      ) {\n        // We found the first route without data/errors which means it's loader\n        // still needs to run.  Flag that we need to render a fallback and\n        // render up until the appropriate fallback\n        renderFallback = true;\n        if (fallbackIndex >= 0) {\n          renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n        } else {\n          renderedMatches = [renderedMatches[0]];\n        }\n        break;\n      }\n    }\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error: any;\n    let shouldRenderHydrateFallback = false;\n    let errorElement: React.ReactNode | null = null;\n    let hydrateFallbackElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\n            \"route-fallback\",\n            false,\n            \"No `HydrateFallback` element provided to render during initial hydration\"\n          );\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{\n            outlet,\n            matches,\n            isDataRoute: dataRouterState != null,\n          }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        revalidation={dataRouterState.revalidation}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches, isDataRoute: true }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n  UseRouteId = \"useRouteId\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nexport function useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(\n    () => ({\n      revalidate: dataRouterContext.router.revalidate,\n      state: state.revalidation,\n    }),\n    [dataRouterContext.router.revalidate, state.revalidation]\n  );\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches(): UIMatch[] {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router, basename } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (arg) => {\n      if (typeof shouldBlock !== \"function\") {\n        return !!shouldBlock;\n      }\n      if (basename === \"/\") {\n        return shouldBlock(arg);\n      }\n\n      // If they provided us a function and we've got an active basename, strip\n      // it from the locations we expose to the user to match the behavior of\n      // useLocation\n      let { currentLocation, nextLocation, historyAction } = arg;\n      return shouldBlock({\n        currentLocation: {\n          ...currentLocation,\n          pathname:\n            stripBasename(currentLocation.pathname, basename) ||\n            currentLocation.pathname,\n        },\n        nextLocation: {\n          ...nextLocation,\n          pathname:\n            stripBasename(nextLocation.pathname, basename) ||\n            nextLocation.pathname,\n        },\n        historyAction,\n      });\n    },\n    [basename, shouldBlock]\n  );\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey)\n    ? state.blockers.get(blockerKey)!\n    : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable(): NavigateFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our router subscriber yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n\n  return navigate;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import type {\n  InitialEntry,\n  LazyRouteFunction,\n  Location,\n  MemoryHistory,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RouterState,\n  RouterSubscriber,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\nimport * as React from \"react\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./context\";\nimport {\n  _renderMatches,\n  useAsyncValue,\n  useInRouterContext,\n  useLocation,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  useRoutesImpl,\n} from \"./hooks\";\n\nexport interface FutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_startTransition: boolean;\n}\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n  // Only accept future flags relevant to rendering behavior\n  // routing flags should be accessed via router.future\n  future?: Partial<Pick<FutureConfig, \"v7_startTransition\">>;\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let { v7_startTransition } = future || {};\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (newState: RouterState) => {\n      if (v7_startTransition && startTransitionImpl) {\n        startTransitionImpl(() => setStateImpl(newState));\n      } else {\n        setStateImpl(newState);\n      }\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={basename}\n            location={state.location}\n            navigationType={state.historyAction}\n            navigator={navigator}\n            future={{\n              v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n            }}\n          >\n            {state.initialized || router.future.v7_partialHydration ? (\n              <DataRoutes\n                routes={router.routes}\n                future={router.future}\n                state={state}\n              />\n            ) : (\n              fallbackElement\n            )}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  future?: Partial<FutureConfig>;\n}\n\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n  future,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  let { future, static: isStatic } = React.useContext(NavigationContext);\n\n  warning(\n    !isStatic,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(\n    to,\n    getResolveToMatches(matches, future.v7_relativeSplatPath),\n    locationPathname,\n    relative === \"path\"\n  );\n  let jsonPath = JSON.stringify(path);\n\n  React.useEffect(\n    () => navigate(JSON.parse(jsonPath), { replace, state, relative }),\n    [navigate, jsonPath, relative, replace, state]\n  );\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n  future?: Partial<Pick<FutureConfig, \"v7_relativeSplatPath\">>;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n  future,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({\n      basename,\n      navigator,\n      static: staticProp,\n      future: {\n        v7_relativeSplatPath: false,\n        ...future,\n      },\n    }),\n    [basename, future, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n","import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * Enable flushSync for this navigation's state updates\n   */\n  unstable_flushSync?: boolean;\n\n  /**\n   * Enable view transitions on this submission navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport type {\n  DataRouteObject,\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  Navigator,\n  RelativeRoutingType,\n  RouteObject,\n  RouterProviderProps,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n  UNSAFE_useRoutesImpl as useRoutesImpl,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n  RouterState,\n  RouterSubscriber,\n  BlockerFunction,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  UNSAFE_ErrorResponseImpl as ErrorResponseImpl,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n  matchPath,\n  IDLE_FETCHER,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  ErrorResponse,\n  Fetcher,\n  FutureConfig,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathParam,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  ShouldRevalidateFunctionArgs,\n  To,\n  UIMatch,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  redirectDocument,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n  interface Document {\n    startViewTransition(cb: () => Promise<void> | void): ViewTransition;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Contexts\n////////////////////////////////////////////////////////////////////////////////\n\ntype ViewTransitionContextObject =\n  | {\n      isTransitioning: false;\n    }\n  | {\n      isTransitioning: true;\n      flushSync: boolean;\n      currentLocation: Location;\n      nextLocation: Location;\n    };\n\nconst ViewTransitionContext = React.createContext<ViewTransitionContextObject>({\n  isTransitioning: false,\n});\nif (__DEV__) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\n\nexport { ViewTransitionContext as UNSAFE_ViewTransitionContext };\n\n// TODO: (v7) Change the useFetcher data from `any` to `unknown`\ntype FetchersContextObject = Map<string, any>;\n\nconst FetchersContext = React.createContext<FetchersContextObject>(new Map());\nif (__DEV__) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n\nexport { FetchersContext as UNSAFE_FetchersContext };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\n\nfunction startTransitionSafe(cb: () => void) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\n\nfunction flushSyncSafe(cb: () => void) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\n\ninterface ViewTransition {\n  finished: Promise<void>;\n  ready: Promise<void>;\n  updateCallbackDone: Promise<void>;\n  skipTransition(): void;\n}\n\nclass Deferred<T> {\n  status: \"pending\" | \"resolved\" | \"rejected\" = \"pending\";\n  promise: Promise<T>;\n  // @ts-expect-error - no initializer\n  resolve: (value: T) => void;\n  // @ts-expect-error - no initializer\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState<RouterState>();\n  let [vtContext, setVtContext] = React.useState<ViewTransitionContextObject>({\n    isTransitioning: false,\n  });\n  let [renderDfd, setRenderDfd] = React.useState<Deferred<void>>();\n  let [transition, setTransition] = React.useState<ViewTransition>();\n  let [interruption, setInterruption] = React.useState<{\n    state: RouterState;\n    currentLocation: Location;\n    nextLocation: Location;\n  }>();\n  let fetcherData = React.useRef<Map<string, any>>(new Map());\n  let { v7_startTransition } = future || {};\n\n  let optInStartTransition = React.useCallback(\n    (cb: () => void) => {\n      if (v7_startTransition) {\n        startTransitionSafe(cb);\n      } else {\n        cb();\n      }\n    },\n    [v7_startTransition]\n  );\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (\n      newState: RouterState,\n      {\n        deletedFetchers,\n        unstable_flushSync: flushSync,\n        unstable_viewTransitionOpts: viewTransitionOpts,\n      }\n    ) => {\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== undefined) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n\n      let isViewTransitionUnavailable =\n        router.window == null ||\n        typeof router.window.document.startViewTransition !== \"function\";\n\n      // If this isn't a view transition or it's not available in this browser,\n      // just update and be done with it\n      if (!viewTransitionOpts || isViewTransitionUnavailable) {\n        if (flushSync) {\n          flushSyncSafe(() => setStateImpl(newState));\n        } else {\n          optInStartTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n\n      // flushSync + startViewTransition\n      if (flushSync) {\n        // Flush through the context to mark DOM elements as transition=ing\n        flushSyncSafe(() => {\n          // Cancel any pending transitions\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation,\n          });\n        });\n\n        // Update the DOM\n        let t = router.window!.document.startViewTransition(() => {\n          flushSyncSafe(() => setStateImpl(newState));\n        });\n\n        // Clean up after the animation completes\n        t.finished.finally(() => {\n          flushSyncSafe(() => {\n            setRenderDfd(undefined);\n            setTransition(undefined);\n            setPendingState(undefined);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n\n        flushSyncSafe(() => setTransition(t));\n        return;\n      }\n\n      // startTransition + startViewTransition\n      if (transition) {\n        // Interrupting an in-progress transition, cancel and let everything flush\n        // out, and then kick off a new transition from the interruption state\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      } else {\n        // Completed navigation update with opted-in view transitions, let 'er rip\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      }\n    },\n    [router.window, transition, renderDfd, fetcherData, optInStartTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred<void>());\n    }\n  }, [vtContext]);\n\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (\n      renderDfd &&\n      pendingState &&\n      state.location.key === pendingState.location.key\n    ) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation,\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <FetchersContext.Provider value={fetcherData.current}>\n            <ViewTransitionContext.Provider value={vtContext}>\n              <Router\n                basename={basename}\n                location={state.location}\n                navigationType={state.historyAction}\n                navigator={navigator}\n                future={{\n                  v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n                }}\n              >\n                {state.initialized || router.future.v7_partialHydration ? (\n                  <DataRoutes\n                    routes={router.routes}\n                    future={router.future}\n                    state={state}\n                  />\n                ) : (\n                  fallbackElement\n                )}\n              </Router>\n            </ViewTransitionContext.Provider>\n          </FetchersContext.Provider>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n  unstable_viewTransition?: boolean;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\ntype NavLinkRenderProps = {\n  isActive: boolean;\n  isPending: boolean;\n  isTransitioning: boolean;\n};\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?: React.ReactNode | ((props: NavLinkRenderProps) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: NavLinkRenderProps) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: NavLinkRenderProps) => React.CSSProperties | undefined);\n}\n\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n    let isTransitioning =\n      routerState != null &&\n      // Conditional usage is OK here because the usage of a data router is static\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useViewTransitionState(path) &&\n      unstable_viewTransition === true;\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n    // we're looking for a slash _after_ what's in `to`.  For example:\n    //\n    // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n    // both want to look for a / at index 6 to match URL `/users/matt`\n    const endSlashPosition =\n      toPathname !== \"/\" && toPathname.endsWith(\"/\")\n        ? toPathname.length - 1\n        : toPathname.length;\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(endSlashPosition) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning,\n    };\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n        unstable_viewTransition={unstable_viewTransition}\n      >\n        {typeof children === \"function\" ? children(renderProps) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FetcherFormProps\n  extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\nexport interface FormProps extends FetcherFormProps {\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Enable view transitions on this Form navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (\n    {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n        unstable_viewTransition,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n  useViewTransitionState = \"useViewTransitionState\",\n}\n\nenum DataRouterStateHook {\n  UseFetcher = \"useFetcher\",\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\n// Internal hooks\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n// External hooks\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    unstable_viewTransition?: boolean;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, {\n          replace,\n          state,\n          preventScrollReset,\n          relative,\n          unstable_viewTransition,\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"state\">\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          unstable_flushSync: options.unstable_flushSync,\n        });\n      } else {\n        router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          unstable_flushSync: options.unstable_flushSync,\n          unstable_viewTransition: options.unstable_viewTransition,\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: React.ForwardRefExoticComponent<\n    FetcherFormProps & React.RefAttributes<HTMLFormElement>\n  >;\n  submit: FetcherSubmitFunction;\n  load: (href: string, opts?: { unstable_flushSync?: boolean }) => void;\n};\n\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>({\n  key,\n}: { key?: string } = {}): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Fetcher key handling\n  let [fetcherKey, setFetcherKey] = React.useState<string>(key || \"\");\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    setFetcherKey(getUniqueFetcherId());\n  }\n\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  // Fetcher additions\n  let load = React.useCallback(\n    (href: string, opts?: { unstable_flushSync?: boolean }) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n\n  let submitImpl = useSubmit();\n  let submit = React.useCallback<FetcherSubmitFunction>(\n    (target, opts) => {\n      submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey,\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n      (props, ref) => {\n        return (\n          <Form {...props} navigate={false} fetcherKey={fetcherKey} ref={ref} />\n        );\n      }\n    );\n    if (__DEV__) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data,\n    }),\n    [FetcherForm, submit, load, fetcher, data]\n  );\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): (Fetcher & { key: string })[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key,\n  }));\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({\n  when,\n  message,\n}: {\n  when: boolean | BlockerFunction;\n  message: string;\n}) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(\n  to: To,\n  opts: { relative?: RelativeRoutingType } = {}\n) {\n  let vtContext = React.useContext(ViewTransitionContext);\n\n  invariant(\n    vtContext != null,\n    \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" +\n      \"Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n\n  let { basename } = useDataRouterContext(\n    DataRouterHook.useViewTransitionState\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n\n  let currentPath =\n    stripBasename(vtContext.currentLocation.pathname, basename) ||\n    vtContext.currentLocation.pathname;\n  let nextPath =\n    stripBasename(vtContext.nextLocation.pathname, basename) ||\n    vtContext.nextLocation.pathname;\n\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (\n    matchPath(path.pathname, nextPath) != null ||\n    matchPath(path.pathname, currentPath) != null\n  );\n}\n\nexport { useViewTransitionState as unstable_useViewTransitionState };\n\n//#endregion\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, NavLink } from 'react-router-dom';\n\nlet hashFragment = '';\nlet observer = null;\nlet asyncTimerId = null;\nlet scrollFunction = null;\n\nfunction reset() {\n  hashFragment = '';\n  if (observer !== null) observer.disconnect();\n  if (asyncTimerId !== null) {\n    window.clearTimeout(asyncTimerId);\n    asyncTimerId = null;\n  }\n}\n\nfunction isInteractiveElement(element) {\n  const formTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'];\n  const linkTags = ['A', 'AREA'];\n  return (\n    (formTags.includes(element.tagName) && !element.hasAttribute('disabled')) ||\n    (linkTags.includes(element.tagName) && element.hasAttribute('href'))\n  );\n}\n\nfunction getElAndScroll() {\n  let element = null;\n  if (hashFragment === '#') {\n    // use document.body instead of document.documentElement because of a bug in smoothscroll-polyfill in safari\n    // see https://github.com/iamdustan/smoothscroll/issues/138\n    // while smoothscroll-polyfill is not included, it is the recommended way to implement smoothscroll\n    // in browsers that don't natively support el.scrollIntoView({ behavior: 'smooth' })\n    element = document.body;\n  } else {\n    // check for element with matching id before assume '#top' is the top of the document\n    // see https://html.spec.whatwg.org/multipage/browsing-the-web.html#target-element\n    const id = hashFragment.replace('#', '');\n    element = document.getElementById(id);\n    if (element === null && hashFragment === '#top') {\n      // see above comment for why document.body instead of document.documentElement\n      element = document.body;\n    }\n  }\n\n  if (element !== null) {\n    scrollFunction(element);\n\n    // update focus to where the page is scrolled to\n    // unfortunately this doesn't work in safari (desktop and iOS) when blur() is called\n    let originalTabIndex = element.getAttribute('tabindex');\n    if (originalTabIndex === null && !isInteractiveElement(element)) {\n      element.setAttribute('tabindex', -1);\n    }\n    element.focus({ preventScroll: true });\n    if (originalTabIndex === null && !isInteractiveElement(element)) {\n      // for some reason calling blur() in safari resets the focus region to where it was previously,\n      // if blur() is not called it works in safari, but then are stuck with default focus styles\n      // on an element that otherwise might never had focus styles applied, so not an option\n      element.blur();\n      element.removeAttribute('tabindex');\n    }\n\n    reset();\n    return true;\n  }\n  return false;\n}\n\nfunction hashLinkScroll(timeout) {\n  // Push onto callback queue so it runs after the DOM is updated\n  window.setTimeout(() => {\n    if (getElAndScroll() === false) {\n      if (observer === null) {\n        observer = new MutationObserver(getElAndScroll);\n      }\n      observer.observe(document, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n      });\n      // if the element doesn't show up in specified timeout or 10 seconds, stop checking\n      asyncTimerId = window.setTimeout(() => {\n        reset();\n      }, timeout || 10000);\n    }\n  }, 0);\n}\n\nexport function genericHashLink(As) {\n  return React.forwardRef((props, ref) => {\n    let linkHash = '';\n    if (typeof props.to === 'string' && props.to.includes('#')) {\n      linkHash = `#${props.to.split('#').slice(1).join('#')}`;\n    } else if (\n      typeof props.to === 'object' &&\n      typeof props.to.hash === 'string'\n    ) {\n      linkHash = props.to.hash;\n    }\n\n    const passDownProps = {};\n    if (As === NavLink) {\n      passDownProps.isActive = (match, location) =>\n        match && match.isExact && location.hash === linkHash;\n    }\n\n    function handleClick(e) {\n      reset();\n      hashFragment = props.elementId ? `#${props.elementId}` : linkHash;\n      if (props.onClick) props.onClick(e);\n      if (\n        hashFragment !== '' &&\n        // ignore non-vanilla click events, same as react-router\n        // below logic adapted from react-router: https://github.com/ReactTraining/react-router/blob/fc91700e08df8147bd2bb1be19a299cbb14dbcaa/packages/react-router-dom/modules/Link.js#L43-L48\n        !e.defaultPrevented && // onClick prevented default\n        e.button === 0 && // ignore everything but left clicks\n        (!props.target || props.target === '_self') && // let browser handle \"target=_blank\" etc\n        !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) // ignore clicks with modifier keys\n      ) {\n        scrollFunction =\n          props.scroll ||\n          ((el) =>\n            props.smooth\n              ? el.scrollIntoView({ behavior: 'smooth' })\n              : el.scrollIntoView());\n        hashLinkScroll(props.timeout);\n      }\n    }\n    const { scroll, smooth, timeout, elementId, ...filteredProps } = props;\n    return (\n      <As {...passDownProps} {...filteredProps} onClick={handleClick} ref={ref}>\n        {props.children}\n      </As>\n    );\n  });\n}\n\nexport const HashLink = genericHashLink(Link);\n\nexport const NavHashLink = genericHashLink(NavLink);\n\nif (process.env.NODE_ENV !== 'production') {\n  HashLink.displayName = 'HashLink';\n  NavHashLink.displayName = 'NavHashLink';\n\n  const propTypes = {\n    onClick: PropTypes.func,\n    children: PropTypes.node,\n    scroll: PropTypes.func,\n    timeout: PropTypes.number,\n    elementId: PropTypes.string,\n    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  };\n\n  HashLink.propTypes = propTypes;\n  NavHashLink.propTypes = propTypes;\n}\n","import { useState, useEffect } from \"react\";\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\nimport logo from '../assets/img/logo.svg';\nimport navIcon1 from '../assets/img/nav-icon1.svg';\nimport navIcon2 from '../assets/img/nav-icon2.svg';\nimport navIcon3 from '../assets/img/nav-icon3.svg';\nimport { HashLink } from 'react-router-hash-link';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nexport const NavBar = () => {\n\n  const [activeLink, setActiveLink] = useState('home');\n  const [scrolled, setScrolled] = useState(false);\n\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.scrollY > 50) {\n        setScrolled(true);\n      } else {\n        setScrolled(false);\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [])\n\n  const onUpdateActiveLink = (value) => {\n    setActiveLink(value);\n  }\n\n  return (\n    <Router>\n      <Navbar expand=\"md\" className={scrolled ? \"scrolled\" : \"\"}>\n        <Container>\n          <Navbar.Brand href=\"/\">\n          <h1 className=\"logo\">JBS</h1>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </Navbar.Toggle>\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"ms-auto\">\n              <Nav.Link href=\"#home\" className={activeLink === 'home' ? 'active navbar-link' : 'navbar-link'} onClick={() => onUpdateActiveLink('home')}>Inicio</Nav.Link>\n              <Nav.Link href=\"#skills\" className={activeLink === 'skills' ? 'active navbar-link' : 'navbar-link'} onClick={() => onUpdateActiveLink('skills')}>Habilidades</Nav.Link>\n              <Nav.Link href=\"#projects\" className={activeLink === 'projects' ? 'active navbar-link' : 'navbar-link'} onClick={() => onUpdateActiveLink('projects')}>Proyectos</Nav.Link>\n            </Nav>\n            <span className=\"navbar-text\">\n              <div className=\"social-icon\">\n                <a href=\"https://www.linkedin.com/in/jorgelina-belen-sosa/\" rel=\"noopener noreferrer\" target=\"_blank\"><img src={navIcon1} alt=\"\" /></a>\n      \n              </div>\n              <HashLink to='#connect'>\n                <button className=\"vvd\"><span>Contactame</span></button>\n              </HashLink>\n            </span>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </Router>\n  )\n}","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{\n    ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, {\n    ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","var _path,_path2,_path3,_path4,_path5,_path6,_path7,_path8,_path9,_path10,_path11,_path12,_path13,_path14,_path15,_path16,_path17,_path18,_path19,_path20,_path21,_path22,_path23,_path24,_path25,_path26,_path27,_path28,_path29,_path30,_path31,_path32,_path33,_path34,_path35,_path36,_path37,_path38,_path39,_path40,_path41,_path42,_path43,_path44,_path45,_path46,_path47,_path48,_path49,_path50,_path51,_path52,_path53,_path54,_path55,_path56,_path57,_path58,_path59,_path60,_path61,_path62,_path63,_path64,_path65,_path66,_path67,_path68,_path69,_path70,_path71,_path72,_path73,_path74,_path75,_path76,_path77,_path78,_path79,_path80,_path81,_path82,_path83,_path84,_path85,_path86,_path87,_path88,_path89,_path90,_path91,_path92,_path93,_path94,_path95,_path96,_path97,_path98,_path99,_path100,_path101,_path102,_path103,_path104,_path105,_path106,_path107,_path108,_path109,_path110,_path111,_path112,_path113,_path114,_path115,_path116,_path117,_path118,_path119,_path120,_path121,_path122,_path123,_path124,_path125,_path126,_path127,_path128,_path129,_path130,_path131,_path132,_path133,_path134,_path135,_path136,_path137,_path138,_path139,_path140,_path141,_path142,_path143,_path144,_path145,_path146,_path147,_path148,_path149,_path150,_path151,_path152,_path153,_path154,_path155,_path156,_path157,_path158,_path159,_path160,_path161,_path162,_path163,_path164,_path165,_path166,_path167,_path168,_path169,_path170,_path171,_path172,_path173,_path174,_path175,_path176,_path177,_path178,_path179,_path180,_path181,_path182,_path183,_path184,_path185,_path186,_path187,_path188,_path189,_path190,_path191,_path192,_path193,_path194,_path195,_path196,_path197,_path198,_path199,_path200,_path201,_path202,_path203,_path204,_path205,_path206,_path207,_path208,_path209,_path210,_path211,_path212,_path213,_path214,_path215,_path216,_path217,_path218,_path219,_path220,_path221,_path222,_path223,_path224,_path225,_path226,_path227,_path228,_path229,_path230,_path231,_path232,_path233,_path234,_path235,_path236,_path237,_path238,_path239,_path240,_path241,_path242,_path243,_path244,_path245,_path246,_path247,_path248,_path249,_path250,_path251,_path252,_path253,_path254,_path255,_path256,_path257,_path258,_path259,_path260,_path261,_path262,_path263,_path264,_path265,_path266,_path267,_path268,_path269,_path270,_path271,_path272,_path273,_path274,_path275,_path276,_path277,_path278,_path279,_path280,_path281,_path282,_path283,_path284,_path285,_path286,_path287,_path288,_path289,_path290,_path291,_path292,_path293,_path294,_path295,_path296,_path297,_path298,_path299,_path300,_path301,_path302,_path303,_path304,_path305,_path306,_path307,_path308,_path309,_path310,_path311,_path312,_path313,_path314,_path315,_path316,_path317,_path318,_path319,_path320,_path321,_path322,_path323,_path324,_path325,_path326,_path327,_path328,_path329,_path330,_path331,_path332,_path333,_path334,_path335,_path336,_path337,_path338,_path339,_path340,_path341,_path342,_path343,_path344,_path345,_path346,_path347,_path348,_path349,_path350,_path351,_path352,_path353,_path354,_path355,_path356,_path357,_path358,_path359,_path360,_path361,_path362,_path363,_path364,_path365,_path366,_path367,_path368,_path369,_path370,_path371,_path372,_path373,_path374,_path375,_path376,_path377,_path378,_path379,_path380,_path381,_path382,_path383,_path384,_path385,_path386,_path387,_path388,_path389,_path390,_path391,_path392,_path393,_path394,_path395,_path396,_path397,_path398,_path399,_path400,_path401,_path402,_path403,_path404,_path405,_path406,_path407,_path408,_path409,_path410,_path411,_path412,_path413,_path414,_path415,_path416,_path417,_path418,_path419,_path420,_path421,_path422,_path423,_path424,_path425,_path426,_path427,_path428,_path429,_path430,_path431,_path432,_path433,_path434,_path435,_path436,_path437,_path438,_path439,_path440,_path441,_path442,_path443,_path444,_path445,_path446,_path447,_path448,_path449,_path450,_path451,_path452,_path453,_path454,_path455,_path456,_path457,_path458,_path459,_path460,_path461,_path462,_path463,_path464,_path465,_path466,_path467,_path468,_path469,_path470,_path471,_path472,_path473,_path474,_path475,_path476,_path477,_path478,_path479,_path480,_path481,_path482,_path483,_path484,_path485,_path486,_path487,_path488,_path489,_path490,_path491,_path492,_path493,_path494,_path495,_path496,_path497,_path498,_path499,_path500,_path501,_path502,_path503,_path504,_path505,_path506,_path507,_path508,_path509,_path510,_path511,_path512,_path513,_path514,_path515,_path516,_path517,_path518,_path519,_path520,_path521,_path522,_path523,_path524,_path525,_path526,_path527,_path528,_path529,_path530,_path531,_path532,_path533,_path534,_path535,_path536,_path537,_path538,_path539,_path540,_path541,_path542,_path543,_path544,_path545,_path546,_path547,_path548,_path549,_path550,_path551,_path552,_path553,_path554,_path555,_path556,_path557,_path558,_path559,_path560,_path561,_path562,_path563,_path564,_path565,_path566,_path567,_path568,_path569,_path570,_path571,_path572,_path573,_path574,_path575,_path576,_path577,_path578,_path579,_path580,_path581,_path582,_path583,_path584,_path585,_path586,_path587,_path588,_path589,_path590,_path591,_path592,_path593,_path594,_path595,_path596,_path597,_path598,_path599,_path600,_path601,_path602,_path603,_path604,_path605,_path606,_path607,_path608,_path609,_path610,_path611,_path612,_path613,_path614,_path615,_path616,_path617,_path618,_path619,_path620,_path621,_path622,_path623,_path624,_path625,_path626,_path627,_path628,_path629,_path630,_path631,_path632,_path633,_path634,_path635,_path636,_path637,_path638,_path639,_path640,_path641,_path642,_path643,_path644,_path645,_path646,_path647,_path648,_path649,_path650,_path651,_path652,_path653,_path654,_path655,_path656,_path657,_path658,_path659,_path660,_path661,_path662,_path663,_path664,_path665,_path666,_path667,_path668,_path669,_path670,_path671,_path672,_path673,_path674,_path675,_path676,_path677,_path678,_path679,_path680,_path681,_path682,_path683,_path684,_path685,_path686,_path687,_path688,_path689,_path690,_path691,_path692,_path693,_path694,_path695,_path696,_path697,_path698,_path699,_path700,_path701,_path702,_path703,_path704,_path705,_path706,_path707,_path708,_path709,_path710,_path711,_path712,_path713,_path714,_path715,_path716,_path717,_path718,_path719,_path720,_path721,_path722,_path723,_path724,_path725,_path726,_path727,_path728,_path729,_path730,_path731,_path732,_path733,_path734,_path735,_path736,_path737,_path738,_path739,_path740,_path741,_path742,_path743,_path744,_path745,_path746,_path747,_path748,_path749,_path750,_path751,_path752,_path753,_path754,_path755,_path756,_path757,_path758,_path759,_path760,_path761,_path762,_path763,_path764,_path765,_path766,_path767,_path768,_path769,_path770,_path771,_path772,_path773,_path774,_path775,_path776,_path777,_path778,_path779,_path780,_path781,_path782,_path783,_path784,_path785,_path786,_path787,_path788,_path789,_path790,_path791,_path792,_path793,_path794,_path795,_path796,_path797,_path798,_path799,_path800,_path801,_path802,_path803,_path804,_path805,_path806,_path807,_path808,_path809,_path810,_path811,_path812,_path813,_path814,_path815,_path816,_path817,_path818,_path819,_path820,_path821,_path822,_path823,_path824,_path825,_path826,_path827,_path828,_path829,_path830,_path831,_path832,_path833,_path834,_path835,_path836,_path837,_path838,_path839,_path840,_path841,_path842,_path843,_path844,_path845,_path846,_path847,_path848,_path849,_path850,_path851,_path852,_path853,_path854,_path855,_path856,_path857,_path858,_path859,_path860,_path861,_path862,_path863,_path864,_path865,_path866,_path867,_path868,_path869,_path870,_path871,_path872,_path873,_path874,_path875,_path876,_path877,_path878,_path879,_path880,_path881,_path882,_path883,_path884,_path885,_path886,_path887,_path888,_path889,_path890,_path891,_path892,_path893,_path894,_path895,_path896,_path897,_path898,_path899,_path900,_path901,_path902,_path903,_path904,_path905,_path906,_path907,_path908,_path909,_path910,_path911,_path912,_path913,_path914,_path915,_path916,_path917,_path918,_path919,_path920,_path921,_path922,_path923,_path924,_path925,_path926,_path927,_path928,_path929,_path930,_path931,_path932,_path933,_path934,_path935,_path936,_path937,_path938,_path939,_path940,_path941,_path942,_path943,_path944,_path945,_path946,_path947,_path948,_path949,_path950,_path951,_path952,_path953,_path954,_path955,_path956,_path957,_path958,_path959,_path960,_path961,_path962,_path963,_path964,_path965,_path966,_path967,_path968,_path969,_path970,_path971,_path972,_path973,_path974,_path975,_path976,_path977,_path978,_path979,_path980,_path981,_path982,_path983,_path984,_path985,_path986,_path987,_path988,_path989,_path990,_path991,_path992,_path993,_path994,_path995,_path996,_path997,_path998,_path999,_path1000,_path1001,_path1002,_path1003,_path1004,_path1005,_path1006,_path1007,_path1008,_path1009,_path1010,_path1011,_path1012,_path1013,_path1014,_path1015,_path1016,_path1017,_path1018,_path1019,_path1020,_path1021,_path1022,_path1023,_path1024,_path1025,_path1026,_path1027,_path1028,_path1029,_path1030,_path1031,_path1032,_path1033,_path1034,_path1035,_path1036,_path1037,_path1038,_path1039,_path1040,_path1041,_path1042,_path1043,_path1044,_path1045,_path1046,_path1047,_path1048,_path1049,_path1050,_path1051,_path1052,_path1053,_path1054,_path1055,_path1056,_path1057,_path1058,_path1059,_path1060,_path1061,_path1062,_path1063,_path1064,_path1065,_path1066,_path1067,_path1068,_path1069,_path1070,_path1071,_path1072,_path1073,_path1074,_path1075,_path1076,_path1077,_path1078,_path1079,_path1080,_path1081,_path1082,_path1083,_path1084,_path1085,_path1086,_path1087,_path1088,_path1089,_path1090,_path1091,_path1092,_path1093,_path1094,_path1095,_path1096,_path1097,_path1098,_path1099,_path1100,_path1101,_path1102,_path1103,_path1104,_path1105,_path1106,_path1107,_path1108,_path1109,_path1110,_path1111,_path1112,_path1113,_path1114,_path1115,_path1116,_path1117,_path1118,_path1119,_path1120,_path1121,_path1122,_path1123,_path1124,_path1125,_path1126,_path1127,_path1128,_path1129,_path1130,_path1131,_path1132,_path1133,_path1134,_path1135,_path1136,_path1137,_path1138,_path1139,_path1140,_path1141,_path1142,_path1143,_path1144,_path1145,_path1146,_path1147,_path1148,_path1149,_path1150,_path1151,_path1152,_path1153,_path1154,_path1155,_path1156,_path1157,_path1158,_path1159,_path1160,_path1161,_path1162,_path1163,_path1164,_path1165,_path1166,_path1167,_path1168,_path1169,_path1170,_path1171,_path1172,_path1173,_path1174,_path1175,_path1176,_path1177,_path1178,_path1179,_path1180,_path1181,_path1182,_path1183,_path1184,_path1185,_path1186,_path1187,_path1188,_path1189,_path1190,_path1191,_path1192,_path1193,_path1194,_path1195,_path1196,_path1197,_path1198,_path1199,_path1200,_path1201,_path1202,_path1203,_path1204,_path1205,_path1206,_path1207,_path1208,_path1209,_path1210,_path1211,_path1212,_path1213,_path1214,_path1215,_path1216,_path1217,_path1218,_path1219,_path1220,_path1221,_path1222,_path1223,_path1224,_path1225,_path1226,_path1227,_path1228,_path1229,_path1230,_path1231,_path1232,_path1233,_path1234,_path1235,_path1236,_path1237,_path1238,_path1239,_path1240,_path1241,_path1242,_path1243,_path1244,_path1245,_path1246,_path1247,_path1248,_path1249,_path1250,_path1251,_path1252,_path1253,_path1254,_path1255,_path1256,_path1257,_path1258,_path1259,_path1260,_path1261,_path1262,_path1263,_path1264,_path1265,_path1266,_path1267,_path1268,_path1269,_path1270,_path1271,_path1272,_path1273,_path1274,_path1275,_path1276,_path1277,_path1278,_path1279,_path1280,_path1281,_path1282,_path1283,_path1284,_path1285,_path1286,_path1287,_path1288,_path1289,_path1290,_path1291,_path1292,_path1293,_path1294,_path1295,_path1296,_path1297,_path1298,_path1299,_path1300,_path1301,_path1302,_path1303,_path1304,_path1305,_path1306,_path1307,_path1308,_path1309,_path1310,_path1311,_path1312,_path1313,_path1314,_path1315,_path1316,_path1317,_path1318,_path1319,_path1320,_path1321,_path1322,_path1323,_path1324,_path1325,_path1326,_path1327,_path1328,_path1329,_path1330,_path1331,_path1332,_path1333,_path1334,_path1335,_path1336,_path1337,_path1338,_path1339,_path1340,_path1341,_path1342,_path1343,_path1344,_path1345,_path1346,_path1347,_path1348,_path1349,_path1350,_path1351,_path1352,_path1353,_path1354,_path1355,_path1356,_path1357,_path1358,_path1359,_path1360,_path1361,_path1362,_path1363,_path1364,_path1365,_path1366,_path1367,_path1368,_path1369,_path1370,_path1371,_path1372,_path1373,_path1374,_path1375,_path1376,_path1377,_path1378,_path1379,_path1380,_path1381,_path1382,_path1383,_path1384,_path1385,_path1386,_path1387,_path1388,_path1389,_path1390,_path1391,_path1392,_path1393,_path1394,_path1395,_path1396,_path1397,_path1398,_path1399,_path1400,_path1401,_path1402,_path1403,_path1404,_path1405,_path1406,_path1407,_path1408,_path1409,_path1410,_path1411,_path1412,_path1413,_path1414,_path1415,_path1416,_path1417,_path1418,_path1419,_path1420,_path1421,_path1422,_path1423,_path1424,_path1425,_path1426,_path1427,_path1428,_path1429,_path1430,_path1431,_path1432,_path1433,_path1434,_path1435,_path1436,_path1437,_path1438,_path1439,_path1440,_path1441,_path1442,_path1443,_path1444,_path1445,_path1446,_path1447,_path1448,_path1449,_path1450,_path1451,_path1452,_path1453,_path1454,_path1455,_path1456,_path1457,_path1458,_path1459,_path1460,_path1461,_path1462,_path1463,_path1464,_path1465,_path1466,_path1467,_path1468,_path1469,_path1470,_path1471,_path1472,_path1473,_path1474,_path1475,_path1476,_path1477,_path1478,_path1479,_path1480,_path1481,_path1482,_path1483,_path1484,_path1485,_path1486,_path1487,_path1488,_path1489,_path1490,_path1491,_path1492,_path1493,_path1494,_path1495,_path1496,_path1497,_path1498,_path1499,_path1500,_path1501,_path1502,_path1503,_path1504,_path1505,_path1506,_path1507,_path1508,_path1509,_path1510,_path1511,_path1512,_path1513,_path1514,_path1515,_path1516,_path1517,_path1518,_path1519,_path1520,_path1521,_path1522,_path1523,_path1524,_path1525,_path1526,_path1527,_path1528,_path1529,_path1530,_path1531,_path1532,_path1533,_path1534,_path1535,_path1536,_path1537,_path1538,_path1539,_path1540,_path1541,_path1542,_path1543,_path1544,_path1545,_path1546,_path1547,_path1548,_path1549,_path1550,_path1551,_path1552,_path1553,_path1554,_path1555,_path1556,_path1557,_path1558,_path1559,_path1560,_path1561,_path1562,_path1563,_path1564,_path1565,_path1566,_path1567,_path1568,_path1569,_path1570,_path1571,_path1572,_path1573,_path1574,_path1575,_path1576,_path1577,_path1578,_path1579,_path1580,_path1581,_path1582,_path1583,_path1584,_path1585,_path1586,_path1587,_path1588,_path1589,_path1590,_path1591,_path1592,_path1593,_path1594,_path1595,_path1596,_path1597,_path1598,_path1599,_path1600,_path1601,_path1602,_path1603,_path1604,_path1605,_path1606,_path1607,_path1608,_path1609,_path1610,_path1611,_path1612,_path1613,_path1614,_path1615,_path1616,_path1617,_path1618,_path1619,_path1620,_path1621,_path1622,_path1623,_path1624,_path1625,_path1626,_path1627,_path1628,_path1629,_path1630,_path1631,_path1632,_path1633,_path1634,_path1635,_path1636,_path1637,_path1638,_path1639,_path1640,_path1641,_path1642,_path1643,_path1644,_path1645,_path1646,_path1647,_path1648,_path1649,_path1650,_path1651,_path1652,_path1653,_path1654,_path1655,_path1656,_path1657,_path1658,_path1659,_path1660,_path1661,_path1662,_path1663,_path1664,_path1665,_path1666,_path1667,_path1668,_path1669,_path1670,_path1671,_path1672,_path1673,_path1674,_path1675,_path1676,_path1677,_path1678,_path1679,_path1680,_path1681,_path1682,_path1683,_path1684,_path1685,_path1686,_path1687,_path1688,_path1689,_path1690,_path1691,_path1692,_path1693,_path1694,_path1695,_path1696,_path1697,_path1698,_path1699,_path1700,_path1701,_path1702,_path1703,_path1704,_path1705,_path1706,_path1707,_path1708,_path1709,_path1710,_path1711,_path1712,_path1713,_path1714,_path1715,_path1716,_path1717,_path1718,_path1719,_path1720,_path1721,_path1722,_path1723,_path1724,_path1725,_path1726,_path1727,_path1728,_path1729,_path1730,_path1731,_path1732,_path1733,_path1734,_path1735,_path1736,_path1737,_path1738,_path1739,_path1740,_path1741,_path1742,_path1743,_path1744,_path1745,_path1746,_path1747,_path1748,_path1749,_path1750,_path1751,_path1752,_path1753,_path1754,_path1755,_path1756,_path1757,_path1758,_path1759,_path1760,_path1761,_path1762,_path1763,_path1764,_path1765,_path1766,_path1767,_path1768,_path1769,_path1770,_path1771,_path1772,_path1773,_path1774,_path1775,_path1776,_path1777,_path1778,_path1779,_path1780,_path1781,_path1782,_path1783,_path1784,_path1785,_path1786,_path1787,_path1788,_path1789,_path1790,_path1791,_path1792,_path1793,_path1794,_path1795,_path1796,_path1797,_path1798,_path1799,_path1800,_path1801,_path1802,_path1803,_path1804,_path1805,_path1806,_path1807,_path1808,_path1809,_path1810,_path1811,_path1812,_path1813,_path1814,_path1815,_path1816,_path1817,_path1818,_path1819,_path1820,_path1821,_path1822,_path1823,_path1824,_path1825,_path1826,_path1827,_path1828,_path1829,_path1830,_path1831,_path1832,_path1833,_path1834,_path1835,_path1836,_path1837,_path1838,_path1839,_path1840,_path1841,_path1842,_path1843,_path1844,_path1845,_path1846,_path1847,_path1848,_path1849,_path1850,_path1851,_path1852,_path1853,_path1854,_path1855,_path1856,_path1857,_path1858,_path1859,_path1860,_path1861,_path1862,_path1863,_path1864,_path1865,_path1866,_path1867,_path1868,_path1869,_path1870,_path1871,_path1872,_path1873,_path1874,_path1875,_path1876,_path1877,_path1878,_path1879,_path1880,_path1881,_path1882,_path1883,_path1884,_path1885,_path1886,_path1887,_path1888,_path1889,_path1890,_path1891,_path1892,_path1893,_path1894,_path1895,_path1896,_path1897,_path1898,_path1899,_path1900,_path1901,_path1902,_path1903,_path1904,_path1905,_path1906,_path1907,_path1908,_path1909,_path1910,_path1911,_path1912,_path1913,_path1914,_path1915,_path1916,_path1917,_path1918,_path1919,_path1920,_path1921,_path1922,_path1923,_path1924,_path1925,_path1926,_path1927,_path1928,_path1929,_path1930,_path1931,_path1932,_path1933,_path1934,_path1935,_path1936,_path1937,_path1938,_path1939,_path1940,_path1941,_path1942,_path1943,_path1944,_path1945,_path1946,_path1947,_path1948,_path1949,_path1950,_path1951,_path1952,_path1953,_path1954,_path1955,_path1956,_path1957,_path1958,_path1959,_path1960,_path1961,_path1962,_path1963,_path1964,_path1965,_path1966,_path1967,_path1968,_path1969,_path1970,_path1971,_path1972,_path1973,_path1974,_path1975,_path1976,_path1977,_path1978,_path1979,_path1980,_path1981,_path1982,_path1983,_path1984,_path1985,_path1986,_path1987,_path1988,_path1989,_path1990,_path1991,_path1992,_path1993,_path1994,_path1995,_path1996,_path1997,_path1998,_path1999,_path2000,_path2001,_path2002,_path2003,_path2004,_path2005,_path2006,_path2007,_path2008,_path2009,_path2010,_path2011,_path2012,_path2013,_path2014,_path2015,_path2016,_path2017,_path2018,_path2019,_path2020,_path2021,_path2022,_path2023,_path2024,_path2025,_path2026,_path2027,_path2028,_path2029,_path2030,_path2031,_path2032,_path2033,_path2034,_path2035,_path2036,_path2037,_path2038,_path2039,_path2040,_path2041,_path2042,_path2043,_path2044,_path2045,_path2046,_path2047,_path2048,_path2049,_path2050,_path2051,_path2052,_path2053,_path2054,_path2055,_path2056,_path2057,_path2058,_path2059,_path2060,_path2061,_path2062,_path2063,_path2064,_path2065,_path2066,_path2067,_path2068,_path2069,_path2070,_path2071,_path2072,_path2073,_path2074,_path2075,_path2076,_path2077,_path2078,_path2079,_path2080,_path2081,_path2082,_path2083,_path2084,_path2085,_path2086,_path2087,_path2088,_path2089,_path2090,_path2091,_path2092,_path2093,_path2094,_path2095,_path2096,_path2097,_path2098,_path2099,_path2100,_path2101,_path2102,_path2103,_path2104,_path2105,_path2106,_path2107,_path2108,_path2109,_path2110,_path2111,_path2112,_path2113,_path2114,_path2115,_path2116,_path2117,_path2118,_path2119,_path2120,_path2121,_path2122,_path2123,_path2124,_path2125,_path2126,_path2127,_path2128,_path2129,_path2130,_path2131,_path2132,_path2133,_path2134,_path2135,_path2136,_path2137,_path2138,_path2139,_path2140,_path2141,_path2142,_path2143,_path2144,_path2145,_path2146,_path2147,_path2148,_path2149,_path2150,_path2151,_path2152,_path2153,_path2154,_path2155,_path2156,_path2157,_path2158,_path2159,_path2160,_path2161,_path2162,_path2163,_path2164,_path2165,_path2166,_path2167,_path2168,_path2169,_path2170,_path2171,_path2172,_path2173,_path2174,_path2175,_path2176,_path2177,_path2178,_path2179,_path2180,_path2181,_path2182,_path2183,_path2184,_path2185,_path2186,_path2187,_path2188,_path2189,_path2190,_path2191,_path2192,_path2193,_path2194,_path2195,_path2196,_path2197,_path2198,_path2199,_path2200,_path2201,_path2202,_path2203,_path2204,_path2205,_path2206,_path2207,_path2208,_path2209,_path2210,_path2211,_path2212,_path2213,_path2214,_path2215,_path2216,_path2217,_path2218,_path2219,_path2220,_path2221,_path2222,_path2223,_path2224,_path2225,_path2226,_path2227,_path2228,_path2229,_path2230,_path2231,_path2232,_path2233,_path2234,_path2235,_path2236,_path2237,_path2238,_path2239,_path2240,_path2241,_path2242,_path2243,_path2244,_path2245,_path2246,_path2247,_path2248,_path2249,_path2250,_path2251,_path2252,_path2253,_path2254,_path2255,_path2256,_path2257,_path2258,_path2259,_path2260,_path2261,_path2262,_path2263,_path2264,_path2265,_path2266,_path2267,_path2268,_path2269,_path2270,_path2271,_path2272,_path2273,_path2274,_path2275,_path2276,_path2277,_path2278,_path2279,_path2280,_path2281,_path2282,_path2283,_path2284,_path2285,_path2286,_path2287,_path2288,_path2289,_path2290,_path2291,_path2292,_path2293,_path2294,_path2295,_path2296,_path2297,_path2298,_path2299,_path2300,_path2301,_path2302,_path2303,_path2304,_path2305,_path2306,_path2307,_path2308,_path2309,_path2310,_path2311,_path2312,_path2313,_path2314,_path2315,_path2316,_path2317,_path2318,_path2319,_path2320,_path2321,_path2322,_path2323,_path2324,_path2325,_path2326,_path2327,_path2328,_path2329,_path2330,_path2331,_path2332,_path2333,_path2334,_path2335,_path2336,_path2337,_path2338,_path2339,_path2340,_path2341,_path2342,_path2343,_path2344,_path2345,_path2346,_path2347,_path2348,_path2349,_path2350,_path2351,_path2352,_path2353,_path2354,_path2355,_path2356,_path2357,_path2358,_path2359,_path2360,_path2361,_path2362,_path2363,_path2364,_path2365,_path2366,_path2367,_path2368,_path2369,_path2370,_path2371,_path2372,_path2373,_path2374,_path2375,_path2376,_path2377,_path2378,_path2379,_path2380,_path2381,_path2382,_path2383,_path2384,_path2385,_path2386,_path2387,_path2388,_path2389,_path2390,_path2391,_path2392,_path2393,_path2394,_path2395,_path2396,_path2397,_path2398,_path2399,_path2400,_path2401,_path2402,_path2403,_path2404,_path2405,_path2406,_path2407,_path2408,_path2409,_path2410,_path2411,_path2412,_path2413,_path2414,_path2415,_path2416,_path2417,_path2418,_path2419,_path2420,_path2421,_path2422,_path2423,_path2424,_path2425,_path2426,_path2427,_path2428,_path2429,_path2430,_path2431,_path2432,_path2433,_path2434,_path2435,_path2436,_path2437,_path2438,_path2439,_path2440,_path2441,_path2442,_path2443,_path2444,_path2445,_path2446,_path2447,_path2448,_path2449,_path2450,_path2451,_path2452,_path2453,_path2454,_path2455,_path2456,_path2457,_path2458,_path2459,_path2460,_path2461,_path2462,_path2463,_path2464,_path2465,_path2466,_path2467,_path2468,_path2469,_path2470,_path2471,_path2472,_path2473,_path2474,_path2475,_path2476,_path2477,_path2478,_path2479,_path2480,_path2481,_path2482,_path2483,_path2484,_path2485,_path2486,_path2487,_path2488,_path2489,_path2490,_path2491,_path2492,_path2493,_path2494,_path2495,_path2496,_path2497,_path2498,_path2499,_path2500,_path2501,_path2502,_path2503,_path2504,_path2505,_path2506,_path2507,_path2508,_path2509,_path2510,_path2511,_path2512,_path2513,_path2514,_path2515,_path2516,_path2517,_path2518,_path2519,_path2520,_path2521,_path2522,_path2523,_path2524,_path2525,_path2526,_path2527,_path2528,_path2529,_path2530,_path2531,_path2532,_path2533,_path2534,_path2535,_path2536,_path2537,_path2538,_path2539,_path2540,_path2541,_path2542,_path2543,_path2544,_path2545,_path2546,_path2547,_path2548,_path2549,_path2550,_path2551,_path2552,_path2553,_path2554,_path2555,_path2556,_path2557,_path2558,_path2559,_path2560,_path2561,_path2562,_path2563,_path2564,_path2565,_path2566,_path2567,_path2568,_path2569,_path2570,_path2571,_path2572,_path2573,_path2574,_path2575,_path2576,_path2577,_path2578,_path2579,_path2580,_path2581,_path2582,_path2583,_path2584,_path2585,_path2586,_path2587,_path2588,_path2589,_path2590,_path2591,_path2592,_path2593,_path2594,_path2595,_path2596,_path2597,_path2598,_path2599,_path2600,_path2601,_path2602,_path2603,_path2604,_path2605,_path2606,_path2607,_path2608,_path2609,_path2610,_path2611,_path2612,_path2613,_path2614,_path2615,_path2616,_path2617,_path2618,_path2619,_path2620,_path2621,_path2622,_path2623,_path2624,_path2625,_path2626;function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from\"react\";function SvgHeaderImg(_ref,svgRef){let{title,titleId,...props}=_ref;return/*#__PURE__*/React.createElement(\"svg\",_extends({xmlns:\"http://www.w3.org/2000/svg\",width:1280,height:1280,ref:svgRef,\"aria-labelledby\":titleId},props),title?/*#__PURE__*/React.createElement(\"title\",{id:titleId},title):null,_path||(_path=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.75 0.25 1.51 0.5 2.28 0.76 C6.65 2.34 9.74 4.23 13.31 7.25 C15.41 8.26 15.41 8.26 17.56 8.88 C18.33 9.11 19.1 9.35 19.89 9.6 C23.06 10.45 26.24 11.13 29.46 11.72 C31.31 12.25 31.31 12.25 33.31 14.25 C34.91 14.76 36.54 15.19 38.17 15.58 C44.52 17.23 50.5 19.51 56.56 22 C57.71 22.47 58.86 22.94 60.04 23.43 C69.39 27.32 78.56 31.55 87.69 35.94 C88.33 36.24 88.97 36.55 89.62 36.86 C98.54 41.14 106.98 45.92 115.31 51.25 C116.4 51.94 117.48 52.62 118.59 53.33 C125.45 57.71 131.5 62.56 137.31 68.25 C138.02 68.92 138.72 69.58 139.44 70.27 C147.26 78.26 152.84 88.05 158.65 97.54 C159.78 99.39 160.94 101.23 162.11 103.06 C162.67 103.95 163.23 104.83 163.8 105.75 C164.56 106.94 164.56 106.94 165.34 108.16 C166.31 110.25 166.31 110.25 165.31 113.25 C166.26 115.83 166.26 115.83 167.69 118.56 C169.57 122.49 170.96 125.86 171.31 130.25 C172.3 129.92 173.29 129.59 174.31 129.25 C179.68 141.07 182.3 152.81 184.26 165.57 C186.5 180.07 188.88 194.44 192.62 208.64 C194.24 215.15 194.35 220.75 193.62 227.43 C193.24 230.44 193.24 230.44 193.31 234.25 C194.96 234.58 196.61 234.91 198.31 235.25 C200.4 242.8 201.89 250.35 203.12 258.07 C204.02 263.64 205.09 269.16 206.25 274.69 C207.93 282.75 209.16 290.84 210.31 299 C211.96 310.6 213.82 322.02 218.06 333 C219.31 336.25 219.31 336.25 219.31 340.25 C218.32 340.75 218.32 340.75 217.31 341.25 C218.27 342.02 218.27 342.02 219.25 342.81 C221.91 345.96 221.76 348.2 222.31 352.25 C223.04 354.67 223.83 357.06 224.69 359.44 C225.11 360.63 225.53 361.82 225.96 363.04 C227.18 365.92 228.37 367.85 230.31 370.25 C232.99 374.45 235.21 378.86 237.44 383.31 C237.98 384.37 237.98 384.37 238.53 385.46 C238.87 386.14 239.22 386.83 239.57 387.54 C239.88 388.15 240.19 388.77 240.51 389.41 C241.83 392.45 242.31 394.93 242.31 398.25 C243.29 399.27 244.29 400.27 245.31 401.25 C245.98 402.58 246.65 403.92 247.31 405.25 C247.78 405.7 248.25 406.16 248.73 406.62 C250.45 408.39 251.5 410.1 252.69 412.27 C253.12 413.04 253.54 413.82 253.98 414.62 C254.42 415.43 254.86 416.23 255.31 417.06 C255.75 417.86 256.19 418.65 256.64 419.47 C257.88 421.72 259.1 423.99 260.31 426.25 C261.21 427.86 261.21 427.86 262.12 429.51 C263.38 432.42 263.32 434.14 263.31 437.25 C264.51 439.98 264.51 439.98 266.19 442.56 C266.99 443.89 266.99 443.89 267.8 445.24 C268.3 445.9 268.8 446.57 269.31 447.25 C269.97 447.25 270.63 447.25 271.31 447.25 C273.31 452 273.31 452 273.31 454.25 C273.63 455.59 273.96 456.92 274.31 458.25 C275.3 457.92 276.29 457.59 277.31 457.25 C277.41 457.97 277.52 458.69 277.62 459.43 C278.4 462.59 279.58 464.61 281.38 467.31 C282.01 468.27 282.64 469.23 283.29 470.22 C283.96 471.22 284.62 472.22 285.31 473.25 C285.96 474.25 286.61 475.25 287.27 476.28 C291.6 482.92 296.27 489.14 301.31 495.25 C302.02 496.14 302.73 497.03 303.46 497.94 C305 499.86 306.54 501.55 308.31 503.25 C309.12 504.1 309.92 504.94 310.75 505.81 C313.08 508.27 313.08 508.27 315.5 509.31 C317.31 510.25 317.31 510.25 318.25 512.25 C319.72 515.01 321.44 515.2 324.31 516.25 C326.15 517.75 327.16 518.93 328.19 521.06 C330.86 526.26 335 530.02 339.45 533.69 C340.7 534.74 341.92 535.82 343.12 536.94 C354.78 547.77 369.83 553.23 384.31 559.25 C385.08 559.57 385.84 559.89 386.63 560.22 C396.76 564.41 407.1 567.88 417.5 571.31 C438.27 578.17 438.27 578.17 447.31 582.25 C448.18 582.64 449.06 583.04 449.96 583.44 C461.28 588.6 472.34 593.72 482.31 601.25 C483.09 601.83 483.87 602.42 484.67 603.02 C486.91 604.73 489.11 606.48 491.31 608.25 C492.22 608.96 493.12 609.67 494.05 610.39 C494.96 611.11 495.87 611.83 496.81 612.56 C497.65 613.22 498.48 613.87 499.34 614.55 C501.31 616.25 501.31 616.25 502.31 618.25 C502.76 618.68 503.2 619.1 503.66 619.54 C505.75 621.71 507.21 624.07 508.81 626.62 C509.4 627.56 509.99 628.5 510.59 629.46 C511.16 630.38 511.73 631.3 512.31 632.25 C512.87 633.1 513.42 633.95 513.99 634.83 C515.91 638.34 515.98 641.29 516.31 645.25 C516.97 645.25 517.63 645.25 518.31 645.25 C518.46 645.93 518.6 646.61 518.75 647.3 C521.57 660.35 524.56 673.13 529.22 685.66 C530.81 690.07 531.53 692.61 530.31 697.25 C531.01 699.43 531.01 699.43 532.19 701.5 C534.46 706.15 534.99 710.1 535.31 715.25 C535.97 715.25 536.63 715.25 537.31 715.25 C537.31 715.91 537.31 716.57 537.31 717.25 C538.3 717.75 538.3 717.75 539.31 718.25 C539.31 887.87 539.31 1057.49 539.31 1232.25 C270.68 1232.49 270.68 1232.49 167.93 1232.54 C166.49 1232.54 165.05 1232.54 163.61 1232.54 C162.53 1232.54 162.53 1232.54 161.42 1232.54 C135.91 1232.55 110.39 1232.57 84.88 1232.58 C82.44 1232.58 80 1232.58 77.57 1232.58 C40.27 1232.6 2.97 1232.62 -34.33 1232.66 C-35.14 1232.66 -35.94 1232.66 -36.76 1232.66 C-49.7 1232.68 -62.64 1232.69 -75.58 1232.71 C-112.83 1232.74 -150.09 1232.78 -187.34 1232.8 C-188.11 1232.8 -188.87 1232.8 -189.66 1232.8 C-206.47 1232.8 -223.28 1232.81 -240.09 1232.81 C-246.85 1232.82 -253.62 1232.82 -260.38 1232.82 C-261.12 1232.82 -261.86 1232.82 -262.62 1232.82 C-286.49 1232.83 -310.35 1232.85 -334.22 1232.89 C-358.25 1232.92 -382.29 1232.94 -406.32 1232.93 C-421.24 1232.93 -436.16 1232.94 -451.08 1232.97 C-460.58 1233 -470.09 1233 -479.6 1232.98 C-485.02 1232.97 -490.45 1232.97 -495.87 1233 C-500.8 1233.02 -505.73 1233.02 -510.66 1232.99 C-512.44 1232.99 -514.21 1233 -515.99 1233.01 C-518.4 1233.03 -520.8 1233.02 -523.21 1233 C-523.9 1233.01 -524.59 1233.03 -525.31 1233.04 C-528.05 1232.98 -530.1 1232.77 -532.2 1230.91 C-533.44 1229.42 -534.57 1227.84 -535.69 1226.25 C-537.39 1224.87 -537.39 1224.87 -539 1224 C-539.89 1223.42 -540.77 1222.85 -541.69 1222.25 C-541.69 1221.59 -541.69 1220.93 -541.69 1220.25 C-542.3 1220.14 -542.92 1220.03 -543.55 1219.91 C-546.35 1219.41 -549.14 1218.89 -551.94 1218.38 C-552.91 1218.2 -553.87 1218.03 -554.87 1217.85 C-555.81 1217.67 -556.74 1217.5 -557.7 1217.32 C-558.99 1217.08 -558.99 1217.08 -560.31 1216.84 C-562.67 1216.26 -564.57 1215.42 -566.69 1214.25 C-567.02 1214.91 -567.35 1215.57 -567.69 1216.25 C-584.06 1211.46 -599.56 1201.06 -610.69 1188.25 C-611.02 1187.26 -611.35 1186.27 -611.69 1185.25 C-612.68 1184.92 -613.67 1184.59 -614.69 1184.25 C-615.39 1182.94 -616.05 1181.6 -616.69 1180.25 C-617.26 1179.55 -617.84 1178.85 -618.44 1178.12 C-623.66 1171.45 -627.46 1164.06 -630.69 1156.25 C-631.1 1155.34 -631.51 1154.43 -631.94 1153.5 C-632.78 1150.96 -632.69 1148.91 -632.69 1146.25 C-633.32 1144.9 -633.99 1143.57 -634.69 1142.25 C-635.59 1138.89 -635.81 1137.61 -634.69 1134.25 C-634.69 1133.59 -634.69 1132.93 -634.69 1132.25 C-635.35 1132.25 -636.01 1132.25 -636.69 1132.25 C-637.76 1127.49 -637.48 1123.9 -636.51 1119.13 C-636.38 1118.47 -636.24 1117.8 -636.11 1117.12 C-635.69 1115.02 -635.25 1112.91 -634.81 1110.81 C-634.39 1108.71 -633.96 1106.62 -633.54 1104.52 C-633.15 1102.61 -632.76 1100.7 -632.37 1098.8 C-631.91 1096.39 -631.52 1093.96 -631.19 1091.53 C-630.78 1088.82 -630.34 1086.91 -629.16 1084.49 C-628.85 1083.85 -628.53 1083.21 -628.21 1082.55 C-627.71 1081.57 -627.71 1081.57 -627.19 1080.56 C-626.83 1079.87 -626.48 1079.17 -626.11 1078.45 C-620.24 1067.31 -612.95 1058.68 -602.69 1051.25 C-601.73 1050.55 -600.77 1049.86 -599.78 1049.14 C-587.17 1041.44 -570.88 1041.75 -556.88 1044.69 C-554.16 1045.35 -551.46 1046.04 -548.76 1046.79 C-541.56 1048.39 -533.77 1046.92 -526.56 1045.94 C-525.55 1045.8 -524.55 1045.67 -523.51 1045.53 C-499.24 1042.67 -499.24 1042.67 -479.88 1029.03 C-478.07 1026.48 -476.37 1023.89 -474.69 1021.25 C-474.08 1020.35 -473.47 1019.44 -472.84 1018.51 C-464.03 1005.27 -459.2 988.63 -462.19 972.56 C-462.44 971.42 -462.44 971.42 -462.69 970.25 C-462.69 968.93 -462.69 967.61 -462.69 966.25 C-462.03 966.25 -461.37 966.25 -460.69 966.25 C-460.69 965.59 -460.69 964.93 -460.69 964.25 C-461.68 964.25 -462.67 964.25 -463.69 964.25 C-463.61 963.53 -463.52 962.81 -463.44 962.06 C-463.76 958.38 -465.19 956.9 -467.69 954.25 C-468.35 953.92 -469.01 953.59 -469.69 953.25 C-469.69 952.26 -469.69 951.27 -469.69 950.25 C-470.39 950.02 -471.09 949.8 -471.81 949.56 C-478.05 946.72 -481 942.83 -484.69 937.25 C-486.38 935.07 -488.08 932.9 -489.81 930.75 C-497.57 920.98 -504.67 910.77 -511.75 900.5 C-512.23 899.81 -512.71 899.12 -513.2 898.4 C-516.56 893.5 -516.56 893.5 -517.69 891.25 C-518.35 890.59 -519.01 889.93 -519.69 889.25 C-519.69 887.93 -519.69 886.61 -519.69 885.25 C-520.35 885.25 -521.01 885.25 -521.69 885.25 C-521.79 883.36 -521.88 881.47 -521.98 879.59 C-522.83 876.76 -524.42 875.09 -526.35 872.91 C-528.65 870.06 -530.16 866.85 -531.75 863.56 C-532.1 862.86 -532.44 862.15 -532.8 861.43 C-535.5 855.82 -537.73 850.16 -539.69 844.25 C-540.05 843.3 -540.41 842.35 -540.78 841.37 C-547.9 821.95 -544.19 800.6 -535.74 782.18 C-533.11 776.51 -530.41 770.87 -527.69 765.25 C-527.36 764.58 -527.04 763.91 -526.7 763.21 C-522.72 755 -518.41 747.06 -513.69 739.25 C-513.07 738.22 -512.46 737.2 -511.82 736.14 C-504.55 724.17 -497.13 712.51 -487.91 701.93 C-485.61 699.16 -483.66 696.27 -481.69 693.25 C-480.99 692.4 -480.28 691.56 -479.56 690.69 C-477.63 688.42 -477.63 688.42 -476.88 686.07 C-475.28 682.28 -473.04 679.11 -470.69 675.75 C-470.2 675.05 -469.71 674.35 -469.21 673.63 C-456.45 655.4 -456.45 655.4 -449.16 648.81 C-447.29 646.82 -446.09 644.59 -444.69 642.25 C-443.47 640.82 -442.22 639.43 -440.94 638.06 C-437.23 634 -434.14 629.72 -431.13 625.12 C-430.66 624.5 -430.18 623.89 -429.69 623.25 C-429.03 623.25 -428.37 623.25 -427.69 623.25 C-427.61 622.69 -427.54 622.13 -427.46 621.55 C-426.4 618.4 -424.57 616.76 -422.25 614.38 C-417.27 609.05 -413.08 603.44 -408.93 597.45 C-407.2 594.98 -405.42 592.69 -403.5 590.38 C-397.18 582.07 -393.85 571.07 -390.69 561.25 C-390.03 560.26 -389.37 559.27 -388.69 558.25 C-388.2 556.43 -387.77 554.59 -387.38 552.75 C-386.11 547.44 -384.29 542.79 -381.93 537.88 C-380.79 535.47 -379.82 533.06 -378.88 530.56 C-375.72 522.54 -371.59 514.93 -367.67 507.26 C-362.67 497.44 -358.04 487.52 -353.64 477.43 C-352.74 475.37 -351.83 473.31 -350.91 471.26 C-344.42 456.66 -338.52 441.8 -333.01 426.81 C-332.17 424.56 -331.32 422.32 -330.43 420.1 C-328.23 414.48 -327.35 410.27 -327.69 404.25 C-327.36 403.92 -327.03 403.59 -326.69 403.25 C-326.56 402.28 -326.44 401.31 -326.31 400.31 C-325.93 397.37 -325.27 394.66 -324.39 391.82 C-324.13 390.94 -323.86 390.06 -323.58 389.16 C-323.28 388.2 -322.99 387.24 -322.69 386.25 C-317.37 368.69 -317.37 368.69 -312.5 351 C-310.43 343.05 -308.08 335.01 -304.93 327.42 C-302.62 321.79 -301.81 316.26 -301 310.25 C-297.79 288.59 -291.67 267.48 -285.77 246.43 C-283.89 239.7 -282.08 232.96 -280.36 226.18 C-280.16 225.41 -279.97 224.64 -279.76 223.84 C-278.81 220.07 -277.86 216.31 -276.92 212.54 C-274.89 204.44 -272.52 196.56 -269.82 188.67 C-268.3 184.08 -267.11 179.45 -266 174.75 C-263.55 164.57 -260.57 154.65 -257.34 144.7 C-255.84 140.01 -254.41 135.32 -253.14 130.56 C-251.91 125.96 -250.49 121.48 -248.88 117 C-248.49 115.92 -248.49 115.92 -248.09 114.82 C-247.56 113.35 -247.02 111.88 -246.48 110.4 C-245.96 109 -245.46 107.6 -244.96 106.2 C-242.1 98.21 -238.81 91.32 -233.52 84.62 C-231.69 82.26 -230.22 79.81 -228.69 77.25 C-227.39 75.88 -226.07 74.53 -224.69 73.25 C-225.02 72.26 -225.35 71.27 -225.69 70.25 C-216.89 63.71 -208.68 62.83 -197.88 63.12 C-195.66 63.17 -193.45 63.21 -191.23 63.24 C-190.26 63.27 -189.29 63.29 -188.29 63.32 C-185.88 63.25 -183.95 63.07 -181.69 62.25 C-180.44 60.2 -180.44 60.2 -179.62 57.75 C-178.71 55.28 -178.71 55.28 -177.69 53.25 C-176.2 52.75 -176.2 52.75 -174.69 52.25 C-174.69 51.59 -174.69 50.93 -174.69 50.25 C-173.05 48.91 -171.35 47.65 -169.62 46.44 C-168.63 45.73 -167.63 45.01 -166.6 44.28 C-164.88 43.08 -163.16 41.89 -161.43 40.72 C-157.65 38.23 -157.65 38.23 -155.69 34.25 C-154.06 33.13 -154.06 33.13 -151.98 32.09 C-151.23 31.71 -150.48 31.33 -149.7 30.93 C-148.91 30.54 -148.13 30.15 -147.31 29.75 C-145.76 28.97 -144.21 28.19 -142.66 27.41 C-141.63 26.89 -141.63 26.89 -140.57 26.37 C-138.63 25.32 -138.63 25.32 -137.13 23.68 C-135.69 22.25 -135.69 22.25 -132.69 21.25 C-132.69 20.59 -132.69 19.93 -132.69 19.25 C-131.76 18.88 -130.83 18.51 -129.88 18.12 C-120.79 14.36 -120.79 14.36 -113.05 8.56 C-111.69 7.25 -111.69 7.25 -108.69 7.25 C-108.69 6.59 -108.69 5.93 -108.69 5.25 C-100.18 1.87 -91.14 -1.14 -82.14 2.19 C-79.81 3.31 -79.81 3.31 -77.82 4.47 C-74.83 5.56 -72.82 4.83 -69.69 4.25 C-68.26 4.03 -66.83 3.81 -65.4 3.6 C-64.61 3.48 -63.82 3.37 -63.01 3.25 C-62.18 3.12 -61.35 3 -60.49 2.88 C-58.71 2.61 -56.92 2.34 -55.14 2.08 C-52.34 1.66 -49.55 1.25 -46.75 0.83 C-44.04 0.43 -41.33 0.03 -38.62 -0.38 C-37.78 -0.5 -36.95 -0.62 -36.09 -0.75 C-35.3 -0.86 -34.52 -0.98 -33.72 -1.1 C-32.69 -1.25 -32.69 -1.25 -31.65 -1.41 C-29.66 -1.73 -29.66 -1.73 -27.64 -2.27 C-18.36 -4.55 -8.87 -2.98 0 0 Z M174.31 134.25 C175.31 136.25 175.31 136.25 175.31 136.25 Z M175.31 138.25 C176.31 142.25 176.31 142.25 176.31 142.25 Z M177.31 149.25 C178.31 151.25 178.31 151.25 178.31 151.25 Z M181.31 173.25 C182.31 175.25 182.31 175.25 182.31 175.25 Z M182.31 175.25 C183.31 178.25 183.31 178.25 183.31 178.25 Z M184.31 186.25 C185.31 188.25 185.31 188.25 185.31 188.25 Z M186.31 193.25 C186.31 194.9 186.31 196.55 186.31 198.25 C186.64 198.25 186.97 198.25 187.31 198.25 C187.31 196.6 187.31 194.95 187.31 193.25 C186.98 193.25 186.65 193.25 186.31 193.25 Z M187.31 198.25 C188.31 202.25 188.31 202.25 188.31 202.25 Z M190.31 214.25 C191.31 216.25 191.31 216.25 191.31 216.25 Z M191.31 219.25 C191.31 220.9 191.31 222.55 191.31 224.25 C191.97 222.93 192.63 221.61 193.31 220.25 C192.65 219.92 191.99 219.59 191.31 219.25 Z M196.31 246.25 C197.31 249.25 197.31 249.25 197.31 249.25 Z M205.31 294.25 C204.98 294.91 204.65 295.57 204.31 296.25 C204.97 296.25 205.63 296.25 206.31 296.25 C205.98 295.59 205.65 294.93 205.31 294.25 Z M213.31 328.25 C214.31 331.25 214.31 331.25 214.31 331.25 Z M230.31 374.25 C231.31 376.25 231.31 376.25 231.31 376.25 Z M231.31 376.25 C232.31 378.25 232.31 378.25 232.31 378.25 Z M232.31 378.25 C233.31 380.25 233.31 380.25 233.31 380.25 Z M234.31 382.25 C234.64 383.9 234.97 385.55 235.31 387.25 C235.64 386.26 235.97 385.27 236.31 384.25 C235.65 383.59 234.99 382.93 234.31 382.25 Z M238.31 390.25 C238.64 391.57 238.97 392.89 239.31 394.25 C239.64 393.59 239.97 392.93 240.31 392.25 C239.65 391.59 238.99 390.93 238.31 390.25 Z M249.31 411.25 C250.31 413.25 250.31 413.25 250.31 413.25 Z M250.31 413.25 C251.31 415.25 251.31 415.25 251.31 415.25 Z M252.31 417.25 C253.31 419.25 253.31 419.25 253.31 419.25 Z M253.31 419.25 C253.64 420.24 253.97 421.23 254.31 422.25 C254.31 421.26 254.31 420.27 254.31 419.25 C253.98 419.25 253.65 419.25 253.31 419.25 Z M256.31 424.25 C257.31 426.25 257.31 426.25 257.31 426.25 Z M257.31 426.25 C258.31 428.25 258.31 428.25 258.31 428.25 Z M258.31 428.25 C258.97 429.57 259.63 430.89 260.31 432.25 C259.98 430.93 259.65 429.61 259.31 428.25 C258.98 428.25 258.65 428.25 258.31 428.25 Z M261.31 433.25 C262.31 435.25 262.31 435.25 262.31 435.25 Z M391.31 614.25 C394.35 616.58 397.49 618.71 400.69 620.81 C411.67 628.12 422.2 635.77 432.31 644.25 C433.24 644.97 433.24 644.97 434.18 645.71 C436.73 647.7 438.46 649.47 440.25 652.19 C442.02 654.81 443.19 656.1 445.57 658.02 C449.21 661.06 452.18 664.41 455.19 668.06 C459.95 673.73 464.79 679.29 470.31 684.25 C470.64 684.25 470.97 684.25 471.31 684.25 C471.39 680.36 471.31 677 470.31 673.25 C470.04 671.67 469.77 670.08 469.5 668.5 C468.49 663.51 466.89 659.61 464.31 655.25 C463.56 653.86 463.56 653.86 462.8 652.44 C457.38 643.22 450.35 638.58 441.31 633.25 C440.42 632.69 439.53 632.13 438.61 631.55 C436.48 630.34 434.66 629.64 432.31 629 C426.94 627.33 422.28 624.58 417.43 621.77 C414.29 620.24 411.74 619.72 408.31 619.25 C406.64 618.26 404.97 617.26 403.31 616.25 C399.19 614.85 395.67 613.99 391.31 614.25 Z M517.31 653.25 C518.31 656.25 518.31 656.25 518.31 656.25 Z M518.31 656.25 C518.31 657.9 518.31 659.55 518.31 661.25 C518.64 661.25 518.97 661.25 519.31 661.25 C519.31 659.6 519.31 657.95 519.31 656.25 C518.98 656.25 518.65 656.25 518.31 656.25 Z M519.31 661.25 C520.31 663.25 520.31 663.25 520.31 663.25 Z M519.31 664.25 C520.31 666.25 520.31 666.25 520.31 666.25 Z M520.31 666.25 C521.31 669.25 521.31 669.25 521.31 669.25 Z M528.31 692.25 C529.31 694.25 529.31 694.25 529.31 694.25 Z M-417.44 704.44 C-418.11 705.03 -418.79 705.62 -419.48 706.23 C-424.33 710.67 -428.08 714.98 -431.5 720.56 C-431.93 721.26 -432.36 721.96 -432.81 722.68 C-436.85 729.33 -440.37 736.19 -443.71 743.21 C-444.71 745.29 -445.74 747.35 -446.79 749.4 C-450.44 756.73 -453.47 763.98 -455.69 771.88 C-456 772.98 -456 772.98 -456.32 774.1 C-457.49 778.58 -457.87 782.59 -457.69 787.25 C-457.69 790.79 -457.87 794.24 -458.12 797.77 C-458.26 799.64 -458.26 799.64 -458.4 801.55 C-458.49 802.86 -458.59 804.16 -458.69 805.5 C-458.78 806.83 -458.88 808.16 -458.98 809.49 C-459.21 812.74 -459.45 816 -459.69 819.25 C-460.02 819.25 -460.35 819.25 -460.69 819.25 C-461.01 829.43 -460.04 839.18 -458.69 849.25 C-458.03 848.92 -457.37 848.59 -456.69 848.25 C-456.41 848.92 -456.13 849.58 -455.84 850.27 C-451.85 859.45 -446.97 867.57 -440.62 875.31 C-435.72 881.31 -430.89 887.44 -429.69 895.25 C-429.03 894.92 -428.37 894.59 -427.69 894.25 C-427.61 890.7 -427.7 887.65 -428.69 884.25 C-429.74 879.63 -430.21 874.96 -430.69 870.25 C-431.35 870.25 -432.01 870.25 -432.69 870.25 C-432.36 868.6 -432.03 866.95 -431.69 865.25 C-432.35 865.25 -433.01 865.25 -433.69 865.25 C-433.36 862.94 -433.03 860.63 -432.69 858.25 C-433.02 858.25 -433.35 858.25 -433.69 858.25 C-433.71 857.69 -433.74 857.12 -433.76 856.54 C-433.88 853.94 -434 851.35 -434.12 848.75 C-434.16 847.86 -434.2 846.98 -434.24 846.06 C-434.43 842.18 -434.67 838.38 -435.21 834.52 C-437.52 817.27 -436.63 798.16 -432.69 781.25 C-432.41 780.03 -432.14 778.82 -431.86 777.57 C-429.72 768.1 -427.48 758.65 -425.17 749.22 C-424.73 747.41 -424.29 745.6 -423.85 743.78 C-421.07 732.44 -417.93 721.38 -413.78 710.45 C-413.49 709.68 -413.21 708.91 -412.91 708.11 C-412.65 707.43 -412.39 706.76 -412.12 706.06 C-411.47 704.03 -411.47 704.03 -412.69 701.25 C-414.61 701.25 -416.07 703.23 -417.44 704.44 Z M-458.69 787.25 C-457.69 790.25 -457.69 790.25 -457.69 790.25 Z M-459.69 792.25 C-458.69 794.25 -458.69 794.25 -458.69 794.25 Z M-460.69 797.25 C-460.69 800.55 -460.69 803.85 -460.69 807.25 C-460.36 807.25 -460.03 807.25 -459.69 807.25 C-459.69 803.95 -459.69 800.65 -459.69 797.25 C-460.02 797.25 -460.35 797.25 -460.69 797.25 Z M-461.69 807.25 C-461.69 811.21 -461.69 815.17 -461.69 819.25 C-461.36 819.25 -461.03 819.25 -460.69 819.25 C-460.69 815.29 -460.69 811.33 -460.69 807.25 C-461.02 807.25 -461.35 807.25 -461.69 807.25 Z M-457.69 849.25 C-456.69 853.25 -456.69 853.25 -456.69 853.25 Z M-456.69 853.25 C-455.69 855.25 -455.69 855.25 -455.69 855.25 Z M-455.69 855.25 C-454.69 857.25 -454.69 857.25 -454.69 857.25 Z M-454.69 857.25 C-453.69 859.25 -453.69 859.25 -453.69 859.25 Z M-453.69 859.25 C-452.69 861.25 -452.69 861.25 -452.69 861.25 Z M-461.69 990.25 C-460.69 993.25 -460.69 993.25 -460.69 993.25 Z M-551.69 1086.25 C-551.69 1086.58 -551.69 1086.91 -551.69 1087.25 C-547.73 1087.25 -543.77 1087.25 -539.69 1087.25 C-539.69 1086.92 -539.69 1086.59 -539.69 1086.25 C-543.65 1086.25 -547.61 1086.25 -551.69 1086.25 Z M-572.69 1093.25 C-574.33 1094.28 -576 1095.28 -577.69 1096.25 C-586.72 1101.79 -594.88 1108.01 -598.69 1118.25 C-603.12 1137.1 -597.5 1155.03 -587.69 1171.25 C-586.7 1170.76 -586.7 1170.76 -585.69 1170.25 C-585.36 1171.9 -585.03 1173.55 -584.69 1175.25 C-583.7 1174.76 -583.7 1174.76 -582.69 1174.25 C-579.24 1178.65 -575.81 1183.06 -572.5 1187.56 C-568.76 1192.53 -564.65 1196.12 -559.66 1199.79 C-557.29 1201.55 -554.98 1203.39 -552.69 1205.25 C-552.03 1204.92 -551.37 1204.59 -550.69 1204.25 C-552.34 1201.28 -553.99 1198.31 -555.69 1195.25 C-556.35 1195.25 -557.01 1195.25 -557.69 1195.25 C-557.86 1194.61 -558.03 1193.97 -558.2 1193.31 C-559.76 1187.75 -561.51 1183.07 -564.69 1178.25 C-565.68 1177.76 -565.68 1177.76 -566.69 1177.25 C-567.38 1175.26 -568.04 1173.26 -568.69 1171.25 C-569.35 1170.26 -570.01 1169.27 -570.69 1168.25 C-571.68 1168.25 -572.67 1168.25 -573.69 1168.25 C-574.01 1153.36 -573.79 1141.26 -565.69 1128.25 C-565.16 1127.34 -564.63 1126.44 -564.09 1125.5 C-555 1110.36 -545.35 1102.97 -528.92 1097.36 C-526.14 1096.4 -523.41 1095.37 -520.69 1094.25 C-526.17 1088.76 -535.76 1089.07 -543.05 1088.99 C-550.02 1089.01 -556.81 1089.07 -563.69 1090.25 C-563.69 1089.92 -563.69 1089.59 -563.69 1089.25 C-568.35 1088.73 -569.6 1089.88 -572.69 1093.25 Z \",fill:\"#0A123C\",transform:\"translate(740.6875,47.75)\"})),_path2||(_path2=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.75 0.25 1.51 0.5 2.28 0.76 C6.65 2.34 9.74 4.23 13.31 7.25 C15.41 8.26 15.41 8.26 17.56 8.88 C18.33 9.11 19.1 9.35 19.89 9.6 C23.06 10.45 26.24 11.13 29.46 11.72 C31.31 12.25 31.31 12.25 33.31 14.25 C34.91 14.76 36.54 15.19 38.17 15.58 C44.52 17.23 50.5 19.51 56.56 22 C57.71 22.47 58.86 22.94 60.04 23.43 C69.39 27.32 78.56 31.55 87.69 35.94 C88.33 36.24 88.97 36.55 89.62 36.86 C98.54 41.14 106.98 45.92 115.31 51.25 C116.4 51.94 117.48 52.62 118.59 53.33 C125.45 57.71 131.5 62.56 137.31 68.25 C138.02 68.92 138.72 69.58 139.44 70.27 C147.26 78.26 152.84 88.05 158.65 97.54 C159.78 99.39 160.94 101.23 162.11 103.06 C162.67 103.95 163.23 104.83 163.8 105.75 C164.56 106.94 164.56 106.94 165.34 108.16 C166.31 110.25 166.31 110.25 165.31 113.25 C166.26 115.83 166.26 115.83 167.69 118.56 C169.57 122.49 170.96 125.86 171.31 130.25 C172.3 129.92 173.29 129.59 174.31 129.25 C179.68 141.07 182.3 152.81 184.26 165.57 C186.5 180.07 188.88 194.44 192.62 208.64 C194.24 215.15 194.35 220.75 193.62 227.43 C193.24 230.44 193.24 230.44 193.31 234.25 C194.96 234.58 196.61 234.91 198.31 235.25 C200.4 242.8 201.89 250.35 203.12 258.07 C204.02 263.64 205.09 269.16 206.25 274.69 C207.93 282.75 209.16 290.84 210.31 299 C211.96 310.6 213.82 322.02 218.06 333 C219.31 336.25 219.31 336.25 219.31 340.25 C218.32 340.75 218.32 340.75 217.31 341.25 C218.27 342.02 218.27 342.02 219.25 342.81 C221.91 345.96 221.76 348.2 222.31 352.25 C223.04 354.67 223.83 357.06 224.69 359.44 C225.11 360.63 225.53 361.82 225.96 363.04 C227.18 365.92 228.37 367.85 230.31 370.25 C232.99 374.45 235.21 378.86 237.44 383.31 C237.98 384.37 237.98 384.37 238.53 385.46 C238.87 386.14 239.22 386.83 239.57 387.54 C239.88 388.15 240.19 388.77 240.51 389.41 C241.83 392.45 242.31 394.93 242.31 398.25 C243.29 399.27 244.29 400.27 245.31 401.25 C245.98 402.58 246.65 403.92 247.31 405.25 C247.78 405.7 248.25 406.16 248.73 406.62 C250.45 408.39 251.5 410.1 252.69 412.27 C253.12 413.04 253.54 413.82 253.98 414.62 C254.42 415.43 254.86 416.23 255.31 417.06 C255.75 417.86 256.19 418.65 256.64 419.47 C257.88 421.72 259.1 423.99 260.31 426.25 C261.21 427.86 261.21 427.86 262.12 429.51 C263.38 432.42 263.32 434.14 263.31 437.25 C264.51 439.98 264.51 439.98 266.19 442.56 C266.99 443.89 266.99 443.89 267.8 445.24 C268.3 445.9 268.8 446.57 269.31 447.25 C269.97 447.25 270.63 447.25 271.31 447.25 C273.31 452 273.31 452 273.31 454.25 C273.63 455.59 273.96 456.92 274.31 458.25 C275.3 457.92 276.29 457.59 277.31 457.25 C277.41 457.97 277.52 458.69 277.62 459.43 C278.4 462.59 279.58 464.61 281.38 467.31 C282.01 468.27 282.64 469.23 283.29 470.22 C283.96 471.22 284.62 472.22 285.31 473.25 C285.96 474.25 286.61 475.25 287.27 476.28 C291.6 482.92 296.27 489.14 301.31 495.25 C302.02 496.14 302.73 497.03 303.46 497.94 C305 499.86 306.54 501.55 308.31 503.25 C309.12 504.1 309.92 504.94 310.75 505.81 C313.08 508.27 313.08 508.27 315.5 509.31 C317.31 510.25 317.31 510.25 318.25 512.25 C319.72 515.01 321.44 515.2 324.31 516.25 C326.15 517.75 327.16 518.93 328.19 521.06 C330.86 526.26 335 530.02 339.45 533.69 C340.7 534.74 341.92 535.82 343.12 536.94 C354.78 547.77 369.83 553.23 384.31 559.25 C385.08 559.57 385.84 559.89 386.63 560.22 C396.76 564.41 407.1 567.88 417.5 571.31 C438.27 578.17 438.27 578.17 447.31 582.25 C448.18 582.64 449.06 583.04 449.96 583.44 C461.28 588.6 472.34 593.72 482.31 601.25 C483.09 601.83 483.87 602.42 484.67 603.02 C486.91 604.73 489.11 606.48 491.31 608.25 C492.22 608.96 493.12 609.67 494.05 610.39 C494.96 611.11 495.87 611.83 496.81 612.56 C498.07 613.55 498.07 613.55 499.34 614.55 C501.31 616.25 501.31 616.25 502.31 618.25 C502.76 618.68 503.2 619.1 503.66 619.54 C505.75 621.71 507.21 624.07 508.81 626.62 C509.4 627.56 509.99 628.5 510.59 629.46 C511.16 630.38 511.73 631.3 512.31 632.25 C512.87 633.1 513.42 633.95 513.99 634.83 C515.91 638.34 515.98 641.29 516.31 645.25 C516.97 645.25 517.63 645.25 518.31 645.25 C518.46 645.93 518.6 646.61 518.75 647.3 C521.57 660.35 524.56 673.13 529.22 685.66 C530.81 690.07 531.53 692.61 530.31 697.25 C531.01 699.43 531.01 699.43 532.19 701.5 C534.46 706.15 534.99 710.1 535.31 715.25 C535.97 715.25 536.63 715.25 537.31 715.25 C537.31 715.91 537.31 716.57 537.31 717.25 C537.97 717.58 538.63 717.91 539.31 718.25 C539.31 813.29 539.31 908.33 539.31 1006.25 C538.98 1005.26 538.65 1004.27 538.31 1003.25 C537.32 1003.58 536.33 1003.91 535.31 1004.25 C534.22 1000.96 534.51 999.54 535.31 996.25 C534.32 995.59 533.33 994.93 532.31 994.25 C532.69 992.31 532.69 992.31 533.31 990.25 C533.97 989.92 534.63 989.59 535.31 989.25 C534.98 988.26 534.65 987.27 534.31 986.25 C533.32 987.24 532.33 988.23 531.31 989.25 C531.06 988.51 530.8 987.78 530.54 987.02 C530.2 986.04 529.85 985.07 529.5 984.06 C529 982.62 529 982.62 528.48 981.14 C527.39 978.23 527.39 978.23 525.74 975.65 C524.36 973.33 523.79 971.63 523.31 969 C522.98 967.76 522.65 966.52 522.31 965.25 C521.32 964.92 520.33 964.59 519.31 964.25 C519.13 963.2 519.13 963.2 518.94 962.12 C518.27 959.05 517.45 956.18 516.31 953.25 C515.65 952.92 514.99 952.59 514.31 952.25 C513.1 949.68 511.99 947.13 510.94 944.5 C510.47 943.35 510.47 943.35 509.99 942.17 C508.16 937.61 506.57 933.04 505.19 928.31 C503.32 921.91 500.93 915.62 496.8 910.3 C495.09 907.94 494.09 905.65 493 902.94 C492.57 901.88 492.14 900.83 491.7 899.74 C491.24 898.59 490.79 897.44 490.31 896.25 C489.81 894.99 489.3 893.74 488.8 892.48 C484.9 882.77 484.9 882.77 483.18 878.32 C481.75 874.63 480.35 871.17 478.25 867.81 C475.9 863.99 475.08 859.86 474.12 855.51 C473.85 854.76 473.59 854.02 473.31 853.25 C472.32 852.92 471.33 852.59 470.31 852.25 C468.96 849.89 467.77 847.58 466.62 845.12 C465.92 843.66 465.22 842.2 464.51 840.74 C464.15 839.99 463.79 839.24 463.42 838.48 C461.71 835.03 459.85 831.68 458 828.31 C455.16 823.07 452.97 817.97 451.31 812.25 C449.12 805.42 446.46 799.58 442.62 793.52 C441.31 791.25 441.31 791.25 440.31 787.62 C437.63 778.57 429.29 770.87 421.31 766.25 C420.66 765.55 420.01 764.85 419.34 764.13 C415.27 759.99 410.3 756.97 405.5 753.75 C404.54 753.1 403.58 752.45 402.59 751.78 C398.32 748.89 394.04 746.06 389.61 743.41 C388.52 742.69 387.43 741.98 386.31 741.25 C386.31 740.59 386.31 739.93 386.31 739.25 C385.71 738.96 385.12 738.67 384.5 738.38 C382.31 737.25 382.31 737.25 379.31 735.25 C378.26 735 377.21 734.75 376.12 734.5 C371.45 733.21 367.61 730.82 364.31 727.25 C363.55 725.2 363.2 723.29 362.87 721.14 C361.87 717.73 359.08 716.33 356.31 714.25 C356.07 713.62 355.82 712.99 355.57 712.35 C353.63 709.1 350.5 707.99 347.19 706.44 C346.12 705.92 346.12 705.92 345.03 705.39 C339.49 702.73 333.86 700.31 328.2 697.91 C322.32 695.36 316.88 692.26 311.4 688.95 C308.38 687.16 308.38 687.16 305.1 686.21 C302.31 685.25 302.31 685.25 300.8 683.74 C298.63 681.57 296.38 681.22 293.44 680.44 C283.11 677.42 273.71 672.53 264.16 667.64 C262.1 666.63 259.99 665.7 257.87 664.82 C254.26 663.23 251.08 661.36 247.75 659.25 C241.17 655.08 234.62 651.41 227.06 649.38 C226.15 649 225.25 648.63 224.31 648.25 C223.69 646.31 223.69 646.31 223.31 644.25 C221.34 642.5 221.34 642.5 219.31 641.25 C220.3 640.59 221.29 639.93 222.31 639.25 C219.28 637.02 218 636.15 214.19 636.69 C213.24 636.87 212.29 637.06 211.31 637.25 C210.32 636.59 209.33 635.93 208.31 635.25 C209.63 636.9 210.95 638.55 212.31 640.25 C209.84 639.1 208.26 638.2 206.31 636.25 C206.31 635.26 206.31 634.27 206.31 633.25 C205.65 633.25 204.99 633.25 204.31 633.25 C204.1 632.73 203.89 632.21 203.68 631.67 C200.07 624.02 194.31 619.61 187.84 614.47 C176.59 605.51 167.78 594.82 159.31 583.25 C158.03 581.54 156.74 579.83 155.44 578.12 C154.9 577.42 154.37 576.72 153.82 575.99 C152.24 574.01 152.24 574.01 149.31 572.25 C148.29 570.26 147.3 568.26 146.31 566.25 C145.32 565.17 145.32 565.17 144.31 564.06 C141.81 560.55 141.13 557.24 140.08 553.1 C139.37 550.46 138.57 547.97 137.56 545.44 C137.3 544.77 137.04 544.1 136.77 543.42 C135.27 541.19 133.77 539.84 131.72 538.11 C131.09 537.58 130.45 537.04 129.79 536.49 C129.3 536.08 128.82 535.67 128.31 535.25 C134.54 555.27 140.82 575.27 147.75 595.06 C147.99 595.75 148.23 596.44 148.47 597.15 C151.21 605.04 154.27 612.58 158.2 619.96 C159.31 622.25 159.31 622.25 159.31 624.25 C159.97 624.25 160.63 624.25 161.31 624.25 C162.72 625.72 162.72 625.72 164.38 627.75 C170.54 634.95 177.11 640.48 185.44 645.02 C186.06 645.43 186.68 645.83 187.31 646.25 C187.31 646.91 187.31 647.57 187.31 648.25 C188.63 648.91 189.95 649.57 191.31 650.25 C190.08 650.62 188.84 650.99 187.56 651.38 C166.96 658.29 147.28 673.14 130.88 687.19 C128.31 689.25 128.31 689.25 126.31 689.25 C126.11 689.82 125.92 690.39 125.71 690.98 C123.77 694.14 121.03 695.72 117.94 697.62 C117.31 698.02 116.68 698.41 116.03 698.82 C104.09 706.18 91.47 711.11 78.26 715.64 C71.4 718.04 65.17 720.7 59 724.56 C45.49 733 31.78 738.76 16.4 742.84 C10.93 744.31 5.64 746.16 0.34 748.16 C-10.03 752.01 -20.16 753.72 -31.19 754.31 C-38.74 754.75 -46.08 755.41 -53.53 756.74 C-59.65 757.73 -65.83 758.24 -72 758.81 C-73.3 758.94 -74.6 759.06 -75.94 759.19 C-123.34 763.7 -123.34 763.7 -139.69 753.25 C-134.32 738.86 -122.82 725.69 -111.66 715.33 C-108.39 712.24 -106.61 709.28 -104.69 705.25 C-103.12 703.64 -103.12 703.64 -101.56 702.5 C-98.67 700.56 -98.67 700.56 -97.69 698.25 C-97.03 698.25 -96.37 698.25 -95.69 698.25 C-95.46 697.69 -95.23 697.13 -94.99 696.56 C-93.33 693.61 -91.24 691.69 -88.79 689.36 C-87.8 688.42 -86.82 687.47 -85.84 686.52 C-84.3 685.04 -82.76 683.57 -81.2 682.11 C-72.65 674.06 -72.65 674.06 -68.69 663.25 C-68.5 662.11 -68.3 660.98 -68.11 659.81 C-67.99 658.26 -67.99 658.26 -67.88 656.69 C-67.79 655.65 -67.7 654.62 -67.61 653.56 C-67.69 650.3 -68.32 647.52 -69.17 644.39 C-70.08 640.6 -70.34 636.75 -70.69 632.88 C-71.37 625.54 -71.37 625.54 -72.75 618.31 C-74.57 610.16 -74.43 601.57 -74.69 593.25 C-74.72 592.19 -74.72 592.19 -74.76 591.1 C-74.99 583.3 -74.99 583.3 -74.69 580.25 C-72.2 577.77 -69.85 577.41 -66.52 576.55 C-50.22 572.28 -33.67 564.14 -20.69 553.25 C-20.36 552.26 -20.03 551.27 -19.69 550.25 C-23.22 550.89 -25.64 552.34 -28.62 554.31 C-32.85 557.06 -37.09 559.78 -41.38 562.44 C-42.39 563.07 -43.4 563.7 -44.45 564.36 C-51.39 568.42 -57.5 570.96 -65.44 572.44 C-67.1 572.76 -68.76 573.09 -70.42 573.42 C-71.51 573.62 -71.51 573.62 -72.62 573.83 C-74.01 574.11 -75.4 574.43 -76.78 574.79 C-79.39 575.42 -81.95 575.49 -84.62 575.62 C-90.49 576.03 -95.91 577.13 -101.6 578.55 C-105.28 579.38 -108.9 579.78 -112.66 580.04 C-114.89 580.2 -114.89 580.2 -117.69 581.25 C-128.32 582.03 -137.31 581.47 -145.62 574.38 C-151.3 569.12 -153.02 564.58 -153.94 557 C-155.21 548.04 -158.08 540.3 -161.84 532.12 C-162.69 530.26 -163.47 528.37 -164.24 526.48 C-165.44 523.81 -166.48 521.91 -168.31 519.69 C-171.28 515.87 -173.98 511.92 -176.62 507.88 C-177.04 507.26 -177.45 506.64 -177.88 506 C-178.88 504.45 -179.79 502.86 -180.69 501.25 C-180.36 500.59 -180.03 499.93 -179.69 499.25 C-171.49 497.9 -162.97 498.12 -154.69 498.25 C-154.69 497.59 -154.69 496.93 -154.69 496.25 C-157.33 496.58 -159.97 496.91 -162.69 497.25 C-162.69 496.59 -162.69 495.93 -162.69 495.25 C-170.47 495.06 -170.47 495.06 -178.19 495.88 C-181.3 496.34 -182.08 495.98 -184.69 494.25 C-193.52 483.05 -193.52 483.05 -192.88 476.69 C-191.09 471.51 -191.09 471.51 -188.69 469.25 C-186.01 469 -183.72 468.96 -181.06 469.12 C-176.68 469.35 -172.77 469.38 -168.48 468.3 C-162.57 466.85 -156.63 466.75 -150.56 466.56 C-148.85 466.49 -148.85 466.49 -147.11 466.42 C-141.46 466.22 -136.28 466.36 -130.69 467.25 C-127.06 467.45 -123.44 467.48 -119.81 467.5 C-118.87 467.52 -117.93 467.54 -116.96 467.56 C-110.65 467.6 -105.52 466.64 -99.69 464.25 C-99.69 463.26 -99.69 462.27 -99.69 461.25 C-103.91 461.64 -103.91 461.64 -107.42 463.78 C-110.6 465.84 -113.53 465.61 -117.19 465.5 C-118.5 465.48 -119.81 465.47 -121.16 465.45 C-124.52 465.34 -127.86 465.06 -131.21 464.75 C-138.03 464.16 -144.83 464.03 -151.66 464.01 C-153.75 464 -155.84 463.97 -157.93 463.94 C-165.14 463.88 -171.51 464.4 -178.41 466.58 C-181.28 467.42 -183.89 467.55 -186.88 467.44 C-187.8 467.41 -188.72 467.38 -189.67 467.36 C-190.67 467.3 -190.67 467.3 -191.69 467.25 C-191.69 466.59 -191.69 465.93 -191.69 465.25 C-192.68 465.25 -193.67 465.25 -194.69 465.25 C-197.6 458.45 -199.34 453.56 -197.69 446.25 C-197.36 446.91 -197.03 447.57 -196.69 448.25 C-196.03 448.25 -195.37 448.25 -194.69 448.25 C-194.4 447.61 -194.11 446.97 -193.81 446.31 C-192.69 444.25 -192.69 444.25 -190.69 443.25 C-189.36 443.96 -189.36 443.96 -188 444.69 C-184.15 446.5 -181.89 446.87 -177.69 446.25 C-175.22 443.89 -175.22 443.89 -173.69 441.25 C-175.01 441.25 -176.33 441.25 -177.69 441.25 C-178.16 441.77 -178.64 442.28 -179.12 442.81 C-179.64 443.29 -180.16 443.76 -180.69 444.25 C-184.17 443.99 -185.74 443.22 -188.69 441.25 C-189.84 441.13 -191 441 -192.19 440.88 C-195.69 440.25 -195.69 440.25 -197.62 438.69 C-198.87 435.83 -198.61 433.66 -198.47 430.59 C-198.84 426.65 -200.71 423.4 -202.44 419.88 C-203.94 416.71 -204.86 413.65 -205.69 410.25 C-206.35 410.25 -207.01 410.25 -207.69 410.25 C-212.47 404.84 -216.69 399.67 -216.69 392.25 C-216.36 392.91 -216.03 393.57 -215.69 394.25 C-215.03 394.25 -214.37 394.25 -213.69 394.25 C-212.31 395.5 -212.31 395.5 -210.69 397.25 C-209.97 397.91 -209.24 398.57 -208.5 399.25 C-206.69 401.25 -206.69 401.25 -206.69 404.25 C-206.03 404.25 -205.37 404.25 -204.69 404.25 C-204.36 405.24 -204.03 406.23 -203.69 407.25 C-201.73 408.42 -201.73 408.42 -199.38 409.31 C-196.42 410.53 -193.53 411.79 -190.69 413.25 C-190.69 411.93 -190.69 410.61 -190.69 409.25 C-191.47 408.94 -192.25 408.63 -193.06 408.31 C-195.69 407.25 -195.69 407.25 -197.69 406.25 C-197.69 405.59 -197.69 404.93 -197.69 404.25 C-198.68 403.92 -199.67 403.59 -200.69 403.25 C-200.69 402.59 -200.69 401.93 -200.69 401.25 C-201.68 400.92 -202.67 400.59 -203.69 400.25 C-205.22 398.44 -205.22 398.44 -206.75 396.25 C-208.77 393.23 -208.77 393.23 -211.69 391.25 C-211.69 389.93 -211.69 388.61 -211.69 387.25 C-212.33 386.98 -212.97 386.71 -213.62 386.44 C-215.69 385.25 -215.69 385.25 -216.69 382.25 C-217.83 373.24 -216.4 367.69 -211.5 360.13 C-204.7 349.32 -202.31 334.8 -200.69 322.25 C-201.68 322.25 -202.67 322.25 -203.69 322.25 C-204.35 318.29 -205.01 314.33 -205.69 310.25 C-206.35 310.58 -207.01 310.91 -207.69 311.25 C-207.69 313.23 -207.69 315.21 -207.69 317.25 C-214.56 316.38 -214.56 316.38 -215.69 315.25 C-215.51 312.56 -215.07 309.92 -214.69 307.25 C-216.58 306.57 -216.58 306.57 -218.69 306.25 C-221.05 308.61 -221.18 310.03 -221.69 313.25 C-221.05 313.56 -220.41 313.87 -219.75 314.19 C-217.69 315.25 -217.69 315.25 -216.69 316.25 C-216.65 317.92 -216.64 319.58 -216.69 321.25 C-216.03 321.25 -215.37 321.25 -214.69 321.25 C-213.06 322.63 -213.06 322.63 -211.69 324.25 C-211.69 324.91 -211.69 325.57 -211.69 326.25 C-211.03 326.25 -210.37 326.25 -209.69 326.25 C-209.69 327.57 -209.69 328.89 -209.69 330.25 C-213.74 331.23 -217.53 331.33 -221.69 331.25 C-221.87 333.14 -221.87 333.14 -222.06 335.06 C-222.39 338.35 -222.75 339.35 -224.69 342.25 C-228.41 338.13 -228.12 334.46 -228.28 329.12 C-228.73 325.93 -229.65 324.67 -231.69 322.25 C-231.69 321.59 -231.69 320.93 -231.69 320.25 C-234.33 319.59 -236.97 318.93 -239.69 318.25 C-240.69 314.25 -240.69 314.25 -239.66 312.37 C-238.26 309.32 -239.13 307.58 -240.05 304.39 C-241.89 297.14 -242.03 290.38 -241.88 282.94 C-241.86 281.71 -241.85 280.48 -241.83 279.21 C-241.8 276.22 -241.75 273.24 -241.69 270.25 C-242.35 270.25 -243.01 270.25 -243.69 270.25 C-245.2 277.75 -246.1 285.12 -246.62 292.75 C-247.18 300.25 -247.98 307.6 -249.31 315 C-251.05 324.76 -250.97 334.37 -250.69 344.25 C-253.69 344.25 -253.69 344.25 -255.36 342.65 C-258.93 336.21 -256.87 326.79 -255.69 319.81 C-254.04 309.71 -254.52 299.46 -254.69 289.25 C-254.81 290.04 -254.93 290.82 -255.05 291.63 C-255.31 293.2 -255.31 293.2 -255.56 294.81 C-255.81 296.36 -255.81 296.36 -256.05 297.94 C-256.69 301.25 -256.69 301.25 -257.71 304.52 C-258.69 308.27 -258.93 311.34 -258.92 315.21 C-258.92 316.22 -258.92 316.22 -258.92 317.25 C-258.91 319.52 -258.89 321.79 -258.88 324.06 C-258.87 325.71 -258.86 327.36 -258.86 329.01 C-258.78 343.1 -258.51 357.17 -258.26 371.25 C-256.65 459.17 -256.65 459.17 -261.69 469.25 C-262 471.84 -262.2 474.43 -262.41 477.04 C-262.69 479.25 -262.69 479.25 -263.69 480.25 C-263.98 482.89 -264.14 485.54 -264.31 488.2 C-265.27 495.93 -268.3 503.44 -270.73 510.83 C-271.15 512.14 -271.58 513.45 -272 514.76 C-276.34 528.36 -281.37 542.86 -292.69 552.25 C-296.47 553.74 -298.24 553.84 -301.98 552.32 C-303.54 551.58 -305.07 550.8 -306.57 549.96 C-308.66 549.04 -308.66 549.04 -310.71 549.83 C-313.2 551.62 -314.78 553.62 -316.62 556.06 C-318.67 558.75 -320.62 561.18 -323.09 563.49 C-326.54 567.15 -328.86 571.23 -331.38 575.56 C-332.33 577.21 -333.29 578.85 -334.26 580.49 C-334.68 581.21 -335.1 581.93 -335.53 582.68 C-335.91 583.2 -336.29 583.72 -336.69 584.25 C-337.35 584.25 -338.01 584.25 -338.69 584.25 C-338.96 584.99 -339.24 585.72 -339.52 586.48 C-341.34 590.79 -343.97 594.5 -346.56 598.38 C-347.36 599.59 -347.36 599.59 -348.17 600.83 C-348.69 601.61 -349.21 602.39 -349.74 603.2 C-350.21 603.9 -350.68 604.61 -351.16 605.34 C-353.27 607.99 -355.8 609.65 -358.58 611.54 C-367.84 617.99 -372.75 626.77 -377.79 636.6 C-383.69 648.09 -383.69 648.09 -386.69 650.25 C-389.37 650.94 -389.37 650.94 -391.69 651.25 C-392.28 654.01 -392.69 656.41 -392.69 659.25 C-395.29 662.43 -397.71 664.18 -401.69 665.25 C-407.05 665.25 -410.72 661.45 -414.69 658.25 C-415.38 657.76 -416.08 657.27 -416.79 656.77 C-417.44 656.29 -418.08 655.81 -418.75 655.31 C-419.34 654.89 -419.93 654.47 -420.54 654.04 C-422.04 651.71 -421.84 650.04 -421.32 647.37 C-419.98 642.87 -417.83 638.71 -415.75 634.5 C-415.29 633.56 -414.84 632.61 -414.37 631.64 C-412.62 628.03 -410.92 624.59 -408.69 621.25 C-408.03 621.25 -407.37 621.25 -406.69 621.25 C-406.43 620.54 -406.17 619.83 -405.91 619.1 C-404.59 616.02 -402.97 613.42 -401.12 610.62 C-399.25 607.78 -397.77 605.49 -396.69 602.25 C-395.7 602.25 -394.71 602.25 -393.69 602.25 C-393.58 600.99 -393.48 599.73 -393.38 598.44 C-392.87 593.88 -391.78 589.67 -390.5 585.28 C-389.59 581.9 -388.92 578.5 -388.25 575.06 C-387.1 569.52 -385.52 565.13 -382.69 560.25 C-382.03 560.25 -381.37 560.25 -380.69 560.25 C-380.36 558.27 -380.03 556.29 -379.69 554.25 C-378.7 553.92 -377.71 553.59 -376.69 553.25 C-375.94 551.46 -375.94 551.46 -375.5 549.19 C-373.41 541.37 -369.41 534.38 -365.69 527.25 C-364.7 527.25 -363.71 527.25 -362.69 527.25 C-362.59 526.26 -362.5 525.27 -362.4 524.25 C-361.78 519.88 -360.12 516.22 -358.25 512.25 C-355.95 507.3 -354.08 502.55 -352.69 497.25 C-351.04 491.59 -349.22 487 -345.69 482.25 C-345.19 483.74 -345.19 483.74 -344.69 485.25 C-344.03 485.25 -343.37 485.25 -342.69 485.25 C-342.63 484.3 -342.56 483.35 -342.5 482.38 C-341.78 477.27 -339.52 472.53 -336.69 468.25 C-335.7 467.92 -334.71 467.59 -333.69 467.25 C-333.03 467.91 -332.37 468.57 -331.69 469.25 C-327.67 469.6 -325.17 469.24 -321.69 467.25 C-321.03 467.25 -320.37 467.25 -319.69 467.25 C-319.32 466.1 -318.94 464.94 -318.56 463.75 C-317.31 459.97 -315.93 456.26 -314.48 452.55 C-311.88 445.82 -309.83 439.25 -308.34 432.17 C-305.98 421.54 -305.98 421.54 -302.69 418.25 C-301.6 416.34 -301.6 416.34 -301.44 414.38 C-300.3 411.14 -298.59 409.99 -295.69 408.25 C-292.71 408.3 -292.71 408.3 -289.69 409.25 C-285.24 415.02 -283.08 422.13 -282.21 429.29 C-281.81 431.64 -281.81 431.64 -278.69 433.25 C-278.69 433.91 -278.69 434.57 -278.69 435.25 C-277.7 434.92 -276.71 434.59 -275.69 434.25 C-275.36 434.58 -275.03 434.91 -274.69 435.25 C-270.64 427.87 -269.06 418.68 -271.17 410.35 C-272.06 406.74 -272.19 403.07 -272.44 399.38 C-272.51 398.58 -272.57 397.79 -272.64 396.98 C-272.98 391.8 -272.34 388.85 -269.69 384.25 C-268.81 381.86 -268.81 381.86 -268.69 379.25 C-269.86 376.97 -269.86 376.97 -271.59 374.79 C-275.6 368.49 -275.48 362.94 -275.31 355.64 C-275.3 354.36 -275.3 353.07 -275.29 351.75 C-275.27 348.35 -275.22 344.96 -275.16 341.57 C-275.11 338.83 -275.1 336.09 -275.08 333.35 C-275.02 322.82 -274.91 312.29 -274.34 301.76 C-274.28 300.67 -274.22 299.57 -274.16 298.44 C-273.49 293.89 -271.7 290.19 -269.55 286.16 C-267.42 278.97 -272.49 270.47 -275.3 263.87 C-277.96 257.34 -278.18 252.17 -276.69 245.25 C-276.44 242.17 -276.25 239.08 -276.07 235.99 C-275.69 233.25 -275.69 233.25 -273.69 230.25 C-273.45 228.44 -273.22 226.63 -273.03 224.81 C-272.04 217.36 -270.25 210 -268.06 202.81 C-266.43 197.16 -266.28 191.58 -266.19 185.73 C-265.6 181.65 -264.12 179.52 -261.69 176.25 C-260.99 174.06 -260.99 174.06 -260.69 172.25 C-260.36 171.92 -260.03 171.59 -259.69 171.25 C-260.35 170.59 -261.01 169.93 -261.69 169.25 C-260.37 168.92 -259.05 168.59 -257.69 168.25 C-257.69 167.59 -257.69 166.93 -257.69 166.25 C-252.39 162.87 -247.77 161.33 -241.62 160.19 C-236.12 159.14 -231.71 157.85 -226.69 155.25 C-223.81 155.56 -223.81 155.56 -221.69 156.25 C-221.66 157.73 -221.64 159.21 -221.62 160.69 C-221.61 161.92 -221.61 161.92 -221.59 163.18 C-221.69 165.25 -221.69 165.25 -222.69 166.25 C-222.69 168.14 -222.68 170.03 -222.66 171.92 C-222.69 174.32 -222.9 176.64 -223.19 179.03 C-223.28 179.83 -223.37 180.62 -223.47 181.44 C-223.54 182.04 -223.61 182.63 -223.69 183.25 C-223.49 182.45 -223.28 181.66 -223.08 180.83 C-222.16 177.22 -221.24 173.61 -220.31 170 C-220 168.75 -219.68 167.49 -219.35 166.2 C-219.04 164.99 -218.73 163.79 -218.41 162.55 C-218.13 161.44 -217.85 160.33 -217.56 159.18 C-216.81 156.66 -215.96 154.54 -214.69 152.25 C-213.04 152.25 -211.39 152.25 -209.69 152.25 C-209.75 150.8 -209.75 150.8 -209.82 149.32 C-209.79 137.13 -204.82 123.93 -197.69 114.25 C-196.86 113.11 -196.86 113.11 -196.02 111.96 C-188.75 103.42 -176.14 100.24 -165.41 98.57 C-163.66 98.41 -163.66 98.41 -162.69 97.25 C-162.37 95.69 -162.08 94.13 -161.81 92.56 C-160.12 84.33 -160.12 84.33 -157.69 81.25 C-153.81 79.23 -149.8 77.72 -145.69 76.25 C-144.02 75.59 -142.35 74.93 -140.69 74.25 C-144.15 75.24 -144.15 75.24 -147.69 76.25 C-148.02 75.92 -148.35 75.59 -148.69 75.25 C-149.92 75.42 -151.16 75.58 -152.44 75.75 C-158.52 76.56 -158.52 76.56 -161.69 75.25 C-163.6 72.29 -163.69 70.28 -163.69 66.75 C-162.43 62.36 -160.5 60.49 -156.69 58.25 C-144.71 52.22 -131.58 50.79 -118.38 50.06 C-117.04 49.98 -115.7 49.9 -114.36 49.81 C-111.14 49.62 -107.91 49.43 -104.69 49.25 C-105.35 48.26 -106.01 47.27 -106.69 46.25 C-112.39 45.36 -117.77 46.2 -123.25 47.8 C-126.76 48.45 -130.25 48.48 -133.81 48.5 C-134.49 48.51 -135.18 48.52 -135.88 48.53 C-140.18 48.5 -143.69 47.82 -147.69 46.25 C-148.41 44.01 -148.41 44.01 -148.69 41.25 C-144.34 34.43 -136.71 30.13 -130.02 25.86 C-125.36 22.85 -121.95 19.8 -118.69 15.25 C-119.02 14.59 -119.35 13.93 -119.69 13.25 C-118.74 12.63 -117.79 12.01 -116.81 11.38 C-113.74 9.43 -113.74 9.43 -111.69 7.25 C-110.7 7.25 -109.71 7.25 -108.69 7.25 C-108.69 6.59 -108.69 5.93 -108.69 5.25 C-100.18 1.87 -91.14 -1.14 -82.14 2.19 C-79.81 3.31 -79.81 3.31 -77.82 4.47 C-74.83 5.56 -72.82 4.83 -69.69 4.25 C-68.26 4.03 -66.83 3.81 -65.4 3.6 C-64.61 3.48 -63.82 3.37 -63.01 3.25 C-62.18 3.12 -61.35 3 -60.49 2.88 C-58.71 2.61 -56.92 2.34 -55.14 2.08 C-52.34 1.66 -49.55 1.25 -46.75 0.83 C-44.04 0.43 -41.33 0.03 -38.62 -0.38 C-37.78 -0.5 -36.95 -0.62 -36.09 -0.75 C-35.3 -0.86 -34.52 -0.98 -33.72 -1.1 C-32.69 -1.25 -32.69 -1.25 -31.65 -1.41 C-29.66 -1.73 -29.66 -1.73 -27.64 -2.27 C-18.36 -4.55 -8.87 -2.98 0 0 Z M174.31 134.25 C175.31 136.25 175.31 136.25 175.31 136.25 Z M175.31 138.25 C176.31 142.25 176.31 142.25 176.31 142.25 Z M177.31 149.25 C178.31 151.25 178.31 151.25 178.31 151.25 Z M181.31 173.25 C182.31 175.25 182.31 175.25 182.31 175.25 Z M182.31 175.25 C183.31 178.25 183.31 178.25 183.31 178.25 Z M184.31 186.25 C185.31 188.25 185.31 188.25 185.31 188.25 Z M186.31 193.25 C186.31 194.9 186.31 196.55 186.31 198.25 C186.64 198.25 186.97 198.25 187.31 198.25 C187.31 196.6 187.31 194.95 187.31 193.25 C186.98 193.25 186.65 193.25 186.31 193.25 Z M187.31 198.25 C188.31 202.25 188.31 202.25 188.31 202.25 Z M190.31 214.25 C191.31 216.25 191.31 216.25 191.31 216.25 Z M191.31 219.25 C191.31 220.9 191.31 222.55 191.31 224.25 C191.97 222.93 192.63 221.61 193.31 220.25 C192.65 219.92 191.99 219.59 191.31 219.25 Z M196.31 246.25 C197.31 249.25 197.31 249.25 197.31 249.25 Z M205.31 294.25 C204.98 294.91 204.65 295.57 204.31 296.25 C204.97 296.25 205.63 296.25 206.31 296.25 C205.98 295.59 205.65 294.93 205.31 294.25 Z M213.31 328.25 C214.31 331.25 214.31 331.25 214.31 331.25 Z M230.31 374.25 C231.31 376.25 231.31 376.25 231.31 376.25 Z M231.31 376.25 C232.31 378.25 232.31 378.25 232.31 378.25 Z M232.31 378.25 C233.31 380.25 233.31 380.25 233.31 380.25 Z M234.31 382.25 C234.64 383.9 234.97 385.55 235.31 387.25 C235.64 386.26 235.97 385.27 236.31 384.25 C235.65 383.59 234.99 382.93 234.31 382.25 Z M238.31 390.25 C238.64 391.57 238.97 392.89 239.31 394.25 C239.64 393.59 239.97 392.93 240.31 392.25 C239.65 391.59 238.99 390.93 238.31 390.25 Z M249.31 411.25 C250.31 413.25 250.31 413.25 250.31 413.25 Z M250.31 413.25 C251.31 415.25 251.31 415.25 251.31 415.25 Z M252.31 417.25 C253.31 419.25 253.31 419.25 253.31 419.25 Z M253.31 419.25 C253.64 420.24 253.97 421.23 254.31 422.25 C254.31 421.26 254.31 420.27 254.31 419.25 C253.98 419.25 253.65 419.25 253.31 419.25 Z M256.31 424.25 C257.31 426.25 257.31 426.25 257.31 426.25 Z M257.31 426.25 C258.31 428.25 258.31 428.25 258.31 428.25 Z M258.31 428.25 C258.97 429.57 259.63 430.89 260.31 432.25 C259.98 430.93 259.65 429.61 259.31 428.25 C258.98 428.25 258.65 428.25 258.31 428.25 Z M261.31 433.25 C262.31 435.25 262.31 435.25 262.31 435.25 Z M391.31 614.25 C394.35 616.58 397.49 618.71 400.69 620.81 C411.67 628.12 422.2 635.77 432.31 644.25 C433.24 644.97 433.24 644.97 434.18 645.71 C436.73 647.7 438.46 649.47 440.25 652.19 C442.02 654.81 443.19 656.1 445.57 658.02 C449.21 661.06 452.18 664.41 455.19 668.06 C459.95 673.73 464.79 679.29 470.31 684.25 C470.64 684.25 470.97 684.25 471.31 684.25 C471.39 680.36 471.31 677 470.31 673.25 C470.04 671.67 469.77 670.08 469.5 668.5 C468.49 663.51 466.89 659.61 464.31 655.25 C463.56 653.86 463.56 653.86 462.8 652.44 C457.38 643.22 450.35 638.58 441.31 633.25 C440.42 632.69 439.53 632.13 438.61 631.55 C436.48 630.34 434.66 629.64 432.31 629 C426.94 627.33 422.28 624.58 417.43 621.77 C414.29 620.24 411.74 619.72 408.31 619.25 C406.64 618.26 404.97 617.26 403.31 616.25 C399.19 614.85 395.67 613.99 391.31 614.25 Z M517.31 653.25 C518.31 656.25 518.31 656.25 518.31 656.25 Z M518.31 656.25 C518.31 657.9 518.31 659.55 518.31 661.25 C518.64 661.25 518.97 661.25 519.31 661.25 C519.31 659.6 519.31 657.95 519.31 656.25 C518.98 656.25 518.65 656.25 518.31 656.25 Z M519.31 661.25 C520.31 663.25 520.31 663.25 520.31 663.25 Z M519.31 664.25 C520.31 666.25 520.31 666.25 520.31 666.25 Z M520.31 666.25 C521.31 669.25 521.31 669.25 521.31 669.25 Z M528.31 692.25 C529.31 694.25 529.31 694.25 529.31 694.25 Z \",fill:\"#3F1C4E\",transform:\"translate(740.6875,47.75)\"})),_path3||(_path3=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 1.38 1.5 1.38 3 3 C3 3.66 3 4.32 3 5 C4.14 5.4 4.14 5.4 5.31 5.81 C9.5 7.66 9.5 7.66 11 10 C10.75 12.81 10.75 12.81 10 16 C9.81 17.11 9.63 18.23 9.44 19.38 C9.29 20.24 9.15 21.11 9 22 C8.34 22 7.68 22 7 22 C7.33 22.99 7.66 23.98 8 25 C8.07 26.73 8.08 28.46 8.06 30.19 C8.05 31.09 8.04 31.99 8.04 32.92 C8.02 33.95 8.02 33.95 8 35 C8.91 35.21 9.81 35.41 10.75 35.62 C14.95 37.4 16.06 38.89 18 43 C18.58 47.45 18.07 51.67 17.31 56.06 C16.92 60.98 18.01 63.54 20 68 C20.66 68 21.32 68 22 68 C22.06 67.41 22.13 66.81 22.19 66.2 C23.57 56.85 28.42 47.93 35.89 41.95 C40.33 39.95 45.26 40.58 50 41 C50 42.98 50 44.96 50 47 C54.18 48.39 57.38 47.72 61.38 45.94 C61.91 45.63 62.45 45.32 63 45 C62.47 49.2 61.57 52.23 59.44 55.88 C52.84 67.61 47.37 79.06 43.31 91.92 C42.02 96.02 40.46 99.97 38.81 103.94 C37.64 106.91 36.81 109.91 36 113 C35.67 113 35.34 113 35 113 C33.96 118.05 33.9 122.87 34 128 C34.33 127.67 34.66 127.34 35 127 C35 125.68 35 124.36 35 123 C35.58 122.8 36.15 122.59 36.75 122.38 C39.89 120.46 41.12 118.08 43 114.94 C43.35 114.36 43.7 113.78 44.05 113.18 C47.31 107.66 49.98 102.07 52 96 C53.64 94.31 55.31 92.64 57 91 C64.93 81.89 71.4 72.34 77.2 61.78 C80.49 55.86 80.49 55.86 83 54 C85.67 53.33 88.24 53.23 91 53 C91 52.34 91 51.68 91 51 C93.81 49.88 93.81 49.88 97 49 C97.99 49.66 98.98 50.32 100 51 C99.64 53.78 99.18 54.83 97.07 56.75 C96.29 57.35 95.5 57.95 94.69 58.56 C89.39 63.15 87.7 67.31 86 74 C85.82 74.66 85.64 75.32 85.46 75.99 C82.85 85.67 81.76 94.43 82.05 104.43 C81.99 108.63 81.13 111.97 79.73 115.89 C78.4 119.73 78.12 123.75 77.72 127.77 C76.86 131.63 75.16 134.59 73.06 137.88 C72.7 138.47 72.34 139.06 71.97 139.67 C71.04 141.16 70.03 142.58 69 144 C68.34 144 67.68 144 67 144 C65.28 147.64 63.63 151.31 62 155 C61.66 155.71 61.32 156.41 60.96 157.14 C56.49 167.74 59.84 182.11 62 193 C62.99 193.33 63.98 193.66 65 194 C65.84 196.37 66.46 198.56 67 201 C67.18 201.76 67.35 202.51 67.53 203.29 C68.22 206.31 68.88 209.33 69.44 212.38 C70.09 215.42 70.99 218.34 71.88 221.31 C73.81 228.12 74.67 234.91 75.44 241.94 C76.62 252.57 78.94 261.89 82.71 271.89 C82.96 272.55 83.21 273.2 83.46 273.88 C83.71 274.55 83.97 275.22 84.23 275.91 C85.02 278.05 85.77 280.21 86.51 282.38 C89.75 291.72 93.5 300.23 98.53 308.74 C101.98 314.59 105.03 320.67 108.11 326.73 C110.14 330.68 112.2 334.41 114.83 338 C117 341 117 341 117 343 C117.87 343.31 117.87 343.31 118.75 343.62 C121.2 345.13 122.31 346.69 123.81 349.11 C125.24 351.39 126.81 353.56 128.38 355.75 C130.64 358.97 132.77 362.22 134.75 365.62 C138.33 371.72 142.39 377.47 146.41 383.27 C152.05 391.37 156.76 398.9 159.99 408.24 C160.91 410.76 161.97 413.14 163.12 415.56 C167.55 425.37 167.57 436.24 168.21 446.81 C168.29 447.92 168.36 449.03 168.44 450.18 C168.5 451.18 168.56 452.17 168.62 453.2 C168.87 456 168.87 456 170.03 458.38 C171.32 461.86 171.18 465.08 171.05 468.72 C171.03 469.46 171.01 470.21 170.99 470.97 C170.94 472.54 170.89 474.1 170.83 475.67 C170.75 478.03 170.69 480.39 170.63 482.75 C170.4 490.45 169.87 497.85 168.45 505.45 C167.81 509.07 167.68 512.58 167.56 516.25 C166.13 544.62 152.88 566.17 133 586 C131.62 587.39 130.24 588.79 128.86 590.18 C127.3 591.74 125.74 593.31 124.19 594.88 C123.42 595.65 122.65 596.43 121.86 597.23 C121.09 598 120.33 598.76 119.54 599.55 C118.86 600.24 118.18 600.93 117.48 601.63 C116.66 602.41 115.84 603.19 115 604 C114.53 604.57 114.05 605.14 113.57 605.73 C109.36 610.26 106.02 611.51 99.86 611.88 C96.93 611.94 94.01 611.91 91.08 611.88 C89.44 611.89 87.81 611.9 86.18 611.91 C81.7 611.94 77.23 611.92 72.75 611.9 C67.92 611.88 63.09 611.9 58.26 611.92 C48.8 611.95 39.34 611.94 29.88 611.92 C22.2 611.9 14.51 611.89 6.82 611.9 C5.18 611.9 5.18 611.9 3.51 611.9 C1.29 611.9 -0.93 611.9 -3.16 611.91 C-23.99 611.92 -44.82 611.89 -65.65 611.85 C-83.54 611.82 -101.42 611.81 -119.3 611.84 C-140.06 611.86 -160.82 611.87 -181.59 611.85 C-183.8 611.85 -186.01 611.84 -188.23 611.84 C-189.31 611.84 -190.4 611.84 -191.52 611.84 C-199.2 611.83 -206.88 611.84 -214.56 611.85 C-223.92 611.86 -233.27 611.85 -242.63 611.82 C-247.4 611.8 -252.17 611.79 -256.95 611.81 C-261.32 611.83 -265.68 611.81 -270.05 611.78 C-271.63 611.77 -273.22 611.78 -274.8 611.79 C-286.68 611.88 -286.68 611.88 -290 609.66 C-291.36 608.04 -291.36 608.04 -293 605 C-294.7 603.62 -294.7 603.62 -296.31 602.75 C-297.2 602.17 -298.09 601.6 -299 601 C-299 600.34 -299 599.68 -299 599 C-299.62 598.89 -300.23 598.78 -300.86 598.66 C-303.66 598.16 -306.46 597.64 -309.25 597.12 C-310.22 596.95 -311.19 596.78 -312.18 596.6 C-313.12 596.42 -314.05 596.25 -315.02 596.07 C-316.3 595.83 -316.3 595.83 -317.62 595.59 C-319.98 595.01 -321.88 594.17 -324 593 C-324.33 593.66 -324.66 594.32 -325 595 C-341.37 590.21 -356.88 579.81 -368 567 C-368.33 566.01 -368.66 565.02 -369 564 C-369.99 563.67 -370.98 563.34 -372 563 C-372.7 561.69 -373.36 560.35 -374 559 C-374.58 558.3 -375.15 557.6 -375.75 556.88 C-380.98 550.2 -384.77 542.81 -388 535 C-388.41 534.09 -388.82 533.18 -389.25 532.25 C-390.1 529.71 -390 527.66 -390 525 C-390.63 523.65 -391.3 522.32 -392 521 C-392.9 517.64 -393.12 516.36 -392 513 C-392 512.34 -392 511.68 -392 511 C-392.66 511 -393.32 511 -394 511 C-395.07 506.24 -394.8 502.65 -393.82 497.88 C-393.62 496.88 -393.62 496.88 -393.42 495.87 C-393 493.77 -392.56 491.66 -392.12 489.56 C-391.7 487.46 -391.27 485.37 -390.85 483.27 C-390.47 481.36 -390.07 479.45 -389.68 477.55 C-389.22 475.14 -388.83 472.71 -388.51 470.28 C-388.09 467.57 -387.65 465.66 -386.47 463.24 C-386.16 462.6 -385.85 461.96 -385.53 461.3 C-385.19 460.65 -384.85 459.99 -384.5 459.31 C-384.14 458.62 -383.79 457.92 -383.42 457.2 C-377.55 446.06 -370.26 437.43 -360 430 C-358.56 428.96 -358.56 428.96 -357.09 427.89 C-344.48 420.19 -328.19 420.5 -314.19 423.44 C-311.47 424.1 -308.77 424.79 -306.07 425.54 C-298.87 427.14 -291.08 425.67 -283.88 424.69 C-282.87 424.55 -281.86 424.42 -280.82 424.28 C-256.55 421.42 -256.55 421.42 -237.2 407.78 C-235.38 405.23 -233.68 402.64 -232 400 C-231.39 399.1 -230.78 398.19 -230.15 397.26 C-221.34 384.02 -216.51 367.38 -219.5 351.31 C-219.66 350.55 -219.83 349.79 -220 349 C-220 347.68 -220 346.36 -220 345 C-219.34 345 -218.68 345 -218 345 C-218 344.34 -218 343.68 -218 343 C-218.99 343 -219.98 343 -221 343 C-220.92 342.28 -220.84 341.56 -220.75 340.81 C-221.08 337.13 -222.5 335.65 -225 333 C-225.66 332.67 -226.32 332.34 -227 332 C-227 331.01 -227 330.02 -227 329 C-228.18 328.66 -228.18 328.66 -229.38 328.31 C-232.73 326.64 -232.7 325.42 -234 322 C-237.96 315.62 -242.71 309.74 -247.31 303.81 C-250.32 299.91 -253.2 295.95 -256 291.9 C-258.78 287.87 -261.61 283.87 -264.44 279.88 C-265.5 278.37 -266.56 276.87 -267.62 275.37 C-268.41 274.24 -269.21 273.12 -270 272 C-269.34 271.67 -268.68 271.34 -268 271 C-261.27 274.3 -256.62 278.33 -253 285 C-247.63 284.58 -245 283.56 -241 280 C-237.16 277.35 -233.52 277.78 -229 278 C-228.34 278.33 -227.68 278.66 -227 279 C-227.33 278.01 -227.66 277.02 -228 276 C-222.38 274 -222.38 274 -219 274 C-217.89 273.23 -217.89 273.23 -216.75 272.44 C-213.02 270.49 -211.06 271.02 -207 272 C-205.89 272.52 -204.77 273.03 -203.62 273.56 C-199.73 275.11 -197.12 275.22 -193.02 275.01 C-191 275 -191 275 -188 276 C-187.31 278.06 -187.31 278.06 -187 280 C-186.34 280 -185.68 280 -185 280 C-183.48 282.18 -182.07 284.36 -180.69 286.62 C-177.76 291.4 -174.85 295.92 -171 300 C-170.01 300 -169.02 300 -168 300 C-169.65 291.54 -172.51 284.22 -176.28 276.54 C-178.9 271.14 -181.18 265.73 -183 260 C-183.33 260.33 -183.66 260.66 -184 261 C-183.91 263.02 -183.75 265.05 -183.56 267.06 C-183.41 268.72 -183.41 268.72 -183.25 270.41 C-183.17 271.26 -183.09 272.12 -183 273 C-183.33 272.34 -183.66 271.68 -184 271 C-184.66 271 -185.32 271 -186 271 C-186.06 270.4 -186.12 269.79 -186.18 269.17 C-186.27 268.37 -186.35 267.57 -186.44 266.75 C-186.56 265.57 -186.56 265.57 -186.68 264.36 C-186.98 262.17 -187.46 260.14 -188 258 C-188.22 256.08 -188.22 256.08 -188.44 254.12 C-188.74 251.47 -189.19 249.45 -190.06 246.88 C-191.08 243.76 -191.15 241.25 -191 238 C-191.33 238 -191.66 238 -192 238 C-192.05 235.75 -192.09 233.5 -192.12 231.25 C-192.15 230 -192.17 228.74 -192.2 227.45 C-192.02 224.27 -191.69 222.63 -190 220 C-188.68 220 -187.36 220 -186 220 C-186.06 219.24 -186.12 218.48 -186.18 217.7 C-189.66 173.57 -189.66 173.57 -185 161 C-184.01 160.67 -183.02 160.34 -182 160 C-181.94 159.19 -181.88 158.38 -181.82 157.54 C-181.64 155.21 -181.46 152.89 -181.27 150.56 C-181.11 148.47 -180.98 146.38 -180.92 144.29 C-180.59 136.67 -178.12 130.16 -175.48 123.09 C-174.25 119.77 -173.25 116.44 -172.38 113 C-171.31 108.89 -169.89 105.19 -168.09 101.35 C-166.88 98.75 -165.82 96.1 -164.75 93.44 C-162.67 88.42 -160.37 83.55 -157.94 78.69 C-157.61 78.03 -157.28 77.37 -156.94 76.7 C-154.76 72.38 -152.43 68.18 -150 64 C-149.34 64 -148.68 64 -148 64 C-147.81 63.34 -147.63 62.68 -147.44 62 C-145.35 57.64 -142.29 54.5 -139 51 C-137.78 49.68 -137.78 49.68 -136.53 48.33 C-135.67 47.44 -134.82 46.55 -133.94 45.62 C-132.74 44.38 -132.74 44.38 -131.53 43.1 C-128.71 40.76 -126.58 39.74 -123 39 C-117.56 41.87 -117.56 41.87 -116 45 C-115.74 52.7 -116.39 60.33 -117 68 C-114.83 68.93 -114.83 68.93 -112 69 C-109.57 67.57 -107.6 66.21 -105.44 64.44 C-104.87 64.01 -104.31 63.58 -103.73 63.13 C-99.98 60.16 -97.57 57.07 -95 53 C-91.72 50.23 -89.68 49.11 -85.44 48.44 C-80.95 49.17 -79.72 50.38 -77 54 C-76.59 57.04 -76.93 59.91 -77.31 62.94 C-77.94 68.64 -78.07 72.52 -76 78 C-75.8 83.89 -77.24 89.38 -79.23 94.88 C-80.32 97.88 -81.15 100.93 -82 104 C-81.67 104.33 -81.34 104.66 -81 105 C-81.46 112.56 -83.33 119.54 -85.38 126.81 C-95.36 162.88 -96.5 197.2 -89.55 233.9 C-89.06 236.64 -88.69 239.34 -88.41 242.11 C-88.1 245.03 -87.68 247.5 -86.94 250.31 C-86 254 -86 254 -86 258 C-85.34 258 -84.68 258 -84 258 C-84 258.66 -84 259.32 -84 260 C-83.34 260 -82.68 260 -82 260 C-81.85 260.84 -81.85 260.84 -81.7 261.69 C-80.59 267.31 -78.87 271.98 -76.12 277 C-75.74 277.72 -75.35 278.44 -74.96 279.18 C-70.67 286.93 -65.53 294.05 -60.31 301.19 C-55 308.52 -55 308.52 -55 311 C-54.4 311.27 -53.8 311.53 -53.18 311.81 C-50.93 313.04 -49.75 314.16 -48.12 316.12 C-47.61 316.72 -47.1 317.33 -46.58 317.96 C-46.06 318.59 -45.54 319.22 -45 319.88 C-38.11 328.26 -38.11 328.26 -29 334 C-29 333.01 -29 332.02 -29 331 C-28.01 330.67 -27.02 330.34 -26 330 C-25.69 329.03 -25.38 328.06 -25.06 327.06 C-24 324 -24 324 -21.88 322.62 C-21.26 322.42 -20.64 322.21 -20 322 C-20.75 325.12 -21.63 328.18 -22.56 331.25 C-22.97 332.59 -22.97 332.59 -23.38 333.95 C-23.69 334.97 -23.69 334.97 -24 336 C-22.68 335.67 -21.36 335.34 -20 335 C-19.66 333.21 -19.66 333.21 -19.31 331.38 C-18.15 326.76 -16.36 324.36 -13 321 C-12.11 320.5 -11.23 320.01 -10.31 319.5 C-7.82 318.11 -7.82 318.11 -6.31 315.44 C-5.7 308.73 -10.49 303.76 -14.61 298.82 C-16.03 297.14 -17.46 295.48 -18.89 293.82 C-27.74 283.56 -34.9 271.99 -40.44 259.62 C-42.29 255.71 -44.43 253.62 -47.81 250.94 C-51.8 247.66 -51.8 247.66 -52.72 244.64 C-52.87 240.69 -52.59 238.7 -50 235.62 C-49.34 235.09 -48.68 234.55 -48 234 C-48 233.01 -48 232.02 -48 231 C-49.98 231 -51.96 231 -54 231 C-54.33 230.34 -54.66 229.68 -55 229 C-54.58 228.53 -54.16 228.06 -53.72 227.57 C-52.9 226.64 -52.9 226.64 -52.06 225.69 C-51.52 225.07 -50.97 224.46 -50.41 223.82 C-47.86 220.53 -47.95 217.68 -48.06 213.66 C-48.3 205.12 -47.61 196.91 -46.5 188.44 C-45.35 179.43 -44.7 170.58 -44.69 161.5 C-44.68 160.49 -44.68 159.49 -44.67 158.45 C-44.72 152.84 -45.34 147.68 -46.55 142.2 C-48.01 135.08 -47.32 127.78 -45.34 120.84 C-44.81 118.78 -44.81 118.78 -46 116 C-44.91 111.91 -43.26 108.38 -41.21 104.69 C-40.39 103.21 -40.39 103.21 -39.56 101.7 C-38.98 100.67 -38.41 99.63 -37.81 98.56 C-21.75 70.44 -21.75 70.44 -18 39 C-18.23 38.31 -18.45 37.63 -18.69 36.92 C-19.14 34.12 -18.04 33.04 -16.44 30.75 C-13.16 25.63 -11.13 20.43 -9.18 14.71 C-7.2 9.03 -4.54 4.08 0 0 Z M-219 369 C-218 372 -218 372 -218 372 Z M-309 465 C-309 465.33 -309 465.66 -309 466 C-305.04 466 -301.08 466 -297 466 C-297 465.67 -297 465.34 -297 465 C-300.96 465 -304.92 465 -309 465 Z M-330 472 C-331.65 473.03 -333.32 474.03 -335 475 C-344.03 480.54 -352.19 486.76 -356 497 C-360.43 515.85 -354.81 533.78 -345 550 C-344.01 549.51 -344.01 549.51 -343 549 C-342.67 550.65 -342.34 552.3 -342 554 C-341.01 553.51 -341.01 553.51 -340 553 C-336.56 557.4 -333.13 561.81 -329.81 566.31 C-326.08 571.28 -321.96 574.87 -316.97 578.54 C-314.6 580.3 -312.29 582.14 -310 584 C-309.34 583.67 -308.68 583.34 -308 583 C-309.65 580.03 -311.3 577.06 -313 574 C-313.66 574 -314.32 574 -315 574 C-315.17 573.36 -315.34 572.72 -315.52 572.06 C-317.07 566.5 -318.82 561.82 -322 557 C-322.99 556.51 -322.99 556.51 -324 556 C-324.69 554.01 -325.36 552.01 -326 550 C-326.66 549.01 -327.32 548.02 -328 547 C-328.99 547 -329.98 547 -331 547 C-331.32 532.11 -331.1 520.01 -323 507 C-322.47 506.09 -321.95 505.19 -321.4 504.25 C-312.32 489.11 -302.66 481.72 -286.23 476.11 C-283.45 475.15 -280.72 474.12 -278 473 C-283.49 467.51 -293.07 467.82 -300.37 467.74 C-307.34 467.76 -314.12 467.82 -321 469 C-321 468.67 -321 468.34 -321 468 C-325.67 467.48 -326.91 468.63 -330 472 Z \",fill:\"#3C194D\",transform:\"translate(498,669)\"})),_path4||(_path4=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.59 2.01 1.17 2.03 1.77 2.04 C8.92 2.44 15.34 4.05 22.1 6.27 C26.51 7.63 30.23 8.08 34.85 7.93 C41.31 7.79 46.43 9.39 52.44 11.62 C54.55 12.37 56.66 13.11 58.77 13.85 C59.82 14.22 60.87 14.58 61.94 14.96 C66.44 16.49 70.99 17.79 75.56 19.06 C77.28 19.54 79 20.03 80.71 20.51 C81.57 20.75 82.43 20.99 83.32 21.24 C95.61 24.73 107.84 28.45 119.88 32.75 C120.68 33.03 121.49 33.31 122.33 33.6 C124.25 34.31 126.13 35.15 128 36 C128.33 36.99 128.66 37.98 129 39 C127.68 39.99 126.36 40.98 125 42 C125.25 43.09 125.25 43.09 125.5 44.21 C125.97 46.82 126.07 49.06 125.99 51.7 C125.7 65.47 127.06 77.74 130.19 91.12 C131.69 98.27 131.46 104.1 127.5 110.38 C127 110.91 126.51 111.45 126 112 C125.34 112 124.68 112 124 112 C123.34 113.32 122.68 114.64 122 116 C121.34 116 120.68 116 120 116 C120 116.66 120 117.32 120 118 C126.11 119.22 126.11 119.22 132 118 C133.1 116.3 133.1 116.3 134 114 C134.68 112.99 135.37 111.98 136.07 110.93 C138.63 106.47 138.27 102.69 137.81 97.69 C137.69 95.83 137.56 93.98 137.44 92.13 C137.37 91.15 137.3 90.16 137.22 89.15 C136.82 83.48 136.52 77.8 136.25 72.12 C136.18 71.03 136.11 69.93 136.04 68.8 C135.74 62.58 136.07 58.51 139 53 C139.69 50.22 139.69 50.22 140 48 C140.33 48 140.66 48 141 48 C140.92 49.13 140.84 50.27 140.75 51.44 C140.74 60.06 143.46 68.81 145.9 77.03 C147.8 83.59 148.53 90.08 149 96.88 C149.08 97.78 149.16 98.68 149.24 99.62 C149.47 104.09 149.53 106.98 146.55 110.48 C145.71 111.31 144.87 112.14 144 113 C143.15 115.22 143.15 115.22 143 117 C145.24 117.59 145.24 117.59 148 117 C152.6 113.24 156.2 107.92 157 102 C156.63 94.51 155.1 87.32 153.31 80.06 C151.52 72.24 152.15 64.9 153 57 C154.49 56.5 154.49 56.5 156 56 C157.12 53.38 157.12 53.38 158.06 50.19 C161.12 41.7 166.39 34.07 174 29 C178.01 28.59 181.98 28.8 186 29 C186.89 29.02 187.78 29.04 188.7 29.07 C194.7 29.66 197.26 31.89 201.12 36.5 C205 41.6 205 41.6 205 44 C205.62 44.08 206.24 44.17 206.88 44.25 C209 45 209 45 209.94 46.75 C210.29 47.49 210.64 48.24 211 49 C212.63 50.71 214.29 52.38 216 54 C217 55 217 55 217.11 57.13 C217.11 58.05 217.1 58.97 217.1 59.91 C217.09 60.9 217.09 61.89 217.09 62.91 C217.08 63.95 217.07 64.99 217.06 66.06 C217.06 67.11 217.05 68.15 217.05 69.23 C217.04 71.82 217.02 74.41 217 77 C217.66 77 218.32 77 219 77 C219.33 77.66 219.66 78.32 220 79 C226.75 79.14 226.75 79.14 233.44 78.38 C236 78 236 78 239 80 C239.55 82.76 239.93 85.34 240.19 88.12 C240.27 88.88 240.35 89.63 240.44 90.41 C240.64 92.27 240.82 94.14 241 96 C231.75 99.87 225.45 98.78 216 96 C215.76 97.17 215.52 98.34 215.27 99.55 C212.61 112.14 208.95 123.32 203.37 134.96 C201.93 138 201.93 138 200.98 141.32 C200.65 142.2 200.33 143.09 200 144 C198.35 144.7 196.68 145.37 195 146 C193.48 148.8 192.86 151.54 192.06 154.62 C191 158 191 158 189.42 159.46 C187.81 160.88 187.81 160.88 187.84 162.9 C187.94 163.6 188.04 164.29 188.14 165.01 C188.29 166.15 188.29 166.15 188.45 167.31 C188.57 168.09 188.69 168.88 188.81 169.69 C188.92 170.48 189.03 171.28 189.14 172.1 C189.41 174.07 189.7 176.04 190 178 C189.01 178 188.02 178 187 178 C185.28 180.44 185.28 180.44 184 183 C181.5 181.69 181.5 181.69 179 180 C179 179.01 179 178.02 179 177 C178.34 177 177.68 177 177 177 C176.34 175.35 175.68 173.7 175 172 C171.44 172 170.72 172.89 168 175 C167.34 175 166.68 175 166 175 C165.34 177.31 164.68 179.62 164 182 C163.34 182 162.68 182 162 182 C161.88 183.28 161.75 184.56 161.62 185.88 C161.25 189.75 161.25 189.75 159 192 C155.7 191.67 154.38 191.38 152 189 C151.39 187.02 150.85 185.02 150.38 183 C150.11 181.93 149.85 180.86 149.59 179.75 C149 177 149 177 149 175 C147.68 174.34 146.36 173.68 145 173 C145.54 167.31 146.14 161.65 147 156 C146.01 155.34 145.02 154.68 144 154 C142.45 156.85 141.56 159.43 140.92 162.61 C140.73 163.52 140.55 164.43 140.35 165.36 C140.15 166.34 139.95 167.31 139.75 168.31 C130.34 212.92 130.34 212.92 123.12 225 C121.29 228.25 119.8 231.65 118.24 235.03 C114.42 243.31 110.51 251.35 105.44 258.94 C104.81 259.88 104.81 259.88 104.17 260.83 C103.18 262.27 102.1 263.64 101 265 C100.34 265 99.68 265 99 265 C98.74 265.58 98.48 266.16 98.21 266.75 C96.93 269.14 95.49 270.92 93.69 272.94 C92.75 273.98 92.75 273.98 91.8 275.05 C89.6 277.43 87.29 279.71 85 282 C83.29 283.97 81.65 285.98 80 288 C87.37 286.58 92.54 280.72 97.17 275.17 C99.12 272.86 101.18 270.7 103.25 268.5 C115.85 254.53 128.12 235.89 134 218 C133.67 217.01 133.34 216.02 133 215 C133.78 212.08 133.78 212.08 134.94 208.81 C135.32 207.73 135.7 206.64 136.09 205.52 C136.39 204.69 136.69 203.86 137 203 C137.33 203.66 137.66 204.32 138 205 C138.97 204.94 139.94 204.88 140.94 204.81 C145.62 204.78 149.67 206.35 154 208 C155.09 212.37 155.1 216.6 155.03 221.07 C155.03 221.87 155.02 222.67 155.01 223.49 C154.99 225.23 154.97 226.96 154.95 228.69 C154.91 232.39 154.89 236.08 154.86 239.78 C154.82 246.66 154.76 253.53 154.68 260.41 C154.62 265.2 154.58 269.99 154.56 274.78 C154.55 276.59 154.53 278.41 154.5 280.22 C154.32 291.28 155.14 299.83 160 310 C160.52 311.3 161.03 312.6 161.52 313.91 C161.95 315.03 162.38 316.14 162.82 317.29 C167.32 329.23 171.08 341.44 174.97 353.59 C182.6 378 182.6 378 193.15 401.25 C194 403 194 403 194 405 C194.66 405 195.32 405 196 405 C197.41 406.47 197.41 406.47 199.06 408.5 C205.22 415.7 211.8 421.23 220.13 425.77 C220.75 426.18 221.36 426.58 222 427 C222 427.66 222 428.32 222 429 C223.32 429.66 224.64 430.32 226 431 C224.76 431.37 223.52 431.74 222.25 432.12 C201.65 439.04 181.96 453.89 165.56 467.94 C163 470 163 470 161 470 C160.8 470.57 160.6 471.14 160.4 471.73 C158.45 474.89 155.72 476.47 152.62 478.38 C152 478.77 151.37 479.16 150.72 479.57 C138.78 486.93 126.15 491.86 112.95 496.39 C106.09 498.79 99.86 501.45 93.69 505.31 C80.18 513.75 66.47 519.51 51.09 523.59 C45.62 525.06 40.33 526.91 35.03 528.91 C24.65 532.76 14.53 534.47 3.5 535.06 C-4.06 535.5 -11.39 536.16 -18.85 537.49 C-24.97 538.48 -31.14 538.99 -37.31 539.56 C-38.61 539.69 -39.91 539.81 -41.25 539.94 C-88.65 544.45 -88.65 544.45 -105 534 C-99.64 519.61 -88.13 506.44 -76.97 496.08 C-73.71 492.99 -71.93 490.03 -70 486 C-68.43 484.39 -68.43 484.39 -66.88 483.25 C-63.98 481.31 -63.98 481.31 -63 479 C-62.34 479 -61.68 479 -61 479 C-60.77 478.44 -60.54 477.88 -60.31 477.31 C-58.64 474.36 -56.55 472.44 -54.1 470.11 C-53.11 469.17 -52.13 468.22 -51.15 467.27 C-49.61 465.79 -48.07 464.32 -46.52 462.86 C-37.96 454.81 -37.96 454.81 -34 444 C-33.71 442.3 -33.71 442.3 -33.42 440.56 C-33.3 439.01 -33.3 439.01 -33.19 437.44 C-33.1 436.4 -33.01 435.37 -32.92 434.31 C-33 431.05 -33.63 428.27 -34.49 425.14 C-35.4 421.35 -35.66 417.5 -36 413.62 C-36.68 406.29 -36.68 406.29 -38.06 399.06 C-39.88 390.91 -39.74 382.32 -40 374 C-40.02 373.29 -40.05 372.58 -40.07 371.85 C-40.3 364.05 -40.3 364.05 -40 361 C-37.52 358.52 -35.16 358.16 -31.83 357.3 C-15.53 353.03 1.02 344.89 14 334 C14.33 333.01 14.66 332.02 15 331 C11.47 331.64 9.05 333.09 6.06 335.06 C1.84 337.81 -2.4 340.53 -6.69 343.19 C-8.21 344.14 -8.21 344.14 -9.76 345.11 C-16.71 349.17 -22.81 351.71 -30.75 353.19 C-32.41 353.51 -34.07 353.84 -35.73 354.17 C-36.46 354.3 -37.18 354.44 -37.93 354.58 C-39.32 354.86 -40.71 355.18 -42.09 355.54 C-44.7 356.17 -47.26 356.24 -49.94 356.38 C-55.8 356.78 -61.22 357.88 -66.91 359.3 C-70.6 360.13 -74.21 360.53 -77.98 360.79 C-80.2 360.95 -80.2 360.95 -83 362 C-93.63 362.78 -102.62 362.22 -110.94 355.12 C-116.61 349.87 -118.33 345.33 -119.25 337.75 C-120.52 328.79 -123.4 321.05 -127.15 312.87 C-128 311.01 -128.78 309.12 -129.55 307.23 C-130.75 304.56 -131.79 302.66 -133.62 300.44 C-136.6 296.62 -139.29 292.67 -141.94 288.62 C-142.35 288.01 -142.77 287.39 -143.19 286.75 C-144.19 285.2 -145.1 283.61 -146 282 C-145.67 281.34 -145.34 280.68 -145 280 C-136.8 278.65 -128.29 278.87 -120 279 C-120 278.34 -120 277.68 -120 277 C-122.64 277.33 -125.28 277.66 -128 278 C-128 277.34 -128 276.68 -128 276 C-135.78 275.81 -135.78 275.81 -143.5 276.62 C-146.61 277.09 -147.39 276.73 -150 275 C-158.84 263.8 -158.84 263.8 -158.19 257.44 C-156.4 252.26 -156.4 252.26 -154 250 C-151.32 249.75 -149.03 249.71 -146.38 249.88 C-141.99 250.1 -138.08 250.13 -133.8 249.05 C-127.88 247.6 -121.94 247.5 -115.88 247.31 C-114.16 247.24 -114.16 247.24 -112.42 247.17 C-106.77 246.97 -101.59 247.11 -96 248 C-92.37 248.2 -88.75 248.23 -85.12 248.25 C-83.71 248.28 -83.71 248.28 -82.27 248.31 C-75.97 248.35 -70.83 247.39 -65 245 C-65 244.01 -65 243.02 -65 242 C-69.22 242.39 -69.22 242.39 -72.73 244.53 C-75.91 246.59 -78.84 246.36 -82.5 246.25 C-83.81 246.23 -85.12 246.22 -86.47 246.2 C-89.84 246.09 -93.17 245.81 -96.53 245.5 C-103.34 244.91 -110.14 244.78 -116.97 244.76 C-119.06 244.75 -121.15 244.72 -123.24 244.69 C-130.45 244.63 -136.83 245.15 -143.72 247.33 C-146.59 248.17 -149.2 248.3 -152.19 248.19 C-153.57 248.15 -153.57 248.15 -154.98 248.11 C-155.65 248.07 -156.31 248.04 -157 248 C-157 247.34 -157 246.68 -157 246 C-157.99 246 -158.98 246 -160 246 C-162.91 239.2 -164.66 234.31 -163 227 C-162.5 227.99 -162.5 227.99 -162 229 C-161.34 229 -160.68 229 -160 229 C-159.71 228.36 -159.42 227.72 -159.12 227.06 C-158 225 -158 225 -156 224 C-155.11 224.47 -154.23 224.95 -153.31 225.44 C-149.47 227.25 -147.2 227.62 -143 227 C-140.53 224.64 -140.53 224.64 -139 222 C-140.32 222 -141.64 222 -143 222 C-143.47 222.52 -143.95 223.03 -144.44 223.56 C-144.95 224.04 -145.47 224.51 -146 225 C-149.48 224.74 -151.05 223.97 -154 222 C-155.73 221.81 -155.73 221.81 -157.5 221.62 C-161 221 -161 221 -162.94 219.44 C-164.18 216.58 -163.92 214.41 -163.78 211.34 C-164.15 207.4 -166.02 204.15 -167.75 200.63 C-169.26 197.46 -170.17 194.4 -171 191 C-171.66 191 -172.32 191 -173 191 C-177.79 185.59 -182 180.42 -182 173 C-181.67 173.66 -181.34 174.32 -181 175 C-180.34 175 -179.68 175 -179 175 C-177.62 176.25 -177.62 176.25 -176 178 C-175.28 178.66 -174.56 179.32 -173.81 180 C-172 182 -172 182 -172 185 C-171.34 185 -170.68 185 -170 185 C-169.67 185.99 -169.34 186.98 -169 188 C-167.04 189.17 -167.04 189.17 -164.69 190.06 C-161.73 191.28 -158.85 192.54 -156 194 C-156 192.68 -156 191.36 -156 190 C-156.78 189.69 -157.57 189.38 -158.38 189.06 C-161 188 -161 188 -163 187 C-163 186.34 -163 185.68 -163 185 C-163.99 184.67 -164.98 184.34 -166 184 C-166 183.34 -166 182.68 -166 182 C-166.99 181.67 -167.98 181.34 -169 181 C-170.54 179.19 -170.54 179.19 -172.06 177 C-174.08 173.98 -174.08 173.98 -177 172 C-177 170.68 -177 169.36 -177 168 C-177.64 167.73 -178.28 167.46 -178.94 167.19 C-181 166 -181 166 -182 163 C-183.14 153.99 -181.71 148.44 -176.81 140.88 C-171.36 132.21 -169.58 121.77 -167.42 111.89 C-167.08 110.36 -166.71 108.84 -166.34 107.32 C-164.86 100.98 -164.64 94.64 -164.52 88.15 C-164.37 83.76 -164.1 81.98 -161 79 C-159.22 73.48 -158.79 68.78 -159 63 C-159.66 63 -160.32 63 -161 63 C-162.62 60.43 -163.04 59.32 -162.62 56.25 C-162.32 55.14 -162.32 55.14 -162 54 C-156.4 52.13 -149.65 52.06 -144.06 54.12 C-137.3 58.27 -136.19 64.2 -134.07 71.48 C-131.67 79.39 -129.12 87.41 -124 94 C-123.41 94.78 -122.82 95.56 -122.22 96.36 C-115.86 104.62 -109.8 110.09 -100.25 114.31 C-99.5 114.66 -98.74 115 -97.96 115.36 C-85.79 120.91 -70.78 121 -58.18 116.32 C-57.13 115.88 -56.08 115.45 -55 115 C-53.67 114.5 -52.34 113.99 -51.01 113.49 C-38.92 108.76 -29 101.89 -23 90 C-17.83 77.96 -17.83 77.96 -15.68 65.15 C-15.64 64.21 -15.6 63.28 -15.56 62.32 C-15.52 61.35 -15.48 60.38 -15.44 59.38 C-15.37 57.95 -15.37 57.95 -15.31 56.5 C-15.07 51.04 -14.97 45.61 -15.03 40.14 C-14.99 37.36 -14.57 34.72 -14 32 C-14.66 31.67 -15.32 31.34 -16 31 C-15.67 30.67 -15.34 30.34 -15 30 C-14.67 25.56 -14.92 21.15 -15.56 16.75 C-15.97 13.29 -15.93 11.29 -15 8 C-14.63 6.17 -14.63 6.17 -14.25 4.31 C-13 1 -13 1 -10.75 -0.44 C-6.99 -1.21 -3.52 -1.76 0 0 Z \",fill:\"#7D6281\",transform:\"translate(706,267)\"})),_path5||(_path5=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.13 5.82 -9.13 9.66 -15 13.56 C-23.2 18.97 -23.2 18.97 -30 26 C-30.13 28.87 -30.13 28.87 -29 31 C-19.91 32.1 -11 33.07 -2.12 30.45 C2.18 29.54 6.62 29.86 11 30 C11.66 31.32 12.32 32.64 13 34 C5.85 35.13 -1.14 36.06 -8.38 36.38 C-18.8 36.99 -33.94 38.76 -41.57 46.62 C-43 48 -43 48 -45 48 C-45.18 52.55 -45 55.88 -43 60 C-38.46 60.08 -34.45 60.02 -30 59 C-29.01 59 -28.02 59 -27 59 C-26.32 58.79 -25.64 58.59 -24.94 58.38 C-24.3 58.25 -23.66 58.13 -23 58 C-22.34 58.66 -21.68 59.32 -21 60 C-22.04 60.34 -23.07 60.68 -24.14 61.02 C-25.51 61.47 -26.88 61.92 -28.25 62.38 C-28.93 62.6 -29.61 62.82 -30.32 63.05 C-36.51 64.67 -36.51 64.67 -41.01 68.7 C-41.23 69.36 -41.46 70.01 -41.69 70.69 C-41.93 71.4 -42.17 72.11 -42.42 72.84 C-43.12 75.25 -43.12 75.25 -43.44 78.81 C-44 82 -44 82 -45.73 83.64 C-48.25 85.15 -50.03 85.52 -52.94 85.88 C-64.97 87.86 -73.59 91.63 -80.8 101.45 C-87.69 112 -90.45 124.61 -92 137 C-93.65 137 -95.3 137 -97 137 C-97.24 138.06 -97.48 139.13 -97.73 140.23 C-99.66 148.58 -101.72 156.83 -104.17 165.05 C-104.91 167.69 -105.51 170.3 -106 173 C-106.33 173 -106.66 173 -107 173 C-106.67 165.41 -106.34 157.82 -106 150 C-105.34 150 -104.68 150 -104 150 C-104.33 147.03 -104.66 144.06 -105 141 C-109.69 141.52 -109.69 141.52 -114.18 142.88 C-118.8 144.71 -123.61 145.86 -128.41 147.14 C-132.38 148.22 -136.21 149.35 -140 151 C-140 151.66 -140 152.32 -140 153 C-140.66 153.33 -141.32 153.66 -142 154 C-142 154.99 -142 155.98 -142 157 C-142.59 158.97 -142.59 158.97 -143.38 161.06 C-143.63 161.75 -143.89 162.45 -144.15 163.16 C-145 165 -145 165 -147 167 C-147.23 169.31 -147.36 171.62 -147.44 173.94 C-147.71 179.62 -148.52 184.74 -150.17 190.18 C-152.29 197.37 -153.88 204.79 -154.56 212.25 C-155 216 -155 216 -157 218 C-157.28 220.53 -157.47 222.97 -157.56 225.5 C-157.88 232.76 -157.88 232.76 -159 235 C-159.55 241.12 -157.96 245.44 -155.62 250.94 C-149.41 265.83 -149.41 265.83 -150.86 271.17 C-151.34 272.16 -151.82 273.16 -152.31 274.19 C-158.74 287.63 -156.32 305.46 -156.41 320.07 C-156.42 322.82 -156.46 325.57 -156.51 328.32 C-156.58 332.34 -156.6 336.34 -156.62 340.36 C-156.66 342.19 -156.66 342.19 -156.71 344.05 C-156.69 351.39 -155.65 355.89 -151.19 361.8 C-150 364 -150 364 -150.22 366.61 C-151 369 -151 369 -152.58 371.75 C-154.47 376.07 -154.15 379.44 -153.75 384.06 C-153.67 385.25 -153.67 385.25 -153.59 386.46 C-153.31 390.39 -152.8 394.14 -152 398 C-151.45 405.02 -151.77 411.62 -155 418 C-156.61 419.75 -156.61 419.75 -158 421 C-158.99 420.67 -159.98 420.34 -161 420 C-161 419.34 -161 418.68 -161 418 C-161.63 417.8 -162.26 417.59 -162.91 417.38 C-165 416 -165 416 -165.91 413.24 C-166.2 411.58 -166.2 411.58 -166.5 409.88 C-167.67 404.25 -168.78 399.79 -172 395 C-174.93 393.59 -174.93 393.59 -178 394 C-180.4 394.99 -180.4 394.99 -182 397 C-182.38 398.66 -182.71 400.32 -183 402 C-184.53 404.4 -185.45 405.72 -188 407 C-188.27 408.64 -188.53 410.28 -188.72 411.94 C-190.18 422.77 -193.91 433.49 -198 443.56 C-198.48 444.79 -198.48 444.79 -198.97 446.03 C-201.35 451.65 -201.35 451.65 -204.69 453.46 C-205.45 453.64 -206.21 453.82 -207 454 C-207.33 454.33 -207.66 454.66 -208 455 C-210.94 455.19 -210.94 455.19 -214 455 C-214.66 454.34 -215.32 453.68 -216 453 C-221.35 457.2 -222.93 463.78 -225 470 C-225.99 469.67 -226.98 469.34 -228 469 C-231.57 474.35 -233.62 480.44 -235.31 486.62 C-236.88 492.13 -239.21 497.26 -241.58 502.47 C-243 505.62 -244.23 508.62 -245 512 C-245.99 512 -246.98 512 -248 512 C-248.23 512.78 -248.45 513.57 -248.69 514.38 C-250.08 518.22 -251.84 521.7 -253.7 525.33 C-255.37 528.76 -256.71 532.29 -258.01 535.87 C-259.05 538.11 -260.22 539.32 -262 541 C-262.71 543.1 -262.71 543.1 -263 545 C-263.66 545 -264.32 545 -265 545 C-265.27 545.99 -265.54 546.98 -265.81 548 C-266.57 550.68 -267.46 553.23 -268.5 555.81 C-269.9 559.48 -270.69 563.08 -271.39 566.93 C-272.2 571.02 -273.16 575.07 -274.12 579.12 C-274.31 579.9 -274.49 580.67 -274.68 581.46 C-275.12 583.31 -275.56 585.15 -276 587 C-276.99 587 -277.98 587 -279 587 C-279.07 587.67 -279.15 588.35 -279.22 589.04 C-280.26 592.99 -282.21 595.93 -284.44 599.31 C-284.85 599.96 -285.25 600.6 -285.67 601.27 C-286.72 602.89 -287.86 604.45 -289 606 C-289.66 606 -290.32 606 -291 606 C-291.24 606.63 -291.47 607.26 -291.71 607.91 C-292.78 610.47 -293.91 612.92 -295.13 615.4 C-295.52 616.21 -295.92 617.02 -296.33 617.85 C-297.15 619.53 -297.98 621.2 -298.81 622.88 C-301.11 627.62 -302.88 631.68 -303 637 C-300.99 639.12 -299.38 640.41 -297 642 C-295.65 643.08 -294.29 644.17 -292.94 645.25 C-289.99 647.42 -287.78 649 -284 649 C-281.04 648.22 -279.39 647.38 -277.19 645.25 C-275.76 642.97 -275.76 642.97 -276 639.94 C-276 637 -276 637 -274.81 635.19 C-273 634 -273 634 -270.56 633.62 C-266.94 632.74 -266.14 631.03 -264 628 C-262.6 625.47 -261.36 622.86 -260.12 620.25 C-249.07 597.72 -249.07 597.72 -238.08 593.21 C-235.24 591.56 -234.13 589.55 -232.4 586.77 C-231.74 585.74 -231.09 584.71 -230.41 583.65 C-229.74 582.57 -229.07 581.49 -228.38 580.38 C-227.03 578.23 -225.69 576.09 -224.34 573.96 C-223.74 573.01 -223.15 572.06 -222.54 571.08 C-222.03 570.39 -221.52 569.71 -221 569 C-220.34 569 -219.68 569 -219 569 C-218.6 567.9 -218.6 567.9 -218.18 566.78 C-217.04 564.08 -215.73 561.9 -214.06 559.5 C-212.42 557.11 -210.87 554.77 -209.44 552.25 C-207.63 549.43 -205.37 547.37 -203 545 C-201.17 542.72 -199.4 540.41 -197.65 538.09 C-196.19 536.25 -194.7 534.61 -193 533 C-187.29 534.86 -187.29 534.86 -184.56 536.19 C-180.76 537.39 -178.83 537.23 -175 536 C-163.61 526.88 -158.97 510.98 -154.69 497.56 C-154.26 496.24 -153.82 494.92 -153.39 493.6 C-149.42 482.08 -149.42 482.08 -147.44 470.12 C-147.1 465.1 -147.1 465.1 -146 464 C-145.81 462.53 -145.68 461.04 -145.56 459.56 C-145.24 456.04 -144.79 452.64 -144.06 449.19 C-141.51 436.92 -140.71 425.29 -140.81 412.81 C-140.82 411 -140.83 409.19 -140.83 407.38 C-140.91 390.25 -141.25 373.13 -141.57 356.01 C-142.12 325.73 -142.12 325.73 -142.18 311.24 C-142.18 309.65 -142.19 308.05 -142.21 306.45 C-142.23 304.28 -142.23 302.12 -142.23 299.96 C-142.23 298.77 -142.24 297.58 -142.24 296.36 C-141.98 292.68 -141.1 289.52 -140 286 C-139.46 282.86 -139.01 279.73 -138.56 276.57 C-138 274 -138 274 -136 272 C-135.62 296.72 -135.62 296.72 -137.55 307.85 C-139.12 318.78 -139.12 318.78 -136 329 C-135.01 329 -134.02 329 -133 329 C-133.24 328.23 -133.24 328.23 -133.48 327.45 C-135.98 315.69 -133.44 303.17 -131.5 291.54 C-130.48 285.37 -129.68 279.32 -129.44 273.06 C-129.17 266.7 -128.03 261.03 -126 255 C-125.34 255 -124.68 255 -124 255 C-123.98 256.11 -123.98 256.11 -123.96 257.24 C-123.65 276.03 -123.65 276.03 -120.43 294.47 C-120.29 295.31 -120.14 296.14 -120 297 C-120.66 297.66 -121.32 298.32 -122 299 C-122 299.99 -122 300.98 -122 302 C-120.76 302.37 -119.52 302.74 -118.25 303.12 C-115.24 304.29 -113.91 305.09 -111.56 307.44 C-109.65 311.79 -109.43 315.57 -109.27 320.29 C-109.19 323.22 -109.19 323.22 -107 326 C-105.51 321.05 -105.51 321.05 -104 316 C-100.04 315.67 -96.08 315.34 -92 315 C-92 313.68 -92 312.36 -92 311 C-92.66 311 -93.32 311 -94 311 C-94 310.34 -94 309.68 -94 309 C-94.99 308.67 -95.98 308.34 -97 308 C-97 307.34 -97 306.68 -97 306 C-97.66 306 -98.32 306 -99 306 C-99.27 305.05 -99.54 304.1 -99.81 303.12 C-100.75 299.75 -100.75 299.75 -104 298 C-104.44 295.56 -104.44 295.56 -104 293 C-102 291.19 -102 291.19 -100 290 C-99.01 290.66 -98.02 291.32 -97 292 C-96.59 294.71 -96.87 297.24 -97 300 C-94.69 300.66 -92.38 301.32 -90 302 C-90.33 299.69 -90.66 297.38 -91 295 C-90.01 294.67 -89.02 294.34 -88 294 C-86.19 295.81 -86.62 298.61 -86.44 301.06 C-86.31 302.72 -86.31 302.72 -86.18 304.41 C-86.12 305.26 -86.06 306.12 -86 307 C-84.68 306.67 -83.36 306.34 -82 306 C-83.99 320.78 -86.63 335.62 -94.88 348.31 C-98.71 354.38 -99.1 359.97 -98 367 C-96.77 370.2 -96.77 370.2 -94 372 C-94 373.32 -94 374.64 -94 376 C-93.44 376.19 -92.89 376.37 -92.31 376.56 C-89.43 378.35 -88.17 380.47 -86.3 383.25 C-84.54 385.61 -82.32 387.21 -80 389 C-80 389.66 -80 390.32 -80 391 C-79.22 391.31 -78.43 391.62 -77.62 391.94 C-75 393 -75 393 -73 394 C-73 394.99 -73 395.98 -73 397 C-72.34 397.33 -71.68 397.66 -71 398 C-71.99 398.33 -72.98 398.66 -74 399 C-75.34 398.01 -76.67 397.01 -78 396 C-80.08 395.24 -82.17 394.57 -84.29 393.94 C-86 393 -86 393 -86.74 390.9 C-86.82 390.27 -86.91 389.65 -87 389 C-87.66 389 -88.32 389 -89 389 C-89.34 387.58 -89.34 387.58 -89.69 386.12 C-90.69 382.81 -90.69 382.81 -93.62 381.62 C-94.8 381.32 -94.8 381.32 -96 381 C-96 380.34 -96 379.68 -96 379 C-96.66 379 -97.32 379 -98 379 C-96.74 384.03 -94.44 387.31 -91.24 391.27 C-90 393 -90 393 -90 395 C-89.34 395 -88.68 395 -88 395 C-87.05 397.14 -86.1 399.28 -85.16 401.43 C-84.42 403.07 -83.65 404.71 -82.84 406.32 C-80.27 411.59 -79.8 415.17 -80 421 C-78.37 424.12 -78.37 424.12 -75.94 424.66 C-75.16 424.79 -74.37 424.93 -73.56 425.06 C-70.26 425.63 -68.89 426.07 -66 428 C-62.63 427.67 -60.58 426.12 -58 424 C-58 424.66 -58 425.32 -58 426 C-57.34 426 -56.68 426 -56 426 C-57.15 428.47 -58.05 430.05 -60 432 C-65.6 432.55 -69.09 431.41 -74 429 C-74.45 429.66 -74.91 430.32 -75.38 431 C-75.91 431.66 -76.45 432.32 -77 433 C-77.66 433 -78.32 433 -79 433 C-80.43 438.34 -79.28 441.07 -77 446 C-77 447.32 -77 448.64 -77 450 C-76.01 450 -75.02 450 -74 450 C-74 450.66 -74 451.32 -74 452 C-71.46 451.72 -68.92 451.42 -66.38 451.12 C-65.66 451.05 -64.95 450.97 -64.21 450.89 C-63.51 450.8 -62.81 450.72 -62.09 450.63 C-61.45 450.56 -60.81 450.49 -60.15 450.41 C-57.86 450.03 -57.86 450.03 -55.22 448.97 C-51.53 447.86 -48.15 447.73 -44.33 447.77 C-43.24 447.77 -43.24 447.77 -42.14 447.77 C-40.62 447.77 -39.09 447.78 -37.57 447.79 C-35.27 447.81 -32.97 447.81 -30.67 447.81 C-23.79 447.83 -16.98 447.96 -10.14 448.76 C-6.67 449.15 -3.24 449.25 0.25 449.31 C1.25 449.36 1.25 449.36 2.27 449.4 C7.38 449.47 9.95 447.95 14 445 C16.87 445.25 16.87 445.25 19 446 C19 446.99 19 447.98 19 449 C15.07 452.93 9.23 453.11 3.9 453.23 C2.06 453.23 0.22 453.21 -1.62 453.19 C-2.6 453.18 -3.57 453.18 -4.58 453.17 C-9.81 453.12 -14.98 452.91 -20.19 452.44 C-25.77 451.97 -31.22 452.04 -36.81 452.31 C-37.98 452.36 -37.98 452.36 -39.17 452.42 C-43.08 452.64 -46.73 453.11 -50.54 454.04 C-54.94 455.09 -59.05 455.23 -63.56 455.12 C-64.29 455.12 -65.01 455.11 -65.75 455.1 C-67.5 455.07 -69.25 455.04 -71 455 C-74.01 461.33 -74.01 461.33 -73 468 C-71.51 470.42 -69.94 472.74 -68.28 475.05 C-67 477 -67 477 -67 479 C-61.95 479.94 -61.95 479.94 -57 479 C-52.83 478.85 -49.06 479.02 -45 480 C-45 480.66 -45 481.32 -45 482 C-42.36 481.67 -39.72 481.34 -37 481 C-37 481.66 -37 482.32 -37 483 C-45.25 483.66 -53.5 484.32 -62 485 C-59.82 489.36 -57.92 492.68 -55.06 496.5 C-54.36 497.45 -53.65 498.41 -52.93 499.39 C-52.29 500.25 -51.66 501.11 -51 502 C-48.44 505.6 -46.54 508.99 -44.83 513.06 C-44.01 514.98 -43.15 516.87 -42.28 518.77 C-38.91 526.34 -36.52 533.32 -35.44 541.56 C-34.51 548.37 -33.35 553.26 -28 558 C-27.45 558.5 -26.9 558.99 -26.34 559.5 C-18.35 565.9 -8.79 565.55 1 565 C1.66 564.67 2.32 564.34 3 564 C6.26 563.56 9.52 563.19 12.79 562.84 C16.21 562.45 19.29 561.92 22.61 560.96 C27 559.72 31.19 559.56 35.72 559.34 C39.33 558.97 42.52 558.01 46 557 C48.44 556.66 50.87 556.32 53.31 556 C63.37 554.36 71.46 549.31 80 544 C80.59 543.64 81.19 543.27 81.8 542.9 C85.7 540.51 89.57 538.14 93.15 535.29 C95 534 95 534 97.25 534.31 C97.83 534.54 98.4 534.77 99 535 C94.64 545.83 75.07 553.39 65 558 C59.66 560.01 54.22 561.57 48.7 563.01 C45.22 563.61 45.22 563.61 44 565 C43.23 577.99 43.42 592.58 46.46 605.25 C47.42 610.13 47.77 615.1 48.24 620.04 C48.65 624.22 49.18 628.18 50.25 632.25 C52.14 640.72 50.23 650.57 46 658 C43.56 660.76 43.56 660.76 40.71 663.55 C40.21 664.04 39.7 664.54 39.18 665.05 C37.59 666.63 35.98 668.19 34.38 669.75 C32.76 671.33 31.15 672.91 29.54 674.49 C28.09 675.92 26.64 677.34 25.18 678.76 C22.97 680.8 22.97 680.8 22 683 C21.34 683 20.68 683 20 683 C19.6 683.9 19.6 683.9 19.19 684.81 C18 687 16.9 688.41 15 690 C14.34 690 13.68 690 13 690 C12.81 690.85 12.61 691.71 12.41 692.59 C10.58 697.02 7.91 699.41 4.44 702.62 C-5.59 712.29 -15.67 723.96 -20.69 737.12 C-21.12 738.07 -21.55 739.02 -22 740 C-23.33 740.36 -24.66 740.7 -26 741 C-26.73 742.98 -27.39 744.98 -28 747 C-28.98 748.02 -29.98 749.02 -31 750 C-32.4 752.31 -33.71 754.63 -35 757 C-35.49 757.88 -35.98 758.75 -36.48 759.66 C-39.27 764.68 -41.86 769.66 -44 775 C-44.66 775 -45.32 775 -46 775 C-46.12 776.29 -46.25 777.57 -46.38 778.9 C-46.93 783.89 -47.91 788.73 -49 793.62 C-52.73 806.89 -52.73 806.89 -51.02 819.86 C-49.69 822.64 -49.66 824.93 -49.54 828 C-49.48 829.19 -49.43 830.37 -49.37 831.6 C-49.31 832.87 -49.25 834.13 -49.19 835.44 C-48.61 845.85 -47.4 855.6 -44.59 865.65 C-44.26 866.83 -44.26 866.83 -43.93 868.04 C-43.72 868.71 -43.52 869.38 -43.31 870.08 C-42.95 872.32 -43.32 873.85 -44 876 C-48.33 864.73 -50.13 853.52 -51.57 841.56 C-52.51 833.84 -53.96 826.5 -56 819 C-56.52 816.9 -57.04 814.79 -57.56 812.69 C-58.04 810.79 -58.52 808.9 -59 807 C-59.19 806.25 -59.37 805.5 -59.56 804.73 C-59.98 803.13 -60.48 801.56 -61 800 C-61.66 799.67 -62.32 799.34 -63 799 C-68.34 785.09 -68.49 770.93 -62.64 757.39 C-61.22 754.46 -59.86 751.67 -58 749 C-57.34 749 -56.68 749 -56 749 C-54.65 746.82 -53.32 744.64 -52 742.44 C-51.62 741.83 -51.24 741.22 -50.84 740.59 C-48.25 736.22 -47.62 733.19 -48 728 C-47.68 725.6 -47.21 723.49 -46.27 721.25 C-44.27 716.29 -43.94 712.35 -44.19 707 C-44.47 699.35 -43.03 692.3 -41.25 684.88 C-41 683.8 -40.75 682.72 -40.49 681.61 C-38.17 672.38 -35.08 667.55 -27.61 661.61 C-25.65 660.03 -25.65 660.03 -26 657 C-29.05 656.02 -30.95 656.02 -34 657 C-34 657.66 -34 658.32 -34 659 C-34.56 659.07 -35.11 659.13 -35.69 659.2 C-40.02 660.11 -42.37 661.21 -45.17 664.74 C-47.22 668.12 -49.13 671.52 -51 675 C-54.29 680.81 -57.63 685.99 -62.13 690.93 C-64.26 693.28 -66.26 695.72 -68.25 698.19 C-68.89 698.99 -69.54 699.78 -70.2 700.61 C-72.87 704.17 -74.8 707.41 -76.25 711.62 C-78.49 717.9 -82.28 724.28 -87 729 C-87.99 729 -88.98 729 -90 729 C-90 730.32 -90 731.64 -90 733 C-89.34 733.33 -88.68 733.66 -88 734 C-88.99 734.66 -89.98 735.32 -91 736 C-93.66 730.68 -91.98 722.67 -91 717 C-90.34 716.01 -89.68 715.02 -89 714 C-86.78 709.13 -84.98 704.19 -83.25 699.12 C-78.72 686.15 -73.77 673.88 -66.73 662.05 C-64.68 658.44 -63.26 654.94 -62 651 C-62.87 651.66 -63.73 652.32 -64.62 653 C-68.21 655.13 -69.93 655.39 -74 655 C-76.11 651.53 -76.11 651.53 -75.56 648.86 C-75.37 648.25 -75.19 647.63 -75 647 C-84.07 646.89 -84.07 646.89 -91.63 651.23 C-97.22 658.45 -101.02 664.81 -102 674 C-103.32 674 -104.64 674 -106 674 C-108.29 668.88 -109.33 665.75 -108.34 660.08 C-107.55 655.25 -107.33 650.71 -109.12 646.12 C-110.91 643.73 -110.91 643.73 -114.12 643 C-117 641 -117 641 -117.71 638.21 C-118.44 631.16 -117.76 626.43 -115 620 C-114.73 617.25 -114.73 617.25 -116 615 C-117.95 613.6 -119.96 612.27 -122 611 C-123.87 608.75 -123.87 608.75 -125 607 C-128.84 611.22 -131 614.82 -133 620.25 C-133.5 621.58 -134.01 622.9 -134.52 624.23 C-134.89 625.19 -134.89 625.19 -135.27 626.18 C-136.9 630.25 -138.96 634.12 -141 638 C-141.61 639.21 -142.21 640.41 -142.81 641.62 C-143.2 642.41 -143.6 643.19 -144 644 C-143.34 644.33 -142.68 644.66 -142 645 C-138.8 667.74 -154.12 693.7 -166.22 712.07 C-168.74 716.02 -169.72 719.33 -170 724 C-169.67 724.66 -169.34 725.32 -169 726 C-169.31 727.11 -169.62 728.23 -169.94 729.38 C-171.82 736.44 -171.58 743.57 -170 750.66 C-168.83 756.3 -168.66 761.75 -168.69 767.5 C-168.69 769.11 -168.69 769.11 -168.69 770.76 C-168.8 779.82 -169.74 788.67 -170.93 797.64 C-171.9 805.17 -172.25 812.46 -171.8 820.04 C-171.59 825.27 -172.73 827.96 -176 832 C-177.75 833.87 -177.75 833.87 -179 835 C-176.67 835.78 -174.39 836.42 -172 837 C-172.41 839.41 -172.67 840.69 -174.49 842.38 C-176.89 844.96 -176.84 847.15 -176.74 850.57 C-175.75 853.84 -174.16 854.94 -171.5 857.06 C-164.94 862.35 -162.29 868.68 -158.86 876.16 C-153.06 888.53 -143.7 899.14 -134.91 909.46 C-132.12 913.17 -129.82 916.28 -130.31 921 C-132.36 924.64 -134.72 926.21 -138.1 928.57 C-142.63 931.98 -143.65 936.7 -145 942 C-146.32 942.33 -147.64 942.66 -149 943 C-149 939.05 -148.39 936.89 -147 933.25 C-146.63 932.27 -146.26 931.28 -145.88 930.27 C-145.44 929.14 -145.44 929.14 -145 928 C-148.81 930.58 -149.81 932.53 -151 937 C-151.99 937 -152.98 937 -154 937 C-153.67 938.32 -153.34 939.64 -153 941 C-163.16 936.65 -169.07 929.15 -175.82 920.61 C-178 917.92 -178 917.92 -180.66 915.36 C-182.92 913.08 -184.28 910.88 -185.79 908.06 C-187.27 905.54 -188.99 903.27 -190.75 900.94 C-208.16 877.32 -208.16 877.32 -207 866 C-207.66 866 -208.32 866 -209 866 C-209 865.34 -209 864.68 -209 864 C-209.66 864 -210.32 864 -211 864 C-213.27 855.08 -215.3 846.29 -216.28 837.13 C-216.65 833.69 -217.1 830.32 -217.79 826.93 C-223.15 799.66 -221.63 768.63 -214 742 C-213.2 739.17 -212.41 736.33 -211.63 733.49 C-211.1 731.59 -210.56 729.69 -210.02 727.8 C-206.94 718.32 -206.94 718.32 -208 709 C-207.47 706.71 -206.86 704.44 -206.19 702.19 C-205.83 700.96 -205.47 699.74 -205.11 698.48 C-204 695 -204 695 -202.84 692.34 C-201.9 689.71 -201.92 688.12 -202.31 685.38 C-202.41 684.62 -202.51 683.86 -202.61 683.09 C-202.98 680.82 -202.98 680.82 -204 678 C-204.14 674.65 -204.07 671.56 -203.63 668.24 C-202.73 662.56 -202.73 662.56 -204.5 657.31 C-207.97 655.49 -210.12 655.46 -214 656 C-217.64 657.85 -219.59 659.35 -221.77 662.81 C-224.3 666.43 -226.97 668.78 -230.44 671.44 C-231.28 672.12 -231.28 672.12 -232.13 672.83 C-234.84 674.92 -236.37 676.03 -239.85 675.85 C-242 675 -242 675 -243 674 C-242.97 672.34 -242.87 670.67 -242.74 669.01 C-242.67 668 -242.61 666.98 -242.54 665.93 C-242.39 663.78 -242.23 661.63 -242.05 659.48 C-241.99 658.46 -241.93 657.44 -241.86 656.39 C-241.79 655.45 -241.72 654.51 -241.65 653.55 C-242.11 650.19 -243.42 649.11 -246 647 C-247.83 645.83 -247.83 645.83 -250 646 C-254.84 648.86 -258.68 652.34 -262.62 656.31 C-263.46 657.13 -263.46 657.13 -264.32 657.96 C-268.04 661.67 -270.58 665.34 -273 670 C-273.66 670 -274.32 670 -275 670 C-275.25 670.66 -275.5 671.33 -275.76 672.01 C-277.29 675.71 -279.07 679.25 -280.88 682.81 C-281.21 683.49 -281.55 684.16 -281.9 684.85 C-282.24 685.53 -282.58 686.2 -282.93 686.89 C-283.27 687.57 -283.61 688.25 -283.96 688.95 C-284.66 690.32 -285.35 691.69 -286.06 693.05 C-288.22 697.26 -290.01 701.46 -291.56 705.94 C-291.99 707.15 -292.41 708.36 -292.84 709.61 C-294.25 713.74 -295.64 717.86 -297 722 C-297.66 724.02 -298.33 726.04 -299 728.06 C-299.34 729.09 -299.67 730.11 -300.02 731.16 C-300.82 733.48 -301.72 735.69 -302.69 737.94 C-304.79 743.38 -304.67 749.24 -305 755 C-305.37 758.8 -305.79 762.36 -307 766 C-307.66 766.33 -308.32 766.66 -309 767 C-313.2 779.64 -312.66 792.96 -311.22 806.02 C-310.73 812.66 -310.93 819.35 -311 826 C-311.62 826.1 -312.24 826.21 -312.88 826.31 C-315.37 826.88 -315.37 826.88 -317 830 C-318.58 819.84 -319.36 809.99 -319.31 799.69 C-319.31 798.67 -319.31 798.67 -319.3 797.63 C-319.24 786.75 -318.47 776.59 -316 766 C-315.73 764.78 -315.45 763.57 -315.17 762.32 C-313.03 752.85 -310.79 743.4 -308.48 733.97 C-308.04 732.16 -307.6 730.35 -307.16 728.53 C-304.38 717.16 -301.22 706.08 -297.1 695.11 C-296.35 693.09 -295.67 691.05 -295 689 C-295.33 688.34 -295.66 687.68 -296 687 C-297.25 688.08 -298.5 689.17 -299.75 690.25 C-300.45 690.85 -301.14 691.46 -301.86 692.08 C-306.36 696.12 -309.59 700.13 -312.75 705.25 C-313.19 705.95 -313.62 706.66 -314.07 707.39 C-318.14 714.05 -321.67 720.91 -325.02 727.96 C-326.02 730.04 -327.05 732.1 -328.1 734.15 C-334.11 746.2 -338.33 758.6 -340 772 C-339.34 772.33 -338.68 772.66 -338 773 C-338.13 773.71 -338.27 774.41 -338.4 775.14 C-340.17 785.4 -340.61 795.62 -341 806 C-341.33 806 -341.66 806 -342 806 C-342.11 812.41 -342.17 818.68 -341 825 C-340.34 825.33 -339.68 825.66 -339 826 C-338.58 827.86 -338.58 827.86 -338.25 830.31 C-335.9 842.94 -327.88 852.82 -319.93 862.53 C-318.03 864.96 -316.4 867.42 -314.81 870.06 C-314.3 870.9 -313.79 871.74 -313.27 872.6 C-312.12 874.77 -311.46 876.6 -311 879 C-310.34 878.34 -309.68 877.68 -309 877 C-308.98 874.32 -308.98 874.32 -309.38 871.38 C-309.49 870.37 -309.6 869.37 -309.71 868.34 C-309.81 867.57 -309.9 866.79 -310 866 C-309.01 866 -308.02 866 -307 866 C-304.76 871.18 -302.56 876.38 -300.41 881.6 C-299.4 884.04 -298.38 886.47 -297.34 888.9 C-296.79 890.22 -296.24 891.55 -295.69 892.88 C-295.18 894.09 -294.66 895.3 -294.14 896.55 C-293.02 899.95 -292.77 902.46 -293 906 C-293.99 906.33 -294.98 906.66 -296 907 C-310 892.15 -310 892.15 -310 886 C-310.66 886 -311.32 886 -312 886 C-312.33 884.68 -312.66 883.36 -313 882 C-313.75 882.05 -314.5 882.09 -315.27 882.14 C-322.02 882.38 -326.69 881.6 -332.82 878.84 C-335.91 877.65 -337.9 877.92 -341 879 C-342.67 879.99 -344.34 880.99 -346 882 C-347.32 882 -348.64 882 -350 882 C-350.66 882.33 -351.32 882.66 -352 883 C-352 883.66 -352 884.32 -352 885 C-352.94 884.91 -352.94 884.91 -353.91 884.82 C-360.8 884.46 -364.57 885.86 -370 890 C-373.22 892.15 -374.26 892.56 -378 892 C-379.5 890.31 -379.5 890.31 -381 888 C-381.89 887.13 -382.77 886.27 -383.69 885.38 C-386 883 -386 883 -386 881 C-388.65 879.92 -391.28 878.91 -394 878 C-393.67 878.46 -393.35 878.93 -393.01 879.4 C-392.04 880.78 -391.06 882.16 -390.09 883.54 C-388.98 885.1 -387.88 886.67 -386.77 888.24 C-383.89 892.31 -381.03 896.4 -378.19 900.5 C-375.52 904.31 -372.71 907.98 -369.83 911.64 C-359.92 924.42 -359.92 924.42 -357 930 C-357.33 930.66 -357.66 931.32 -358 932 C-362.04 929.08 -364.28 926.13 -367 922 C-368.69 919.82 -370.4 917.65 -372.12 915.5 C-379.88 905.73 -386.98 895.52 -394.06 885.25 C-394.54 884.56 -395.02 883.87 -395.51 883.15 C-398.88 878.25 -398.88 878.25 -400 876 C-400.66 875.34 -401.32 874.68 -402 874 C-402 872.68 -402 871.36 -402 870 C-402.66 870 -403.32 870 -404 870 C-404.1 868.11 -404.2 866.22 -404.29 864.34 C-405.15 861.51 -406.74 859.84 -408.66 857.66 C-410.96 854.81 -412.48 851.6 -414.06 848.31 C-414.41 847.61 -414.75 846.9 -415.11 846.18 C-417.82 840.57 -420.05 834.91 -422 829 C-422.36 828.05 -422.72 827.1 -423.09 826.12 C-430.21 806.7 -426.5 785.35 -418.05 766.93 C-415.42 761.26 -412.72 755.62 -410 750 C-409.68 749.33 -409.35 748.66 -409.02 747.96 C-405.04 739.75 -400.72 731.81 -396 724 C-395.08 722.46 -395.08 722.46 -394.13 720.89 C-386.86 708.92 -379.44 697.26 -370.23 686.68 C-367.92 683.91 -365.97 681.02 -364 678 C-363.3 677.15 -362.6 676.31 -361.88 675.44 C-359.94 673.17 -359.94 673.17 -359.2 670.82 C-357.59 667.03 -355.35 663.86 -353 660.5 C-352.27 659.45 -352.27 659.45 -351.52 658.38 C-338.76 640.15 -338.76 640.15 -331.47 633.56 C-329.6 631.57 -328.4 629.34 -327 627 C-325.78 625.57 -324.53 624.18 -323.25 622.81 C-319.54 618.75 -316.45 614.47 -313.45 609.87 C-312.97 609.25 -312.49 608.64 -312 608 C-311.34 608 -310.68 608 -310 608 C-309.93 607.44 -309.85 606.88 -309.78 606.3 C-308.71 603.15 -306.88 601.51 -304.56 599.12 C-299.58 593.8 -295.39 588.19 -291.25 582.2 C-289.51 579.73 -287.74 577.44 -285.81 575.12 C-279.5 566.82 -276.16 555.82 -273 546 C-272.34 545.01 -271.68 544.02 -271 543 C-270.51 541.18 -270.08 539.34 -269.69 537.5 C-268.42 532.19 -266.6 527.54 -264.24 522.63 C-263.1 520.22 -262.13 517.81 -261.19 515.31 C-258.03 507.29 -253.9 499.68 -249.98 492.01 C-244.98 482.19 -240.35 472.27 -235.95 462.18 C-235.05 460.12 -234.14 458.06 -233.22 456.01 C-226.73 441.41 -220.84 426.55 -215.32 411.56 C-214.49 409.31 -213.63 407.07 -212.74 404.85 C-210.54 399.23 -209.67 395.02 -210 389 C-209.67 388.67 -209.34 388.34 -209 388 C-208.88 387.03 -208.75 386.06 -208.62 385.06 C-208.24 382.12 -207.58 379.41 -206.71 376.57 C-206.44 375.69 -206.17 374.81 -205.89 373.91 C-205.6 372.95 -205.3 371.99 -205 371 C-199.68 353.44 -199.68 353.44 -194.81 335.75 C-192.74 327.8 -190.39 319.76 -187.24 312.17 C-184.94 306.54 -184.12 301.01 -183.31 295 C-180.1 273.34 -173.98 252.23 -168.08 231.18 C-166.2 224.45 -164.39 217.71 -162.67 210.93 C-162.47 210.16 -162.28 209.39 -162.08 208.59 C-161.12 204.82 -160.17 201.06 -159.23 197.29 C-157.2 189.19 -154.83 181.31 -152.13 173.42 C-150.61 168.83 -149.42 164.2 -148.31 159.5 C-145.86 149.32 -142.88 139.4 -139.65 129.45 C-138.15 124.76 -136.72 120.07 -135.45 115.31 C-134.22 110.71 -132.8 106.23 -131.19 101.75 C-130.8 100.67 -130.8 100.67 -130.4 99.57 C-129.87 98.1 -129.33 96.63 -128.79 95.15 C-128.28 93.75 -127.77 92.35 -127.27 90.95 C-124.41 82.96 -121.12 76.07 -115.83 69.37 C-114 67.01 -112.53 64.56 -111 62 C-109.7 60.63 -108.38 59.28 -107 58 C-107.33 57.01 -107.66 56.02 -108 55 C-99.2 48.46 -90.99 47.58 -80.19 47.88 C-77.97 47.92 -75.76 47.96 -73.54 47.99 C-72.09 48.03 -72.09 48.03 -70.61 48.07 C-68.19 48 -66.27 47.82 -64 47 C-62.76 44.95 -62.76 44.95 -61.94 42.5 C-61.03 40.03 -61.03 40.03 -60 38 C-58.51 37.5 -58.51 37.5 -57 37 C-57 36.34 -57 35.68 -57 35 C-55.37 33.66 -53.66 32.4 -51.94 31.19 C-50.94 30.48 -49.94 29.76 -48.91 29.03 C-47.2 27.83 -45.48 26.64 -43.75 25.47 C-39.96 22.98 -39.96 22.98 -38 19 C-36.37 17.88 -36.37 17.88 -34.29 16.84 C-33.54 16.46 -32.79 16.08 -32.02 15.68 C-31.23 15.29 -30.44 14.9 -29.62 14.5 C-28.07 13.72 -26.52 12.94 -24.98 12.16 C-24.29 11.81 -23.6 11.47 -22.89 11.12 C-20.94 10.07 -20.94 10.07 -19.44 8.43 C-18 7 -18 7 -15 6 C-15 5.34 -15 4.68 -15 4 C-13.27 3.27 -11.54 2.54 -9.81 1.8 C-7.9 0.99 -7.9 0.99 -5.81 -0.25 C-3.5 -1.21 -2.36 -0.68 0 0 Z M-341 772 C-340 775 -340 775 -340 775 Z M-342 777 C-341 779 -341 779 -341 779 Z M-343 782 C-343 785.3 -343 788.6 -343 792 C-342.67 792 -342.34 792 -342 792 C-342 788.7 -342 785.4 -342 782 C-342.33 782 -342.66 782 -343 782 Z M-344 792 C-344 795.96 -344 799.92 -344 804 C-343.67 804 -343.34 804 -343 804 C-343 800.04 -343 796.08 -343 792 C-343.33 792 -343.66 792 -344 792 Z M-340 834 C-339 838 -339 838 -339 838 Z M-339 838 C-338 840 -338 840 -338 840 Z M-338 840 C-337 842 -337 842 -337 842 Z M-337 842 C-336 844 -336 844 -336 844 Z M-336 844 C-335 846 -335 846 -335 846 Z \",fill:\"#341047\",transform:\"translate(623,63)\"})),_path6||(_path6=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.76 4.09 10.92 8.12 13.69 15.62 C15.09 18.53 16.5 21.24 18.69 23.62 C21.73 23.96 21.73 23.96 24.69 23.62 C27.24 25.49 28.43 26.79 29.37 29.81 C29.77 33.38 29.24 36.48 28.44 39.94 C28.19 41.01 28.19 41.01 27.93 42.11 C24.93 53.73 19.65 68.47 11.69 77.62 C9.29 78.1 9.29 78.1 6.69 77.62 C4.21 75.95 2.1 74.04 -0.13 72.06 C-2.16 70.41 -2.16 70.41 -4.32 70.77 C-6.45 71.46 -6.45 71.46 -7.47 73.45 C-7.77 74.23 -8.07 75.01 -8.38 75.82 C-8.72 76.68 -9.06 77.54 -9.41 78.43 C-9.75 79.34 -10.09 80.25 -10.44 81.19 C-10.78 82.07 -11.13 82.95 -11.49 83.86 C-14.63 92.02 -16.49 99.54 -16.87 108.3 C-17.25 111.19 -17.88 113.37 -18.82 116.09 C-20.9 122.77 -20.8 129.37 -20.75 136.31 C-20.75 137.31 -20.75 137.31 -20.74 138.33 C-20.69 148.47 -19.81 157.07 -16.31 166.62 C-15.6 169.06 -14.89 171.5 -14.19 173.94 C-12.99 178.22 -12.99 178.22 -10.31 181.62 C-9.62 183.62 -8.95 185.62 -8.31 187.62 C-7.28 188.87 -7.28 188.87 -5.06 188.81 C-1.94 188.6 -0.03 188.2 2.69 186.62 C5.33 182.21 6.27 178.18 7.06 173.12 C8.09 167.41 8.87 163.21 13.69 159.62 C17.71 159.37 19.95 160.63 23 163.06 C26.16 166.07 26.62 166.6 26.89 170.9 C27.09 180.99 26.41 190.1 21.93 199.34 C16.46 210.81 16.1 220.39 16.6 233 C16.72 236.62 16.63 240.19 16.44 243.81 C16.39 244.86 16.34 245.9 16.3 246.98 C15.5 250.44 14.63 251.62 11.69 253.62 C8.96 253.95 6.53 254.08 3.81 254.06 C-5.56 254.29 -13.16 256.61 -21.62 260.75 C-24.34 263.76 -24.27 267.3 -24.56 271.19 C-24.64 272.05 -24.71 272.91 -24.79 273.79 C-25.7 285.38 -25.49 297.01 -25.31 308.62 C-30.07 309.73 -30.07 309.73 -32.23 308.81 C-32.84 308.42 -33.44 308.03 -34.06 307.62 C-38.75 305.06 -42.22 305.6 -47.31 306.62 C-51.22 307.3 -54.06 307.66 -58 307.06 C-61.14 306.47 -61.14 306.47 -63.56 307.06 C-68.33 311.32 -69.09 319.69 -70 325.75 C-70.13 326.59 -70.26 327.42 -70.39 328.28 C-71.24 334.19 -71.43 339.89 -71.3 345.86 C-71.34 357.62 -72.86 369.45 -75.06 381 C-75.26 382.15 -75.26 382.15 -75.46 383.32 C-76.51 388.35 -78.31 391.35 -81.9 395.02 C-84.16 397.59 -85.1 400.44 -86.31 403.62 C-86.64 403.95 -86.97 404.29 -87.31 404.62 C-87.5 409.8 -87.5 409.8 -86.82 414.91 C-86.17 418.4 -86.1 421.76 -86.06 425.31 C-86.04 425.99 -86.02 426.66 -86 427.36 C-85.98 429.32 -85.98 429.32 -86.31 432.62 C-89.31 434.62 -89.31 434.62 -92.3 434.58 C-95.31 433.62 -95.31 433.62 -97.07 431.32 C-106.77 409.96 -106.77 409.96 -104.31 401.62 C-102.09 397.65 -99.5 394.04 -96.58 390.55 C-94.95 388.56 -94.95 388.56 -95.94 385.5 C-97.13 382.38 -97.13 382.38 -100.31 380.62 C-106.75 379.36 -113.02 381.12 -119.19 382.88 C-120.29 383.18 -120.29 383.18 -121.42 383.49 C-125.66 384.78 -128.52 386 -131.31 389.62 C-132.32 392.65 -132.35 394.22 -132.12 397.34 C-132.06 398.25 -132.01 399.17 -131.95 400.11 C-131.82 402.03 -131.68 403.95 -131.54 405.87 C-131.01 414.52 -131.01 414.52 -133.31 418.62 C-134.63 417.96 -135.95 417.31 -137.31 416.62 C-137.4 410.87 -137.48 405.21 -136.69 399.5 C-136.5 397.58 -136.5 397.58 -136.31 395.62 C-139.19 392.75 -141.28 392.88 -145.31 392.62 C-147.52 393.04 -149.67 393.59 -151.84 394.15 C-155.52 394.86 -159.1 394.67 -162.83 394.5 C-165.54 394.64 -166.96 395.36 -169.31 396.62 C-172.56 396.75 -172.56 396.75 -175.31 396.62 C-177.57 393.03 -177.52 390.06 -177.44 385.88 C-177.42 384.7 -177.4 383.53 -177.38 382.33 C-177.36 381.44 -177.34 380.54 -177.31 379.62 C-178.2 379.6 -179.1 379.57 -180.02 379.55 C-181.19 379.49 -182.36 379.43 -183.56 379.38 C-184.72 379.33 -185.88 379.28 -187.08 379.23 C-190.78 378.54 -191.98 377.51 -194.31 374.62 C-192.39 372.7 -188.99 373.45 -186.44 373.44 C-185.18 373.42 -183.93 373.41 -182.63 373.39 C-179.31 373.62 -179.31 373.62 -176.31 375.62 C-176.31 376.29 -176.31 376.94 -176.31 377.62 C-175.65 377.3 -174.99 376.96 -174.31 376.62 C-174.64 375.31 -174.97 373.99 -175.31 372.62 C-176.18 372.69 -177.06 372.76 -177.95 372.84 C-186.95 373.24 -194.01 372.21 -201.31 366.62 C-203 363.31 -203 363.31 -203.31 359.62 C-203.47 358.02 -203.64 356.42 -203.81 354.81 C-203.86 354.06 -203.92 353.31 -203.97 352.54 C-204.17 350.39 -204.17 350.39 -206.31 348.62 C-209.88 348.79 -209.88 348.79 -213.31 349.62 C-214.47 351.95 -214.47 353.4 -214.52 355.98 C-214.57 357.29 -214.57 357.29 -214.61 358.62 C-214.66 360.44 -214.71 362.26 -214.74 364.09 C-214.93 369.3 -215.38 373.13 -218.31 377.62 C-220.31 378.69 -220.31 378.69 -222.31 378.62 C-225.16 376.38 -225.99 374.19 -226.94 370.75 C-227.18 369.91 -227.42 369.06 -227.66 368.2 C-229.98 359.01 -229.75 349.88 -228.62 340.5 C-228.22 336.3 -228.53 333.13 -229.71 329.09 C-231.46 322.5 -232.14 316.04 -232.62 309.25 C-232.72 308.11 -232.82 306.98 -232.92 305.81 C-233.74 295.03 -233.74 295.03 -231.31 290.62 C-227.18 286.04 -221.93 285.21 -216.12 283.94 C-215.23 283.73 -214.33 283.51 -213.41 283.29 C-207.4 281.92 -201.46 281.09 -195.31 280.62 C-194.94 272.63 -197.63 266.01 -200.31 258.62 C-200.67 257.59 -201.03 256.56 -201.39 255.5 C-201.72 254.61 -202.04 253.73 -202.38 252.81 C-202.65 252.04 -202.93 251.27 -203.22 250.48 C-204.68 248 -205.56 247.48 -208.31 246.62 C-214.36 246.21 -219.59 247.17 -225.44 248.62 C-238.15 251.77 -238.15 251.77 -243.62 248.88 C-251.57 242.66 -257.76 233.47 -259.71 223.61 C-259.84 221.02 -259.67 219.86 -258.31 217.62 C-255.09 215.49 -251.84 213.86 -248.32 212.27 C-245.3 210.89 -245.3 210.89 -243.89 208.71 C-240.42 196.29 -249.87 182.44 -255.45 172 C-278.3 129.21 -278.3 129.21 -275.31 114.62 C-273.1 111.65 -271.57 110.26 -268.31 108.62 C-266.25 108.79 -264.19 108.95 -262.12 109.12 C-257.11 109.23 -257.11 109.23 -252.97 106.7 C-251.24 104.41 -249.76 102.09 -248.31 99.62 C-245.62 96.93 -244.12 97.03 -240.31 96.62 C-239.58 96.66 -238.86 96.7 -238.11 96.74 C-227.73 97.28 -217.03 94.26 -207.59 90 C-204.53 88.72 -202.34 88.19 -199.06 88 C-198.12 87.93 -197.17 87.86 -196.19 87.79 C-194.35 87.68 -192.5 87.6 -190.65 87.56 C-182.38 87.18 -175.68 84.2 -168.31 80.62 C-167.64 80.3 -166.97 79.98 -166.27 79.64 C-156.85 75.07 -156.85 75.07 -147.81 69.81 C-143.97 67.61 -140.07 66.9 -135.75 66.19 C-120.27 63.63 -100.77 56.71 -89.31 45.62 C-88.55 43.37 -88.55 43.37 -88.31 40.88 C-87.48 35.91 -86.25 32.73 -83.31 28.62 C-81.65 27.61 -79.99 26.61 -78.31 25.62 C-77.9 24.74 -77.49 23.85 -77.06 22.94 C-75.34 19.68 -73.74 17.74 -71.12 15.19 C-70.05 14.14 -70.05 14.14 -68.96 13.07 C-65.9 11.4 -63.86 11.35 -60.46 11.96 C-55.72 13.44 -51.74 16.44 -47.67 19.21 C-43.96 21.57 -41.47 23.01 -37 22.46 C-35.78 22.19 -34.57 21.91 -33.31 21.62 C-32.16 21.44 -31 21.25 -29.81 21.06 C-25.65 19.35 -23.59 17.16 -20.56 13.92 C-5.99 -0.97 -5.99 -0.97 0 0 Z \",fill:\"#0E1440\",transform:\"translate(928.3125,771.375)\"})),_path7||(_path7=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.41 0.5 0.83 0.99 1.25 1.5 C2.24 1.83 3.23 2.16 4.25 2.5 C5.94 4.15 7.6 5.82 9.25 7.5 C10.43 8.53 11.61 9.55 12.81 10.55 C25.12 20.89 25.12 20.89 29.12 26.86 C31.31 30.05 34.24 32.56 37.06 35.19 C38.25 36.5 38.25 36.5 38.25 38.5 C39.24 38.83 40.23 39.16 41.25 39.5 C42.62 41.06 42.62 41.06 44.02 43.05 C47.17 47.42 50.55 51.55 54 55.69 C59.16 61.91 64.19 68.22 69.07 74.67 C70.68 76.75 72.31 78.75 74.03 80.74 C76.25 83.5 76.25 83.5 76.25 85.5 C76.8 85.71 77.35 85.93 77.92 86.15 C81.03 87.95 83.16 90.45 85.5 93.12 C89.48 97.58 93.55 101.86 97.89 105.98 C99.25 107.5 99.25 107.5 99.25 109.5 C99.91 109.5 100.57 109.5 101.25 109.5 C102.94 111.14 102.94 111.14 104.81 113.31 C105.43 114.02 106.05 114.73 106.69 115.46 C108.25 117.5 108.25 117.5 109.25 120.5 C110.57 121.18 111.91 121.85 113.25 122.5 C115.5 124.5 115.5 124.5 117.25 126.5 C117.25 127.16 117.25 127.82 117.25 128.5 C117.89 128.77 118.53 129.04 119.19 129.31 C121.25 130.5 121.25 130.5 122.25 133.5 C123.12 133.9 123.12 133.9 124 134.31 C126.63 135.7 127.97 137.52 129.8 139.82 C131.33 141.6 132.96 143.05 134.75 144.56 C138.64 147.86 142.18 151.43 145.75 155.06 C154.97 164.58 154.97 164.58 167.13 169.07 C170.12 169.68 172.61 171.01 175.25 172.5 C175.25 173.16 175.25 173.82 175.25 174.5 C175.78 174.68 176.31 174.85 176.85 175.03 C178.43 175.56 180.01 176.09 181.59 176.61 C183.34 177.2 185.1 177.78 186.85 178.36 C189.49 179.23 192.12 180.11 194.75 181 C195.65 181.3 196.56 181.59 197.49 181.89 C198.35 182.19 199.21 182.48 200.09 182.78 C201.26 183.17 201.26 183.17 202.44 183.56 C204.25 184.5 204.25 184.5 205.25 187.5 C198.78 187.02 193.64 185.77 187.69 183.25 C179.32 179.86 170.91 177.04 162.25 174.5 C161.34 174.23 160.43 173.96 159.49 173.69 C150.81 171.14 142.12 168.61 133.43 166.12 C131.99 165.7 130.56 165.29 129.12 164.88 C128.11 164.58 128.11 164.58 127.07 164.28 C122.59 162.97 118.29 161.38 113.94 159.69 C109.63 158.1 106.38 157.29 101.81 157.56 C92.54 158.07 83.54 154.61 74.71 152.15 C71.91 151.41 69.12 150.88 66.25 150.5 C66.25 149.84 66.25 149.18 66.25 148.5 C61.33 148.33 57.75 148.25 53.25 150.5 C53.19 151.2 53.13 151.9 53.07 152.62 C52.98 153.53 52.9 154.44 52.81 155.38 C52.73 156.28 52.65 157.18 52.57 158.12 C52.25 160.5 52.25 160.5 51.25 162.5 C51.39 163.51 51.54 164.52 51.69 165.56 C52.31 169.93 52.33 174.1 52.25 178.5 C52.25 180.31 52.27 182.12 52.29 183.93 C52.66 231.76 52.66 231.76 35.25 250.5 C29.68 256.11 24.05 259.37 16.75 262.31 C15.85 262.69 14.95 263.07 14.03 263.47 C0.48 269.1 -15.41 271.93 -29.48 266.3 C-35.79 263.42 -42.56 260.15 -47.75 255.5 C-47.75 254.84 -47.75 254.18 -47.75 253.5 C-48.34 253.26 -48.93 253.01 -49.54 252.76 C-52.13 251.28 -53.4 249.75 -55.19 247.38 C-55.74 246.65 -56.3 245.93 -56.87 245.18 C-61.45 238.65 -64.81 232.42 -67.44 224.88 C-67.88 223.65 -67.88 223.65 -68.33 222.39 C-69.55 218.97 -70.74 215.54 -71.88 212.09 C-73.26 208 -74.32 205.25 -78.25 203.19 C-84.01 202.06 -90.13 201.63 -95.75 203.5 C-95.42 206.14 -95.09 208.78 -94.75 211.5 C-94.09 211.5 -93.43 211.5 -92.75 211.5 C-91.44 218.06 -92.22 222.33 -94.75 228.5 C-95.41 228.5 -96.07 228.5 -96.75 228.5 C-96.76 229.09 -96.78 229.68 -96.79 230.29 C-96.87 232.96 -96.97 235.64 -97.06 238.31 C-97.1 239.71 -97.1 239.71 -97.13 241.13 C-97.17 242.02 -97.2 242.91 -97.24 243.83 C-97.26 244.65 -97.29 245.48 -97.32 246.32 C-97.84 248.96 -98.63 249.89 -100.75 251.5 C-101.41 251.5 -102.07 251.5 -102.75 251.5 C-103.41 247.54 -104.07 243.58 -104.75 239.5 C-105.41 239.83 -106.07 240.16 -106.75 240.5 C-106.75 242.48 -106.75 244.46 -106.75 246.5 C-113.62 245.62 -113.62 245.62 -114.75 244.5 C-114.57 241.81 -114.13 239.17 -113.75 236.5 C-115.64 235.82 -115.64 235.82 -117.75 235.5 C-120.11 237.86 -120.24 239.28 -120.75 242.5 C-120.11 242.81 -119.47 243.12 -118.81 243.44 C-116.75 244.5 -116.75 244.5 -115.75 245.5 C-115.71 247.17 -115.71 248.83 -115.75 250.5 C-115.09 250.5 -114.43 250.5 -113.75 250.5 C-112.12 251.88 -112.12 251.88 -110.75 253.5 C-110.75 254.16 -110.75 254.82 -110.75 255.5 C-110.09 255.5 -109.43 255.5 -108.75 255.5 C-108.75 256.82 -108.75 258.14 -108.75 259.5 C-112.8 260.48 -116.59 260.58 -120.75 260.5 C-120.94 262.39 -120.94 262.39 -121.12 264.31 C-121.45 267.6 -121.82 268.6 -123.75 271.5 C-127.47 267.38 -127.18 263.71 -127.34 258.38 C-127.79 255.18 -128.72 253.92 -130.75 251.5 C-130.75 250.84 -130.75 250.18 -130.75 249.5 C-134.71 248.51 -134.71 248.51 -138.75 247.5 C-139.75 243.5 -139.75 243.5 -138.73 241.62 C-137.32 238.57 -138.19 236.83 -139.11 233.64 C-140.95 226.39 -141.1 219.63 -140.94 212.19 C-140.92 210.96 -140.91 209.73 -140.9 208.46 C-140.86 205.47 -140.81 202.49 -140.75 199.5 C-141.41 199.5 -142.07 199.5 -142.75 199.5 C-144.27 207 -145.17 214.37 -145.69 222 C-146.24 229.5 -147.04 236.85 -148.38 244.25 C-150.11 254.01 -150.03 263.62 -149.75 273.5 C-152.75 273.5 -152.75 273.5 -154.42 271.9 C-157.99 265.46 -155.93 256.04 -154.75 249.06 C-153.11 238.96 -153.58 228.71 -153.75 218.5 C-153.87 219.29 -153.99 220.07 -154.12 220.88 C-154.28 221.93 -154.45 222.98 -154.62 224.06 C-154.87 225.61 -154.87 225.61 -155.12 227.19 C-155.75 230.5 -155.75 230.5 -156.78 233.77 C-157.76 237.52 -157.99 240.59 -157.98 244.46 C-157.98 245.47 -157.98 245.47 -157.98 246.5 C-157.98 248.77 -157.96 251.04 -157.94 253.31 C-157.93 254.96 -157.92 256.61 -157.92 258.26 C-157.85 272.35 -157.58 286.42 -157.32 300.5 C-155.71 388.42 -155.71 388.42 -160.75 398.5 C-161.06 401.09 -161.26 403.68 -161.47 406.29 C-161.75 408.5 -161.75 408.5 -162.75 409.5 C-163.04 412.14 -163.2 414.79 -163.37 417.45 C-164.33 425.18 -167.36 432.69 -169.79 440.08 C-170.22 441.39 -170.64 442.7 -171.06 444.01 C-175.4 457.61 -180.44 472.11 -191.75 481.5 C-195.53 482.99 -197.3 483.09 -201.04 481.57 C-202.6 480.83 -204.13 480.05 -205.64 479.21 C-207.72 478.29 -207.72 478.29 -209.77 479.08 C-212.26 480.87 -213.84 482.87 -215.69 485.31 C-217.73 488 -219.68 490.43 -222.15 492.74 C-225.6 496.4 -227.92 500.48 -230.44 504.81 C-231.39 506.46 -232.35 508.1 -233.32 509.74 C-233.74 510.46 -234.16 511.18 -234.59 511.93 C-234.97 512.45 -235.36 512.97 -235.75 513.5 C-236.41 513.5 -237.07 513.5 -237.75 513.5 C-238.02 514.24 -238.3 514.97 -238.58 515.73 C-240.4 520.04 -243.03 523.75 -245.62 527.62 C-246.42 528.84 -246.42 528.84 -247.23 530.08 C-247.75 530.86 -248.27 531.64 -248.8 532.45 C-249.27 533.15 -249.74 533.86 -250.23 534.59 C-252.34 537.24 -254.87 538.9 -257.64 540.79 C-266.91 547.24 -271.82 556.02 -276.86 565.85 C-282.76 577.34 -282.76 577.34 -285.75 579.5 C-288.44 580.19 -288.44 580.19 -290.75 580.5 C-291.35 583.26 -291.75 585.66 -291.75 588.5 C-294.35 591.68 -296.77 593.43 -300.75 594.5 C-306.12 594.5 -309.78 590.7 -313.75 587.5 C-314.44 587.01 -315.14 586.52 -315.86 586.02 C-316.5 585.54 -317.15 585.06 -317.81 584.56 C-318.4 584.14 -318.99 583.72 -319.6 583.29 C-321.1 580.96 -320.9 579.29 -320.38 576.62 C-319.04 572.12 -316.89 567.96 -314.81 563.75 C-314.36 562.81 -313.9 561.86 -313.43 560.89 C-311.68 557.28 -309.98 553.84 -307.75 550.5 C-307.09 550.5 -306.43 550.5 -305.75 550.5 C-305.49 549.79 -305.24 549.08 -304.97 548.35 C-303.65 545.27 -302.03 542.67 -300.19 539.88 C-298.31 537.03 -296.83 534.74 -295.75 531.5 C-294.76 531.5 -293.77 531.5 -292.75 531.5 C-292.65 530.24 -292.54 528.98 -292.44 527.69 C-291.93 523.13 -290.84 518.92 -289.57 514.53 C-288.66 511.15 -287.98 507.75 -287.31 504.31 C-286.17 498.77 -284.58 494.38 -281.75 489.5 C-281.09 489.5 -280.43 489.5 -279.75 489.5 C-279.42 487.52 -279.09 485.54 -278.75 483.5 C-277.76 483.17 -276.77 482.84 -275.75 482.5 C-275 480.71 -275 480.71 -274.56 478.44 C-272.47 470.62 -268.48 463.63 -264.75 456.5 C-263.76 456.5 -262.77 456.5 -261.75 456.5 C-261.66 455.51 -261.56 454.52 -261.46 453.5 C-260.84 449.13 -259.18 445.47 -257.31 441.5 C-255.01 436.55 -253.14 431.8 -251.75 426.5 C-250.1 420.84 -248.28 416.25 -244.75 411.5 C-244.25 412.99 -244.25 412.99 -243.75 414.5 C-243.09 414.5 -242.43 414.5 -241.75 414.5 C-241.69 413.55 -241.63 412.6 -241.56 411.62 C-240.84 406.52 -238.59 401.78 -235.75 397.5 C-234.76 397.17 -233.77 396.84 -232.75 396.5 C-232.09 397.16 -231.43 397.82 -230.75 398.5 C-226.74 398.85 -224.23 398.49 -220.75 396.5 C-220.09 396.5 -219.43 396.5 -218.75 396.5 C-218.38 395.35 -218.01 394.19 -217.62 393 C-216.38 389.22 -214.99 385.51 -213.54 381.8 C-210.94 375.07 -208.9 368.5 -207.4 361.42 C-205.04 350.79 -205.04 350.79 -201.75 347.5 C-200.66 345.59 -200.66 345.59 -200.5 343.62 C-199.36 340.39 -197.65 339.24 -194.75 337.5 C-191.78 337.55 -191.78 337.55 -188.75 338.5 C-184.3 344.27 -182.14 351.38 -181.27 358.54 C-180.88 360.89 -180.88 360.89 -177.75 362.5 C-177.75 363.16 -177.75 363.82 -177.75 364.5 C-176.76 364.17 -175.77 363.84 -174.75 363.5 C-174.42 363.83 -174.09 364.16 -173.75 364.5 C-169.71 357.12 -168.12 347.93 -170.23 339.6 C-171.12 335.99 -171.26 332.32 -171.5 328.62 C-171.57 327.83 -171.64 327.04 -171.71 326.23 C-172.04 321.05 -171.4 318.1 -168.75 313.5 C-167.87 311.11 -167.87 311.11 -167.75 308.5 C-168.92 306.22 -168.92 306.22 -170.65 304.04 C-174.66 297.74 -174.54 292.19 -174.37 284.89 C-174.36 283.61 -174.36 282.32 -174.35 281 C-174.34 277.6 -174.28 274.21 -174.22 270.82 C-174.18 268.08 -174.16 265.34 -174.14 262.6 C-174.08 252.07 -173.97 241.54 -173.4 231.01 C-173.34 229.92 -173.28 228.82 -173.22 227.69 C-172.55 223.14 -170.76 219.44 -168.61 215.41 C-166.48 208.22 -171.55 199.72 -174.36 193.12 C-177.02 186.59 -177.24 181.42 -175.75 174.5 C-175.5 171.42 -175.31 168.33 -175.13 165.24 C-174.75 162.5 -174.75 162.5 -172.75 159.5 C-172.51 157.69 -172.28 155.88 -172.09 154.06 C-171.1 146.61 -169.31 139.25 -167.12 132.06 C-165.49 126.41 -165.35 120.83 -165.25 114.98 C-164.66 110.9 -163.19 108.77 -160.75 105.5 C-160.05 103.31 -160.05 103.31 -159.75 101.5 C-159.42 101.17 -159.09 100.84 -158.75 100.5 C-159.41 99.84 -160.07 99.18 -160.75 98.5 C-159.43 98.17 -158.11 97.84 -156.75 97.5 C-156.75 96.84 -156.75 96.18 -156.75 95.5 C-151.46 92.12 -146.83 90.58 -140.69 89.44 C-135.18 88.39 -130.77 87.1 -125.75 84.5 C-122.88 84.81 -122.88 84.81 -120.75 85.5 C-120.72 86.98 -120.7 88.46 -120.69 89.94 C-120.68 90.76 -120.66 91.58 -120.65 92.43 C-120.75 94.5 -120.75 94.5 -121.75 95.5 C-121.75 97.39 -121.75 99.28 -121.72 101.17 C-121.75 103.57 -121.97 105.89 -122.25 108.28 C-122.34 109.08 -122.44 109.87 -122.53 110.69 C-122.6 111.29 -122.68 111.88 -122.75 112.5 C-122.55 111.7 -122.35 110.91 -122.14 110.08 C-121.22 106.47 -120.3 102.86 -119.38 99.25 C-118.9 97.37 -118.9 97.37 -118.41 95.45 C-118.1 94.24 -117.8 93.04 -117.48 91.8 C-117.19 90.69 -116.91 89.58 -116.62 88.43 C-115.87 85.91 -115.02 83.79 -113.75 81.5 C-112.1 81.5 -110.45 81.5 -108.75 81.5 C-108.81 80.05 -108.81 80.05 -108.88 78.57 C-108.86 66.38 -103.88 53.18 -96.75 43.5 C-96.2 42.74 -95.65 41.99 -95.09 41.21 C-87.81 32.67 -75.2 29.49 -64.47 27.82 C-62.72 27.66 -62.72 27.66 -61.75 26.5 C-61.43 24.94 -61.14 23.38 -60.88 21.81 C-59.19 13.58 -59.19 13.58 -56.75 10.5 C-46.39 4.14 -10.53 -9.02 0 0 Z \",fill:\"#452354\",transform:\"translate(639.75,118.5)\"})),_path8||(_path8=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.59 2.01 1.17 2.03 1.77 2.04 C8.92 2.44 15.34 4.05 22.1 6.27 C26.51 7.63 30.23 8.08 34.85 7.93 C41.31 7.79 46.43 9.39 52.44 11.62 C54.55 12.37 56.66 13.11 58.77 13.85 C59.82 14.22 60.87 14.58 61.94 14.96 C66.44 16.49 70.99 17.79 75.56 19.06 C77.28 19.54 79 20.03 80.71 20.51 C81.57 20.75 82.43 20.99 83.32 21.24 C95.61 24.73 107.84 28.45 119.88 32.75 C120.68 33.03 121.49 33.31 122.33 33.6 C124.25 34.31 126.13 35.15 128 36 C128.33 36.99 128.66 37.98 129 39 C127.68 39.99 126.36 40.98 125 42 C125.25 43.09 125.25 43.09 125.5 44.21 C125.97 46.82 126.07 49.06 125.99 51.7 C125.7 65.47 127.06 77.74 130.19 91.12 C131.69 98.27 131.46 104.1 127.5 110.38 C127 110.91 126.51 111.45 126 112 C125.34 112 124.68 112 124 112 C123.63 112.96 123.63 112.96 123.25 113.94 C122 116 122 116 120.31 116.88 C116.99 117.05 114.17 115.92 111 115 C109.51 115.5 109.51 115.5 108 116 C108.99 117.32 109.98 118.64 111 120 C107.53 122.96 104.11 125.04 100 127 C98.32 128.68 98.8 130.89 98.69 133.19 C98.15 139.58 96.15 142.85 91.62 147.38 C89 149 89 149 86.06 148.94 C81.82 149.02 79.81 151.08 77 154 C75.49 155.73 74.03 157.48 72.58 159.26 C70.95 161.05 69.25 162.37 67.31 163.81 C63.54 166.88 62.87 170.07 61.73 174.67 C60.26 179.36 56.66 181.57 52.69 184.12 C49.12 187.94 49.43 190.42 49.59 195.48 C49.86 198.24 49.86 198.24 52 201 C54.56 201.73 54.56 201.73 57 202 C57 202.66 57 203.32 57 204 C57.99 204 58.98 204 60 204 C60 203.01 60 202.02 60 201 C62.31 201 64.62 201 67 201 C67.33 201.66 67.66 202.32 68 203 C69.92 203.54 69.92 203.54 72.19 203.88 C76.99 204.83 80.48 206.48 84 210 C85.37 223.44 80.99 232.26 73 242.57 C70.33 246.03 68.33 249.08 66.88 253.25 C65.86 255.93 65.4 256.77 62.88 258.21 C59.47 259.4 56.61 260 53 260 C52.83 260.63 52.66 261.26 52.48 261.91 C48.46 276.13 40.58 284.45 30.31 294.81 C29.78 295.35 29.24 295.89 28.69 296.45 C26.11 299.02 23.5 301.46 20.67 303.76 C17.97 305.72 17.97 305.72 17 308 C16.95 309.87 16.91 311.75 16.88 313.62 C16.35 320.44 13.99 323.55 9 328 C8.47 328.52 7.95 329.04 7.4 329.57 C2.27 334.38 -3.89 337.6 -10 341 C-11.34 341.77 -11.34 341.77 -12.7 342.55 C-18.74 346 -18.74 346 -21 346 C-21 346.66 -21 347.32 -21 348 C-24.14 352.14 -27.59 352.91 -32.5 353.69 C-33.82 353.92 -35.15 354.15 -36.47 354.39 C-38.22 354.69 -38.22 354.69 -40 355 C-40.69 355.18 -41.38 355.37 -42.1 355.56 C-44.7 356.16 -47.27 356.24 -49.94 356.38 C-55.8 356.78 -61.22 357.88 -66.91 359.3 C-70.6 360.13 -74.21 360.53 -77.98 360.79 C-80.2 360.95 -80.2 360.95 -83 362 C-93.63 362.78 -102.62 362.22 -110.94 355.12 C-116.61 349.87 -118.33 345.33 -119.25 337.75 C-120.52 328.79 -123.4 321.05 -127.15 312.87 C-128 311.01 -128.78 309.12 -129.55 307.23 C-130.75 304.56 -131.79 302.66 -133.62 300.44 C-136.6 296.62 -139.29 292.67 -141.94 288.62 C-142.35 288.01 -142.77 287.39 -143.19 286.75 C-144.19 285.2 -145.1 283.61 -146 282 C-145.67 281.34 -145.34 280.68 -145 280 C-136.8 278.65 -128.29 278.87 -120 279 C-120 278.34 -120 277.68 -120 277 C-122.64 277.33 -125.28 277.66 -128 278 C-128 277.34 -128 276.68 -128 276 C-135.78 275.81 -135.78 275.81 -143.5 276.62 C-146.61 277.09 -147.39 276.73 -150 275 C-158.84 263.8 -158.84 263.8 -158.19 257.44 C-156.4 252.26 -156.4 252.26 -154 250 C-151.32 249.75 -149.03 249.71 -146.38 249.88 C-141.99 250.1 -138.08 250.13 -133.8 249.05 C-127.88 247.6 -121.94 247.5 -115.88 247.31 C-114.16 247.24 -114.16 247.24 -112.42 247.17 C-106.77 246.97 -101.59 247.11 -96 248 C-92.37 248.2 -88.75 248.23 -85.12 248.25 C-83.71 248.28 -83.71 248.28 -82.27 248.31 C-75.97 248.35 -70.83 247.39 -65 245 C-65 244.01 -65 243.02 -65 242 C-69.22 242.39 -69.22 242.39 -72.73 244.53 C-75.91 246.59 -78.84 246.36 -82.5 246.25 C-83.81 246.23 -85.12 246.22 -86.47 246.2 C-89.84 246.09 -93.17 245.81 -96.53 245.5 C-103.34 244.91 -110.14 244.78 -116.97 244.76 C-119.06 244.75 -121.15 244.72 -123.24 244.69 C-130.45 244.63 -136.83 245.15 -143.72 247.33 C-146.59 248.17 -149.2 248.3 -152.19 248.19 C-153.57 248.15 -153.57 248.15 -154.98 248.11 C-155.65 248.07 -156.31 248.04 -157 248 C-157 247.34 -157 246.68 -157 246 C-157.99 246 -158.98 246 -160 246 C-162.91 239.2 -164.66 234.31 -163 227 C-162.5 227.99 -162.5 227.99 -162 229 C-161.34 229 -160.68 229 -160 229 C-159.71 228.36 -159.42 227.72 -159.12 227.06 C-158 225 -158 225 -156 224 C-155.11 224.47 -154.23 224.95 -153.31 225.44 C-149.47 227.25 -147.2 227.62 -143 227 C-140.53 224.64 -140.53 224.64 -139 222 C-140.32 222 -141.64 222 -143 222 C-143.47 222.52 -143.95 223.03 -144.44 223.56 C-144.95 224.04 -145.47 224.51 -146 225 C-149.48 224.74 -151.05 223.97 -154 222 C-155.73 221.81 -155.73 221.81 -157.5 221.62 C-161 221 -161 221 -162.94 219.44 C-164.18 216.58 -163.92 214.41 -163.78 211.34 C-164.15 207.4 -166.02 204.15 -167.75 200.63 C-169.26 197.46 -170.17 194.4 -171 191 C-171.66 191 -172.32 191 -173 191 C-177.79 185.59 -182 180.42 -182 173 C-181.67 173.66 -181.34 174.32 -181 175 C-180.34 175 -179.68 175 -179 175 C-177.62 176.25 -177.62 176.25 -176 178 C-175.28 178.66 -174.56 179.32 -173.81 180 C-172 182 -172 182 -172 185 C-171.34 185 -170.68 185 -170 185 C-169.67 185.99 -169.34 186.98 -169 188 C-167.04 189.17 -167.04 189.17 -164.69 190.06 C-161.73 191.28 -158.85 192.54 -156 194 C-156 192.68 -156 191.36 -156 190 C-156.78 189.69 -157.57 189.38 -158.38 189.06 C-161 188 -161 188 -163 187 C-163 186.34 -163 185.68 -163 185 C-163.99 184.67 -164.98 184.34 -166 184 C-166 183.34 -166 182.68 -166 182 C-166.99 181.67 -167.98 181.34 -169 181 C-170.54 179.19 -170.54 179.19 -172.06 177 C-174.08 173.98 -174.08 173.98 -177 172 C-177 170.68 -177 169.36 -177 168 C-177.64 167.73 -178.28 167.46 -178.94 167.19 C-181 166 -181 166 -182 163 C-183.14 153.99 -181.71 148.44 -176.81 140.88 C-171.36 132.21 -169.58 121.77 -167.42 111.89 C-167.08 110.36 -166.71 108.84 -166.34 107.32 C-164.86 100.98 -164.64 94.64 -164.52 88.15 C-164.37 83.76 -164.1 81.98 -161 79 C-159.22 73.48 -158.79 68.78 -159 63 C-159.66 63 -160.32 63 -161 63 C-162.62 60.43 -163.04 59.32 -162.62 56.25 C-162.32 55.14 -162.32 55.14 -162 54 C-156.4 52.13 -149.65 52.06 -144.06 54.12 C-137.3 58.27 -136.19 64.2 -134.07 71.48 C-131.67 79.39 -129.12 87.41 -124 94 C-123.41 94.78 -122.82 95.56 -122.22 96.36 C-115.86 104.62 -109.8 110.09 -100.25 114.31 C-99.5 114.66 -98.74 115 -97.96 115.36 C-85.79 120.91 -70.78 121 -58.18 116.32 C-57.13 115.88 -56.08 115.45 -55 115 C-53.67 114.5 -52.34 113.99 -51.01 113.49 C-38.92 108.76 -29 101.89 -23 90 C-17.83 77.96 -17.83 77.96 -15.68 65.15 C-15.64 64.21 -15.6 63.28 -15.56 62.32 C-15.52 61.35 -15.48 60.38 -15.44 59.38 C-15.37 57.95 -15.37 57.95 -15.31 56.5 C-15.07 51.04 -14.97 45.61 -15.03 40.14 C-14.99 37.36 -14.57 34.72 -14 32 C-14.66 31.67 -15.32 31.34 -16 31 C-15.67 30.67 -15.34 30.34 -15 30 C-14.67 25.56 -14.92 21.15 -15.56 16.75 C-15.97 13.29 -15.93 11.29 -15 8 C-14.63 6.17 -14.63 6.17 -14.25 4.31 C-13 1 -13 1 -10.75 -0.44 C-6.99 -1.21 -3.52 -1.76 0 0 Z \",fill:\"#867396\",transform:\"translate(706,267)\"})),_path9||(_path9=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 -0.03 1.52 -0.05 2.3 -0.08 C5.48 0.36 7.17 1.24 9.69 3.25 C11.2 6.28 11.2 6.28 12.38 9.75 C13.6 13.3 14.6 16.11 16.69 19.25 C19.16 18.82 20.4 18.56 22.12 16.69 C23.69 15.25 23.69 15.25 26.19 14.81 C28.69 15.25 28.69 15.25 30.33 16.96 C31.94 19.68 32.03 21.18 31.94 24.31 C31.91 25.28 31.89 26.26 31.86 27.26 C31.64 30.99 31.29 34.7 30.91 38.42 C30.67 41.46 30.66 44.45 30.69 47.5 C30.73 51.89 30.55 55.95 29.69 60.25 C29.36 60.58 29.03 60.91 28.69 61.25 C28.69 63.16 28.69 65.07 28.72 66.98 C28.69 69.25 28.69 69.25 28.19 73.06 C27.39 79.95 27.58 86.88 27.62 93.81 C27.63 95.22 27.63 96.62 27.64 98.03 C27.65 101.43 27.67 104.84 27.69 108.25 C29.16 105.31 29.19 102.38 29.56 99.12 C30.75 89.73 33.73 78.21 40.69 71.25 C42.96 71.26 45.23 71.36 47.5 71.5 C48.74 71.57 49.99 71.63 51.27 71.7 C56.36 72.52 56.36 72.52 58.69 75.25 C59.69 77.99 60.26 80.77 60.81 83.62 C61.12 85.13 61.44 86.64 61.76 88.15 C61.91 88.86 62.06 89.57 62.21 90.3 C62.8 92.72 63.74 94.95 64.69 97.25 C64.69 98.24 64.69 99.23 64.69 100.25 C65.68 100.58 66.67 100.91 67.69 101.25 C68.53 103.62 69.14 105.81 69.69 108.25 C69.86 109.01 70.04 109.76 70.22 110.54 C70.91 113.56 71.56 116.58 72.13 119.63 C72.78 122.67 73.68 125.59 74.56 128.56 C76.49 135.37 77.36 142.16 78.12 149.19 C79.3 159.82 81.63 169.14 85.4 179.14 C85.65 179.8 85.89 180.45 86.15 181.12 C86.4 181.8 86.65 182.47 86.92 183.16 C87.71 185.3 88.46 187.46 89.2 189.62 C92.43 198.97 96.19 207.48 101.22 215.99 C104.67 221.84 107.72 227.92 110.79 233.98 C112.83 237.93 114.88 241.66 117.52 245.25 C119.69 248.25 119.69 248.25 119.69 250.25 C120.26 250.46 120.84 250.66 121.44 250.88 C123.89 252.38 125 253.94 126.5 256.36 C127.93 258.64 129.5 260.81 131.06 263 C133.33 266.22 135.45 269.47 137.44 272.88 C141.01 278.97 145.07 284.72 149.1 290.52 C154.74 298.62 159.44 306.15 162.68 315.49 C163.6 318.01 164.65 320.39 165.81 322.81 C170.23 332.62 170.26 343.49 170.9 354.06 C171.01 355.72 171.01 355.72 171.12 357.43 C171.19 358.43 171.25 359.42 171.31 360.45 C171.56 363.25 171.56 363.25 172.72 365.63 C174 369.11 173.87 372.33 173.73 375.97 C173.71 376.71 173.69 377.46 173.67 378.22 C173.63 379.79 173.58 381.35 173.52 382.92 C173.44 385.28 173.38 387.64 173.32 390 C173.09 397.7 172.56 405.1 171.13 412.7 C170.5 416.32 170.37 419.83 170.25 423.5 C168.82 451.87 155.57 473.42 135.69 493.25 C134.31 494.64 132.92 496.04 131.54 497.43 C129.99 498.99 128.43 500.56 126.88 502.12 C126.11 502.9 125.34 503.68 124.54 504.48 C123.78 505.25 123.02 506.01 122.23 506.8 C121.55 507.49 120.87 508.18 120.17 508.88 C119.35 509.66 118.53 510.44 117.69 511.25 C117.16 511.82 116.63 512.39 116.09 512.98 C111.45 517.63 108.15 519.06 101.61 519.15 C100.08 519.12 100.08 519.12 98.51 519.09 C97.41 519.1 96.3 519.1 95.16 519.11 C91.47 519.12 87.78 519.08 84.09 519.04 C81.43 519.04 78.78 519.04 76.13 519.05 C70.43 519.05 64.73 519.03 59.02 518.99 C50.78 518.93 42.53 518.91 34.29 518.91 C20.91 518.89 7.53 518.84 -5.85 518.78 C-18.84 518.71 -31.83 518.66 -44.82 518.63 C-45.62 518.63 -46.43 518.63 -47.25 518.63 C-51.27 518.62 -55.29 518.61 -59.31 518.6 C-92.65 518.53 -125.98 518.41 -159.31 518.25 C-159.31 517.26 -159.31 516.27 -159.31 515.25 C-153.57 511.74 -150.33 510.83 -143.71 512.18 C-140.33 512.28 -138.88 511.42 -136.31 509.25 C-135.25 506.22 -135.25 506.22 -134.81 502.81 C-133.88 496.8 -133.88 496.8 -130.88 493.89 C-128.22 492.19 -126.45 491.5 -123.31 491.25 C-122.32 491.58 -121.33 491.91 -120.31 492.25 C-120.31 491.59 -120.31 490.93 -120.31 490.25 C-115.67 489.13 -111.4 488.22 -106.62 488.06 C-100.56 487.6 -95.78 484.61 -90.61 481.65 C-86.88 480.06 -85.18 480.34 -81.31 481.25 C-79.69 479.96 -79.69 479.96 -78.31 478.25 C-77.47 477.92 -76.62 477.59 -75.75 477.25 C-73 476.39 -73 476.39 -71.31 473.25 C-69.4 472.41 -67.48 471.87 -65.48 471.29 C-62.43 469.83 -60.61 467.72 -58.31 465.25 C-57.02 463.87 -57.02 463.87 -55.7 462.45 C-54.8 461.47 -53.9 460.49 -53 459.5 C-52.52 458.98 -52.05 458.46 -51.56 457.92 C-48.02 454.05 -44.53 450.13 -41.07 446.19 C-39.31 444.25 -39.31 444.25 -37.14 442.18 C-34.67 439.57 -34.46 437.82 -34.31 434.25 C-34.62 433.32 -34.93 432.39 -35.25 431.44 C-37.67 424.18 -36.64 419.29 -33.38 412.38 C-29.48 404.8 -24.34 398.28 -18.31 392.25 C-17.01 391.95 -15.7 391.71 -14.38 391.5 C-11.18 390.73 -10.53 390.53 -8.44 387.81 C-1.29 365.17 -7.02 342.79 -13.66 320.83 C-19.2 302.38 -19.2 302.38 -17.31 294.25 C-15.75 292.29 -15.75 292.29 -13.88 290.88 C-12.95 290.15 -12.95 290.15 -12 289.41 C-7.98 286.64 -4.09 286.51 0.69 287.25 C2.66 288.38 4.3 289.69 6.07 291.12 C7.8 292.49 7.8 292.49 10.81 292.88 C15.41 291.88 17.32 288.86 20.26 285.39 C20.79 284.77 21.33 284.14 21.88 283.5 C22.36 282.91 22.85 282.31 23.36 281.7 C25.53 279.33 26.86 279.23 30.12 278.81 C36.72 278.91 42.87 282.55 47.55 287.03 C48.54 288.19 49.5 289.38 50.42 290.59 C51.81 292.49 51.81 292.49 54.31 294.81 C56.69 297.25 56.69 297.25 58.81 300.5 C60.46 303.51 60.46 303.51 63.69 304.25 C63.03 304.58 62.37 304.91 61.69 305.25 C62.43 305.92 63.18 306.6 63.95 307.29 C66.95 310.3 68.72 313.75 70.5 317.56 C71.19 319 71.88 320.44 72.58 321.88 C72.93 322.6 73.28 323.33 73.63 324.09 C74.63 326.14 75.67 328.17 76.73 330.19 C90.29 356.11 97.03 383.89 91.69 413.25 C91.03 413.25 90.37 413.25 89.69 413.25 C89.74 414.37 89.79 415.5 89.84 416.66 C89.83 421.61 88.67 426.01 87.31 430.75 C86.87 432.36 86.42 433.98 85.98 435.59 C85.76 436.37 85.54 437.14 85.32 437.94 C84.38 441.36 83.53 444.8 82.69 448.25 C82.03 448.25 81.37 448.25 80.69 448.25 C80.58 448.97 80.47 449.69 80.35 450.43 C78.29 459.19 71.97 467.12 66.69 474.25 C66.05 475.12 65.41 475.98 64.76 476.88 C61.21 481.59 61.21 481.59 59.69 483.25 C59.03 483.25 58.37 483.25 57.69 483.25 C57.69 484.9 57.69 486.55 57.69 488.25 C58.7 488.29 59.71 488.33 60.75 488.38 C64.96 488.94 67.03 491.06 70.07 493.87 C72.29 495.77 73.76 496.33 76.69 496.25 C81.6 494.26 84.29 491.82 87.56 487.69 C88.34 486.72 89.12 485.75 89.93 484.75 C91.88 482.49 91.88 482.49 91.69 480.25 C92.35 479.59 93.01 478.93 93.69 478.25 C95.55 475 96.65 471.55 97.81 468 C98.17 466.92 98.52 465.84 98.88 464.73 C99.15 463.91 99.41 463.09 99.69 462.25 C100.35 462.25 101.01 462.25 101.69 462.25 C101.8 461.61 101.92 460.98 102.04 460.32 C102.91 456.2 103.98 452.14 105.06 448.06 C105.29 447.22 105.51 446.37 105.74 445.5 C107.27 439.72 108.91 433.97 110.69 428.25 C111.35 428.25 112.01 428.25 112.69 428.25 C112.63 426.98 112.63 426.98 112.56 425.69 C112.69 422.25 112.69 422.25 113.62 419.06 C114.76 414.98 115.36 411.08 115.81 406.88 C115.9 406.1 115.98 405.33 116.07 404.53 C116.61 399.02 116.9 393.54 116.94 388 C116.95 387.31 116.96 386.62 116.97 385.91 C116.94 381.61 116.05 378.29 114.69 374.25 C114.53 370.89 114.53 370.89 114.62 367.5 C114.9 363.21 114.9 363.21 113.69 359.25 C113.73 357.43 113.78 355.61 113.85 353.79 C114.36 340.07 110.1 329.3 103.69 317.25 C102.73 315.25 101.77 313.25 100.81 311.25 C98.84 307.25 96.68 303.75 94 300.19 C91.51 296.8 90.24 294.17 89.38 290.06 C88.03 284.18 85.14 280.08 81.73 275.23 C78.44 270.51 75.68 265.68 73.06 260.56 C69.87 254.33 66.42 248.53 62.41 242.77 C59.38 238.34 57.32 234.36 55.69 229.25 C55.13 228 54.57 226.75 54 225.5 C53.57 224.43 53.13 223.36 52.69 222.25 C53.02 221.59 53.35 220.93 53.69 220.25 C53.03 219.92 52.37 219.59 51.69 219.25 C52.02 218.59 52.35 217.93 52.69 217.25 C52.03 216.92 51.37 216.59 50.69 216.25 C51.02 215.59 51.35 214.93 51.69 214.25 C51.03 213.92 50.37 213.59 49.69 213.25 C50.02 212.59 50.35 211.93 50.69 211.25 C50.03 210.92 49.37 210.59 48.69 210.25 C49.02 209.59 49.35 208.93 49.69 208.25 C49.03 207.92 48.37 207.59 47.69 207.25 C48.02 206.59 48.35 205.93 48.69 205.25 C48.03 204.92 47.37 204.59 46.69 204.25 C46.56 203.16 46.44 202.06 46.31 200.94 C45.96 197.26 45.96 197.26 43.94 194.75 C41.76 192.93 41.76 192.93 39.05 193.66 C38.27 193.85 37.49 194.05 36.69 194.25 C33.54 206.3 33.54 206.3 34.75 218.5 C35.69 222.25 35.69 222.25 34.69 225.25 C34.05 229.93 34.02 233.92 36.69 237.94 C38.71 240.43 40.89 242.22 43.5 244.06 C51.61 249.84 58.05 259.02 61.69 268.25 C62.08 271.22 61.77 272.35 60.69 275.25 C58.34 278.05 56.89 278.22 53.25 278.69 C49 278.17 47.62 277.34 44.69 274.25 C43.73 272.63 42.77 270.99 41.89 269.32 C40.47 266.88 38.79 264.74 37.06 262.5 C29.79 252.65 23.96 241.3 19.74 229.82 C18.28 226.25 16.51 222.87 14.75 219.44 C10.59 211.26 7.24 202.91 4.33 194.2 C1.44 185.76 -1.75 176.53 -10.31 172.25 C-12.38 172.26 -14.44 172.3 -16.5 172.38 C-22.02 172.39 -25.7 172.36 -30.31 169.25 C-32.84 164.36 -33.77 160.05 -34.19 154.56 C-34.83 147.8 -36.14 141.43 -37.88 134.88 C-42.45 117.32 -42.45 117.32 -39.91 109.42 C-37.86 102.25 -37.34 94.97 -36.75 87.56 C-35.33 70.19 -35.33 70.19 -33.31 64.25 C-30.75 62.38 -30.75 62.38 -28.31 61.25 C-27.14 58.9 -26.99 56.74 -26.72 54.15 C-25.78 45.2 -23.9 36.88 -21.31 28.25 C-21 27.16 -20.69 26.08 -20.38 24.96 C-17.55 15.66 -12.78 8.44 -6.31 1.25 C-4.01 0.1 -2.56 0.05 0 0 Z \",fill:\"#401D4F\",transform:\"translate(495.3125,761.75)\"})),_path10||(_path10=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.78 4.88 1.54 7.32 2.29 C11.85 3.71 16.37 5.17 20.88 6.65 C22.64 7.23 24.39 7.8 26.15 8.36 C39.05 12.54 49.97 18.25 61.26 25.72 C62.28 26.37 63.29 27.02 64.34 27.69 C66.68 29.2 69.01 30.73 71.32 32.28 C72.09 32.79 72.86 33.29 73.65 33.81 C74.74 34.54 74.74 34.54 75.86 35.29 C76.49 35.71 77.12 36.13 77.78 36.57 C79.26 37.72 79.26 37.72 80.26 39.72 C81.58 40.38 82.9 41.04 84.26 41.72 C84.26 106.4 84.26 171.08 84.26 237.72 C-5.17 237.72 -94.6 237.72 -186.74 237.72 C-186.74 227.74 -186.74 227.74 -186.25 223.38 C-185.69 217.64 -185.59 211.97 -185.62 206.22 C-185.62 205.18 -185.62 204.14 -185.62 203.06 C-185.66 195.97 -185.88 188.91 -186.39 181.84 C-187.54 164.65 -186.46 147.34 -185.74 130.16 C-185.55 125.55 -185.36 120.95 -185.18 116.34 C-185.13 115.24 -185.09 114.14 -185.05 113.01 C-184.76 105.33 -184.68 97.68 -184.82 90 C-184.64 82.37 -181.9 77.49 -177.21 71.68 C-175.79 69.78 -174.84 68 -173.87 65.84 C-168.82 55.39 -160.18 48.39 -151.43 41.15 C-148.19 38.41 -145.11 35.48 -142.02 32.56 C-139.43 30.47 -136.76 29.11 -133.74 27.72 C-133.74 26.73 -133.74 25.74 -133.74 24.72 C-133.08 24.72 -132.42 24.72 -131.74 24.72 C-131.74 24.06 -131.74 23.4 -131.74 22.72 C-131.02 22.81 -130.3 22.9 -129.56 23 C-125.69 22.62 -124.36 20.97 -121.62 18.28 C-117.01 13.81 -117.01 13.81 -113.74 12.72 C-113.16 12.13 -112.58 11.54 -111.98 10.94 C-109.25 8.23 -106.22 6.26 -102.99 4.22 C-102.41 3.84 -101.83 3.46 -101.23 3.07 C-99.42 1.92 -97.59 0.81 -95.74 -0.28 C-95.14 -0.65 -94.54 -1.01 -93.93 -1.39 C-88.11 -4.66 -82.31 -5.38 -75.74 -6.03 C-73.98 -6.21 -73.98 -6.21 -72.19 -6.39 C-46.54 -8.71 -24.68 -7.88 0 0 Z \",fill:\"#8A7896\",transform:\"translate(1195.7413330078125,1042.2808227539063)\"})),_path11||(_path11=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.13 5.82 -9.13 9.66 -15 13.56 C-23.2 18.97 -23.2 18.97 -30 26 C-30.13 28.87 -30.13 28.87 -29 31 C-19.91 32.1 -11 33.07 -2.12 30.45 C2.18 29.54 6.62 29.86 11 30 C11.66 31.32 12.32 32.64 13 34 C5.85 35.13 -1.14 36.06 -8.38 36.38 C-18.8 36.99 -33.94 38.76 -41.57 46.62 C-43 48 -43 48 -45 48 C-45.18 52.55 -45 55.88 -43 60 C-38.46 60.08 -34.45 60.02 -30 59 C-29.01 59 -28.02 59 -27 59 C-26.32 58.79 -25.64 58.59 -24.94 58.38 C-24.3 58.25 -23.66 58.13 -23 58 C-22.34 58.66 -21.68 59.32 -21 60 C-22.04 60.34 -23.07 60.68 -24.14 61.02 C-25.51 61.47 -26.88 61.92 -28.25 62.38 C-28.93 62.6 -29.61 62.82 -30.32 63.05 C-36.51 64.67 -36.51 64.67 -41.01 68.7 C-41.23 69.36 -41.46 70.01 -41.69 70.69 C-41.93 71.4 -42.17 72.11 -42.42 72.84 C-43.12 75.25 -43.12 75.25 -43.44 78.81 C-44 82 -44 82 -45.73 83.64 C-48.25 85.15 -50.03 85.52 -52.94 85.88 C-64.97 87.86 -73.59 91.63 -80.8 101.45 C-87.69 112 -90.45 124.61 -92 137 C-93.65 137 -95.3 137 -97 137 C-97.24 138.06 -97.48 139.13 -97.73 140.23 C-99.66 148.58 -101.72 156.83 -104.17 165.05 C-104.91 167.69 -105.51 170.3 -106 173 C-106.33 173 -106.66 173 -107 173 C-106.67 165.41 -106.34 157.82 -106 150 C-105.34 150 -104.68 150 -104 150 C-104.33 147.03 -104.66 144.06 -105 141 C-109.69 141.52 -109.69 141.52 -114.18 142.88 C-118.8 144.71 -123.61 145.86 -128.41 147.14 C-132.38 148.22 -136.21 149.35 -140 151 C-140 151.66 -140 152.32 -140 153 C-140.66 153.33 -141.32 153.66 -142 154 C-142 154.99 -142 155.98 -142 157 C-142.59 158.97 -142.59 158.97 -143.38 161.06 C-143.63 161.75 -143.89 162.45 -144.15 163.16 C-145 165 -145 165 -147 167 C-147.23 169.31 -147.36 171.62 -147.44 173.94 C-147.71 179.62 -148.52 184.74 -150.17 190.18 C-152.29 197.37 -153.88 204.79 -154.56 212.25 C-155 216 -155 216 -157 218 C-157.28 220.53 -157.47 222.97 -157.56 225.5 C-157.88 232.76 -157.88 232.76 -159 235 C-159.55 241.12 -157.96 245.44 -155.62 250.94 C-149.41 265.83 -149.41 265.83 -150.86 271.17 C-151.34 272.16 -151.82 273.16 -152.31 274.19 C-158.74 287.63 -156.32 305.46 -156.41 320.07 C-156.42 322.82 -156.46 325.57 -156.51 328.32 C-156.58 332.34 -156.6 336.34 -156.62 340.36 C-156.66 342.19 -156.66 342.19 -156.71 344.05 C-156.69 351.39 -155.65 355.89 -151.19 361.8 C-150 364 -150 364 -150.22 366.61 C-151 369 -151 369 -152.58 371.75 C-154.47 376.07 -154.15 379.44 -153.75 384.06 C-153.67 385.25 -153.67 385.25 -153.59 386.46 C-153.31 390.39 -152.8 394.14 -152 398 C-151.45 405.02 -151.77 411.62 -155 418 C-156.61 419.75 -156.61 419.75 -158 421 C-158.99 420.67 -159.98 420.34 -161 420 C-161 419.34 -161 418.68 -161 418 C-161.63 417.8 -162.26 417.59 -162.91 417.38 C-165 416 -165 416 -165.91 413.24 C-166.2 411.58 -166.2 411.58 -166.5 409.88 C-167.67 404.25 -168.78 399.79 -172 395 C-174.93 393.59 -174.93 393.59 -178 394 C-180.4 394.99 -180.4 394.99 -182 397 C-182.38 398.66 -182.71 400.32 -183 402 C-184.53 404.4 -185.45 405.72 -188 407 C-188.27 408.64 -188.53 410.28 -188.72 411.94 C-190.18 422.77 -193.91 433.49 -198 443.56 C-198.48 444.79 -198.48 444.79 -198.97 446.03 C-201.35 451.65 -201.35 451.65 -204.69 453.46 C-205.45 453.64 -206.21 453.82 -207 454 C-207.33 454.33 -207.66 454.66 -208 455 C-210.94 455.19 -210.94 455.19 -214 455 C-214.66 454.34 -215.32 453.68 -216 453 C-221.35 457.2 -222.93 463.78 -225 470 C-225.99 469.67 -226.98 469.34 -228 469 C-231.57 474.35 -233.62 480.44 -235.31 486.62 C-236.88 492.13 -239.21 497.26 -241.58 502.47 C-243 505.62 -244.23 508.62 -245 512 C-245.99 512 -246.98 512 -248 512 C-248.23 512.78 -248.45 513.57 -248.69 514.38 C-250.08 518.22 -251.84 521.7 -253.7 525.33 C-255.37 528.76 -256.71 532.29 -258.01 535.87 C-259.05 538.11 -260.22 539.32 -262 541 C-262.71 543.1 -262.71 543.1 -263 545 C-263.66 545 -264.32 545 -265 545 C-265.27 545.99 -265.54 546.98 -265.81 548 C-266.57 550.68 -267.46 553.23 -268.5 555.81 C-269.9 559.48 -270.69 563.08 -271.39 566.93 C-272.2 571.02 -273.16 575.07 -274.12 579.12 C-274.31 579.9 -274.49 580.67 -274.68 581.46 C-275.12 583.31 -275.56 585.15 -276 587 C-276.99 587 -277.98 587 -279 587 C-279.07 587.67 -279.15 588.35 -279.22 589.04 C-280.26 592.99 -282.21 595.93 -284.44 599.31 C-284.85 599.96 -285.25 600.6 -285.67 601.27 C-286.72 602.89 -287.86 604.45 -289 606 C-289.66 606 -290.32 606 -291 606 C-291.24 606.63 -291.47 607.26 -291.71 607.91 C-292.78 610.47 -293.91 612.92 -295.13 615.4 C-295.52 616.21 -295.92 617.02 -296.33 617.85 C-297.15 619.53 -297.98 621.2 -298.81 622.88 C-301.11 627.62 -302.88 631.68 -303 637 C-300.99 639.12 -299.38 640.41 -297 642 C-295.65 643.08 -294.29 644.17 -292.94 645.25 C-289.99 647.42 -287.78 649 -284 649 C-281.04 648.22 -279.39 647.38 -277.19 645.25 C-275.76 642.97 -275.76 642.97 -276 639.94 C-276 637 -276 637 -274.81 635.19 C-273 634 -273 634 -270.56 633.62 C-266.94 632.74 -266.14 631.03 -264 628 C-262.6 625.47 -261.36 622.86 -260.12 620.25 C-249.07 597.72 -249.07 597.72 -238.08 593.21 C-235.24 591.56 -234.13 589.55 -232.4 586.77 C-231.74 585.74 -231.09 584.71 -230.41 583.65 C-229.74 582.57 -229.07 581.49 -228.38 580.38 C-227.03 578.23 -225.69 576.09 -224.34 573.96 C-223.74 573.01 -223.15 572.06 -222.54 571.08 C-222.03 570.39 -221.52 569.71 -221 569 C-220.34 569 -219.68 569 -219 569 C-218.6 567.9 -218.6 567.9 -218.18 566.78 C-217.04 564.08 -215.73 561.9 -214.06 559.5 C-212.42 557.11 -210.87 554.77 -209.44 552.25 C-207.63 549.43 -205.37 547.37 -203 545 C-201.17 542.72 -199.4 540.41 -197.65 538.09 C-196.19 536.25 -194.7 534.61 -193 533 C-187.29 534.86 -187.29 534.86 -184.56 536.19 C-180.76 537.39 -178.83 537.23 -175 536 C-164.15 527.31 -159.38 512.27 -155.25 499.46 C-154.62 497.47 -153.96 495.49 -153.3 493.51 C-151.5 488.03 -149.83 482.73 -149 477 C-148.67 477 -148.34 477 -148 477 C-146.61 484.7 -147.52 490.62 -150 498 C-148.12 497.97 -148.12 497.97 -146 497 C-144.53 494.93 -143.28 492.96 -142.06 490.75 C-139.47 486.2 -137.05 482.37 -133 479 C-131.87 479.16 -130.73 479.33 -129.56 479.5 C-128.39 479.66 -127.21 479.83 -126 480 C-123.96 478.38 -121.96 476.71 -120 475 C-116.37 474.35 -114.82 474.45 -111.75 476.5 C-109.36 479.91 -108.81 482.93 -108 487 C-106.02 487 -104.04 487 -102 487 C-102.38 489.44 -102.38 489.44 -103 492 C-103.66 492.33 -104.32 492.66 -105 493 C-104.34 494.32 -103.68 495.64 -103 497 C-103.66 497.99 -104.32 498.98 -105 500 C-105.48 502.26 -105.88 504.53 -106.25 506.81 C-111.42 536.3 -111.42 536.3 -120 548 C-124.75 555.35 -124.62 562.28 -123.5 570.81 C-123.32 572.21 -123.16 573.6 -123 575 C-122.89 575.93 -122.77 576.86 -122.65 577.82 C-121.86 589.48 -127.26 599.41 -134.12 608.56 C-137 611 -137 611 -140.38 610.94 C-141.24 610.63 -142.11 610.32 -143 610 C-143 609.34 -143 608.68 -143 608 C-143.99 608 -144.98 608 -146 608 C-146.03 606.58 -146.05 605.17 -146.06 603.75 C-146.07 602.96 -146.09 602.17 -146.1 601.36 C-146 599.08 -145.56 597.2 -145 595 C-144.94 593.58 -144.91 592.17 -144.94 590.75 C-144.97 588.89 -144.97 588.89 -145 587 C-146.9 587.01 -146.9 587.01 -149 588 C-150.96 590.88 -150.96 590.88 -152.62 594.38 C-155.95 600.93 -155.95 600.93 -158 604 C-158.68 606 -159.35 608 -160 610 C-160.64 611.35 -161.29 612.69 -162 614 C-162.66 614 -163.32 614 -164 614 C-164.12 614.54 -164.25 615.07 -164.38 615.62 C-166.31 622.99 -169.58 629.44 -173.06 636.17 C-176.53 642.76 -176.53 642.76 -178.38 649.9 C-179.27 654.37 -181.56 657.74 -183.88 661.62 C-188.65 669.96 -192.45 678.49 -195.94 687.44 C-196.39 688.58 -196.83 689.73 -197.29 690.91 C-200.2 698.52 -202.7 706.2 -205 714 C-206.53 712.22 -206.53 712.22 -208 710 C-207.61 707.32 -207.11 705.11 -206.31 702.56 C-206.03 701.58 -206.03 701.58 -205.74 700.58 C-204.92 697.75 -204.01 695.02 -202.84 692.32 C-201.89 689.71 -201.92 688.1 -202.31 685.38 C-202.41 684.62 -202.51 683.86 -202.61 683.09 C-202.98 680.82 -202.98 680.82 -204 678 C-204.14 674.65 -204.07 671.56 -203.63 668.24 C-202.73 662.56 -202.73 662.56 -204.5 657.31 C-207.97 655.49 -210.12 655.46 -214 656 C-217.64 657.85 -219.59 659.35 -221.77 662.81 C-224.3 666.43 -226.97 668.78 -230.44 671.44 C-231.28 672.12 -231.28 672.12 -232.13 672.83 C-234.84 674.92 -236.37 676.03 -239.85 675.85 C-242 675 -242 675 -243 674 C-242.97 672.34 -242.87 670.67 -242.74 669.01 C-242.67 668 -242.61 666.98 -242.54 665.93 C-242.39 663.78 -242.23 661.63 -242.05 659.48 C-241.99 658.46 -241.93 657.44 -241.86 656.39 C-241.79 655.45 -241.72 654.51 -241.65 653.55 C-242.11 650.19 -243.42 649.11 -246 647 C-247.83 645.83 -247.83 645.83 -250 646 C-254.84 648.86 -258.68 652.34 -262.62 656.31 C-263.46 657.13 -263.46 657.13 -264.32 657.96 C-268.04 661.67 -270.58 665.34 -273 670 C-273.66 670 -274.32 670 -275 670 C-275.25 670.66 -275.5 671.33 -275.76 672.01 C-277.29 675.71 -279.07 679.25 -280.88 682.81 C-281.21 683.49 -281.55 684.16 -281.9 684.85 C-282.24 685.53 -282.58 686.2 -282.93 686.89 C-283.27 687.57 -283.61 688.25 -283.96 688.95 C-284.66 690.32 -285.35 691.69 -286.06 693.05 C-288.22 697.26 -290.01 701.46 -291.56 705.94 C-291.99 707.15 -292.41 708.36 -292.84 709.61 C-294.25 713.74 -295.64 717.86 -297 722 C-297.66 724.02 -298.33 726.04 -299 728.06 C-299.34 729.09 -299.67 730.11 -300.02 731.16 C-300.82 733.48 -301.72 735.69 -302.69 737.94 C-304.79 743.38 -304.67 749.24 -305 755 C-305.37 758.8 -305.79 762.36 -307 766 C-307.66 766.33 -308.32 766.66 -309 767 C-313.2 779.64 -312.66 792.96 -311.22 806.02 C-310.73 812.66 -310.93 819.35 -311 826 C-311.62 826.1 -312.24 826.21 -312.88 826.31 C-315.37 826.88 -315.37 826.88 -317 830 C-318.58 819.84 -319.36 809.99 -319.31 799.69 C-319.31 798.67 -319.31 798.67 -319.3 797.63 C-319.24 786.75 -318.47 776.59 -316 766 C-315.73 764.78 -315.45 763.57 -315.17 762.32 C-313.03 752.85 -310.79 743.4 -308.48 733.97 C-308.04 732.16 -307.6 730.35 -307.16 728.53 C-304.38 717.16 -301.22 706.08 -297.1 695.11 C-296.35 693.09 -295.67 691.05 -295 689 C-295.33 688.34 -295.66 687.68 -296 687 C-297.25 688.08 -298.5 689.17 -299.75 690.25 C-300.45 690.85 -301.14 691.46 -301.86 692.08 C-306.36 696.12 -309.59 700.13 -312.75 705.25 C-313.19 705.95 -313.62 706.66 -314.07 707.39 C-318.14 714.05 -321.67 720.91 -325.02 727.96 C-326.02 730.04 -327.05 732.1 -328.1 734.15 C-334.11 746.2 -338.33 758.6 -340 772 C-339.34 772.33 -338.68 772.66 -338 773 C-338.13 773.71 -338.27 774.41 -338.4 775.14 C-340.17 785.4 -340.61 795.62 -341 806 C-341.33 806 -341.66 806 -342 806 C-342.11 812.41 -342.17 818.68 -341 825 C-340.34 825.33 -339.68 825.66 -339 826 C-338.58 827.86 -338.58 827.86 -338.25 830.31 C-335.9 842.94 -327.88 852.82 -319.93 862.53 C-318.03 864.96 -316.4 867.42 -314.81 870.06 C-314.3 870.9 -313.79 871.74 -313.27 872.6 C-312.12 874.77 -311.46 876.6 -311 879 C-310.34 878.34 -309.68 877.68 -309 877 C-308.98 874.32 -308.98 874.32 -309.38 871.38 C-309.49 870.37 -309.6 869.37 -309.71 868.34 C-309.81 867.57 -309.9 866.79 -310 866 C-309.01 866 -308.02 866 -307 866 C-304.76 871.18 -302.56 876.38 -300.41 881.6 C-299.4 884.04 -298.38 886.47 -297.34 888.9 C-296.79 890.22 -296.24 891.55 -295.69 892.88 C-295.18 894.09 -294.66 895.3 -294.14 896.55 C-293.02 899.95 -292.77 902.46 -293 906 C-293.99 906.33 -294.98 906.66 -296 907 C-310 892.15 -310 892.15 -310 886 C-310.66 886 -311.32 886 -312 886 C-312.33 884.68 -312.66 883.36 -313 882 C-313.75 882.05 -314.5 882.09 -315.27 882.14 C-322.02 882.38 -326.69 881.6 -332.82 878.84 C-335.91 877.65 -337.9 877.92 -341 879 C-342.67 879.99 -344.34 880.99 -346 882 C-347.32 882 -348.64 882 -350 882 C-350.66 882.33 -351.32 882.66 -352 883 C-352 883.66 -352 884.32 -352 885 C-352.94 884.91 -352.94 884.91 -353.91 884.82 C-360.8 884.46 -364.57 885.86 -370 890 C-373.22 892.15 -374.26 892.56 -378 892 C-379.5 890.31 -379.5 890.31 -381 888 C-381.89 887.13 -382.77 886.27 -383.69 885.38 C-386 883 -386 883 -386 881 C-388.65 879.92 -391.28 878.91 -394 878 C-393.67 878.46 -393.35 878.93 -393.01 879.4 C-392.04 880.78 -391.06 882.16 -390.09 883.54 C-388.98 885.1 -387.88 886.67 -386.77 888.24 C-383.89 892.31 -381.03 896.4 -378.19 900.5 C-375.52 904.31 -372.71 907.98 -369.83 911.64 C-359.92 924.42 -359.92 924.42 -357 930 C-357.33 930.66 -357.66 931.32 -358 932 C-362.04 929.08 -364.28 926.13 -367 922 C-368.69 919.82 -370.4 917.65 -372.12 915.5 C-379.88 905.73 -386.98 895.52 -394.06 885.25 C-394.54 884.56 -395.02 883.87 -395.51 883.15 C-398.88 878.25 -398.88 878.25 -400 876 C-400.66 875.34 -401.32 874.68 -402 874 C-402 872.68 -402 871.36 -402 870 C-402.66 870 -403.32 870 -404 870 C-404.1 868.11 -404.2 866.22 -404.29 864.34 C-405.15 861.51 -406.74 859.84 -408.66 857.66 C-410.96 854.81 -412.48 851.6 -414.06 848.31 C-414.41 847.61 -414.75 846.9 -415.11 846.18 C-417.82 840.57 -420.05 834.91 -422 829 C-422.36 828.05 -422.72 827.1 -423.09 826.12 C-430.21 806.7 -426.5 785.35 -418.05 766.93 C-415.42 761.26 -412.72 755.62 -410 750 C-409.68 749.33 -409.35 748.66 -409.02 747.96 C-405.04 739.75 -400.72 731.81 -396 724 C-395.08 722.46 -395.08 722.46 -394.13 720.89 C-386.86 708.92 -379.44 697.26 -370.23 686.68 C-367.92 683.91 -365.97 681.02 -364 678 C-363.3 677.15 -362.6 676.31 -361.88 675.44 C-359.94 673.17 -359.94 673.17 -359.2 670.82 C-357.59 667.03 -355.35 663.86 -353 660.5 C-352.27 659.45 -352.27 659.45 -351.52 658.38 C-338.76 640.15 -338.76 640.15 -331.47 633.56 C-329.6 631.57 -328.4 629.34 -327 627 C-325.78 625.57 -324.53 624.18 -323.25 622.81 C-319.54 618.75 -316.45 614.47 -313.45 609.87 C-312.97 609.25 -312.49 608.64 -312 608 C-311.34 608 -310.68 608 -310 608 C-309.93 607.44 -309.85 606.88 -309.78 606.3 C-308.71 603.15 -306.88 601.51 -304.56 599.12 C-299.58 593.8 -295.39 588.19 -291.25 582.2 C-289.51 579.73 -287.74 577.44 -285.81 575.12 C-279.5 566.82 -276.16 555.82 -273 546 C-272.34 545.01 -271.68 544.02 -271 543 C-270.51 541.18 -270.08 539.34 -269.69 537.5 C-268.42 532.19 -266.6 527.54 -264.24 522.63 C-263.1 520.22 -262.13 517.81 -261.19 515.31 C-258.03 507.29 -253.9 499.68 -249.98 492.01 C-244.98 482.19 -240.35 472.27 -235.95 462.18 C-235.05 460.12 -234.14 458.06 -233.22 456.01 C-226.73 441.41 -220.84 426.55 -215.32 411.56 C-214.49 409.31 -213.63 407.07 -212.74 404.85 C-210.54 399.23 -209.67 395.02 -210 389 C-209.67 388.67 -209.34 388.34 -209 388 C-208.88 387.03 -208.75 386.06 -208.62 385.06 C-208.24 382.12 -207.58 379.41 -206.71 376.57 C-206.44 375.69 -206.17 374.81 -205.89 373.91 C-205.6 372.95 -205.3 371.99 -205 371 C-199.68 353.44 -199.68 353.44 -194.81 335.75 C-192.74 327.8 -190.39 319.76 -187.24 312.17 C-184.94 306.54 -184.12 301.01 -183.31 295 C-180.1 273.34 -173.98 252.23 -168.08 231.18 C-166.2 224.45 -164.39 217.71 -162.67 210.93 C-162.47 210.16 -162.28 209.39 -162.08 208.59 C-161.12 204.82 -160.17 201.06 -159.23 197.29 C-157.2 189.19 -154.83 181.31 -152.13 173.42 C-150.61 168.83 -149.42 164.2 -148.31 159.5 C-145.86 149.32 -142.88 139.4 -139.65 129.45 C-138.15 124.76 -136.72 120.07 -135.45 115.31 C-134.22 110.71 -132.8 106.23 -131.19 101.75 C-130.8 100.67 -130.8 100.67 -130.4 99.57 C-129.87 98.1 -129.33 96.63 -128.79 95.15 C-128.28 93.75 -127.77 92.35 -127.27 90.95 C-124.41 82.96 -121.12 76.07 -115.83 69.37 C-114 67.01 -112.53 64.56 -111 62 C-109.7 60.63 -108.38 59.28 -107 58 C-107.33 57.01 -107.66 56.02 -108 55 C-99.2 48.46 -90.99 47.58 -80.19 47.88 C-77.97 47.92 -75.76 47.96 -73.54 47.99 C-72.09 48.03 -72.09 48.03 -70.61 48.07 C-68.19 48 -66.27 47.82 -64 47 C-62.76 44.95 -62.76 44.95 -61.94 42.5 C-61.03 40.03 -61.03 40.03 -60 38 C-58.51 37.5 -58.51 37.5 -57 37 C-57 36.34 -57 35.68 -57 35 C-55.37 33.66 -53.66 32.4 -51.94 31.19 C-50.94 30.48 -49.94 29.76 -48.91 29.03 C-47.2 27.83 -45.48 26.64 -43.75 25.47 C-39.96 22.98 -39.96 22.98 -38 19 C-36.37 17.88 -36.37 17.88 -34.29 16.84 C-33.54 16.46 -32.79 16.08 -32.02 15.68 C-31.23 15.29 -30.44 14.9 -29.62 14.5 C-28.07 13.72 -26.52 12.94 -24.98 12.16 C-24.29 11.81 -23.6 11.47 -22.89 11.12 C-20.94 10.07 -20.94 10.07 -19.44 8.43 C-18 7 -18 7 -15 6 C-15 5.34 -15 4.68 -15 4 C-13.27 3.27 -11.54 2.54 -9.81 1.8 C-7.9 0.99 -7.9 0.99 -5.81 -0.25 C-3.5 -1.21 -2.36 -0.68 0 0 Z M-341 772 C-340 775 -340 775 -340 775 Z M-342 777 C-341 779 -341 779 -341 779 Z M-343 782 C-343 785.3 -343 788.6 -343 792 C-342.67 792 -342.34 792 -342 792 C-342 788.7 -342 785.4 -342 782 C-342.33 782 -342.66 782 -343 782 Z M-344 792 C-344 795.96 -344 799.92 -344 804 C-343.67 804 -343.34 804 -343 804 C-343 800.04 -343 796.08 -343 792 C-343.33 792 -343.66 792 -344 792 Z M-340 834 C-339 838 -339 838 -339 838 Z M-339 838 C-338 840 -338 840 -338 840 Z M-338 840 C-337 842 -337 842 -337 842 Z M-337 842 C-336 844 -336 844 -336 844 Z M-336 844 C-335 846 -335 846 -335 846 Z \",fill:\"#3F1D4E\",transform:\"translate(623,63)\"})),_path12||(_path12=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 1.38 1.5 1.38 3 3 C3 3.66 3 4.32 3 5 C4.14 5.4 4.14 5.4 5.31 5.81 C9.5 7.66 9.5 7.66 11 10 C10.75 12.81 10.75 12.81 10 16 C9.81 17.11 9.63 18.23 9.44 19.38 C9.29 20.24 9.15 21.11 9 22 C8.34 22 7.68 22 7 22 C7.33 22.99 7.66 23.98 8 25 C8.07 26.73 8.08 28.46 8.06 30.19 C8.05 31.09 8.04 31.99 8.04 32.92 C8.02 33.95 8.02 33.95 8 35 C8.91 35.21 9.81 35.41 10.75 35.62 C14.95 37.4 16.06 38.89 18 43 C18.58 47.45 18.07 51.67 17.31 56.06 C16.92 60.98 18.01 63.54 20 68 C20.66 68 21.32 68 22 68 C22.06 67.41 22.13 66.81 22.19 66.2 C23.57 56.85 28.42 47.93 35.89 41.95 C40.33 39.95 45.26 40.58 50 41 C50 42.98 50 44.96 50 47 C54.18 48.39 57.38 47.72 61.38 45.94 C61.91 45.63 62.45 45.32 63 45 C62.47 49.2 61.57 52.23 59.44 55.88 C52.84 67.61 47.37 79.06 43.31 91.92 C42.02 96.02 40.46 99.97 38.81 103.94 C37.64 106.91 36.81 109.91 36 113 C35.67 113 35.34 113 35 113 C33.96 118.05 33.9 122.87 34 128 C34.33 127.67 34.66 127.34 35 127 C35 125.68 35 124.36 35 123 C35.58 122.8 36.15 122.59 36.75 122.38 C39.89 120.46 41.12 118.08 43 114.94 C43.35 114.36 43.7 113.78 44.05 113.18 C47.31 107.66 49.98 102.07 52 96 C53.64 94.31 55.31 92.64 57 91 C64.93 81.89 71.4 72.34 77.2 61.78 C80.49 55.86 80.49 55.86 83 54 C85.67 53.33 88.24 53.23 91 53 C91 52.34 91 51.68 91 51 C93.81 49.88 93.81 49.88 97 49 C97.99 49.66 98.98 50.32 100 51 C99.64 53.78 99.18 54.83 97.07 56.75 C96.29 57.35 95.5 57.95 94.69 58.56 C89.39 63.15 87.7 67.31 86 74 C85.82 74.66 85.64 75.32 85.46 75.99 C82.85 85.67 81.76 94.43 82.05 104.43 C81.99 108.63 81.13 111.97 79.73 115.89 C78.4 119.73 78.12 123.75 77.72 127.77 C76.86 131.63 75.16 134.59 73.06 137.88 C72.7 138.47 72.34 139.06 71.97 139.67 C71.04 141.16 70.03 142.58 69 144 C68.34 144 67.68 144 67 144 C65.28 147.64 63.63 151.31 62 155 C61.66 155.71 61.32 156.41 60.96 157.14 C57.14 166.19 59.28 177.6 61 187 C57.6 183.6 57.64 178.7 56.78 174.09 C56.52 173.07 56.27 172.05 56 171 C55.34 170.67 54.68 170.34 54 170 C54 168.68 54 167.36 54 166 C48.72 165.67 43.44 165.34 38 165 C37.07 166.65 36.14 168.3 35.19 170 C34.4 171.39 34.4 171.39 33.61 172.81 C29.81 180.35 28.31 187.17 27.31 195.5 C27.18 196.51 27.05 197.53 26.92 198.57 C26.6 201.05 26.3 203.52 26 206 C25.67 206 25.34 206 25 206 C23.97 201.77 23.85 197.68 23.87 193.36 C23.87 192.63 23.87 191.9 23.86 191.15 C23.86 189.61 23.87 188.07 23.87 186.54 C23.87 184.21 23.87 181.88 23.86 179.54 C23.86 178.04 23.87 176.54 23.87 175.04 C23.87 174.36 23.86 173.67 23.86 172.96 C23.88 168.22 24.37 163.69 25 159 C25 158.03 25 157.06 25 156.06 C25 154 25 154 26 153 C27.19 147.33 27.02 141.76 26.96 135.98 C27.01 130.89 27.33 125.84 27.73 120.77 C28 116.99 28.04 113.66 27 110 C25.96 108.76 25.96 108.76 23.69 108.69 C20.84 108.74 20.84 108.74 18.94 111.06 C18.3 111.7 17.66 112.34 17 113 C15.01 112.84 15.01 112.84 13 112 C11.84 110.43 11.84 110.43 10.94 108.44 C10.61 107.72 10.27 107.01 9.93 106.27 C9.03 104.08 8.26 101.87 7.5 99.62 C6.41 96.03 6.41 96.03 4.18 94.8 C0.44 93.43 -3.08 93.33 -7 94 C-9.85 95.93 -9.85 95.93 -12 99 C-12.49 99.57 -12.98 100.14 -13.49 100.73 C-17.86 106.01 -20.01 111.49 -22 118 C-22.35 119.14 -22.7 120.29 -23.06 121.46 C-25.84 130.87 -28.06 139.97 -28.56 149.77 C-29.11 152.54 -30.09 153.95 -32 156 C-32.99 156.33 -33.98 156.66 -35 157 C-37.85 165.06 -37.92 173.89 -38.6 182.36 C-39.23 190.06 -40.2 197.27 -42.41 204.68 C-43.23 207.92 -43.04 210.59 -42.5 213.88 C-42.3 215.14 -42.09 216.4 -41.88 217.7 C-40.72 223.65 -39.23 229.54 -37.75 235.42 C-36.34 241.18 -35.55 246.68 -35.22 252.61 C-34.87 256.39 -34.03 258.77 -32 262 C-27.64 263.93 -24.32 264.07 -19.62 263.69 C-14.82 263.61 -12.15 263.93 -8.44 267.06 C-3.41 272 -0.66 278.47 1.88 284.94 C2.13 285.58 2.38 286.22 2.64 286.88 C3.98 290.27 5.25 293.68 6.47 297.11 C9.16 304.63 12.14 311.27 16.36 318.1 C18.03 321.05 19.18 323.93 20.31 327.12 C24.88 339.61 31.83 351.13 40.09 361.52 C42 364 42 364 43.63 366.76 C44.8 369.12 44.8 369.12 47 370 C50.86 370.36 53.17 370.52 56.5 368.44 C58.14 365.77 58.46 364.25 57.8 361.18 C53.56 349.6 45.55 340.42 35.7 333.32 C33.25 331.42 32.08 329.91 31 327 C30.62 322.99 30.71 319.23 31.62 315.31 C32.14 312.15 31.03 310.02 30 307 C29.31 300.24 31.03 293.45 33 287 C33.66 286.34 34.32 285.68 35 285 C37.83 285.36 40.29 286.1 43 287 C44.33 290.11 44.99 292.89 45.38 296.25 C46.06 300.35 47.41 303.69 49.01 307.5 C50.75 311.89 52 316.25 52 321 C52.66 321.33 53.32 321.66 54 322 C55.37 324.32 56.18 326.55 57 329.12 C57.8 332.09 57.8 332.09 60 334 C65.58 341.82 70 350.37 74.47 358.85 C76.98 363.56 79.61 367.96 82.75 372.27 C85.41 375.98 87.02 379.13 88.06 383.62 C89.48 388.86 91.29 392.42 94.83 396.51 C96 398 96 398 96 400 C96.66 400.33 97.32 400.66 98 401 C98.84 402.59 99.6 404.23 100.31 405.88 C102.01 409.75 103.76 413.61 105.56 417.44 C106.39 419.29 107.2 421.14 108 423 C108.4 423.91 108.79 424.82 109.2 425.76 C112.19 433.47 112.33 440.38 112.04 448.51 C111.74 451.85 111.74 451.85 113 454 C113.03 457.22 112.93 460.42 112.84 463.64 C113.01 467.14 113.9 469.69 115 473 C116.36 488.81 114.14 505.73 110 521 C109.34 521 108.68 521 108 521 C107.77 522.26 107.55 523.52 107.31 524.81 C106.24 530.2 104.89 535.5 103.5 540.81 C103.29 541.64 103.07 542.46 102.85 543.31 C101.79 547.32 100.67 551.19 99 555 C98.34 555 97.68 555 97 555 C96.88 555.58 96.76 556.16 96.63 556.76 C96.47 557.54 96.3 558.32 96.12 559.12 C95.96 559.89 95.8 560.66 95.63 561.45 C94.12 567.57 91.93 572.01 88.25 577.06 C87.83 577.66 87.41 578.26 86.98 578.88 C83.62 583.56 79.95 587.71 74.56 590.06 C70.72 589.97 68.07 588.22 65 586 C64.5 585.42 64.01 584.85 63.5 584.25 C60.96 582.13 58.15 582.82 55 583 C55 580.69 55 578.38 55 576 C55.66 576 56.32 576 57 576 C57.26 575.43 57.53 574.85 57.8 574.26 C59.07 571.86 60.54 569.92 62.25 567.81 C68.9 559.35 73.69 550.89 78 541 C78.66 541 79.32 541 80 541 C79.95 540.17 79.9 539.33 79.85 538.47 C80.02 534.5 81.08 531.16 82.38 527.44 C84.74 520.33 86.14 513.46 87 506 C87.66 506 88.32 506 89 506 C89.08 501.33 89.13 496.65 89.16 491.98 C89.18 490.4 89.2 488.82 89.23 487.24 C89.46 472.54 88.28 458.25 82.81 444.44 C82.51 443.66 82.21 442.87 81.91 442.07 C77.57 431.01 72 420.54 66.13 410.23 C65 408 65 408 64.5 405.84 C63.7 402.88 61.41 401.73 59 400 C59.33 399.01 59.66 398.02 60 397 C59.01 397 58.02 397 57 397 C56.61 396.09 56.22 395.18 55.81 394.25 C53.88 390.79 52.08 389.41 49 387 C48.42 386.05 47.85 385.1 47.25 384.12 C43.54 378.97 37.82 375.52 32 373 C26.36 372.44 26.36 372.44 21.31 374.56 C18.97 377.04 17.07 379.56 15.21 382.41 C13.24 385 11.42 385.93 8.25 386.44 C4.86 385.98 4.2 385.56 1.69 383.5 C-1.76 380.85 -4.38 380.19 -8.71 380.45 C-12.9 381.45 -16.38 383.58 -19 387 C-20.71 393.15 -19.35 398.4 -17.88 404.44 C-17.65 405.41 -17.42 406.39 -17.18 407.39 C-15.82 413.08 -14.23 418.64 -12.38 424.19 C-6.73 441.29 -3.48 462.78 -10 480 C-14.06 484.82 -14.06 484.82 -18.25 485.62 C-27.55 489.03 -32.71 500.12 -36.75 508.71 C-39.1 514.9 -38.43 519.43 -36.81 525.69 C-36.05 528.89 -35.97 529.9 -36.94 533.19 C-39.09 536.12 -41.3 538.11 -44.11 540.38 C-47.45 543.24 -50.17 546.65 -53 550 C-66.28 565.42 -66.28 565.42 -72 566.31 C-74.8 567.27 -75.82 569.3 -77.58 571.56 C-80.01 574.02 -82.67 574.46 -86 575 C-86.63 574.8 -87.27 574.59 -87.92 574.38 C-90.88 573.84 -92.21 574.91 -94.75 576.44 C-95.55 576.91 -96.35 577.38 -97.17 577.87 C-98.08 578.43 -98.08 578.43 -99 579 C-99 579.33 -99 579.66 -99 580 C-106.98 581.65 -114.87 582.51 -123 583 C-123 583.66 -123 584.32 -123 585 C-125.31 585 -127.62 585 -130 585 C-130 585.66 -130 586.32 -130 587 C-130.79 587.2 -131.58 587.39 -132.4 587.6 C-135.29 588.78 -135.29 588.78 -136.04 591.93 C-136.23 593.09 -136.43 594.25 -136.62 595.44 C-137.68 601.55 -137.68 601.55 -139.34 603.86 C-142.22 605.84 -145.6 605.93 -149 606 C-149.87 605.79 -150.73 605.59 -151.62 605.38 C-155.07 604.83 -157.02 606.35 -160 608 C-160.66 608 -161.32 608 -162 608 C-162 608.99 -162 609.98 -162 611 C-179.49 611 -196.98 611 -215 611 C-219.73 589.72 -219.73 589.72 -213.23 579.11 C-211.58 576.62 -209.97 574.24 -208 572 C-207.34 572 -206.68 572 -206 572 C-205.76 571.44 -205.53 570.88 -205.28 570.3 C-200.68 562.03 -192.25 556.2 -184 552 C-183.05 551.51 -183.05 551.51 -182.08 551.01 C-161.23 540.32 -161.23 540.32 -153.98 542.65 C-152.68 543.31 -151.4 544.02 -150.14 544.77 C-142.15 549.34 -133.11 551.37 -124 550 C-119.79 548.71 -115.94 546.97 -112 545 C-110.79 544.46 -110.79 544.46 -109.56 543.91 C-102.9 540.67 -98.63 535.68 -94 530 C-93.12 528.93 -93.12 528.93 -92.23 527.84 C-90.44 525.6 -88.72 523.31 -87 521 C-86.22 519.97 -85.43 518.95 -84.62 517.89 C-72.2 501.34 -66.23 483.95 -61 464 C-60.79 463.21 -60.58 462.42 -60.36 461.61 C-55.3 441.94 -56.31 418.91 -63.44 399.87 C-64.34 396.85 -64.2 394.13 -64 391 C-64.66 390.67 -65.32 390.34 -66 390 C-67.03 388.02 -68.03 386.02 -69 384 C-70.72 380.88 -70.72 380.88 -73.5 379.75 C-76.63 378.19 -79.41 376.51 -82.31 374.56 C-83.17 373.99 -84.04 373.41 -84.93 372.82 C-87.16 370.86 -87.77 369.92 -88 367 C-87.67 366.67 -87.34 366.34 -87 366 C-87.38 360.57 -89 356.35 -91.53 351.61 C-91.88 350.93 -92.23 350.26 -92.58 349.56 C-93.32 348.15 -94.06 346.74 -94.8 345.34 C-95.94 343.18 -97.06 341.02 -98.19 338.85 C-98.9 337.48 -99.62 336.1 -100.34 334.73 C-100.68 334.08 -101.01 333.44 -101.36 332.77 C-102.73 330.19 -103.92 328.08 -106 326 C-106 325.01 -106 324.02 -106 323 C-107.2 323.14 -108.39 323.29 -109.62 323.44 C-116.93 323.37 -123.31 320.39 -129 316 C-130.93 312.68 -132.03 309.69 -133.01 305.99 C-133.79 302.88 -133.79 302.88 -136.18 300.86 C-136.78 300.24 -137.38 299.63 -138 299 C-137.75 296.75 -137.75 296.75 -137 295 C-136.13 295.12 -135.26 295.24 -134.37 295.36 C-133.21 295.49 -132.06 295.62 -130.88 295.75 C-129.74 295.89 -128.6 296.03 -127.43 296.17 C-122.84 295.94 -121.15 295.41 -118 292 C-117.25 287.73 -117.44 283.57 -117.62 279.25 C-117.67 277.49 -117.67 277.49 -117.71 275.69 C-117.78 272.79 -117.88 269.9 -118 267 C-118.66 267 -119.32 267 -120 267 C-120.09 262.42 -120.14 257.83 -120.19 253.25 C-120.21 251.95 -120.24 250.65 -120.26 249.3 C-120.27 248.05 -120.28 246.8 -120.29 245.52 C-120.31 244.36 -120.32 243.21 -120.34 242.02 C-119.97 238.73 -119.23 237.39 -117 235 C-117.66 234.34 -118.32 233.68 -119 233 C-113.79 230.51 -108.86 230.71 -103.18 230.64 C-99.91 230.33 -99.91 230.33 -98.31 227.94 C-96.7 224.32 -96.69 221.26 -96.84 217.39 C-96.86 215.87 -96.89 214.34 -96.92 212.82 C-96.93 212.03 -96.95 211.24 -96.97 210.42 C-97.06 203.99 -96.84 197.57 -96.68 191.14 C-96.64 189.5 -96.61 187.85 -96.58 186.21 C-96.4 176.64 -95.99 167.4 -94 158 C-93.67 158 -93.34 158 -93 158 C-93.07 158.9 -93.14 159.81 -93.21 160.74 C-93.87 169.99 -94.31 179.22 -94.38 188.5 C-94.38 189.55 -94.38 189.55 -94.39 190.61 C-94.44 205.38 -92.29 219.42 -89.55 233.9 C-89.06 236.64 -88.69 239.34 -88.41 242.11 C-88.1 245.03 -87.68 247.5 -86.94 250.31 C-86 254 -86 254 -86 258 C-85.34 258 -84.68 258 -84 258 C-84 258.66 -84 259.32 -84 260 C-83.34 260 -82.68 260 -82 260 C-81.85 260.84 -81.85 260.84 -81.7 261.69 C-80.59 267.31 -78.87 271.98 -76.12 277 C-75.74 277.72 -75.35 278.44 -74.96 279.18 C-70.67 286.93 -65.53 294.05 -60.31 301.19 C-55 308.52 -55 308.52 -55 311 C-54.4 311.27 -53.8 311.53 -53.18 311.81 C-50.93 313.04 -49.75 314.16 -48.12 316.12 C-47.61 316.72 -47.1 317.33 -46.58 317.96 C-46.06 318.59 -45.54 319.22 -45 319.88 C-38.11 328.26 -38.11 328.26 -29 334 C-29 333.01 -29 332.02 -29 331 C-28.01 330.67 -27.02 330.34 -26 330 C-25.69 329.03 -25.38 328.06 -25.06 327.06 C-24 324 -24 324 -21.88 322.62 C-21.26 322.42 -20.64 322.21 -20 322 C-20.75 325.12 -21.63 328.18 -22.56 331.25 C-22.97 332.59 -22.97 332.59 -23.38 333.95 C-23.69 334.97 -23.69 334.97 -24 336 C-22.68 335.67 -21.36 335.34 -20 335 C-19.66 333.21 -19.66 333.21 -19.31 331.38 C-18.15 326.76 -16.36 324.36 -13 321 C-12.11 320.5 -11.23 320.01 -10.31 319.5 C-7.82 318.11 -7.82 318.11 -6.31 315.44 C-5.7 308.73 -10.49 303.76 -14.61 298.82 C-16.03 297.14 -17.46 295.48 -18.89 293.82 C-27.74 283.56 -34.9 271.99 -40.44 259.62 C-42.29 255.71 -44.43 253.62 -47.81 250.94 C-51.8 247.66 -51.8 247.66 -52.72 244.64 C-52.87 240.69 -52.59 238.7 -50 235.62 C-49.01 234.82 -49.01 234.82 -48 234 C-48 233.01 -48 232.02 -48 231 C-49.98 231 -51.96 231 -54 231 C-54.33 230.34 -54.66 229.68 -55 229 C-54.58 228.53 -54.16 228.06 -53.72 227.57 C-52.9 226.64 -52.9 226.64 -52.06 225.69 C-51.52 225.07 -50.97 224.46 -50.41 223.82 C-47.86 220.53 -47.95 217.68 -48.06 213.66 C-48.3 205.12 -47.61 196.91 -46.5 188.44 C-45.35 179.43 -44.7 170.58 -44.69 161.5 C-44.68 160.49 -44.68 159.49 -44.67 158.45 C-44.72 152.84 -45.34 147.68 -46.55 142.2 C-48.01 135.08 -47.32 127.78 -45.34 120.84 C-44.81 118.78 -44.81 118.78 -46 116 C-44.91 111.91 -43.26 108.38 -41.21 104.69 C-40.39 103.21 -40.39 103.21 -39.56 101.7 C-38.69 100.15 -38.69 100.15 -37.81 98.56 C-21.75 70.44 -21.75 70.44 -18 39 C-18.23 38.31 -18.45 37.63 -18.69 36.92 C-19.14 34.12 -18.04 33.04 -16.44 30.75 C-13.16 25.63 -11.13 20.43 -9.18 14.71 C-7.2 9.03 -4.54 4.08 0 0 Z \",fill:\"#3A174A\",transform:\"translate(498,669)\"})),_path13||(_path13=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93 0.54 1.86 1.07 2.81 1.62 C3.99 2.03 3.99 2.03 5.19 2.44 C9.94 4.59 14.13 7.95 17.81 11.62 C19.75 12.66 21.71 13.66 23.69 14.62 C24.74 15.14 25.79 15.66 26.87 16.19 C27.84 16.66 28.81 17.14 29.81 17.62 C30.79 18.12 30.79 18.12 31.79 18.62 C33.45 19.45 35.13 20.25 36.81 21.04 C43.05 24.03 48.87 27.16 54.5 31.19 C63.35 37.5 72.72 42.22 82.63 46.65 C84.25 47.37 85.86 48.1 87.48 48.83 C99.71 54.37 111.93 59.64 124.64 63.99 C129.75 65.75 134.21 67.79 138.81 70.62 C138.81 70.96 138.81 71.28 138.81 71.62 C137.58 71.48 136.34 71.34 135.06 71.19 C129.32 70.55 123.57 70.08 117.81 69.62 C121.77 70.12 121.77 70.12 125.81 70.62 C125.15 71.62 124.49 72.61 123.81 73.62 C122.82 73.62 121.83 73.62 120.81 73.62 C119.47 75.62 118.14 77.62 116.81 79.62 C113.61 81.73 110.66 81.99 106.88 82.25 C105.35 82.36 105.35 82.36 103.79 82.48 C101.12 82.61 98.48 82.65 95.81 82.62 C95.48 83.28 95.15 83.94 94.81 84.62 C92.5 85.36 90.16 86.03 87.81 86.62 C87.81 87.62 87.81 88.61 87.81 89.62 C87.23 89.72 86.64 89.82 86.04 89.93 C79.27 92.05 74.5 100.11 70.44 105.62 C70.01 106.19 69.58 106.76 69.14 107.35 C66.08 111.64 64.84 115.46 63.81 120.62 C63.15 120.29 62.49 119.97 61.81 119.62 C54.71 132.75 50.93 145.17 48.32 159.82 C44.93 178.5 41.14 198.49 32.81 215.62 C31.49 215.62 30.17 215.62 28.81 215.62 C27.8 212.59 27.8 211.41 28.23 208.34 C28.41 207.06 28.41 207.06 28.59 205.76 C28.72 204.85 28.86 203.94 29 203 C29.21 201.59 29.21 201.59 29.42 200.14 C30.74 191.5 32.63 183.08 34.81 174.62 C35.23 172.95 35.65 171.27 36.07 169.59 C36.51 167.9 36.94 166.2 37.38 164.5 C37.57 163.72 37.77 162.94 37.97 162.13 C39.21 157.39 40.84 153.1 42.81 148.62 C43.96 145 44.89 141.32 45.81 137.62 C46.03 136.75 46.25 135.88 46.48 134.99 C47.78 130.72 47.78 130.72 46.81 126.62 C46.15 126.62 45.49 126.62 44.81 126.62 C44.98 125.97 45.14 125.31 45.31 124.62 C45.93 120.89 45.88 117.41 45.81 113.62 C38.97 110.43 33.43 107.89 25.81 108.62 C24.44 104.32 23.65 100.3 23.12 95.81 C21.47 85.53 14.76 78.83 6.81 72.62 C5.75 71.77 5.75 71.77 4.67 70.9 C0.21 67.23 0.21 67.23 -5.19 65.62 C-10.48 66.77 -13.92 69.45 -18 72.81 C-18.61 73.3 -19.22 73.79 -19.85 74.3 C-22.56 76.47 -25.25 78.68 -27.92 80.91 C-28.69 81.54 -29.46 82.16 -30.25 82.81 C-30.9 83.36 -31.55 83.91 -32.22 84.48 C-34.83 86 -36.21 86.09 -39.19 85.62 C-41.94 84.02 -41.94 84.02 -44.75 81.88 C-45.68 81.18 -46.61 80.48 -47.57 79.77 C-50.19 77.62 -50.19 77.62 -52.39 75.41 C-54.07 73.52 -54.07 73.52 -56.31 72.75 C-59.13 71.06 -59.27 68.67 -60.19 65.62 C-67.97 65.19 -74.15 65.4 -81.26 68.75 C-83.19 69.62 -83.19 69.62 -85.19 69.62 C-85.52 70.62 -85.85 71.61 -86.19 72.62 C-87.96 73.25 -87.96 73.25 -90.19 73.62 C-90.95 73.78 -91.72 73.93 -92.51 74.09 C-94.09 74.41 -95.68 74.72 -97.26 75.03 C-97.9 75.22 -98.53 75.42 -99.19 75.62 C-99.52 76.28 -99.85 76.94 -100.19 77.62 C-102.16 77.92 -104.13 78.21 -106.12 78.4 C-108.34 78.6 -108.34 78.6 -111.06 79.31 C-111.76 79.42 -112.47 79.52 -113.19 79.62 C-113.85 78.97 -114.51 78.31 -115.19 77.62 C-117.97 79.66 -119.97 81.26 -121.75 84.25 C-123.42 87.01 -124.15 87.64 -127.19 88.62 C-128.58 88.81 -129.98 88.98 -131.38 89.12 C-132.63 89.29 -133.89 89.46 -135.19 89.62 C-135.52 90.28 -135.85 90.94 -136.19 91.62 C-138.66 91.93 -138.66 91.93 -141.81 92.06 C-146.93 92.41 -150.52 93.42 -155.19 95.62 C-160.82 97.46 -166.2 99.11 -172.19 98.62 C-172.19 99.28 -172.19 99.94 -172.19 100.62 C-173.18 100.29 -174.17 99.97 -175.19 99.62 C-175.81 97.62 -175.81 97.62 -176.19 95.62 C-176.52 95.29 -176.85 94.97 -177.19 94.62 C-179.19 94.91 -181.2 95.24 -183.19 95.62 C-183.19 96.28 -183.19 96.94 -183.19 97.62 C-184.16 98.08 -185.13 98.53 -186.12 99 C-189.26 100.28 -189.26 100.28 -190.19 102.62 C-190.85 102.62 -191.51 102.62 -192.19 102.62 C-192.27 103.35 -192.35 104.07 -192.44 104.81 C-193.34 108.18 -194.9 110.04 -197.19 112.62 C-196.86 113.28 -196.53 113.94 -196.19 114.62 C-205.6 119.22 -205.6 119.22 -210.19 118.62 C-210.19 118.29 -210.19 117.97 -210.19 117.62 C-212.17 117.62 -214.15 117.62 -216.19 117.62 C-214.54 117.96 -212.89 118.28 -211.19 118.62 C-211.19 118.96 -211.19 119.28 -211.19 119.62 C-214 120.11 -216.81 120.59 -219.62 121.06 C-220.41 121.2 -221.19 121.33 -222 121.47 C-226.78 122.28 -231.52 122.9 -236.36 123.27 C-238.43 123.5 -238.43 123.5 -240.19 125.62 C-243.75 126.81 -246.63 126.72 -250.38 126.69 C-251.65 126.68 -252.92 126.67 -254.23 126.66 C-255.69 126.64 -255.69 126.64 -257.19 126.62 C-257.19 126.96 -257.19 127.28 -257.19 127.62 C-257.86 127.76 -258.54 127.89 -259.23 128.03 C-260.57 128.29 -260.57 128.29 -261.94 128.56 C-262.82 128.74 -263.7 128.91 -264.61 129.09 C-266.82 129.55 -269 130.07 -271.19 130.62 C-272.46 130.84 -272.46 130.84 -273.75 131.06 C-276.43 131.53 -276.43 131.53 -279.19 133.62 C-276.88 136.26 -274.57 138.9 -272.19 141.62 C-272.19 138.73 -273.67 137.03 -275.19 134.62 C-274.53 134.29 -273.87 133.97 -273.19 133.62 C-272.61 134.43 -272.03 135.23 -271.44 136.06 C-269.17 138.65 -268.49 139.31 -265.19 139.62 C-264.2 139.62 -263.21 139.62 -262.19 139.62 C-262.85 140.28 -263.51 140.94 -264.19 141.62 C-264.25 143.74 -264.25 143.74 -263.88 146.06 C-263.78 146.84 -263.68 147.63 -263.57 148.43 C-263.21 150.79 -263.21 150.79 -262.19 153.62 C-262.2 155.56 -262.2 155.56 -262.44 157.62 C-262.5 158.31 -262.57 158.99 -262.64 159.69 C-263.36 162.23 -263.98 163.15 -266.19 164.62 C-269.13 164.74 -269.13 164.74 -272.75 164.5 C-279.16 164.26 -284.83 165.21 -291 166.94 C-291.78 167.15 -292.57 167.36 -293.37 167.58 C-298.07 168.95 -298.07 168.95 -301.19 172.62 C-301.88 179.88 -302.63 188.39 -298.71 194.8 C-296.78 197.11 -294.63 199.08 -292.44 201.12 C-287.97 205.37 -285.2 209.66 -282.5 215.12 C-282.15 215.83 -281.8 216.54 -281.44 217.27 C-280.61 219.02 -279.89 220.82 -279.19 222.62 C-279.52 223.28 -279.85 223.94 -280.19 224.62 C-280.85 223.97 -281.51 223.31 -282.19 222.62 C-282.7 222.17 -283.22 221.72 -283.75 221.25 C-285.42 219.36 -285.6 218.05 -286.19 215.62 C-287.4 213.69 -287.4 213.69 -289.19 211.62 C-289.61 211.07 -290.04 210.52 -290.47 209.96 C-293.03 206.75 -295.28 204.36 -298.94 202.44 C-302.37 200.53 -302.89 200.12 -304.19 196.62 C-304.6 193.83 -304.6 193.83 -304.81 190.88 C-304.89 189.89 -304.96 188.91 -305.04 187.89 C-305.09 187.14 -305.14 186.4 -305.19 185.62 C-307.51 190.27 -306.19 194.99 -304.69 199.69 C-302.45 206.77 -302.45 206.77 -303.19 210.62 C-306.14 213.78 -307.59 214.6 -311.96 214.8 C-313.31 214.68 -314.65 214.54 -316 214.38 C-317.04 214.28 -317.04 214.28 -318.1 214.18 C-319.8 214.01 -321.49 213.82 -323.19 213.62 C-321.52 226.09 -318.99 237.32 -312.83 248.36 C-310.85 251.95 -309.72 254.5 -310.19 258.62 C-309.23 258.16 -309.23 258.16 -308.25 257.69 C-305.48 256.73 -303.96 256.57 -301.12 256.5 C-295.43 256 -291.67 252.88 -287.14 249.62 C-284.45 247.8 -282.01 246.6 -279 245.44 C-275.68 244.17 -275.68 244.17 -274.06 241 C-274.03 238.61 -274.03 238.61 -275.19 236.62 C-274.53 235.97 -273.87 235.31 -273.19 234.62 C-270.12 241.01 -270.12 241.01 -270.41 243.59 C-271.43 246.26 -272.51 246.75 -275.01 248.06 C-275.79 248.48 -276.58 248.9 -277.38 249.34 C-278.62 249.97 -278.62 249.97 -279.88 250.62 C-281.48 251.48 -283.09 252.33 -284.7 253.19 C-285.86 253.8 -285.86 253.8 -287.04 254.42 C-288.95 255.49 -290.73 256.64 -292.53 257.89 C-295.75 259.99 -298.4 260.25 -302.19 260.62 C-302.52 260.95 -302.85 261.29 -303.19 261.62 C-303.09 262.58 -303 263.53 -302.9 264.5 C-302.54 268.44 -302.46 271.73 -303.19 275.62 C-306.35 279.2 -310.07 281.27 -314.19 283.62 C-315.38 284.59 -316.55 285.59 -317.69 286.62 C-320.19 288.62 -320.19 288.62 -323.19 288.62 C-323.19 286.64 -323.19 284.66 -323.19 282.62 C-321.19 281.62 -321.19 281.62 -318.19 280.62 C-317.67 280.11 -317.16 279.59 -316.62 279.06 C-315.91 278.35 -315.91 278.35 -315.19 277.62 C-314.53 277.62 -313.87 277.62 -313.19 277.62 C-311.13 275.78 -311.13 275.78 -310.19 273.62 C-309.53 273.62 -308.87 273.62 -308.19 273.62 C-308.12 270.61 -308.13 267.89 -308.75 264.94 C-309.19 262.62 -309.19 262.62 -308.19 259.62 C-309.18 259.62 -310.17 259.62 -311.19 259.62 C-311.23 260.35 -311.27 261.07 -311.31 261.81 C-313.2 267.87 -320.17 270.97 -325.33 274.1 C-327.31 275.49 -327.31 275.49 -328.04 277.62 C-328.27 280.73 -326.58 282.9 -325.19 285.62 C-325.52 286.62 -325.85 287.61 -326.19 288.62 C-327.2 286.88 -328.2 285.13 -329.19 283.38 C-329.74 282.4 -330.3 281.43 -330.88 280.42 C-332.19 277.62 -332.19 277.62 -332.19 273.62 C-332.85 273.62 -333.51 273.62 -334.19 273.62 C-328.88 285.54 -328.88 285.54 -322.34 296.8 C-320.41 299.85 -318.9 303.11 -317.32 306.36 C-316.14 308.79 -316.14 308.79 -314.38 311.62 C-313.19 313.62 -313.19 313.62 -313.19 315.62 C-312.53 315.62 -311.87 315.62 -311.19 315.62 C-309.52 317.74 -307.97 319.85 -306.44 322.06 C-305.99 322.7 -305.55 323.34 -305.09 323.99 C-303.78 325.86 -302.48 327.74 -301.19 329.62 C-300.54 330.56 -299.9 331.49 -299.23 332.45 C-295.34 338.17 -295.34 338.17 -294.19 341.62 C-293.58 341.88 -292.98 342.13 -292.36 342.38 C-289.12 344.24 -288.05 347.27 -286.44 350.5 C-283.27 356.47 -283.27 356.47 -278 360.5 C-274.79 361.45 -272.49 362.04 -269.19 361.62 C-270.83 361.25 -270.83 361.25 -272.5 360.88 C-276.25 359.6 -277.29 358.97 -279.19 355.62 C-278.22 355.25 -277.25 354.88 -276.25 354.5 C-272.2 352.81 -268.88 350.37 -265.4 347.73 C-262.59 346.32 -261.14 346.73 -258.19 347.62 C-258.85 348.62 -259.51 349.61 -260.19 350.62 C-259.38 351 -258.58 351.37 -257.75 351.75 C-255.19 353.62 -255.19 353.62 -254.38 356.81 C-254.31 357.74 -254.25 358.67 -254.19 359.62 C-254.85 359.62 -255.51 359.62 -256.19 359.62 C-255.93 361.11 -255.66 362.59 -255.38 364.06 C-255.22 364.89 -255.07 365.71 -254.92 366.56 C-254.68 367.24 -254.44 367.92 -254.19 368.62 C-253.2 368.95 -252.21 369.29 -251.19 369.62 C-250.09 371.44 -250.09 371.44 -249.12 373.62 C-247.87 376.78 -247.87 376.78 -245.19 378.62 C-245.35 379.68 -245.52 380.73 -245.69 381.81 C-246.09 384.85 -246.27 387.58 -246.19 390.62 C-246.19 393.77 -246.38 396.22 -247 399.25 C-247.15 400.03 -247.3 400.8 -247.46 401.6 C-248.19 403.62 -248.19 403.62 -251.19 405.62 C-253.51 406 -255.85 406.33 -258.19 406.62 C-261.47 407.38 -261.47 407.38 -263.19 410.62 C-263.5 413.17 -263.5 413.17 -263.45 416.03 C-263.46 417.08 -263.46 418.14 -263.46 419.22 C-263.45 420.88 -263.45 420.88 -263.44 422.56 C-263.45 424.21 -263.45 424.21 -263.46 425.89 C-263.46 427.47 -263.46 427.47 -263.45 429.09 C-263.45 430.54 -263.45 430.54 -263.45 432.02 C-263.18 434.69 -262.55 436.33 -261.19 438.62 C-260.57 438.57 -259.95 438.51 -259.32 438.45 C-252.56 438.09 -247.51 439.27 -242.19 443.62 C-239.16 447.76 -239.77 453.13 -239.62 458.04 C-239.54 459.91 -239.37 461.77 -239.19 463.62 C-238.53 463.95 -237.87 464.29 -237.19 464.62 C-237.19 465.62 -237.19 466.61 -237.19 467.62 C-236.2 467.95 -235.21 468.29 -234.19 468.62 C-230.41 477.7 -233.4 486.08 -236.55 494.86 C-238.02 499.19 -238.49 502.22 -237.19 506.62 C-235.62 509.44 -233.69 511.6 -231.19 513.62 C-227.67 514.52 -224.79 514.62 -221.19 514.62 C-221.4 513.17 -221.4 513.17 -221.62 511.69 C-221.82 510.33 -222 508.98 -222.19 507.62 C-222.29 506.85 -222.4 506.07 -222.51 505.26 C-222.61 504.47 -222.71 503.69 -222.81 502.88 C-222.96 501.77 -222.96 501.77 -223.1 500.64 C-223.19 498.62 -223.19 498.62 -222.19 495.62 C-222.52 494.96 -222.85 494.31 -223.19 493.62 C-224.18 493.32 -225.17 493.01 -226.19 492.69 C-227.18 492.34 -228.17 491.99 -229.19 491.62 C-229.52 490.63 -229.85 489.64 -230.19 488.62 C-222.5 482.42 -222.5 482.42 -218.15 482.81 C-215.59 483.87 -215.05 485.02 -213.75 487.44 C-211.23 491.74 -208.78 494.87 -203.81 496.31 C-201.06 496.68 -201.06 496.68 -197.75 496.69 C-193.15 497.9 -191.89 499.92 -189.25 503.71 C-188.19 505.62 -188.19 505.62 -188.19 507.62 C-184.2 508.44 -184.2 508.44 -180.19 508.62 C-179.36 507.94 -178.54 507.26 -177.69 506.56 C-175.19 504.62 -175.19 504.62 -173.11 504.8 C-171.11 505.32 -169.14 505.96 -167.19 506.62 C-165.02 501.68 -163.05 496.69 -161.19 491.62 C-160.2 491.62 -159.21 491.62 -158.19 491.62 C-156.69 493.13 -157.08 494.53 -157 496.62 C-156.31 502.45 -154.72 506.74 -150.19 510.62 C-146.76 512.25 -143.15 513.34 -139.53 514.45 C-133.71 516.28 -128.89 518.55 -125.19 523.62 C-124.25 526.25 -124.02 527.17 -125 529.81 C-126.19 531.62 -126.19 531.62 -128.19 532.62 C-130.12 532.76 -132.07 532.83 -134.01 532.87 C-135.18 532.9 -136.36 532.94 -137.57 532.97 C-140.04 533.03 -142.51 533.09 -144.98 533.14 C-151.33 533.33 -157.15 533.58 -163.19 535.62 C-165.58 538.76 -165.2 540.52 -164.75 544.44 C-162.97 550.49 -158.71 554.99 -153.5 558.38 C-150.42 559.54 -147.32 560.55 -144.19 561.56 C-139.53 563.07 -136.04 564.64 -132.19 567.62 C-131.4 568.16 -130.62 568.7 -129.81 569.25 C-129.01 569.93 -129.01 569.93 -128.19 570.62 C-128.19 571.28 -128.19 571.95 -128.19 572.62 C-126.87 573.28 -125.55 573.95 -124.19 574.62 C-124.19 575.28 -124.19 575.95 -124.19 576.62 C-123.2 576.3 -122.21 575.97 -121.19 575.62 C-120.86 577.28 -120.53 578.92 -120.19 580.62 C-190.48 580.62 -260.77 580.62 -333.19 580.62 C-326.53 572.85 -326.53 572.85 -323.56 570.44 C-318.27 565.94 -313.46 560.97 -308.58 556.03 C-307.24 554.68 -305.9 553.34 -304.55 552 C-296.24 543.67 -290.07 534.76 -284.19 524.62 C-283.65 523.72 -283.65 523.72 -283.11 522.79 C-275.6 509.78 -273.98 496.76 -273.5 482.05 C-273.33 478.55 -272.8 475.19 -272.21 471.73 C-270.99 464.14 -270.69 456.59 -270.5 448.91 C-270.44 446.53 -270.35 444.16 -270.27 441.78 C-270.23 440.26 -270.18 438.74 -270.14 437.21 C-270.11 436.51 -270.09 435.81 -270.06 435.08 C-269.98 431.28 -270.38 428.92 -272.19 425.62 C-272.55 422.99 -272.55 422.99 -272.71 420 C-272.78 418.91 -272.85 417.82 -272.92 416.69 C-273.02 414.96 -273.02 414.96 -273.12 413.19 C-274.05 399.79 -275.73 388.9 -281.7 376.71 C-283.44 373.1 -284.86 369.42 -286.23 365.65 C-287.27 363.46 -288.44 362.28 -290.19 360.62 C-291.13 358.98 -292.06 357.34 -292.98 355.68 C-294.31 353.42 -295.78 351.32 -297.31 349.19 C-300.44 344.79 -303.3 340.28 -306.12 335.69 C-310.95 327.88 -315.9 320.15 -322.12 313.38 C-330.58 303.73 -336.26 291.05 -342.1 279.72 C-343.14 277.71 -344.21 275.72 -345.29 273.73 C-358.13 249.57 -364.39 222.15 -365.61 194.97 C-365.66 193.8 -365.71 192.64 -365.77 191.45 C-365.8 190.42 -365.84 189.39 -365.87 188.33 C-366.19 185.6 -366.92 184.02 -368.19 181.62 C-368.62 175.2 -367.59 169.24 -366.38 162.94 C-366.19 161.97 -366.01 161.01 -365.83 160.02 C-364.47 152.84 -362.95 145.71 -361.19 138.62 C-360.53 138.62 -359.87 138.62 -359.19 138.62 C-359.05 138.03 -358.92 137.44 -358.78 136.82 C-356.87 129.47 -353.47 123.84 -349.19 117.62 C-348.44 116.5 -347.69 115.38 -346.94 114.25 C-346.36 113.38 -345.78 112.52 -345.19 111.62 C-344.67 110.74 -344.16 109.85 -343.62 108.94 C-342.3 106.81 -341.11 105.22 -339.19 103.62 C-338.53 103.62 -337.87 103.62 -337.19 103.62 C-336.86 102.97 -336.53 102.31 -336.19 101.62 C-335.58 101.96 -334.98 102.3 -334.35 102.65 C-312.22 114.43 -283.24 107.49 -259.38 105.06 C-258.12 104.94 -256.87 104.81 -255.58 104.68 C-254.41 104.56 -253.25 104.43 -252.04 104.31 C-251.01 104.2 -249.97 104.09 -248.91 103.98 C-246.29 103.69 -246.29 103.69 -244.17 103.1 C-241.63 102.49 -239.18 102.39 -236.56 102.27 C-217.74 101.23 -201.53 98.03 -184.03 91.12 C-179.84 89.49 -175.73 88.25 -171.34 87.24 C-165.02 85.72 -159.44 83.25 -153.62 80.38 C-152.61 79.88 -151.6 79.39 -150.56 78.89 C-145.65 76.47 -140.95 73.99 -136.44 70.88 C-130.52 66.85 -123.94 64.81 -117.24 62.44 C-100.73 56.59 -82.4 49.84 -69.81 37.25 C-58.38 25.82 -43.88 17.21 -30.25 8.69 C-29.39 8.14 -28.52 7.6 -27.63 7.04 C-9.57 -4.13 -9.57 -4.13 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(938.1875,699.375)\"})),_path14||(_path14=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.75 0.25 1.51 0.5 2.28 0.76 C6.65 2.34 9.74 4.23 13.31 7.25 C15.41 8.26 15.41 8.26 17.56 8.88 C18.33 9.11 19.1 9.35 19.89 9.6 C23.06 10.45 26.24 11.13 29.46 11.72 C31.31 12.25 31.31 12.25 33.31 14.25 C34.91 14.76 36.54 15.19 38.17 15.58 C44.52 17.23 50.5 19.51 56.56 22 C57.71 22.47 58.86 22.94 60.04 23.43 C69.39 27.32 78.56 31.55 87.69 35.94 C88.65 36.4 88.65 36.4 89.62 36.86 C98.54 41.14 106.98 45.92 115.31 51.25 C116.4 51.94 117.48 52.62 118.59 53.33 C125.45 57.71 131.5 62.56 137.31 68.25 C138.02 68.92 138.72 69.58 139.44 70.27 C147.26 78.26 152.84 88.05 158.65 97.54 C159.78 99.39 160.94 101.23 162.11 103.06 C162.95 104.39 162.95 104.39 163.8 105.75 C164.56 106.94 164.56 106.94 165.34 108.16 C166.31 110.25 166.31 110.25 165.31 113.25 C166.12 115.6 166.12 115.6 167.44 118.12 C176.14 136.64 178.44 153.47 179.06 173.69 C179.09 174.43 179.11 175.17 179.13 175.93 C179.2 178.06 179.25 180.18 179.3 182.31 C179.32 183.55 179.35 184.79 179.38 186.07 C179.25 192.28 179.25 192.28 176.81 194.81 C174.45 196.17 172.61 196.74 170 197.44 C165.13 198.93 162.98 201.55 159.86 205.44 C157.84 207.8 156.38 208.71 153.31 209.25 C146.99 208.98 144.03 206.97 139.56 202.88 C139 202.38 138.44 201.88 137.86 201.38 C130.72 195.07 130.72 195.07 129.31 192.25 C127.65 191.57 125.98 190.9 124.31 190.25 C121.85 189.04 119.64 187.73 117.31 186.25 C116.98 185.26 116.65 184.27 116.31 183.25 C115.47 182.59 114.62 181.93 113.75 181.25 C112.54 180.26 112.54 180.26 111.31 179.25 C111.31 178.26 111.31 177.27 111.31 176.25 C110.53 175.94 109.75 175.63 108.94 175.31 C106.31 174.25 106.31 174.25 104.31 173.25 C103.98 172.26 103.65 171.27 103.31 170.25 C101.13 168.82 101.13 168.82 98.5 167.62 C97.63 167.2 96.75 166.77 95.86 166.34 C93.66 165.4 91.64 164.74 89.31 164.25 C91.67 169.57 94.06 173.2 98.31 177.25 C111.31 192.21 111.31 192.21 111.31 200.25 C112.3 200.58 113.29 200.91 114.31 201.25 C115.31 204.25 115.31 204.25 114.38 206.56 C113.1 209.25 113.1 209.25 113.44 212.38 C113.31 215.25 113.31 215.25 111.69 217 C109.31 218.25 109.31 218.25 106.44 219.12 C102.53 220.53 100.38 222.48 97.31 225.25 C93.02 223.6 88.73 221.95 84.31 220.25 C84.31 219.59 84.31 218.93 84.31 218.25 C83.01 218.04 81.71 217.84 80.38 217.62 C74.73 216.34 70.88 213.72 66.31 210.25 C65.5 209.64 65.5 209.64 64.66 209.02 C58.07 204.11 52.04 199.32 46.83 192.91 C44.31 190.15 41.71 188.79 38.31 187.25 C36.99 187.25 35.67 187.25 34.31 187.25 C32.8 191.77 33.9 195.76 35.31 200.25 C37.27 202.71 37.27 202.71 39.31 204.25 C39.31 204.91 39.31 205.57 39.31 206.25 C37.13 206.99 37.13 206.99 34.31 207.25 C31.8 205.75 31.8 205.75 29.17 203.47 C28.21 202.64 27.25 201.81 26.26 200.95 C21.57 196.65 17.03 192.22 12.56 187.69 C11.22 186.35 11.22 186.35 9.86 184.98 C5.35 180.45 1.01 175.84 -3.15 170.99 C-5.34 168.5 -7.73 166.23 -10.12 163.94 C-14.68 159.46 -18.35 154.81 -21.84 149.46 C-24.5 146.28 -27.1 145.47 -31.15 144.92 C-34.17 144.12 -35.01 143.24 -36.92 140.82 C-37.49 140.11 -38.06 139.4 -38.65 138.68 C-39.24 137.92 -39.83 137.16 -40.44 136.38 C-41.05 135.61 -41.67 134.84 -42.3 134.04 C-43.53 132.5 -44.76 130.95 -45.99 129.4 C-48.22 126.58 -50.51 123.82 -52.81 121.06 C-54.99 118.4 -57.08 115.77 -58.94 112.88 C-60.9 109.93 -63.12 107.69 -65.69 105.25 C-69.2 101.85 -72.28 98.33 -75.31 94.5 C-80.88 87.64 -87.47 82.42 -94.51 77.12 C-95.23 76.51 -95.95 75.89 -96.69 75.25 C-96.69 74.59 -96.69 73.93 -96.69 73.25 C-98.67 72.75 -98.67 72.75 -100.69 72.25 C-100.69 71.59 -100.69 70.93 -100.69 70.25 C-107.84 69.09 -113.63 69.65 -120.69 71.12 C-122.56 71.5 -124.44 71.87 -126.31 72.24 C-127.21 72.42 -128.11 72.6 -129.04 72.78 C-132.26 73.35 -135.46 73.71 -138.71 74 C-141.83 74.39 -144.7 75.3 -147.69 76.25 C-148.02 75.92 -148.35 75.59 -148.69 75.25 C-149.92 75.42 -151.16 75.58 -152.44 75.75 C-158.52 76.56 -158.52 76.56 -161.69 75.25 C-163.6 72.29 -163.69 70.28 -163.69 66.75 C-162.43 62.36 -160.5 60.49 -156.69 58.25 C-144.71 52.22 -131.58 50.79 -118.38 50.06 C-117.04 49.98 -115.7 49.9 -114.36 49.81 C-111.14 49.62 -107.91 49.43 -104.69 49.25 C-105.35 48.26 -106.01 47.27 -106.69 46.25 C-112.39 45.36 -117.77 46.2 -123.25 47.8 C-126.76 48.45 -130.25 48.48 -133.81 48.5 C-134.49 48.51 -135.18 48.52 -135.88 48.53 C-140.18 48.5 -143.69 47.82 -147.69 46.25 C-148.41 44.01 -148.41 44.01 -148.69 41.25 C-144.34 34.43 -136.71 30.13 -130.02 25.86 C-125.36 22.85 -121.95 19.8 -118.69 15.25 C-119.18 14.26 -119.18 14.26 -119.69 13.25 C-118.74 12.63 -117.79 12.01 -116.81 11.38 C-113.74 9.43 -113.74 9.43 -111.69 7.25 C-110.7 7.25 -109.71 7.25 -108.69 7.25 C-108.69 6.59 -108.69 5.93 -108.69 5.25 C-100.18 1.87 -91.14 -1.14 -82.14 2.19 C-79.81 3.31 -79.81 3.31 -77.82 4.47 C-74.83 5.56 -72.82 4.83 -69.69 4.25 C-68.26 4.03 -66.83 3.81 -65.4 3.6 C-64.61 3.48 -63.82 3.37 -63.01 3.25 C-62.18 3.12 -61.35 3 -60.49 2.88 C-58.71 2.61 -56.92 2.34 -55.14 2.08 C-52.34 1.66 -49.55 1.25 -46.75 0.83 C-44.04 0.43 -41.33 0.03 -38.62 -0.38 C-37.78 -0.5 -36.95 -0.62 -36.09 -0.75 C-35.3 -0.86 -34.52 -0.98 -33.72 -1.1 C-33.03 -1.2 -32.35 -1.3 -31.65 -1.41 C-29.66 -1.73 -29.66 -1.73 -27.64 -2.27 C-18.36 -4.55 -8.87 -2.98 0 0 Z \",fill:\"#351547\",transform:\"translate(740.6875,47.75)\"})),_path15||(_path15=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.97 0.63 7.71 3.27 11.44 6.44 C12.16 6.94 12.87 7.44 13.61 7.95 C15.44 9.44 15.44 9.44 16.44 12.44 C17.08 13.08 17.72 13.72 18.38 14.38 C20.37 16.37 21.23 17.94 22.44 20.44 C23.13 21.04 23.13 21.04 23.83 21.66 C26.05 24.12 26.92 26.73 28.12 29.81 C30.7 36.17 33.89 41.68 37.7 47.4 C39.63 50.78 40.52 53.68 41.44 57.44 C42.1 57.44 42.76 57.44 43.44 57.44 C43.88 58.36 44.33 59.27 44.79 60.22 C48.76 68.35 48.76 68.35 53.38 76.12 C55.44 79.44 55.44 79.44 55.44 82.44 C56.1 82.44 56.76 82.44 57.44 82.44 C57.85 83.28 58.26 84.13 58.69 85 C61.44 90.41 63.94 95.24 68.44 99.44 C70.44 102.44 70.44 102.44 70.44 105.44 C71.1 105.44 71.76 105.44 72.44 105.44 C73.69 106.86 73.69 106.86 75 108.75 C75.65 109.67 75.65 109.67 76.32 110.61 C77.44 112.44 77.44 112.44 78.44 115.44 C79.14 115.99 79.84 116.55 80.56 117.12 C83.04 119.11 84.84 120.97 86.88 123.38 C88.99 125.86 91.05 128.05 93.62 130.06 C96.63 132.6 98.27 135.19 100.44 138.44 C105.81 143.43 112 147.3 118.21 151.16 C126.42 156.27 126.42 156.27 130 159.5 C137.06 165.84 145.79 169.71 154.44 173.38 C155.93 174.02 155.93 174.02 157.45 174.67 C165.11 177.93 172.84 181.01 180.62 183.96 C185.53 185.84 190.3 187.83 194.94 190.31 C199.32 192.54 203.91 194 208.57 195.5 C216.66 198.13 224.55 201.27 232.44 204.44 C232.44 205.43 232.44 206.42 232.44 207.44 C233.27 207.68 234.09 207.91 234.95 208.16 C239.04 209.66 242.58 211.64 246.31 213.88 C247.05 214.31 247.78 214.75 248.54 215.2 C253.82 218.37 258.98 221.71 264.06 225.19 C264.7 225.62 265.34 226.06 266 226.51 C278.11 234.94 287.51 244.07 292 258.38 C292.45 259.76 292.45 259.76 292.91 261.17 C295.07 267.95 296.83 274.77 298.46 281.7 C299.8 286.82 301.6 291.7 303.48 296.64 C304.44 299.44 304.44 299.44 304.44 302.44 C305.1 302.44 305.76 302.44 306.44 302.44 C306.85 305.37 307.25 308.31 307.62 311.25 C307.75 312.08 307.87 312.92 307.99 313.78 C308.14 314.98 308.14 314.98 308.29 316.21 C308.39 316.95 308.49 317.68 308.59 318.44 C308.44 320.44 308.44 320.44 306.95 322.2 C306.45 322.61 305.95 323.02 305.44 323.44 C305.77 324.1 306.1 324.76 306.44 325.44 C301.16 326.1 295.88 326.76 290.44 327.44 C290.48 328.88 290.52 330.33 290.56 331.81 C290.63 334.27 290.63 334.27 290.44 336.44 C289.78 337.1 289.12 337.76 288.44 338.44 C288.15 339.18 287.86 339.92 287.56 340.69 C286.24 343.92 284.43 346.58 282.44 349.44 C284.75 349.77 287.06 350.1 289.44 350.44 C289.44 349.78 289.44 349.12 289.44 348.44 C290.43 348.44 291.42 348.44 292.44 348.44 C292.44 349.43 292.44 350.42 292.44 351.44 C293.43 352.1 294.42 352.76 295.44 353.44 C295.44 354.1 295.44 354.76 295.44 355.44 C296.1 355.44 296.76 355.44 297.44 355.44 C297.77 354.45 298.1 353.46 298.44 352.44 C301.32 357.32 302.39 361.82 302.44 367.44 C302.11 368.43 301.78 369.42 301.44 370.44 C301.32 371.92 301.21 373.39 301.12 374.88 C300.69 379.2 299.61 380.45 296.44 383.44 C295.91 384.94 295.43 386.46 295 388 C293.98 391.44 293.71 392.23 290.75 394.5 C289.61 394.96 289.61 394.96 288.44 395.44 C284.14 393.34 282.02 391.95 280.27 387.42 C279.49 384.31 278.8 381.21 278.24 378.05 C277.88 376.07 277.47 374.09 277.05 372.12 C275.74 365.35 275.21 360.93 277.44 354.44 C276.78 354.11 276.12 353.78 275.44 353.44 C274.78 354.43 274.12 355.42 273.44 356.44 C272.3 352.17 271.44 348.87 271.44 344.44 C270.78 344.44 270.12 344.44 269.44 344.44 C269.44 336.85 269.44 329.26 269.44 321.44 C270.1 321.11 270.76 320.78 271.44 320.44 C272.09 318.41 272.09 318.41 272.44 316.44 C273.1 316.44 273.76 316.44 274.44 316.44 C274.44 317.1 274.44 317.76 274.44 318.44 C275.1 318.11 275.76 317.78 276.44 317.44 C278.77 317.4 281.1 317.39 283.44 317.44 C282.91 314.92 282.91 314.92 281.44 312.44 C278.52 311.4 278.52 311.4 275.12 311 C267.75 309.54 267.75 309.54 265.31 306.69 C261.95 300.87 260.34 296.15 259.06 289.56 C257.72 282.94 255.81 276.76 250.88 271.9 C249.44 270.44 249.44 270.44 247.88 267.19 C242.76 258.05 230.36 253.47 221.38 248.88 C220.73 248.54 220.09 248.21 219.43 247.87 C210.41 243.24 201.45 239.1 191.73 236.15 C188.95 235.29 186.19 234.36 183.43 233.42 C167.15 227.66 167.15 227.66 150.44 223.44 C152.57 225.78 154.55 227.14 157.44 228.44 C157.44 229.1 157.44 229.76 157.44 230.44 C158.65 230.77 159.87 231.1 161.12 231.44 C169.02 234.04 177.12 239.05 183.44 244.44 C183.44 245.1 183.44 245.76 183.44 246.44 C184.06 246.58 184.67 246.73 185.31 246.88 C187.44 247.44 187.44 247.44 189.44 248.44 C189.44 249.1 189.44 249.76 189.44 250.44 C189.97 250.52 190.51 250.6 191.06 250.69 C194.27 251.7 196.7 253.51 199.44 255.44 C198.78 256.76 198.12 258.08 197.44 259.44 C192.51 259.02 190.84 256.84 187.44 253.44 C185.13 252.38 182.79 251.38 180.44 250.44 C179.8 249.88 179.16 249.32 178.5 248.75 C175.34 246.74 172.08 246.89 168.44 247.44 C166.24 248.39 166.24 248.39 164.44 249.44 C165.47 250.11 166.51 250.79 167.58 251.48 C168.95 252.39 170.32 253.29 171.69 254.19 C172.37 254.63 173.05 255.07 173.75 255.53 C176.65 257.45 179.19 259.18 181.61 261.7 C183.85 263.83 185.46 263.84 188.44 264.44 C192.77 268.46 195.68 273.73 198.38 278.94 C202.02 285.87 206.86 291.46 212.94 296.38 C213.76 297.06 214.59 297.74 215.44 298.44 C215.44 299.1 215.44 299.76 215.44 300.44 C214.78 300.44 214.12 300.44 213.44 300.44 C213.44 299.78 213.44 299.12 213.44 298.44 C212.78 298.77 212.12 299.1 211.44 299.44 C211.5 300.63 211.56 301.83 211.62 303.06 C211.61 311.67 210.42 321.87 204.44 328.44 C203.78 328.44 203.12 328.44 202.44 328.44 C202.11 330.09 201.78 331.74 201.44 333.44 C195.54 331.2 189.78 328.73 184.06 326.06 C183.09 325.61 183.09 325.61 182.1 325.15 C179.19 323.79 176.35 322.39 173.55 320.83 C164.11 315.6 153.91 313.63 143.44 311.44 C143.44 310.78 143.44 310.12 143.44 309.44 C142.71 309.34 141.99 309.24 141.24 309.13 C138.1 308.35 136.24 307.2 133.62 305.31 C132.32 304.38 132.32 304.38 130.99 303.42 C128.61 301.57 126.44 299.63 124.25 297.56 C120.67 294.3 118.25 293.54 113.44 293.44 C113.11 291.79 112.78 290.14 112.44 288.44 C113.43 288.11 114.42 287.78 115.44 287.44 C113.13 286.12 110.82 284.8 108.44 283.44 C108.77 284.43 109.1 285.42 109.44 286.44 C109.11 287.1 108.78 287.76 108.44 288.44 C105.06 287.75 105.06 287.75 101.44 286.44 C100 283.81 100 283.81 99.44 281.44 C100.76 281.11 102.08 280.78 103.44 280.44 C100.31 279.58 98.3 279.46 95.06 280 C90.92 280.5 88.29 279.98 84.44 278.44 C83.94 276.95 83.94 276.95 83.44 275.44 C81.55 275.04 81.55 275.04 79.31 274.94 C75.75 274.31 74.65 273.69 72.29 270.87 C70.56 268.1 68.94 265.33 67.44 262.44 C66.45 263.1 65.46 263.76 64.44 264.44 C60.53 263.77 58.89 263.07 56.56 259.81 C55.86 258.7 55.16 257.59 54.44 256.44 C49.1 250.46 43.66 245.93 36.44 242.44 C35.69 241.96 34.95 241.49 34.19 241 C31.26 239.34 28.4 238.31 25.21 237.28 C23.44 236.44 23.44 236.44 21.44 233.44 C21.01 228.13 20.9 224.68 24.44 220.44 C31.43 214.34 41.41 212.83 50.44 213.44 C52.79 213.71 55.1 214.05 57.44 214.44 C57.44 213.78 57.44 213.12 57.44 212.44 C58.55 212.47 59.66 212.51 60.8 212.54 C69.17 212.72 76.56 212.69 84.44 209.44 C84.11 208.45 83.78 207.46 83.44 206.44 C81.45 205.73 79.45 205.07 77.44 204.44 C77.11 203.78 76.78 203.12 76.44 202.44 C73.35 200.99 70.09 199.98 66.88 198.88 C65.55 198.4 65.55 198.4 64.2 197.92 C57.53 195.59 51.6 193.93 44.5 195.06 C40.48 195.68 37.87 194.7 34.13 193.26 C30.71 192.21 27.36 191.85 23.81 191.44 C15.92 190.5 15.92 190.5 12.5 188.88 C9.43 187.21 9.43 187.21 5.69 187.2 C0.66 186.64 -2.04 184.13 -5.62 180.75 C-6.2 180.23 -6.77 179.71 -7.36 179.18 C-8.52 178.14 -9.67 177.09 -10.81 176.03 C-13.18 173.87 -15.64 171.82 -18.11 169.78 C-20.12 167.93 -21.28 165.83 -22.56 163.44 C-23.51 162.3 -23.51 162.3 -24.48 161.14 C-27.9 156.7 -29.6 151.64 -31.56 146.44 C-31.89 145.59 -32.21 144.73 -32.55 143.86 C-34.72 137.51 -35.62 131.11 -34.56 124.44 C-32.56 122 -32.56 122 -29.56 120.44 C-28.22 119.64 -26.89 118.82 -25.56 118 C-24.88 117.58 -24.19 117.17 -23.49 116.74 C-20.85 114.96 -18.77 112.71 -16.56 110.44 C-15.08 109.94 -15.08 109.94 -13.56 109.44 C-13.56 110.1 -13.56 110.76 -13.56 111.44 C-11.71 111.13 -11.71 111.13 -9.81 110.81 C-7.29 110.51 -5.72 110.39 -3.25 111.06 C-1.56 112.44 -1.56 112.44 -0.36 114.61 C1.96 118.27 4.82 121.07 7.9 124.09 C8.53 124.72 9.15 125.34 9.8 125.99 C11.8 127.98 13.81 129.96 15.81 131.94 C17.15 133.27 18.5 134.6 19.84 135.93 C22.85 138.93 25.87 141.92 28.9 144.91 C30.32 146.32 31.72 147.74 33.12 149.15 C36.34 152.33 39.8 155.15 43.31 158 C44.34 158.85 44.34 158.85 45.38 159.71 C50.75 164.08 56.66 168.61 63.44 170.44 C65.72 169.67 65.72 169.67 67.44 168.44 C66.45 167.65 65.46 166.87 64.44 166.06 C63.45 165.2 62.46 164.33 61.44 163.44 C61.44 162.78 61.44 162.12 61.44 161.44 C60.78 161.25 60.12 161.07 59.44 160.88 C52.12 157.37 48.06 152.11 44.19 145.18 C42.12 141.95 39.68 139.21 37.06 136.44 C24.79 123.43 24.79 123.43 22 117.25 C20.28 114.16 18.85 113.15 16 111.12 C11.88 108.09 10.34 105.74 8.59 101.03 C7.11 97.7 5.1 94.83 3 91.88 C2.6 91.32 2.21 90.76 1.8 90.19 C1.42 89.64 1.03 89.09 0.63 88.53 C-4.35 81.5 -7.73 76.45 -7.62 67.69 C-7.62 66.7 -7.61 65.72 -7.6 64.7 C-7.59 63.96 -7.57 63.21 -7.56 62.44 C-8.22 62.44 -8.88 62.44 -9.56 62.44 C-12.6 54.86 -13.03 48.12 -13.12 40 C-13.23 32.65 -13.53 25.77 -15.15 18.59 C-15.71 15.65 -15.61 12.97 -15.31 10 C-15.22 9.01 -15.14 8.02 -15.05 7 C-14.56 4.44 -14.56 4.44 -12.56 1.44 C-8.52 0.36 -4.15 0.51 0 0 Z \",fill:\"#401D4E\",transform:\"translate(958.5625,428.5625)\"})),_path16||(_path16=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.26 0.76 6.86 3.44 9.81 6.5 C11.17 9.22 10.88 11.49 10.81 14.5 C10.81 17 11.56 18.35 12.81 20.5 C13.47 20.83 14.13 21.16 14.81 21.5 C14.67 29.17 13.61 35.84 11.31 43.12 C7.7 54.2 7.7 54.2 8.81 65.5 C9.36 70.17 9.32 73.55 7.06 77.75 C5.95 79.11 5.95 79.11 4.81 80.5 C2.01 83.89 2.01 83.89 -0.25 87.62 C-1.19 89.5 -1.19 89.5 -2.81 90.88 C-4.45 92.53 -4.45 92.53 -4.69 95.44 C-4.03 99.49 -2.38 100.07 0.81 102.5 C2.18 105.17 2.18 105.17 2.81 108.5 C1.85 111.21 0.89 113.34 -0.5 115.81 C-1.05 116.84 -1.05 116.84 -1.61 117.9 C-2.39 119.36 -3.18 120.81 -3.97 122.27 C-5.18 124.49 -6.36 126.73 -7.52 128.97 C-11.18 136.01 -14.9 142.94 -19.19 149.62 C-20.42 151.59 -20.42 151.59 -20.19 154.5 C-20.85 154.83 -21.51 155.16 -22.19 155.5 C-23.17 157.44 -23.17 157.44 -24.06 159.75 C-25.97 164.21 -28.07 167.89 -32 170.88 C-33.46 172.6 -33.46 172.6 -33.56 175.69 C-32.84 179.89 -29.93 181.54 -26.62 183.94 C-24.83 185.15 -23.02 186.34 -21.19 187.5 C-15.98 185.03 -12.03 181.69 -8.5 177.19 C-7.74 176.3 -6.97 175.41 -6.19 174.5 C-5.2 174.5 -4.21 174.5 -3.19 174.5 C-1.06 172.74 -1.06 172.74 1 170.5 C1.72 169.76 2.43 169.01 3.17 168.25 C3.71 167.67 4.25 167.1 4.81 166.5 C5.97 169.97 5.85 171.04 4.81 174.5 C3.49 177.09 1.98 179.54 0.44 182 C0.04 182.65 -0.36 183.3 -0.77 183.97 C-2.48 186.76 -4.21 189.53 -5.98 192.28 C-7.43 194.52 -7.43 194.52 -7.19 197.5 C-5.87 197.5 -4.55 197.5 -3.19 197.5 C-4.85 201.01 -6.91 204.05 -9.16 207.21 C-10.87 211.03 -10.87 214.53 -9.49 218.5 C-8.55 220.61 -7.52 222.64 -6.44 224.69 C-5.92 225.73 -5.92 225.73 -5.38 226.8 C-3.09 231.26 -0.83 235.18 3.81 237.5 C6.02 237.73 8.23 237.91 10.44 238.06 C11.63 238.15 12.81 238.23 14.04 238.32 C14.95 238.38 15.87 238.44 16.81 238.5 C17.14 239.49 17.47 240.48 17.81 241.5 C14.25 243.76 11.69 243.57 7.56 243.12 C6.48 243.01 5.41 242.9 4.3 242.79 C3.07 242.65 3.07 242.65 1.81 242.5 C1.48 243.16 1.15 243.82 0.81 244.5 C0.19 243.55 -0.42 242.6 -1.06 241.62 C-3.01 238.56 -3.01 238.56 -5.19 236.5 C-8.04 232.58 -9.66 229.07 -11.19 224.5 C-12.56 222.79 -12.56 222.79 -14.19 221.5 C-15.19 220.5 -16.19 219.5 -17.19 218.5 C-17.52 219.16 -17.85 219.82 -18.19 220.5 C-18.54 221.04 -18.89 221.57 -19.25 222.12 C-20.71 225.81 -21.22 228.69 -20.19 232.5 C-18.13 235.75 -15.87 238.69 -13.45 241.67 C-10.96 244.78 -8.97 247.94 -7.19 251.5 C-16.91 253.07 -16.91 253.07 -22.19 249.5 C-25.9 249.25 -25.9 249.25 -29.19 249.5 C-28.2 246.2 -27.21 242.9 -26.19 239.5 C-31.09 246.45 -35.19 254.82 -35.19 263.5 C-34.2 263.17 -33.21 262.84 -32.19 262.5 C-31.88 261.55 -31.57 260.6 -31.25 259.62 C-30.08 256.19 -29.35 255.17 -26.19 253.5 C-24.87 253.5 -23.55 253.5 -22.19 253.5 C-22.85 255.15 -23.51 256.8 -24.19 258.5 C-24.85 258.5 -25.51 258.5 -26.19 258.5 C-26.37 259.2 -26.56 259.9 -26.75 260.62 C-28.7 264.52 -31.54 267.13 -35.19 269.5 C-36.18 269.5 -37.17 269.5 -38.19 269.5 C-38.46 270.49 -38.72 271.48 -39 272.5 C-39.77 275.27 -40.75 277.85 -41.88 280.5 C-43.39 284.49 -43.27 287.31 -42.19 291.5 C-41.23 293.52 -40.24 295.53 -39.19 297.5 C-39.19 298.16 -39.19 298.82 -39.19 299.5 C-37.87 299.83 -36.55 300.16 -35.19 300.5 C-34.82 300.03 -34.46 299.56 -34.09 299.07 C-30.82 295.03 -28.12 292.5 -23.19 290.5 C-23.48 295.21 -25.77 297.79 -28.71 301.24 C-32.58 307.16 -32.37 313.3 -32.19 320.06 C-31.98 334.66 -32.76 349.2 -33.48 363.78 C-34.18 378.39 -34.73 393.01 -33.69 407.62 C-33.25 414.9 -33.05 422.15 -33 429.44 C-32.99 430.34 -32.97 431.24 -32.96 432.17 C-32.95 442.01 -34.12 451.74 -35.19 461.5 C-44.88 461.62 -54.57 461.7 -64.26 461.76 C-68.77 461.79 -73.27 461.82 -77.77 461.88 C-82.11 461.93 -86.45 461.96 -90.8 461.97 C-92.46 461.98 -94.11 462 -95.77 462.03 C-98.09 462.07 -100.41 462.07 -102.74 462.07 C-103.42 462.09 -104.1 462.1 -104.81 462.12 C-108.66 462.08 -110.04 461.63 -112.97 459.03 C-113.7 458.19 -114.43 457.36 -115.19 456.5 C-116.18 456.17 -117.17 455.84 -118.19 455.5 C-118.19 453.85 -118.19 452.2 -118.19 450.5 C-117.2 450.83 -116.21 451.16 -115.19 451.5 C-115.21 450.89 -115.23 450.27 -115.26 449.64 C-115.28 448.83 -115.29 448.02 -115.31 447.19 C-115.34 446.39 -115.36 445.59 -115.38 444.76 C-115.19 442.5 -115.19 442.5 -113.19 439.5 C-114.51 439.83 -115.83 440.16 -117.19 440.5 C-116.86 438.52 -116.53 436.54 -116.19 434.5 C-115.2 434.5 -114.21 434.5 -113.19 434.5 C-113.52 433.18 -113.85 431.86 -114.19 430.5 C-114.85 430.5 -115.51 430.5 -116.19 430.5 C-115.86 427.53 -115.53 424.56 -115.19 421.5 C-113.87 421.17 -112.55 420.84 -111.19 420.5 C-106.96 418.54 -103.85 416.57 -101.38 412.56 C-97.36 401.13 -97.36 401.13 -98.19 389.5 C-102.44 385.39 -107.42 383.86 -113.19 383.5 C-117.91 389.52 -121.45 395.33 -124.19 402.5 C-126.17 402.5 -128.15 402.5 -130.19 402.5 C-130.85 400.19 -131.51 397.88 -132.19 395.5 C-137.89 395.97 -141.35 397.44 -146.19 400.5 C-145.86 402.15 -145.53 403.8 -145.19 405.5 C-150.06 404.62 -150.06 404.62 -151.19 403.5 C-154.07 403.2 -155.61 403.08 -158 404.81 C-159.48 406.56 -159.48 406.56 -159.19 409.5 C-158.13 409.57 -158.13 409.57 -157.05 409.64 C-153.84 409.85 -150.64 410.08 -147.44 410.31 C-145.77 410.42 -145.77 410.42 -144.07 410.53 C-142.47 410.65 -142.47 410.65 -140.83 410.77 C-139.84 410.84 -138.86 410.91 -137.84 410.98 C-134.88 411.56 -133.53 412.66 -131.19 414.5 C-128.49 414.28 -128.49 414.28 -126.19 413.5 C-127.85 417.1 -129.76 420.36 -132.19 423.5 C-133.51 423.5 -134.83 423.5 -136.19 423.5 C-136.64 424.47 -137.1 425.44 -137.56 426.44 C-139.19 429.5 -139.19 429.5 -141.19 430.5 C-148.76 430.26 -155.7 428.52 -162.19 424.5 C-164.25 422.03 -165.87 419.48 -167.55 416.74 C-170.15 413.19 -173.05 412.48 -177.19 411.5 C-186.86 408.69 -186.86 408.69 -190.19 404.5 C-189.53 404.5 -188.87 404.5 -188.19 404.5 C-188.5 403.53 -188.8 402.55 -189.12 401.55 C-190.33 397.32 -190.81 393.11 -191.25 388.75 C-191.8 383.05 -191.8 383.05 -193.19 377.5 C-192.12 374.84 -192.12 374.84 -190.19 372.5 C-187.5 371.96 -187.5 371.96 -184.27 372.08 C-183.1 372.11 -181.92 372.13 -180.72 372.16 C-178.88 372.23 -178.88 372.23 -177 372.31 C-165.91 372.84 -165.91 372.84 -155.19 370.5 C-153.7 367.89 -153.7 367.89 -153.19 364.5 C-152.73 363.08 -152.24 361.66 -151.75 360.25 C-150.91 357.78 -150.14 355.33 -149.47 352.8 C-149.23 351.92 -148.99 351.04 -148.75 350.12 C-148.55 349.31 -148.34 348.5 -148.13 347.66 C-146.95 344.94 -145.74 343.97 -143.19 342.5 C-135.87 340.73 -128.51 344.02 -122.19 347.5 C-120.84 348.82 -119.5 350.15 -118.19 351.5 C-117.53 351.5 -116.87 351.5 -116.19 351.5 C-113.42 347.35 -113.23 343.43 -113.19 338.5 C-113.96 335.5 -113.96 335.5 -115.19 333.5 C-114.2 333.17 -113.21 332.84 -112.19 332.5 C-110.37 336.32 -110.02 338.93 -110.5 343.12 C-110.6 344.07 -110.7 345.01 -110.8 345.98 C-111.19 348.5 -111.19 348.5 -112.19 351.5 C-112.26 354.07 -112.28 356.62 -112.25 359.19 C-112.25 359.89 -112.24 360.59 -112.24 361.31 C-112.22 363.04 -112.21 364.77 -112.19 366.5 C-110.23 360.49 -109.81 355.01 -109.62 348.73 C-109.44 344.33 -108.96 340.6 -107.19 336.5 C-106.53 336.17 -105.87 335.84 -105.19 335.5 C-105.96 334.76 -105.96 334.76 -106.75 334 C-108.9 330.26 -107.86 327.72 -107.19 323.5 C-107.68 322.01 -107.68 322.01 -108.19 320.5 C-109.18 320.17 -110.17 319.84 -111.19 319.5 C-112.52 317.83 -113.85 316.17 -115.19 314.5 C-116.3 313.59 -117.43 312.69 -118.56 311.81 C-126.8 304.83 -129.29 295.64 -131.7 285.45 C-132.78 281.12 -134.15 276.88 -135.45 272.62 C-136.2 269.47 -136.32 266.73 -136.19 263.5 C-135.53 264.49 -134.87 265.48 -134.19 266.5 C-134.85 262.21 -135.51 257.92 -136.19 253.5 C-136.85 253.5 -137.51 253.5 -138.19 253.5 C-137.69 250.53 -137.69 250.53 -137.19 247.5 C-136.53 247.5 -135.87 247.5 -135.19 247.5 C-135.13 246.92 -135.06 246.35 -135 245.75 C-133.87 242.62 -131.78 241.55 -129.19 239.5 C-127.13 236.66 -125.39 233.92 -123.88 230.75 C-121.45 227.51 -119.09 227.39 -115.19 226.5 C-112.71 226.32 -110.23 226.19 -107.75 226.12 C-101.49 225.75 -97.23 225.33 -92.19 221.5 C-91.12 217.95 -91.12 217.95 -91.19 214.5 C-90.86 213.84 -90.53 213.18 -90.19 212.5 C-91.51 212.83 -92.83 213.16 -94.19 213.5 C-94.25 212.6 -94.31 211.69 -94.37 210.76 C-94.45 209.58 -94.54 208.4 -94.62 207.19 C-94.71 206.02 -94.79 204.84 -94.87 203.64 C-95.07 200.47 -95.07 200.47 -96.19 197.5 C-95.86 196.51 -95.53 195.52 -95.19 194.5 C-95.85 194.5 -96.51 194.5 -97.19 194.5 C-96.86 190.54 -96.53 186.58 -96.19 182.5 C-94.6 183.18 -93.01 183.86 -91.38 184.56 C-85.66 186.64 -80.07 187.49 -74.19 185.5 C-73.07 183.65 -73.07 183.65 -72.19 181.5 C-70.91 180.21 -69.6 178.96 -68.25 177.75 C-64.27 173.88 -62.55 170.87 -61.19 165.5 C-61.96 162.43 -61.96 162.43 -64.19 160.5 C-64.9 158.85 -65.56 157.18 -66.19 155.5 C-66.56 154.72 -66.93 153.93 -67.31 153.12 C-68.86 148.48 -69.07 145.26 -66.83 140.78 C-63.49 135.3 -60.12 131.6 -55.19 127.5 C-50.79 121.66 -48.15 115.12 -45.59 108.33 C-43.27 102.36 -40.22 97 -36.92 91.52 C-35.41 88.89 -34.23 86.35 -33.19 83.5 C-36.86 79.37 -40.81 76.15 -46.19 74.5 C-48.48 74.86 -50.11 75.46 -52.19 76.5 C-52.13 74.71 -52.04 72.92 -51.94 71.12 C-51.89 70.13 -51.84 69.13 -51.8 68.1 C-51.6 67.24 -51.39 66.38 -51.19 65.5 C-49.19 64.31 -49.19 64.31 -47.19 63.5 C-46.38 60.94 -46.38 60.94 -46.19 58.5 C-45.2 58.5 -44.21 58.5 -43.19 58.5 C-43.52 59.82 -43.85 61.14 -44.19 62.5 C-42.87 61.18 -41.55 59.86 -40.19 58.5 C-40.85 57.51 -41.51 56.52 -42.19 55.5 C-41.28 54.59 -40.37 53.68 -39.44 52.75 C-35.3 47.96 -33.95 42.47 -32.19 36.5 C-30.52 31.66 -28.57 27.04 -26.19 22.5 C-26.85 22.83 -27.51 23.16 -28.19 23.5 C-26.64 19.36 -24.68 15.56 -22.56 11.69 C-22.24 11.09 -21.91 10.49 -21.58 9.88 C-20.78 8.42 -19.99 6.96 -19.19 5.5 C-18.2 6 -18.2 6 -17.19 6.5 C-17.85 8.15 -18.51 9.8 -19.19 11.5 C-18.59 10.72 -17.99 9.93 -17.38 9.12 C-15.19 6.5 -15.19 6.5 -12.19 4.5 C-11.53 3.84 -10.87 3.18 -10.19 2.5 C-8.19 2.5 -6.19 2.5 -4.19 2.5 C-2.19 0.5 -2.19 0.5 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(1044.1875,818.5)\"})),_path17||(_path17=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.4 1.44 2.75 2.92 4.06 4.44 C6.02 6.39 6.02 6.39 8.75 6.69 C12.77 6.09 16.13 4.76 19.86 3.16 C22.12 2.19 22.12 2.19 25.12 1.19 C27.12 2.19 27.12 2.19 27.87 3.86 C28.1 4.55 28.33 5.23 28.56 5.94 C29.39 8.41 30.2 10.29 31.65 12.47 C33.32 15.55 33.51 17.4 33.53 20.88 C33.55 21.98 33.57 23.08 33.59 24.21 C33.6 25.38 33.61 26.55 33.62 27.75 C33.8 36 34.17 44 35.62 52.12 C37.06 60.26 37.43 68.25 37.62 76.5 C37.92 88.08 39.05 98.39 42.43 109.52 C45.15 118.55 46.58 126.23 46.23 135.68 C46.14 138.67 46.28 141.36 46.69 144.31 C47.1 147.93 46.94 150.66 46.12 154.19 C47.03 154.56 47.93 154.93 48.86 155.32 C52.64 157.48 54.08 159.46 56.38 163.12 C57.04 164.17 57.71 165.21 58.39 166.28 C59.75 168.55 61 170.8 62.12 173.19 C62.99 172.4 63.86 171.62 64.75 170.81 C67.68 168.35 70.4 167.16 74.12 166.19 C77.36 169.21 78.98 171.09 79.29 175.64 C79.3 176.56 79.31 177.49 79.31 178.44 C79.33 179.35 79.34 180.26 79.36 181.2 C79.08 184.72 78.18 187.83 77.12 191.19 C75.83 191.25 74.54 191.31 73.21 191.37 C71.5 191.46 69.78 191.54 68.06 191.62 C67.21 191.66 66.37 191.7 65.49 191.74 C61.7 191.93 58.13 192.19 54.39 192.9 C50.34 193.26 48.5 192.3 45 190.31 C41.28 188.24 38.29 186.97 34.12 186.19 C30.03 181.8 30.53 175.85 30.12 170.19 C29.23 157.73 24.33 148.19 18.03 137.66 C12.73 128.76 9.25 120.02 6.12 110.19 C5.85 109.34 5.58 108.5 5.3 107.63 C3.74 102.76 2.2 97.89 0.69 93 C0.19 91.39 -0.34 89.79 -0.88 88.19 C-0.99 86.82 -1.05 85.46 -1.09 84.09 C-1.51 71.1 -3.56 61.57 -9.25 49.81 C-11.53 45.07 -13.33 40.3 -14.86 35.26 C-16.14 32.64 -17.14 32.12 -19.88 31.19 C-22.75 30.71 -24.91 30.9 -27.88 31.19 C-30.42 33.55 -30.85 35.03 -31.32 38.5 C-31.36 39.72 -31.4 40.93 -31.44 42.19 C-31.72 50.39 -31.72 50.39 -33.88 53.19 C-37.81 55.54 -41.78 56.85 -46.19 58.06 C-52.68 59.99 -59.01 62.32 -63.88 67.19 C-64.43 70.69 -64.77 74.18 -65.12 77.71 C-65.96 81.59 -67.02 83.45 -69.88 86.19 C-75.41 86.29 -78.47 84.31 -82.88 81.19 C-88.94 77.74 -94.19 77.69 -100.88 79.19 C-105.21 81.04 -108.59 83.33 -112.12 86.44 C-112.98 87.16 -113.83 87.89 -114.7 88.64 C-117.44 91.85 -118.27 94.01 -118.88 98.19 C-118.37 101.1 -117.34 103.67 -116.19 106.38 C-115.87 107.14 -115.56 107.91 -115.23 108.7 C-112.61 114.89 -109.61 120.88 -106.44 126.81 C-106.01 127.63 -105.58 128.44 -105.14 129.29 C-101.86 135.2 -97.84 139.63 -92.88 144.19 C-88.93 147.93 -85.62 151.96 -82.26 156.22 C-79.44 159.72 -76.55 163.15 -73.62 166.56 C-72.86 167.45 -72.86 167.45 -72.09 168.36 C-66.19 175.54 -66.19 175.54 -57.88 179.19 C-51.63 179.3 -48.71 176.77 -44.38 172.68 C-43.88 172.19 -43.39 171.7 -42.88 171.19 C-39.02 172.65 -37.69 174.53 -35.88 178.19 C-33.35 185.73 -32.6 193.44 -31.94 201.31 C-31.14 210.53 -29.79 218.77 -23.88 226.19 C-14.22 225.35 -5.95 223.9 3.04 220.11 C6.51 219.07 8.64 219.32 12.12 220.19 C12.23 219.61 12.33 219.03 12.44 218.44 C13.22 215.87 14.43 214.25 16.12 212.19 C22.65 213.02 27.35 216.88 32.12 221.19 C33.75 224.5 33.75 224.5 34.12 228.19 C34.23 229.14 34.33 230.09 34.44 231.07 C34.71 233.77 34.94 236.48 35.12 239.19 C33.14 240.18 33.14 240.18 31.12 241.19 C30.79 240.86 30.47 240.53 30.12 240.19 C27.93 239.91 27.93 239.91 25.38 239.88 C24.51 239.84 23.65 239.8 22.77 239.76 C19.94 239.98 19.94 239.98 17.7 242.24 C15.12 244.19 15.12 244.19 12 244.22 C10.91 244.04 9.82 243.87 8.69 243.69 C3.56 243.15 3.56 243.15 -1.38 244.5 C-7.91 251.53 -9.65 259.35 -10.12 268.69 C-10.25 270.64 -10.38 272.58 -10.52 274.53 C-10.57 275.48 -10.63 276.43 -10.69 277.41 C-10.86 280.01 -11.13 282.57 -11.42 285.16 C-11.81 288.8 -11.9 292.34 -11.86 296 C-11.8 302.45 -12.41 308.73 -13.19 315.12 C-13.31 316.22 -13.42 317.32 -13.54 318.45 C-13.67 319.5 -13.8 320.56 -13.93 321.65 C-14.04 322.6 -14.15 323.54 -14.26 324.52 C-14.96 327.58 -16.03 329.65 -17.88 332.19 C-20.56 333 -20.56 333 -22.88 333.19 C-26.33 327.59 -28.23 322.29 -29.94 315.97 C-31.49 310.59 -33.24 306.66 -38.25 303.86 C-43.45 302.53 -48.62 303.51 -53.88 304.19 C-55.04 304.33 -56.2 304.47 -57.4 304.61 C-63.81 305.64 -63.81 305.64 -68.95 309.32 C-70.43 311.55 -71.66 313.8 -72.88 316.19 C-73.53 316.85 -74.19 317.51 -74.88 318.19 C-77.99 318.02 -79.58 317.41 -82.06 315.5 C-85.72 310.84 -86.34 305.09 -87.25 299.38 C-89.85 277.59 -89.85 277.59 -100.62 259.89 C-104.81 258.58 -109.21 258.88 -113.56 258.82 C-116.88 258.19 -116.88 258.19 -119.12 256.27 C-123.55 248.47 -124.5 239.92 -125.44 231.12 C-126.51 221.4 -127.58 212.45 -131.75 203.5 C-134.43 197.48 -136.3 191.64 -137.92 185.25 C-138.76 182.14 -138.76 182.14 -140.51 179.49 C-141.88 177.19 -141.88 177.19 -141.56 173.88 C-141.34 172.99 -141.11 172.1 -140.88 171.19 C-141.49 170.93 -142.1 170.68 -142.73 170.41 C-145.17 169.02 -145.86 167.99 -147.19 165.56 C-149 162.47 -150.92 159.93 -153.38 157.31 C-159.9 149.99 -162.52 141.4 -165.43 132.23 C-168.38 123.2 -172.58 114.66 -177.48 106.52 C-179.62 101.4 -180.21 96.1 -181 90.62 C-181.34 88.39 -181.67 86.16 -182.01 83.93 C-182.15 82.95 -182.29 81.97 -182.44 80.95 C-182.73 79.14 -183.05 77.33 -183.42 75.53 C-184.96 67.63 -184.91 59.25 -180.88 52.19 C-176.04 51.5 -172.11 51.05 -167.31 52 C-164.51 52.39 -163.3 52.43 -160.81 51.03 C-159.47 49.96 -158.14 48.86 -156.82 47.75 C-151.54 43.51 -145.03 42.78 -138.51 41.76 C-122.79 39.28 -108.59 35.33 -93.88 29.19 C-93.21 28.92 -92.54 28.65 -91.86 28.38 C-88.5 27 -85.72 25.49 -82.88 23.25 C-77.92 19.84 -72.9 18.77 -67.11 17.38 C-59.79 15.47 -52.92 12.16 -46.01 9.12 C-42.25 7.48 -38.45 5.92 -34.65 4.35 C-32.67 3.52 -30.69 2.67 -28.73 1.81 C-19.74 -2.09 -9.03 -5.69 0 0 Z \",fill:\"#131948\",transform:\"translate(863.875,823.8125)\"})),_path18||(_path18=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.43 2.55 11.53 5.84 15.73 11.34 C17.12 13.24 17.12 13.24 19.62 15.56 C22 18 22 18 24.12 21.25 C25.77 24.26 25.77 24.26 29 25 C28.34 25.33 27.68 25.66 27 26 C28.12 27.01 28.12 27.01 29.26 28.04 C32.26 31.05 34.03 34.5 35.81 38.31 C36.5 39.75 37.2 41.19 37.89 42.62 C38.24 43.35 38.59 44.08 38.95 44.84 C39.95 46.89 40.98 48.92 42.05 50.94 C55.61 76.86 62.34 104.64 57 134 C56.34 134 55.68 134 55 134 C55.07 135.69 55.07 135.69 55.15 137.41 C55.15 142.36 53.98 146.76 52.62 151.5 C52.18 153.11 51.73 154.73 51.29 156.34 C51.07 157.12 50.86 157.89 50.63 158.69 C49.7 162.11 48.85 165.55 48 169 C47.34 169 46.68 169 46 169 C45.89 169.72 45.78 170.44 45.66 171.18 C43.6 179.94 37.28 187.87 32 195 C31.36 195.87 30.73 196.73 30.07 197.62 C26.52 202.34 26.52 202.34 25 204 C24.34 204 23.68 204 23 204 C23 205.65 23 207.3 23 209 C24.01 209.04 25.02 209.08 26.06 209.12 C30.28 209.69 32.34 211.81 35.38 214.62 C37.61 216.52 39.07 217.08 42 217 C46.91 215.01 49.61 212.57 52.88 208.44 C53.66 207.47 54.44 206.5 55.24 205.5 C57.19 203.24 57.19 203.24 57 201 C57.66 200.34 58.32 199.68 59 199 C60.86 195.75 61.97 192.3 63.12 188.75 C63.65 187.13 63.65 187.13 64.2 185.48 C64.46 184.66 64.73 183.84 65 183 C65.66 183 66.32 183 67 183 C67.12 182.36 67.23 181.73 67.35 181.07 C68.22 176.95 69.3 172.89 70.38 168.81 C70.71 167.55 70.71 167.55 71.05 166.25 C72.59 160.47 74.22 154.72 76 149 C76.66 149 77.32 149 78 149 C77.96 148.15 77.92 147.31 77.88 146.44 C78 143 78 143 78.94 139.88 C80.24 135.5 80.68 131.1 81.12 126.56 C81.25 125.32 81.25 125.32 81.39 124.06 C81.6 122.04 81.8 120.02 82 118 C82.33 118 82.66 118 83 118 C83.37 125.02 82.85 131.51 81.5 138.38 C79.6 148.19 78.71 157.41 82 167 C83.52 180 72.4 195.07 65.46 205.27 C64.74 206.12 64.74 206.12 64 207 C63.34 207 62.68 207 62 207 C61.73 207.59 61.46 208.18 61.19 208.78 C59.99 211.02 58.71 212.63 57 214.5 C53.02 218.93 49.27 223.54 45.53 228.17 C43.63 230.3 41.95 231.92 39.75 233.68 C36.79 235.77 36.79 235.77 36 239 C-39.9 239 -115.8 239 -194 239 C-194 238.01 -194 237.02 -194 236 C-188.26 232.49 -185.02 231.58 -178.39 232.93 C-175.02 233.03 -173.57 232.17 -171 230 C-169.93 226.97 -169.93 226.97 -169.5 223.56 C-168.57 217.55 -168.57 217.55 -165.57 214.64 C-162.91 212.94 -161.14 212.25 -158 212 C-157.01 212.33 -156.02 212.66 -155 213 C-155 212.34 -155 211.68 -155 211 C-150.35 209.88 -146.09 208.97 -141.31 208.81 C-135.25 208.35 -130.47 205.36 -125.3 202.4 C-121.56 200.81 -119.86 201.09 -116 202 C-114.38 200.71 -114.38 200.71 -113 199 C-112.15 198.67 -111.31 198.34 -110.44 198 C-107.69 197.14 -107.69 197.14 -106 194 C-104.09 193.16 -102.17 192.62 -100.17 192.04 C-97.12 190.58 -95.3 188.47 -93 186 C-91.71 184.62 -91.71 184.62 -90.39 183.2 C-89.49 182.22 -88.59 181.24 -87.69 180.25 C-87.21 179.73 -86.73 179.21 -86.24 178.67 C-82.71 174.8 -79.21 170.88 -75.75 166.94 C-74 165 -74 165 -71.83 162.93 C-69.35 160.32 -69.14 158.57 -69 155 C-69.31 154.07 -69.62 153.14 -69.94 152.19 C-72.36 144.93 -71.33 140.04 -68.06 133.12 C-64.16 125.55 -59.03 119.03 -53 113 C-51.7 112.7 -50.38 112.46 -49.06 112.25 C-45.87 111.48 -45.21 111.28 -43.12 108.56 C-35.98 85.92 -41.71 63.54 -48.34 41.58 C-53.89 23.13 -53.89 23.13 -52 15 C-50.44 13.04 -50.44 13.04 -48.56 11.62 C-47.95 11.14 -47.33 10.66 -46.69 10.16 C-42.66 7.39 -38.77 7.26 -34 8 C-32.03 9.13 -30.39 10.44 -28.62 11.87 C-26.89 13.24 -26.89 13.24 -23.88 13.62 C-19.28 12.63 -17.37 9.61 -14.43 6.14 C-13.63 5.21 -13.63 5.21 -12.81 4.25 C-12.32 3.66 -11.84 3.06 -11.33 2.45 C-8.26 -0.9 -4.22 -0.71 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(530,1041)\"})),_path19||(_path19=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.62 0.74 0.62 0.74 1.25 1.5 C2.24 1.83 3.23 2.16 4.25 2.5 C5.94 4.15 7.6 5.82 9.25 7.5 C10.43 8.53 11.61 9.55 12.81 10.55 C25.12 20.89 25.12 20.89 29.12 26.86 C31.31 30.05 34.24 32.56 37.06 35.19 C38.25 36.5 38.25 36.5 38.25 38.5 C39.24 38.83 40.23 39.16 41.25 39.5 C42.62 41.06 42.62 41.06 44.02 43.05 C47.17 47.42 50.55 51.55 54 55.69 C59.16 61.91 64.19 68.22 69.07 74.67 C70.68 76.75 72.31 78.75 74.03 80.74 C76.25 83.5 76.25 83.5 76.25 85.5 C76.8 85.71 77.35 85.93 77.92 86.15 C81.03 87.95 83.16 90.45 85.5 93.12 C89.48 97.58 93.55 101.86 97.89 105.98 C99.25 107.5 99.25 107.5 99.25 109.5 C99.91 109.5 100.57 109.5 101.25 109.5 C102.94 111.14 102.94 111.14 104.81 113.31 C105.43 114.02 106.05 114.73 106.69 115.46 C108.25 117.5 108.25 117.5 109.25 120.5 C110.57 121.18 111.91 121.85 113.25 122.5 C115.5 124.5 115.5 124.5 117.25 126.5 C117.25 127.16 117.25 127.82 117.25 128.5 C117.89 128.77 118.53 129.04 119.19 129.31 C121.25 130.5 121.25 130.5 122.25 133.5 C122.83 133.77 123.4 134.04 124 134.31 C126.63 135.7 127.97 137.52 129.8 139.82 C131.33 141.6 132.96 143.05 134.75 144.56 C138.64 147.87 142.22 151.43 145.81 155.06 C153.94 163.88 153.94 163.88 164.25 169.5 C163.92 170.16 163.59 170.82 163.25 171.5 C162.03 171.12 160.8 170.75 159.54 170.36 C150.98 167.76 142.43 165.25 133.75 163.06 C126.85 161.3 120.1 159.21 113.38 156.88 C112.12 156.44 112.12 156.44 110.83 156 C106.64 154.51 103.07 152.8 99.25 150.5 C96.56 149.41 93.82 148.49 91.06 147.56 C89.63 147.08 88.2 146.59 86.77 146.1 C86.03 145.85 85.29 145.6 84.53 145.34 C82.25 144.5 82.25 144.5 80.03 143.44 C72.35 139.86 64.74 139.87 56.44 139.81 C54.34 139.78 52.25 139.75 50.16 139.71 C48.27 139.68 46.39 139.66 44.5 139.64 C41.61 139.52 39.07 139.09 36.25 138.5 C34.41 138.36 32.57 138.26 30.73 138.18 C29.71 138.14 28.69 138.1 27.63 138.06 C26.58 138.02 25.52 137.98 24.44 137.94 C22.83 137.87 22.83 137.87 21.18 137.81 C18.54 137.7 15.89 137.6 13.25 137.5 C14.24 137.17 15.23 136.84 16.25 136.5 C16.25 135.84 16.25 135.18 16.25 134.5 C26.62 130.48 35.6 130 46.56 130.25 C48.09 130.27 49.62 130.29 51.15 130.3 C54.85 130.35 58.55 130.42 62.25 130.5 C60.44 128.69 57.64 129.12 55.19 128.94 C54.08 128.85 52.98 128.77 51.84 128.68 C50.99 128.62 50.13 128.56 49.25 128.5 C49.25 128.17 49.25 127.84 49.25 127.5 C52.22 127.17 55.19 126.84 58.25 126.5 C58.25 125.84 58.25 125.18 58.25 124.5 C57.47 124.23 56.69 123.97 55.88 123.7 C54.87 123.34 53.86 122.99 52.81 122.62 C51.8 122.28 50.79 121.93 49.75 121.57 C47.25 120.5 47.25 120.5 46.25 118.5 C43.3 118.11 43.3 118.11 39.88 118 C33.58 117.72 33.58 117.72 30.25 115.5 C30.25 114.84 30.25 114.18 30.25 113.5 C27.85 113.93 25.46 114.36 23.06 114.81 C22.39 114.93 21.72 115.05 21.02 115.17 C16.84 115.96 13.78 117.16 10.25 119.5 C8.59 119.87 6.92 120.2 5.25 120.5 C3.68 120.96 2.12 121.44 0.56 121.94 C-0.2 122.18 -0.97 122.43 -1.76 122.68 C-3.93 123.43 -3.93 123.43 -5.75 125.5 C-7.7 125.74 -7.7 125.74 -10 125.81 C-13.89 126.14 -14.64 126.41 -17.81 129.06 C-21.77 132.35 -23.75 131.93 -28.75 131.5 C-29.08 132.49 -29.41 133.48 -29.75 134.5 C-32.06 134.5 -34.37 134.5 -36.75 134.5 C-37.38 135.9 -38 137.29 -38.62 138.69 C-38.99 139.51 -39.36 140.33 -39.75 141.17 C-40.83 143.57 -40.83 143.57 -41.69 146.44 C-42.75 148.5 -42.75 148.5 -45.38 149.81 C-46.16 150.04 -46.94 150.27 -47.75 150.5 C-47.42 151.82 -47.09 153.14 -46.75 154.5 C-52.35 157.43 -52.35 157.43 -54.81 157.88 C-57.07 158.44 -57.07 158.44 -59.25 161 C-61.75 163.5 -61.75 163.5 -63.8 163.86 C-64.44 164.07 -65.09 164.28 -65.75 164.5 C-66.86 166.64 -66.86 166.64 -67.44 169.25 C-67.67 170.11 -67.9 170.97 -68.14 171.86 C-69.1 176.02 -69.87 180.11 -70.29 184.36 C-70.37 185.25 -70.46 186.14 -70.55 187.05 C-70.64 187.96 -70.72 188.87 -70.81 189.81 C-70.9 190.74 -70.99 191.68 -71.09 192.63 C-71.31 194.92 -71.53 197.21 -71.75 199.5 C-73.58 199.01 -73.58 199.01 -75.45 198.52 C-84.43 196.29 -92.03 197.72 -100.75 200.5 C-101.25 199.51 -101.25 199.51 -101.75 198.5 C-103.07 198.83 -104.39 199.16 -105.75 199.5 C-105.09 200.82 -104.43 202.14 -103.75 203.5 C-106.75 203.5 -106.75 203.5 -109.12 201.31 C-109.99 200.38 -110.86 199.46 -111.75 198.5 C-112.64 197.65 -113.52 196.81 -114.44 195.94 C-116.46 193.8 -117.65 192.19 -118.75 189.5 C-118.09 189.5 -117.43 189.5 -116.75 189.5 C-118.81 183.69 -118.81 183.69 -123.75 180.5 C-125.5 177.38 -125.5 177.38 -126.75 174.5 C-128.4 174.5 -130.05 174.5 -131.75 174.5 C-131.48 165.31 -129.19 156.89 -126.68 148.11 C-126.01 145.77 -125.35 143.43 -124.7 141.08 C-122.85 134.51 -120.96 127.99 -118.7 121.55 C-116.52 115.29 -115.06 109.33 -114.2 102.76 C-112.71 91.92 -110.07 81.19 -107.75 70.5 C-107.57 69.64 -107.38 68.79 -107.19 67.9 C-104.53 55.71 -99.45 42.82 -88.75 35.5 C-81.15 31.68 -72.86 29.13 -64.47 27.82 C-62.72 27.66 -62.72 27.66 -61.75 26.5 C-61.43 24.94 -61.14 23.38 -60.88 21.81 C-59.19 13.58 -59.19 13.58 -56.75 10.5 C-46.39 4.14 -10.53 -9.02 0 0 Z \",fill:\"#7D6281\",transform:\"translate(639.75,118.5)\"})),_path20||(_path20=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.04 2.25 9.35 5.26 13.83 8.48 C15.91 10.02 15.91 10.02 18 11 C18 11.99 18 12.98 18 14 C18.66 14.06 19.32 14.12 20 14.19 C24.97 15.53 29.36 18.36 33 22 C33.99 22 34.98 22 36 22 C36 22.66 36 23.32 36 24 C36.56 24.1 37.11 24.2 37.69 24.3 C45.28 26.18 48.8 30.62 53 37 C53.34 37.72 53.68 38.45 54.04 39.19 C55 41.34 55 41.34 58 43 C58 43.66 58 44.32 58 45 C58.74 45.01 59.48 45.02 60.24 45.03 C63.76 46.27 64.57 48.08 66.19 51.34 C66.52 52.05 66.85 52.76 67.19 53.5 C67.53 54.18 67.87 54.87 68.22 55.57 C69.96 59.17 71.2 62.53 71.95 66.46 C72.96 71.51 75.13 75.59 77.62 80.06 C78.53 81.72 79.43 83.38 80.32 85.04 C80.77 85.86 81.22 86.69 81.69 87.54 C84.05 91.96 86.23 96.48 88.4 101.01 C90.11 104.54 90.11 104.54 92.57 107.55 C94.73 109.74 95.36 112.25 96.38 115.12 C97.82 119.05 99.26 122.68 101.44 126.25 C104.3 131.11 105.95 136.3 107.76 141.62 C109.81 147.6 112.23 153.31 115 159 C115.8 160.7 115.8 160.7 116.62 162.44 C117.88 164.96 117.88 164.96 119.44 166.83 C124.53 173.9 126.8 183.1 129.21 191.39 C130.14 194.53 131.18 197.36 132.65 200.29 C134 203 134 203 134 206 C134.99 206.33 135.98 206.66 137 207 C137.95 209 137.95 209 138.69 211.44 C139.06 212.64 139.06 212.64 139.45 213.87 C140 216 140 216 140 218 C140.46 218.44 140.93 218.89 141.41 219.35 C143.3 221.31 143.76 222.83 144.5 225.44 C145.57 228.9 146.78 231.13 149 234 C150.12 236.63 151.05 239.3 152 242 C152.66 240.68 153.32 239.36 154 238 C154.66 239.98 155.32 241.96 156 244 C155.01 244 154.02 244 153 244 C153.33 244.99 153.66 245.98 154 247 C153.67 247.33 153.34 247.66 153 248 C153.77 248.56 153.77 248.56 154.56 249.12 C156 251 156 251 155.69 254.19 C155.35 255.58 155.35 255.58 155 257 C155.99 257 156.98 257 158 257 C159.16 260.48 159.11 263.19 159.1 266.86 C159.1 267.85 159.1 267.85 159.09 268.86 C159.09 270.97 159.08 273.08 159.06 275.19 C159.06 276.62 159.05 278.05 159.05 279.48 C159.04 282.99 159.02 286.49 159 290 C155 288.67 152.89 287.02 150 284 C148.41 282.87 146.79 281.79 145.15 280.76 C143.75 279.87 143.75 279.87 142.32 278.96 C141.35 278.36 140.38 277.75 139.38 277.12 C138.43 276.53 137.48 275.93 136.5 275.31 C134.59 274.1 132.67 272.9 130.74 271.71 C129.07 270.67 127.42 269.6 125.79 268.48 C117.08 262.7 106.97 259.84 97.12 256.56 C96.14 256.23 95.16 255.9 94.15 255.57 C87.45 253.33 80.73 251.15 74 249 C73.26 248.76 72.52 248.52 71.76 248.28 C47.42 240.49 24.46 240.74 -0.75 243.12 C-2.35 243.26 -2.35 243.26 -3.97 243.4 C-14.3 244.59 -22.98 249.03 -31.12 255.38 C-35.81 259 -35.81 259 -38 259 C-38.33 259.99 -38.66 260.98 -39 262 C-41.56 263.19 -41.56 263.19 -44 264 C-45.13 262.25 -45.13 262.25 -46 260 C-45.28 258.04 -45.28 258.04 -43.94 256.06 C-43.51 255.41 -43.09 254.77 -42.65 254.1 C-37.85 248 -31.79 243.64 -25.62 239 C-24.24 237.95 -24.24 237.95 -22.84 236.88 C-18.9 233.9 -14.95 230.95 -10.9 228.12 C-7.97 226.32 -7.97 226.32 -7 224 C-6.94 217.92 -8.08 214.67 -12 210 C-12.25 206.69 -12.25 206.69 -12 204 C-13.98 204.99 -13.98 204.99 -16 206 C-18.25 203.31 -19.88 201.35 -21 198 C-20.01 197.01 -19.02 196.02 -18 195 C-25.83 194.12 -31.6 195.6 -38.61 198.87 C-42.93 200.83 -46.27 201.47 -51 201 C-53.33 200.01 -53.33 200.01 -55.25 198.69 C-55.89 198.26 -56.54 197.83 -57.2 197.39 C-58.99 196 -60.56 194.75 -62 193 C-62.43 181.04 -52 170.9 -44.42 162.51 C-40.12 157.94 -35.39 153.81 -30.39 150.03 C-28.02 148.02 -26.66 146.27 -25.06 143.62 C-22.42 139.49 -19.68 136.26 -16 133 C-15.34 133 -14.68 133 -14 133 C-14 132.34 -14 131.68 -14 131 C-11.99 129.47 -10 128.1 -7.88 126.75 C-6.93 126.15 -6.93 126.15 -5.96 125.53 C3.86 119.46 14.01 115.86 25.18 113.06 C39.97 109.1 39.97 109.1 50.7 99.12 C51.17 98.09 51.64 97.06 52.12 96 C54.74 90.34 54.74 90.34 56.65 87.82 C58.88 84.81 58.48 82.65 58 79 C55.74 73.55 52.48 69.2 48.52 64.88 C46.76 62.7 45.52 60.41 44.19 57.94 C41.08 52.59 37.39 49.88 32 47 C30.91 46.4 29.81 45.8 28.69 45.19 C24.26 43.76 20.11 43.45 15.48 43.21 C13 43 13 43 12 42 C11.3 42.78 10.6 43.57 9.88 44.38 C3.4 50.29 -5.79 49.89 -14.15 50.68 C-20.51 51.38 -24.64 52.53 -30 56 C-33.44 56.25 -33.44 56.25 -36 56 C-37 53 -37 53 -35.88 50.06 C-35.59 49.05 -35.3 48.04 -35 47 C-36.36 44.96 -36.36 44.96 -38 43 C-38.31 39.88 -38.31 39.88 -38 37 C-36 35 -36 35 -33.82 34.87 C-32.93 34.92 -32.05 34.97 -31.13 35.02 C-30.16 35.05 -29.2 35.08 -28.2 35.12 C-26.16 35.21 -24.12 35.31 -22.07 35.43 C-19.28 35.51 -16.75 35.51 -14 35 C-10.23 31.23 -9.25 27.05 -8.06 21.94 C-3.57 3.57 -3.57 3.57 0 0 Z \",fill:\"#111644\",transform:\"translate(1121,794)\"})),_path21||(_path21=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.01 0.74 2.03 1.48 2.04 2.24 C2.35 21.03 2.35 21.03 5.57 39.47 C5.71 40.31 5.86 41.14 6 42 C5.34 42.66 4.68 43.32 4 44 C4 44.99 4 45.98 4 47 C5.24 47.37 6.48 47.74 7.75 48.12 C10.76 49.29 12.09 50.09 14.44 52.44 C16.35 56.79 16.57 60.57 16.73 65.29 C16.81 68.22 16.81 68.22 19 71 C19.99 67.7 20.98 64.4 22 61 C27.94 60.5 27.94 60.5 34 60 C34 58.68 34 57.36 34 56 C33.34 56 32.68 56 32 56 C32 55.34 32 54.68 32 54 C31.01 53.67 30.02 53.34 29 53 C29 52.34 29 51.68 29 51 C28.34 51 27.68 51 27 51 C26.73 50.05 26.46 49.1 26.19 48.12 C25.25 44.75 25.25 44.75 22 43 C21.56 40.56 21.56 40.56 22 38 C24 36.19 24 36.19 26 35 C26.99 35.66 27.98 36.32 29 37 C29.41 39.71 29.13 42.24 29 45 C31.31 45.66 33.62 46.32 36 47 C35.5 43.53 35.5 43.53 35 40 C35.99 39.67 36.98 39.34 38 39 C39.81 40.81 39.38 43.61 39.56 46.06 C39.65 47.17 39.73 48.27 39.82 49.41 C39.91 50.69 39.91 50.69 40 52 C41.98 51.5 41.98 51.5 44 51 C42.01 65.78 39.37 80.62 31.12 93.31 C27.29 99.38 26.9 104.97 28 112 C29.23 115.2 29.23 115.2 32 117 C32 118.32 32 119.64 32 121 C32.56 121.19 33.11 121.37 33.69 121.56 C36.57 123.35 37.83 125.47 39.7 128.25 C41.46 130.61 43.68 132.21 46 134 C46 134.66 46 135.32 46 136 C46.78 136.31 47.57 136.62 48.38 136.94 C51 138 51 138 53 139 C53 139.99 53 140.98 53 142 C53.66 142.33 54.32 142.66 55 143 C54.01 143.33 53.02 143.66 52 144 C50.66 143.01 49.33 142.01 48 141 C45.92 140.24 43.83 139.57 41.71 138.94 C40 138 40 138 39.26 135.9 C39.18 135.27 39.09 134.65 39 134 C38.34 134 37.68 134 37 134 C36.77 133.05 36.55 132.1 36.31 131.12 C35.31 127.81 35.31 127.81 32.38 126.62 C31.2 126.32 31.2 126.32 30 126 C30 125.34 30 124.68 30 124 C29.34 124 28.68 124 28 124 C29.26 129.03 31.56 132.31 34.76 136.27 C36 138 36 138 36 140 C36.66 140 37.32 140 38 140 C38.95 142.14 39.9 144.28 40.84 146.43 C41.58 148.07 42.35 149.71 43.16 151.32 C45.73 156.59 46.2 160.17 46 166 C47.63 169.12 47.63 169.12 50.06 169.66 C50.84 169.79 51.63 169.93 52.44 170.06 C55.74 170.63 57.11 171.07 60 173 C63.37 172.67 65.42 171.12 68 169 C68 169.66 68 170.32 68 171 C68.66 171 69.32 171 70 171 C68.85 173.47 67.95 175.05 66 177 C60.4 177.55 56.91 176.41 52 174 C51.32 174.99 51.32 174.99 50.62 176 C50.09 176.66 49.55 177.32 49 178 C48.34 178 47.68 178 47 178 C45.57 183.34 46.72 186.07 49 191 C49 192.32 49 193.64 49 195 C49.99 195 50.98 195 52 195 C52 195.66 52 196.32 52 197 C54.54 196.72 57.08 196.42 59.62 196.12 C60.34 196.05 61.05 195.97 61.79 195.89 C62.49 195.8 63.19 195.72 63.91 195.63 C64.55 195.56 65.19 195.49 65.85 195.41 C68.14 195.03 68.14 195.03 70.78 193.97 C74.47 192.86 77.85 192.73 81.67 192.77 C82.76 192.77 82.76 192.77 83.86 192.77 C85.38 192.77 86.91 192.78 88.43 192.79 C90.73 192.81 93.03 192.81 95.33 192.81 C102.21 192.83 109.02 192.96 115.86 193.76 C119.33 194.15 122.76 194.25 126.25 194.31 C126.92 194.34 127.59 194.37 128.27 194.4 C133.38 194.47 135.95 192.95 140 190 C142.88 190.25 142.88 190.25 145 191 C145 191.99 145 192.98 145 194 C141.07 197.93 135.23 198.11 129.9 198.23 C128.06 198.23 126.22 198.21 124.38 198.19 C122.91 198.18 122.91 198.18 121.42 198.17 C116.19 198.12 111.02 197.91 105.81 197.44 C100.23 196.97 94.78 197.04 89.19 197.31 C88.02 197.36 88.02 197.36 86.83 197.42 C82.92 197.64 79.27 198.11 75.46 199.04 C71.06 200.09 66.95 200.23 62.44 200.12 C61.71 200.12 60.99 200.11 60.25 200.1 C58.5 200.07 56.75 200.04 55 200 C51.99 206.33 51.99 206.33 53 213 C54.49 215.42 56.06 217.74 57.72 220.05 C59 222 59 222 59 224 C64.05 224.94 64.05 224.94 69 224 C73.17 223.85 76.94 224.02 81 225 C81 225.66 81 226.32 81 227 C83.64 226.67 86.28 226.34 89 226 C89 226.66 89 227.32 89 228 C76.62 228.99 76.62 228.99 64 230 C66.18 234.36 68.08 237.68 70.94 241.5 C71.64 242.45 72.35 243.41 73.07 244.39 C73.71 245.25 74.34 246.11 75 247 C77.56 250.6 79.46 253.99 81.17 258.06 C81.99 259.98 82.85 261.87 83.72 263.77 C87.09 271.34 89.48 278.32 90.56 286.56 C91.49 293.37 92.65 298.26 98 303 C98.82 303.74 98.82 303.74 99.66 304.5 C107.65 310.9 117.21 310.55 127 310 C127.66 309.67 128.32 309.34 129 309 C132.26 308.56 135.52 308.19 138.79 307.84 C142.21 307.45 145.29 306.92 148.61 305.96 C153 304.72 157.19 304.56 161.72 304.34 C165.33 303.97 168.52 303.01 172 302 C174.44 301.66 176.87 301.32 179.31 301 C189.37 299.36 197.46 294.31 206 289 C206.59 288.64 207.19 288.27 207.8 287.9 C211.7 285.51 215.57 283.14 219.15 280.29 C221 279 221 279 223.25 279.31 C223.83 279.54 224.4 279.77 225 280 C220.64 290.83 201.07 298.39 191 303 C185.66 305.01 180.22 306.57 174.7 308.01 C171.22 308.61 171.22 308.61 170 310 C169.23 322.99 169.42 337.58 172.46 350.25 C173.42 355.13 173.77 360.1 174.24 365.04 C174.65 369.22 175.18 373.18 176.25 377.25 C178.14 385.72 176.23 395.57 172 403 C169.56 405.76 169.56 405.76 166.71 408.55 C166.21 409.04 165.7 409.54 165.18 410.05 C163.59 411.63 161.98 413.19 160.38 414.75 C158.76 416.33 157.15 417.91 155.54 419.49 C154.09 420.92 152.64 422.34 151.18 423.76 C148.97 425.8 148.97 425.8 148 428 C147.34 428 146.68 428 146 428 C145.73 428.6 145.46 429.2 145.19 429.81 C144 432 142.9 433.41 141 435 C140.34 435 139.68 435 139 435 C138.71 436.28 138.71 436.28 138.41 437.59 C136.58 442.02 133.91 444.41 130.44 447.62 C120.41 457.29 110.33 468.96 105.31 482.12 C104.88 483.07 104.45 484.02 104 485 C102.67 485.36 101.34 485.7 100 486 C99.27 487.98 98.61 489.98 98 492 C97.02 493.02 96.02 494.02 95 495 C93.6 497.31 92.29 499.63 91 502 C90.51 502.88 90.02 503.75 89.52 504.66 C86.73 509.68 84.14 514.66 82 520 C81.34 520 80.68 520 80 520 C79.67 521.32 79.34 522.64 79 524 C78.17 518.07 79.61 513.98 82.25 508.69 C82.55 508.08 82.85 507.47 83.16 506.84 C84.99 503.33 86.72 501.19 90 499 C90.71 497.35 91.37 495.68 92 494 C92.84 492.7 93.69 491.41 94.56 490.12 C97.01 486.34 97.72 483.47 98 479 C98.66 479 99.32 479 100 479 C99.72 477.92 99.72 477.92 99.44 476.81 C98.97 473.8 99.41 471.96 100 469 C100.08 467.23 100.11 465.47 100.1 463.7 C100.09 462.72 100.09 461.75 100.09 460.74 C100.08 459.73 100.07 458.73 100.06 457.69 C100.06 456.66 100.05 455.63 100.05 454.58 C100.04 452.05 100.02 449.53 100 447 C99.34 447 98.68 447 98 447 C95.23 442.85 96.07 439.66 97 435 C99.09 426.56 102.72 419.63 107.29 412.32 C109.11 408.79 109.67 405.94 110 402 C109.01 402 108.02 402 107 402 C107 403.65 107 405.3 107 407 C106.67 407 106.34 407 106 407 C105.96 406.07 105.92 405.14 105.88 404.19 C105.23 399.39 102.77 395.58 100.38 391.45 C99 389 99 389 98 386 C97.34 386.33 96.68 386.66 96 387 C96.16 386.32 96.33 385.64 96.5 384.94 C97.63 378.79 97.63 378.79 95.81 373.06 C95.21 372.38 94.62 371.7 94 371 C93.09 369.59 92.19 368.18 91.31 366.75 C90.66 365.69 90.66 365.69 89.99 364.61 C89.66 364.08 89.34 363.55 89 363 C88.67 363.99 88.34 364.98 88 366 C87.34 366 86.68 366 86 366 C84.28 369.79 83.65 373.04 83.38 377.19 C83.3 378.23 83.23 379.28 83.15 380.36 C83.06 381.9 83 383.45 83 385 C84.32 385.33 85.64 385.66 87 386 C87 386.66 87 387.32 87 388 C88.96 389.64 88.96 389.64 91 391 C89.58 395.51 87.35 397.73 84 401 C82.4 403.08 80.86 405.19 79.33 407.33 C78 409 78 409 76 410 C76 410.66 76 411.32 76 412 C75 413 74 414 73 415 C71.98 416.66 70.98 418.32 70 420 C68.44 422.31 68.44 422.31 67 424 C66.34 424 65.68 424 65 424 C64.75 424.64 64.5 425.28 64.25 425.94 C63 428 63 428 60.88 428.75 C60.26 428.83 59.64 428.91 59 429 C57 426 57 426 57.16 423.18 C58.1 419.63 59.48 417.18 61.5 414.12 C62.44 412.67 62.44 412.67 63.41 411.2 C63.93 410.47 64.46 409.75 65 409 C65.33 409 65.66 409 66 409 C66.17 413.92 66.25 417.5 64 422 C64.66 422 65.32 422 66 422 C68.61 417.1 67.74 413.44 67.12 408.02 C67 405 67 405 67.5 401.73 C68.31 395.73 67.91 389.79 67.69 383.75 C67.65 382.47 67.62 381.19 67.58 379.88 C67.54 378.65 67.49 377.43 67.45 376.17 C67.41 375.06 67.37 373.95 67.33 372.8 C67.19 369.79 67.19 369.79 65 367 C65.66 366.34 66.32 365.68 67 365 C66.36 364.22 65.72 363.43 65.06 362.62 C59.65 354.31 61.92 341.4 63 332 C63.76 329.06 64.66 326.73 66 324 C66.66 324 67.32 324 68 324 C68 320.37 68 316.74 68 313 C68.66 313 69.32 313 70 313 C70 311.02 70 309.04 70 307 C69.01 307 68.02 307 67 307 C67.56 305.39 67.56 305.39 68.12 303.75 C69.26 300.25 69.26 300.25 68.38 297.81 C67.02 295.9 67.02 295.9 65.02 294.25 C62.65 291.62 62.06 289.67 61.25 286.25 C61.01 285.27 60.77 284.28 60.52 283.27 C60.35 282.52 60.18 281.77 60 281 C59.67 281 59.34 281 59 281 C58.88 279.81 58.76 278.62 58.63 277.39 C58.46 275.82 58.29 274.25 58.12 272.69 C58.05 271.9 57.97 271.12 57.89 270.31 C57.8 269.55 57.72 268.79 57.63 268.01 C57.56 267.32 57.49 266.62 57.41 265.9 C57.05 263.68 57.05 263.68 55 261 C54.2 260.86 53.39 260.71 52.56 260.56 C49.31 259.85 48.92 258.59 47 256 C45.68 256 44.36 256 43 256 C43 255.34 43 254.68 43 254 C44.65 253.67 46.3 253.34 48 253 C48 252.34 48 251.68 48 251 C44.04 251 40.08 251 36 251 C36 250.01 36 249.02 36 248 C35.05 245.85 35.05 245.85 34 244 C33.01 244.33 32.02 244.66 31 245 C30.81 233.03 30.81 233.03 32 228 C32.33 227.67 32.66 227.34 33 227 C33.04 222.22 33.02 217.56 30.38 213.5 C21.9 208.15 13.98 207.96 4.08 209.43 C-2.25 210.98 -5.36 213.72 -9 219 C-10.03 220.49 -11.07 221.96 -12.12 223.44 C-12.58 224.12 -13.04 224.8 -13.51 225.5 C-14 225.99 -14.49 226.49 -15 227 C-16.32 227 -17.64 227 -19 227 C-19.06 222.54 -19.09 218.08 -19.12 213.62 C-19.14 212.37 -19.16 211.12 -19.18 209.83 C-19.21 202.56 -18.62 196.06 -17 189 C-14.91 178.54 -14.73 168.42 -14.81 157.81 C-14.82 156 -14.83 154.19 -14.83 152.38 C-14.91 135.25 -15.25 118.13 -15.57 101.01 C-16.12 70.73 -16.12 70.73 -16.18 56.24 C-16.18 54.65 -16.19 53.05 -16.21 51.45 C-16.23 49.28 -16.23 47.12 -16.23 44.96 C-16.23 43.77 -16.24 42.58 -16.24 41.36 C-15.98 37.68 -15.1 34.52 -14 31 C-13.46 27.86 -13.01 24.73 -12.56 21.57 C-12 19 -12 19 -10 17 C-9.62 41.72 -9.62 41.72 -11.55 52.85 C-13.12 63.78 -13.12 63.78 -10 74 C-9.01 74 -8.02 74 -7 74 C-7.16 73.49 -7.32 72.97 -7.48 72.45 C-9.98 60.69 -7.44 48.17 -5.5 36.54 C-4.48 30.37 -3.68 24.32 -3.44 18.06 C-3.17 11.7 -2.03 6.03 0 0 Z \",fill:\"#311243\",transform:\"translate(497,318)\"})),_path22||(_path22=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 5 3 C8.11 2.95 8.11 2.95 11.5 2.5 C17.67 1.78 17.67 1.78 21 4 C22.95 4.21 22.95 4.21 25.05 4.05 C25.83 4.03 26.61 4.01 27.42 3.98 C29.05 3.91 30.68 3.83 32.31 3.75 C36.31 3.63 38.44 3.67 41.96 5.74 C44 8 44.88 9.42 45.69 12.31 C45.92 13.1 46.16 13.89 46.41 14.7 C46.91 16.66 47.31 18.64 47.69 20.62 C49.33 24.84 51.61 26.46 55.04 29.27 C60.57 34.14 61.66 40.18 63.21 47.09 C63.93 49.75 64.8 51.7 66.19 54.06 C69.84 60.92 68.43 68.24 66.44 75.44 C63.29 84.75 58.76 94.77 50 100 C45.54 101.72 41.76 102.23 37 102 C36.67 101.01 36.34 100.02 36 99 C32.25 97.38 29.06 96.58 25 97 C22.4 98.5 22.4 98.5 19.94 100.5 C15.43 104 15.43 104 11 104 C11 104.66 11 105.32 11 106 C10.01 106.66 9.02 107.32 8 108 C6.51 116.11 6.78 124.46 6.68 132.69 C6.66 134.23 6.64 135.78 6.62 137.32 C6.58 140.57 6.54 143.81 6.5 147.06 C6.45 151.11 6.4 155.16 6.34 159.21 C6.28 163.18 6.23 167.15 6.18 171.12 C6.17 171.91 6.16 172.7 6.15 173.51 C6.05 182.05 5.98 190.59 6.04 199.14 C6.05 199.87 6.05 200.61 6.06 201.37 C6.08 204.82 6.1 208.26 6.15 211.71 C6.22 221.45 5.16 230.12 4 240 C-28.67 240 -61.34 240 -95 240 C-95 230.02 -95 230.02 -94.51 225.66 C-93.94 219.93 -93.85 214.25 -93.88 208.5 C-93.88 207.46 -93.88 206.42 -93.88 205.34 C-93.92 198.25 -94.14 191.19 -94.64 184.12 C-95.8 166.93 -94.72 149.62 -94 132.44 C-93.81 127.83 -93.62 123.23 -93.44 118.62 C-93.39 117.52 -93.35 116.42 -93.3 115.29 C-93.02 107.62 -92.94 99.97 -93.07 92.28 C-92.9 84.65 -90.15 79.77 -85.46 73.96 C-84.04 72.06 -83.1 70.28 -82.12 68.12 C-77.08 57.67 -68.44 50.67 -59.69 43.43 C-56.45 40.69 -53.37 37.76 -50.28 34.84 C-47.69 32.75 -45.02 31.39 -42 30 C-42 29.01 -42 28.02 -42 27 C-41.34 27 -40.68 27 -40 27 C-40 26.34 -40 25.68 -40 25 C-39.28 25.09 -38.56 25.18 -37.82 25.28 C-33.95 24.9 -32.62 23.25 -29.88 20.56 C-25.27 16.09 -25.27 16.09 -22 15 C-21.42 14.41 -20.85 13.83 -20.25 13.23 C-17.43 10.44 -14.35 8.48 -11 6.38 C-10.38 5.98 -9.77 5.59 -9.13 5.18 C-2.57 1.01 -2.57 1.01 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(1104,1040)\"})),_path23||(_path23=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.07 2 2.14 2 3.25 C2.57 6.96 2.57 6.96 4.74 8.29 C6.14 8.96 7.56 9.59 8.99 10.18 C11 11 11 11 14 13 C16.2 13.63 16.2 13.63 18.64 14.08 C19.55 14.27 20.45 14.46 21.39 14.66 C23.28 15.05 25.17 15.43 27.07 15.79 C33.37 17.16 37.67 19.12 42 24 C45.82 31.64 42.64 42.86 40.42 50.68 C38.61 54.92 36.36 56.81 32.71 59.47 C30.68 61.29 30.34 62.26 30 64.94 C29.92 66.99 30 68.99 30.11 71.04 C30.45 79.62 24.93 85.69 20.12 92.38 C19.05 93.89 17.97 95.4 16.89 96.91 C16.39 97.63 15.88 98.34 15.36 99.08 C13.34 101.94 11.4 104.84 9.5 107.78 C8.3 109.55 7.05 111.28 5.79 113 C1.19 119.27 -2.14 124.99 -4.05 132.64 C-5 135 -5 135 -6.75 136.32 C-9.5 137.15 -11.82 137.23 -14.69 137.19 C-15.75 137.18 -16.8 137.16 -17.89 137.15 C-20.62 137.02 -23.19 136.69 -25.88 136.25 C-29.3 135.82 -29.96 135.98 -33.25 137.62 C-34.61 138.8 -34.61 138.8 -36 140 C-37.52 140.99 -37.52 140.99 -39.06 142 C-41.32 144.81 -41.32 144.81 -40.68 147.81 C-39.9 150.92 -38.97 153.95 -38 157 C-37.83 157.93 -37.66 158.85 -37.49 159.81 C-37.33 160.53 -37.17 161.25 -37 162 C-35.22 163.14 -35.22 163.14 -33 164 C-25.28 168.71 -24.77 177.87 -22.75 186.05 C-22.06 188.76 -21.36 191.45 -20.56 194.12 C-20.36 194.83 -20.15 195.53 -19.94 196.26 C-18.66 198.63 -17.53 199.12 -15 200 C-13.25 200.14 -11.5 200.22 -9.75 200.25 C-2.31 200.81 1.41 204.41 6.5 209.5 C8.39 212.65 8.32 214.36 8 218 C5.93 222.54 3.18 226.87 -1.33 229.2 C-3.54 229.89 -5.75 230.45 -8 231 C-12.34 233.29 -13.18 236.58 -15 241 C-16.8 243.79 -17.77 243.95 -21.06 244.69 C-26.21 243.79 -28.73 241.36 -32.57 237.95 C-37.04 234.37 -41.39 233.66 -47 233 C-47 232.34 -47 231.68 -47 231 C-50.22 230.13 -50.22 230.13 -54 230 C-54.91 230.65 -55.83 231.3 -56.77 231.96 C-60.72 234.45 -62.99 234.45 -67.62 234.31 C-68.92 234.29 -70.21 234.26 -71.54 234.24 C-74.88 234.09 -78.19 233.81 -81.52 233.5 C-88.34 232.91 -95.14 232.78 -101.97 232.76 C-104.06 232.75 -106.15 232.72 -108.24 232.69 C-115.45 232.63 -121.83 233.15 -128.72 235.33 C-131.59 236.17 -134.2 236.3 -137.19 236.19 C-138.57 236.15 -138.57 236.15 -139.98 236.11 C-140.65 236.07 -141.31 236.04 -142 236 C-142 235.34 -142 234.68 -142 234 C-142.99 234 -143.98 234 -145 234 C-147.91 227.2 -149.66 222.31 -148 215 C-147.5 215.99 -147.5 215.99 -147 217 C-146.34 217 -145.68 217 -145 217 C-144.71 216.36 -144.42 215.72 -144.12 215.06 C-143 213 -143 213 -141 212 C-140.11 212.47 -139.23 212.95 -138.31 213.44 C-134.47 215.25 -132.2 215.62 -128 215 C-125.53 212.64 -125.53 212.64 -124 210 C-125.32 210 -126.64 210 -128 210 C-128.47 210.52 -128.95 211.03 -129.44 211.56 C-129.95 212.04 -130.47 212.51 -131 213 C-134.48 212.74 -136.05 211.97 -139 210 C-140.73 209.81 -140.73 209.81 -142.5 209.62 C-146 209 -146 209 -147.94 207.44 C-149.18 204.58 -148.92 202.41 -148.78 199.34 C-149.15 195.4 -151.02 192.15 -152.75 188.63 C-154.26 185.46 -155.17 182.4 -156 179 C-156.66 179 -157.32 179 -158 179 C-162.79 173.59 -167 168.42 -167 161 C-166.67 161.66 -166.34 162.32 -166 163 C-165.34 163 -164.68 163 -164 163 C-162.62 164.25 -162.62 164.25 -161 166 C-160.28 166.66 -159.56 167.32 -158.81 168 C-157 170 -157 170 -157 173 C-156.34 173 -155.68 173 -155 173 C-154.67 173.99 -154.34 174.98 -154 176 C-152.04 177.17 -152.04 177.17 -149.69 178.06 C-146.73 179.28 -143.85 180.54 -141 182 C-141 180.68 -141 179.36 -141 178 C-141.78 177.69 -142.57 177.38 -143.38 177.06 C-146 176 -146 176 -148 175 C-148 174.34 -148 173.68 -148 173 C-148.99 172.67 -149.98 172.34 -151 172 C-151 171.34 -151 170.68 -151 170 C-151.99 169.67 -152.98 169.34 -154 169 C-155.54 167.19 -155.54 167.19 -157.06 165 C-159.08 161.98 -159.08 161.98 -162 160 C-162 158.68 -162 157.36 -162 156 C-162.64 155.73 -163.28 155.46 -163.94 155.19 C-166 154 -166 154 -167 151 C-168.14 141.99 -166.71 136.44 -161.81 128.88 C-156.36 120.21 -154.58 109.77 -152.42 99.89 C-152.08 98.36 -151.71 96.84 -151.34 95.32 C-149.86 88.98 -149.64 82.64 -149.52 76.15 C-149.37 71.76 -149.1 69.98 -146 67 C-144.22 61.48 -143.79 56.78 -144 51 C-144.66 51 -145.32 51 -146 51 C-147.62 48.43 -148.04 47.32 -147.62 44.25 C-147.32 43.14 -147.32 43.14 -147 42 C-141.4 40.13 -134.65 40.06 -129.06 42.12 C-122.3 46.27 -121.19 52.2 -119.07 59.48 C-116.67 67.39 -114.12 75.41 -109 82 C-108.41 82.78 -107.82 83.56 -107.22 84.36 C-100.86 92.62 -94.8 98.09 -85.25 102.31 C-84.5 102.66 -83.74 103 -82.96 103.36 C-70.79 108.91 -55.78 109 -43.18 104.32 C-42.13 103.88 -41.08 103.45 -40 103 C-38.67 102.5 -37.34 101.99 -36.01 101.49 C-23.92 96.76 -14 89.89 -8 78 C-2.83 65.96 -2.83 65.96 -0.68 53.15 C-0.64 52.21 -0.6 51.28 -0.56 50.32 C-0.52 49.35 -0.48 48.38 -0.44 47.38 C-0.37 45.95 -0.37 45.95 -0.31 44.5 C-0.07 39.04 0.03 33.61 -0.03 28.14 C0.01 25.36 0.43 22.72 1 20 C0.34 19.67 -0.32 19.34 -1 19 C-0.67 18.67 -0.34 18.34 0 18 C0.34 13.48 0.06 8.99 -0.56 4.5 C-0.78 2.77 -0.78 2.77 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7D6282\",transform:\"translate(691,279)\"})),_path24||(_path24=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.36 3.07 2.8 5.59 3.46 9.39 C4.34 15.2 4.34 15.2 6.84 20.39 C8.77 21.3 8.77 21.3 11.03 21.76 C15.38 23.03 17.83 24.84 21.09 27.92 C22.95 29.48 24.68 30.35 26.9 31.32 C32.46 33.89 35.52 38.4 38.84 43.39 C42.84 45.75 46.28 46.71 50.84 47.39 C55.41 63.94 55.41 63.94 51.84 72.39 C50.34 74.76 50.34 74.76 48.84 76.39 C48.18 76.39 47.52 76.39 46.84 76.39 C46.47 77.35 46.47 77.35 46.09 78.32 C44.84 80.39 44.84 80.39 43.15 81.26 C39.83 81.44 37.01 80.31 33.84 79.39 C32.85 79.72 31.86 80.05 30.84 80.39 C31.83 81.71 32.82 83.03 33.84 84.39 C30.37 87.35 26.95 89.42 22.84 91.39 C21.16 93.06 21.64 95.28 21.53 97.57 C20.99 103.97 18.99 107.24 14.46 111.76 C11.84 113.39 11.84 113.39 8.9 113.32 C4.66 113.41 2.65 115.47 -0.16 118.39 C-1.67 120.11 -3.13 121.87 -4.58 123.64 C-6.21 125.44 -7.91 126.76 -9.85 128.2 C-13.62 131.27 -14.29 134.46 -15.43 139.06 C-16.9 143.75 -20.5 145.96 -24.47 148.51 C-28.04 152.33 -27.73 154.81 -27.57 159.86 C-27.3 162.63 -27.3 162.63 -25.16 165.39 C-22.6 166.12 -22.6 166.12 -20.16 166.39 C-20.16 167.05 -20.16 167.71 -20.16 168.39 C-19.17 168.39 -18.18 168.39 -17.16 168.39 C-17.16 167.4 -17.16 166.41 -17.16 165.39 C-14.85 165.39 -12.54 165.39 -10.16 165.39 C-9.83 166.05 -9.5 166.71 -9.16 167.39 C-7.24 167.93 -7.24 167.93 -4.97 168.26 C-0.17 169.22 3.32 170.87 6.84 174.39 C8.21 187.83 3.83 196.64 -4.16 206.95 C-6.83 210.42 -8.83 213.47 -10.29 217.64 C-11.3 220.31 -11.76 221.16 -14.28 222.59 C-17.69 223.79 -20.55 224.39 -24.16 224.39 C-24.33 225.02 -24.5 225.64 -24.68 226.29 C-28.7 240.52 -36.58 248.84 -46.85 259.2 C-47.38 259.74 -47.92 260.28 -48.47 260.83 C-51.05 263.41 -53.66 265.85 -56.49 268.15 C-59.19 270.11 -59.19 270.11 -60.16 272.39 C-60.21 274.26 -60.25 276.14 -60.29 278.01 C-60.81 284.83 -63.17 287.94 -68.16 292.39 C-68.69 292.91 -69.21 293.43 -69.76 293.96 C-74.89 298.77 -81.05 301.99 -87.16 305.39 C-88.05 305.9 -88.94 306.41 -89.86 306.94 C-95.9 310.39 -95.9 310.39 -98.16 310.39 C-98.16 311.05 -98.16 311.71 -98.16 312.39 C-100.46 315.31 -101.74 316.29 -105.41 317.14 C-106.32 317.22 -107.23 317.3 -108.16 317.39 C-106.84 315.74 -105.52 314.09 -104.16 312.39 C-105.03 312.47 -105.89 312.55 -106.79 312.64 C-111.02 312.32 -112.77 310.88 -116.16 308.39 C-117.34 307.68 -118.53 307 -119.72 306.32 C-120.86 305.68 -121.99 305.05 -123.16 304.39 C-124.01 303.95 -124.85 303.52 -125.72 303.07 C-130.11 300.04 -133.56 296.61 -134.97 291.39 C-133.73 286.79 -130.85 284.27 -127.16 281.39 C-126.52 281.07 -125.87 280.74 -125.21 280.41 C-120.84 278.16 -120.84 278.16 -118.19 274.18 C-117.59 271.56 -117.18 268.99 -116.85 266.32 C-116.59 264.54 -116.32 262.76 -116.05 260.98 C-115.95 260.19 -115.84 259.41 -115.74 258.6 C-115.05 255.95 -113.99 254.41 -112.16 252.39 C-107.85 251.21 -103.68 251.55 -99.76 253.7 C-97.41 255.46 -95.24 257.31 -93.16 259.39 C-91.31 259.62 -89.46 259.8 -87.6 259.95 C-86.08 260.07 -86.08 260.07 -84.53 260.2 C-83.75 260.26 -82.97 260.32 -82.16 260.39 C-81.83 259.73 -81.5 259.07 -81.16 258.39 C-81.82 257.73 -82.48 257.07 -83.16 256.39 C-79.65 254.05 -78.46 254.25 -74.35 254.45 C-69.45 254.51 -66.19 254.44 -62.16 251.39 C-57.91 246.47 -55.77 242.26 -55.88 235.58 C-56.56 230.26 -58.88 226.44 -62.97 223.07 C-65.28 221.85 -67.51 220.77 -69.91 219.76 C-73.16 218.39 -73.16 218.39 -75.16 216.39 C-74.98 213.93 -74.69 211.62 -74.29 209.2 C-73.08 201.56 -72.58 195.27 -74.91 187.82 C-75.24 186.75 -75.56 185.68 -75.89 184.57 C-78.34 178.43 -82.08 174.2 -86.97 169.89 C-87.5 169.41 -88.03 168.93 -88.57 168.44 C-91.44 165.87 -94.36 163.38 -97.35 160.95 C-100.74 157.86 -100.74 157.86 -101.16 154.39 C-98.47 148.07 -94.55 142.39 -90.66 136.76 C-90.27 136.19 -89.88 135.62 -89.48 135.03 C-85.41 129.13 -85.41 129.13 -83.16 127.39 C-82.07 127.35 -80.97 127.3 -79.85 127.26 C-75.62 126.26 -75.41 125.82 -73.22 122.32 C-72.74 121.51 -72.26 120.69 -71.76 119.86 C-70.1 117.29 -68.31 115.42 -66.1 113.32 C-62.88 110.25 -60.65 107.24 -58.46 103.38 C-56.98 101.12 -55.26 99.41 -53.35 97.51 C-50.55 94.42 -49.67 92.45 -49.6 88.26 C-49.74 85.48 -50.17 83.35 -51.13 80.73 C-52.53 76.19 -52.84 71.73 -53.22 67.01 C-53.38 65.19 -53.54 63.37 -53.7 61.55 C-53.77 60.68 -53.85 59.81 -53.92 58.92 C-54.25 55.4 -54.7 51.89 -55.16 48.39 C-54.17 48.06 -53.18 47.73 -52.16 47.39 C-50.29 48.53 -50.29 48.53 -48.29 50.2 C-43.94 53.6 -41.29 55.54 -35.6 55.14 C-31.61 54.33 -31.61 54.33 -28.16 52.39 C-26.13 48.28 -25.49 44.08 -24.97 39.57 C-24.88 38.81 -24.79 38.04 -24.7 37.25 C-23.92 29.32 -24.34 21.47 -24.97 13.54 C-25.34 7.99 -25.49 4.14 -22.16 -0.61 C-16.17 -3.61 -5.46 -4.08 0 0 Z \",fill:\"#867396\",transform:\"translate(783.16015625,302.61328125)\"})),_path25||(_path25=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89 0.02 1.78 0.04 2.7 0.07 C8.7 0.66 11.26 2.89 15.12 7.5 C19 12.6 19 12.6 19 15 C19.62 15.08 20.24 15.17 20.88 15.25 C23 16 23 16 23.94 17.75 C24.29 18.49 24.64 19.24 25 20 C26.63 21.71 28.29 23.38 30 25 C31 26 31 26 31.11 28.13 C31.11 29.05 31.1 29.97 31.1 30.91 C31.09 31.9 31.09 32.89 31.09 33.91 C31.08 34.95 31.07 35.99 31.06 37.06 C31.06 38.11 31.05 39.15 31.05 40.23 C31.04 42.82 31.02 45.41 31 48 C31.66 48 32.32 48 33 48 C33.33 48.66 33.66 49.32 34 50 C40.75 50.14 40.75 50.14 47.44 49.38 C50 49 50 49 53 51 C53.55 53.76 53.93 56.34 54.19 59.12 C54.27 59.88 54.35 60.63 54.44 61.41 C54.64 63.27 54.82 65.14 55 67 C45.75 70.87 39.45 69.78 30 67 C29.64 68.76 29.64 68.76 29.27 70.55 C26.61 83.14 22.95 94.32 17.37 105.96 C15.93 109 15.93 109 14.98 112.32 C14.65 113.2 14.33 114.09 14 115 C12.35 115.7 10.68 116.37 9 117 C7.48 119.8 6.86 122.54 6.06 125.62 C5 129 5 129 3.42 130.46 C1.81 131.88 1.81 131.88 1.84 133.9 C1.94 134.6 2.04 135.29 2.14 136.01 C2.24 136.77 2.34 137.53 2.45 138.31 C2.57 139.09 2.69 139.88 2.81 140.69 C2.92 141.48 3.03 142.28 3.14 143.1 C3.41 145.07 3.7 147.04 4 149 C3.01 149 2.02 149 1 149 C-0.72 151.44 -0.72 151.44 -2 154 C-4.5 152.69 -4.5 152.69 -7 151 C-7 150.01 -7 149.02 -7 148 C-7.66 148 -8.32 148 -9 148 C-9.99 145.52 -9.99 145.52 -11 143 C-14.56 143 -15.28 143.89 -18 146 C-18.66 146 -19.32 146 -20 146 C-20.66 148.31 -21.32 150.62 -22 153 C-22.66 153 -23.32 153 -24 153 C-24.19 154.92 -24.19 154.92 -24.38 156.88 C-24.75 160.75 -24.75 160.75 -27 163 C-30.3 162.67 -31.62 162.38 -34 160 C-34.61 158.02 -35.15 156.02 -35.62 154 C-35.89 152.93 -36.15 151.86 -36.41 150.75 C-37 148 -37 148 -37 146 C-38.32 145.34 -39.64 144.68 -41 144 C-40.46 138.31 -39.86 132.65 -39 127 C-39.99 126.34 -40.98 125.68 -42 125 C-43.55 127.85 -44.44 130.43 -45.08 133.61 C-45.27 134.52 -45.45 135.43 -45.65 136.36 C-45.85 137.34 -46.05 138.31 -46.25 139.31 C-55.66 183.92 -55.66 183.92 -62.88 196 C-64.71 199.25 -66.2 202.65 -67.76 206.03 C-71.58 214.31 -75.49 222.35 -80.56 229.94 C-80.98 230.56 -81.4 231.19 -81.83 231.83 C-82.82 233.27 -83.9 234.64 -85 236 C-85.66 236 -86.32 236 -87 236 C-87.26 236.58 -87.52 237.16 -87.79 237.75 C-90.92 243.56 -96.26 248.49 -101 253 C-101.85 253.82 -101.85 253.82 -102.71 254.66 C-109.54 261.03 -117.19 266.2 -124.84 271.5 C-135.24 278.6 -135.24 278.6 -145.06 286.44 C-151.44 292 -151.44 292 -156 292 C-156 292.66 -156 293.32 -156 294 C-156.93 294.33 -157.86 294.66 -158.82 295 C-166.93 297.97 -173.65 301.5 -180.67 306.62 C-188.72 312.48 -197.81 318.19 -207 322 C-209.21 321.59 -209.21 321.59 -211 321 C-209.68 320.34 -208.36 319.68 -207 319 C-207 318.34 -207 317.68 -207 317 C-206.41 316.72 -205.81 316.44 -205.2 316.15 C-199.36 313.33 -193.94 310.15 -188.54 306.55 C-186 305 -186 305 -183.24 303.98 C-182.5 303.66 -181.76 303.33 -181 303 C-180.67 302.01 -180.34 301.02 -180 300 C-178.19 298.25 -178.19 298.25 -176 296.44 C-173.05 294.08 -173.05 294.08 -171 291 C-170.92 289.1 -170.86 287.21 -170.81 285.31 C-170.32 279 -168.7 276.1 -164 272 C-163.43 271.5 -162.87 271 -162.28 270.48 C-161 269.36 -159.71 268.25 -158.41 267.14 C-145.19 255.75 -145.19 255.75 -137.03 240.77 C-135.93 237.22 -134.92 234.18 -133 231 C-129.94 229.52 -127.03 228.84 -123.73 228.06 C-120.88 227.26 -120.88 227.26 -119.61 224.91 C-119.03 223.19 -118.48 221.46 -117.98 219.71 C-116.83 216.53 -115.25 214.56 -113.06 212 C-105.88 203.5 -102.38 194.99 -102.46 183.86 C-102.77 180.98 -102.77 180.98 -104.54 179.14 C-108.8 176.34 -112.96 175.31 -118 175 C-118.33 174.01 -118.66 173.02 -119 172 C-121.31 172 -123.62 172 -126 172 C-126 172.99 -126 173.98 -126 175 C-126.99 175 -127.98 175 -129 175 C-129 174.34 -129 173.68 -129 173 C-129.76 173.08 -130.53 173.16 -131.31 173.25 C-134 173 -134 173 -135.63 171.32 C-138.11 167.12 -137.98 162.7 -137 158 C-135.02 155.42 -132.65 153.84 -130 152 C-128.99 150.68 -127.98 149.35 -127 148 C-126.34 148 -125.68 148 -125 148 C-124.98 146.85 -124.96 145.69 -124.94 144.5 C-123.95 136.52 -116.8 131.81 -111 127 C-109.38 125.19 -107.83 123.34 -106.3 121.45 C-105 120 -105 120 -103 119 C-101.93 119.12 -100.86 119.25 -99.75 119.38 C-95.58 118.96 -95.2 118.63 -92.62 115.62 C-89.66 111.78 -88.93 109.49 -88.75 104.62 C-88.3 99.34 -88.3 99.34 -85.88 96.56 C-84.93 96.05 -83.98 95.53 -83 95 C-81.73 94.25 -80.46 93.5 -79.19 92.75 C-78.14 92.17 -77.08 91.6 -76 91 C-76.66 89.68 -77.32 88.36 -78 87 C-76.5 85.81 -76.5 85.81 -74 85 C-70.43 85.87 -67.11 87.3 -64 89.25 C-60.46 90.58 -57.66 89.83 -54 89 C-52.6 87.37 -52.6 87.37 -52 85 C-51.32 83.99 -50.64 82.98 -49.94 81.93 C-47.37 77.47 -47.73 73.7 -48.19 68.69 C-48.31 66.83 -48.44 64.98 -48.56 63.13 C-48.63 62.15 -48.7 61.16 -48.78 60.15 C-49.18 54.48 -49.48 48.8 -49.75 43.12 C-49.82 42.03 -49.89 40.93 -49.96 39.8 C-50.26 33.58 -49.93 29.51 -47 24 C-46.31 21.22 -46.31 21.22 -46 19 C-45.67 19 -45.34 19 -45 19 C-45.08 20.13 -45.16 21.27 -45.25 22.44 C-45.26 31.06 -42.54 39.81 -40.1 48.03 C-38.2 54.59 -37.47 61.08 -37 67.88 C-36.92 68.78 -36.84 69.68 -36.76 70.62 C-36.53 75.09 -36.47 77.98 -39.45 81.48 C-40.29 82.31 -41.13 83.14 -42 84 C-42.85 86.22 -42.85 86.22 -43 88 C-40.76 88.59 -40.76 88.59 -38 88 C-33.4 84.24 -29.8 78.92 -29 73 C-29.37 65.51 -30.9 58.32 -32.69 51.06 C-34.48 43.24 -33.85 35.9 -33 28 C-32.01 27.67 -31.02 27.34 -30 27 C-28.88 24.38 -28.88 24.38 -27.94 21.19 C-22.96 7.39 -14.98 -0.75 0 0 Z \",fill:\"#836E8F\",transform:\"translate(892,296)\"})),_path26||(_path26=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.5 2.89 2.5 2.89 1.99 4.81 C0.78 10.29 0.88 15.43 1.19 21 C1.24 22 1.29 23.01 1.34 24.04 C2.29 45.64 2.29 45.64 12.03 63.91 C14.58 66.61 15.12 69 16.06 72.56 C17.37 78 17.37 78 21 82 C23.5 82.58 23.5 82.58 26 82 C27.98 79.94 29.08 77.85 30.38 75.31 C32 73 32 73 34.5 72 C37 72 37 72 38.69 73.06 C41.79 77.64 42.54 83.29 43.56 88.62 C44.46 93.44 44.46 93.44 45.58 98.2 C46.35 101.51 46.16 104.61 46 108 C44 110 44 110 40.3 110.09 C38.02 110.03 35.75 109.94 33.47 109.83 C28.48 109.71 25.41 110.39 21 113 C16.49 114.34 11.67 114.33 7 114 C5.01 112.01 5.69 108.05 5.57 105.35 C5.24 102.82 5.24 102.82 2.96 101.68 C2.31 101.46 1.67 101.23 1 101 C-0.3 102.41 -1.59 103.83 -2.88 105.25 C-3.95 106.43 -3.95 106.43 -5.05 107.64 C-8.5 111.83 -9.19 114.81 -9.69 120.19 C-10.69 127.18 -13.18 130.99 -18 136 C-18.5 136.58 -19.01 137.16 -19.52 137.75 C-24.65 143.36 -31.06 147.48 -37.27 151.79 C-44.52 156.84 -51.51 162.13 -58.3 167.78 C-60.91 169.93 -63.57 171.99 -66.25 174.06 C-69.43 176.58 -72.06 179.11 -74.62 182.25 C-77.94 186.21 -81.22 188.17 -86 190 C-86.67 190.26 -87.33 190.53 -88.02 190.8 C-93.8 192.9 -99.72 193.99 -105.77 195.06 C-110.5 196.44 -113.12 198.67 -115.81 202.75 C-116.2 203.49 -116.6 204.24 -117 205 C-124.26 204.29 -130.41 198.38 -135 193 C-139.46 184.94 -139.48 176.9 -138 168 C-138.63 167.66 -139.25 167.32 -139.9 166.97 C-146.56 163.02 -146.56 163.02 -148.5 158.5 C-149.27 153.53 -149.36 148.43 -149.65 143.41 C-150.04 139.63 -150.93 136.47 -152.38 132.96 C-153.21 130.32 -153.42 128.78 -153 126 C-151.5 123.29 -149.66 120.86 -147.81 118.38 C-143.37 112.2 -139.74 106.14 -137 99 C-136.34 99 -135.68 99 -135 99 C-134.77 98.36 -134.55 97.72 -134.31 97.06 C-127.08 80.19 -127.08 80.19 -119.27 76.82 C-117.2 76.14 -115.12 75.5 -113.02 74.9 C-109.55 73.87 -106.41 72.46 -103.14 70.91 C-100.95 69.98 -98.81 69.45 -96.5 68.88 C-91.31 67.24 -88.53 63.68 -85.14 59.57 C-81.17 54.8 -77.21 51.26 -71.88 48.06 C-71.03 47.55 -71.03 47.55 -70.16 47.03 C-66.54 44.85 -62.86 42.84 -59.12 40.88 C-51.88 36.93 -47.59 33.11 -43.12 26.12 C-37.6 17.59 -30.59 12.25 -22.31 6.56 C-21.68 6.12 -21.05 5.69 -20.4 5.24 C-14.32 1.19 -9.24 1 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#897796\",transform:\"translate(838,568)\"})),_path27||(_path27=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.35 1.3 10.67 5.41 15 10 C16.27 12.26 16.27 12.26 17 14 C22.37 13.58 25 12.56 29 9 C32.84 6.35 36.48 6.78 41 7 C41.99 7.5 41.99 7.5 43 8 C42.5 6.51 42.5 6.51 42 5 C47.62 3 47.62 3 51 3 C51.74 2.48 52.49 1.97 53.25 1.44 C56.98 -0.51 58.94 0.02 63 1 C64.11 1.52 65.23 2.03 66.38 2.56 C70.27 4.11 72.88 4.22 76.98 4.01 C79 4 79 4 82 5 C82.69 7.06 82.69 7.06 83 9 C83.66 9 84.32 9 85 9 C86.57 11.18 88.02 13.35 89.44 15.62 C89.83 16.24 90.23 16.86 90.63 17.5 C97 27.56 97 27.56 97 31 C97.72 31.27 98.44 31.54 99.19 31.81 C104.48 34.05 108.08 36.8 112 41 C112.8 41.78 112.8 41.78 113.62 42.57 C117.73 46.8 120.38 51.28 122.88 56.56 C123.17 57.19 123.47 57.81 123.78 58.46 C125.67 62.65 126.37 66.48 127 71 C128.13 73.57 128.13 73.57 129.56 75.81 C132 79.82 132 79.82 132 82 C132.66 82 133.32 82 134 82 C142.19 102.21 141.92 125.25 135 146 C134.97 148.12 134.95 150.25 134.94 152.38 C134.41 160.86 130.78 166.19 126 173 C125.15 174.43 124.31 175.86 123.5 177.31 C122.76 178.64 122.76 178.64 122 180 C121.34 180 120.68 180 120 180 C119.69 180.62 119.38 181.24 119.06 181.88 C118.38 183.25 117.69 184.62 117 186 C116.34 186 115.68 186 115 186 C114.67 186.99 114.34 187.98 114 189 C99.2 202.55 79.73 211.74 59.53 210.88 C56.81 211.01 55.66 211.49 53.44 213 C47.99 216.17 42.72 215.69 36.63 214.56 C27.69 212.15 17.7 208.14 10 203 C7.72 202.51 5.43 202.08 3.12 201.69 C-1.98 200.78 -6.37 199.53 -11.12 197.38 C-19.96 193.68 -29.56 194.07 -39 194 C-36.6 188.31 -36.6 188.31 -34.01 186.98 C-33.24 186.86 -32.48 186.74 -31.69 186.62 C-30.81 186.49 -29.93 186.35 -29.03 186.21 C-25.56 185.97 -22.17 186.07 -18.69 186.19 C-13.35 186.38 -13.35 186.38 -8.88 183.62 C-8.26 182.76 -7.64 181.89 -7 181 C-5.68 180.3 -4.35 179.63 -3 179 C-0.63 177.39 1.69 175.7 4 174 C3.59 170.34 3.59 170.34 1.38 167.56 C0 166 0 166 -0.06 163.06 C1.35 158.99 3.27 158.01 7 156 C7.99 155.67 8.98 155.34 10 155 C10 154.34 10 153.68 10 153 C10.91 152.7 11.81 152.39 12.75 152.08 C25.17 147.81 38.5 142.72 45.05 130.42 C49.4 121.35 51.94 111.81 54 102 C54.23 100.95 54.23 100.95 54.47 99.89 C57.06 88.5 57.06 88.5 56 77 C53.75 74.01 52.55 73.18 49 72 C49.08 71.28 49.17 70.56 49.25 69.81 C48.92 66.13 47.5 64.65 45 62 C44.34 61.67 43.68 61.34 43 61 C43 60.01 43 59.02 43 58 C41.82 57.66 41.82 57.66 40.62 57.31 C37.27 55.64 37.3 54.42 36 51 C32.04 44.62 27.29 38.74 22.69 32.81 C19.68 28.91 16.8 24.95 14 20.89 C12.32 18.46 10.62 16.05 8.9 13.64 C8.35 12.86 7.8 12.09 7.24 11.29 C6.13 9.74 5.02 8.18 3.91 6.62 C3.41 5.91 2.9 5.2 2.38 4.46 C1.92 3.82 1.46 3.18 0.99 2.52 C0 1 0 1 0 0 Z \",fill:\"#462453\",transform:\"translate(228,940)\"})),_path28||(_path28=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.23 2.16 10.17 6.8 14 12 C14.69 13.99 15.36 15.99 16 18 C18.35 19.34 18.35 19.34 21 20 C21.59 20.34 22.17 20.69 22.77 21.04 C25.7 22.3 28.07 22.19 31.25 22.12 C32.87 22.1 32.87 22.1 34.52 22.07 C35.75 22.04 35.75 22.04 37 22 C36.98 21.2 36.96 20.39 36.94 19.56 C37 17 37 17 38 16 C39.67 15.96 41.33 15.96 43 16 C43.62 18.38 43.62 18.38 44 21 C43.34 21.66 42.68 22.32 42 23 C42.03 25.09 42.07 27.18 42.13 29.27 C41.89 34.33 40.38 39.15 39 44 C38.34 44 37.68 44 37 44 C37.28 45.14 37.28 45.14 37.56 46.31 C38 49 38 49 37 52 C36.93 53.74 36.92 55.48 36.94 57.22 C36.95 58.74 36.95 58.74 36.96 60.29 C36.98 61.88 36.98 61.88 37 63.5 C37.03 65.59 37.05 67.69 37.06 69.78 C37.07 70.71 37.09 71.64 37.1 72.6 C37 75 37 75 36 78 C36.66 77.67 37.32 77.34 38 77 C38 76.01 38 75.02 38 74 C38.66 74 39.32 74 40 74 C40.25 73.18 40.5 72.35 40.75 71.5 C42.19 67.47 44 63.75 45.94 59.94 C46.28 59.24 46.63 58.55 46.99 57.83 C48.45 54.93 49.94 52.1 51.63 49.33 C53.52 46.11 54.62 42.72 55.84 39.21 C57.24 36.55 58.27 36.09 61 35 C61.99 34.34 62.98 33.68 64 33 C70.45 33.47 75.78 36.32 81 40 C83.66 44.46 83 48.01 82 53 C81.34 53 80.68 53 80 53 C79.9 53.89 79.8 54.78 79.7 55.7 C78.95 59.23 77.91 61.01 75.75 63.88 C73.45 67.01 71.2 70.14 69.12 73.44 C68.54 74.36 68.54 74.36 67.95 75.31 C66.84 77.15 66.84 77.15 66 80 C66.66 80.33 67.32 80.66 68 81 C67.67 81.52 67.34 82.03 67 82.56 C65.79 85.08 65.79 85.08 66 88.38 C66 92 66 92 64.98 94.7 C63.75 98.83 63.96 102.24 64.31 106.5 C64.36 107.23 64.41 107.97 64.46 108.72 C64.75 112.87 65.24 116.91 66 121 C62.6 117.6 62.64 112.7 61.78 108.09 C61.52 107.07 61.27 106.05 61 105 C60.34 104.67 59.68 104.34 59 104 C59 102.68 59 101.36 59 100 C53.72 99.67 48.44 99.34 43 99 C42.07 100.65 41.14 102.3 40.19 104 C39.67 104.93 39.14 105.86 38.61 106.81 C34.81 114.35 33.31 121.17 32.31 129.5 C32.18 130.51 32.05 131.53 31.92 132.57 C31.6 135.05 31.3 137.52 31 140 C30.67 140 30.34 140 30 140 C28.97 135.77 28.85 131.68 28.87 127.36 C28.87 126.63 28.87 125.9 28.86 125.15 C28.86 123.61 28.87 122.07 28.87 120.54 C28.87 118.21 28.87 115.88 28.86 113.54 C28.86 112.04 28.87 110.54 28.87 109.04 C28.87 108.36 28.86 107.67 28.86 106.96 C28.88 102.22 29.37 97.69 30 93 C30 92.03 30 91.06 30 90.06 C30 88 30 88 31 87 C32.19 81.33 32.02 75.76 31.96 69.98 C32.01 64.89 32.33 59.84 32.73 54.77 C33 50.99 33.04 47.66 32 44 C30.96 42.76 30.96 42.76 28.69 42.69 C25.84 42.74 25.84 42.74 23.94 45.06 C23.3 45.7 22.66 46.34 22 47 C20.01 46.84 20.01 46.84 18 46 C16.84 44.43 16.84 44.43 15.94 42.44 C15.61 41.72 15.27 41.01 14.93 40.27 C14.03 38.08 13.26 35.87 12.5 33.62 C11.41 30.03 11.41 30.03 9.18 28.8 C5.44 27.43 1.92 27.33 -2 28 C-4.85 29.93 -4.85 29.93 -7 33 C-7.49 33.57 -7.98 34.14 -8.49 34.73 C-12.86 40.01 -15.01 45.49 -17 52 C-17.35 53.14 -17.7 54.29 -18.06 55.46 C-20.84 64.87 -23.06 73.97 -23.56 83.77 C-24.11 86.54 -25.09 87.95 -27 90 C-28.49 90.5 -28.49 90.5 -30 91 C-32.85 99.06 -32.92 107.89 -33.6 116.36 C-34.23 124.06 -35.2 131.27 -37.41 138.68 C-38.23 141.92 -38.04 144.59 -37.5 147.88 C-37.3 149.14 -37.09 150.4 -36.88 151.7 C-35.72 157.65 -34.23 163.54 -32.75 169.42 C-31.34 175.18 -30.55 180.68 -30.22 186.61 C-29.87 190.39 -29.03 192.77 -27 196 C-22.64 197.93 -19.32 198.07 -14.62 197.69 C-9.82 197.61 -7.15 197.93 -3.44 201.06 C1.59 206 4.34 212.47 6.88 218.94 C7.13 219.58 7.38 220.22 7.64 220.88 C8.98 224.27 10.25 227.68 11.47 231.11 C14.16 238.63 17.14 245.27 21.36 252.1 C23.03 255.05 24.18 257.93 25.31 261.12 C29.88 273.61 36.83 285.13 45.09 295.52 C47 298 47 298 48.63 300.76 C49.8 303.12 49.8 303.12 52 304 C55.86 304.36 58.17 304.52 61.5 302.44 C63.14 299.77 63.46 298.25 62.8 295.18 C58.56 283.6 50.55 274.42 40.7 267.32 C38.25 265.42 37.08 263.91 36 261 C35.62 256.99 35.71 253.23 36.62 249.31 C37.14 246.15 36.03 244.02 35 241 C34.31 234.24 36.03 227.45 38 221 C38.66 220.34 39.32 219.68 40 219 C42.83 219.36 45.29 220.1 48 221 C49.33 224.11 49.99 226.89 50.38 230.25 C51.06 234.35 52.41 237.69 54.01 241.5 C55.75 245.89 57 250.25 57 255 C57.66 255.33 58.32 255.66 59 256 C60.37 258.32 61.18 260.55 62 263.12 C62.8 266.09 62.8 266.09 65 268 C70.58 275.82 75 284.37 79.47 292.85 C81.98 297.56 84.61 301.96 87.75 306.27 C90.41 309.98 92.02 313.13 93.06 317.62 C94.48 322.86 96.29 326.42 99.83 330.51 C101 332 101 332 101 334 C101.66 334.33 102.32 334.66 103 335 C103.84 336.59 104.6 338.23 105.31 339.88 C107.01 343.75 108.76 347.61 110.56 351.44 C111.39 353.29 112.2 355.14 113 357 C113.4 357.91 113.79 358.82 114.2 359.76 C117.19 367.47 117.33 374.38 117.04 382.51 C116.74 385.85 116.74 385.85 118 388 C118.03 391.22 117.93 394.42 117.84 397.64 C118.01 401.14 118.9 403.69 120 407 C121.36 422.81 119.14 439.73 115 455 C114.34 455 113.68 455 113 455 C112.66 456.89 112.66 456.89 112.31 458.81 C111.24 464.2 109.89 469.5 108.5 474.81 C108.29 475.64 108.07 476.46 107.85 477.31 C106.79 481.32 105.67 485.19 104 489 C103.34 489 102.68 489 102 489 C101.88 489.58 101.76 490.16 101.63 490.76 C101.47 491.54 101.3 492.32 101.12 493.12 C100.88 494.27 100.88 494.27 100.63 495.45 C99.12 501.57 96.93 506.01 93.25 511.06 C92.83 511.66 92.41 512.26 91.98 512.88 C88.62 517.56 84.95 521.71 79.56 524.06 C75.72 523.97 73.07 522.22 70 520 C69.5 519.42 69.01 518.85 68.5 518.25 C65.96 516.13 63.15 516.82 60 517 C60 514.69 60 512.38 60 510 C60.66 510 61.32 510 62 510 C62.26 509.43 62.53 508.85 62.8 508.26 C64.07 505.86 65.54 503.92 67.25 501.81 C73.9 493.35 78.69 484.89 83 475 C83.66 475 84.32 475 85 475 C84.95 474.17 84.9 473.33 84.85 472.47 C85.02 468.5 86.08 465.16 87.38 461.44 C89.74 454.33 91.14 447.46 92 440 C92.66 440 93.32 440 94 440 C94.08 435.33 94.13 430.65 94.16 425.98 C94.18 424.4 94.2 422.82 94.23 421.24 C94.46 406.54 93.28 392.25 87.81 378.44 C87.51 377.66 87.21 376.87 86.91 376.07 C82.57 365.01 77 354.54 71.13 344.23 C70 342 70 342 69.5 339.84 C68.7 336.88 66.41 335.73 64 334 C64.33 333.01 64.66 332.02 65 331 C64.01 331 63.02 331 62 331 C61.61 330.09 61.22 329.18 60.81 328.25 C58.88 324.79 57.08 323.41 54 321 C53.42 320.05 52.85 319.1 52.25 318.12 C48.54 312.97 42.82 309.52 37 307 C31.36 306.44 31.36 306.44 26.31 308.56 C23.97 311.04 22.07 313.56 20.21 316.41 C18.24 319 16.42 319.93 13.25 320.44 C9.86 319.98 9.2 319.56 6.69 317.5 C3.24 314.85 0.62 314.19 -3.71 314.45 C-7.9 315.45 -11.38 317.58 -14 321 C-15.71 327.15 -14.35 332.4 -12.88 338.44 C-12.65 339.41 -12.42 340.39 -12.18 341.39 C-10.82 347.08 -9.23 352.64 -7.38 358.19 C-1.73 375.29 1.52 396.78 -5 414 C-9.06 418.82 -9.06 418.82 -13.25 419.62 C-22.55 423.03 -27.71 434.12 -31.75 442.71 C-34.1 448.9 -33.43 453.43 -31.81 459.69 C-30.94 463.17 -30.97 463.91 -32.25 467.5 C-34 470 -34 470 -36 471 C-35.65 470.2 -35.3 469.39 -34.94 468.56 C-33.75 464.04 -34.31 460.56 -35 456 C-35.19 454.33 -35.38 452.67 -35.56 451 C-35.65 450.26 -35.73 449.51 -35.82 448.75 C-36 447 -36 447 -36 446 C-36.56 446.72 -37.11 447.44 -37.69 448.19 C-43.49 455.25 -43.49 455.25 -47 457 C-45.67 453 -44 450.91 -41 448 C-39.99 446.34 -38.99 444.67 -38 443 C-37.34 442.67 -36.68 442.34 -36 442 C-34.99 440.01 -33.99 438 -33 436 C-31.77 434.24 -30.49 432.52 -29.19 430.81 C-24.79 424.89 -20.88 418.61 -18.09 411.76 C-17 410 -17 410 -15.12 409.23 C-14.07 408.99 -14.07 408.99 -13 408.75 C-9.84 407.74 -9.84 407.74 -8 405.11 C-6.9 400.98 -6.9 400.98 -8 397 C-9.26 397.23 -10.52 397.45 -11.81 397.69 C-13.96 398.07 -13.96 398.07 -16 398 C-18.14 396.38 -18.91 395.41 -19.49 392.77 C-19.55 391.91 -19.6 391.06 -19.66 390.18 C-19.73 389.23 -19.8 388.28 -19.88 387.31 C-19.94 386.32 -20 385.33 -20.06 384.31 C-20.53 376.48 -20.53 376.48 -22.02 368.81 C-23.07 364.71 -23.4 360.95 -23.56 356.75 C-23.81 350.81 -23.81 350.81 -25 345 C-25.14 343.91 -25.29 342.81 -25.44 341.69 C-25.91 338.03 -25.91 338.03 -27 334.69 C-27.83 331.63 -28.14 329.3 -28.31 326.19 C-28.72 321.13 -30.49 317.42 -32.94 313.03 C-34 311 -34 311 -34 309 C-34.66 309 -35.32 309 -36 309 C-38.41 303.48 -40.29 298.08 -39 292 C-36 290 -36 290 -33.62 290.19 C-30.77 290.28 -30.77 290.28 -28.82 287.66 C-25.44 284.47 -22.57 283.47 -18.19 282.19 C-17.49 281.97 -16.8 281.76 -16.09 281.53 C-14.4 281.01 -12.7 280.5 -11 280 C-10.15 274.97 -10.15 274.97 -10.62 269.94 C-11.14 265.89 -10.28 264.38 -8 261 C-6.01 259.14 -3.97 257.4 -1.84 255.71 C0.19 253.83 1.16 252.64 2 250 C1.73 245.32 0.26 242.31 -2.31 238.44 C-2.91 237.53 -3.5 236.62 -4.11 235.68 C-5.98 232.95 -5.98 232.95 -8.23 230.35 C-10 228 -10 228 -10 225 C-10.61 224.75 -11.22 224.5 -11.85 224.24 C-14.33 222.81 -15.07 221.67 -16.44 219.19 C-17.89 216.57 -19.18 214.83 -21.37 212.75 C-24.59 209.38 -26.51 205.87 -28.62 201.75 C-29.01 201.04 -29.39 200.32 -29.78 199.59 C-33.28 192.9 -36.15 186.04 -36.69 178.44 C-36.75 177.59 -36.82 176.74 -36.89 175.87 C-36.92 175.25 -36.96 174.64 -37 174 C-36.34 174 -35.68 174 -35 174 C-34.5 179.94 -34.5 179.94 -34 186 C-33.34 186 -32.68 186 -32 186 C-32.33 185.34 -32.66 184.68 -33 184 C-33.28 182.23 -33.52 180.46 -33.75 178.69 C-34.5 173.49 -35.59 168.48 -36.88 163.39 C-39.99 151.13 -42.02 139.65 -40 127 C-39.8 125.19 -39.61 123.38 -39.44 121.56 C-39.35 120.7 -39.27 119.83 -39.18 118.94 C-39.12 118.3 -39.06 117.66 -39 117 C-38.67 117 -38.34 117 -38 117 C-38 119.31 -38 121.62 -38 124 C-37.34 124 -36.68 124 -36 124 C-36.06 122.11 -36.06 122.11 -36.12 120.19 C-36.14 109.1 -34.39 97.98 -33 87 C-33.66 87 -34.32 87 -35 87 C-35.66 88.98 -36.32 90.96 -37 93 C-37.33 93 -37.66 93 -38 93 C-41.34 62.38 -41.34 62.38 -34 47 C-33.22 45.34 -32.44 43.68 -31.67 42.02 C-29.47 37.34 -27.24 32.66 -25 28 C-24.34 28 -23.68 28 -23 28 C-22.9 27.28 -22.79 26.56 -22.69 25.81 C-21.93 22.73 -20.68 20.68 -19 18 C-18.02 15.73 -17.16 13.44 -16.32 11.12 C-11.1 -3.11 -11.1 -3.11 0 0 Z \",fill:\"#3C194D\",transform:\"translate(493,735)\"})),_path29||(_path29=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.3 2.12 2.6 2.25 3.94 2.38 C8.65 2.91 13.5 3.46 18 5 C18.33 5.66 18.66 6.32 19 7 C21.11 7.91 21.11 7.91 23.56 8.62 C24.8 9.02 24.8 9.02 26.07 9.41 C27.02 9.7 27.02 9.7 28 10 C28 11.32 28 12.64 28 14 C28.99 14.33 29.98 14.66 31 15 C32.69 16.56 32.69 16.56 34 18 C33.01 17.98 32.02 17.97 30.99 17.95 C27.25 17.9 23.51 17.86 19.76 17.84 C18.15 17.82 16.54 17.8 14.93 17.77 C4.8 17.61 -4.2 18.11 -14 21 C-14 21.66 -14 22.32 -14 23 C-13.42 23.03 -12.84 23.05 -12.24 23.08 C-9.6 23.19 -6.96 23.31 -4.31 23.44 C-2.94 23.5 -2.94 23.5 -1.55 23.56 C-0.66 23.6 0.22 23.64 1.14 23.68 C1.95 23.72 2.76 23.76 3.6 23.79 C6 24 6 24 8.4 24.52 C11.48 25.09 14.33 25.06 17.46 25 C35.18 24.93 48.79 27.19 65 35 C70.9 37.63 76.9 39.87 83 42 C83.7 42.25 84.4 42.5 85.12 42.75 C108.12 51.85 108.12 51.85 132 56 C131.34 55.34 130.68 54.68 130 54 C135.45 55.03 140.12 56.25 145 59 C145 59.66 145 60.32 145 61 C145.53 61.18 146.06 61.35 146.6 61.53 C148.18 62.06 149.76 62.59 151.34 63.11 C153.09 63.7 154.85 64.28 156.6 64.86 C159.24 65.73 161.87 66.61 164.5 67.5 C165.4 67.8 166.31 68.09 167.24 68.39 C168.53 68.83 168.53 68.83 169.84 69.28 C170.62 69.54 171.39 69.8 172.19 70.06 C174 71 174 71 175 74 C168.53 73.52 163.39 72.27 157.44 69.75 C149.07 66.36 140.66 63.54 132 61 C131.09 60.73 130.18 60.46 129.24 60.19 C120.56 57.64 111.87 55.11 103.18 52.62 C101.74 52.2 100.31 51.79 98.88 51.38 C97.86 51.08 97.86 51.08 96.82 50.78 C92.34 49.47 88.04 47.88 83.69 46.19 C79.38 44.6 76.13 43.79 71.56 44.06 C62.29 44.57 53.29 41.11 44.46 38.65 C41.66 37.91 38.87 37.38 36 37 C36 36.34 36 35.68 36 35 C31.08 34.83 27.5 34.75 23 37 C22.94 37.7 22.88 38.4 22.82 39.12 C22.73 40.03 22.65 40.94 22.56 41.88 C22.44 43.23 22.44 43.23 22.32 44.62 C22 47 22 47 21 49 C21.22 50.52 21.22 50.52 21.44 52.06 C22.06 56.43 22.08 60.6 22 65 C22 66.81 22.02 68.62 22.04 70.43 C22.41 118.26 22.41 118.26 5 137 C-0.57 142.61 -6.2 145.87 -13.5 148.81 C-14.4 149.19 -15.3 149.57 -16.22 149.97 C-29.77 155.6 -45.66 158.43 -59.73 152.8 C-66.04 149.92 -72.81 146.65 -78 142 C-78 141.34 -78 140.68 -78 140 C-78.59 139.76 -79.18 139.51 -79.79 139.26 C-82.38 137.78 -83.65 136.25 -85.44 133.88 C-85.99 133.15 -86.55 132.43 -87.12 131.68 C-91.7 125.15 -95.06 118.92 -97.69 111.38 C-97.98 110.56 -98.28 109.74 -98.58 108.89 C-99.8 105.47 -100.99 102.04 -102.13 98.59 C-103.51 94.5 -104.57 91.75 -108.5 89.69 C-114.26 88.56 -120.38 88.13 -126 90 C-125.5 93.96 -125.5 93.96 -125 98 C-124.34 98 -123.68 98 -123 98 C-121.69 104.56 -122.47 108.83 -125 115 C-125.66 115 -126.32 115 -127 115 C-127.01 115.59 -127.03 116.18 -127.04 116.79 C-127.12 119.46 -127.22 122.14 -127.31 124.81 C-127.34 125.74 -127.36 126.67 -127.38 127.63 C-127.42 128.52 -127.45 129.41 -127.49 130.33 C-127.51 131.15 -127.54 131.98 -127.57 132.82 C-128.09 135.46 -128.88 136.39 -131 138 C-131.66 138 -132.32 138 -133 138 C-133.66 134.04 -134.32 130.08 -135 126 C-135.99 126.5 -135.99 126.5 -137 127 C-137 128.98 -137 130.96 -137 133 C-143.88 132.12 -143.88 132.12 -145 131 C-144.82 128.31 -144.38 125.67 -144 123 C-145.89 122.32 -145.89 122.32 -148 122 C-150.36 124.36 -150.49 125.78 -151 129 C-150.36 129.31 -149.72 129.62 -149.06 129.94 C-147 131 -147 131 -146 132 C-145.96 133.67 -145.96 135.33 -146 137 C-145.34 137 -144.68 137 -144 137 C-142.38 138.38 -142.38 138.38 -141 140 C-141 140.66 -141 141.32 -141 142 C-140.34 142 -139.68 142 -139 142 C-139 143.32 -139 144.64 -139 146 C-143.05 146.98 -146.84 147.08 -151 147 C-151.19 148.89 -151.19 148.89 -151.38 150.81 C-151.7 154.1 -152.07 155.1 -154 158 C-157.72 153.88 -157.43 150.21 -157.59 144.88 C-158.04 141.68 -158.97 140.42 -161 138 C-161 137.34 -161 136.68 -161 136 C-163.64 135.34 -166.28 134.68 -169 134 C-170 130 -170 130 -168.98 128.12 C-167.57 125.07 -168.44 123.33 -169.36 120.14 C-171.2 112.89 -171.35 106.13 -171.19 98.69 C-171.17 97.46 -171.16 96.23 -171.15 94.96 C-171.11 91.97 -171.06 88.99 -171 86 C-171.66 86 -172.32 86 -173 86 C-174.52 93.5 -175.42 100.87 -175.94 108.5 C-176.49 116 -177.29 123.35 -178.62 130.75 C-180.36 140.51 -180.28 150.12 -180 160 C-183 160 -183 160 -184.67 158.4 C-188.81 150.94 -185.72 139.61 -184.43 131.59 C-183.99 127.89 -183.97 124.41 -184.06 120.69 C-184.17 113.41 -183.5 106.35 -182.62 99.12 C-182.5 98.08 -182.37 97.03 -182.24 95.96 C-181.43 89.57 -180.36 83.29 -179 77 C-178.34 77.66 -177.68 78.32 -177 79 C-174.5 79.81 -172.66 80 -170 80 C-169.9 78.95 -169.8 77.9 -169.7 76.82 C-169.55 75.45 -169.4 74.07 -169.25 72.69 C-169.16 71.65 -169.16 71.65 -169.06 70.6 C-168.69 67.36 -168.37 65.4 -166.12 62.99 C-164 62 -164 62 -160.88 62.5 C-158 64 -158 64 -156.62 66.19 C-155.88 69.52 -155.87 72.59 -156 76 C-156.66 76 -157.32 76 -158 76 C-158.66 74.35 -159.32 72.7 -160 71 C-160.99 71 -161.98 71 -163 71 C-162.99 71.77 -162.98 72.54 -162.96 73.34 C-162.96 74.34 -162.95 75.34 -162.94 76.38 C-162.93 77.37 -162.91 78.37 -162.9 79.4 C-163 82 -163 82 -164 84 C-164.54 89.32 -164.77 94.66 -165 100 C-165.04 100.73 -165.07 101.47 -165.11 102.22 C-165.2 104.36 -165.26 106.49 -165.31 108.62 C-165.35 109.9 -165.39 111.17 -165.43 112.48 C-164.9 116.81 -163.65 118.6 -161 122 C-159.02 121.01 -159.02 121.01 -157 120 C-157.66 119.4 -158.32 118.8 -159 118.19 C-161 116 -161 116 -161 113 C-159.42 112.52 -157.83 112.04 -156.25 111.56 C-155.37 111.3 -154.49 111.03 -153.58 110.75 C-152.73 110.51 -151.88 110.26 -151 110 C-149.94 109.64 -149.94 109.64 -148.86 109.28 C-147 109 -147 109 -144 111 C-146.97 111.99 -149.94 112.98 -153 114 C-153 114.99 -153 115.98 -153 117 C-147.72 116.01 -142.44 115.02 -137 114 C-137 108.67 -137.65 105.37 -139.62 100.62 C-139.9 99.97 -140.17 99.31 -140.45 98.63 C-144.15 89.89 -144.15 89.89 -151.16 83.86 C-153.58 82.88 -153.58 82.88 -157 82 C-157 81.01 -157 80.02 -157 79 C-155 77.75 -155 77.75 -152 77 C-146.31 78.5 -143.16 81.6 -140.1 86.45 C-138.71 88.41 -137.27 89.24 -135 90 C-135.66 88.35 -136.32 86.7 -137 85 C-134.52 84.5 -134.52 84.5 -132 84 C-131.67 84.99 -131.34 85.98 -131 87 C-130.32 86.71 -129.64 86.42 -128.95 86.12 C-120.76 82.86 -113.83 81.4 -105.38 84.5 C-104.26 85 -103.15 85.49 -102 86 C-102.01 85.14 -102.02 84.29 -102.04 83.4 C-102.12 72.59 -101.55 61.02 -97 51 C-94.12 49.19 -94.12 49.19 -91 48 C-89.76 46.7 -89.76 46.7 -88.5 45.38 C-85.58 42.6 -83.92 42.44 -80 42 C-79.01 41.01 -79.01 41.01 -78 40 C-78 39.01 -78 38.02 -78 37 C-77.24 36.86 -76.47 36.71 -75.69 36.56 C-71.99 34.41 -71.6 32.05 -70.38 28.09 C-69.77 25.95 -69.77 25.95 -71 24 C-69.44 22 -69.44 22 -67 20 C-63.25 19.75 -63.25 19.75 -60 20 C-59.67 19.34 -59.34 18.68 -59 18 C-57.78 17.9 -56.57 17.79 -55.31 17.69 C-51.67 17.35 -51.04 17.03 -48.06 14.5 C-44.44 11.54 -42.53 11.5 -38.03 11.24 C-35.33 10.92 -34.06 9.72 -32 8 C-29.69 7.26 -27.35 6.6 -25 6 C-21.42 5.06 -18.29 4.15 -15 2.44 C-10.17 0.12 -5.3 -0.16 0 0 Z \",fill:\"#16101A\",transform:\"translate(670,232)\"})),_path30||(_path30=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.55 3.2 4.53 6.89 5.81 11.38 C6.2 12.72 6.2 12.72 6.59 14.09 C9.5 24.89 11.06 35.92 12.73 46.95 C14.4 57.83 16.47 68.48 19.26 79.14 C20.89 85.75 21.06 91.41 20.31 98.19 C19.93 101.19 19.93 101.19 20 105 C21.65 105.33 23.3 105.66 25 106 C27.09 113.55 28.58 121.1 29.81 128.82 C30.7 134.39 31.78 139.91 32.94 145.44 C34.62 153.5 35.85 161.59 37 169.75 C38.65 181.35 40.5 192.77 44.75 203.75 C46 207 46 207 46 211 C45.34 211.33 44.68 211.66 44 212 C44.64 212.52 45.28 213.03 45.94 213.56 C48.6 216.71 48.45 218.95 49 223 C49.73 225.42 50.52 227.81 51.38 230.19 C51.8 231.38 52.22 232.57 52.65 233.79 C53.86 236.67 55.06 238.6 57 241 C59.68 245.2 61.9 249.61 64.12 254.06 C64.48 254.77 64.84 255.48 65.21 256.21 C65.56 256.89 65.9 257.58 66.26 258.29 C66.57 258.9 66.88 259.52 67.2 260.16 C68.52 263.2 69 265.68 69 269 C69.98 270.02 70.98 271.02 72 272 C72.67 273.33 73.33 274.67 74 276 C74.47 276.45 74.93 276.91 75.41 277.37 C77.14 279.14 78.19 280.85 79.38 283.02 C79.8 283.79 80.23 284.57 80.67 285.37 C81.11 286.18 81.55 286.98 82 287.81 C82.44 288.61 82.88 289.4 83.33 290.22 C84.57 292.47 85.78 294.74 87 297 C87.6 298.08 88.2 299.15 88.81 300.26 C90.07 303.17 90.01 304.89 90 308 C91.2 310.73 91.2 310.73 92.88 313.31 C93.41 314.2 93.94 315.08 94.49 315.99 C94.99 316.65 95.49 317.32 96 318 C96.66 318 97.32 318 98 318 C100 322.75 100 322.75 100 325 C100.31 326.34 100.65 327.67 101 329 C101.99 328.67 102.98 328.34 104 328 C104.1 328.72 104.2 329.44 104.31 330.18 C105.08 333.34 106.27 335.36 108.06 338.06 C108.69 339.02 109.33 339.98 109.98 340.97 C110.64 341.97 111.31 342.97 112 344 C112.65 345 113.29 346 113.96 347.03 C118.29 353.67 122.96 359.89 128 366 C128.71 366.89 129.42 367.78 130.14 368.69 C131.69 370.61 133.23 372.3 135 374 C135.8 374.85 136.61 375.69 137.44 376.56 C139.76 379.02 139.76 379.02 142.19 380.06 C144 381 144 381 144.94 383 C146.41 385.76 148.13 385.95 151 387 C152.84 388.5 153.84 389.68 154.88 391.81 C157.24 396.42 160.7 400.14 165 403 C164.67 403.66 164.34 404.32 164 405 C163.53 404.64 163.05 404.27 162.57 403.9 C158.92 401.12 155.25 398.51 151.38 396.06 C146.19 392.65 142.81 388.41 139.12 383.5 C136.63 380.56 133.83 378.2 130.89 375.71 C128.64 373.67 126.85 371.4 125 369 C124.01 368.34 123.02 367.68 122 367 C120.87 365.38 120.87 365.38 119.88 363.56 C119.54 362.97 119.21 362.37 118.87 361.75 C118 360 118 360 117 357 C116.34 357 115.68 357 115 357 C111 350.25 111 350.25 111 348 C110.01 347.67 109.02 347.34 108 347 C106.39 344.82 106.39 344.82 104.81 342.12 C104.28 341.24 103.75 340.36 103.21 339.45 C102 337 102 337 102 334 C101.34 334 100.68 334 100 334 C98.58 331.39 97.15 328.78 95.73 326.17 C94.59 324.08 93.44 322 92.27 319.93 C91.72 318.96 91.18 317.99 90.62 317 C90.12 316.11 89.62 315.23 89.1 314.31 C88 312 88 312 88 309 C87.34 309 86.68 309 86 309 C85.58 308.13 85.58 308.13 85.15 307.23 C82.79 302.4 80.28 297.73 77.5 293.12 C69 278.77 69 278.77 69 273 C68.01 272.67 67.02 272.34 66 272 C64.98 270.01 63.98 268.01 63 266 C62.01 265.34 61.02 264.68 60 264 C59.67 263.01 59.34 262.02 59 261 C54.65 257.06 50.25 253.35 44.38 252.44 C43.26 252.62 42.15 252.81 41 253 C39.35 253.17 37.71 253.34 36.06 253.5 C34.71 253.66 33.35 253.83 32 254 C29.95 261.3 30.19 266.45 31.52 273.9 C32.5 280.9 32.36 288.07 32.52 295.13 C32.69 301.12 33.03 306.33 35 312 C35 312.66 35 313.32 35 314 C35.66 314 36.32 314 37 314 C37.04 314.92 37.08 315.84 37.12 316.79 C38.02 327.67 41.57 334.34 48 343 C49.3 344.81 50.59 346.62 51.88 348.44 C52.44 349.23 53.01 350.01 53.59 350.82 C54.87 352.8 55.67 354.54 56.44 356.75 C58.06 360.13 58.84 360.8 61.81 362.81 C65.09 365.07 66.8 367 68.69 370.5 C71.35 375.35 74.64 379.04 78.44 383 C91.3 396.44 91.3 396.44 92.42 402.15 C92.83 404.18 92.83 404.18 94.86 405.08 C95.92 405.54 95.92 405.54 97 406 C98.11 406.86 99.2 407.76 100.25 408.69 C100.85 409.21 101.44 409.74 102.05 410.28 C103.02 411.13 103.02 411.13 104 412 C104.72 412.62 105.45 413.24 106.2 413.88 C106.91 414.5 107.63 415.11 108.38 415.75 C109.04 416.32 109.71 416.89 110.4 417.48 C112 419 112 419 113 421 C111.68 421 110.36 421 109 421 C108.67 421.66 108.34 422.32 108 423 C98.99 419.74 92.28 414.04 85 408 C84.25 407.38 83.5 406.76 82.72 406.12 C79.3 403.25 76.15 400.17 73 397 C71.91 395.92 70.82 394.85 69.73 393.77 C66.47 390.57 63.22 387.35 59.97 384.14 C58.57 382.75 57.17 381.37 55.77 380 C53.73 377.99 51.71 375.98 49.68 373.97 C49.05 373.36 48.43 372.75 47.79 372.13 C44.3 368.64 42.08 365.53 40 361 C39.34 360.67 38.68 360.34 38 360 C37.42 358.91 36.85 357.81 36.25 356.69 C34.21 352.92 31.65 351.24 28 349 C28 348.34 28 347.68 28 347 C27.34 346.67 26.68 346.34 26 346 C26.33 345.34 26.66 344.68 27 344 C26.04 343.63 26.04 343.63 25.06 343.25 C23 342 23 342 22.25 339.88 C22.17 339.26 22.09 338.64 22 338 C22.9 337.69 22.9 337.69 23.81 337.38 C26.8 335.5 27.47 333.13 29 330 C29.7 329.5 30.4 329.01 31.12 328.5 C33.22 327.09 33.22 327.09 33.94 324.44 C34.14 313.26 27.13 299.2 21 290 C20.67 284.81 21.08 281.8 23 277 C23.44 272.7 23.47 269.71 21 266 C20.86 264.01 20.86 264.01 21.02 261.77 C21.08 260.97 21.13 260.16 21.18 259.34 C21.24 258.5 21.31 257.67 21.38 256.81 C21.43 255.97 21.49 255.12 21.55 254.25 C21.69 252.17 21.84 250.08 22 248 C22.66 248 23.32 248 24 248 C24.36 246.66 24.36 246.66 24.73 245.3 C26.1 241.73 27.56 239.87 30.25 237.19 C31 236.42 31.75 235.65 32.52 234.86 C35.45 232.66 37.37 232.22 41 232 C44.88 232.94 44.88 232.94 48 234 C47.57 233.61 47.13 233.22 46.69 232.81 C44.74 230.72 43.43 228.47 42 226 C40.82 224.58 40.82 224.58 37.44 224.94 C35.74 224.97 35.74 224.97 34 225 C34 224.01 34 223.02 34 222 C34.99 222 35.98 222 37 222 C37 221.34 37 220.68 37 220 C35.68 219.67 34.36 219.34 33 219 C33 218.01 33 217.02 33 216 C32.01 216.33 31.02 216.66 30 217 C30.21 217.52 30.41 218.03 30.62 218.56 C31.16 222.03 30.08 224.71 29 228 C28.67 228 28.34 228 28 228 C27.34 224.7 26.68 221.4 26 218 C25.34 218 24.68 218 24 218 C24.08 218.76 24.16 219.52 24.25 220.31 C24.62 226.39 24.57 230.08 20.5 234.81 C19.86 235.53 19.21 236.25 18.55 236.98 C16.27 239.95 16.74 242.36 17 246 C16.57 249.08 15.85 251.48 14 254 C9.46 256.77 5.3 258 0 258 C-1.75 256 -1.75 256 -3 254 C-2.01 253.01 -1.02 252.02 0 251 C-0.34 250.35 -0.68 249.7 -1.02 249.02 C-3.39 244.4 -5.36 239.93 -7 235 C-7.66 234.67 -8.32 234.34 -9 234 C-8.29 232.29 -7.58 230.58 -6.88 228.88 C-6.42 227.77 -5.96 226.66 -5.49 225.52 C-4.53 223.26 -3.54 221.02 -2.51 218.79 C1.8 209.39 4.26 199.9 6.52 189.84 C7 188 7 188 8 186 C8.97 186.14 9.94 186.29 10.94 186.44 C11.58 186.53 12.22 186.61 12.88 186.7 C14.32 186.9 15.75 187.12 17.19 187.36 C18.3 187.52 18.3 187.52 19.44 187.69 C20.12 187.79 20.8 187.9 21.5 188.01 C24.97 188.09 24.97 188.09 32 186 C31.34 180.39 30.68 174.78 30 169 C27.36 169.33 24.72 169.66 22 170 C20.17 170.06 18.33 170.09 16.5 170.06 C15.64 170.05 14.79 170.04 13.91 170.04 C13.28 170.02 12.65 170.01 12 170 C11.67 169.01 11.34 168.02 11 167 C10.34 167 9.68 167 9 167 C8.96 166.02 8.96 166.02 8.92 165.03 C8.81 162.08 8.69 159.13 8.56 156.19 C8.52 155.16 8.48 154.14 8.44 153.08 C8.38 151.61 8.38 151.61 8.32 150.11 C8.28 149.2 8.24 148.29 8.21 147.36 C8.08 144.85 8.08 144.85 7 142 C6.38 141.69 5.76 141.38 5.12 141.06 C2.53 139.77 1.68 138.35 0 136 C-0.74 135.28 -1.49 134.56 -2.25 133.81 C-5 131 -5 131 -6.53 128.75 C-9.43 124.49 -11.51 121.58 -16.69 120.44 C-18.45 120.24 -20.23 120.1 -22 120 C-23.03 119.91 -24.07 119.82 -25.13 119.73 C-31.37 119.35 -31.37 119.35 -36.81 122 C-37.53 122.99 -38.26 123.98 -39 125 C-39.55 125.55 -40.1 126.09 -40.67 126.66 C-45.6 131.62 -47.67 136.7 -49.76 143.34 C-51 146 -51 146 -53.14 146.88 C-53.76 146.92 -54.37 146.96 -55 147 C-55.43 155.75 -55.12 163.77 -53.06 172.31 C-52.88 173.07 -52.7 173.83 -52.51 174.61 C-52.24 175.72 -52.24 175.72 -51.97 176.86 C-50.04 184.91 -48.5 192.58 -53 200 C-55.19 202.82 -57.52 205.44 -60 208 C-61.65 207.67 -63.3 207.34 -65 207 C-64.63 203.75 -64.3 202.3 -61.95 199.94 C-59.11 195.67 -59.63 192.17 -60 187.19 C-60.09 185.79 -60.09 185.79 -60.17 184.36 C-60.8 175.89 -62.66 168.15 -65 160 C-65.6 157.59 -66.19 155.17 -66.75 152.75 C-66.99 151.73 -67.23 150.72 -67.48 149.67 C-68 147 -68 147 -68 143 C-71.56 149.44 -71.2 154.91 -70.75 162.12 C-70.7 163.27 -70.64 164.41 -70.59 165.58 C-70.32 171.09 -69.96 176.59 -69.52 182.09 C-69.42 183.5 -69.42 183.5 -69.32 184.93 C-69.19 186.67 -69.04 188.41 -68.87 190.15 C-68.33 197.64 -71.42 201.75 -75.94 207.44 C-78.65 209.49 -80.63 209.79 -84 210 C-86.88 209.56 -86.88 209.56 -89 209 C-87.91 205.72 -87.17 205.08 -84.56 203 C-80.58 199.81 -78.68 197.12 -78 192 C-78.04 184.41 -79.2 177.24 -81.28 169.95 C-83.16 162.23 -83.12 154.65 -83.06 146.75 C-83.06 145.67 -83.05 144.6 -83.05 143.49 C-83.04 141.5 -83.03 139.52 -83.02 137.53 C-83 135.35 -83 133.18 -83 131 C-82.01 129.68 -81.02 128.36 -80 127 C-76.37 127.66 -72.74 128.32 -69 129 C-70.47 126.07 -72.37 125.97 -75.43 124.91 C-76.53 124.52 -77.64 124.13 -78.78 123.72 C-80.53 123.12 -80.53 123.12 -82.31 122.5 C-84.6 121.7 -86.89 120.9 -89.18 120.09 C-90.2 119.74 -91.22 119.39 -92.27 119.02 C-98.23 116.79 -98.23 116.79 -100.48 114.48 C-102.34 112.67 -103.91 112.14 -106.38 111.38 C-107.13 111.14 -107.88 110.9 -108.65 110.65 C-110.97 109.93 -110.97 109.93 -113.34 109.82 C-117.53 108.53 -120.1 105.58 -123.19 102.56 C-123.85 101.93 -124.5 101.31 -125.18 100.66 C-129.88 96.15 -134.5 91.56 -139.05 86.89 C-141.05 84.83 -141.05 84.83 -144 83 C-144 82.34 -144 81.68 -144 81 C-144.99 80.67 -145.98 80.34 -147 80 C-148.65 78.33 -148.65 78.33 -150.38 76.25 C-153.95 72.04 -157.56 68.16 -161.88 64.69 C-166.39 60.99 -171.14 56.59 -173 51 C-173.66 51 -174.32 51 -175 51 C-176.38 49.6 -176.38 49.6 -178 47.62 C-181.66 43.3 -185.61 39.35 -189.67 35.39 C-191.96 33.04 -193.96 30.58 -196 28 C-196.99 26.99 -197.99 25.99 -199 25 C-200.08 23.82 -201.14 22.64 -202.19 21.44 C-202.72 20.84 -203.25 20.24 -203.79 19.62 C-205 18 -205 18 -205 16 C-202.81 15.19 -202.81 15.19 -200 15 C-196.28 18.33 -193.16 22.14 -190 26 C-185.46 31.46 -180.62 36.51 -175.55 41.48 C-172.79 44.19 -170.12 46.91 -167.62 49.88 C-154.72 65.05 -154.72 65.05 -139 77 C-136.32 77.26 -136.32 77.26 -134 77 C-135.18 75.86 -135.18 75.86 -136.38 74.69 C-139.89 70.51 -140.86 65.38 -141 60 C-140.34 59.01 -139.68 58.02 -139 57 C-133.02 57.3 -129.27 60.07 -125 64 C-124.27 64.92 -123.53 65.84 -122.77 66.79 C-119.58 70.71 -115.7 73.6 -111.69 76.62 C-110.97 77.18 -110.25 77.74 -109.5 78.32 C-103.12 83.18 -96.71 86.69 -89 89 C-89 89.66 -89 90.32 -89 91 C-88.15 91.1 -87.31 91.21 -86.44 91.31 C-83.7 91.86 -81.75 92.45 -79.25 93.56 C-76.29 95.13 -76.29 95.13 -74 95 C-73.67 94.01 -73.34 93.02 -73 92 C-69.78 88.9 -66.25 88.12 -62 87 C-61.67 86.67 -61.34 86.34 -61 86 C-61.03 84.39 -61.03 84.39 -61.06 82.75 C-61 79.2 -60.53 77.15 -59 74 C-59.47 73.58 -59.94 73.15 -60.43 72.72 C-62 71 -62 71 -63.19 67.5 C-64.91 62.53 -67.93 58.71 -71.08 54.55 C-72.54 52.61 -73.9 50.68 -75.19 48.62 C-77.19 45.73 -79.48 43.45 -82 41 C-84 38 -84 38 -84 35 C-78.15 35.45 -73.92 38.04 -69 41 C-69 41.99 -69 42.98 -69 44 C-68.22 44.31 -67.43 44.62 -66.62 44.94 C-62.15 46.75 -62.15 46.75 -60.56 49.44 C-59.1 52.24 -59.1 52.24 -56 54 C-56 54.99 -56 55.98 -56 57 C-55.28 57.27 -54.56 57.54 -53.82 57.82 C-51.04 58.98 -48.53 60.29 -45.94 61.81 C-44.68 62.53 -44.68 62.53 -43.4 63.27 C-40.69 65.22 -39.04 67.37 -37 70 C-32.79 73.98 -28.82 77.42 -23.25 79.19 C-18.43 78.91 -15.54 77.69 -12.25 74.09 C-11.05 72.67 -9.86 71.24 -8.68 69.81 C-6.68 67.65 -4.85 66.69 -2 66 C-2 65.67 -2 65.34 -2 65 C-1.03 64.73 -0.06 64.46 0.94 64.19 C2.45 63.6 2.45 63.6 4 63 C5.3 59.11 4.99 55.51 4.84 51.46 C4.82 50.63 4.79 49.8 4.77 48.94 C4.68 46.27 4.59 43.6 4.5 40.94 C4.38 37.43 4.27 33.91 4.16 30.4 C4.13 29.59 4.1 28.78 4.06 27.94 C3.89 22.23 3.89 22.23 5 20 C4.34 20 3.68 20 3 20 C2.95 19.26 2.9 18.53 2.85 17.77 C2.74 16.31 2.74 16.31 2.62 14.81 C2.52 13.37 2.52 13.37 2.41 11.89 C2 8.98 1.1 6.72 0 4 C0 2.68 0 1.36 0 0 Z M8 44 C9 46 9 46 9 46 Z M9 46 C10 49 10 49 10 49 Z M11 57 C12 59 12 59 12 59 Z M13 64 C13 65.65 13 67.3 13 69 C13.33 69 13.66 69 14 69 C14 67.35 14 65.7 14 64 C13.67 64 13.34 64 13 64 Z M14 69 C15 73 15 73 15 73 Z M17 85 C18 87 18 87 18 87 Z M18 90 C18 91.65 18 93.3 18 95 C18.66 93.68 19.32 92.36 20 91 C19.34 90.67 18.68 90.34 18 90 Z M23 117 C24 120 24 120 24 120 Z M32 165 C31.67 165.66 31.34 166.32 31 167 C31.66 167 32.32 167 33 167 C32.67 166.34 32.34 165.68 32 165 Z M40 199 C41 202 41 202 41 202 Z M57 245 C58 247 58 247 58 247 Z M58 247 C59 249 59 249 59 249 Z M59 249 C60 251 60 251 60 251 Z M61 253 C61.33 254.65 61.66 256.3 62 258 C62.33 257.01 62.66 256.02 63 255 C62.34 254.34 61.68 253.68 61 253 Z M65 261 C65.33 262.32 65.66 263.64 66 265 C66.33 264.34 66.66 263.68 67 263 C66.34 262.34 65.68 261.68 65 261 Z M76 282 C77 284 77 284 77 284 Z M77 284 C78 286 78 286 78 286 Z M79 288 C80 290 80 290 80 290 Z M80 290 C80.33 290.99 80.66 291.98 81 293 C81 292.01 81 291.02 81 290 C80.67 290 80.34 290 80 290 Z M83 295 C84 297 84 297 84 297 Z M84 297 C85 299 85 299 85 299 Z M85 299 C85.66 300.32 86.32 301.64 87 303 C86.67 301.68 86.34 300.36 86 299 C85.67 299 85.34 299 85 299 Z M88 304 C89 306 89 306 89 306 Z \",fill:\"#391A48\",transform:\"translate(914,177)\"})),_path31||(_path31=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.4 1.44 2.75 2.92 4.06 4.44 C6.02 6.39 6.02 6.39 8.75 6.69 C12.77 6.09 16.13 4.76 19.86 3.16 C22.12 2.19 22.12 2.19 25.12 1.19 C27.12 2.19 27.12 2.19 27.87 3.86 C28.1 4.55 28.33 5.23 28.56 5.94 C29.39 8.41 30.2 10.29 31.65 12.47 C33.32 15.55 33.51 17.4 33.53 20.88 C33.55 21.98 33.57 23.08 33.59 24.21 C33.6 25.38 33.61 26.55 33.62 27.75 C33.8 36 34.17 44 35.62 52.12 C37.06 60.26 37.43 68.25 37.62 76.5 C37.92 88.08 39.05 98.39 42.43 109.52 C45.15 118.55 46.58 126.23 46.23 135.68 C46.14 138.67 46.28 141.36 46.69 144.31 C47.1 147.93 46.94 150.66 46.12 154.19 C47.03 154.56 47.93 154.93 48.86 155.32 C52.64 157.48 54.08 159.46 56.38 163.12 C57.04 164.17 57.71 165.21 58.39 166.28 C59.75 168.55 61 170.8 62.12 173.19 C62.99 172.4 63.86 171.62 64.75 170.81 C67.68 168.35 70.4 167.16 74.12 166.19 C77.36 169.21 78.98 171.09 79.29 175.64 C79.3 176.56 79.31 177.49 79.31 178.44 C79.33 179.35 79.34 180.26 79.36 181.2 C79.08 184.72 78.18 187.83 77.12 191.19 C75.83 191.25 74.54 191.31 73.21 191.37 C71.5 191.46 69.78 191.54 68.06 191.62 C67.21 191.66 66.37 191.7 65.49 191.74 C61.7 191.93 58.13 192.19 54.39 192.9 C50.34 193.26 48.5 192.3 45 190.31 C41.28 188.24 38.29 186.97 34.12 186.19 C30.03 181.8 30.53 175.85 30.12 170.19 C29.23 157.73 24.33 148.19 18.03 137.66 C12.73 128.76 9.25 120.02 6.12 110.19 C5.85 109.34 5.58 108.5 5.3 107.63 C3.74 102.76 2.2 97.89 0.69 93 C0.19 91.39 -0.34 89.79 -0.88 88.19 C-0.99 86.82 -1.05 85.46 -1.09 84.09 C-1.51 71.1 -3.56 61.57 -9.25 49.81 C-11.53 45.07 -13.33 40.3 -14.86 35.26 C-16.14 32.64 -17.14 32.12 -19.88 31.19 C-22.75 30.71 -24.91 30.9 -27.88 31.19 C-30.42 33.55 -30.85 35.03 -31.32 38.5 C-31.36 39.72 -31.4 40.93 -31.44 42.19 C-31.72 50.39 -31.72 50.39 -33.88 53.19 C-37.81 55.54 -41.78 56.85 -46.19 58.06 C-52.68 59.99 -59.01 62.32 -63.88 67.19 C-64.43 70.69 -64.77 74.18 -65.12 77.71 C-65.96 81.59 -67.02 83.45 -69.88 86.19 C-75.41 86.29 -78.47 84.31 -82.88 81.19 C-88.94 77.74 -94.19 77.69 -100.88 79.19 C-105.21 81.04 -108.59 83.33 -112.12 86.44 C-112.98 87.16 -113.83 87.89 -114.7 88.64 C-117.44 91.85 -118.27 94.01 -118.88 98.19 C-118.37 101.1 -117.34 103.67 -116.19 106.38 C-115.87 107.14 -115.56 107.91 -115.23 108.7 C-112.61 114.89 -109.61 120.88 -106.44 126.81 C-106.01 127.63 -105.58 128.44 -105.14 129.29 C-101.86 135.2 -97.84 139.63 -92.88 144.19 C-88.93 147.93 -85.62 151.96 -82.26 156.22 C-79.44 159.72 -76.55 163.15 -73.62 166.56 C-72.86 167.45 -72.86 167.45 -72.09 168.36 C-66.19 175.54 -66.19 175.54 -57.88 179.19 C-51.63 179.3 -48.71 176.77 -44.38 172.68 C-43.88 172.19 -43.39 171.7 -42.88 171.19 C-39.02 172.65 -37.69 174.53 -35.88 178.19 C-33.35 185.73 -32.6 193.44 -31.94 201.31 C-31.14 210.53 -29.79 218.77 -23.88 226.19 C-14.22 225.35 -5.95 223.9 3.04 220.11 C6.51 219.07 8.64 219.32 12.12 220.19 C12.23 219.61 12.33 219.03 12.44 218.44 C13.22 215.87 14.43 214.25 16.12 212.19 C22.65 213.02 27.35 216.88 32.12 221.19 C33.75 224.5 33.75 224.5 34.12 228.19 C34.23 229.14 34.33 230.09 34.44 231.07 C34.71 233.77 34.94 236.48 35.12 239.19 C33.14 240.18 33.14 240.18 31.12 241.19 C30.79 240.86 30.47 240.53 30.12 240.19 C27.93 239.91 27.93 239.91 25.38 239.88 C24.51 239.84 23.65 239.8 22.77 239.76 C19.94 239.98 19.94 239.98 17.7 242.24 C15.12 244.19 15.12 244.19 12 244.22 C10.91 244.04 9.82 243.87 8.69 243.69 C3.56 243.15 3.56 243.15 -1.38 244.5 C-7.91 251.53 -9.65 259.35 -10.12 268.69 C-10.25 270.64 -10.38 272.58 -10.52 274.53 C-10.57 275.48 -10.63 276.43 -10.69 277.41 C-10.86 280.01 -11.13 282.57 -11.42 285.16 C-11.81 288.8 -11.9 292.34 -11.86 296 C-11.8 302.45 -12.41 308.73 -13.19 315.12 C-13.31 316.22 -13.42 317.32 -13.54 318.45 C-13.67 319.5 -13.8 320.56 -13.93 321.65 C-14.04 322.6 -14.15 323.54 -14.26 324.52 C-14.96 327.58 -16.03 329.65 -17.88 332.19 C-20.56 333 -20.56 333 -22.88 333.19 C-26.33 327.59 -28.23 322.29 -29.94 315.97 C-31.49 310.59 -33.24 306.66 -38.25 303.86 C-43.45 302.53 -48.62 303.51 -53.88 304.19 C-55.04 304.33 -56.2 304.47 -57.4 304.61 C-63.81 305.64 -63.81 305.64 -68.95 309.32 C-70.43 311.55 -71.66 313.8 -72.88 316.19 C-73.53 316.85 -74.19 317.51 -74.88 318.19 C-77.99 318.02 -79.58 317.41 -82.06 315.5 C-85.72 310.84 -86.34 305.09 -87.25 299.38 C-89.85 277.59 -89.85 277.59 -100.62 259.89 C-104.81 258.58 -109.21 258.88 -113.56 258.82 C-116.88 258.19 -116.88 258.19 -119.12 256.27 C-123.55 248.47 -124.5 239.92 -125.44 231.12 C-126.51 221.4 -127.58 212.45 -131.75 203.5 C-134.43 197.48 -136.3 191.64 -137.92 185.25 C-138.76 182.14 -138.76 182.14 -140.51 179.49 C-141.88 177.19 -141.88 177.19 -141.56 173.88 C-141.34 172.99 -141.11 172.1 -140.88 171.19 C-141.49 170.93 -142.1 170.68 -142.73 170.41 C-145.17 169.02 -145.86 167.99 -147.19 165.56 C-149 162.47 -150.92 159.93 -153.38 157.31 C-159.9 149.99 -162.52 141.4 -165.43 132.23 C-168.38 123.2 -172.58 114.66 -177.48 106.52 C-179.62 101.4 -180.21 96.1 -181 90.62 C-181.34 88.39 -181.67 86.16 -182.01 83.93 C-182.15 82.95 -182.29 81.97 -182.44 80.95 C-182.73 79.14 -183.05 77.33 -183.42 75.53 C-184.96 67.63 -184.91 59.25 -180.88 52.19 C-176.04 51.5 -172.11 51.05 -167.31 52 C-164.51 52.39 -163.3 52.43 -160.81 51.03 C-159.47 49.96 -158.14 48.86 -156.82 47.75 C-151.54 43.51 -145.03 42.78 -138.51 41.76 C-122.79 39.28 -108.59 35.33 -93.88 29.19 C-93.21 28.92 -92.54 28.65 -91.86 28.38 C-88.5 27 -85.72 25.49 -82.88 23.25 C-77.92 19.84 -72.9 18.77 -67.11 17.38 C-59.79 15.47 -52.92 12.16 -46.01 9.12 C-42.25 7.48 -38.45 5.92 -34.65 4.35 C-32.67 3.52 -30.69 2.67 -28.73 1.81 C-19.74 -2.09 -9.03 -5.69 0 0 Z M-65.94 20.75 C-68.71 22.11 -71.47 23.2 -74.38 24.25 C-78.52 25.83 -80.21 27.61 -82.88 31.19 C-87.98 34.01 -93.3 35.04 -99.01 36.15 C-103.56 37.23 -107.84 39.08 -112.19 40.79 C-116.07 42.26 -119.99 43.59 -123.94 44.87 C-124.98 45.21 -124.98 45.21 -126.04 45.56 C-128.89 46.48 -131.73 47.4 -134.58 48.31 C-142.88 50.96 -150.7 53.8 -158.41 57.94 C-163.1 60.32 -167.39 61.21 -172.69 61.12 C-175.82 60.89 -175.82 60.89 -177.75 62.5 C-181.04 67.43 -179.14 72.3 -178.08 77.71 C-177.79 79.16 -177.49 80.61 -177.19 82.06 C-177.04 82.79 -176.89 83.53 -176.73 84.28 C-173.89 97.86 -169.32 110.1 -163.64 122.73 C-161.18 128.21 -159.4 133.72 -157.84 139.52 C-156.87 142.21 -156.1 143.44 -153.88 145.19 C-151.4 146.07 -149.13 146.26 -146.5 146.5 C-142.32 147.29 -140.13 148.45 -136.88 151.19 C-134.11 155.71 -133.51 159.08 -133.54 164.35 C-133.53 165.74 -133.51 167.12 -133.5 168.5 C-133.5 170.65 -133.5 172.79 -133.51 174.94 C-133.56 186.29 -131.56 195.07 -125.69 204.94 C-122.54 211.05 -122.54 218.45 -121.88 225.19 C-121.58 228.04 -121.26 230.9 -120.94 233.75 C-120.8 235.01 -120.67 236.27 -120.54 237.57 C-119.79 241.66 -118.84 244.53 -116.88 248.19 C-114.99 249.53 -114.99 249.53 -112.75 249.94 C-111.96 250.16 -111.16 250.37 -110.35 250.6 C-108.73 250.98 -107.11 251.37 -105.5 251.75 C-100.22 253.18 -97.24 254.98 -94.21 259.59 C-87.01 273.59 -84.52 290.5 -82.37 305.94 C-81.96 308.46 -81.96 308.46 -79.88 311.19 C-77.45 311.03 -77.45 311.03 -74.88 310.19 C-73.36 308.03 -72.44 305.82 -71.38 303.41 C-68.65 299.37 -64.55 298.24 -59.96 297.24 C-39.29 293.46 -39.29 293.46 -33.54 296.37 C-27.59 300.85 -26.13 306.1 -24.88 313.19 C-24.67 314.23 -24.47 315.27 -24.26 316.34 C-23.77 318.95 -23.31 321.56 -22.88 324.19 C-21.56 324.52 -20.24 324.85 -18.88 325.19 C-16.74 320.93 -17.08 315.5 -16.69 310.81 C-16.53 309.09 -16.53 309.09 -16.36 307.33 C-16.22 305.67 -16.22 305.67 -16.08 303.98 C-15.95 302.46 -15.95 302.46 -15.82 300.9 C-15.88 298 -16.26 296.57 -17.88 294.19 C-19.87 292.84 -21.87 291.51 -23.88 290.19 C-31.7 282.81 -31.14 271.37 -31.46 261.4 C-31.69 255.22 -32.29 249.22 -33.31 243.12 C-33.5 242.01 -33.5 242.01 -33.68 240.87 C-34.57 235.76 -34.57 235.76 -36.88 231.19 C-38.71 230.27 -40.54 229.36 -42.39 228.48 C-54.11 222.39 -59.8 215.51 -63.88 203.19 C-64.33 200.85 -64.62 198.56 -64.88 196.19 C-64.22 195.86 -63.56 195.53 -62.88 195.19 C-62.88 193.21 -62.88 191.23 -62.88 189.19 C-63.87 188.86 -64.86 188.53 -65.88 188.19 C-67.19 185.74 -68.36 183.33 -69.5 180.81 C-73.07 173.33 -77.3 167.35 -82.88 161.19 C-83.74 160.16 -84.61 159.13 -85.47 158.09 C-90.77 151.87 -96 147.41 -103.44 143.79 C-107.14 141.35 -107.58 138.53 -108.5 134.38 C-108.62 133.65 -108.75 132.93 -108.88 132.19 C-110.36 131.69 -110.36 131.69 -111.88 131.19 C-113.12 128.8 -114.18 126.49 -115.19 124 C-115.8 122.54 -116.41 121.07 -117.03 119.61 C-117.33 118.87 -117.64 118.13 -117.96 117.37 C-118.81 115.33 -119.71 113.33 -120.63 111.33 C-127.32 96.55 -127.32 96.55 -124.76 88.82 C-122.87 84.68 -120.05 81.94 -116.69 78.94 C-116.15 78.42 -115.61 77.91 -115.05 77.38 C-109.15 71.98 -103.02 69.7 -95.04 69.95 C-91.88 70.3 -88.93 71.31 -85.88 72.19 C-82.43 71.99 -81.15 71.45 -78.63 69.04 C-77.91 68.16 -77.18 67.28 -76.44 66.38 C-68.43 57.15 -58.56 53.47 -46.81 50.69 C-43.17 49.76 -42.03 49.34 -39.25 46.62 C-35.63 40.21 -36.65 34.39 -38.38 27.49 C-38.89 25.1 -39.09 22.81 -39.25 20.38 C-39.56 17.17 -39.79 16.31 -41.81 13.62 C-48.02 9.3 -60.14 17.74 -65.94 20.75 Z \",fill:\"#111644\",transform:\"translate(863.875,823.8125)\"})),_path32||(_path32=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.36 0.89 8.68 1.91 13 3 C13.23 3.95 13.45 4.9 13.69 5.88 C15.59 12.48 18.11 19.14 24 23 C23 26 23 26 21 27 C20.89 28.44 20.81 29.87 20.75 31.31 C20.7 32.11 20.66 32.91 20.61 33.74 C20.8 36.12 20.8 36.12 22.7 37.73 C25.96 39.53 29.1 39.8 32.76 40.28 C35 41 35 41 36.24 42.93 C36.62 43.96 36.62 43.96 37 45 C37.35 45.7 37.7 46.4 38.06 47.12 C45.53 62.07 36.26 86.42 31.43 101.33 C25.28 119.25 14.9 133.96 2.5 148.1 C0.06 150.84 0.06 150.84 -1.65 153.31 C-7.46 161.21 -17.92 164.97 -27 168 C-37.9 169.45 -48.88 165.85 -58.44 160.68 C-66.07 158.65 -74.61 163.74 -81.31 166.94 C-82.32 167.42 -83.34 167.9 -84.38 168.4 C-93.66 173.01 -100.57 178.44 -107.05 186.57 C-109 189 -109 189 -111.05 191.02 C-116 196.06 -120.88 203.73 -121 211 C-120.42 214.13 -119.64 217.12 -118.73 220.17 C-118 223 -118 223 -118 228 C-126.25 228 -134.5 228 -143 228 C-143.29 225.79 -143.58 223.59 -143.88 221.31 C-144.46 216.84 -145.31 213.16 -147 209 C-147.36 206.9 -147.67 204.8 -147.94 202.69 C-148.48 198.87 -149.03 195.47 -150.56 191.94 C-153.97 183.61 -153.12 174.29 -152.23 165.52 C-151.87 161.38 -152.31 158.76 -154 155 C-153.81 149.12 -152.55 143.81 -149 139 C-147.68 138.31 -146.35 137.64 -145 137 C-144.28 136.05 -143.56 135.1 -142.81 134.12 C-136.79 126.66 -126.91 126.12 -118 125 C-113.23 124.54 -108.47 124.19 -103.69 123.88 C-102.48 123.79 -101.27 123.7 -100.02 123.61 C-95.15 123.28 -90.32 122.95 -85.43 123.02 C-82.38 123 -80.22 122.75 -77.38 121.75 C-76.68 121.52 -75.99 121.29 -75.27 121.05 C-68.82 118.07 -63.98 113.4 -58.88 108.56 C-58.17 107.91 -57.47 107.25 -56.75 106.58 C-50.97 101.13 -47.05 96.42 -44 89 C-42.44 86.06 -42.44 86.06 -41 84 C-40.34 84 -39.68 84 -39 84 C-38.73 83.15 -38.46 82.31 -38.19 81.44 C-34.7 71.35 -34.7 71.35 -32 70 C-31.19 68 -31.19 68 -30.56 65.56 C-30.18 64.22 -30.18 64.22 -29.79 62.85 C-29.53 61.91 -29.27 60.97 -29 60 C-28.49 58.14 -27.97 56.29 -27.44 54.44 C-27.21 53.61 -26.98 52.78 -26.75 51.93 C-26 50 -26 50 -24 49 C-24 46.36 -24 43.72 -24 41 C-23.67 41.66 -23.34 42.32 -23 43 C-22.34 43 -21.68 43 -21 43 C-20.91 42.25 -20.83 41.5 -20.74 40.73 C-20.01 35.44 -19.24 30.97 -16.56 26.31 C-13.64 21.07 -12.88 15.78 -12.16 9.89 C-11.69 6.48 -11.21 4.28 -9.09 1.52 C-6.03 -0.7 -3.59 -0.53 0 0 Z \",fill:\"#411E4E\",transform:\"translate(401,1052)\"})),_path33||(_path33=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.13 5.82 -9.13 9.66 -15 13.56 C-23.2 18.97 -23.2 18.97 -30 26 C-30.13 28.87 -30.13 28.87 -29 31 C-19.91 32.1 -11 33.07 -2.12 30.45 C2.18 29.54 6.62 29.86 11 30 C11.66 31.32 12.32 32.64 13 34 C5.85 35.13 -1.14 36.06 -8.38 36.38 C-18.8 36.99 -33.94 38.76 -41.57 46.62 C-43 48 -43 48 -45 48 C-45.18 52.55 -45 55.88 -43 60 C-38.46 60.08 -34.45 60.02 -30 59 C-29.01 59 -28.02 59 -27 59 C-26.32 58.79 -25.64 58.59 -24.94 58.38 C-24.3 58.25 -23.66 58.13 -23 58 C-22.34 58.66 -21.68 59.32 -21 60 C-22.04 60.34 -23.07 60.68 -24.14 61.02 C-25.51 61.47 -26.88 61.92 -28.25 62.38 C-28.93 62.6 -29.61 62.82 -30.32 63.05 C-36.51 64.67 -36.51 64.67 -41.01 68.7 C-41.23 69.36 -41.46 70.01 -41.69 70.69 C-42.05 71.75 -42.05 71.75 -42.42 72.84 C-43.12 75.25 -43.12 75.25 -43.44 78.81 C-44 82 -44 82 -45.73 83.64 C-48.25 85.15 -50.03 85.52 -52.94 85.88 C-64.97 87.86 -73.59 91.63 -80.8 101.45 C-87.69 112 -90.45 124.61 -92 137 C-93.65 137 -95.3 137 -97 137 C-97.36 138.6 -97.36 138.6 -97.73 140.23 C-99.66 148.58 -101.72 156.83 -104.17 165.05 C-104.91 167.69 -105.51 170.3 -106 173 C-106.33 173 -106.66 173 -107 173 C-106.67 165.41 -106.34 157.82 -106 150 C-105.34 150 -104.68 150 -104 150 C-104.33 147.03 -104.66 144.06 -105 141 C-109.69 141.52 -109.69 141.52 -114.18 142.88 C-118.8 144.71 -123.61 145.86 -128.41 147.14 C-132.38 148.22 -136.21 149.35 -140 151 C-140 151.66 -140 152.32 -140 153 C-140.66 153.33 -141.32 153.66 -142 154 C-142 154.99 -142 155.98 -142 157 C-142.59 158.97 -142.59 158.97 -143.38 161.06 C-143.63 161.75 -143.89 162.45 -144.15 163.16 C-145 165 -145 165 -147 167 C-147.23 169.31 -147.36 171.62 -147.44 173.94 C-147.71 179.62 -148.52 184.74 -150.17 190.18 C-152.29 197.37 -153.88 204.79 -154.56 212.25 C-155 216 -155 216 -157 218 C-157.28 220.53 -157.47 222.97 -157.56 225.5 C-157.88 232.76 -157.88 232.76 -159 235 C-159.55 241.12 -157.96 245.44 -155.62 250.94 C-149.41 265.83 -149.41 265.83 -150.86 271.17 C-151.58 272.66 -151.58 272.66 -152.31 274.19 C-158.74 287.63 -156.32 305.46 -156.41 320.07 C-156.42 322.82 -156.46 325.57 -156.51 328.32 C-156.58 332.34 -156.6 336.34 -156.62 340.36 C-156.66 342.19 -156.66 342.19 -156.71 344.05 C-156.69 351.39 -155.65 355.89 -151.19 361.8 C-150 364 -150 364 -150.22 366.61 C-151 369 -151 369 -152.58 371.75 C-154.47 376.07 -154.15 379.44 -153.75 384.06 C-153.67 385.25 -153.67 385.25 -153.59 386.46 C-153.31 390.39 -152.8 394.14 -152 398 C-151.45 405.02 -151.77 411.62 -155 418 C-156.61 419.75 -156.61 419.75 -158 421 C-158.99 420.67 -159.98 420.34 -161 420 C-161 419.34 -161 418.68 -161 418 C-161.63 417.8 -162.26 417.59 -162.91 417.38 C-165 416 -165 416 -165.91 413.24 C-166.1 412.13 -166.3 411.02 -166.5 409.88 C-167.67 404.25 -168.78 399.79 -172 395 C-174.93 393.59 -174.93 393.59 -178 394 C-180.4 394.99 -180.4 394.99 -182 397 C-182.38 398.66 -182.71 400.32 -183 402 C-184.53 404.4 -185.45 405.72 -188 407 C-188.27 408.64 -188.53 410.28 -188.72 411.94 C-190.18 422.77 -193.91 433.49 -198 443.56 C-198.32 444.38 -198.64 445.19 -198.97 446.03 C-201.35 451.65 -201.35 451.65 -204.69 453.46 C-205.45 453.64 -206.21 453.82 -207 454 C-207.33 454.33 -207.66 454.66 -208 455 C-210.94 455.19 -210.94 455.19 -214 455 C-214.66 454.34 -215.32 453.68 -216 453 C-221.35 457.2 -222.93 463.78 -225 470 C-225.99 469.67 -226.98 469.34 -228 469 C-231.57 474.35 -233.62 480.44 -235.31 486.62 C-236.88 492.13 -239.21 497.26 -241.58 502.47 C-243 505.62 -244.23 508.62 -245 512 C-245.99 512 -246.98 512 -248 512 C-248.23 512.78 -248.45 513.57 -248.69 514.38 C-250.08 518.22 -251.84 521.7 -253.7 525.33 C-255.37 528.76 -256.71 532.29 -258.01 535.87 C-259.05 538.11 -260.22 539.32 -262 541 C-262.71 543.1 -262.71 543.1 -263 545 C-263.66 545 -264.32 545 -265 545 C-265.27 546.13 -265.54 547.27 -265.81 548.44 C-266.2 549.61 -266.6 550.79 -267 552 C-267.99 552.33 -268.98 552.66 -270 553 C-270.1 553.68 -270.2 554.36 -270.3 555.05 C-271.15 558.64 -272.6 561.82 -274.19 565.12 C-274.5 565.78 -274.81 566.43 -275.12 567.11 C-277.87 572.85 -280.86 578.46 -284 584 C-285.32 584 -286.64 584 -288 584 C-288 583.01 -288 582.02 -288 581 C-288.66 580.67 -289.32 580.34 -290 580 C-289.58 579.54 -289.15 579.07 -288.71 578.59 C-280.73 569.18 -276.74 557.61 -273 546 C-272.34 545.01 -271.68 544.02 -271 543 C-270.51 541.18 -270.08 539.34 -269.69 537.5 C-268.42 532.19 -266.6 527.54 -264.24 522.63 C-263.1 520.22 -262.13 517.81 -261.19 515.31 C-258.03 507.29 -253.9 499.68 -249.98 492.01 C-244.98 482.19 -240.35 472.27 -235.95 462.18 C-235.05 460.12 -234.14 458.06 -233.22 456.01 C-226.73 441.41 -220.84 426.55 -215.32 411.56 C-214.49 409.31 -213.63 407.07 -212.74 404.85 C-210.54 399.23 -209.67 395.02 -210 389 C-209.67 388.67 -209.34 388.34 -209 388 C-208.88 387.03 -208.75 386.06 -208.62 385.06 C-208.24 382.12 -207.58 379.41 -206.71 376.57 C-206.3 375.25 -206.3 375.25 -205.89 373.91 C-205.6 372.95 -205.3 371.99 -205 371 C-199.68 353.44 -199.68 353.44 -194.81 335.75 C-192.74 327.8 -190.39 319.76 -187.24 312.17 C-184.94 306.54 -184.12 301.01 -183.31 295 C-180.1 273.34 -173.98 252.23 -168.08 231.18 C-166.2 224.45 -164.39 217.71 -162.67 210.93 C-162.47 210.16 -162.28 209.39 -162.08 208.59 C-161.12 204.82 -160.17 201.06 -159.23 197.29 C-157.2 189.19 -154.83 181.31 -152.13 173.42 C-150.61 168.83 -149.42 164.2 -148.31 159.5 C-145.86 149.32 -142.88 139.4 -139.65 129.45 C-138.15 124.76 -136.72 120.07 -135.45 115.31 C-134.22 110.71 -132.8 106.23 -131.19 101.75 C-130.93 101.03 -130.67 100.31 -130.4 99.57 C-129.87 98.1 -129.33 96.63 -128.79 95.15 C-128.28 93.75 -127.77 92.35 -127.27 90.95 C-124.41 82.96 -121.12 76.07 -115.83 69.37 C-114 67.01 -112.53 64.56 -111 62 C-109.7 60.63 -108.38 59.28 -107 58 C-107.33 57.01 -107.66 56.02 -108 55 C-99.2 48.46 -90.99 47.58 -80.19 47.88 C-77.97 47.92 -75.76 47.96 -73.54 47.99 C-72.09 48.03 -72.09 48.03 -70.61 48.07 C-68.19 48 -66.27 47.82 -64 47 C-62.76 44.95 -62.76 44.95 -61.94 42.5 C-61.03 40.03 -61.03 40.03 -60 38 C-59.01 37.67 -58.02 37.34 -57 37 C-57 36.34 -57 35.68 -57 35 C-55.37 33.66 -53.66 32.4 -51.94 31.19 C-50.94 30.48 -49.94 29.76 -48.91 29.03 C-47.2 27.83 -45.48 26.64 -43.75 25.47 C-39.96 22.98 -39.96 22.98 -38 19 C-36.37 17.88 -36.37 17.88 -34.29 16.84 C-33.54 16.46 -32.79 16.08 -32.02 15.68 C-31.23 15.29 -30.44 14.9 -29.62 14.5 C-28.07 13.72 -26.52 12.94 -24.98 12.16 C-24.29 11.81 -23.6 11.47 -22.89 11.12 C-20.94 10.07 -20.94 10.07 -19.44 8.43 C-18 7 -18 7 -15 6 C-15 5.34 -15 4.68 -15 4 C-13.27 3.27 -11.54 2.54 -9.81 1.8 C-7.9 0.99 -7.9 0.99 -5.81 -0.25 C-3.5 -1.21 -2.36 -0.68 0 0 Z \",fill:\"#28103A\",transform:\"translate(623,63)\"})),_path34||(_path34=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.96 -0 1.92 -0.01 2.91 -0.01 C5.38 0.12 5.38 0.12 7.38 1.12 C8.67 8.54 8.67 8.54 7.38 11.12 C10.43 13.28 13.49 15.43 16.56 17.56 C17.86 18.48 17.86 18.48 19.18 19.42 C20.44 20.29 20.44 20.29 21.73 21.18 C22.5 21.72 23.27 22.26 24.06 22.82 C26.53 24.21 28.59 24.73 31.38 25.12 C28.38 27.12 28.38 27.12 25.96 26.92 C23.24 26.08 21.31 25.02 18.94 23.44 C18.13 22.9 17.31 22.37 16.47 21.82 C14.79 20.69 13.1 19.56 11.41 18.43 C4.31 13.77 4.31 13.77 -4 13.56 C-4.54 13.75 -5.07 13.93 -5.62 14.12 C-6.29 11.82 -6.94 9.5 -7.62 7.12 C-11.7 7.3 -11.7 7.3 -15.62 8.12 C-15.91 8.76 -16.2 9.4 -16.5 10.06 C-17.92 12.66 -18.83 12.9 -21.62 13.72 C-22.82 14.09 -22.82 14.09 -24.05 14.46 C-24.9 14.7 -25.75 14.94 -26.62 15.19 C-27.92 15.58 -27.92 15.58 -29.25 15.98 C-32.72 17.02 -36.21 18.02 -39.72 18.93 C-47.17 20.89 -54.14 24.64 -59.62 30.12 C-61.31 40.3 -56.74 48.76 -51.48 57.12 C-50.62 59.12 -50.62 59.12 -50.8 61.2 C-52.15 64.36 -53.85 65.73 -56.89 67.29 C-66.14 71 -66.14 71 -70.62 70.12 C-73.35 67.17 -74.41 64.19 -75.56 60.38 C-76.73 56.65 -77.93 53.41 -79.94 50.06 C-82.56 45.24 -81.51 40.35 -80.62 35.12 C-84.48 33.84 -85.84 34.68 -89.61 36.07 C-90.79 36.51 -91.98 36.95 -93.19 37.4 C-93.81 37.63 -94.42 37.86 -95.06 38.1 C-96.92 38.8 -98.78 39.49 -100.65 40.17 C-106.48 42.35 -111.51 44.52 -116.62 48.12 C-117.41 48.66 -118.19 49.2 -119 49.75 C-121.64 53.61 -121.18 57.59 -120.62 62.12 C-119.45 65.74 -117.84 69.05 -116.12 72.44 C-115.27 74.16 -114.43 75.88 -113.59 77.61 C-113.22 78.36 -112.84 79.11 -112.45 79.88 C-111.49 82.48 -111.32 84.37 -111.62 87.12 C-117.89 92.85 -127.84 96.52 -136.25 96.25 C-137.14 96.2 -138.02 96.16 -138.93 96.11 C-145.07 96.14 -150.95 98.44 -156.62 100.62 C-165.13 103.88 -172.52 105.47 -181.68 105.04 C-184.83 105.13 -186.83 105.7 -189.62 107.12 C-191.79 109.56 -193.58 112.05 -195.34 114.79 C-197.62 117.12 -197.62 117.12 -200.68 117.51 C-201.8 117.42 -202.91 117.34 -204.06 117.25 C-208.98 116.9 -211.63 117.1 -215.62 120.12 C-219.11 127.1 -216.3 136.31 -214.11 143.28 C-210.82 153.16 -205.82 162.32 -201.06 171.56 C-199.64 174.36 -198.21 177.15 -196.79 179.95 C-195.92 181.67 -195.04 183.39 -194.15 185.11 C-182.76 207.36 -182.76 207.36 -185.62 217.12 C-187.83 219.68 -189.77 220.81 -192.92 221.96 C-195.34 222.86 -197.46 223.72 -199.62 225.12 C-201.68 230.8 -200.54 235.03 -198.13 240.46 C-194.4 247.06 -189.59 253.79 -182.62 257.12 C-177.61 256.96 -172.95 256 -168.04 254.97 C-153.76 252.01 -153.76 252.01 -148.18 254 C-144.17 257.34 -143.07 261.72 -141.38 266.56 C-141.02 267.52 -140.67 268.47 -140.31 269.46 C-137.95 275.95 -136.36 281.13 -136.62 288.12 C-138.42 289.92 -141.2 289.64 -143.62 289.94 C-149.37 290.73 -155.02 291.74 -160.69 293 C-161.76 293.22 -161.76 293.22 -162.85 293.45 C-167.33 294.49 -170.44 295.78 -173.62 299.12 C-175.36 304.42 -174.64 310.24 -173.88 315.68 C-173.38 320.47 -173.55 325.31 -173.62 330.12 C-173.96 330.12 -174.28 330.12 -174.62 330.12 C-174.75 329.34 -174.87 328.56 -175 327.75 C-175.42 324.98 -175.42 324.98 -177.62 323.12 C-178.01 320.8 -178.34 318.46 -178.62 316.12 C-179.12 314.64 -179.12 314.64 -179.62 313.12 C-180.28 312.8 -180.94 312.46 -181.62 312.12 C-182.1 311.01 -182.57 309.9 -183.06 308.75 C-184.29 305.26 -184.29 305.26 -186.12 303.69 C-188 301.74 -188.53 300.02 -189.31 297.44 C-189.56 296.63 -189.82 295.82 -190.07 294.99 C-190.26 294.37 -190.44 293.76 -190.62 293.12 C-189.63 293.45 -188.64 293.79 -187.62 294.12 C-187.62 292.47 -187.62 290.83 -187.62 289.12 C-188.24 289.02 -188.86 288.92 -189.5 288.81 C-191.62 288.12 -191.62 288.12 -193.62 285.12 C-192.97 284.46 -192.31 283.81 -191.62 283.12 C-196.33 283.62 -199.06 284.78 -202.81 287.62 C-205.51 289.65 -207.41 291.05 -210.62 292.12 C-209.21 294.16 -208.08 295.03 -205.64 295.55 C-203.64 295.79 -201.63 295.96 -199.62 296.12 C-200.28 296.79 -200.94 297.44 -201.62 298.12 C-207.6 297.93 -210.84 296.95 -215.62 293.12 C-217.26 290.87 -218.51 288.48 -219.75 286 C-221.87 281.83 -223.27 279.12 -227.62 277.12 C-229.08 274.84 -229.08 274.84 -230.44 272.06 C-233.29 266.54 -236.71 261.92 -240.62 257.12 C-243.62 253.38 -243.62 253.38 -243.62 251.12 C-244.28 251.12 -244.95 251.12 -245.62 251.12 C-247.63 247.46 -249.63 243.79 -251.62 240.12 C-252.45 238.61 -252.45 238.61 -253.3 237.06 C-256.65 230.9 -259.9 224.7 -263.06 218.44 C-263.42 217.74 -263.77 217.05 -264.14 216.33 C-266.62 211.36 -266.62 211.36 -266.62 209.12 C-265.97 209.12 -265.3 209.12 -264.62 209.12 C-264.36 209.8 -264.09 210.48 -263.82 211.17 C-263.47 212.06 -263.11 212.96 -262.75 213.88 C-262.4 214.76 -262.05 215.64 -261.7 216.55 C-260.76 218.8 -259.75 220.96 -258.62 223.12 C-259.09 221.79 -259.09 221.79 -259.56 220.44 C-260.46 217.65 -261.08 214.99 -261.62 212.12 C-253.29 205.53 -253.29 205.53 -249.25 203.06 C-246.15 200.78 -245.07 198.65 -243.62 195.12 C-242.63 195.12 -241.64 195.12 -240.62 195.12 C-240.65 195.99 -240.67 196.86 -240.69 197.75 C-240.74 201.1 -240.74 201.1 -239.94 204.19 C-239.62 207.12 -239.62 207.12 -240.5 209.69 C-243.13 212.7 -245.92 214.15 -249.47 215.91 C-252.45 217.59 -254.28 219.01 -255.31 222.31 C-255.42 222.91 -255.52 223.51 -255.62 224.12 C-251.91 221.97 -248.45 219.61 -245 217.06 C-242.23 215.03 -239.48 213.03 -236.62 211.12 C-236.34 207.84 -236.34 207.84 -236.56 204.12 C-236.66 201.79 -236.69 199.46 -236.62 197.12 C-234.62 195.12 -234.62 195.12 -230.69 194.44 C-225.51 193.39 -221.83 190.94 -217.49 188.01 C-213.03 185.08 -208.34 182.61 -203.62 180.12 C-203.96 178.14 -204.28 176.16 -204.62 174.12 C-204.96 174.12 -205.28 174.12 -205.62 174.12 C-205.82 175.04 -206.01 175.96 -206.21 176.9 C-208.02 181.02 -210.37 182.02 -214.31 183.69 C-220.05 186.27 -220.05 186.27 -225.12 189.94 C-229.93 193.73 -236.75 193.58 -242.62 194.12 C-242.77 193.53 -242.92 192.94 -243.07 192.32 C-244.38 187.47 -245.95 183.37 -248.56 179.06 C-253.67 170.16 -255.52 159.26 -256.62 149.12 C-256.29 148.79 -255.97 148.47 -255.62 148.12 C-252.49 148.34 -249.38 148.63 -246.26 148.98 C-243.12 149.27 -241 149.31 -238.14 147.91 C-236.45 146.25 -236.45 146.25 -236.38 144.11 C-236.56 143 -236.56 143 -236.75 141.88 C-236.88 141.08 -237 140.28 -237.13 139.46 C-237.56 137.45 -238.11 135.47 -238.69 133.5 C-239.7 129.85 -239.92 126.9 -239.62 123.12 C-238.97 122.13 -238.3 121.14 -237.62 120.12 C-235.53 122.22 -236.18 126.53 -236 129.36 C-235.63 132.11 -235.14 133.82 -233.62 136.12 C-231.63 137.14 -229.63 138.14 -227.62 139.12 C-223.9 142.41 -221.26 145.94 -218.62 150.12 C-217.97 151.12 -217.3 152.11 -216.62 153.12 C-216.62 153.78 -216.62 154.44 -216.62 155.12 C-214.66 156.76 -214.66 156.76 -212.62 158.12 C-217.21 148.59 -221.31 140.36 -229.46 133.4 C-234.34 128.27 -235.11 122.68 -235 115.94 C-235.01 115.24 -235.02 114.54 -235.04 113.82 C-235.02 110.9 -234.79 108.5 -233.62 105.81 C-230.58 103.24 -227.14 102.37 -223.38 101.38 C-222.58 101.16 -221.79 100.94 -220.97 100.71 C-214.34 99.03 -208.27 98.76 -201.47 99.14 C-198.49 99.46 -198.49 99.46 -196.62 97.12 C-196.09 94.83 -196.09 94.83 -195.88 92.25 C-195.78 91.39 -195.68 90.52 -195.58 89.63 C-195.63 86.86 -196.32 85.52 -197.62 83.12 C-197.75 79.94 -197.75 79.94 -197.62 77.12 C-197.62 76.79 -197.62 76.47 -197.62 76.12 C-198.37 75.86 -199.11 75.59 -199.88 75.31 C-202.49 74.18 -204.43 72.92 -206.62 71.12 C-205.3 73.11 -203.99 75.09 -202.62 77.12 C-206.98 77.12 -208.55 75.06 -211.62 72.12 C-212.5 69.81 -212.5 69.81 -212.62 68.12 C-208.67 65.34 -206.36 65.12 -201.62 65.12 C-198.32 63.73 -198.32 63.73 -195.62 62.12 C-195.62 61.79 -195.62 61.47 -195.62 61.12 C-195.04 61.14 -194.46 61.15 -193.85 61.16 C-191.19 61.2 -188.53 61.22 -185.88 61.25 C-184.95 61.27 -184.03 61.28 -183.09 61.3 C-182.2 61.31 -181.31 61.31 -180.39 61.32 C-179.17 61.34 -179.17 61.34 -177.92 61.35 C-175.39 61.1 -173.82 60.36 -171.62 59.12 C-169.23 58.38 -166.93 58.03 -164.44 57.69 C-160.11 57.05 -155.89 56.12 -151.62 55.12 C-152.94 54.47 -154.26 53.8 -155.62 53.12 C-149.62 52.12 -143.51 51.16 -137.62 53.12 C-135.26 52.2 -132.92 51.21 -130.62 50.12 C-130.96 49.47 -131.28 48.8 -131.62 48.12 C-130.45 47.04 -130.45 47.04 -129.25 45.94 C-126.78 43.29 -125.69 41.52 -124.62 38.12 C-123.97 38.12 -123.31 38.12 -122.62 38.12 C-122.29 37.13 -121.97 36.14 -121.62 35.12 C-118.62 33.12 -118.62 33.12 -115.62 33.12 C-115.62 32.47 -115.62 31.8 -115.62 31.12 C-110 29.12 -110 29.12 -106.62 29.12 C-106.62 29.78 -106.62 30.45 -106.62 31.12 C-107.28 31.12 -107.94 31.12 -108.62 31.12 C-107.32 34.25 -107.32 34.25 -104.62 36.12 C-104.62 35.47 -104.62 34.8 -104.62 34.12 C-103.5 33.87 -102.38 33.62 -101.22 33.36 C-91.82 31.27 -91.82 31.27 -82.62 28.44 C-78.32 26.89 -74.17 26.49 -69.62 26.12 C-71.27 26.12 -72.92 26.12 -74.62 26.12 C-71.24 23.87 -69.68 23.82 -65.69 23.62 C-61.84 23.43 -58.89 23.28 -55.62 21.12 C-54.67 19.67 -54.67 19.67 -53.69 18.19 C-51.57 15.04 -49.97 13.8 -46.62 12.12 C-45.63 13.12 -45.63 13.12 -44.62 14.12 C-42.11 13.96 -42.11 13.96 -39.31 13.31 C-38.37 13.12 -37.42 12.93 -36.45 12.73 C-35.52 12.53 -34.59 12.33 -33.62 12.12 C-32.7 11.98 -31.78 11.83 -30.83 11.68 C-30.1 11.49 -29.38 11.31 -28.62 11.12 C-28.29 10.47 -27.97 9.8 -27.62 9.12 C-25.98 9.12 -24.33 9.12 -22.62 9.12 C-22.29 8.47 -21.97 7.8 -21.62 7.12 C-20.63 7.62 -20.63 7.62 -19.62 8.12 C-19.29 7.47 -18.97 6.8 -18.62 6.12 C-16.7 4.87 -16.7 4.87 -14.31 3.56 C-13.14 2.91 -13.14 2.91 -11.95 2.25 C-7.89 0.29 -4.49 -0.01 0 0 Z \",fill:\"#0A123E\",transform:\"translate(870.625,763.875)\"})),_path35||(_path35=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 -0.01 2.28 -0.03 3.45 -0.04 C6.84 0.19 8.85 0.43 11.75 2.19 C13.22 4.41 14.34 6.36 15.44 8.75 C15.74 9.38 16.04 10.02 16.36 10.67 C18.59 15.49 19.9 19.98 20.75 25.19 C21.21 27.46 21.69 29.73 22.19 32 C22.41 33.08 22.64 34.16 22.87 35.27 C23.76 38.24 24.86 39.79 26.75 42.19 C29.25 48.18 29.88 53.86 29.69 60.31 C29.53 68.32 31.04 75.38 33.17 83.07 C33.72 85.08 34.23 87.08 34.74 89.09 C39.32 106.45 46.5 123.48 54.82 139.36 C58.19 145.86 60.99 152.6 63.78 159.36 C64.32 160.65 64.32 160.65 64.87 161.96 C65.18 162.73 65.5 163.5 65.82 164.29 C66.71 166.36 66.71 166.36 68.75 168.19 C69.38 170.31 69.38 170.31 69.75 172.19 C70.41 171.53 71.07 170.87 71.75 170.19 C78.07 171.38 80.54 173.5 84.19 178.69 C84.63 179.28 85.08 179.88 85.54 180.49 C88.75 184.86 88.75 184.86 88.75 187.19 C89.71 187.53 89.71 187.53 90.69 187.88 C92.75 189.19 92.75 189.19 93.31 191.62 C93.46 192.47 93.6 193.32 93.75 194.19 C94.44 194.83 94.44 194.83 95.15 195.49 C97.28 197.75 97.88 199.92 98.81 202.88 C99.16 203.95 99.5 205.03 99.85 206.14 C100.54 208.48 101.16 210.8 101.69 213.19 C103.71 221.67 107.58 229.44 112.42 236.64 C114.18 240.01 114.92 243.51 115.75 247.19 C116.25 249.08 116.25 249.08 116.75 251.01 C119.97 263.44 122.17 275.29 121.75 288.19 C121.73 289.84 121.71 291.49 121.7 293.14 C121.23 318.13 117.39 342.92 101.75 363.19 C101.11 364.05 100.47 364.92 99.81 365.81 C97.75 367.19 97.75 367.19 94.44 367.31 C89.75 365.88 87.24 363.51 83.75 360.19 C82.09 358.85 80.43 357.51 78.75 356.19 C78.09 356.52 77.43 356.85 76.75 357.19 C76.75 355.87 76.75 354.55 76.75 353.19 C75.76 353.52 74.77 353.85 73.75 354.19 C73.75 353.2 73.75 352.21 73.75 351.19 C74.41 351.19 75.07 351.19 75.75 351.19 C75.75 350.53 75.75 349.87 75.75 349.19 C75.09 349.19 74.43 349.19 73.75 349.19 C72.21 344.58 71.84 339.38 73.71 334.87 C77.37 325.43 75.75 314.08 74.44 304.31 C74.31 303.34 74.18 302.37 74.04 301.38 C73.51 296.26 73.51 296.26 70.75 292.19 C69.57 286.92 69.66 281.41 69.81 276.04 C69.88 274.09 69.88 274.09 68.75 272.19 C68.79 270.37 68.84 268.55 68.92 266.73 C69.25 257.78 67.79 250.81 64.55 242.4 C63.62 239.82 62.82 237.2 62.04 234.57 C61.59 233.1 61.59 233.1 61.14 231.59 C60.56 229.66 59.99 227.72 59.43 225.77 C57.69 220.09 55.78 216.54 51.75 212.19 C49.5 208.79 49.65 206.45 50.12 202.44 C50.24 201.45 50.35 200.47 50.46 199.45 C50.56 198.71 50.65 197.96 50.75 197.19 C51.74 199.17 51.74 199.17 52.75 201.19 C52.31 195.73 51.25 192.43 47.75 188.19 C46.04 186.83 44.29 185.61 42.48 184.39 C38.69 181.75 35.93 178.63 33.54 174.73 C33.1 174.02 32.66 173.31 32.21 172.58 C31.73 171.79 31.25 171 30.75 170.19 C30.22 169.32 29.68 168.45 29.13 167.56 C27.35 164.67 25.58 161.77 23.81 158.88 C23.22 157.91 22.62 156.94 22.01 155.94 C10.74 137.48 10.74 137.48 8.49 128.87 C7.15 124.03 5.47 119.3 3.85 114.54 C2.92 111.8 1.99 109.06 1.06 106.31 C0.74 105.38 0.42 104.44 0.09 103.48 C-0.21 102.58 -0.51 101.68 -0.82 100.76 C-1.24 99.55 -1.24 99.55 -1.66 98.31 C-2.25 96.19 -2.25 96.19 -2.25 93.19 C-2.91 93.19 -3.57 93.19 -4.25 93.19 C-4.36 92.31 -4.47 91.44 -4.58 90.54 C-5.63 82.31 -5.63 82.31 -6.98 74.13 C-10.29 56.28 -11.7 38.15 -11.06 20 C-11.03 19.03 -11 18.05 -10.97 17.05 C-10.12 0.06 -10.12 0.06 0 0 Z \",fill:\"#472759\",transform:\"translate(540.25,848.8125)\"})),_path36||(_path36=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.84 6.68 -4.55 11.77 -8.56 17.38 C-13.01 23.8 -17 30.32 -20.62 37.25 C-21.04 38.04 -21.45 38.82 -21.88 39.63 C-23.96 43.68 -25.7 47.62 -27 52 C-27.66 52 -28.32 52 -29 52 C-29.05 52.54 -29.1 53.07 -29.16 53.62 C-29.99 59.39 -31.93 64.07 -34.67 69.17 C-38.95 77.45 -42.06 85.95 -44.99 94.78 C-45.82 97.27 -46.66 99.74 -47.51 102.22 C-50.39 110.73 -53.04 119.22 -55 128 C-55.66 128 -56.32 128 -57 128 C-56.84 129.49 -56.84 129.49 -56.68 131.01 C-55.9 139.36 -56.24 146.15 -58.29 154.36 C-60.11 163.73 -59.26 173.59 -58.22 183.02 C-57.73 189.66 -57.93 196.35 -58 203 C-58.93 203.15 -58.93 203.15 -59.88 203.31 C-62.37 203.88 -62.37 203.88 -64 207 C-65.58 196.84 -66.36 186.99 -66.31 176.69 C-66.31 176.01 -66.31 175.33 -66.3 174.63 C-66.24 163.75 -65.47 153.59 -63 143 C-62.73 141.78 -62.45 140.57 -62.17 139.32 C-60.03 129.85 -57.79 120.4 -55.48 110.97 C-55.04 109.16 -54.6 107.35 -54.16 105.53 C-51.38 94.16 -48.22 83.08 -44.1 72.11 C-43.35 70.09 -42.67 68.05 -42 66 C-42.33 65.34 -42.66 64.68 -43 64 C-44.25 65.08 -45.5 66.17 -46.75 67.25 C-47.45 67.85 -48.14 68.46 -48.86 69.08 C-53.36 73.12 -56.59 77.13 -59.75 82.25 C-60.19 82.95 -60.62 83.66 -61.07 84.39 C-65.14 91.05 -68.67 97.91 -72.02 104.96 C-73.02 107.04 -74.05 109.1 -75.1 111.15 C-81.11 123.2 -85.33 135.6 -87 149 C-86.34 149.33 -85.68 149.66 -85 150 C-85.13 150.71 -85.27 151.41 -85.4 152.14 C-87.17 162.4 -87.61 172.62 -88 183 C-88.33 183 -88.66 183 -89 183 C-89.11 189.41 -89.17 195.68 -88 202 C-87.34 202.33 -86.68 202.66 -86 203 C-85.58 204.86 -85.58 204.86 -85.25 207.31 C-82.9 219.94 -74.88 229.82 -66.93 239.53 C-65.03 241.96 -63.4 244.42 -61.81 247.06 C-61.3 247.9 -60.79 248.74 -60.27 249.6 C-59.12 251.77 -58.46 253.6 -58 256 C-57.34 255.34 -56.68 254.68 -56 254 C-55.98 251.32 -55.98 251.32 -56.38 248.38 C-56.49 247.37 -56.6 246.37 -56.71 245.34 C-56.81 244.57 -56.9 243.79 -57 243 C-56.01 243 -55.02 243 -54 243 C-51.76 248.18 -49.56 253.38 -47.41 258.6 C-46.4 261.04 -45.38 263.47 -44.34 265.9 C-43.79 267.22 -43.24 268.55 -42.69 269.88 C-42.18 271.09 -41.66 272.3 -41.14 273.55 C-40.02 276.95 -39.77 279.46 -40 283 C-40.99 283.33 -41.98 283.66 -43 284 C-57 269.15 -57 269.15 -57 263 C-57.66 263 -58.32 263 -59 263 C-59.33 261.68 -59.66 260.36 -60 259 C-60.75 259.05 -61.5 259.09 -62.27 259.14 C-69.02 259.38 -73.69 258.6 -79.82 255.84 C-82.91 254.65 -84.9 254.92 -88 256 C-89.67 256.99 -91.34 257.99 -93 259 C-94.32 259 -95.64 259 -97 259 C-97.66 259.33 -98.32 259.66 -99 260 C-99 260.66 -99 261.32 -99 262 C-99.63 261.94 -100.26 261.88 -100.91 261.82 C-107.8 261.46 -111.57 262.86 -117 267 C-120.22 269.15 -121.26 269.56 -125 269 C-126.5 267.31 -126.5 267.31 -128 265 C-128.89 264.13 -129.77 263.27 -130.69 262.38 C-133 260 -133 260 -133 258 C-135.65 256.92 -138.28 255.91 -141 255 C-140.67 255.46 -140.35 255.93 -140.01 256.4 C-139.04 257.78 -138.06 259.16 -137.09 260.54 C-135.98 262.1 -134.88 263.67 -133.77 265.24 C-130.89 269.31 -128.03 273.4 -125.19 277.5 C-122.52 281.31 -119.71 284.98 -116.83 288.64 C-106.92 301.42 -106.92 301.42 -104 307 C-104.33 307.66 -104.66 308.32 -105 309 C-109.04 306.08 -111.28 303.13 -114 299 C-115.69 296.82 -117.4 294.65 -119.12 292.5 C-126.88 282.73 -133.98 272.52 -141.06 262.25 C-141.78 261.21 -141.78 261.21 -142.51 260.15 C-145.88 255.25 -145.88 255.25 -147 253 C-147.66 252.34 -148.32 251.68 -149 251 C-149 249.68 -149 248.36 -149 247 C-149.66 247 -150.32 247 -151 247 C-151.15 244.17 -151.15 244.17 -151.29 241.34 C-152.15 238.51 -153.74 236.84 -155.66 234.66 C-157.96 231.81 -159.48 228.6 -161.06 225.31 C-161.41 224.61 -161.75 223.9 -162.11 223.18 C-164.82 217.57 -167.05 211.91 -169 206 C-169.36 205.05 -169.72 204.1 -170.09 203.12 C-177.21 183.7 -173.5 162.35 -165.05 143.93 C-162.42 138.26 -159.72 132.62 -157 127 C-156.51 125.99 -156.51 125.99 -156.02 124.96 C-152.04 116.75 -147.72 108.81 -143 101 C-142.33 99.88 -141.65 98.76 -140.96 97.61 C-137.5 91.92 -133.98 86.34 -130 81 C-128.89 84.31 -129.11 86.23 -130.25 89.5 C-130.5 90.25 -130.76 91.01 -131.02 91.78 C-132 94 -132 94 -133.51 95.93 C-135.3 98.42 -135.85 100.59 -136.56 103.56 C-137.39 107.01 -138 109.01 -140 112 C-140.17 115.13 -140.17 115.13 -140 118 C-131.48 117.4 -131.48 117.4 -124.38 113.19 C-121.97 110.28 -121.97 110.28 -121.11 107.57 C-119.82 104.58 -118.19 102.96 -115.88 100.69 C-112.97 97.67 -112.97 97.67 -111.58 93.85 C-111.68 91.9 -111.84 89.95 -112 88 C-110.47 83.96 -108.98 80.93 -105 79 C-101.88 79.12 -101.88 79.12 -99 80 C-97 83 -97 83 -96.69 84.88 C-96.12 87.29 -96.12 87.29 -93.44 89.12 C-90.35 92.76 -90.46 94.7 -90.7 99.32 C-91.18 103.62 -92.02 107.79 -93 112 C-93.17 112.81 -93.34 113.62 -93.51 114.45 C-94.35 118.49 -95.3 122.23 -97 126 C-93.53 125.5 -93.53 125.5 -90 125 C-90 124.01 -90 123.02 -90 122 C-88.68 122 -87.36 122 -86 122 C-85.83 121.29 -85.66 120.58 -85.48 119.85 C-85.12 118.47 -85.12 118.47 -84.75 117.06 C-84.52 116.15 -84.29 115.23 -84.05 114.29 C-83 112 -83 112 -80.89 111.18 C-80.27 111.12 -79.64 111.06 -79 111 C-78.91 110.01 -78.82 109.01 -78.73 107.99 C-78.09 103.6 -76.4 100.03 -74.38 96.12 C-73.84 95.07 -73.84 95.07 -73.29 94 C-69.25 86.27 -64.23 80.08 -58 74 C-56.7 72.53 -55.41 71.05 -54.12 69.56 C-45.42 59.74 -45.42 59.74 -39.75 58 C-36.79 57.23 -36.79 57.23 -35.31 54.44 C-34.64 52.69 -33.98 50.93 -33.44 49.13 C-30.2 38.41 -24.39 28.47 -17.79 19.48 C-15.72 16.61 -13.84 13.66 -11.94 10.69 C-4.85 0 -4.85 0 0 0 Z M-88 149 C-87 152 -87 152 -87 152 Z M-89 154 C-88 156 -88 156 -88 156 Z M-90 159 C-90 162.3 -90 165.6 -90 169 C-89.67 169 -89.34 169 -89 169 C-89 165.7 -89 162.4 -89 159 C-89.33 159 -89.66 159 -90 159 Z M-91 169 C-91 172.96 -91 176.92 -91 181 C-90.67 181 -90.34 181 -90 181 C-90 177.04 -90 173.08 -90 169 C-90.33 169 -90.66 169 -91 169 Z M-87 211 C-86 215 -86 215 -86 215 Z M-86 215 C-85 217 -85 217 -85 217 Z M-85 217 C-84 219 -84 219 -84 219 Z M-84 219 C-83 221 -83 221 -83 221 Z M-83 221 C-82 223 -82 223 -82 223 Z \",fill:\"#321541\",transform:\"translate(370,686)\"})),_path37||(_path37=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C2.29 2.86 4.58 2.71 6.88 2.56 C8.15 2.48 9.43 2.4 10.74 2.32 C13.88 2.21 13.88 2.21 16 1 C18.35 0.88 20.71 0.82 23.06 0.81 C24.33 0.8 25.6 0.78 26.91 0.77 C29.88 0.84 32.55 1.29 35.43 1.99 C40 3.09 44.32 3.24 49 3.31 C58.61 3.64 66.98 5.8 76 9 C76.95 9.31 77.9 9.62 78.88 9.94 C84.11 11.87 86.51 14.35 89.22 19.2 C90 21 90 21 90 23 C91.1 23.2 91.1 23.2 92.22 23.41 C95.54 24.03 98.86 24.67 102.19 25.31 C103.34 25.53 104.49 25.74 105.67 25.96 C106.79 26.17 107.9 26.39 109.04 26.61 C110.06 26.81 111.09 27 112.14 27.2 C116.13 28.31 119.05 29.84 121.69 33.06 C123.23 36.52 123.95 39.8 124.57 43.53 C124.98 46.18 124.98 46.18 126.06 49.38 C125.94 56.33 121.72 62.3 116.88 67.11 C112.36 70.5 108.41 71.81 102.77 71.48 C97.35 70.55 92.18 68.82 87 67 C84.76 69.74 84.76 69.74 85.06 72.44 C86.53 76.44 89.5 78.01 92.97 80.3 C97.99 83.78 101.27 87.02 103 93 C103.28 95.77 103.2 98.21 103 101 C103.66 101 104.32 101 105 101 C106.93 113.4 107.18 125.71 106.93 138.24 C106.89 139.95 106.86 141.66 106.84 143.37 C106.81 145.82 106.75 148.26 106.68 150.71 C106.67 151.44 106.66 152.17 106.66 152.92 C106.45 158.32 104.88 161.44 102 166 C101.08 168.96 101.08 168.96 102 172 C104.08 174.91 106.51 177.44 109 180 C113.62 184.77 116.23 188.26 117 195 C115.62 197.5 115.62 197.5 114 199 C111.7 198.86 111.7 198.86 109 198 C107.33 195.52 107.33 195.52 105.81 192.25 C100.94 182.58 94.79 173.51 86 167 C77.24 165.3 68.57 169.75 61 174 C59.32 175.32 57.65 176.65 56 178 C53.75 177.88 53.75 177.88 52 177 C50.78 174.55 50.83 172.86 50.81 170.12 C50.8 169.26 50.78 168.4 50.77 167.51 C51.01 164.85 51.77 163.33 53 161 C53 160.01 53 159.02 53 158 C53.63 155.99 54.29 153.99 55 152 C50.5 148.95 44.95 149.68 39.73 149.7 C33.71 149.54 31.34 148.13 27 144 C23.25 143.82 22.14 144.88 19.31 147.38 C16.31 150.78 14.77 152.8 14.66 157.31 C14.63 158.14 14.6 158.97 14.57 159.82 C14.54 160.69 14.52 161.55 14.5 162.44 C14.46 164.14 14.4 165.85 14.34 167.56 C14.33 168.31 14.31 169.07 14.29 169.85 C13.96 172.27 13.2 173.88 12 176 C11.55 176.87 11.09 177.73 10.62 178.62 C6.96 181.94 3.51 181.87 -1.32 182.25 C-4.13 182.72 -4.13 182.72 -5.35 185.02 C-6.21 188.95 -6.29 192.67 -6.25 196.69 C-6.26 197.84 -6.26 197.84 -6.27 199.03 C-6.43 203.49 -6.43 203.49 -4 207 C-3.93 207.63 -3.85 208.26 -3.77 208.91 C-2.23 213.08 3.1 214.31 6.9 216.12 C10.29 218.18 11.51 219.36 13 223 C13.33 226.23 13.33 226.23 13.25 229.62 C13.23 231.31 13.23 231.31 13.2 233.04 C13 236 13 236 12 239 C12 239.99 12 240.98 12 242 C4.41 242 -3.18 242 -11 242 C-10.75 238.37 -10.75 238.37 -10.5 234.66 C-9.97 226.08 -9.92 217.53 -9.98 208.94 C-10.12 189.45 -9.9 169.98 -9.59 150.5 C-9.56 148.38 -9.53 146.27 -9.5 144.15 C-9.45 140.15 -9.38 136.15 -9.32 132.15 C-9.3 130.95 -9.28 129.76 -9.27 128.53 C-9.21 125.35 -9.12 122.18 -9 119 C-8.97 118.09 -8.93 117.19 -8.9 116.26 C-8.73 113.8 -8.73 113.8 -8 110 C-5.95 108.76 -5.95 108.76 -4 108 C-4 107.34 -4 106.68 -4 106 C-3.26 105.74 -2.53 105.47 -1.77 105.2 C0.98 104.01 2.95 102.63 5.31 100.81 C8.46 98.67 10.48 97.54 14.31 97.88 C18 99 18 99 20 101.06 C21.99 103.38 21.99 103.38 25.75 103.5 C31.89 103.16 36.38 100.76 40.51 96.28 C48.12 86.78 52.59 74.93 52.39 62.78 C51.84 58.89 50.22 56.05 48.28 52.67 C46.81 49.6 46.28 46.79 45.69 43.44 C44.07 35.57 39.75 31.25 33.84 26.12 C30.97 22.81 30.77 19.19 30 14.97 C28.68 11.06 27.36 9.41 24 7 C20.93 6.46 17.98 6.62 14.88 6.81 C13.27 6.89 11.66 6.96 10.05 7.02 C9.35 7.06 8.64 7.1 7.91 7.15 C6 7 6 7 3 5 C-0.33 5.14 -3.57 5.58 -6.87 6 C-10 6 -10 6 -12.41 4.65 C-14 3 -14 3 -14 1 C-12.23 0.64 -10.46 0.28 -8.69 -0.06 C-7.7 -0.26 -6.72 -0.46 -5.7 -0.66 C-3 -1 -3 -1 0 0 Z \",fill:\"#7D6282\",transform:\"translate(1119,1038)\"})),_path38||(_path38=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C4.32 2 5.64 2 7 2 C8.46 3.87 8.46 3.87 9.81 6.44 C12.34 10.96 15.16 14.92 18.4 18.96 C19.79 20.74 21.04 22.53 22.25 24.44 C23.91 27.21 23.91 27.21 27 29 C29.33 29.08 31.67 29.09 34 29 C33.01 28.34 32.02 27.68 31 27 C33.27 26.61 35.54 26.24 37.81 25.88 C39.08 25.67 40.34 25.46 41.64 25.24 C45 25 45 25 48 27 C48.65 26.56 49.3 26.11 49.98 25.65 C57.11 21.03 57.11 21.03 61.5 20.88 C64 22 64 22 64.94 23.94 C65.29 24.62 65.64 25.3 66 26 C68.31 26.73 70.65 27.4 73 28 C74.2 30.41 74.1 31.95 74.06 34.62 C74.05 35.44 74.04 36.26 74.04 37.1 C74.02 38.04 74.02 38.04 74 39 C74.66 39 75.32 39 76 39 C76.33 38.01 76.66 37.02 77 36 C77.33 38.31 77.66 40.62 78 43 C79.65 43.33 81.3 43.66 83 44 C83 44.33 83 44.66 83 45 C80.03 45.49 80.03 45.49 77 46 C76.67 47.65 76.34 49.3 76 51 C79.49 50.54 79.49 50.54 83 49 C84.93 44.64 85.23 40.72 85 36 C85.33 36 85.66 36 86 36 C87.14 42.05 86.7 46.77 85.38 52.78 C85.19 53.88 85.19 53.88 85 55 C85.33 55.33 85.66 55.66 86 56 C86.21 59.65 86.35 63.29 86.43 66.95 C86.65 72.57 87.8 76.81 90 82 C91.23 85.69 91.56 89.14 92 93 C92.99 93.33 93.98 93.66 95 94 C97.19 125.63 97.19 125.63 97.25 139.81 C97.26 140.66 97.27 141.51 97.28 142.38 C97.23 151.96 96.03 161.49 95 171 C85.31 171.12 75.62 171.2 65.92 171.26 C61.42 171.29 56.92 171.32 52.42 171.38 C48.08 171.43 43.73 171.46 39.39 171.47 C37.73 171.48 36.07 171.5 34.42 171.53 C32.1 171.57 29.78 171.57 27.45 171.57 C26.43 171.59 26.43 171.59 25.38 171.62 C21.53 171.58 20.14 171.13 17.22 168.53 C16.49 167.69 15.76 166.86 15 166 C14.01 165.67 13.02 165.34 12 165 C12 163.35 12 161.7 12 160 C12.99 160.33 13.98 160.66 15 161 C14.98 160.39 14.95 159.77 14.93 159.14 C14.91 158.33 14.89 157.52 14.88 156.69 C14.85 155.89 14.83 155.09 14.8 154.26 C15 152 15 152 17 149 C15.68 149.33 14.36 149.66 13 150 C13.5 147.03 13.5 147.03 14 144 C14.99 144 15.98 144 17 144 C16.67 142.68 16.34 141.36 16 140 C15.34 140 14.68 140 14 140 C14.33 137.03 14.66 134.06 15 131 C16.32 130.67 17.64 130.34 19 130 C23.23 128.04 26.34 126.07 28.81 122.06 C32.83 110.63 32.83 110.63 32 99 C27.74 94.89 22.77 93.36 17 93 C12.28 99.02 8.74 104.83 6 112 C4.02 112 2.04 112 0 112 C-0.66 109.69 -1.32 107.38 -2 105 C-7.71 105.47 -11.16 106.94 -16 110 C-15.67 111.65 -15.34 113.3 -15 115 C-19.88 114.12 -19.88 114.12 -21 113 C-23.89 112.7 -25.42 112.58 -27.81 114.31 C-29.29 116.06 -29.29 116.06 -29 119 C-28.29 119.04 -27.59 119.09 -26.86 119.14 C-23.66 119.35 -20.45 119.58 -17.25 119.81 C-15.58 119.92 -15.58 119.92 -13.88 120.03 C-12.28 120.15 -12.28 120.15 -10.64 120.27 C-9.66 120.34 -8.67 120.41 -7.66 120.48 C-4.69 121.06 -3.34 122.16 -1 124 C1.7 123.78 1.7 123.78 4 123 C2.34 126.6 0.42 129.86 -2 133 C-3.32 133 -4.64 133 -6 133 C-6.45 133.97 -6.91 134.94 -7.38 135.94 C-9 139 -9 139 -11 140 C-18.57 139.76 -25.52 138.02 -32 134 C-34.06 131.53 -35.69 128.98 -37.37 126.24 C-39.96 122.69 -42.86 121.98 -47 121 C-56.68 118.19 -56.68 118.19 -60 114 C-59.34 114 -58.68 114 -58 114 C-58.31 113.03 -58.62 112.05 -58.93 111.05 C-60.14 106.82 -60.62 102.61 -61.06 98.25 C-61.61 92.55 -61.61 92.55 -63 87 C-61.93 84.34 -61.93 84.34 -60 82 C-57.31 81.46 -57.31 81.46 -54.08 81.58 C-52.32 81.62 -52.32 81.62 -50.53 81.66 C-48.69 81.73 -48.69 81.73 -46.81 81.81 C-35.72 82.34 -35.72 82.34 -25 80 C-23.52 77.39 -23.52 77.39 -23 74 C-22.54 72.58 -22.06 71.16 -21.56 69.75 C-20.72 67.28 -19.95 64.83 -19.28 62.3 C-19.04 61.42 -18.81 60.54 -18.56 59.62 C-18.36 58.81 -18.15 58 -17.94 57.16 C-16.76 54.44 -15.55 53.47 -13 52 C-5.68 50.23 1.68 53.52 8 57 C9.35 58.32 10.69 59.65 12 61 C12.66 61 13.32 61 14 61 C16.77 56.85 16.96 52.93 17 48 C16.23 45 16.23 45 15 43 C15.99 42.67 16.98 42.34 18 42 C19.81 45.82 20.17 48.43 19.69 52.62 C19.59 53.57 19.49 54.51 19.39 55.48 C19 58 19 58 18 61 C17.93 63.57 17.91 66.12 17.94 68.69 C17.94 69.39 17.95 70.09 17.95 70.81 C17.96 72.54 17.98 74.27 18 76 C19.96 69.99 20.38 64.51 20.57 58.23 C20.75 53.83 21.23 50.1 23 46 C23.66 45.67 24.32 45.34 25 45 C24.48 44.51 23.97 44.01 23.44 43.5 C21.29 39.76 22.33 37.22 23 33 C22.67 32.01 22.34 31.02 22 30 C20.51 29.51 20.51 29.51 19 29 C17.67 27.33 16.33 25.67 15 24 C13.89 23.09 12.76 22.19 11.62 21.31 C5 15.77 1.55 8.36 0 0 Z \",fill:\"#0D0F38\",transform:\"translate(914,1109)\"})),_path39||(_path39=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28 0.88 2.55 1.78 3.81 2.69 C4.52 3.19 5.23 3.69 5.96 4.2 C10.48 8.19 11.76 13.17 13.31 18.81 C14.98 24.56 16.77 29.02 20.86 33.52 C22 35 22 35 22 38 C22.57 38.23 23.15 38.46 23.74 38.7 C26.6 40.35 28.13 42.29 30.19 44.88 C31.38 46.36 31.38 46.36 32.59 47.88 C34.86 50.82 37.06 53.81 39.25 56.81 C47.08 67.29 55.77 76.6 66.33 84.36 C71.95 88.51 75.11 92.24 77 99 C77.66 99 78.32 99 79 99 C80.62 101.5 80.62 101.5 82 104 C82 103.67 82 103.34 82 103 C81.34 102.34 80.68 101.68 80 101 C80.38 98.88 80.38 98.88 81 97 C81.99 98.65 82.98 100.3 84 102 C84.87 101.75 85.73 101.5 86.62 101.25 C90.99 100.93 92.63 102.36 96 105 C95.5 106.49 95.5 106.49 95 108 C95.99 108.99 96.98 109.98 98 111 C97.5 112.49 97.5 112.49 97 114 C98.22 114.1 99.43 114.21 100.69 114.31 C104.45 114.77 106.82 115.88 110 118 C110.7 118.16 111.4 118.33 112.12 118.5 C114 119 114 119 115.24 120.29 C121.24 126.13 129.87 130.33 137.68 133.11 C140.56 134.22 143.24 135.61 146 137 C148.9 138.37 151.82 139.69 154.75 141 C155.54 141.36 156.34 141.71 157.15 142.08 C162.13 144.28 167.02 146.12 172.35 147.33 C172.89 147.55 173.44 147.77 174 148 C174.33 148.99 174.66 149.98 175 151 C176.91 151.49 178.82 151.96 180.75 152.38 C184.59 153.44 187.79 155.53 191.19 157.56 C198.8 161.98 206.56 165.56 214.74 168.78 C220.39 171.07 225.58 173.71 230 178 C230.33 178.99 230.66 179.98 231 181 C231.78 181.54 232.57 182.07 233.38 182.62 C236.19 185.17 236.42 185.94 237.31 189.44 C238.4 193.16 239.47 194.83 242.75 196.94 C246.36 198.89 250.06 199.88 254 201 C256.6 202.82 258.71 204.69 260.88 207 C263.08 209.08 265.39 210.37 268.02 211.84 C271.45 213.84 274.68 216.11 277.94 218.38 C278.64 218.86 279.34 219.34 280.06 219.84 C290.07 226.8 290.07 226.8 294 230 C294 230.66 294 231.32 294 232 C294.71 232.22 295.42 232.45 296.15 232.68 C303.56 236.12 310.85 244.49 314 252 C314.25 254.94 314.25 254.94 314 257 C313.01 257 312.02 257 311 257 C308.4 254.26 306.29 251.45 304.21 248.29 C299.91 241.89 296.52 238.18 289 236 C289 235.34 289 234.68 289 234 C287.68 234.33 286.36 234.66 285 235 C284.67 234.01 284.34 233.02 284 232 C281.82 230.98 281.82 230.98 279 230 C276.31 228.71 273.66 227.36 271 226 C271 225.01 271 224.02 271 223 C270.34 222.79 269.68 222.59 269 222.38 C265.58 220.81 262.97 218.79 260.06 216.44 C257.8 214.86 255.58 213.93 253 213 C251.86 215.98 250.74 218.96 249.62 221.94 C249.31 222.77 248.99 223.6 248.66 224.46 C247.14 228.52 245.86 232.41 245.09 236.69 C244.1 241.21 242.87 245.19 239 248 C235.21 248.81 231.6 248.62 227.75 248.38 C225.74 248.3 223.74 248.22 221.73 248.15 C220.85 248.1 219.97 248.05 219.05 248 C217.01 247.76 217.01 247.76 216 249 C215.67 251.87 215.67 251.87 216 255 C216.8 255.93 216.8 255.93 217.62 256.88 C219 259 219 259 218.75 261.02 C218.24 263.04 217.63 265.02 217 267 C220.88 267.38 222.64 267.23 225.97 265.08 C230.93 262.12 236.28 261.95 241.94 261.44 C249.06 260.76 255.5 260.13 262 257 C263.6 253.96 263.6 253.96 264 251 C264.66 251.99 265.32 252.98 266 254 C268.42 254.32 268.42 254.32 271.25 254.25 C280.02 254.78 289.49 258.68 295.5 265.31 C298.14 268.9 300.33 272.8 302.55 276.64 C303.81 278.7 305.1 280.44 306.69 282.25 C309.98 286.17 311.76 289.35 312.5 294.44 C311.97 298.24 310.8 300.1 308.41 303.05 C306.8 305.28 305.84 307.53 304.75 310.06 C300.21 319.21 291.55 321.81 282.43 324.97 C278.3 326.34 274.2 327.46 269.94 328.38 C264.82 329.56 260.37 331.54 255.69 333.88 C255.03 334.2 254.37 334.53 253.69 334.87 C250.31 336.62 247.21 338.51 244.14 340.76 C241 343 241 343 239 343 C239 343.66 239 344.32 239 345 C237.85 346.05 236.66 347.04 235.44 348 C232.22 350.71 229.96 353.34 227.69 356.88 C224.41 361.81 220.54 364.98 215.9 368.61 C206.57 376.31 194.13 388.94 192.09 401.24 C191.56 405.2 191.56 405.2 194.69 407.88 C195.78 408.58 196.87 409.28 198 410 C198.64 410.43 199.28 410.87 199.94 411.31 C205.91 413.3 210.66 411.55 216.12 409 C223.17 405.89 229.28 405.3 237 406 C235.68 406.66 234.36 407.32 233 408 C233.48 412.31 234.75 414.17 238 417 C239.32 416.34 240.64 415.68 242 415 C241.92 416.05 241.84 417.1 241.75 418.19 C241.63 422.02 241.63 422.02 243.94 424.38 C246.43 427.54 246.8 429.83 247.41 433.72 C246.31 439.86 237.7 444.49 233.06 448.06 C232.28 448.67 231.49 449.29 230.68 449.92 C227.38 452.47 224.09 454.99 220.57 457.26 C217.75 459.17 216.08 461.33 214 464 C213.34 464 212.68 464 212 464 C211.71 464.74 211.42 465.49 211.12 466.25 C210 469 210 469 208.81 471.06 C207.65 473.29 207.65 473.29 209 477 C206.36 479.31 203.72 481.62 201 484 C199.68 483.34 198.36 482.68 197 482 C197.44 481.21 197.89 480.43 198.35 479.62 C198.91 478.57 199.48 477.52 200.06 476.44 C200.63 475.4 201.2 474.37 201.79 473.31 C203.32 469.13 203.35 467.25 202 463 C199.78 460.02 197.22 457.47 194.56 454.88 C193.18 453.5 191.81 452.13 190.44 450.74 C189.83 450.14 189.22 449.54 188.59 448.93 C185.96 445.74 185.09 442.76 184.62 438.69 C185.24 432.69 187.45 428.52 191.75 424.31 C194.16 422.22 194.16 422.22 194.62 419.56 C193.87 416.48 192.27 414.92 190.19 412.59 C188.09 409.78 188 407.45 188 404 C189.82 393.18 197.82 383.91 205 376 C205.83 375.02 205.83 375.02 206.68 374.01 C209.5 370.68 212.28 367.67 215.69 364.94 C220.74 360.76 223.41 355.36 225 349 C224.36 345.92 224.36 345.92 222.19 345.07 C221.47 344.72 220.74 344.36 220 344 C214.73 339.04 210.67 333.73 208 327 C208.33 326.01 208.66 325.02 209 324 C210.88 324.62 210.88 324.62 213 326 C213.28 326.9 213.56 327.8 213.85 328.72 C215.17 332.48 216.94 334.78 219.5 337.81 C220.69 339.25 220.69 339.25 221.91 340.71 C223.79 343.04 223.79 343.04 226 344 C226 344.66 226 345.32 226 346 C231.45 343.58 231.45 343.58 235 339 C235.25 336.33 235.25 336.33 235 334 C234.34 334 233.68 334 233 334 C233 333.34 233 332.68 233 332 C232.46 332.2 231.92 332.41 231.36 332.62 C228.17 333.13 226.23 332.23 223.25 331.06 C222.27 330.68 221.28 330.3 220.27 329.91 C219.52 329.61 218.77 329.31 218 329 C218 328.67 218 328.34 218 328 C219.92 328.14 221.83 328.29 223.75 328.44 C224.82 328.52 225.88 328.6 226.98 328.68 C229.45 328.94 231.62 329.37 234 330 C238.24 330.39 240.26 330.54 243.76 328 C247.68 325.58 249.92 325.6 254.5 325.62 C264.79 325.43 274.24 322.52 284.02 319.53 C286 319 286 319 288 319 C288.33 318.34 288.66 317.68 289 317 C289.93 316.73 290.86 316.46 291.81 316.19 C295.64 314.76 296.99 313.53 299 310 C299 306.11 297.98 303.96 296.06 300.56 C293.94 296.63 293.56 293.05 293.12 288.62 C291.98 278.55 287.17 271.06 280 264 C272.76 260.38 262.2 263.72 254.81 265.56 C253.72 265.83 252.63 266.1 251.5 266.38 C241.04 269.07 231.48 272.71 222.2 278.22 C221.27 278.78 221.27 278.78 220.31 279.34 C218.62 280.37 216.95 281.43 215.28 282.5 C211.02 284.45 208.66 284.55 204 284 C201.87 282.46 201.87 282.46 200.44 280.38 C199.94 279.7 199.44 279.03 198.93 278.34 C197.63 275.09 197.92 273.31 199 270 C201.29 267.87 201.29 267.87 204.06 265.88 C207.98 262.62 207.98 262.62 209.62 257.96 C209.61 254.85 209.61 254.85 209.25 251.89 C209 249 209 249 209.61 246.03 C210.1 242.22 209.2 240.19 207.69 236.69 C206.07 232.82 204.75 229.33 204.12 225.19 C203.44 221.44 202 219.62 199.38 216.88 C196.72 214.08 196.05 213.25 195.25 209.31 C196.2 205.11 197.77 203.8 201 201 C203.6 198.17 205.77 195.7 207 192 C210.67 192 214.33 192 218 192 C216.76 191.63 215.53 191.26 214.25 190.88 C210.56 189.65 207.24 188.14 203.81 186.31 C198.2 183.42 192.45 181.28 186.5 179.19 C176.57 175.67 167 171.62 157.47 167.15 C154.93 165.97 152.39 164.8 149.84 163.64 C135.45 157.01 135.45 157.01 129.36 152.67 C120.71 146.55 112.21 141.01 102 138 C100.33 136.67 98.66 135.34 97 134 C95.35 133.32 93.68 132.68 92 132.06 C87.63 130.41 85.11 128.56 82 125 C77.86 121.08 74.46 120.11 69 119 C69 118.34 69 117.68 69 117 C68.39 116.82 67.77 116.64 67.14 116.45 C66.33 116.2 65.52 115.95 64.69 115.69 C63.89 115.44 63.09 115.2 62.26 114.95 C59.84 113.93 58.8 112.87 57 111 C55.37 110 53.72 109.02 52.06 108.06 C47.25 105.06 43.3 101.68 39.31 97.69 C38.78 97.16 38.25 96.63 37.71 96.09 C34 92.27 34 92.27 34 90 C33.34 90 32.68 90 32 90 C26.14 78.99 21.59 67.96 17.69 56.12 C17.14 54.48 16.58 52.84 16.03 51.2 C14.34 46.14 12.67 41.07 11 36 C10.45 34.32 9.89 32.64 9.34 30.97 C7.78 26.23 6.23 21.49 4.69 16.75 C4.45 16.01 4.21 15.27 3.96 14.51 C3.28 12.44 2.62 10.37 1.95 8.3 C1.57 7.12 1.19 5.95 0.8 4.75 C0 2 0 2 0 0 Z \",fill:\"#0E1440\",transform:\"translate(868,582)\"})),_path40||(_path40=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.18 4.62 0.34 6.94 0.5 C10.41 0.74 13.65 1.03 17 2 C17 2.66 17 3.32 17 4 C18.32 4 19.64 4 21 4 C23.14 4.66 23.14 4.66 25.25 5.5 C25.96 5.78 26.66 6.06 27.39 6.34 C28.19 6.67 28.19 6.67 29 7 C29 7.66 29 8.32 29 9 C29.62 9.18 30.23 9.36 30.87 9.55 C36.62 11.26 42.32 13.08 48 15 C48.89 15.24 49.78 15.49 50.69 15.74 C55.23 17.47 59.11 19.95 63.19 22.56 C64.03 23.1 64.87 23.64 65.74 24.19 C75.3 30.38 83.9 37 91 46 C91.53 46.67 92.07 47.34 92.62 48.03 C95.37 51.59 97.77 55.17 99.92 59.13 C101.71 62.23 103.79 65.14 105.83 68.08 C107 70 107 70 107 72 C107.99 72.33 108.98 72.66 110 73 C115.53 79.89 119.86 86.41 119.97 95.46 C120 98.09 120.37 100.43 120.94 103 C121.09 103.7 121.24 104.4 121.4 105.12 C122 107.3 122 107.3 124 110 C127.31 119.12 128.86 128.82 125 138 C120.37 142.4 117.14 143.16 111 143.62 C110.34 143.75 109.68 143.87 109 144 C108.67 144.66 108.34 145.32 108 146 C106.34 147.02 104.68 148.02 103 149 C102.34 149.66 101.68 150.32 101 151 C98.47 151.16 98.47 151.16 95.5 151.06 C91.6 150.83 91.6 150.83 88 152 C82.6 152.65 79.31 151.67 74.93 148.7 C71.05 145.28 67.92 140.7 66.25 135.8 C65.05 133.66 65.05 133.66 61.96 133.17 C60.19 132.96 60.19 132.96 58.38 132.75 C57.19 132.6 56 132.45 54.77 132.3 C53.4 132.15 53.4 132.15 52 132 C52 131.34 52 130.68 52 130 C51.34 129.67 50.68 129.34 50 129 C45.25 124.73 45.25 124.73 44.06 121.31 C43.71 120.55 43.36 119.79 43 119 C41.01 118.31 39.01 117.64 37 117 C34.18 113.83 31.92 110.41 29.69 106.81 C23.07 95.84 23.07 95.84 14 87 C14 86.34 14 85.68 14 85 C13.34 85 12.68 85 12 85 C10.51 83.3 9.08 81.54 7.69 79.75 C4.71 75.93 1.79 73 -2 70 C-3.31 67.25 -3.31 67.25 -4 65 C-4.66 65 -5.32 65 -6 65 C-6 64.01 -6 63.02 -6 62 C-7.32 62 -8.64 62 -10 62 C-12.69 59.58 -15.01 56.99 -17.38 54.25 C-19.87 51.69 -19.87 51.69 -23.5 51.56 C-27.19 50.97 -27.59 50.8 -29.81 48.12 C-31.23 46.1 -32.63 44.06 -34 42 C-34.33 43.32 -34.66 44.64 -35 46 C-41.22 44.8 -45.97 41.86 -50 37 C-50 35.68 -50 34.36 -50 33 C-49.26 32.94 -48.51 32.88 -47.75 32.81 C-44.18 31.76 -43.22 29.89 -41 27 C-40.01 27 -39.02 27 -38 27 C-37.3 26.24 -36.6 25.47 -35.88 24.69 C-32.24 21.29 -28.73 20.27 -24 19 C-24 15.89 -24.46 13.06 -25 10 C-24.34 10 -23.68 10 -23 10 C-22.71 9.19 -22.71 9.19 -22.41 8.36 C-20.78 4.45 -19.43 1.68 -15.44 -0.06 C-10.23 -1.57 -5.29 -0.69 0 0 Z \",fill:\"#411E4E\",transform:\"translate(788,76)\"})),_path41||(_path41=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 3.41 4.77 6.35 5.1 11.17 C4.87 17.57 3.38 23.78 2 30 C1.86 30.67 1.72 31.34 1.57 32.03 C-1.2 45.16 -4.9 60.49 -16 69 C-16.74 69.64 -17.49 70.28 -18.25 70.94 C-21.44 73.33 -24.78 75.03 -28.38 76.69 C-29.01 76.99 -29.64 77.3 -30.3 77.62 C-34.56 79.61 -38.31 80.55 -43 81 C-43 81.66 -43 82.32 -43 83 C-44.46 84.29 -44.46 84.29 -46.38 85.62 C-47 86.07 -47.63 86.52 -48.27 86.98 C-50 88 -50 88 -52 88 C-52.35 92.23 -51.56 93.73 -49 97 C-48.62 98.66 -48.28 100.32 -48 102 C-56.21 108.53 -56.21 108.53 -59.94 110.75 C-62.29 111.98 -62.29 111.98 -64 115 C-67.2 115.26 -67.2 115.26 -71.12 115.12 C-72.49 115.1 -73.85 115.08 -75.21 115.06 C-76.46 115.04 -77.71 115.02 -79 115 C-83.44 115.06 -86.15 115.15 -89.44 118.44 C-90.97 120.87 -90.97 120.87 -92 123 C-91.45 122.94 -90.91 122.88 -90.34 122.81 C-77.37 121.47 -67.87 122.26 -55.88 127.28 C-53.11 128.34 -50.28 128.88 -47.38 129.44 C-40.92 130.79 -35.38 133.37 -29.51 136.28 C-20.59 140.65 -12.99 143.09 -3 142 C-0.89 141.15 -0.89 141.15 1 140 C4.22 138.13 6.29 137.82 10 138 C28.02 138.54 45.92 128.96 59.38 117.59 C61.1 116.08 61.1 116.08 62 114 C62.66 114 63.32 114 64 114 C64.25 113.44 64.5 112.89 64.75 112.31 C66 110 66 110 67.81 107.81 C70.13 104.84 71.87 101.82 73.64 98.51 C74.57 96.8 75.53 95.11 76.51 93.43 C87.72 74.06 89.43 49.99 90 28 C90.66 27.67 91.32 27.34 92 27 C96.4 30.72 96.42 35.52 97 41 C98.03 57.2 95.45 73.44 91 89 C90.8 89.79 90.6 90.57 90.39 91.38 C86.96 104.08 81 118.56 73 129 C71.45 131.31 69.93 133.64 68.4 135.98 C67 138 67 138 65 140 C64.01 140 63.02 140 62 140 C61.67 140.99 61.34 141.98 61 143 C58.65 144.86 55.99 146.23 53.38 147.69 C52.68 148.1 51.98 148.52 51.25 148.95 C46.56 151.6 43.38 152.49 38 152 C38 152.66 38 153.32 38 154 C35.87 154.72 33.74 155.44 31.61 156.14 C29.98 156.68 28.35 157.23 26.74 157.8 C20.65 159.82 14.63 160.68 8.27 161.35 C4.84 161.44 4.84 161.44 2 163 C-0.53 163.24 -3.03 163.42 -5.56 163.56 C-6.27 163.61 -6.98 163.65 -7.72 163.69 C-9.48 163.8 -11.24 163.9 -13 164 C-13.33 163.01 -13.66 162.02 -14 161 C-15.18 161.23 -16.35 161.45 -17.56 161.69 C-27.65 162.82 -39.51 159.41 -49 156 C-51 154 -51 154 -51.38 151.69 C-50.89 148.18 -49.26 146.67 -47 144 C-46.22 141.82 -46.22 141.82 -46 140 C-46.66 140 -47.32 140 -48 140 C-48.33 139.34 -48.66 138.68 -49 138 C-60.46 137.05 -71.03 140.56 -81 146 C-85.6 148 -85.6 148 -88 148 C-99.6 159.79 -108.13 175.12 -109.25 191.69 C-109.2 196.35 -107.97 200.69 -106.75 205.17 C-106.06 207.77 -105.5 210.36 -105 213 C-105.66 213 -106.32 213 -107 213 C-111 206.25 -111 206.25 -111 204 C-111.99 204 -112.98 204 -114 204 C-115.33 188.88 -115.27 177.28 -107 164 C-106.48 163.11 -105.97 162.21 -105.44 161.29 C-95.3 144.28 -82.69 135.42 -63.58 130.36 C-62.8 130.18 -62.8 130.18 -62 130 C-63.22 129.53 -64.43 129.05 -65.69 128.56 C-66.37 128.3 -67.06 128.03 -67.76 127.75 C-73.66 125.77 -79.4 125.81 -85.56 125.81 C-87.03 125.81 -87.03 125.81 -88.53 125.81 C-95.55 125.86 -102.15 126.38 -109 128 C-109 127.34 -109 126.68 -109 126 C-109.56 126.6 -110.11 127.2 -110.69 127.81 C-113.04 130.03 -115.21 131.39 -118 133 C-128.14 138.99 -135.92 146.33 -139 158 C-142.06 173.41 -136.72 190.01 -129.21 203.46 C-127.98 205.31 -127.98 205.31 -125 206 C-125 207.32 -125 208.64 -125 210 C-124.01 210 -123.02 210 -122 210 C-120.39 211.69 -120.39 211.69 -118.69 214 C-117.77 215.23 -117.77 215.23 -116.84 216.48 C-116.23 217.31 -115.63 218.14 -115 219 C-113.92 220.46 -112.84 221.92 -111.75 223.38 C-111.29 224 -110.83 224.63 -110.36 225.27 C-108.45 227.69 -106.77 229.61 -104 231 C-104 231.66 -104 232.32 -104 233 C-103.34 233.33 -102.68 233.66 -102 234 C-103.75 234.7 -103.75 234.7 -106 235 C-108 233.71 -108 233.71 -110 231.81 C-110.69 231.17 -111.39 230.52 -112.11 229.86 C-113.53 228.46 -114.93 227.05 -116.31 225.62 C-118.01 223.76 -118.01 223.76 -121 223 C-122.54 221.19 -122.54 221.19 -124.06 219 C-126.08 215.98 -126.08 215.98 -129 214 C-133.22 215.56 -136.44 217.23 -140 220 C-140.66 220 -141.32 220 -142 220 C-142.85 222.3 -142.85 222.3 -143 225 C-141.47 227.12 -141.47 227.12 -139.12 228.88 C-138.3 229.56 -137.47 230.24 -136.62 230.94 C-135.76 231.62 -134.89 232.3 -134 233 C-133.19 233.66 -132.37 234.32 -131.54 235 C-127.45 238.33 -127.45 238.33 -122.93 241.01 C-121 242 -121 242 -119.57 243.49 C-117.52 245.46 -115.46 246.19 -112.81 247.19 C-111.91 247.53 -111.01 247.88 -110.08 248.23 C-109.39 248.48 -108.71 248.74 -108 249 C-108 249.99 -108 250.98 -108 252 C-124.37 247.21 -139.88 236.81 -151 224 C-151.33 223.01 -151.66 222.02 -152 221 C-152.99 220.67 -153.98 220.34 -155 220 C-155.7 218.69 -156.36 217.35 -157 216 C-157.58 215.3 -158.16 214.6 -158.75 213.88 C-163.98 207.2 -167.77 199.81 -171 192 C-171.62 190.64 -171.62 190.64 -172.25 189.25 C-173.1 186.71 -173 184.66 -173 182 C-173.63 180.65 -174.3 179.32 -175 178 C-175.9 174.64 -176.12 173.36 -175 170 C-175 169.34 -175 168.68 -175 168 C-175.66 168 -176.32 168 -177 168 C-178.07 163.24 -177.8 159.65 -176.82 154.88 C-176.69 154.22 -176.56 153.55 -176.42 152.87 C-176 150.77 -175.56 148.66 -175.12 146.56 C-174.7 144.46 -174.27 142.37 -173.85 140.27 C-173.47 138.36 -173.07 136.45 -172.68 134.55 C-172.22 132.14 -171.83 129.71 -171.51 127.28 C-171.09 124.57 -170.65 122.66 -169.47 120.24 C-169.16 119.6 -168.85 118.96 -168.53 118.3 C-168.19 117.65 -167.85 116.99 -167.5 116.31 C-167.14 115.62 -166.79 114.92 -166.42 114.2 C-160.55 103.06 -153.26 94.43 -143 87 C-142.04 86.3 -141.08 85.61 -140.09 84.89 C-127.48 77.19 -111.19 77.5 -97.19 80.44 C-94.47 81.1 -91.77 81.79 -89.07 82.54 C-81.87 84.14 -74.08 82.67 -66.88 81.69 C-65.36 81.48 -65.36 81.48 -63.82 81.28 C-39.55 78.42 -39.55 78.42 -20.2 64.78 C-18.38 62.23 -16.68 59.64 -15 57 C-14.39 56.1 -13.78 55.19 -13.15 54.26 C-4.34 41.02 0.49 24.38 -2.5 8.31 C-2.66 7.55 -2.83 6.79 -3 6 C-3 4.68 -3 3.36 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z M-2 26 C-1 29 -1 29 -1 29 Z \",fill:\"#341047\",transform:\"translate(281,1012)\"})),_path42||(_path42=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.06 1.56 0.11 2.37 0.17 C5.37 1.05 6.03 2.11 7.56 4.81 C8.35 7.08 9.06 9.37 9.69 11.69 C10.19 13.48 10.19 13.48 10.7 15.3 C11.48 18.48 12.17 21.57 12.56 24.81 C12.07 25.31 12.07 25.31 11.56 25.81 C14.45 34.82 17.69 43.65 21.19 52.44 C21.45 53.09 21.71 53.75 21.98 54.42 C26.9 66.74 32.74 78.18 39.82 89.4 C43.5 95.22 46.42 100.57 48.56 107.12 C50.04 111.09 52.16 114.64 54.25 118.32 C55.86 121.37 56.62 124.5 57.56 127.81 C60.2 133.14 60.2 133.14 64.56 136.81 C64.89 136.15 65.22 135.49 65.56 134.81 C70.36 142.05 73.38 147.1 72.56 155.81 C72.99 158.7 72.99 158.7 73.56 160.81 C72.57 160.81 71.58 160.81 70.56 160.81 C70.73 161.49 70.89 162.17 71.06 162.88 C71.63 166.23 71.63 169.42 71.56 172.81 C70.24 173.14 68.92 173.47 67.56 173.81 C65.25 171.16 63.95 168.47 62.62 165.25 C61.15 161.79 59.99 159.65 56.56 157.81 C57.02 161.79 57.7 165.5 58.82 169.35 C62.35 181.71 62.68 191.78 60.83 204.44 C60.4 208.24 60.48 211.99 60.56 215.81 C61.69 212.44 61.7 209.68 61.81 206.12 C62.23 199.37 63.74 194.64 68.56 189.81 C71.25 189.99 73.89 190.43 76.56 190.81 C75.9 191.14 75.24 191.47 74.56 191.81 C74.89 192.45 75.22 193.09 75.56 193.75 C77.19 198.74 77.31 203.62 75.61 208.61 C74.42 212.26 73.96 215.83 73.56 219.62 C72.9 225.46 71.99 231.11 70.56 236.81 C69.9 236.81 69.24 236.81 68.56 236.81 C68.56 237.47 68.56 238.13 68.56 238.81 C69.22 238.81 69.88 238.81 70.56 238.81 C70.78 240.45 70.78 240.45 71 242.12 C71.45 245.74 71.45 245.74 72.56 248.81 C70.69 252.87 68.25 255.32 64.56 257.81 C63.57 257.81 62.58 257.81 61.56 257.81 C60.9 261.11 60.24 264.41 59.56 267.81 C61.21 267.48 62.86 267.15 64.56 266.81 C63.29 268.85 61.95 270.85 60.56 272.81 C59.9 272.81 59.24 272.81 58.56 272.81 C58.36 273.74 58.15 274.67 57.94 275.62 C55.63 283.68 50.77 291.31 45.56 297.81 C44.9 297.81 44.24 297.81 43.56 297.81 C43.34 298.35 43.11 298.89 42.88 299.45 C39.84 304.89 34.88 309.34 30.56 313.81 C29.6 314.81 29.6 314.81 28.62 315.84 C20.98 323.11 7.77 331.78 -3 332.12 C-9.4 332.67 -14.67 335.13 -20.44 337.81 C-21.33 338.18 -22.22 338.56 -23.14 338.94 C-29.92 341.93 -33.82 346.12 -38.44 351.81 C-41.95 355.5 -45.71 358.84 -49.57 362.16 C-50.19 362.71 -50.8 363.25 -51.44 363.81 C-51.97 364.27 -52.5 364.74 -53.05 365.21 C-54.89 367.16 -54.89 367.16 -56.44 371.81 C-72.94 371.81 -89.44 371.81 -106.44 371.81 C-111.17 350.53 -111.17 350.53 -104.67 339.93 C-103.02 337.44 -101.41 335.05 -99.44 332.81 C-98.78 332.81 -98.12 332.81 -97.44 332.81 C-97.2 332.25 -96.96 331.69 -96.72 331.12 C-92.12 322.84 -83.69 317.02 -75.44 312.81 C-74.49 312.32 -74.49 312.32 -73.52 311.82 C-52.67 301.14 -52.67 301.14 -45.41 303.46 C-44.11 304.12 -42.84 304.84 -41.58 305.59 C-33.59 310.16 -24.55 312.18 -15.44 310.81 C-11.23 309.52 -7.37 307.78 -3.44 305.81 C-2.63 305.45 -1.83 305.09 -1 304.72 C5.67 301.48 9.93 296.49 14.56 290.81 C15.44 289.75 15.44 289.75 16.33 288.66 C18.12 286.41 19.85 284.12 21.56 281.81 C22.35 280.79 23.13 279.76 23.94 278.7 C36.36 262.15 42.33 244.77 47.56 224.81 C47.77 224.02 47.98 223.23 48.2 222.42 C52.53 205.61 51.66 187.47 48.22 170.59 C47.58 166.91 47.54 163.54 47.56 159.81 C45.75 150.6 40.45 141.96 34.56 134.81 C34.29 134.1 34.01 133.38 33.73 132.64 C32.23 129 30.22 125.73 28.19 122.38 C24.05 115.43 20.07 108.41 16.19 101.31 C15.69 100.41 15.19 99.5 14.67 98.56 C11.69 93.09 8.99 87.56 6.56 81.81 C5.9 81.81 5.24 81.81 4.56 81.81 C2.9 77.63 1.26 73.44 -0.38 69.25 C-0.84 68.07 -1.31 66.89 -1.79 65.67 C-2.24 64.52 -2.69 63.37 -3.15 62.18 C-3.57 61.13 -3.98 60.08 -4.41 58.99 C-5.98 54.15 -6.44 49.24 -6.88 44.19 C-7.23 40.35 -7.82 36.61 -8.5 32.81 C-9.36 27.34 -9.69 21.97 -9.75 16.44 C-9.78 15.31 -9.78 15.31 -9.8 14.17 C-9.8 9.01 -8.87 5.39 -6.44 0.81 C-4 -0.4 -2.69 -0.23 0 0 Z \",fill:\"#351447\",transform:\"translate(389.4375,908.1875)\"})),_path43||(_path43=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.62 0.74 0.62 0.74 1.25 1.5 C2.24 1.83 3.23 2.16 4.25 2.5 C5.94 4.15 7.6 5.82 9.25 7.5 C10.43 8.53 11.61 9.55 12.81 10.55 C25.12 20.89 25.12 20.89 29.12 26.86 C31.31 30.05 34.24 32.56 37.06 35.19 C38.25 36.5 38.25 36.5 38.25 38.5 C39.24 38.83 40.23 39.16 41.25 39.5 C42.6 41.03 42.6 41.03 43.98 43 C47.34 47.66 50.95 52.08 54.62 56.5 C55.27 57.27 55.91 58.05 56.57 58.85 C58.13 60.73 59.69 62.62 61.25 64.5 C58.25 66.5 58.25 66.5 54.25 66.5 C54.25 65.84 54.25 65.18 54.25 64.5 C53.59 64.72 52.92 64.93 52.24 65.16 C51.36 65.43 50.47 65.71 49.56 66 C48.69 66.28 47.82 66.56 46.93 66.84 C44.26 67.5 41.99 67.62 39.25 67.5 C39.25 68.16 39.25 68.82 39.25 69.5 C38.18 69.89 37.11 70.28 36 70.69 C32.36 72.22 30.48 74.2 28.25 77.5 C22.96 77.05 20.04 75.28 15.88 72.06 C15.33 71.65 14.78 71.25 14.22 70.83 C12.85 69.77 11.55 68.64 10.25 67.5 C10.25 66.84 10.25 66.18 10.25 65.5 C6.86 64.09 6.86 64.09 3.35 63.09 C-0.38 62.13 -2.23 61.27 -4.42 58 C-5.43 56.04 -6.42 54.08 -7.38 52.1 C-9.01 49.01 -10.84 47.39 -13.75 45.5 C-14.25 44.9 -14.74 44.3 -15.25 43.69 C-15.75 43.3 -16.24 42.9 -16.75 42.5 C-20.31 42.96 -23.24 44.1 -26.51 45.53 C-34.04 48.33 -41.66 48.03 -49.56 48 C-52.49 47.99 -55.41 48 -58.33 48.03 C-59.61 48.03 -60.89 48.02 -62.21 48.02 C-66.38 48.59 -68.54 49.81 -71.75 52.5 C-72.69 55.76 -72.69 55.76 -72.75 59.5 C-73.27 66.28 -74.64 72.71 -76.25 79.31 C-77.69 85.34 -78.99 91.1 -79.25 97.31 C-79.56 103.1 -81.74 106.66 -84.75 111.5 C-91.02 121.87 -91.02 121.87 -91.75 133.5 C-88.62 136.63 -85.87 136.93 -81.56 137.31 C-76.84 137.92 -73.98 138.67 -70.25 141.62 C-64.01 146.36 -56.82 144.96 -49.44 144.12 C-48.55 143.92 -47.66 143.71 -46.75 143.5 C-45.35 141.12 -45.35 141.12 -44.75 138.5 C-44.42 137.84 -44.09 137.18 -43.75 136.5 C-42.76 136.5 -41.77 136.5 -40.75 136.5 C-40.75 137.16 -40.75 137.82 -40.75 138.5 C-40.09 138.83 -39.43 139.16 -38.75 139.5 C-41.88 148.01 -41.88 148.01 -45.5 150.06 C-46.24 150.21 -46.99 150.35 -47.75 150.5 C-47.42 151.82 -47.09 153.14 -46.75 154.5 C-52.35 157.43 -52.35 157.43 -54.81 157.88 C-57.07 158.44 -57.07 158.44 -59.25 161 C-61.75 163.5 -61.75 163.5 -63.8 163.86 C-64.44 164.07 -65.09 164.28 -65.75 164.5 C-66.86 166.64 -66.86 166.64 -67.44 169.25 C-67.67 170.11 -67.9 170.97 -68.14 171.86 C-69.1 176.02 -69.87 180.11 -70.29 184.36 C-70.37 185.25 -70.46 186.14 -70.55 187.05 C-70.64 187.96 -70.72 188.87 -70.81 189.81 C-70.9 190.74 -70.99 191.68 -71.09 192.63 C-71.31 194.92 -71.53 197.21 -71.75 199.5 C-73.58 199.01 -73.58 199.01 -75.45 198.52 C-84.43 196.29 -92.03 197.72 -100.75 200.5 C-101.25 199.51 -101.25 199.51 -101.75 198.5 C-103.07 198.83 -104.39 199.16 -105.75 199.5 C-105.09 200.82 -104.43 202.14 -103.75 203.5 C-106.75 203.5 -106.75 203.5 -109.12 201.31 C-109.99 200.38 -110.86 199.46 -111.75 198.5 C-112.64 197.65 -113.52 196.81 -114.44 195.94 C-116.46 193.8 -117.65 192.19 -118.75 189.5 C-118.09 189.5 -117.43 189.5 -116.75 189.5 C-118.81 183.69 -118.81 183.69 -123.75 180.5 C-125.5 177.38 -125.5 177.38 -126.75 174.5 C-128.4 174.5 -130.05 174.5 -131.75 174.5 C-131.48 165.31 -129.19 156.89 -126.68 148.11 C-126.01 145.77 -125.35 143.43 -124.7 141.08 C-122.85 134.51 -120.96 127.99 -118.7 121.55 C-116.52 115.29 -115.06 109.33 -114.2 102.76 C-112.71 91.92 -110.07 81.19 -107.75 70.5 C-107.57 69.64 -107.38 68.79 -107.19 67.9 C-104.53 55.71 -99.45 42.82 -88.75 35.5 C-81.15 31.68 -72.86 29.13 -64.47 27.82 C-62.72 27.66 -62.72 27.66 -61.75 26.5 C-61.43 24.94 -61.14 23.38 -60.88 21.81 C-59.19 13.58 -59.19 13.58 -56.75 10.5 C-46.39 4.14 -10.53 -9.02 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(639.75,118.5)\"})),_path44||(_path44=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.98 2.14 3.02 4.96 3.98 8.42 C5.64 9.76 7.3 11.1 8.98 12.42 C11.17 15.33 13.09 18.35 15.05 21.43 C16.14 23.11 17.25 24.79 18.46 26.39 C24.85 35.08 26.09 47.94 26.98 58.42 C27.16 59.07 27.35 59.72 27.54 60.39 C28.85 66.49 25.4 73.02 22.86 78.4 C21.85 80.71 21.3 82.93 20.98 85.42 C22.46 85.92 22.46 85.92 23.98 86.42 C23.65 87.08 23.32 87.74 22.98 88.42 C22.98 90.65 23.03 92.88 23.1 95.11 C23.19 102.26 22.63 109.26 21.79 116.36 C21.64 117.8 21.64 117.8 21.48 119.26 C20.29 128.54 16.86 135.21 9.91 141.55 C7.05 144.28 4.59 146.63 2.79 150.17 C-1.02 157.01 -6.48 159.97 -13.69 162.56 C-15.92 163.38 -17.98 164.22 -20.02 165.42 C-20.4 166.74 -20.73 168.08 -21.02 169.42 C-24.48 171.72 -25.26 171.56 -29.21 171.05 C-30.11 170.94 -31.01 170.83 -31.94 170.71 C-32.63 170.62 -33.32 170.52 -34.02 170.42 C-34.35 171.74 -34.68 173.06 -35.02 174.42 C-38.02 168.67 -38.02 168.67 -38.02 166.42 C-39.01 167.08 -40 167.74 -41.02 168.42 C-45.75 171.42 -45.75 171.42 -48.02 171.42 C-48.02 170.76 -48.02 170.1 -48.02 169.42 C-48.68 169.75 -49.34 170.08 -50.02 170.42 C-50.02 171.41 -50.02 172.4 -50.02 173.42 C-52.82 174.66 -55.17 175.44 -58.21 175.86 C-59.14 176.05 -60.07 176.23 -61.02 176.42 C-61.68 177.41 -62.34 178.4 -63.02 179.42 C-63.92 178.46 -63.92 178.46 -64.84 177.48 C-66.93 175.22 -66.93 175.22 -70.02 174.42 C-69.69 172.44 -69.36 170.46 -69.02 168.42 C-67.75 169.16 -67.75 169.16 -66.46 169.92 C-62.56 171.62 -60.23 171.96 -56.02 171.42 C-53.19 169.62 -51.42 168 -49.52 165.23 C-47.56 162.86 -46.01 162.75 -43.02 162.42 C-42.9 161.82 -42.78 161.23 -42.65 160.61 C-42.02 158.42 -42.02 158.42 -40.02 155.42 C-41.9 153.14 -41.9 153.14 -44.9 153.05 C-48.57 152.31 -49.81 151.4 -52.02 148.42 C-52.02 147.1 -52.02 145.78 -52.02 144.42 C-54.54 144.86 -55.74 145.1 -57.46 147.05 C-57.98 147.5 -58.49 147.95 -59.02 148.42 C-61.71 148.11 -61.71 148.11 -64.02 147.42 C-63.36 145.44 -62.7 143.46 -62.02 141.42 C-62.57 141.18 -63.11 140.94 -63.67 140.69 C-64.38 140.35 -65.1 140.02 -65.84 139.67 C-66.54 139.35 -67.25 139.02 -67.98 138.69 C-70.41 137.18 -71.62 135.91 -73.02 133.42 C-73.17 130.98 -73.17 130.98 -72.84 128.42 C-72.74 127.58 -72.64 126.73 -72.54 125.86 C-72.02 123.41 -71.21 121.61 -70.02 119.42 C-69.69 118.43 -69.36 117.44 -69.02 116.42 C-68.64 115.4 -68.26 114.37 -67.87 113.31 C-67.42 112.11 -66.98 110.91 -66.52 109.67 C-66.08 108.48 -65.64 107.29 -65.18 106.06 C-64.05 102.5 -63.53 99.12 -63.02 95.42 C-61.52 93.23 -61.52 93.23 -60.02 91.42 C-58.98 88.26 -58.92 85.37 -58.96 82.05 C-58.97 81.01 -58.98 79.97 -58.99 78.89 C-59 77.79 -59.01 76.68 -59.02 75.55 C-59.07 67.39 -58.98 59.37 -58.23 51.25 C-58.03 48.54 -58.09 45.94 -58.21 43.23 C-58.02 39.42 -58.02 39.42 -56.34 37.48 C-54.02 36.42 -54.02 36.42 -51.57 35.62 C-48.57 34.21 -47.63 32.96 -45.9 30.17 C-45.4 29.37 -44.9 28.58 -44.38 27.75 C-42.79 25.02 -41.35 22.29 -40.02 19.42 C-39.03 19.75 -38.04 20.08 -37.02 20.42 C-36.76 19.82 -36.49 19.23 -36.21 18.61 C-35.02 16.42 -35.02 16.42 -33.59 15.11 C-31.22 12.55 -30.3 9.65 -29.02 6.42 C-27.59 6.53 -27.59 6.53 -26.12 6.65 C-20.29 6.65 -15.16 3.96 -9.88 1.73 C-3.73 -0.71 -3.73 -0.71 0 0 Z \",fill:\"#452254\",transform:\"translate(554.0234375,1072.578125)\"})),_path45||(_path45=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.01 0.98 4 1.47 5.88 3.94 C6.39 6.64 6.39 6.64 6.56 9.62 C6.66 11.12 6.66 11.12 6.76 12.64 C6.82 13.78 6.82 13.78 6.88 14.94 C7.53 14.94 8.19 14.94 8.88 14.94 C8.55 15.93 8.22 16.92 7.88 17.94 C7.88 17.28 7.88 16.62 7.88 15.94 C7.22 15.94 6.56 15.94 5.88 15.94 C6.53 17.92 7.19 19.9 7.88 21.94 C8.87 21.61 9.86 21.28 10.88 20.94 C11.12 22.15 11.37 23.37 11.62 24.62 C12.81 29.24 14.46 32.46 18.67 35.04 C19.67 35.61 19.67 35.61 20.69 36.19 C24.96 38.69 27.38 41.89 30.28 45.84 C32.22 48.39 34.11 50.29 36.88 51.94 C39.14 51.81 39.14 51.81 40.88 50.94 C41.2 49.29 41.53 47.64 41.88 45.94 C43.36 46.43 43.36 46.43 44.88 46.94 C44 53.69 44 53.69 42.88 55.94 C42.22 55.94 41.56 55.94 40.88 55.94 C41.02 56.95 41.16 57.97 41.31 59.02 C43.69 76.33 42.73 92.95 39.84 110.17 C38.73 117.2 38.51 124.15 38.38 131.25 C37.89 148.27 37.89 148.27 37.12 155.5 C36.95 157.27 36.95 157.27 36.77 159.07 C35.6 162.83 34.25 163.94 30.88 165.94 C23.72 167.85 15.11 169.13 7.88 166.94 C4.81 164.88 4.81 164.88 2.88 162.94 C2.22 163.6 1.56 164.26 0.88 164.94 C-0.79 163.27 -0.49 161.15 -0.69 158.88 C-0.77 157.96 -0.86 157.04 -0.94 156.09 C-1 155.38 -1.06 154.67 -1.12 153.94 C-3.6 154.93 -3.6 154.93 -6.12 155.94 C-5.92 156.95 -5.71 157.96 -5.5 159 C-5.07 163.55 -5.25 165.76 -7.12 169.94 C-16.34 180.68 -16.34 180.68 -22.74 181.27 C-24.16 181.3 -25.58 181.31 -27 181.31 C-27.71 181.34 -28.42 181.36 -29.14 181.39 C-32.81 181.41 -34.9 181.09 -38 179.07 C-46.1 170.93 -47.45 160.98 -47.45 149.91 C-47.44 148.49 -47.43 147.07 -47.41 145.66 C-47.37 143.48 -47.37 141.3 -47.36 139.13 C-47.29 128.04 -47.29 128.04 -46.12 123.94 C-45.97 121.54 -45.85 119.15 -45.75 116.75 C-45.41 110.17 -44.53 103.85 -43.28 97.39 C-42.58 93.71 -42 90.06 -41.62 86.33 C-41.55 85.58 -41.47 84.82 -41.4 84.04 C-41.26 82.6 -41.14 81.17 -41.04 79.73 C-40.61 75.24 -39.41 72.4 -37.08 68.68 C-35.5 65.79 -35.06 62.78 -34.5 59.56 C-34.26 58.24 -34.01 56.91 -33.77 55.58 C-33.45 53.78 -33.45 53.78 -33.12 51.94 C-29.91 33.84 -19.23 14.04 -5.52 1.57 C-3.12 -0.06 -3.12 -0.06 0 0 Z \",fill:\"#44235A\",transform:\"translate(363.125,729.0625)\"})),_path46||(_path46=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.58 6.56 2.43 12.62 0.74 18.97 C0.05 21.78 -0.38 24.51 -0.75 27.38 C-1.81 34.13 -3.98 40.45 -6.11 46.93 C-8.56 54.46 -10.75 62.04 -12.81 69.69 C-13.1 70.75 -13.39 71.81 -13.69 72.9 C-15.47 79.56 -16.88 86.21 -18 93 C-16.82 92.69 -16.82 92.69 -15.62 92.38 C-14.76 92.25 -13.89 92.13 -13 92 C-11 94 -11 94 -10.12 96.5 C-9.27 99.15 -9.27 99.15 -7 99.88 C-5 101 -5 101 -3.69 104.44 C-3 108 -3 108 -4 111 C-4.74 110.81 -5.49 110.63 -6.25 110.44 C-8.95 110.01 -10.45 110.15 -13 111 C-13 111.99 -13 112.98 -13 114 C-12.43 114.1 -11.86 114.2 -11.28 114.3 C-4.89 115.86 -2.04 118.53 1.43 124.04 C5.12 130.99 8.57 137.98 8 146 C5.89 148.11 1.84 148.04 -1.06 148.56 C-2.2 148.77 -2.2 148.77 -3.36 148.98 C-5.24 149.33 -7.12 149.66 -9 150 C-9.66 149.01 -10.32 148.02 -11 147 C-8.06 144.5 -5.82 143.53 -2 143 C-3.32 142.34 -4.64 141.68 -6 141 C-6.33 141.66 -6.66 142.32 -7 143 C-10.61 144.45 -13.07 145 -17 145 C-15.39 147.71 -13.75 150.37 -12 153 C-14.48 153.99 -14.48 153.99 -17 155 C-25.37 144.74 -22.11 128.72 -21 116 C-20.42 111.65 -19.74 107.33 -19 103 C-18.01 102.67 -17.02 102.34 -16 102 C-14 104 -14 104 -14 108 C-13.34 108 -12.68 108 -12 108 C-12.55 103.97 -13.16 99.98 -14 96 C-17.4 95.32 -17.4 95.32 -21 95 C-24.12 98.12 -23.75 102.35 -24.12 106.59 C-24.32 108.41 -24.65 110.21 -25 112 C-25.99 112.66 -26.98 113.32 -28 114 C-28.66 113.34 -29.32 112.68 -30 112 C-31.32 112 -32.64 112 -34 112 C-35.9 118.1 -36.67 124.02 -37.34 130.38 C-38.02 134.09 -39.3 136.66 -41 140 C-41.49 142.79 -41.49 142.79 -41.56 145.56 C-41.7 148.45 -41.82 150.59 -43 153.25 C-44.21 156.57 -44.24 159.22 -44.23 162.76 C-44.23 163.44 -44.23 164.12 -44.23 164.82 C-44.23 167.11 -44.21 169.4 -44.19 171.69 C-44.18 173.35 -44.17 175.01 -44.17 176.67 C-44.1 190.78 -43.83 204.89 -43.57 219 C-42.14 296.69 -42.14 296.69 -46 315 C-46.33 315 -46.66 315 -47 315 C-47 301.8 -47 288.6 -47 275 C-48.32 275 -49.64 275 -51 275 C-51.3 275.93 -51.61 276.86 -51.92 277.82 C-56.25 290.61 -56.25 290.61 -61 296 C-61.66 296 -62.32 296 -63 296 C-63.33 297.65 -63.66 299.3 -64 301 C-64.66 301 -65.32 301 -66 301 C-66.33 303.64 -66.66 306.28 -67 309 C-67.66 309 -68.32 309 -69 309 C-69.13 309.96 -69.26 310.92 -69.39 311.91 C-71.13 324.05 -73.71 335.77 -77.84 347.32 C-79.51 352.62 -80.38 357.96 -81.23 363.44 C-82.22 368.03 -83.65 371.65 -87 375 C-88.32 374.67 -89.64 374.34 -91 374 C-91.99 376.64 -92.98 379.28 -94 382 C-94.96 378.16 -94.92 376.68 -94 373 C-94.66 373 -95.32 373 -96 373 C-96.66 361.94 -95.32 352.93 -91.78 342.46 C-87.33 329.17 -83.71 316.17 -85 302 C-86.82 299.78 -86.82 299.78 -89.41 299.63 C-92.08 299.77 -92.08 299.77 -93.81 301.62 C-95.57 304.06 -97.31 306.5 -99 309 C-99.48 309.69 -99.97 310.38 -100.46 311.09 C-104.86 317.82 -107.77 325.25 -110.75 332.69 C-114.23 341.17 -114.23 341.17 -118 344 C-120.44 344.69 -120.44 344.69 -123 345 C-125.65 345.31 -125.65 345.31 -128 346 C-130.02 348.79 -130.02 348.79 -130.89 351.36 C-132.15 354.35 -133.74 356.6 -135.69 359.19 C-139.56 364.39 -143.3 369.67 -147 375 C-148.17 371.62 -147.87 369.93 -146.42 366.7 C-146.06 365.89 -145.71 365.07 -145.34 364.24 C-144.77 362.97 -144.77 362.97 -144.19 361.69 C-141.73 356.18 -139.52 350.86 -138 345 C-136.35 339.34 -134.53 334.75 -131 330 C-130.67 330.99 -130.34 331.98 -130 333 C-129.34 333 -128.68 333 -128 333 C-127.94 332.05 -127.88 331.1 -127.81 330.12 C-127.09 325.02 -124.84 320.28 -122 316 C-121.01 315.67 -120.02 315.34 -119 315 C-118.34 315.66 -117.68 316.32 -117 317 C-112.99 317.35 -110.48 316.99 -107 315 C-106.34 315 -105.68 315 -105 315 C-104.63 313.85 -104.26 312.69 -103.88 311.5 C-102.63 307.72 -101.24 304.01 -99.79 300.3 C-97.19 293.57 -95.15 287 -93.65 279.92 C-91.29 269.29 -91.29 269.29 -88 266 C-86.91 264.09 -86.91 264.09 -86.75 262.12 C-85.61 258.89 -83.9 257.74 -81 256 C-78.03 256.05 -78.03 256.05 -75 257 C-70.55 262.77 -68.39 269.88 -67.52 277.04 C-67.13 279.39 -67.13 279.39 -64 281 C-64 281.66 -64 282.32 -64 283 C-63.01 282.67 -62.02 282.34 -61 282 C-60.67 282.33 -60.34 282.66 -60 283 C-55.96 275.62 -54.37 266.43 -56.48 258.1 C-57.37 254.49 -57.51 250.82 -57.75 247.12 C-57.82 246.33 -57.89 245.54 -57.96 244.73 C-58.29 239.55 -57.65 236.6 -55 232 C-54.12 229.61 -54.12 229.61 -54 227 C-55.17 224.72 -55.17 224.72 -56.9 222.54 C-60.91 216.24 -60.79 210.69 -60.62 203.39 C-60.61 201.46 -60.61 201.46 -60.6 199.5 C-60.59 196.1 -60.53 192.71 -60.47 189.32 C-60.43 186.58 -60.41 183.84 -60.39 181.1 C-60.33 170.57 -60.22 160.04 -59.65 149.51 C-59.59 148.42 -59.53 147.32 -59.47 146.19 C-58.8 141.64 -57.01 137.94 -54.86 133.91 C-52.73 126.72 -57.8 118.22 -60.61 111.62 C-63.27 105.09 -63.49 99.92 -62 93 C-61.75 89.92 -61.56 86.83 -61.38 83.74 C-61 81 -61 81 -59 78 C-58.76 76.19 -58.53 74.38 -58.34 72.56 C-57.35 65.11 -55.56 57.75 -53.38 50.56 C-51.74 44.91 -51.6 39.33 -51.5 33.48 C-50.91 29.4 -49.44 27.27 -47 24 C-46.3 21.81 -46.3 21.81 -46 20 C-45.5 19.5 -45.5 19.5 -45 19 C-45.99 18.01 -45.99 18.01 -47 17 C-45.68 16.67 -44.36 16.34 -43 16 C-43 15.34 -43 14.68 -43 14 C-37.71 10.62 -33.08 9.08 -26.94 7.94 C-21.43 6.89 -17.02 5.6 -12 3 C-9.12 3.31 -9.12 3.31 -7 4 C-6.97 5.48 -6.95 6.96 -6.94 8.44 C-6.93 9.26 -6.91 10.08 -6.9 10.93 C-7 13 -7 13 -8 14 C-8 15.89 -8 17.78 -7.97 19.67 C-8 22.07 -8.22 24.39 -8.5 26.78 C-8.59 27.58 -8.69 28.37 -8.78 29.19 C-8.85 29.79 -8.93 30.38 -9 31 C-8.8 30.2 -8.6 29.41 -8.39 28.58 C-7.47 24.97 -6.55 21.36 -5.62 17.75 C-5.15 15.87 -5.15 15.87 -4.66 13.95 C-4.35 12.74 -4.05 11.54 -3.73 10.3 C-3.44 9.19 -3.16 8.08 -2.87 6.93 C-2.12 4.41 -1.27 2.29 0 0 Z \",fill:\"#311939\",transform:\"translate(526,200)\"})),_path47||(_path47=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.98 1.05 4.96 1.9 7.19 4.12 C7.19 4.78 7.19 5.44 7.19 6.12 C7.85 6.12 8.51 6.12 9.19 6.12 C9.19 6.78 9.19 7.44 9.19 8.12 C10.27 8.47 10.27 8.47 11.38 8.81 C14.75 10.39 16.75 12.33 19.19 15.12 C19.19 15.78 19.19 16.44 19.19 17.12 C19.91 17.39 20.63 17.66 21.38 17.94 C26.68 20.18 30.91 23.39 35.25 27.12 C35.81 27.6 36.37 28.08 36.94 28.57 C41.53 32.5 46 36.55 50.4 40.68 C53.08 43.2 53.08 43.2 56.19 45.12 C56.19 45.78 56.19 46.44 56.19 47.12 C56.95 47.39 57.71 47.66 58.5 47.94 C61.12 49.09 62.29 50.06 64.19 52.12 C65.67 53.12 65.67 53.12 67.19 54.12 C67.19 54.78 67.19 55.44 67.19 56.12 C67.85 56.12 68.51 56.12 69.19 56.12 C69.19 56.78 69.19 57.44 69.19 58.12 C70.84 58.78 72.49 59.44 74.19 60.12 C74.19 60.78 74.19 61.44 74.19 62.12 C74.87 62.33 75.54 62.53 76.24 62.75 C80.21 64.61 83.07 67.27 86.31 70.19 C87.64 71.37 88.98 72.54 90.31 73.72 C90.96 74.3 91.62 74.88 92.29 75.47 C95.75 78.49 99.33 81.35 102.92 84.22 C109.38 89.64 109.38 89.64 110.38 94.12 C114.28 106.9 127.41 118.78 136.19 128.62 C138.56 131.31 140.41 134.01 142.19 137.12 C142.76 137.6 143.34 138.07 143.94 138.56 C145.19 140.12 145.19 140.12 145.12 142.94 C143.83 147.35 142.1 151.03 138 153.38 C137.4 153.62 136.8 153.87 136.19 154.12 C135.86 154.78 135.53 155.44 135.19 156.12 C128.48 158.48 122.31 159.83 115.45 157.73 C112.75 157.01 110.22 156.89 107.44 156.75 C102.8 156.38 100.47 155.6 97.19 152.12 C94.05 148.8 90.9 146.18 87.12 143.62 C78.72 137.81 78.72 137.81 77.76 132.99 C77.63 132.21 77.51 131.43 77.38 130.62 C76.69 127.02 75.87 125.31 72.94 123.06 C69.65 121.05 67.06 120.65 63.19 121.12 C63.7 126.43 65.51 129.64 68.19 134.12 C68.19 134.78 68.19 135.44 68.19 136.12 C69.18 136.46 70.17 136.78 71.19 137.12 C72.21 138.78 73.2 140.45 74.19 142.12 C75.15 143.2 76.13 144.26 77.12 145.31 C79.55 148.05 80.81 150.43 82 153.88 C84 159.45 87.38 163.37 91.26 167.78 C93.19 170.12 93.19 170.12 94.19 173.12 C92.01 173.86 92.01 173.86 89.19 174.12 C86.67 172.63 86.67 172.63 84.05 170.35 C83.09 169.52 82.12 168.68 81.13 167.82 C76.44 163.53 71.91 159.09 67.44 154.56 C66.54 153.67 65.65 152.77 64.73 151.85 C60.23 147.32 55.89 142.72 51.73 137.87 C49.53 135.38 47.15 133.1 44.75 130.81 C40.27 126.39 36.52 121.81 32.94 116.63 C30.27 112.82 27.78 109.6 24.12 106.69 C21 103.96 19.95 101.81 18.19 98.12 C15.75 95.44 15.75 95.44 13.19 93.12 C10.84 90.94 10.24 90.28 9.19 87.12 C8.05 85.95 6.91 84.79 5.73 83.66 C3.87 81.81 2.12 79.89 0.38 77.94 C-0.23 77.26 -0.83 76.59 -1.46 75.89 C-2.81 74.12 -2.81 74.12 -2.81 72.12 C-3.8 71.8 -4.79 71.47 -5.81 71.12 C-7.39 69.52 -7.39 69.52 -9.06 67.5 C-11.46 64.64 -13.92 62.07 -16.69 59.56 C-20.13 56.22 -20.72 53.87 -20.81 49.12 C-21.54 49.05 -22.26 48.97 -23.01 48.89 C-26.53 47.93 -28.09 46.35 -30.69 43.81 C-39.86 35.27 -49.42 32.12 -61.81 31.12 C-61.65 26.79 -61.44 24.75 -58.31 21.62 C-53.78 19.68 -50.55 20.16 -45.81 21.12 C-45.54 22.14 -45.28 23.15 -45 24.19 C-43.4 27.97 -41.32 29.25 -37.8 31.26 C-31.6 35.06 -26.86 39.69 -21.88 44.94 C-20.25 46.64 -18.61 48.33 -16.97 50.02 C-16.27 50.76 -15.56 51.5 -14.84 52.26 C-12.86 54.08 -11.32 55.19 -8.81 56.12 C-4 55.89 -4 55.89 0.12 53.62 C3.21 51.38 6.45 50.87 10.19 51.12 C12.65 52.8 14.15 54.08 16.08 56.24 C16.59 56.77 17.1 57.31 17.63 57.85 C19.25 59.55 20.85 61.27 22.44 63 C24.05 64.72 25.66 66.42 27.29 68.13 C28.3 69.18 29.29 70.25 30.28 71.33 C32.74 73.95 34.51 75.76 38.19 76.12 C34.63 70.27 30.09 65.93 25.14 61.25 C21.83 58.03 19.61 55.62 18.19 51.12 C15.88 48.08 13.67 45.51 10.69 43.12 C5.81 39.22 3.3 35.59 1 29.88 C-1.44 24.11 -4.99 20.65 -9.7 16.61 C-12.36 13.49 -12.56 11.15 -12.81 7.12 C-5.16 0.17 -5.16 0.17 0 0 Z \",fill:\"#462453\",transform:\"translate(685.8125,80.875)\"})),_path48||(_path48=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 1.07 1.72 1.07 3.5 2.69 C4.09 3.21 4.68 3.73 5.28 4.26 C13.53 12.6 14.42 26 14.56 37.25 C14.45 56.25 11.14 77.51 3.31 94.94 C1.89 97.88 1.89 97.88 1.62 100.81 C0.68 105.63 -1.69 109.69 -4 114 C-4.66 114 -5.32 114 -6 114 C-6.37 114.99 -6.37 114.99 -6.75 116 C-7.37 117.48 -7.37 117.48 -8 119 C-8.47 120.18 -8.95 121.35 -9.44 122.56 C-15.53 134.54 -29.7 148.12 -42.19 152.62 C-42.88 152.89 -43.58 153.15 -44.29 153.41 C-47.35 154.08 -50.23 154.04 -53.34 153.99 C-58.66 154.01 -63.95 154.48 -69.25 154.88 C-70.39 154.95 -71.53 155.03 -72.7 155.11 C-92.61 155.94 -92.61 155.94 -108.81 166 C-109.88 167.33 -110.94 168.67 -112 170 C-112.76 170.7 -113.53 171.4 -114.31 172.12 C-117 175.11 -118.07 178.06 -117.93 182.09 C-117.61 184.92 -117.28 187.44 -116 190 C-116.14 192.95 -116.34 195.87 -116.56 198.81 C-117.21 209.01 -116.72 218.39 -112.72 227.91 C-111.47 231.52 -111.04 235.27 -110.47 239.04 C-109.95 242.34 -109.21 245.54 -108.37 248.77 C-107.86 251.85 -107.98 254.88 -108 258 C-114.74 258.15 -121.49 258.26 -128.23 258.33 C-130.53 258.36 -132.82 258.4 -135.11 258.45 C-138.41 258.53 -141.71 258.56 -145.01 258.59 C-146.55 258.63 -146.55 258.63 -148.12 258.68 C-155.11 258.68 -155.11 258.68 -157.73 256.67 C-159.07 255.05 -159.07 255.05 -161 252 C-162.7 250.62 -162.7 250.62 -164.31 249.75 C-165.2 249.17 -166.09 248.6 -167 248 C-167 247.34 -167 246.68 -167 246 C-167.55 245.92 -168.09 245.84 -168.66 245.76 C-186.97 242.99 -201.43 237.61 -216 226 C-217.18 225.09 -218.37 224.18 -219.56 223.27 C-222.72 220.86 -225.86 218.44 -229 216 C-227.79 211.37 -226.7 209.18 -222.62 206.62 C-221.85 206.12 -221.08 205.62 -220.29 205.1 C-218 204 -218 204 -214 204 C-213.5 203.01 -213.5 203.01 -213 202 C-211.83 203.45 -210.66 204.91 -209.5 206.38 C-208.85 207.19 -208.2 208 -207.53 208.84 C-206 211 -206 211 -206 213 C-205.43 213.07 -204.86 213.14 -204.27 213.22 C-201.19 214.28 -199.85 216.08 -197.69 218.5 C-193.74 222.61 -191.71 223.48 -186 224 C-183.14 225.77 -180.56 227.82 -178 230 C-178.74 226.86 -179.76 223.98 -181 221 C-181.66 221 -182.32 221 -183 221 C-183.33 220.19 -183.65 219.38 -183.99 218.55 C-184.43 217.48 -184.86 216.41 -185.31 215.31 C-185.74 214.26 -186.17 213.2 -186.61 212.11 C-187.9 209.02 -187.9 209.02 -189.6 206.48 C-191.22 203.61 -191.63 201.31 -192.06 198.06 C-192.54 194.76 -193.03 191.91 -194.12 188.75 C-197.47 178.22 -193.18 167.48 -188.46 158.12 C-184.16 150.03 -178.66 142.32 -172 136 C-171.01 136.33 -170.02 136.66 -169 137 C-166.98 135.7 -164.98 134.36 -163 133 C-160.68 132.03 -158.32 131.13 -155.94 130.31 C-154.75 129.9 -153.56 129.48 -152.34 129.05 C-147.65 127.58 -143.6 126.87 -138.69 126.94 C-137.8 126.95 -136.92 126.96 -136.01 126.96 C-135.35 126.98 -134.68 126.99 -134 127 C-133.67 127.99 -133.34 128.98 -133 130 C-132.34 130 -131.68 130 -131 130 C-131.47 134.27 -132.03 136.03 -135 139 C-135.5 141.54 -135.5 141.54 -135 144 C-131.43 146.38 -127.93 147.13 -123.81 148.06 C-123.08 148.24 -122.35 148.41 -121.6 148.59 C-115.3 150.04 -108.99 151.18 -102.5 151.06 C-101.35 151.04 -100.19 151.02 -99 151 C-98.67 151.66 -98.34 152.32 -98 153 C-95.52 152.86 -93.04 152.71 -90.56 152.56 C-89.86 152.52 -89.15 152.48 -88.42 152.44 C-84.91 152.52 -84.91 152.52 -82 151 C-80.56 150.75 -79.11 150.56 -77.66 150.39 C-76.77 150.27 -75.87 150.16 -74.95 150.05 C-74 149.93 -73.04 149.81 -72.06 149.69 C-65.26 148.79 -59.05 147.86 -52.84 144.77 C-51 144 -51 144 -47 144 C-47 143.34 -47 142.68 -47 142 C-45.8 141.84 -44.61 141.67 -43.38 141.5 C-38.59 140.46 -34.7 138.41 -30.5 136 C-29.88 135.64 -29.25 135.29 -28.61 134.92 C-25.23 133.04 -25.23 133.04 -23 130 C-22.22 129.56 -21.44 129.12 -20.63 128.67 C-17.68 126.79 -16.63 125.28 -14.94 122.25 C-14.47 121.43 -14.01 120.61 -13.53 119.77 C-13.02 118.85 -12.52 117.94 -12 117 C-11.36 115.9 -10.73 114.8 -10.07 113.67 C-7.88 109.85 -5.9 105.94 -3.94 102 C-3.6 101.33 -3.26 100.65 -2.91 99.96 C0.49 93.14 3.32 86.49 5.06 79.06 C5.39 77.72 5.71 76.38 6.04 75.04 C6.19 74.37 6.35 73.7 6.51 73.02 C7 70.99 7.53 68.98 8.05 66.96 C11.94 51.4 12.86 33.63 9 18 C8.01 18 7.02 18 6 18 C5.97 19 5.95 20 5.92 21.02 C5.28 39.05 3.45 58.04 -3 75 C-3.33 75 -3.66 75 -4 75 C-4.05 72.98 -4.09 70.96 -4.12 68.94 C-4.15 67.81 -4.17 66.69 -4.2 65.53 C-3.98 61.72 -3.08 58.65 -2 55 C1.1 39.42 3.33 22.18 -2.38 6.95 C-3 5 -3 5 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#3A164B\",transform:\"translate(366,1022)\"})),_path49||(_path49=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.67 0.72 4.73 1.5 6.88 4.56 C7.77 7.22 8.32 9.8 8.88 12.56 C10.86 12.56 12.84 12.56 14.88 12.56 C14.5 15 14.5 15 13.88 17.56 C13.22 17.89 12.56 18.22 11.88 18.56 C12.87 20.54 12.87 20.54 13.88 22.56 C12.88 24.05 12.88 24.05 11.88 25.56 C11.4 27.82 10.99 30.1 10.62 32.38 C5.45 61.86 5.45 61.86 -3.12 73.56 C-7.88 80.92 -7.74 87.84 -6.62 96.38 C-6.45 97.77 -6.28 99.17 -6.12 100.56 C-6.01 101.49 -5.9 102.43 -5.78 103.39 C-4.99 115.04 -10.38 124.98 -17.25 134.12 C-20.12 136.56 -20.12 136.56 -23.5 136.5 C-24.37 136.19 -25.23 135.88 -26.12 135.56 C-26.12 134.9 -26.12 134.24 -26.12 133.56 C-27.12 133.56 -28.11 133.56 -29.12 133.56 C-29.15 132.15 -29.17 130.73 -29.19 129.31 C-29.2 128.52 -29.21 127.73 -29.22 126.92 C-29.13 124.64 -28.68 122.76 -28.12 120.56 C-28.06 119.15 -28.04 117.73 -28.06 116.31 C-28.08 115.08 -28.1 113.84 -28.12 112.56 C-30.02 112.58 -30.02 112.58 -32.12 113.56 C-34.08 116.45 -34.08 116.45 -35.75 119.94 C-39.08 126.49 -39.08 126.49 -41.12 129.56 C-41.8 131.56 -42.47 133.56 -43.12 135.56 C-43.76 136.91 -44.42 138.25 -45.12 139.56 C-45.78 139.56 -46.44 139.56 -47.12 139.56 C-47.31 140.37 -47.31 140.37 -47.5 141.19 C-49.44 148.56 -52.7 155 -56.19 161.73 C-59.65 168.29 -59.65 168.29 -61.49 175.41 C-62.44 180.14 -64.9 183.86 -67.31 188 C-72.04 196.31 -75.9 204.57 -79.12 213.56 C-79.78 213.23 -80.44 212.9 -81.12 212.56 C-81.1 211.63 -81.08 210.71 -81.06 209.75 C-80.97 206.54 -80.97 206.54 -82.12 203.56 C-83.25 198.03 -83.19 195.29 -81.05 189.93 C-80.02 187.28 -79.11 184.61 -78.22 181.92 C-77.89 180.91 -77.56 179.9 -77.21 178.87 C-76.53 176.8 -75.85 174.74 -75.17 172.67 C-73.2 166.7 -71.13 160.78 -68.88 154.9 C-67.96 152.05 -67.8 149.54 -68.12 146.56 C-73.22 146.94 -73.22 146.94 -77.5 149.5 C-82.65 153.54 -89.77 153.75 -96.12 154.56 C-96.55 155.64 -96.55 155.64 -96.98 156.75 C-102.4 170.12 -102.4 170.12 -109.12 173.56 C-111.12 171.56 -111.12 171.56 -111.54 168.94 C-110.98 164.35 -109.01 161.36 -106.56 157.5 C-105.65 156 -104.73 154.5 -103.82 152.99 C-103.14 151.88 -103.14 151.88 -102.44 150.74 C-100.53 147.58 -98.71 144.37 -96.94 141.12 C-96.08 139.58 -96.08 139.58 -95.21 138 C-94.85 137.2 -94.49 136.39 -94.12 135.56 C-94.62 134.57 -94.62 134.57 -95.12 133.56 C-96.12 133.89 -97.11 134.22 -98.12 134.56 C-99.47 134.1 -99.47 134.1 -100.85 133.63 C-104.58 132.41 -107.59 132.36 -111.5 132.44 C-112.75 132.46 -113.99 132.47 -115.27 132.49 C-116.21 132.52 -117.16 132.54 -118.12 132.56 C-119.44 129.54 -119.03 128.26 -118.05 125.03 C-117.52 123.7 -116.99 122.38 -116.44 121.06 C-116.18 120.4 -115.92 119.73 -115.66 119.05 C-114.06 115.13 -112.46 112.22 -109.12 109.56 C-108.46 109.56 -107.81 109.56 -107.12 109.56 C-106.92 108.78 -106.71 108 -106.5 107.19 C-104.62 102.24 -101.95 98.02 -99.12 93.56 C-98.51 92.57 -97.9 91.59 -97.27 90.57 C-87.02 74.5 -87.02 74.5 -78.5 71.12 C-74.26 71.68 -72.82 73.3 -69.81 76.17 C-68.08 77.82 -68.08 77.82 -65.06 78.25 C-59.83 77.03 -56.86 73.74 -54.11 69.33 C-53.56 68.17 -53.01 67.01 -52.44 65.81 C-52.14 65.2 -51.85 64.58 -51.54 63.94 C-49.63 59.89 -48.04 55.82 -46.74 51.54 C-45.77 48.41 -44.54 45.52 -43.12 42.56 C-42.47 42.23 -41.81 41.9 -41.12 41.56 C-38.55 36.02 -37.53 29.93 -36.55 23.95 C-36.12 21.56 -36.12 21.56 -35.12 18.56 C-34.47 18.56 -33.81 18.56 -33.12 18.56 C-33.12 20.21 -33.12 21.86 -33.12 23.56 C-31.24 23.54 -31.24 23.54 -29.12 22.56 C-27.65 20.49 -26.41 18.52 -25.19 16.31 C-22.6 11.76 -20.18 7.93 -16.12 4.56 C-14.99 4.73 -13.86 4.89 -12.69 5.06 C-10.92 5.31 -10.92 5.31 -9.12 5.56 C-2.76 0.5 -2.76 0.5 0 0 Z \",fill:\"#38154A\",transform:\"translate(506.125,537.4375)\"})),_path50||(_path50=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.24 3.68 6.16 6.4 7 12 C6.59 15.08 5.81 18.01 5 21 C4.65 23 4.32 25 4 27 C3.77 27.87 3.55 28.73 3.31 29.62 C2.94 32.46 3.47 33.63 5 36 C6.15 37.3 6.15 37.3 9 38 C8.67 38.33 8.34 38.66 8 39 C7.85 43.43 7.92 46.67 9 51 C11.97 51.33 14.94 51.66 18 52 C18.33 52.99 18.66 53.98 19 55 C19.76 54.63 20.53 54.26 21.31 53.88 C22.64 53.44 22.64 53.44 24 53 C27 55 27 55 27.81 58.38 C27.99 61.84 27.9 63.2 26 66 C25.01 66 24.02 66 23 66 C23.66 66.33 24.32 66.66 25 67 C25 67.99 25 68.98 25 70 C24.01 70 23.02 70 22 70 C21.06 72.86 21.06 72.86 21.62 75.73 C22.19 79.13 20.86 81.41 19.56 84.56 C17.24 90.71 15.28 96.46 17 103 C20.81 109.63 24.66 113.54 32.06 115.56 C32.7 115.71 33.34 115.85 34 116 C34.99 116.28 34.99 116.28 36 116.56 C38.31 117.14 38.31 117.14 42 117 C42.22 115.54 42.43 114.08 42.62 112.62 C42.8 111.41 42.8 111.41 42.98 110.16 C42.98 109.45 42.99 108.74 43 108 C42.34 107.34 41.68 106.68 41 106 C41.99 103.36 42.98 100.72 44 98 C44.66 98 45.32 98 46 98 C47.57 95.93 47.57 95.93 49.06 93.31 C49.59 92.44 50.12 91.57 50.66 90.68 C51.97 88.07 52.58 85.87 53 83 C53.66 83 54.32 83 55 83 C54.92 81.76 54.84 80.53 54.75 79.25 C54.76 76.18 54.84 75.24 56.62 72.62 C60.33 70.09 63.36 68.79 67.88 69.38 C68.58 69.58 69.28 69.79 70 70 C70 71.32 70 72.64 70 74 C70.74 74.27 71.48 74.54 72.24 74.81 C74.91 75.96 76.87 77.26 79.19 79 C83.91 82.26 88.36 83.32 94 84 C94 84.66 94 85.32 94 86 C95.86 86.18 95.86 86.18 97.76 86.37 C99.4 86.54 101.05 86.71 102.69 86.88 C103.5 86.95 104.32 87.03 105.16 87.11 C109.43 87.56 113.09 88.1 117 90 C116.67 91.65 116.34 93.3 116 95 C115.34 95 114.68 95 114 95 C114.33 95.99 114.66 96.98 115 98 C114.31 98.1 113.63 98.2 112.92 98.3 C112.02 98.45 111.12 98.6 110.19 98.75 C109.29 98.89 108.4 99.03 107.48 99.17 C104.44 100.19 103.6 101.27 102 104 C101.67 104.99 101.34 105.98 101 107 C101.33 107.66 101.66 108.32 102 109 C101.97 111.23 101.9 113.46 101.81 115.69 C101.8 121.92 101.88 125.28 106 130 C111.6 134.54 118.16 135.86 125.03 137.41 C130.97 138.82 136.31 140.97 141 145 C141.66 146.32 142.32 147.64 143 149 C74.69 149 6.38 149 -64 149 C-57.34 141.23 -57.34 141.23 -54.38 138.81 C-49.08 134.32 -44.27 129.35 -39.39 124.41 C-38.06 123.06 -36.71 121.71 -35.37 120.37 C-27.05 112.04 -20.88 103.14 -15 93 C-14.64 92.39 -14.29 91.79 -13.92 91.17 C-6.41 78.15 -4.8 65.13 -4.31 50.43 C-4.14 46.9 -3.6 43.51 -3.01 40.03 C-1.73 32.11 -1.58 24.25 -1.44 16.25 C-1.39 14.06 -1.35 11.88 -1.29 9.7 C-1.25 7.75 -1.21 5.79 -1.17 3.84 C-1 1 -1 1 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(669,1131)\"})),_path51||(_path51=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.01 0.74 2.03 1.48 2.04 2.24 C2.35 21.03 2.35 21.03 5.57 39.47 C5.71 40.31 5.86 41.14 6 42 C5.34 42.66 4.68 43.32 4 44 C4 44.99 4 45.98 4 47 C5.24 47.37 6.48 47.74 7.75 48.12 C10.76 49.29 12.09 50.09 14.44 52.44 C16.35 56.79 16.57 60.57 16.73 65.29 C16.81 68.22 16.81 68.22 19 71 C19.99 67.7 20.98 64.4 22 61 C27.94 60.5 27.94 60.5 34 60 C34 58.68 34 57.36 34 56 C33.34 56 32.68 56 32 56 C32 55.34 32 54.68 32 54 C31.01 53.67 30.02 53.34 29 53 C29 52.34 29 51.68 29 51 C28.34 51 27.68 51 27 51 C26.73 50.05 26.46 49.1 26.19 48.12 C25.25 44.75 25.25 44.75 22 43 C21.56 40.56 21.56 40.56 22 38 C24 36.19 24 36.19 26 35 C26.99 35.66 27.98 36.32 29 37 C29.41 39.71 29.13 42.24 29 45 C31.31 45.66 33.62 46.32 36 47 C35.5 43.53 35.5 43.53 35 40 C35.99 39.67 36.98 39.34 38 39 C39.81 40.81 39.38 43.61 39.56 46.06 C39.65 47.17 39.73 48.27 39.82 49.41 C39.91 50.69 39.91 50.69 40 52 C41.98 51.5 41.98 51.5 44 51 C42.01 65.78 39.37 80.62 31.12 93.31 C27.29 99.38 26.9 104.97 28 112 C29.23 115.2 29.23 115.2 32 117 C32 118.32 32 119.64 32 121 C32.56 121.19 33.11 121.37 33.69 121.56 C36.57 123.35 37.83 125.47 39.7 128.25 C41.46 130.61 43.68 132.21 46 134 C46 134.66 46 135.32 46 136 C46.78 136.31 47.57 136.62 48.38 136.94 C51 138 51 138 53 139 C53 139.99 53 140.98 53 142 C53.66 142.33 54.32 142.66 55 143 C54.01 143.33 53.02 143.66 52 144 C50.66 143.01 49.33 142.01 48 141 C45.92 140.24 43.83 139.57 41.71 138.94 C40 138 40 138 39.26 135.9 C39.18 135.27 39.09 134.65 39 134 C38.34 134 37.68 134 37 134 C36.77 133.05 36.55 132.1 36.31 131.12 C35.31 127.81 35.31 127.81 32.38 126.62 C31.2 126.32 31.2 126.32 30 126 C30 125.34 30 124.68 30 124 C29.34 124 28.68 124 28 124 C29.26 129.03 31.56 132.31 34.76 136.27 C36 138 36 138 36 140 C36.66 140 37.32 140 38 140 C38.95 142.14 39.9 144.28 40.84 146.43 C41.58 148.07 42.35 149.71 43.16 151.32 C45.73 156.59 46.2 160.17 46 166 C47.63 169.12 47.63 169.12 50.06 169.66 C50.84 169.79 51.63 169.93 52.44 170.06 C55.74 170.63 57.11 171.07 60 173 C63.37 172.67 65.42 171.12 68 169 C68 169.66 68 170.32 68 171 C68.66 171 69.32 171 70 171 C68.85 173.47 67.95 175.05 66 177 C60.4 177.55 56.91 176.41 52 174 C51.32 174.99 51.32 174.99 50.62 176 C50.09 176.66 49.55 177.32 49 178 C48.34 178 47.68 178 47 178 C45.57 183.34 46.72 186.07 49 191 C49 192.32 49 193.64 49 195 C49.99 195 50.98 195 52 195 C52 195.66 52 196.32 52 197 C54.54 196.72 57.08 196.42 59.62 196.12 C60.34 196.05 61.05 195.97 61.79 195.89 C62.49 195.8 63.19 195.72 63.91 195.63 C64.55 195.56 65.19 195.49 65.85 195.41 C68.14 195.03 68.14 195.03 70.78 193.97 C74.47 192.86 77.85 192.73 81.67 192.77 C82.76 192.77 82.76 192.77 83.86 192.77 C85.38 192.77 86.91 192.78 88.43 192.79 C90.73 192.81 93.03 192.81 95.33 192.81 C102.21 192.83 109.02 192.96 115.86 193.76 C119.33 194.15 122.76 194.25 126.25 194.31 C126.92 194.34 127.59 194.37 128.27 194.4 C133.38 194.47 135.95 192.95 140 190 C142.88 190.25 142.88 190.25 145 191 C145 191.99 145 192.98 145 194 C141.07 197.93 135.23 198.11 129.9 198.23 C128.06 198.23 126.22 198.21 124.38 198.19 C122.91 198.18 122.91 198.18 121.42 198.17 C116.19 198.12 111.02 197.91 105.81 197.44 C100.23 196.97 94.78 197.04 89.19 197.31 C88.02 197.36 88.02 197.36 86.83 197.42 C82.92 197.64 79.27 198.11 75.46 199.04 C71.06 200.09 66.95 200.23 62.44 200.12 C61.71 200.12 60.99 200.11 60.25 200.1 C58.5 200.07 56.75 200.04 55 200 C51.99 206.33 51.99 206.33 53 213 C54.49 215.42 56.06 217.74 57.72 220.05 C59 222 59 222 59 224 C64.05 224.94 64.05 224.94 69 224 C73.17 223.85 76.94 224.02 81 225 C81 225.66 81 226.32 81 227 C83.64 226.67 86.28 226.34 89 226 C89 226.66 89 227.32 89 228 C76.62 228.99 76.62 228.99 64 230 C66.18 234.36 68.08 237.68 70.94 241.5 C71.64 242.45 72.35 243.41 73.07 244.39 C73.71 245.25 74.34 246.11 75 247 C77.56 250.6 79.46 253.99 81.17 258.06 C81.99 259.98 82.85 261.87 83.72 263.77 C87.09 271.34 89.48 278.32 90.56 286.56 C91.49 293.39 92.66 298.24 98 303 C98.74 303.71 98.74 303.71 99.49 304.43 C104.75 308.84 111.5 310.25 118 312 C118 312.66 118 313.32 118 314 C109.26 314.48 101.92 312.57 95 307 C86.77 298.9 84.56 290.9 82.54 279.85 C81.65 275.27 80.59 271.96 78 268 C78 267.01 78 266.02 78 265 C75.09 263.46 72.18 262.37 69.06 261.31 C63.78 259.26 61.8 256.85 59 252 C61.75 247.12 61.75 247.12 64 246 C64 245.34 64 244.68 64 244 C63.34 243.34 62.68 242.68 62 242 C61.67 241.01 61.34 240.02 61 239 C60.01 239 59.02 239 58 239 C58 238.34 58 237.68 58 237 C57.34 237 56.68 237 56 237 C55.02 235.27 54.05 233.55 53.07 231.82 C50.73 227.7 50.73 227.7 46.38 225.81 C45.26 225.54 44.15 225.28 43 225 C43.74 230.55 43.74 230.55 45 236 C41.62 236.62 41.62 236.62 38 237 C37.01 236.01 37.01 236.01 36 235 C36.36 227.48 36.36 227.48 40 224 C40.17 221.04 40.17 221.04 40 218 C40.38 215.69 40.38 215.69 41 214 C41.66 213.67 42.32 213.34 43 213 C42.99 209.9 42.8 207 42 204 C40.02 202.31 38.02 200.65 36 199 C34.82 195.82 34 192.41 34 189 C32.35 188.67 30.7 188.34 29 188 C29 187.34 29 186.68 29 186 C27.02 186 25.04 186 23 186 C22.67 185.34 22.34 184.68 22 184 C20.68 188.29 19.36 192.58 18 197 C17.34 196.67 16.68 196.34 16 196 C15.01 196.99 15.01 196.99 14 198 C14 198.33 14 198.66 14 199 C11.75 199.17 9.5 199.33 7.25 199.5 C6 199.59 4.74 199.69 3.45 199.78 C0.97 199.94 -1.51 200 -4 200 C-4.66 199.34 -5.32 198.68 -6 198 C-8.82 203.55 -10.53 207.74 -10 214 C-10.99 214.33 -11.98 214.66 -13 215 C-13.33 213.02 -13.66 211.04 -14 209 C-13.34 209 -12.68 209 -12 209 C-12.19 208.2 -12.37 207.39 -12.56 206.56 C-12.71 205.72 -12.85 204.87 -13 204 C-12.67 203.67 -12.34 203.34 -12 203 C-12.66 202.67 -13.32 202.34 -14 202 C-14.5 202.99 -14.5 202.99 -15 204 C-17.7 195.9 -15.79 187.76 -12.88 180 C-11.55 175.47 -11.78 171.43 -12.49 166.8 C-13.04 162.73 -13.21 158.71 -13.28 154.61 C-13.3 153.81 -13.32 153.01 -13.34 152.18 C-13.37 150.45 -13.41 148.73 -13.45 147 C-13.5 144.28 -13.56 141.56 -13.62 138.83 C-13.71 135.08 -13.79 131.33 -13.88 127.57 C-14.05 119.84 -14.23 112.11 -14.44 104.38 C-14.48 102.85 -14.52 101.33 -14.55 99.8 C-14.74 90.48 -14.74 90.48 -15.52 81.2 C-16.33 73.96 -16.19 66.66 -16.19 59.39 C-16.19 56.81 -16.21 54.22 -16.22 51.63 C-16.23 49.97 -16.23 48.31 -16.23 46.64 C-16.24 45.88 -16.24 45.12 -16.25 44.33 C-16.23 39.56 -15.48 35.59 -14 31 C-13.46 27.86 -13.01 24.73 -12.56 21.57 C-12 19 -12 19 -10 17 C-9.62 41.72 -9.62 41.72 -11.55 52.85 C-13.12 63.78 -13.12 63.78 -10 74 C-9.01 74 -8.02 74 -7 74 C-7.16 73.49 -7.32 72.97 -7.48 72.45 C-9.98 60.69 -7.44 48.17 -5.5 36.54 C-4.48 30.37 -3.68 24.32 -3.44 18.06 C-3.17 11.7 -2.03 6.03 0 0 Z \",fill:\"#2B113D\",transform:\"translate(497,318)\"})),_path52||(_path52=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.65 3.01 33.37 10.32 48.56 17.62 C49.64 18.14 50.71 18.65 51.81 19.18 C62.73 24.58 72.53 31.39 82 39 C83.36 40.06 83.36 40.06 84.74 41.14 C85.65 41.86 86.56 42.58 87.5 43.31 C88.34 43.97 89.17 44.62 90.03 45.3 C92 47 92 47 93 49 C93.44 49.43 93.89 49.85 94.34 50.29 C96.44 52.46 97.9 54.82 99.5 57.38 C100.38 58.78 100.38 58.78 101.28 60.21 C102.13 61.59 102.13 61.59 103 63 C103.55 63.85 104.11 64.7 104.68 65.58 C106.6 69.09 106.66 72.04 107 76 C107.66 76 108.32 76 109 76 C109.15 76.68 109.29 77.36 109.44 78.05 C112.26 91.1 115.25 103.88 119.9 116.41 C121.5 120.82 122.22 123.36 121 128 C121.69 130.18 121.69 130.18 122.88 132.25 C125.14 136.9 125.67 140.85 126 146 C126.66 146 127.32 146 128 146 C128 146.66 128 147.32 128 148 C128.66 148.33 129.32 148.66 130 149 C130 244.04 130 339.08 130 437 C129.67 436.01 129.34 435.02 129 434 C128.01 434.33 127.02 434.66 126 435 C124.9 431.71 125.2 430.29 126 427 C125.01 426.34 124.02 425.68 123 425 C123.38 423.06 123.38 423.06 124 421 C124.66 420.67 125.32 420.34 126 420 C125.51 418.51 125.51 418.51 125 417 C124.01 417.99 123.02 418.98 122 420 C121.75 419.26 121.49 418.53 121.23 417.77 C120.89 416.79 120.54 415.82 120.19 414.81 C119.85 413.85 119.51 412.89 119.17 411.89 C118.08 408.98 118.08 408.98 116.43 406.4 C115.05 404.08 114.48 402.38 114 399.75 C113.51 397.89 113.51 397.89 113 396 C112.01 395.67 111.02 395.34 110 395 C109.88 394.3 109.75 393.6 109.62 392.88 C108.96 389.8 108.13 386.93 107 384 C106.34 383.67 105.68 383.34 105 383 C103.79 380.43 102.68 377.88 101.62 375.25 C101.31 374.48 101 373.71 100.68 372.92 C98.85 368.36 97.25 363.79 95.88 359.06 C94 352.66 91.61 346.37 87.49 341.05 C85.78 338.69 84.78 336.4 83.69 333.69 C83.26 332.63 82.83 331.58 82.39 330.49 C81.7 328.76 81.7 328.76 81 327 C80.5 325.74 79.99 324.49 79.48 323.23 C75.59 313.52 75.59 313.52 73.87 309.07 C72.44 305.38 71.03 301.92 68.94 298.56 C66.59 294.74 65.76 290.61 64.81 286.26 C64.54 285.51 64.27 284.77 64 284 C63.01 283.67 62.02 283.34 61 283 C59.65 280.64 58.46 278.33 57.31 275.88 C56.61 274.41 55.9 272.95 55.2 271.49 C54.83 270.74 54.47 269.99 54.1 269.23 C52.72 266.43 51.23 263.7 49.73 260.97 C46.52 255.12 43.77 249.45 42 243 C41.44 241.15 40.88 239.29 40.31 237.44 C39.87 235.96 39.44 234.48 39 233 C39.66 233 40.32 233 41 233 C45.69 239.48 49.44 246.37 52.21 253.87 C54.82 260.91 58.84 267.76 63 274 C63.99 274.33 64.98 274.66 66 275 C65.94 274.31 65.88 273.63 65.82 272.92 C65.69 270.21 65.64 267.69 66 265 C68.62 262.66 70.69 262.1 74 261 C74.96 258.04 74.96 258.04 75.56 254.56 C76.8 248.2 76.8 248.2 79 246 C80.94 246.06 80.94 246.06 83 247 C84.62 249.31 84.62 249.31 86 252 C86.37 252.7 86.74 253.4 87.12 254.12 C88 256 88 256 89 259 C89.61 258.57 90.23 258.13 90.86 257.69 C92.08 256.85 92.08 256.85 93.31 256 C94.11 255.44 94.91 254.89 95.74 254.31 C98 253 98 253 101 253 C101 253.66 101 254.32 101 255 C103.97 255 106.94 255 110 255 C111.2 251.3 111.2 251.3 110.62 248.69 C111.17 244.77 113.6 243.29 116.57 240.84 C118.27 239.08 118.27 239.08 117.83 236.67 C117.24 234.79 116.66 232.9 116.07 231.02 C114.34 225.16 113.25 221.23 116.25 215.69 C116.73 214.9 117.22 214.11 117.71 213.3 C119.63 209.87 119.78 206.88 120 203 C120.66 203 121.32 203 122 203 C122 202.34 122 201.68 122 201 C124 201 124 201 125.62 202.5 C126.31 203.24 126.31 203.24 127 204 C125.51 200.2 123.24 198.39 120 196 C119.9 196.64 119.79 197.28 119.69 197.94 C119.46 198.62 119.23 199.3 119 200 C118.01 200.33 117.02 200.66 116 201 C116.05 199.91 116.09 198.82 116.14 197.7 C116.59 182.43 114.09 168.68 107.86 154.7 C106.89 151.64 107.04 150.03 108 147 C109.19 145.25 109.19 145.25 111 144 C111.99 143.92 112.98 143.84 114 143.75 C117.27 143.27 117.27 143.27 119.12 140.12 C120.75 135.56 118.86 132.2 117.06 127.93 C115.41 123.38 115.19 118.81 115 114 C114.34 114 113.68 114 113 114 C109.12 104.23 105.71 94.59 103.44 84.31 C99.37 66.11 99.37 66.11 89 51 C89 50.34 89 49.68 89 49 C88.01 48.72 88.01 48.72 87 48.44 C84.26 47.12 82.91 46.1 80.75 44.06 C69.18 33.62 54.63 26.35 41 19 C41 18.01 41 17.02 41 16 C40.29 15.88 39.58 15.76 38.85 15.63 C35.88 14.97 33.26 14.01 30.44 12.88 C24.46 10.53 18.44 8.36 12.38 6.25 C11.5 5.94 10.62 5.64 9.72 5.32 C6.48 4.2 3.25 3.08 0 2 C0 1.34 0 0.68 0 0 Z M108 84 C109 87 109 87 109 87 Z M109 87 C109 88.65 109 90.3 109 92 C109.33 92 109.66 92 110 92 C110 90.35 110 88.7 110 87 C109.67 87 109.34 87 109 87 Z M110 92 C111 94 111 94 111 94 Z M110 95 C111 97 111 97 111 97 Z M111 97 C112 100 112 100 112 100 Z M119 123 C120 125 120 125 120 125 Z \",fill:\"#2F163C\",transform:\"translate(1150,617)\"})),_path53||(_path53=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.48 0.36 0.97 0.72 1.47 1.09 C0.48 -0.89 0.48 -0.89 -0.53 -2.91 C1.91 -2.09 1.91 -2.09 4.47 -0.91 C4.96 0.58 4.96 0.58 5.47 2.09 C6.03 2.35 6.58 2.6 7.16 2.87 C10.7 4.75 12.9 7.68 15.47 10.72 C16.25 11.61 16.25 11.61 17.05 12.51 C22.44 18.82 25.87 24.63 26.22 33.09 C26.28 34.23 26.33 35.36 26.39 36.53 C26.42 37.38 26.44 38.22 26.47 39.09 C25.81 39.09 25.15 39.09 24.47 39.09 C24.1 40.05 24.1 40.05 23.72 41.03 C22.47 43.09 22.47 43.09 20.78 43.97 C17.46 44.15 14.64 43.02 11.47 42.09 C9.98 42.59 9.98 42.59 8.47 43.09 C9.46 44.41 10.45 45.73 11.47 47.09 C8 50.06 4.58 52.13 0.47 54.09 C-1.21 55.77 -0.74 57.98 -0.84 60.28 C-1.38 66.67 -3.39 69.95 -7.91 74.47 C-10.53 76.09 -10.53 76.09 -13.47 76.03 C-17.71 76.12 -19.72 78.17 -22.53 81.09 C-24.04 82.82 -25.5 84.57 -26.95 86.35 C-28.58 88.15 -30.28 89.46 -32.22 90.91 C-35.99 93.98 -36.66 97.16 -37.8 101.77 C-39.27 106.46 -42.87 108.67 -46.84 111.22 C-50.41 115.04 -50.1 117.52 -49.94 122.57 C-49.67 125.33 -49.67 125.33 -47.53 128.09 C-44.97 128.82 -44.97 128.82 -42.53 129.09 C-42.53 129.75 -42.53 130.41 -42.53 131.09 C-41.54 131.09 -40.55 131.09 -39.53 131.09 C-39.53 130.1 -39.53 129.11 -39.53 128.09 C-37.22 128.09 -34.91 128.09 -32.53 128.09 C-32.2 128.75 -31.87 129.41 -31.53 130.09 C-29.61 130.64 -29.61 130.64 -27.34 130.97 C-22.54 131.93 -19.05 133.58 -15.53 137.09 C-14.16 150.54 -18.55 159.35 -26.54 169.66 C-29.2 173.12 -31.2 176.18 -32.66 180.34 C-33.65 182.91 -34.15 183.86 -36.51 185.34 C-41.47 187.21 -45.41 187.29 -50.53 186.09 C-50.86 184.11 -51.19 182.13 -51.53 180.09 C-52.4 180.27 -53.26 180.45 -54.16 180.63 C-59.96 181.43 -66.32 180.78 -71.57 178.02 C-74.83 175.48 -76.41 173 -77.53 169.09 C-77.51 166.15 -77.39 163.33 -77.16 160.41 C-76.74 154.37 -76.5 148.4 -76.6 142.35 C-76.62 141.21 -76.63 140.06 -76.65 138.89 C-76.7 136.66 -76.75 134.43 -76.83 132.2 C-76.98 123.76 -75.68 116.23 -69.72 109.91 C-67.21 107.22 -67.21 107.22 -67.28 103.53 C-68.63 99.81 -68.92 99.62 -72.09 97.78 C-74.57 96.24 -75.39 95.63 -76.13 92.77 C-76.32 86.99 -75.3 83.6 -71.53 79.09 C-70.01 77.26 -68.49 75.43 -66.97 73.59 C-66.2 72.7 -65.44 71.8 -64.65 70.88 C-61.82 67.16 -59.77 63.75 -59.09 59.09 C-59.32 55.94 -59.32 55.94 -61.53 53.34 C-64.27 48.89 -64.36 45.2 -63.53 40.09 C-61.57 36.5 -59 34.71 -55.72 32.41 C-50.07 28.32 -45.28 22.54 -43.78 15.66 C-42.53 13.09 -42.53 13.09 -40.05 12.14 C-38.07 11.62 -36.07 11.15 -34.06 10.73 C-31.38 10.29 -31.38 10.29 -29.53 8.09 C-28.73 6.08 -28.07 4.03 -27.41 1.97 C-26.53 0.09 -26.53 0.09 -23.53 -1.91 C-14.86 -4.68 -7.7 -5.33 0 0 Z \",fill:\"#8377A1\",transform:\"translate(805.53125,339.90625)\"})),_path54||(_path54=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 0.38 1.05 0.38 2.12 0.77 C5.82 2.08 9.53 3.28 13.28 4.41 C30.63 9.64 47.15 15.17 63.25 23.54 C65.32 24.6 67.4 25.61 69.49 26.62 C90.57 36.81 90.57 36.81 95.28 44.58 C96.03 47.39 96.03 47.39 96.28 49.58 C97.76 50.07 97.76 50.07 99.28 50.58 C103.45 56.68 105.56 63.08 106.78 70.33 C107.75 75.66 108.63 79.96 112.2 84.14 C115.87 86.67 120 87.19 124.35 87.81 C127.28 88.58 127.28 88.58 129.23 90.47 C130.28 92.58 130.28 92.58 129.28 95.58 C126.31 95.58 123.34 95.58 120.28 95.58 C120.28 94.92 120.28 94.26 120.28 93.58 C119.62 93.58 118.96 93.58 118.28 93.58 C117.95 95.23 117.62 96.88 117.28 98.58 C116.62 98.58 115.96 98.58 115.28 98.58 C115.36 99.4 115.45 100.22 115.53 101.07 C116.17 108.07 116.3 114.61 115.28 121.58 C115.94 121.58 116.6 121.58 117.28 121.58 C118.27 126.53 118.27 126.53 119.28 131.58 C120.27 130.92 121.26 130.26 122.28 129.58 C122.94 130.57 123.6 131.56 124.28 132.58 C123.77 133.96 123.77 133.96 123.25 135.38 C121.28 141.43 123.42 147.73 124.72 153.76 C124.95 155.03 125.19 156.3 125.43 157.61 C126.58 164.04 126.58 164.04 130.06 169.33 C132.15 170.6 132.15 170.6 135.28 171.58 C137.78 170.28 139.07 169.11 140.11 166.48 C140.59 164.9 141.04 163.32 141.47 161.73 C142.28 159.58 142.28 159.58 143.83 158.2 C146.04 155.72 145.76 153.4 145.9 150.14 C146.2 143.83 146.2 143.83 146.89 141.46 C147.42 138.88 146.74 137.27 145.84 134.83 C145.55 134.03 145.27 133.23 144.97 132.4 C144.74 131.8 144.51 131.2 144.28 130.58 C143.95 131.24 143.62 131.9 143.28 132.58 C142.62 132.58 141.96 132.58 141.28 132.58 C139.9 130.95 138.56 129.28 137.28 127.58 C137.61 126.92 137.94 126.26 138.28 125.58 C137.29 125.58 136.3 125.58 135.28 125.58 C135.28 126.24 135.28 126.9 135.28 127.58 C132.64 127.58 130 127.58 127.28 127.58 C127.88 126.54 128.47 125.51 129.09 124.45 C130.41 122.14 131.65 119.83 132.84 117.45 C134.2 114.73 135.63 112.13 137.28 109.58 C137.61 109.58 137.94 109.58 138.28 109.58 C139.27 113.87 140.26 118.16 141.28 122.58 C141.94 121.92 142.6 121.26 143.28 120.58 C150.07 134.21 153.66 146.37 149.28 161.58 C149.94 161.91 150.6 162.24 151.28 162.58 C151.91 166.09 152.12 169.09 151.28 172.58 C148.37 175.67 145.17 177.88 141.28 179.58 C140.29 179.25 139.3 178.92 138.28 178.58 C138.28 177.59 138.28 176.6 138.28 175.58 C137.54 175.78 136.79 175.99 136.03 176.2 C132.8 176.64 131.93 176.4 129.28 174.58 C125.36 171.22 123.56 168.58 122.28 163.58 C121.62 163.91 120.96 164.24 120.28 164.58 C121.18 167.41 122.04 170.12 123.4 172.76 C124.28 174.58 124.28 174.58 124.28 177.58 C125.27 177.91 126.26 178.24 127.28 178.58 C127.28 180.23 127.28 181.88 127.28 183.58 C126.7 183.68 126.12 183.78 125.53 183.89 C123.18 184.44 123.18 184.44 121.4 186.2 C118.39 188.15 116.77 187.22 113.28 186.58 C108.6 186.79 104.04 187.41 99.47 188.39 C96.28 188.58 96.28 188.58 93.65 187.01 C89.45 182.7 86.31 178.69 83.36 173.45 C81.98 171.06 80.46 168.78 78.93 166.49 C69.17 151.84 69.17 151.84 69.28 142.58 C68.95 142.25 68.62 141.92 68.28 141.58 C67.82 139.35 67.38 137.12 66.97 134.89 C65.6 127.42 65.6 127.42 61.28 121.58 C59.09 121.42 57.01 121.59 54.82 121.74 C50.68 121.47 47.71 119.33 44.2 117.24 C40.22 114.97 36.06 113.33 31.81 111.65 C29.28 110.58 29.28 110.58 26.28 108.58 C23.93 108.23 23.93 108.23 21.4 108.14 C17.35 107.79 14.37 107.46 11.28 104.58 C10.97 101.89 10.97 101.89 11.28 99.58 C10.19 99.39 10.19 99.39 9.09 99.2 C6.3 98.58 3.91 97.67 1.28 96.58 C0.27 96.25 -0.74 95.92 -1.78 95.58 C-4.25 94.74 -6.44 93.8 -8.72 92.58 C-8.72 91.92 -8.72 91.26 -8.72 90.58 C-10.37 90.25 -12.02 89.92 -13.72 89.58 C-13.72 88.59 -13.72 87.6 -13.72 86.58 C-12.73 86.58 -11.74 86.58 -10.72 86.58 C-10.72 87.24 -10.72 87.9 -10.72 88.58 C-9.7 88.72 -8.68 88.86 -7.62 89.01 C4.5 90.77 13.73 93.89 24.45 99.62 C28.63 101.81 32.97 103.67 37.28 105.58 C38.16 105.97 39.04 106.36 39.95 106.77 C42.06 107.71 44.17 108.64 46.28 109.58 C46.71 108.65 46.71 108.65 47.15 107.7 C48.28 105.58 48.28 105.58 50.28 103.64 C55.97 97.77 56.4 87.09 56.4 79.26 C56.36 78.38 56.32 77.49 56.28 76.58 C57.27 76.25 58.26 75.92 59.28 75.58 C59.28 76.24 59.28 76.9 59.28 77.58 C59.94 77.58 60.6 77.58 61.28 77.58 C59.31 74.95 57.47 72.73 54.88 70.69 C48.3 65.34 44.05 58.5 40.49 50.91 C38.62 47.32 36.37 44.21 33.28 41.58 C31.62 41.19 29.95 40.86 28.28 40.58 C26.55 39.26 24.99 37.8 23.39 36.33 C20.02 33.53 16.28 31.35 12.54 29.09 C10.28 27.58 10.28 27.58 9.28 25.58 C13.49 23.47 17.64 22.68 22.28 23.58 C24.26 24.67 25.93 25.92 27.7 27.34 C29.75 28.94 31.83 29.72 34.28 30.58 C35.55 31.11 36.82 31.65 38.09 32.2 C39.14 32.65 40.19 33.11 41.28 33.58 C40.62 34.24 39.96 34.9 39.28 35.58 C41.75 35.08 41.75 35.08 44.28 34.58 C44.28 33.92 44.28 33.26 44.28 32.58 C41.31 30.93 38.34 29.28 35.28 27.58 C35.28 26.92 35.28 26.26 35.28 25.58 C33.3 24.92 31.32 24.26 29.28 23.58 C29.28 22.92 29.28 22.26 29.28 21.58 C28.77 21.34 28.26 21.1 27.73 20.85 C23.71 18.76 19.88 16.33 16.03 13.94 C11.89 11.42 7.77 9.38 3.28 7.58 C3.28 6.92 3.28 6.26 3.28 5.58 C2.31 5.31 1.34 5.04 0.34 4.76 C-0.67 4.37 -1.68 3.98 -2.72 3.58 C-3.05 2.59 -3.38 1.6 -3.72 0.58 C-1.72 -0.42 -1.72 -0.42 0 0 Z M19.28 10.58 C22.32 12.91 25.45 15.04 28.65 17.14 C39.63 24.44 50.16 32.1 60.28 40.58 C61.2 41.3 61.2 41.3 62.15 42.04 C64.69 44.03 66.43 45.8 68.22 48.51 C69.98 51.13 71.16 52.43 73.54 54.34 C77.17 57.39 80.15 60.73 83.15 64.39 C87.91 70.06 92.76 75.62 98.28 80.58 C98.61 80.58 98.94 80.58 99.28 80.58 C99.35 76.69 99.27 73.32 98.28 69.58 C98.01 67.99 97.73 66.41 97.47 64.83 C96.45 59.84 94.86 55.94 92.28 51.58 C91.53 50.18 91.53 50.18 90.77 48.76 C85.35 39.55 78.32 34.9 69.28 29.58 C68.38 29.01 67.49 28.45 66.57 27.88 C64.44 26.67 62.63 25.97 60.28 25.33 C54.91 23.65 50.24 20.91 45.39 18.1 C42.26 16.57 39.71 16.05 36.28 15.58 C34.6 14.59 32.94 13.59 31.28 12.58 C27.16 11.18 23.63 10.31 19.28 10.58 Z \",fill:\"#411E4E\",transform:\"translate(1112.722412109375,651.424560546875)\"})),_path55||(_path55=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.59 2.01 1.17 2.03 1.77 2.04 C8.92 2.44 15.34 4.05 22.1 6.27 C26.51 7.63 30.23 8.08 34.85 7.93 C41.31 7.79 46.43 9.39 52.44 11.62 C54.55 12.37 56.66 13.11 58.77 13.85 C59.82 14.22 60.87 14.58 61.94 14.96 C66.44 16.49 70.99 17.79 75.56 19.06 C77.28 19.54 79 20.03 80.71 20.51 C81.57 20.75 82.43 20.99 83.32 21.24 C95.61 24.73 107.84 28.45 119.88 32.75 C121.09 33.17 121.09 33.17 122.33 33.6 C124.25 34.31 126.13 35.15 128 36 C128.33 36.99 128.66 37.98 129 39 C127.68 39.99 126.36 40.98 125 42 C125.16 42.73 125.33 43.45 125.5 44.2 C125.97 46.83 126.1 49.15 126.06 51.81 C126.05 52.71 126.05 53.62 126.04 54.55 C126.02 55.51 126.01 56.46 126 57.44 C125.94 66.02 126.18 74.45 127 83 C121.44 83.33 118.25 81.43 114 78 C112.6 76.04 111.26 74.05 110 72 C107.45 69.65 105.17 68.08 102.06 66.56 C94.83 62.87 89.28 56.86 85 50 C84.13 46.97 84.08 44.13 84 41 C83.17 34.68 81.97 30.03 78 25 C69.47 25.39 58.31 26.31 51.65 32.01 C47.95 36.47 48.97 41.04 49.06 46.62 C49.01 49.34 48.83 51.43 48 54 C48.66 54 49.32 54 50 54 C50.12 57.23 50.19 60.46 50.25 63.69 C50.28 64.6 50.32 65.51 50.35 66.45 C50.41 70.78 50.39 73.32 48.2 77.14 C46 79 46 79 42.56 79.06 C39 78 39 78 36.44 75.88 C34.14 73.73 34.14 73.73 31.19 73.94 C27 75.33 23.64 77.54 20 80 C20.22 81.82 20.22 81.82 20.44 83.67 C21.25 91.02 21.72 98.39 22.25 105.76 C22.33 106.87 22.41 107.99 22.5 109.14 C22.61 110.65 22.61 110.65 22.72 112.19 C22.99 114.85 23.44 117.39 24 120 C24.68 123.85 24.62 126.09 22.39 129.36 C20.97 131.08 19.53 132.78 18.07 134.46 C16.19 136.77 14.96 138.83 13.69 141.5 C9.55 149.35 1.98 154.79 -5.31 159.56 C-9.59 162.43 -11.9 165.36 -14.5 169.76 C-16.14 172.21 -17.97 173.87 -20.19 175.81 C-24.86 180.27 -26.58 185.6 -27 192 C-26.15 194.87 -25.33 195.78 -22.83 197.46 C-21.98 197.9 -21.13 198.35 -20.25 198.81 C-16.02 201.22 -13.25 203.6 -10.3 207.43 C-8.94 209.21 -8.94 209.21 -6.44 210.81 C-1.28 215.44 1.86 223.26 3 230 C2.98 243.64 2.98 243.64 -1 249 C-3.98 251.3 -6.91 252.96 -10.31 254.56 C-14.95 257.11 -17.76 261.39 -20.89 265.54 C-23.9 269.05 -25.82 269.87 -30.38 270.38 C-37.39 269.65 -41.05 265.11 -45.39 260 C-47 258 -47 258 -48.39 255.88 C-50.4 253.53 -52.1 252.93 -55 251.94 C-58.44 250.74 -60.6 249.76 -63 247 C-63.66 246.34 -64.32 245.68 -65 245 C-63.51 244.01 -63.51 244.01 -62 243 C-62 243.66 -62 244.32 -62 245 C-61.01 244.92 -60.02 244.84 -59 244.75 C-52.64 244.78 -47.93 248.01 -43.44 252.25 C-40.75 254.68 -40.07 254.99 -36.25 255.56 C-33.13 255.23 -33.13 255.23 -31.25 253.94 C-29.8 251.83 -29.8 251.83 -28.56 248.5 C-26.94 244.88 -26.42 243.8 -23 242 C-22.32 241.83 -21.65 241.65 -20.95 241.48 C-16.04 240.21 -13.42 238.92 -10.44 234.69 C-8.29 230.96 -6.87 228.33 -8 224 C-10.78 219.73 -14.23 215.91 -19 214 C-21.77 213.69 -24.5 213.5 -27.28 213.41 C-30.63 212.91 -32.37 212.15 -35 210 C-36.48 206.85 -36.48 206.85 -37.62 203.06 C-37.83 202.4 -38.04 201.74 -38.25 201.05 C-39.81 195.95 -41.1 190.8 -42.23 185.59 C-43.56 181.11 -44.97 178.63 -49 176.15 C-52.72 173.49 -53.74 170.78 -55 166.56 C-55.23 165.91 -55.46 165.25 -55.69 164.58 C-56.66 161.53 -57.08 159.37 -56.38 156.23 C-54.84 153.74 -53.39 152.42 -51 150.75 C-50.3 150.25 -49.6 149.75 -48.88 149.23 C-45.17 146.8 -43.1 147.19 -38.72 147.74 C-32.89 148.3 -26.59 148.86 -21 147 C-19.84 144.15 -19.84 144.15 -18.88 140.69 C-16.76 134.17 -13.69 129.42 -9.38 124.05 C-6.91 120.88 -4.75 117.59 -2.62 114.19 C1.12 108.2 5.2 102.52 9.46 96.89 C14.11 90.69 14.04 86.77 13.74 79.23 C14.03 75.61 14.82 73.87 17 71 C17.97 70.38 18.94 69.76 19.94 69.12 C25.17 64.98 25.99 57.27 27 51 C28.02 42.53 28.02 42.53 25.02 34.8 C21.7 31.18 17.79 30.31 13.12 29.25 C11.57 28.86 10.01 28.47 8.45 28.08 C7.7 27.9 6.95 27.72 6.17 27.53 C0.38 26.12 -4.06 24.51 -9 21 C-9.69 20.76 -10.38 20.52 -11.09 20.27 C-13 19 -13 19 -13.9 16.14 C-14.06 15 -14.21 13.86 -14.38 12.69 C-14.55 11.56 -14.72 10.43 -14.9 9.26 C-15 5.86 -14.62 3.97 -13 1 C-9 -1.34 -4.25 -2.13 0 0 Z \",fill:\"#846A89\",transform:\"translate(706,267)\"})),_path56||(_path56=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.81 2.44 0.81 5 2 C6.11 5.34 5.84 6.52 5.06 9.88 C4.26 13.34 3.89 16.44 4 20 C4.96 20.31 4.96 20.31 5.94 20.62 C8 22 8 22 8.56 24.56 C8.78 26.26 8.78 26.26 9 28 C9.91 31.03 10.95 34.02 12 37 C14.35 37.69 14.35 37.69 17 38 C17.99 37.34 18.98 36.68 20 36 C20.33 36.66 20.66 37.32 21 38 C21.33 35.69 21.66 33.38 22 31 C27.75 33.75 27.75 33.75 30 36 C33.12 35.85 35.94 35.54 39 35 C39.98 34.84 40.96 34.67 41.97 34.5 C44.84 33.9 47.35 33.27 50 32 C51.81 28.65 51.81 28.65 52 25 C52.21 24.2 52.41 23.39 52.62 22.56 C52.81 21.79 52.81 21.79 53 21 C54.14 22.18 54.14 22.18 55.31 23.38 C57.91 26.07 57.91 26.07 61 28 C61.56 30.19 61.56 30.19 62 33 C63.36 38.27 65.19 43.15 67.38 48.12 C67.67 48.81 67.96 49.5 68.26 50.21 C70.04 54.31 72.01 57.61 75 61 C77.97 59.02 80.94 57.04 84 55 C89.81 58.05 92.26 62.17 95 68 C96.15 71.74 96.47 74.75 95.06 78.5 C92.31 80.5 90.27 80.4 86.94 80.34 C85 80 85 80 82 78 C81.01 78 80.02 78 79 78 C79.03 78.58 79.07 79.16 79.11 79.76 C79.29 84.95 79.16 88.65 76 93 C69.53 98 69.53 98 66 98 C66 98.66 66 99.32 66 100 C65.29 100.3 64.58 100.61 63.85 100.92 C62.47 101.55 62.47 101.55 61.06 102.19 C59.69 102.8 59.69 102.8 58.29 103.42 C55.83 104.81 55.83 104.81 55.07 107.31 C54.99 110.56 55.69 112.83 56.81 115.88 C57.19 116.92 57.56 117.96 57.94 119.04 C58.29 120.02 58.64 120.99 59 122 C59.71 124.32 60.36 126.65 61 129 C61.66 129 62.32 129 63 129 C66 135.62 66 135.62 66 139 C66.99 139.33 67.98 139.66 69 140 C69.33 142.31 69.66 144.62 70 147 C70.66 147 71.32 147 72 147 C72.33 148.45 72.33 148.45 72.66 149.93 C74.06 154.81 76.68 158.86 79.38 163.12 C80.1 164.3 80.1 164.3 80.84 165.5 C83.35 169.55 85.98 173.31 89 177 C89.56 178.03 90.11 179.06 90.69 180.12 C93.73 185.61 97.91 190.27 102 195 C102.8 195.93 102.8 195.93 103.61 196.88 C111.75 205.62 122.99 214.61 135 216 C135 216.66 135 217.32 135 218 C128.77 222.98 121.82 223 114.14 222.3 C107.68 221.38 101.84 218.8 96 216 C95.24 215.64 94.48 215.27 93.69 214.9 C82.17 209.24 71.92 203.47 67 191 C65.96 189.43 64.87 187.89 63.75 186.38 C58.58 179.12 53.99 172.02 52.42 163.15 C52 160.98 51.37 159.02 50.62 156.94 C47.95 149.16 46.21 141.07 44.3 133.07 C43.54 129.9 42.77 126.73 42 123.56 C41.76 122.56 41.53 121.55 41.28 120.51 C39.93 114.96 38.27 109.9 35.77 104.76 C35 103 35 103 35 101 C30.54 101.5 30.54 101.5 26 102 C25.5 103.49 25.5 103.49 25 105 C24.01 105.5 24.01 105.5 23 106 C22.49 107.85 22.49 107.85 22.25 110.08 C22.14 110.91 22.02 111.74 21.9 112.6 C21.68 114.35 21.45 116.1 21.23 117.86 C20.42 123.65 19.51 127.92 14.81 131.81 C14.21 132.2 13.62 132.6 13 133 C11.81 129.44 11.88 126.62 11.89 122.87 C11.89 122.14 11.89 121.42 11.89 120.68 C11.89 118.29 11.89 115.91 11.9 113.52 C11.9 111.86 11.91 110.21 11.91 108.56 C11.91 104.2 11.92 99.85 11.93 95.49 C11.94 91.05 11.95 86.6 11.95 82.16 C11.96 73.44 11.98 64.72 12 56 C10.59 55.51 9.17 55.03 7.75 54.54 C6.97 54.27 6.18 54 5.37 53.72 C2.24 52.77 -0.76 52.35 -4 52 C-4.7 53.58 -5.39 55.16 -6.06 56.75 C-6.45 57.63 -6.83 58.51 -7.22 59.42 C-8.21 61.9 -8.21 61.9 -7.47 64 C-6.47 68.25 -10.03 72.55 -12.02 76.2 C-13.02 78.04 -14 79.89 -14.98 81.75 C-22.58 95.87 -31.52 108.88 -42.61 120.48 C-44.57 122.55 -46.36 124.64 -48.12 126.88 C-51.41 130.81 -55.65 133.36 -60 136 C-60.66 135.67 -61.32 135.34 -62 135 C-60.68 131.45 -58.59 129.8 -55.66 127.5 C-53.1 125.18 -51.25 122.41 -49.3 119.57 C-48.87 119.05 -48.44 118.54 -48 118 C-47.34 118 -46.68 118 -46 118 C-45.69 117.38 -45.38 116.76 -45.06 116.12 C-44.38 114.75 -43.69 113.38 -43 112 C-42.34 112 -41.68 112 -41 112 C-40.74 111.27 -40.48 110.54 -40.2 109.79 C-38.98 106.96 -37.56 104.85 -35.72 102.4 C-31.92 97.08 -29.15 91.55 -26.44 85.62 C-25.48 83.57 -24.53 81.52 -23.57 79.47 C-23.13 78.51 -22.68 77.55 -22.22 76.55 C-20.85 73.68 -19.31 70.91 -17.75 68.12 C-7.56 47.96 -3.86 22.18 0 0 Z \",fill:\"#28103B\",transform:\"translate(848,420)\"})),_path57||(_path57=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.58 2.23 1.15 2.45 1.75 2.69 C6.21 5.29 8.42 9.22 10 14 C10.26 16.37 10.44 18.75 10.56 21.12 C10.81 26.15 10.81 26.15 12 31 C12.08 32.34 12.11 33.67 12.1 35.01 C12.09 36.15 12.09 36.15 12.09 37.31 C12.08 38.49 12.08 38.49 12.06 39.69 C12.06 40.48 12.05 41.28 12.05 42.1 C12.04 44.07 12.02 46.03 12 48 C11.42 47.87 10.85 47.73 10.25 47.6 C2.29 45.87 -5.61 45.34 -13.72 44.88 C-20.52 44.41 -26.57 43.28 -33 41 C-31 39 -31 39 -28.5 38.77 C-27.53 38.78 -26.56 38.8 -25.56 38.81 C-24.59 38.82 -23.63 38.83 -22.63 38.83 C-20 39 -20 39 -17 40 C-17 39.34 -17 38.68 -17 38 C-21.81 36.67 -26.67 36.66 -31.62 36.48 C-36.08 36.27 -39.79 35.65 -44 34 C-44.23 38.79 -44.23 38.79 -42 43 C-47.65 41.37 -47.65 41.37 -49.5 39.44 C-51.72 37.31 -54.02 37.33 -57 37 C-57.19 37.93 -57.19 37.93 -57.38 38.88 C-58 41 -58 41 -60 43 C-61.99 43.4 -63.99 43.74 -66 44 C-65.81 44.8 -65.63 45.61 -65.44 46.44 C-65.29 47.28 -65.15 48.13 -65 49 C-66.66 50.66 -68.78 50.36 -71.06 50.56 C-71.98 50.65 -72.9 50.73 -73.85 50.82 C-74.56 50.88 -75.27 50.94 -76 51 C-74.35 51.99 -72.7 52.98 -71 54 C-71.33 55.98 -71.66 57.96 -72 60 C-73.49 60.5 -73.49 60.5 -75 61 C-71.7 61.33 -68.4 61.66 -65 62 C-66.24 65.73 -67.84 66.75 -71 69 C-72.49 69.5 -72.49 69.5 -74 70 C-69.54 69.5 -69.54 69.5 -65 69 C-65 70.98 -65 72.96 -65 75 C-61.52 77.14 -59.06 77.53 -55 77 C-52.48 75.84 -50.05 74.55 -47.59 73.25 C-42.39 70.74 -36.78 69.63 -31 70 C-31.33 68.35 -31.66 66.7 -32 65 C-30.91 64.69 -29.81 64.38 -28.69 64.06 C-26.45 63.42 -24.21 62.74 -22 62 C-21.34 57.71 -20.68 53.42 -20 49 C-16.62 48.16 -15.2 47.91 -11.95 48.3 C-10.81 48.44 -10.81 48.44 -9.64 48.57 C-8.46 48.72 -8.46 48.72 -7.25 48.88 C-6.09 49.01 -6.09 49.01 -4.91 49.15 C-3.36 49.34 -1.82 49.53 -0.28 49.72 C1.24 49.91 2.77 50.07 4.29 50.22 C9.79 50.79 9.79 50.79 12 53 C12.04 55.62 11.95 58.09 11.75 60.69 C11.7 61.44 11.64 62.2 11.59 62.98 C11.41 65.32 11.21 67.66 11 70 C10.94 70.7 10.88 71.4 10.81 72.12 C10.06 80.04 9.02 87.07 5 94 C4.58 94.75 4.16 95.49 3.72 96.26 C-4.02 108.89 -15.33 114.7 -29.07 118.95 C-43.98 122.21 -57.99 118.18 -71 111 C-71 110.34 -71 109.68 -71 109 C-72.21 108.63 -72.21 108.63 -73.44 108.25 C-76 107 -76 107 -76.81 104.88 C-76.91 103.95 -76.91 103.95 -77 103 C-77.66 103 -78.32 103 -79 103 C-83 97.59 -83 97.59 -83 95 C-83.99 94.67 -84.98 94.34 -86 94 C-87.03 92 -87.03 92 -87.94 89.44 C-89.15 86.17 -90.42 83.07 -92.06 80 C-99.19 65.95 -99.68 48.68 -95.81 33.56 C-94 28.16 -90.91 23.72 -85.95 20.79 C-83.56 19.82 -82.39 20.15 -80 21 C-80 21.66 -80 22.32 -80 23 C-78.45 24.39 -78.45 24.39 -76 25 C-73.29 23.96 -70.96 22.88 -68.44 21.5 C-67.73 21.13 -67.02 20.75 -66.29 20.37 C-64.85 19.61 -63.42 18.84 -62 18.07 C-60.26 17.14 -58.51 16.25 -56.75 15.37 C-51.51 12.7 -47.49 10 -43.63 5.52 C-34.79 -2.69 -10.6 -4.58 0 0 Z \",fill:\"#634369\",transform:\"translate(672,263)\"})),_path58||(_path58=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.26 0.76 6.86 3.44 9.81 6.5 C11.17 9.22 10.88 11.49 10.81 14.5 C10.81 17 11.56 18.35 12.81 20.5 C13.47 20.83 14.13 21.16 14.81 21.5 C14.67 29.17 13.61 35.84 11.31 43.12 C7.7 54.2 7.7 54.2 8.81 65.5 C9.36 70.17 9.32 73.55 7.06 77.75 C6.32 78.66 5.58 79.57 4.81 80.5 C2.01 83.89 2.01 83.89 -0.25 87.62 C-1.19 89.5 -1.19 89.5 -2.81 90.88 C-4.45 92.53 -4.45 92.53 -4.69 95.44 C-4.03 99.49 -2.38 100.07 0.81 102.5 C2.18 105.17 2.18 105.17 2.81 108.5 C1.85 111.21 0.89 113.34 -0.5 115.81 C-1.05 116.84 -1.05 116.84 -1.61 117.9 C-2.39 119.36 -3.18 120.81 -3.97 122.27 C-5.18 124.49 -6.36 126.73 -7.52 128.97 C-11.18 136.01 -14.9 142.94 -19.19 149.62 C-20.42 151.59 -20.42 151.59 -20.19 154.5 C-20.85 154.83 -21.51 155.16 -22.19 155.5 C-23.17 157.44 -23.17 157.44 -24.06 159.75 C-25.97 164.21 -28.07 167.89 -32 170.88 C-33.46 172.6 -33.46 172.6 -33.56 175.69 C-32.84 179.89 -29.93 181.54 -26.62 183.94 C-24.83 185.15 -23.02 186.34 -21.19 187.5 C-14.79 184.47 -10.51 179.97 -6.19 174.5 C-5.86 175.49 -5.53 176.48 -5.19 177.5 C-6.77 179.98 -6.77 179.98 -9 182.69 C-10.09 184.04 -10.09 184.04 -11.21 185.42 C-11.86 186.11 -12.51 186.79 -13.19 187.5 C-13.85 187.5 -14.51 187.5 -15.19 187.5 C-15.39 188.22 -15.6 188.94 -15.81 189.69 C-17.62 193.39 -19.84 195.14 -23.19 197.5 C-24.85 197.84 -26.52 198.18 -28.19 198.5 C-29.55 200.47 -29.55 200.47 -30.19 202.5 C-34.23 201.89 -37.18 199.69 -40.44 197.38 C-41.01 196.97 -41.59 196.57 -42.18 196.15 C-48.56 191.61 -54.25 187.38 -58.19 180.5 C-60.21 179.36 -60.21 179.36 -62.19 178.5 C-68.95 185.04 -68.95 185.04 -75.19 192.06 C-77.19 194.5 -77.19 194.5 -79.19 195.5 C-81.49 195.69 -83.79 195.82 -86.09 195.93 C-88.38 196.3 -88.38 196.3 -89.47 198.54 C-89.71 199.19 -89.94 199.83 -90.19 200.5 C-89.55 201.16 -88.91 201.82 -88.25 202.5 C-85.6 206.36 -85.5 208.88 -85.19 213.5 C-86.12 213.93 -86.12 213.93 -87.06 214.38 C-89.32 215.44 -89.32 215.44 -91.19 217.5 C-90.86 215.85 -90.53 214.2 -90.19 212.5 C-91.51 212.83 -92.83 213.16 -94.19 213.5 C-94.25 212.6 -94.31 211.69 -94.37 210.76 C-94.45 209.58 -94.54 208.4 -94.62 207.19 C-94.71 206.02 -94.79 204.84 -94.87 203.64 C-95.07 200.47 -95.07 200.47 -96.19 197.5 C-95.86 196.51 -95.53 195.52 -95.19 194.5 C-95.85 194.5 -96.51 194.5 -97.19 194.5 C-96.86 190.54 -96.53 186.58 -96.19 182.5 C-94.6 183.18 -93.01 183.86 -91.38 184.56 C-85.66 186.64 -80.07 187.49 -74.19 185.5 C-73.07 183.65 -73.07 183.65 -72.19 181.5 C-70.91 180.21 -69.6 178.96 -68.25 177.75 C-64.27 173.88 -62.55 170.87 -61.19 165.5 C-61.96 162.43 -61.96 162.43 -64.19 160.5 C-64.9 158.85 -65.56 157.18 -66.19 155.5 C-66.56 154.72 -66.93 153.93 -67.31 153.12 C-68.86 148.48 -69.07 145.26 -66.83 140.78 C-63.49 135.3 -60.12 131.6 -55.19 127.5 C-50.79 121.66 -48.15 115.12 -45.59 108.33 C-43.27 102.36 -40.22 97 -36.92 91.52 C-35.41 88.89 -34.23 86.35 -33.19 83.5 C-36.86 79.37 -40.81 76.15 -46.19 74.5 C-48.48 74.86 -50.11 75.46 -52.19 76.5 C-52.13 74.71 -52.04 72.92 -51.94 71.12 C-51.89 70.13 -51.84 69.13 -51.8 68.1 C-51.5 66.81 -51.5 66.81 -51.19 65.5 C-49.19 64.31 -49.19 64.31 -47.19 63.5 C-46.38 60.94 -46.38 60.94 -46.19 58.5 C-45.2 58.5 -44.21 58.5 -43.19 58.5 C-43.52 59.82 -43.85 61.14 -44.19 62.5 C-42.87 61.18 -41.55 59.86 -40.19 58.5 C-40.85 57.51 -41.51 56.52 -42.19 55.5 C-41.28 54.59 -40.37 53.68 -39.44 52.75 C-35.3 47.96 -33.95 42.47 -32.19 36.5 C-30.52 31.66 -28.57 27.04 -26.19 22.5 C-26.85 22.83 -27.51 23.16 -28.19 23.5 C-26.64 19.36 -24.68 15.56 -22.56 11.69 C-22.24 11.09 -21.91 10.49 -21.58 9.88 C-20.78 8.42 -19.99 6.96 -19.19 5.5 C-18.2 6 -18.2 6 -17.19 6.5 C-17.85 8.15 -18.51 9.8 -19.19 11.5 C-18.59 10.72 -17.99 9.93 -17.38 9.12 C-15.19 6.5 -15.19 6.5 -12.19 4.5 C-11.53 3.84 -10.87 3.18 -10.19 2.5 C-8.19 2.5 -6.19 2.5 -4.19 2.5 C-2.19 0.5 -2.19 0.5 0 0 Z \",fill:\"#0D0F39\",transform:\"translate(1044.1875,818.5)\"})),_path59||(_path59=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.97 1.55 2.94 1.09 3.94 0.62 C6.57 -0.13 7.68 -0.14 10.22 0.96 C15.45 4.35 19.75 8.48 24 13 C24.87 13.83 25.73 14.65 26.62 15.5 C34.48 23.76 37 32.56 37 44 C38.05 43.71 39.1 43.42 40.19 43.12 C46.72 42.22 52.4 46.05 58 49 C58.17 53.92 58.25 57.5 56 62 C57.32 62.33 58.64 62.66 60 63 C58 74.48 54.58 85.67 50.75 96.67 C50.12 98.63 49.57 100.62 49.04 102.61 C48.86 103.25 48.69 103.89 48.52 104.55 C48.02 106.42 47.54 108.29 47.06 110.16 C46.71 111.09 46.36 112.03 46 113 C45.01 113.33 44.02 113.66 43 114 C43 113.34 43 112.68 43 112 C42.34 111.67 41.68 111.34 41 111 C40.69 113 40.37 115 40.06 117 C39.88 118.18 39.69 119.37 39.5 120.59 C39.11 123.26 38.83 125.88 38.62 128.56 C37.91 132.49 36.87 133.39 34 136 C33.21 135.65 32.43 135.3 31.62 134.94 C26.01 132.51 21.1 130.5 15 130 C13.33 129.68 11.66 129.35 10 129 C9.67 127.68 9.34 126.36 9 125 C9.99 125.33 10.98 125.66 12 126 C13.06 118.31 13.1 110.75 13 103 C11.35 102.67 9.7 102.34 8 102 C7.38 102.99 6.76 103.98 6.12 105 C5.42 105.99 4.72 106.98 4 108 C3.34 108 2.68 108 2 108 C2.33 108.99 2.66 109.98 3 111 C2.4 110.99 1.79 110.98 1.17 110.96 C0.37 110.96 -0.43 110.95 -1.25 110.94 C-2.43 110.92 -2.43 110.92 -3.64 110.9 C-5.98 110.91 -5.98 110.91 -8.11 111.57 C-10 112 -10 112 -13 111 C-14.31 113.62 -14.43 115.96 -14.75 118.88 C-14.89 120.05 -15.02 121.22 -15.15 122.42 C-15.29 123.64 -15.42 124.86 -15.56 126.12 C-15.7 127.36 -15.84 128.59 -15.98 129.86 C-16.33 132.9 -16.66 135.95 -17 139 C-16.34 139 -15.68 139 -15 139 C-15 144.94 -15 150.88 -15 157 C-15.66 157 -16.32 157 -17 157 C-15.07 164.99 -12.91 172.73 -9.88 180.38 C-9.62 181.02 -9.37 181.67 -9.11 182.34 C-7.83 185.83 -7.83 185.83 -5 188 C-0.48 188.49 -0.48 188.49 3.61 186.93 C5.64 184.11 6.06 181.25 6.81 177.88 C8.45 171.01 10.9 165.1 16 160 C21.27 160.3 24.25 161.25 28 165 C30.01 168.2 30.19 170.47 29.98 174.2 C29.92 175.18 29.87 176.16 29.82 177.17 C29.76 178.19 29.69 179.2 29.62 180.25 C29.57 181.28 29.51 182.31 29.45 183.38 C29.31 185.92 29.16 188.46 29 191 C28.67 191 28.34 191 28 191 C27.96 189.35 27.96 189.35 27.92 187.68 C27.87 186.22 27.81 184.77 27.75 183.31 C27.74 182.59 27.72 181.87 27.71 181.13 C27.48 176.22 26.65 173.57 23 170 C20.42 168.58 18.82 167.95 15.88 168.12 C13.3 169.33 12.49 170.56 11 173 C10.43 175.42 9.96 177.86 9.56 180.31 C8.55 185.93 7.58 190.47 4 195 C0.71 196.94 -2.21 197.5 -6 197 C-9.31 194.79 -9.91 191.69 -11 188 C-11.45 186.6 -11.91 185.21 -12.38 183.81 C-12.63 183.05 -12.88 182.28 -13.14 181.49 C-14.36 177.95 -15.69 174.46 -17.04 170.97 C-19.96 161.96 -20.34 153.53 -20.31 144.06 C-20.33 142.76 -20.34 141.45 -20.36 140.1 C-20.36 133.34 -19.93 127.61 -17.7 121.22 C-16.59 117.71 -16.52 114.21 -16.31 110.56 C-15.47 100.17 -11.52 91.29 -7 82 C-6.67 81.28 -6.34 80.56 -6 79.82 C-5 78 -5 78 -3.15 77.04 C-0.01 76.98 1.13 78.38 3.44 80.44 C6.65 83.35 6.65 83.35 10.79 84.22 C11.52 84.15 12.25 84.08 13 84 C15.35 79.35 17.68 74.69 20 70.02 C20.82 68.37 21.66 66.72 22.5 65.09 C25.22 59.59 26.93 54.06 28.38 48.12 C28.65 47.04 28.65 47.04 28.92 45.92 C29.82 41.98 30.25 38.89 29 35 C27.92 33.08 27.92 33.08 26 32 C25.03 32.04 24.06 32.08 23.06 32.12 C20 32 20 32 17.88 30 C15.14 25.63 12.97 21.03 10.75 16.38 C8.17 12.87 5.04 9.71 1 8 C-3.71 8.92 -6.45 10.93 -9.88 14.19 C-10.73 14.99 -11.59 15.79 -12.47 16.61 C-13.3 17.4 -14.14 18.19 -15 19 C-16.45 20.3 -17.91 21.59 -19.38 22.88 C-19.98 23.41 -20.59 23.94 -21.21 24.49 C-26.86 29.25 -26.86 29.25 -30.81 30.25 C-31.44 30.42 -32.06 30.59 -32.71 30.77 C-40.43 31.56 -45.23 28.34 -51.31 24.24 C-55.94 21.26 -59.43 19.99 -65 20 C-67.73 21.33 -67.73 21.33 -69.81 23.56 C-70.57 24.3 -71.32 25.03 -72.1 25.79 C-74.28 28.33 -75.57 30.99 -77 34 C-78.66 34.69 -80.32 35.36 -82 36 C-83.28 38.31 -83.28 38.31 -84 41 C-84.35 41.78 -84.7 42.57 -85.06 43.38 C-86.16 46.1 -86.16 46.1 -86.31 49.56 C-87.18 53.92 -88.44 54.47 -92 57 C-104.67 65.27 -119.19 72.28 -134.25 74.5 C-143.19 75.91 -150.19 79.67 -158 84 C-160.66 85.45 -163.33 86.88 -166 88.31 C-166.62 88.65 -167.25 88.98 -167.89 89.33 C-172.19 91.62 -176.32 93.65 -181 95 C-181.99 94.67 -182.98 94.34 -184 94 C-183 93.58 -182 93.16 -180.97 92.72 C-179.67 92.17 -178.37 91.62 -177.06 91.06 C-176.4 90.78 -175.74 90.51 -175.06 90.22 C-171.8 88.99 -171.8 88.99 -169 87 C-169.37 81.01 -171.45 76.52 -174.06 71.19 C-179.97 58.46 -179.97 58.46 -178 52 C-172.17 43.8 -161.34 40.32 -152.25 37.06 C-151.13 36.64 -150 36.22 -148.85 35.78 C-147.77 35.39 -146.69 35 -145.58 34.6 C-144.6 34.24 -143.63 33.89 -142.62 33.52 C-139.6 32.92 -138.52 33.32 -136 35 C-136.14 35.64 -136.28 36.29 -136.43 36.95 C-137.67 44.55 -136.05 49.13 -132.57 55.9 C-131.17 58.67 -130.12 61.3 -129.19 64.25 C-128.39 67.76 -128.39 67.76 -127 69 C-122.41 69.36 -119.37 68.6 -115.25 66.62 C-113.83 65.96 -113.83 65.96 -112.39 65.29 C-109.91 64.1 -109.91 64.1 -108 62 C-108 56.57 -110.8 52.83 -113.57 48.38 C-117.01 42.68 -118.22 36.58 -117 30 C-114.9 27.57 -113.66 26.57 -111 25 C-110.34 24.52 -109.69 24.04 -109.01 23.55 C-101.64 18.5 -93.46 16.69 -84.92 14.54 C-82.82 13.99 -82.82 13.99 -80.21 12.86 C-78 12 -78 12 -74 12 C-74 11.34 -74 10.68 -74 10 C-74.99 9.5 -74.99 9.5 -76 9 C-75.01 9 -74.02 9 -73 9 C-72.67 8.34 -72.34 7.68 -72 7 C-69.93 6.59 -69.93 6.59 -67.44 6.38 C-66.61 6.3 -65.78 6.23 -64.93 6.15 C-63.98 6.07 -63.98 6.07 -63 6 C-62.01 9.47 -62.01 9.47 -61 13 C-59.76 12.63 -59.76 12.63 -58.5 12.25 C-50.58 11.68 -42.96 18.46 -36.56 22.64 C-35.55 23.29 -35.55 23.29 -34.51 23.95 C-33.91 24.35 -33.3 24.74 -32.68 25.15 C-30.87 26.23 -30.87 26.23 -28 26 C-29 25.38 -29 25.38 -30.02 24.75 C-36.9 20.44 -43.49 15.85 -50 11 C-49.48 8.24 -48.89 5.67 -48 3 C-47.77 3.6 -47.55 4.2 -47.31 4.81 C-45.63 7.62 -43.84 8.36 -41 10 C-39.84 10.96 -38.69 11.94 -37.56 12.94 C-31.95 18.23 -31.95 18.23 -24.75 19.96 C-19.96 18.73 -17.49 16.52 -13.94 13.19 C-12.76 12.12 -11.58 11.05 -10.4 9.98 C-9.84 9.47 -9.27 8.96 -8.69 8.43 C-7.07 7.06 -5.43 5.93 -3.63 4.8 C-0.73 3.21 -0.73 3.21 0 0 Z \",fill:\"#0B123F\",transform:\"translate(927,764)\"})),_path60||(_path60=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.42 1.9 5.26 4.52 7.49 7.64 C12.83 14.78 18.89 20.91 25.26 27.13 C27.66 29.48 29.95 31.87 32.12 34.45 C40.06 43.81 49.85 55.32 60.62 61.45 C63.3 61.71 63.3 61.71 65.62 61.45 C64.83 60.69 64.05 59.92 63.24 59.14 C59.73 54.96 58.76 49.83 58.62 44.45 C59.28 43.46 59.94 42.47 60.62 41.45 C66.59 41.75 70.35 44.52 74.62 48.45 C75.35 49.37 76.09 50.29 76.84 51.24 C80.03 55.16 83.91 58.05 87.93 61.07 C88.65 61.63 89.37 62.19 90.12 62.77 C96.5 67.63 102.91 71.14 110.62 73.45 C110.62 74.11 110.62 74.77 110.62 75.45 C111.46 75.55 112.31 75.66 113.18 75.76 C115.91 76.31 117.87 76.9 120.37 78.01 C123.33 79.58 123.33 79.58 125.62 79.45 C125.95 78.46 126.28 77.47 126.62 76.45 C129.84 73.35 133.37 72.57 137.62 71.45 C137.95 71.12 138.28 70.79 138.62 70.45 C138.59 68.84 138.59 68.84 138.55 67.2 C138.61 63.65 139.09 61.6 140.62 58.45 C140.15 58.03 139.68 57.6 139.19 57.17 C137.62 55.45 137.62 55.45 136.43 51.95 C134.71 46.98 131.69 43.16 128.54 39 C127.07 37.05 125.72 35.13 124.43 33.07 C122.43 30.18 120.13 27.9 117.62 25.45 C115.62 22.45 115.62 22.45 115.62 19.45 C121.47 19.9 125.7 22.49 130.62 25.45 C130.62 26.44 130.62 27.43 130.62 28.45 C131.79 28.91 131.79 28.91 132.99 29.39 C137.47 31.2 137.47 31.2 139.05 33.89 C140.51 36.68 140.51 36.68 143.62 38.45 C143.62 39.44 143.62 40.43 143.62 41.45 C144.34 41.72 145.06 41.99 145.8 42.27 C148.57 43.43 151.09 44.74 153.68 46.26 C154.93 46.98 154.93 46.98 156.21 47.72 C158.92 49.67 160.58 51.82 162.62 54.45 C166.83 58.43 170.8 61.87 176.37 63.64 C181.19 63.36 184.07 62.14 187.37 58.54 C188.57 57.11 189.76 55.69 190.94 54.26 C192.94 52.1 194.76 51.14 197.62 50.45 C197.62 50.12 197.62 49.79 197.62 49.45 C198.59 49.18 199.56 48.91 200.55 48.64 C202.07 48.05 202.07 48.05 203.62 47.45 C204.72 44.15 204.73 41.72 204.71 38.25 C204.71 37.04 204.71 35.83 204.71 34.59 C204.7 33.33 204.69 32.06 204.68 30.76 C204.67 28.85 204.67 28.85 204.67 26.9 C204.65 23.75 204.64 20.6 204.62 17.45 C204.95 17.45 205.28 17.45 205.62 17.45 C206.2 21.59 206.77 25.73 207.33 29.87 C207.52 31.27 207.71 32.67 207.91 34.07 C209.3 43.94 209.88 53.48 209.62 63.45 C206.37 64.78 203.31 65.82 199.87 66.51 C196.96 66.93 196.96 66.93 194.62 68.45 C194.38 70.63 194.2 72.82 194.05 75.01 C193.97 76.21 193.89 77.41 193.8 78.64 C193.74 79.57 193.68 80.49 193.62 81.45 C192.96 81.45 192.3 81.45 191.62 81.45 C191.37 84.37 191.37 84.37 191.62 87.45 C192.61 88.11 193.6 88.77 194.62 89.45 C197.72 96.68 199.15 103.63 198.62 111.45 C197.63 111.45 196.64 111.45 195.62 111.45 C195.29 112.11 194.96 112.77 194.62 113.45 C191.12 109.95 191.12 109.95 187.62 106.45 C180.7 104.22 172.81 103.43 165.62 104.45 C162.64 106.34 162.64 106.34 160.62 109.45 C160.07 110 159.52 110.54 158.95 111.11 C154.02 116.07 151.95 121.15 149.86 127.79 C148.62 130.45 148.62 130.45 146.47 131.33 C145.86 131.37 145.25 131.41 144.62 131.45 C144.19 140.2 144.49 148.22 146.55 156.76 C146.74 157.52 146.92 158.28 147.11 159.06 C147.38 160.17 147.38 160.17 147.65 161.3 C149.58 169.36 151.11 177.03 146.62 184.45 C144.43 187.27 142.1 189.89 139.62 192.45 C137.97 192.12 136.32 191.79 134.62 191.45 C134.99 188.2 135.32 186.75 137.66 184.39 C140.5 180.12 139.98 176.62 139.62 171.64 C139.53 170.24 139.53 170.24 139.44 168.81 C138.82 160.34 136.96 152.6 134.62 144.45 C134.02 142.04 133.43 139.62 132.87 137.2 C132.62 136.18 132.38 135.17 132.13 134.12 C131.62 131.45 131.62 131.45 131.62 127.45 C128.06 133.89 128.42 139.36 128.87 146.57 C128.92 147.72 128.98 148.86 129.03 150.03 C129.3 155.54 129.65 161.04 130.09 166.54 C130.19 167.95 130.19 167.95 130.3 169.38 C130.42 171.12 130.57 172.86 130.75 174.6 C131.29 182.09 128.2 186.2 123.68 191.89 C120.97 193.94 118.99 194.24 115.62 194.45 C112.74 194.01 112.74 194.01 110.62 193.45 C111.71 190.17 112.44 189.53 115.05 187.45 C119.04 184.26 120.93 181.57 121.62 176.45 C121.58 168.86 120.42 161.69 118.34 154.4 C116.45 146.68 116.49 139.1 116.55 131.2 C116.56 130.12 116.56 129.05 116.57 127.94 C116.58 125.95 116.59 123.97 116.6 121.98 C116.61 119.8 116.62 117.63 116.62 115.45 C117.61 114.13 118.6 112.81 119.62 111.45 C123.25 112.11 126.88 112.77 130.62 113.45 C129.15 110.52 127.25 110.42 124.19 109.36 C123.08 108.96 121.98 108.57 120.84 108.17 C119.09 107.57 119.09 107.57 117.3 106.95 C115.02 106.15 112.73 105.35 110.44 104.54 C109.42 104.19 108.4 103.84 107.35 103.47 C101.38 101.24 101.38 101.24 99.14 98.93 C97.28 97.12 95.71 96.59 93.24 95.82 C92.49 95.58 91.74 95.34 90.97 95.1 C88.65 94.38 88.65 94.38 86.28 94.27 C82.09 92.98 79.52 90.03 76.43 87.01 C75.77 86.38 75.11 85.75 74.43 85.11 C69.73 80.6 65.11 76.01 60.57 71.34 C58.56 69.28 58.56 69.28 55.62 67.45 C55.62 66.79 55.62 66.13 55.62 65.45 C54.63 65.12 53.64 64.79 52.62 64.45 C50.97 62.78 50.97 62.78 49.24 60.7 C45.66 56.49 42.06 52.61 37.74 49.14 C33.23 45.44 28.48 41.04 26.62 35.45 C25.96 35.45 25.3 35.45 24.62 35.45 C23.24 34.05 23.24 34.05 21.62 32.07 C17.95 27.75 14.01 23.8 9.95 19.84 C7.66 17.49 5.65 15.02 3.62 12.45 C2.63 11.44 1.63 10.44 0.62 9.45 C-0.46 8.27 -1.52 7.09 -2.57 5.89 C-3.1 5.29 -3.63 4.69 -4.18 4.07 C-5.38 2.45 -5.38 2.45 -5.38 0.45 C-2.38 -0.55 -2.38 -0.55 0 0 Z \",fill:\"#27103A\",transform:\"translate(714.3828125,192.55078125)\"})),_path61||(_path61=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89 0.02 1.78 0.04 2.7 0.07 C8.7 0.66 11.26 2.89 15.12 7.5 C19 12.6 19 12.6 19 15 C19.62 15.08 20.24 15.17 20.88 15.25 C23 16 23 16 23.94 17.75 C24.29 18.49 24.64 19.24 25 20 C26.63 21.71 28.29 23.38 30 25 C31 26 31 26 31.11 28.13 C31.11 29.51 31.11 29.51 31.1 30.91 C31.09 32.39 31.09 32.39 31.09 33.91 C31.08 35.47 31.08 35.47 31.06 37.06 C31.06 38.11 31.05 39.15 31.05 40.23 C31.04 42.82 31.02 45.41 31 48 C31.66 48 32.32 48 33 48 C33.33 48.66 33.66 49.32 34 50 C40.75 50.14 40.75 50.14 47.44 49.38 C50 49 50 49 53 51 C53.55 53.76 53.93 56.34 54.19 59.12 C54.27 59.88 54.35 60.63 54.44 61.41 C54.64 63.27 54.82 65.14 55 67 C45.75 70.87 39.45 69.78 30 67 C29.64 68.76 29.64 68.76 29.27 70.55 C26.61 83.14 22.95 94.32 17.37 105.96 C15.93 109 15.93 109 14.98 112.32 C14.65 113.2 14.33 114.09 14 115 C12.35 115.7 10.68 116.37 9 117 C7.48 119.8 6.86 122.54 6.06 125.62 C5 129 5 129 3.42 130.46 C1.81 131.88 1.81 131.88 1.84 133.9 C1.94 134.6 2.04 135.29 2.14 136.01 C2.24 136.77 2.34 137.53 2.45 138.31 C2.57 139.09 2.69 139.88 2.81 140.69 C2.92 141.48 3.03 142.28 3.14 143.1 C3.41 145.07 3.7 147.04 4 149 C3.01 149 2.02 149 1 149 C-0.72 151.44 -0.72 151.44 -2 154 C-4.5 152.69 -4.5 152.69 -7 151 C-7 150.01 -7 149.02 -7 148 C-7.66 148 -8.32 148 -9 148 C-9.66 146.35 -10.32 144.7 -11 143 C-14.56 143 -15.28 143.89 -18 146 C-18.66 146 -19.32 146 -20 146 C-20.66 148.31 -21.32 150.62 -22 153 C-22.66 153 -23.32 153 -24 153 C-24.12 154.28 -24.25 155.56 -24.38 156.88 C-24.75 160.75 -24.75 160.75 -27 163 C-30.3 162.67 -31.62 162.38 -34 160 C-34.61 158.02 -35.15 156.02 -35.62 154 C-35.89 152.93 -36.15 151.86 -36.41 150.75 C-37 148 -37 148 -37 146 C-38.32 145.34 -39.64 144.68 -41 144 C-40.46 138.31 -39.86 132.65 -39 127 C-39.99 126.34 -40.98 125.68 -42 125 C-42.5 125.99 -42.5 125.99 -43 127 C-44.09 120.67 -44.03 116.64 -40.81 110.88 C-39.79 109.03 -39.79 109.03 -40.48 107.13 C-41.37 103.49 -40.62 100.34 -39 97 C-35.45 94.42 -32.41 93.15 -28.31 91.62 C-24.33 89.67 -23.03 87.91 -21 84 C-20.22 81.27 -20.22 81.27 -20 79 C-21.32 78.67 -22.64 78.34 -24 78 C-24.17 78.64 -24.34 79.28 -24.52 79.93 C-24.76 80.76 -25 81.59 -25.25 82.44 C-25.6 83.67 -25.6 83.67 -25.95 84.93 C-27 87 -27 87 -28.92 87.91 C-31 88 -31 88 -34 86 C-33.6 85.01 -33.6 85.01 -33.19 84 C-32.8 83.01 -32.4 82.02 -32 81 C-31.42 79.89 -30.85 78.77 -30.25 77.62 C-27.16 69.33 -30.66 59.31 -32.69 51.06 C-34.48 43.24 -33.85 35.9 -33 28 C-32.01 27.67 -31.02 27.34 -30 27 C-28.88 24.38 -28.88 24.38 -27.94 21.19 C-22.96 7.39 -14.98 -0.75 0 0 Z \",fill:\"#624268\",transform:\"translate(892,296)\"})),_path62||(_path62=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.5 2.89 2.5 2.89 1.99 4.81 C0.78 10.29 0.88 15.43 1.19 21 C1.24 22 1.29 23.01 1.34 24.04 C2.29 45.64 2.29 45.64 12.03 63.91 C14.58 66.61 15.12 69 16.06 72.56 C17.37 78 17.37 78 21 82 C23.5 82.58 23.5 82.58 26 82 C27.98 79.94 29.08 77.85 30.38 75.31 C32 73 32 73 34.5 72 C37 72 37 72 38.69 73.06 C41.79 77.64 42.54 83.29 43.56 88.62 C44.46 93.44 44.46 93.44 45.58 98.2 C46.35 101.51 46.16 104.61 46 108 C44 110 44 110 40.3 110.09 C38.02 110.03 35.75 109.94 33.47 109.83 C28.48 109.71 25.41 110.39 21 113 C16.49 114.34 11.67 114.33 7 114 C5.01 112.01 5.69 108.05 5.57 105.35 C5.24 102.82 5.24 102.82 2.96 101.68 C2.31 101.46 1.67 101.23 1 101 C-0.3 102.41 -1.59 103.83 -2.88 105.25 C-3.95 106.43 -3.95 106.43 -5.05 107.64 C-8.5 111.83 -9.19 114.81 -9.69 120.19 C-10.69 127.18 -13.18 130.99 -18 136 C-18.5 136.58 -19.01 137.16 -19.52 137.75 C-24.65 143.36 -31.06 147.48 -37.27 151.79 C-44.52 156.84 -51.51 162.13 -58.3 167.78 C-60.91 169.93 -63.57 171.99 -66.25 174.06 C-69.43 176.58 -72.06 179.11 -74.62 182.25 C-77.94 186.21 -81.22 188.17 -86 190 C-86.67 190.26 -87.33 190.53 -88.02 190.8 C-93.8 192.9 -99.72 193.99 -105.77 195.06 C-110.5 196.44 -113.12 198.67 -115.81 202.75 C-116.2 203.49 -116.6 204.24 -117 205 C-124.26 204.29 -130.41 198.38 -135 193 C-139.46 184.94 -139.48 176.9 -138 168 C-138.63 167.66 -139.25 167.32 -139.9 166.97 C-146.56 163.02 -146.56 163.02 -148.5 158.5 C-149.27 153.53 -149.36 148.43 -149.65 143.41 C-150.04 139.63 -150.93 136.47 -152.38 132.96 C-153.21 130.32 -153.42 128.78 -153 126 C-151.5 123.29 -149.66 120.86 -147.81 118.38 C-143.37 112.2 -139.74 106.14 -137 99 C-136.34 99 -135.68 99 -135 99 C-134.77 98.36 -134.55 97.72 -134.31 97.06 C-127.08 80.19 -127.08 80.19 -119.27 76.82 C-117.2 76.14 -115.12 75.5 -113.02 74.9 C-109.55 73.87 -106.41 72.46 -103.14 70.91 C-100.95 69.98 -98.81 69.45 -96.5 68.88 C-91.31 67.24 -88.53 63.68 -85.14 59.57 C-81.17 54.8 -77.21 51.26 -71.88 48.06 C-71.03 47.55 -71.03 47.55 -70.16 47.03 C-66.54 44.85 -62.86 42.84 -59.12 40.88 C-51.88 36.93 -47.59 33.11 -43.12 26.12 C-37.6 17.59 -30.59 12.25 -22.31 6.56 C-21.68 6.12 -21.05 5.69 -20.4 5.24 C-14.32 1.19 -9.24 1 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z M-18.33 14.05 C-28.92 25.14 -28.92 25.14 -34 39 C-33.83 40.63 -33.65 42.25 -33.44 43.88 C-33.44 47.08 -33.61 48.51 -35.62 51.04 C-38.31 53.24 -41.08 55.12 -44 57 C-45.45 57.97 -46.9 58.94 -48.34 59.91 C-51.33 61.88 -54.32 63.85 -57.34 65.78 C-57.97 66.18 -58.61 66.59 -59.26 67 C-62.79 69.02 -65.78 69.08 -69.75 69.19 C-75.05 69.6 -77.89 70.58 -81.63 74.32 C-83.19 76.16 -83.19 76.16 -84.88 79.06 C-87.39 82.54 -89.73 83.79 -93.49 85.71 C-96.99 87.51 -100.3 89.6 -103.64 91.67 C-106 93 -106 93 -108.43 93.93 C-111.57 95.24 -114.14 97 -116.94 98.94 C-120 101.05 -122.9 102.95 -126.25 104.57 C-129.25 105.85 -129.25 105.85 -131 109 C-130.76 112.04 -130.15 113.78 -128.44 116.31 C-126.48 119.97 -126.28 122.99 -127 127 C-129.17 132.1 -132.05 136.81 -134.82 141.6 C-138.09 147.4 -138.09 147.4 -139.12 153.88 C-137.12 159.46 -133.64 163.36 -129 167 C-125.77 167.94 -123.26 167.6 -120 167 C-115 166.3 -110.1 165.88 -105.05 165.71 C-78.05 164.79 -52.8 157.32 -31 141 C-30 140.36 -30 140.36 -28.98 139.7 C-24.39 136.73 -22.48 133.87 -20 129 C-19.46 128.38 -18.93 127.76 -18.38 127.12 C-16.59 124.36 -16.91 122.85 -17.25 119.62 C-17.4 114.51 -17.4 114.51 -15.66 112.3 C-14.44 111.37 -13.2 110.46 -11.94 109.57 C-1.61 101.23 0.59 84.49 2.31 72.25 C2.49 71.08 2.67 69.92 2.86 68.71 C4.43 57.91 3.31 50.9 -1.25 41 C-4.77 33.1 -7.72 25.26 -10.12 16.96 C-10.88 14.1 -10.88 14.1 -12 12 C-16.02 11.56 -16.02 11.56 -18.33 14.05 Z \",fill:\"#836988\",transform:\"translate(838,568)\"})),_path63||(_path63=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 0.02 2.27 0.04 3.44 0.06 C3.44 0.72 3.44 1.38 3.44 2.06 C4.65 2.33 5.87 2.6 7.12 2.88 C12.23 4.01 17.33 5.19 22.42 6.38 C24.34 6.81 26.26 7.22 28.18 7.59 C30.53 8.08 32.35 8.9 34.44 10.06 C34.44 10.72 34.44 11.38 34.44 12.06 C35.31 12.18 36.18 12.3 37.08 12.42 C40.4 13.06 43.09 14.02 46.19 15.38 C49.94 16.99 53.69 18.58 57.5 20.06 C66.12 23.5 74.4 27.4 82.44 32.06 C82.44 32.72 82.44 33.38 82.44 34.06 C75.98 32 69.7 29.64 63.44 27.06 C63.44 26.4 63.44 25.74 63.44 25.06 C62.08 24.85 62.08 24.85 60.69 24.62 C56.96 23.98 54.19 23.5 50.9 21.6 C46.59 19.69 42.72 19.24 38.06 18.81 C37.25 18.72 36.44 18.63 35.6 18.54 C28.61 17.84 22.31 18.56 15.44 20.06 C15.17 20.97 14.9 21.88 14.62 22.81 C13.44 26.06 13.44 26.06 11.69 28.06 C11.07 29.05 11.07 29.05 10.44 30.06 C11.15 33.28 11.15 33.28 12.44 36.06 C9.78 38.49 7.33 39.46 3.94 40.44 C-0.23 41.72 -2.21 43.27 -4.56 47.06 C-4.56 46.4 -4.56 45.74 -4.56 45.06 C-5.22 45.06 -5.88 45.06 -6.56 45.06 C-6.81 45.66 -7.06 46.26 -7.31 46.88 C-9.34 50.42 -11.74 51.79 -15.56 53.06 C-12.52 58.17 -12.52 58.17 -7.56 61.06 C-6.31 61.6 -5.06 62.14 -3.81 62.69 C-2.74 63.14 -1.67 63.59 -0.56 64.06 C-0.23 62.08 0.1 60.1 0.44 58.06 C1.8 60.1 3.15 62.14 4.5 64.19 C6.16 66.85 6.16 66.85 7.44 68.06 C8.49 68.14 9.55 68.23 10.64 68.31 C15.24 69.22 16.9 70.79 20.19 74.06 C23.84 77.82 23.84 77.82 28.44 80.06 C28.44 81.05 28.44 82.04 28.44 83.06 C29.1 83.06 29.76 83.06 30.44 83.06 C30.68 83.85 30.93 84.63 31.19 85.44 C32.14 88.15 32.14 88.15 34.19 88.88 C37.36 90.55 39.3 92.91 41.69 95.56 C42.15 96.06 42.61 96.56 43.08 97.07 C46.44 100.8 46.44 100.8 46.44 103.06 C47.1 103.06 47.76 103.06 48.44 103.06 C55.03 109.14 59.59 116.28 64.28 123.82 C68.8 131.08 68.8 131.08 75.56 136.06 C78.21 137.47 78.94 139.49 80.44 142.06 C81.3 142.93 82.17 143.79 83.06 144.69 C85.44 147.06 85.44 147.06 86.44 150.06 C87.03 150.04 87.62 150.02 88.23 149.99 C89.02 149.97 89.81 149.96 90.62 149.94 C91.4 149.91 92.18 149.89 92.98 149.87 C95.97 150.1 97.82 150.57 100.44 152.06 C102.43 154.96 102.43 154.96 104.31 158.44 C107.36 163.73 109.54 167.03 115.44 169.06 C120.11 169.48 120.11 169.48 124.44 168.06 C126.21 168.15 127.98 168.25 129.75 168.38 C132.72 168.49 132.72 168.49 135.44 168.06 C137.75 165.47 137.75 165.47 138.93 163.53 C142.3 160.25 147.96 160.57 152.44 160.06 C153.78 159.76 155.11 159.43 156.44 159.06 C156.62 157.86 156.62 157.86 156.81 156.62 C157.02 155.78 157.23 154.93 157.44 154.06 C158.1 153.73 158.76 153.4 159.44 153.06 C162.8 143.15 159.27 132.78 155.38 123.56 C154.29 120.68 153.71 117.91 153.19 114.88 C153 113.83 152.81 112.78 152.61 111.71 C152.55 110.83 152.5 109.96 152.44 109.06 C153.1 108.4 153.76 107.74 154.44 107.06 C164.15 128.76 165.9 148.62 166.42 172.12 C166.45 173.36 166.48 174.6 166.51 175.88 C166.37 182.09 166.37 182.09 163.94 184.62 C161.57 185.98 159.73 186.55 157.12 187.25 C152.25 188.74 150.1 191.36 146.98 195.25 C144.97 197.61 143.5 198.53 140.44 199.06 C134.12 198.8 131.15 196.78 126.69 192.69 C125.84 191.94 125.84 191.94 124.98 191.19 C117.85 184.88 117.85 184.88 116.44 182.06 C114.78 181.38 113.11 180.72 111.44 180.06 C108.98 178.85 106.77 177.54 104.44 176.06 C104.11 175.07 103.78 174.08 103.44 173.06 C102.59 172.4 101.75 171.74 100.88 171.06 C99.67 170.07 99.67 170.07 98.44 169.06 C98.44 168.07 98.44 167.08 98.44 166.06 C97.65 165.75 96.87 165.44 96.06 165.12 C93.44 164.06 93.44 164.06 91.44 163.06 C91.11 162.07 90.78 161.08 90.44 160.06 C88.26 158.63 88.26 158.63 85.62 157.44 C84.75 157.01 83.88 156.59 82.98 156.15 C80.79 155.21 78.76 154.55 76.44 154.06 C78.8 159.38 81.19 163.01 85.44 167.06 C98.44 182.02 98.44 182.02 98.44 190.06 C99.43 190.39 100.42 190.72 101.44 191.06 C102.44 194.06 102.44 194.06 101.5 196.38 C100.23 199.07 100.23 199.07 100.56 202.19 C100.44 205.06 100.44 205.06 98.81 206.81 C96.44 208.06 96.44 208.06 93.56 208.94 C89.66 210.34 87.5 212.29 84.44 215.06 C80.15 213.41 75.86 211.76 71.44 210.06 C71.44 209.4 71.44 208.74 71.44 208.06 C70.14 207.86 68.84 207.65 67.5 207.44 C61.86 206.15 58.01 203.53 53.44 200.06 C52.62 199.46 52.62 199.46 51.79 198.84 C45.2 193.92 39.17 189.13 33.95 182.72 C31.44 179.96 28.83 178.6 25.44 177.06 C24.12 177.06 22.8 177.06 21.44 177.06 C20.44 180.06 20.43 181.24 20.88 184.25 C21.06 185.51 21.25 186.77 21.44 188.06 C17.06 184.17 14.9 180.32 12.44 175.06 C10.03 170.32 7.25 166.78 3.44 163.06 C3.11 162.07 2.78 161.08 2.44 160.06 C1.98 159.61 1.52 159.16 1.05 158.69 C-0.95 156.67 -2.03 154.59 -3.31 152.06 C-3.76 151.2 -4.21 150.33 -4.67 149.44 C-5.56 147.06 -5.56 147.06 -4.56 144.06 C-1.51 142.99 0.55 142.66 3.55 144.02 C6.61 146.05 8.96 147.71 10.21 151.26 C10.49 152.8 10.75 154.35 10.98 155.9 C12 160.74 15.16 163.21 19.07 165.81 C20.97 166.99 22.88 168.14 24.82 169.25 C27.66 171.22 29.35 173.33 31.44 176.06 C34.65 178.2 35.83 178.35 39.56 178.56 C43.18 178.81 46.35 179.26 49.81 180.31 C56.36 181.88 63.63 180.11 69.5 176.95 C72.97 174.29 74.95 171.12 76.44 167.06 C76.69 163.81 76.69 163.81 76.44 161.06 C75.84 160.82 75.23 160.58 74.61 160.32 C72.02 158.82 71.15 157.43 69.62 154.88 C67.71 151.86 65.86 149.32 63.25 146.88 C54.69 138.7 43.88 126.45 40.56 115.05 C39.18 111.38 37.45 109.8 34.5 107.25 C33.51 106.39 32.53 105.53 31.51 104.65 C30.49 103.78 29.46 102.92 28.44 102.06 C27.5 101.27 26.55 100.48 25.58 99.66 C16.51 91.63 16.51 91.63 6.44 85.06 C6.44 84.4 6.44 83.74 6.44 83.06 C4.79 82.4 3.14 81.74 1.44 81.06 C1.44 80.4 1.44 79.74 1.44 79.06 C0.78 79.06 0.12 79.06 -0.56 79.06 C-2 77.75 -2 77.75 -3.56 76.06 C-4.08 75.65 -4.59 75.24 -5.12 74.81 C-6.56 73.06 -6.56 73.06 -7.06 69.94 C-8.56 63.89 -14.87 60.62 -19.56 57.06 C-20.8 56.01 -22.03 54.95 -23.25 53.88 C-25.65 51.79 -28.13 49.88 -30.69 48 C-33.96 45.58 -36.78 43.02 -39.56 40.06 C-39.23 39.4 -38.9 38.74 -38.56 38.06 C-38.56 37.4 -38.56 36.74 -38.56 36.06 C-40.81 34.11 -42.9 32.39 -45.56 31.06 C-47.25 28.19 -47.25 28.19 -48.56 25.06 C-47.56 22.06 -47.56 22.06 -45.62 20.5 C-36.42 16.18 -26.66 16.19 -16.98 18.62 C-12.54 19.43 -8.06 19.21 -3.56 19.06 C-2.42 14.39 -3.19 11.67 -4.56 7.06 C-4.75 3.69 -4.75 3.69 -4.56 1.06 C-3.56 0.06 -3.56 0.06 0 0 Z \",fill:\"#391948\",transform:\"translate(753.5625,57.9375)\"})),_path64||(_path64=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C23.93 1.64 23.93 1.64 34 7 C30.43 8.19 28.49 7.73 24.81 7.06 C23.73 6.87 22.64 6.67 21.52 6.47 C20.69 6.32 19.86 6.16 19 6 C18.9 6.58 18.79 7.17 18.68 7.77 C17.9 10.34 16.82 11.73 15.06 13.75 C14.54 14.36 14.01 14.98 13.47 15.61 C12 17 12 17 10 17 C8.72 20.85 8.42 22.92 9 27 C10.72 29.41 10.72 29.41 12.88 31.81 C16.54 36.06 17.87 39 18.57 44.51 C19.05 47.26 19.99 49.36 21.19 51.88 C23.31 56.85 23.08 60.84 22.36 66.14 C21.9 69.03 21.9 69.03 22.26 72.08 C22 75 22 75 19.85 77.34 C18.93 78.06 18.01 78.77 17.06 79.5 C13.08 82.57 13.08 82.57 11.06 87.04 C11 90.13 11.2 91.37 12.94 93.88 C13.32 94.47 13.7 95.07 14.09 95.68 C16.57 97.39 18.7 97.59 21.67 97.46 C26.44 96.51 30.43 93.78 34.56 91.31 C43.25 86.36 51.28 82.5 61 80 C61.73 79.81 62.45 79.62 63.2 79.42 C82.54 74.45 82.54 74.45 90 76 C92.75 78 92.75 78 95 81 C96.2 82.32 97.41 83.63 98.62 84.94 C103.45 90.26 105.26 95.12 105.88 102.25 C106.48 108.23 108.09 112.68 111 117.92 C112 120 112 120 112.19 123.31 C109.98 128.31 106.87 130.2 102.02 132.28 C98.38 133.63 94.71 134.85 91 136 C89.8 136.39 88.59 136.77 87.35 137.17 C79.72 139.42 72.75 140.51 64.81 140.5 C59.69 140.58 57.07 142.02 53 145 C48.26 145.45 43.63 144.8 38.92 144.22 C36.99 143.96 36.99 143.96 35 144 C36.29 144.34 37.58 144.67 38.88 145 C39.59 145.19 40.31 145.37 41.05 145.56 C42.99 146.07 42.99 146.07 45 146 C45 146.66 45 147.32 45 148 C45.99 147.67 46.98 147.34 48 147 C48.5 151.17 48.17 152.74 45.81 156.31 C42.99 159.01 41.81 159.78 38 160 C38 159.34 38 158.68 38 158 C37.44 157.78 36.87 157.56 36.29 157.33 C33.27 155.58 31.52 153.38 29.31 150.69 C28.13 149.27 28.13 149.27 26.93 147.82 C25.04 145.06 24.35 143.29 24 140 C23.01 139.67 22.02 139.34 21 139 C22.34 147.59 28.67 153.77 34.73 159.65 C37 162 37 162 38 165 C35.42 173.02 29.3 177.87 23 183 C22 180 22 180 22.65 178.09 C23.26 175.88 23.26 175.88 21.63 173.82 C16.9 168.64 16.9 168.64 11.12 164.75 C6.99 162.4 4.3 159.17 1.38 155.5 C0.91 154.94 0.45 154.38 -0.03 153.81 C-1.29 152.16 -1.29 152.16 -3 149 C-2.28 145.53 -0.59 143.27 1.62 140.56 C4.04 137.31 4.59 135.11 4 131 C3.67 130.67 3.34 130.34 3 130 C2.75 125.7 2.77 121.39 2.76 117.08 C2.75 114.93 2.72 112.79 2.69 110.64 C2.61 101.05 3.76 92.34 6 83 C6.24 81.95 6.49 80.9 6.74 79.82 C7.32 77.4 7.91 75.23 9 73 C11.69 71.38 11.69 71.38 14 71 C13.32 66.82 11.96 63.13 10.44 59.19 C7.68 51.72 7.68 51.72 8 47.44 C8.35 43.87 8.35 43.87 5.88 41.19 C3.02 39.02 0.27 37.45 -3 36 C-3.55 29.38 -2.95 24.46 1 19 C3.28 16.56 5.62 14.25 8.07 11.98 C10.22 10.06 10.22 10.06 11 7 C10.67 6.67 10.34 6.34 10 6 C7.63 8.05 7.63 8.05 6.61 10.92 C5.84 13.53 4.8 14.33 2.69 16 C2.06 16.52 1.43 17.03 0.79 17.56 C0.2 18.04 -0.39 18.51 -1 19 C-4.82 22.22 -5.27 24.13 -6 29 C-7.56 30.88 -7.56 30.88 -9 32 C-9.66 31.67 -10.32 31.34 -11 31 C-11.24 29.11 -11.24 29.11 -11.31 26.75 C-11.64 23.04 -11.93 22.1 -14.31 19 C-16.71 17.22 -18.08 16.32 -21 16 C-21 15.01 -21 14.02 -21 13 C-19.9 12.96 -18.81 12.93 -17.68 12.89 C-16.22 12.82 -14.77 12.75 -13.31 12.69 C-12.59 12.66 -11.87 12.64 -11.13 12.62 C-6.66 12.39 -3.64 11.84 0 9 C0.52 8.13 1.03 7.27 1.56 6.38 C3 4 3 4 5.19 3.19 C6.08 3.09 6.08 3.09 7 3 C4.36 2.67 1.72 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#0B113F\",transform:\"translate(1056,768)\"})),_path65||(_path65=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.39 0.8 1.39 0.8 2.81 1.62 C3.99 2.03 3.99 2.03 5.19 2.44 C9.94 4.59 14.13 7.95 17.81 11.62 C19.75 12.66 21.71 13.66 23.69 14.62 C24.74 15.14 25.79 15.66 26.87 16.19 C27.84 16.66 28.81 17.14 29.81 17.62 C30.47 17.95 31.12 18.28 31.79 18.62 C33.45 19.45 35.13 20.25 36.81 21.04 C43.05 24.03 48.87 27.16 54.5 31.19 C63.35 37.5 72.72 42.22 82.63 46.65 C84.25 47.37 85.86 48.1 87.48 48.83 C99.71 54.37 111.93 59.64 124.64 63.99 C129.75 65.75 134.21 67.79 138.81 70.62 C138.81 70.96 138.81 71.28 138.81 71.62 C137.58 71.48 136.34 71.34 135.06 71.19 C129.32 70.55 123.57 70.08 117.81 69.62 C121.77 70.12 121.77 70.12 125.81 70.62 C125.15 71.62 124.49 72.61 123.81 73.62 C122.82 73.62 121.83 73.62 120.81 73.62 C119.47 75.62 118.14 77.62 116.81 79.62 C113.61 81.73 110.66 81.99 106.88 82.25 C105.35 82.36 105.35 82.36 103.79 82.48 C101.12 82.61 98.48 82.65 95.81 82.62 C95.48 83.28 95.15 83.94 94.81 84.62 C92.5 85.36 90.16 86.03 87.81 86.62 C87.81 87.62 87.81 88.61 87.81 89.62 C87.23 89.72 86.64 89.82 86.04 89.93 C79.27 92.05 74.5 100.11 70.44 105.62 C70.01 106.19 69.58 106.76 69.14 107.35 C66.08 111.64 64.84 115.46 63.81 120.62 C63.15 120.29 62.49 119.97 61.81 119.62 C54.71 132.75 50.93 145.17 48.32 159.82 C44.93 178.5 41.14 198.49 32.81 215.62 C31.49 215.62 30.17 215.62 28.81 215.62 C27.8 212.59 27.8 211.41 28.23 208.34 C28.35 207.49 28.47 206.64 28.59 205.76 C28.72 204.85 28.86 203.94 29 203 C29.21 201.59 29.21 201.59 29.42 200.14 C30.74 191.5 32.63 183.08 34.81 174.62 C35.23 172.95 35.65 171.27 36.07 169.59 C36.51 167.9 36.94 166.2 37.38 164.5 C37.57 163.72 37.77 162.94 37.97 162.13 C39.21 157.39 40.84 153.1 42.81 148.62 C43.33 146.93 43.82 145.22 44.25 143.5 C45.91 137.15 47.85 130.89 49.81 124.62 C50.8 124.62 51.79 124.62 52.81 124.62 C53.08 123.88 53.35 123.14 53.62 122.38 C54.81 119.62 54.81 119.62 56.26 117.76 C57.93 115.46 58.83 113.34 59.81 110.69 C63.38 101.55 63.38 101.55 67.81 98.69 C71.36 96.25 72.05 94.51 73.81 90.62 C81.22 78.49 81.22 78.49 86.81 76.62 C86.81 73.33 86.81 70.02 86.81 66.62 C88.3 66.13 88.3 66.13 89.81 65.62 C90.47 65.96 91.13 66.28 91.81 66.62 C91.65 65.51 91.48 64.4 91.31 63.25 C90.81 59.62 90.81 59.62 90.81 57.62 C86.33 56.9 86.33 56.9 81.81 56.62 C81.26 61.44 80.74 66.15 80.94 71 C80.81 74.62 80.81 74.62 79.62 77.12 C77.81 78.62 77.81 78.62 75.12 78.88 C74.36 78.79 73.6 78.71 72.81 78.62 C72.81 77.97 72.81 77.31 72.81 76.62 C72.15 76.62 71.49 76.62 70.81 76.62 C70.81 75.63 70.81 74.64 70.81 73.62 C67.94 71.86 67.94 71.86 64.67 72.07 C64.06 72.25 63.44 72.44 62.81 72.62 C63.36 73.02 63.9 73.42 64.46 73.83 C65.53 74.63 65.53 74.63 66.62 75.44 C67.33 75.96 68.04 76.48 68.77 77.02 C70.6 78.46 72.21 79.94 73.81 81.62 C72.49 81.96 71.17 82.28 69.81 82.62 C69.26 81.82 68.7 81.02 68.12 80.19 C65.44 77.22 64.65 77.15 60.81 76.62 C59.47 76.1 58.14 75.56 56.81 75 C53.4 73.7 51.32 73.2 47.81 74.62 C46.99 75.33 46.16 76.03 45.31 76.75 C42.81 78.62 42.81 78.62 40.56 78.45 C37.2 77.44 34.38 75.95 31.31 74.25 C30.21 73.64 29.11 73.04 27.97 72.41 C26.93 71.82 25.89 71.23 24.81 70.62 C23.4 69.86 23.4 69.86 21.96 69.08 C19.81 67.62 19.81 67.62 18.88 64.75 C18.81 61.44 19.31 59.54 20.81 56.62 C21.14 56.29 21.47 55.97 21.81 55.62 C20.82 53.15 20.82 53.15 19.81 50.62 C15.36 51.12 15.36 51.12 10.81 51.62 C11.14 50.97 11.47 50.3 11.81 49.62 C12.47 49.62 13.13 49.62 13.81 49.62 C14.18 48.7 14.18 48.7 14.56 47.75 C16.04 45.23 17.06 44.54 19.81 43.62 C20.8 43.96 21.79 44.28 22.81 44.62 C23.8 41.65 23.8 41.65 24.81 38.62 C28.55 39.87 30.04 41.85 32.81 44.62 C34.76 46.06 36.76 47.34 38.81 48.62 C37.9 46.3 37.9 46.3 34.88 45.19 C31.81 43.62 31.81 43.62 29.81 40.62 C28.84 36.57 28.39 34.48 30.25 30.69 C31.02 29.67 31.02 29.67 31.81 28.62 C30.82 28.29 29.83 27.97 28.81 27.62 C29 27.07 29.18 26.51 29.38 25.94 C29.89 23.23 29.48 21.28 28.81 18.62 C27.72 18.65 26.63 18.67 25.5 18.69 C21.81 18.62 21.81 18.62 18.81 17.62 C18.81 16.63 18.81 15.64 18.81 14.62 C17.49 15.28 16.17 15.95 14.81 16.62 C13.16 14.98 11.51 13.33 9.81 11.62 C9.48 11.96 9.15 12.28 8.81 12.62 C10.79 13.62 10.79 13.62 12.81 14.62 C12.15 14.96 11.49 15.28 10.81 15.62 C9.4 19.87 11.12 22.78 12.69 26.75 C12.97 27.49 13.25 28.23 13.54 29 C14.73 32.58 14.73 32.58 16.81 35.62 C19.15 35.67 21.48 35.67 23.81 35.62 C22.56 38.12 22.56 38.12 20.81 40.62 C19.49 40.62 18.17 40.62 16.81 40.62 C15.82 41.12 15.82 41.12 14.81 41.62 C14.6 42.8 14.6 42.8 14.38 44 C13.75 46.9 13.18 47.89 10.81 49.62 C9.82 49.62 8.83 49.62 7.81 49.62 C7.48 50.28 7.15 50.95 6.81 51.62 C5.82 51.62 4.83 51.62 3.81 51.62 C3.21 51.96 2.62 52.28 2 52.62 C-0.82 53.91 -3.12 53.69 -6.19 53.62 C-6.52 52.92 -6.84 52.22 -7.18 51.5 C-11.28 43.33 -16.36 36.8 -24.69 32.62 C-30.45 30.98 -35.03 30.5 -40.44 33.31 C-43.22 35.58 -43.22 35.58 -45.69 38.12 C-48.19 40.62 -48.19 40.62 -51.31 42.69 C-54.23 44.42 -54.23 44.42 -55.88 46.88 C-56.31 47.45 -56.74 48.03 -57.19 48.62 C-58.18 48.62 -59.17 48.62 -60.19 48.62 C-60.19 49.28 -60.19 49.95 -60.19 50.62 C-60.77 50.52 -61.35 50.41 -61.95 50.3 C-67.4 49.46 -70.39 49.56 -75.19 52.62 C-76.56 53.48 -77.94 54.33 -79.31 55.19 C-79.95 55.6 -80.6 56.02 -81.26 56.44 C-83.19 57.62 -85.15 58.64 -87.19 59.62 C-87.19 60.95 -87.19 62.26 -87.19 63.62 C-90.82 65.27 -94.45 66.92 -98.19 68.62 C-99.51 67.63 -100.83 66.64 -102.19 65.62 C-104.5 64.89 -106.83 64.21 -109.19 63.62 C-109.52 64.28 -109.85 64.94 -110.19 65.62 C-110.97 65.6 -111.75 65.58 -112.56 65.56 C-115.17 65.44 -115.17 65.44 -117.19 66.62 C-118.18 66.29 -119.17 65.97 -120.19 65.62 C-120.19 66.28 -120.19 66.94 -120.19 67.62 C-120.83 67.73 -121.47 67.83 -122.12 67.94 C-122.81 68.16 -123.49 68.39 -124.19 68.62 C-124.68 70.11 -124.68 70.11 -125.19 71.62 C-126.51 71.29 -127.83 70.97 -129.19 70.62 C-129.68 72.11 -129.68 72.11 -130.19 73.62 C-131.87 74.3 -133.55 74.97 -135.24 75.61 C-137.51 76.79 -138.8 78.16 -140.5 80.06 C-144.94 84.81 -150.53 86.97 -156.87 88.1 C-159.37 88.45 -159.37 88.45 -161.19 90.62 C-165.88 91.69 -170.53 91.98 -175.19 90.62 C-172.62 87.5 -170 86.74 -166.19 85.56 C-159.92 83.42 -154.17 80.73 -148.31 77.62 C-147.53 77.21 -146.75 76.79 -145.94 76.37 C-142.25 74.38 -138.67 72.31 -135.17 70.02 C-131.1 67.44 -126.92 65.86 -122.38 64.31 C-93.97 54.5 -93.97 54.5 -69.81 37.25 C-58.38 25.82 -43.88 17.21 -30.25 8.69 C-29.39 8.14 -28.52 7.6 -27.63 7.04 C-9.57 -4.13 -9.57 -4.13 0 0 Z \",fill:\"#090E36\",transform:\"translate(938.1875,699.375)\"})),_path66||(_path66=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.45 1.91 2.45 1.91 3.94 1.81 C8.62 1.78 12.67 3.35 17 5 C17.99 9.04 18.04 12.68 17.88 16.83 C17.83 18.12 17.78 19.42 17.73 20.75 C17.68 22.1 17.62 23.46 17.56 24.81 C17.51 26.19 17.46 27.56 17.4 28.94 C17.27 32.29 17.14 35.65 17 39 C16.39 39.13 15.79 39.27 15.17 39.41 C14.36 39.58 13.56 39.76 12.74 39.95 C11.95 40.12 11.16 40.3 10.34 40.48 C2.74 42.07 2.74 42.07 -3 47 C-4.78 50.56 -3.95 55.03 -3.79 58.97 C-3.65 65.37 -5.63 68.68 -9.81 73.25 C-14.12 78.18 -18.65 83.47 -20 90 C-21.38 93.4 -23.21 95.62 -26 98 C-28.39 98.97 -29.47 99.17 -31.94 98.38 C-34.15 97.77 -34.15 97.77 -36.56 99.19 C-41.57 102.91 -42.99 107.25 -45 113 C-45.66 113 -46.32 113 -47 113 C-47.26 113.6 -47.52 114.2 -47.79 114.82 C-51.56 121.61 -60.56 125.03 -67.14 128.39 C-69.61 129.78 -71.11 130.96 -73 133 C-75 134 -77 135 -79 136 C-85.09 139.69 -90.68 144.01 -96.27 148.4 C-99.14 150.64 -102 152.67 -105.19 154.44 C-108.87 156.57 -111.2 159.45 -113.94 162.69 C-117.74 167.06 -120.31 169.25 -126.09 169.95 C-127.73 169.99 -129.36 170 -131 170 C-131.24 170.63 -131.47 171.25 -131.72 171.89 C-133.36 174.59 -134.54 174.73 -137.5 175.69 C-145.73 179.52 -148.99 188.32 -153 196 C-153.7 197.3 -154.41 198.6 -155.11 199.9 C-156.3 202.08 -157.47 204.27 -158.62 206.46 C-160 209 -160 209 -162 212 C-162.37 213.61 -162.68 215.24 -162.94 216.88 C-163.66 220.82 -164.59 223.72 -167 227 C-168.32 226.67 -169.64 226.34 -171 226 C-172.06 219.61 -173.04 213.27 -173.5 206.81 C-173.76 203.27 -174.18 199.96 -175 196.5 C-176.8 188.17 -176.74 179.49 -177 171 C-177.04 169.94 -177.04 169.94 -177.07 168.85 C-177.3 161.05 -177.3 161.05 -177 158 C-174.52 155.52 -172.16 155.16 -168.83 154.3 C-153.66 150.33 -140.39 142.97 -127.35 134.37 C-126.52 133.82 -125.68 133.27 -124.82 132.71 C-124.22 132.14 -123.62 131.58 -123 131 C-123 129.68 -123 128.36 -123 127 C-120.88 124.12 -118.27 123.08 -115 121.81 C-114.13 121.47 -113.27 121.12 -112.38 120.77 C-110 120 -110 120 -107 120 C-107 119.34 -107 118.68 -107 118 C-106.43 117.71 -105.86 117.42 -105.28 117.12 C-101.48 115.1 -97.95 113.14 -94.75 110.25 C-91.24 107.09 -87.45 104.48 -83.55 101.83 C-77.61 97.77 -71.8 93.52 -66 89.25 C-64.9 88.45 -64.9 88.45 -63.77 87.62 C-63.12 87.14 -62.46 86.66 -61.79 86.16 C-60 85 -60 85 -57 84 C-55.51 84.5 -55.51 84.5 -54 85 C-48.39 81.79 -43.89 77.06 -39.8 72.14 C-37.86 69.84 -35.81 67.68 -33.75 65.5 C-21.15 51.53 -8.88 32.89 -3 15 C-3.33 14.01 -3.66 13.02 -4 12 C-3.22 9.08 -3.22 9.08 -2.06 5.81 C-1.68 4.73 -1.3 3.64 -0.91 2.52 C-0.61 1.69 -0.31 0.86 0 0 Z \",fill:\"#775878\",transform:\"translate(843,470)\"})),_path67||(_path67=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.79 0.37 7.9 1.86 12.07 4.11 C12.76 4.47 13.45 4.83 14.16 5.19 C17.04 6.7 19.83 8.23 22.57 9.99 C25.35 11.52 27.69 12.01 30.82 12.49 C31.81 12.65 32.8 12.81 33.81 12.97 C36.99 13.39 36.99 13.39 40.36 13.11 C44.76 13.34 47.7 14.9 51.38 17.11 C52.07 17.51 52.75 17.91 53.45 18.32 C71.3 28.9 90.02 40.56 96.51 61.24 C96.81 62.16 97.11 63.09 97.42 64.04 C99.58 70.82 101.34 77.64 102.97 84.56 C104.31 89.68 106.1 94.56 107.99 99.51 C108.95 102.3 108.95 102.3 108.95 105.3 C109.61 105.3 110.27 105.3 110.95 105.3 C111.36 108.24 111.75 111.17 112.13 114.11 C112.25 114.95 112.37 115.78 112.5 116.64 C112.6 117.44 112.7 118.24 112.8 119.07 C112.95 120.18 112.95 120.18 113.1 121.31 C112.95 123.3 112.95 123.3 111.45 125.07 C110.96 125.47 110.46 125.88 109.95 126.3 C110.28 126.96 110.61 127.62 110.95 128.3 C105.67 128.96 100.39 129.62 94.95 130.3 C94.99 131.74 95.03 133.19 95.07 134.68 C95.14 137.14 95.14 137.14 94.95 139.3 C94.29 139.96 93.63 140.62 92.95 141.3 C92.66 142.04 92.37 142.79 92.07 143.55 C90.75 146.78 88.94 149.44 86.95 152.3 C89.26 152.63 91.57 152.96 93.95 153.3 C93.95 152.64 93.95 151.98 93.95 151.3 C94.94 151.3 95.93 151.3 96.95 151.3 C96.95 152.29 96.95 153.28 96.95 154.3 C98.43 155.29 98.43 155.29 99.95 156.3 C99.95 156.96 99.95 157.62 99.95 158.3 C100.61 158.3 101.27 158.3 101.95 158.3 C102.28 157.31 102.61 156.32 102.95 155.3 C105.82 160.18 106.9 164.68 106.95 170.3 C106.62 171.29 106.29 172.28 105.95 173.3 C105.82 174.78 105.72 176.26 105.63 177.74 C105.2 182.06 104.12 183.32 100.95 186.3 C100.41 187.8 99.94 189.33 99.51 190.86 C98.49 194.3 98.22 195.09 95.26 197.36 C94.49 197.67 93.73 197.98 92.95 198.3 C88.65 196.2 86.53 194.81 84.77 190.28 C83.99 187.17 83.31 184.07 82.74 180.92 C82.38 178.93 81.98 176.96 81.56 174.98 C80.25 168.22 79.72 163.79 81.95 157.3 C81.29 156.97 80.63 156.64 79.95 156.3 C79.29 157.29 78.63 158.28 77.95 159.3 C76.81 155.03 75.95 151.74 75.95 147.3 C75.29 147.3 74.63 147.3 73.95 147.3 C73.95 139.71 73.95 132.12 73.95 124.3 C74.61 123.97 75.27 123.64 75.95 123.3 C76.6 121.28 76.6 121.28 76.95 119.3 C77.61 119.3 78.27 119.3 78.95 119.3 C78.95 119.96 78.95 120.62 78.95 121.3 C79.61 120.97 80.27 120.64 80.95 120.3 C83.28 120.26 85.61 120.26 87.95 120.3 C87.42 117.78 87.42 117.78 85.95 115.3 C83.03 114.26 83.03 114.26 79.63 113.86 C72.25 112.41 72.25 112.41 69.82 109.55 C66.46 103.73 64.85 99.02 63.57 92.43 C62.23 85.8 60.31 79.62 55.39 74.77 C53.95 73.3 53.95 73.3 52.38 70.05 C47.47 61.29 35.89 56.93 27.24 52.53 C25.31 51.55 23.39 50.55 21.47 49.55 C14.06 45.71 14.06 45.71 6.32 42.62 C0.68 40.41 -2.1 36.45 -5.05 31.3 C-8.92 20.39 -9.02 11.72 -4.05 1.3 C-3.05 0.3 -3.05 0.3 0 0 Z \",fill:\"#442254\",transform:\"translate(1154.0546875,625.69921875)\"})),_path68||(_path68=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.55 3.51 2.11 4.02 1.64 4.54 C0.39 5.97 -0.87 7.4 -2.12 8.84 C-3.24 10.13 -4.37 11.41 -5.51 12.69 C-10.56 18.48 -11.39 23.57 -12 31 C-11.11 31.25 -10.23 31.5 -9.31 31.75 C-5.78 33.08 -3.63 34.29 -1 37 C-0.12 40.23 0.02 43.29 0.25 46.62 C0.8 51.57 2.95 55.8 5.04 60.27 C6.04 63.12 6.09 64.24 5 67 C4.08 67.07 4.08 67.07 3.13 67.14 C0.73 67.83 0.73 67.83 -0.2 70.52 C-0.5 71.61 -0.81 72.69 -1.12 73.81 C-1.44 74.87 -1.75 75.93 -2.07 77.02 C-4.57 87.19 -5.3 97.09 -5.21 107.52 C-5.19 109.72 -5.19 111.92 -5.19 114.12 C-5.82 120.55 -5.82 120.55 -4 126 C-3.62 129.6 -3.68 131.48 -5.6 134.6 C-6.95 136.24 -8.31 137.89 -9.66 139.54 C-11.3 141.91 -11.3 141.91 -10.47 144.46 C-6.29 151.67 -1.22 157.7 6.07 161.77 C9.82 164.16 12.75 167.16 15 171 C15.62 174.03 15.23 176.18 14 179 C12.26 181.59 10.15 183.74 8 186 C-3.78 199.62 -3.78 199.62 -7.94 216.56 C-7.05 219.82 -6.57 220.76 -4.44 223.12 C-2 226 -2 226 -1.64 228.43 C-2.09 231.64 -3.12 232.71 -5.38 235 C-9.18 239.11 -10.8 241.78 -11.31 247.44 C-10.73 254.13 -7.6 257.55 -2.99 262.02 C6.8 271.79 6.8 271.79 7.31 277.5 C4.93 283.86 2.11 289.58 -2 295 C-2.27 295.68 -2.54 296.36 -2.81 297.06 C-4 299 -4 299 -6.68 300.27 C-10.52 302.27 -13.17 304.69 -16.25 307.69 C-20.11 311.37 -23.96 314.82 -28.25 318 C-33.15 321.79 -36.55 326.35 -40.09 331.36 C-43.88 336.59 -43.88 336.59 -47.56 337.94 C-50.55 339.24 -50.65 340.14 -52 343 C-54.62 345.25 -54.62 345.25 -57 347 C-61.25 343.51 -63.47 339.21 -65 334 C-65.32 328.75 -63.52 324.53 -61 320 C-60.73 319.11 -60.46 318.23 -60.19 317.31 C-58.52 314.07 -56.23 313.58 -53 312 C-50.33 309.16 -50.33 309.16 -48 306 C-47.26 305.09 -46.51 304.18 -45.75 303.25 C-43.98 301.13 -43.98 301.13 -43 299 C-47.47 300.65 -49.32 301.98 -52 306 C-53.31 307.35 -54.64 308.69 -56 310 C-57.67 305.95 -56.19 302.6 -54.81 298.69 C-54.47 297.68 -54.47 297.68 -54.12 296.66 C-52.51 292.09 -50.66 288.04 -48 284 C-47.34 284.33 -46.68 284.66 -46 285 C-46.99 287.97 -47.98 290.94 -49 294 C-47.67 293.91 -47.67 293.91 -46.31 293.81 C-43 294 -43 294 -40.69 295.56 C-36.72 297.69 -33.31 296.78 -29 296 C-29.46 295.57 -29.92 295.14 -30.39 294.7 C-32.32 292.67 -33.5 290.4 -34.82 287.95 C-36.11 285.82 -37.63 284.07 -39.25 282.19 C-42.31 278.23 -42.59 275.12 -42.41 270.2 C-42 268 -42 268 -40 265 C-39.67 264.34 -39.34 263.68 -39 263 C-38.34 262.67 -37.68 262.34 -37 262 C-33.97 265.57 -31.75 269.14 -29.62 273.31 C-28.42 275.54 -27.21 277.77 -26 280 C-25.57 280.87 -25.15 281.73 -24.71 282.62 C-23.3 285.05 -22.35 286.45 -20 288 C-15.25 288.77 -10.75 288.74 -6 288 C-5.34 287.34 -4.68 286.68 -4 286 C-4 285.34 -4 284.68 -4 284 C-4.88 284.03 -5.76 284.07 -6.67 284.11 C-7.83 284.13 -8.99 284.16 -10.19 284.19 C-11.34 284.22 -12.48 284.26 -13.67 284.29 C-17.5 283.96 -19.06 283.47 -22 281 C-23.82 278.45 -25.29 275.77 -26.75 273 C-27.15 272.28 -27.55 271.55 -27.96 270.8 C-30.89 265.41 -32.71 261.31 -32 255 C-30.27 251.79 -28.18 248.92 -26 246 C-25.34 245.01 -24.68 244.02 -24 243 C-25.32 243.33 -26.64 243.66 -28 244 C-28.61 242.22 -28.61 242.22 -29 240 C-27.68 237.4 -26.33 235.06 -24.75 232.62 C-18.82 223.45 -18.82 223.45 -16 213 C-16.61 213.65 -17.23 214.3 -17.86 214.97 C-18.67 215.8 -19.48 216.64 -20.31 217.5 C-21.11 218.34 -21.91 219.17 -22.74 220.03 C-25 222 -25 222 -28 222 C-29.47 223.37 -29.47 223.37 -30.81 225.19 C-33.6 228.62 -36.53 231.27 -40 234 C-45.49 232 -49.86 229.14 -54 225 C-55.5 221.56 -55.5 221.56 -55 218 C-53.46 215.87 -51.74 214.04 -49.9 212.15 C-46.72 208.55 -44.99 204.33 -43 200 C-39.75 193.27 -36.31 186.69 -32.62 180.19 C-29.54 174.75 -26.48 169.31 -23.5 163.81 C-23.16 163.2 -22.82 162.59 -22.48 161.96 C-20.71 158.67 -19.35 155.74 -19 152 C-20.35 149.01 -21.43 147.37 -24.19 145.56 C-26 144 -26 144 -26.56 141.12 C-25.83 137.05 -23.98 135.76 -21 133 C-20.77 132.05 -20.77 132.05 -20.53 131.08 C-19.88 128.52 -18.77 127.31 -17 125.38 C-14.06 122.13 -12.86 120.37 -12.88 115.94 C-12.88 114.72 -12.88 114.72 -12.88 113.47 C-12.99 111.21 -13.33 109.16 -13.75 106.94 C-14.72 99.43 -12.14 89.21 -8 83 C-7.34 83 -6.68 83 -6 83 C-6 80.03 -6 77.06 -6 74 C-5.34 74 -4.68 74 -4 74 C-3.96 72.72 -3.92 71.44 -3.88 70.12 C-3.85 69.41 -3.83 68.69 -3.8 67.95 C-3.82 65.76 -3.82 65.76 -6 64 C-5.48 63.63 -4.97 63.26 -4.44 62.88 C-2.72 61.05 -2.72 61.05 -3.12 58.44 C-3.41 57.3 -3.7 56.17 -4 55 C-4.25 53.85 -4.25 53.85 -4.5 52.67 C-6.15 45.96 -9.1 41.81 -14 37 C-17.65 37.53 -18.74 37.72 -21.38 40.5 C-24.63 43.6 -26.64 43.38 -31 44 C-33.79 46.46 -33.79 46.46 -36 49 C-36.66 49 -37.32 49 -38 49 C-37.75 45.67 -36.82 44.83 -34.31 42.5 C-32.16 40.79 -30.29 39.65 -27.79 38.42 C-24.86 36.38 -24.86 36.38 -24.61 33.99 C-24.63 31.54 -24.84 29.18 -25.12 26.75 C-25.2 25.91 -25.27 25.07 -25.35 24.2 C-25.54 22.13 -25.77 20.07 -26 18 C-27.98 17.01 -29.96 16.02 -32 15 C-32 14.01 -32 13.02 -32 12 C-33.32 12.33 -34.64 12.66 -36 13 C-35 11 -35 11 -32 9 C-31.01 9 -30.02 9 -29 9 C-28.51 9.99 -28.51 9.99 -28 11 C-27.4 11.29 -26.8 11.58 -26.19 11.88 C-23.37 13.33 -21.87 14.4 -20 17 C-19.67 20.03 -19.77 22.97 -20 26 C-19.01 25.67 -18.02 25.34 -17 25 C-16.05 22.93 -16.05 22.93 -15.44 20.5 C-14.75 18.03 -14.75 18.03 -14 16 C-13.34 15.67 -12.68 15.34 -12 15 C-11.34 14.34 -10.68 13.68 -10 13 C-9.44 12.56 -8.88 12.12 -8.31 11.67 C-4.31 8.64 -4.31 8.64 -2.19 4.25 C-2.09 3.14 -2.09 3.14 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#0A113B\",transform:\"translate(1065,773)\"})),_path69||(_path69=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 1.31 2.62 1.31 5 3 C5 3.66 5 4.32 5 5 C5.62 5.08 6.24 5.16 6.88 5.25 C9 6 9 6 10.06 7.94 C10.37 8.62 10.68 9.3 11 10 C11.99 10.66 12.98 11.32 14 12 C14 12.66 14 13.32 14 14 C14.74 14.01 15.48 14.02 16.24 14.03 C19.76 15.27 20.57 17.08 22.19 20.34 C22.52 21.05 22.85 21.76 23.19 22.5 C23.53 23.18 23.87 23.87 24.22 24.57 C25.96 28.16 27.19 31.5 27.93 35.42 C28.99 40.74 31.39 45.1 34 49.81 C34.9 51.46 35.79 53.12 36.69 54.77 C37.08 55.49 37.48 56.21 37.89 56.94 C39.91 60.68 41.2 63.57 41.75 67.81 C43.29 76.82 47.22 85.1 50.98 93.38 C51.31 94.1 51.63 94.82 51.97 95.56 C52.6 96.95 53.25 98.34 53.9 99.72 C56.07 104.46 56.07 104.46 55.69 107.46 C55.46 107.97 55.24 108.48 55 109 C52.06 108.67 51.15 108.18 49.22 105.86 C48.65 104.98 48.08 104.09 47.5 103.19 C43.56 97 43.56 97 37.62 93 C33.8 93 32.02 94.72 29 97 C24.58 100.21 20.27 102.2 15.17 104.07 C12.85 104.91 12.85 104.91 11 107 C9.8 113.62 11.66 119.31 15 125 C16.94 127.53 16.94 127.53 19 129 C19.66 129 20.32 129 21 129 C21 129.99 21 130.98 21 132 C20.34 132 19.68 132 19 132 C18.63 133.21 18.63 133.21 18.25 134.44 C17 137 17 137 15.2 137.62 C9.16 138.65 3.19 139.06 -2.93 138.92 C-19.71 138.43 -19.71 138.43 -34.85 145.01 C-38.52 147.33 -41.74 148.18 -45.94 149.06 C-51.27 150.23 -55.99 151.74 -61 154 C-62.7 154.62 -64.41 155.22 -66.12 155.81 C-71.61 157.76 -76.76 160.22 -81.96 162.83 C-85.2 164.08 -87.56 164.23 -91 164 C-91 164.66 -91 165.32 -91 166 C-91.99 165.67 -92.98 165.34 -94 165 C-93.51 164.01 -93.51 164.01 -93 163 C-94.11 162.63 -94.11 162.63 -95.25 162.25 C-98.2 160.91 -99.85 159.39 -102 157 C-98.11 143.57 -86.05 130.09 -74.19 122.88 C-69.72 120.15 -67.37 116.65 -64.54 112.32 C-53.58 95.77 -30 88.97 -12 83.6 C1.32 79.59 8.41 72.49 16 61 C16.69 60.16 16.69 60.16 17.4 59.31 C19.87 56.26 20.97 54.7 21.12 50.69 C18.91 43.43 15.75 37.23 10.43 31.77 C9 30 9 30 7.67 27.12 C5.73 23.49 3.51 21.52 0.38 18.88 C-4.73 14.58 -4.73 14.58 -5.95 11.99 C-6.02 9.36 -5.3 7.68 -4.19 5.31 C-3.83 4.52 -3.47 3.74 -3.11 2.93 C-2 1 -2 1 0 0 Z \",fill:\"#121847\",transform:\"translate(1165,825)\"})),_path70||(_path70=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33 2.69 4.35 6.14 6 10 C6.48 10.44 6.95 10.88 7.45 11.34 C9.62 13.67 10.32 16.13 11.38 19.12 C12.82 23.05 14.26 26.68 16.44 30.25 C19.3 35.11 20.95 40.3 22.76 45.62 C24.81 51.6 27.23 57.31 30 63 C30.54 64.13 31.07 65.27 31.62 66.44 C32.88 68.96 32.88 68.96 34.44 70.83 C39.53 77.9 41.8 87.1 44.21 95.39 C45.14 98.53 46.18 101.36 47.65 104.29 C49 107 49 107 49 110 C49.99 110.33 50.98 110.66 52 111 C52.95 113 52.95 113 53.69 115.44 C54.06 116.64 54.06 116.64 54.45 117.87 C55 120 55 120 55 122 C55.46 122.44 55.93 122.89 56.41 123.35 C58.3 125.31 58.76 126.83 59.5 129.44 C60.57 132.9 61.78 135.13 64 138 C65.12 140.63 66.05 143.3 67 146 C67.66 144.68 68.32 143.36 69 142 C69.66 143.98 70.32 145.96 71 148 C70.01 148 69.02 148 68 148 C68.33 148.99 68.66 149.98 69 151 C68.67 151.33 68.34 151.66 68 152 C68.99 152.99 69.98 153.98 71 155 C70.67 155.66 70.34 156.32 70 157 C65.72 155.25 64.7 153.1 62.82 149.04 C61.89 146.72 61.31 144.48 61 142 C60.01 141.67 59.02 141.34 58 141 C56.35 138.4 56 137.14 56 134 C55.01 133.67 54.02 133.34 53 133 C52.67 132.34 52.34 131.68 52 131 C48.36 132.49 46.4 134.58 43.88 137.56 C40.19 141.9 40.19 141.9 38 143 C30.29 143.53 22.83 143.94 16 140 C14.88 137.38 14.88 137.38 14 134 C13.13 132.6 12.2 131.22 11.25 129.88 C8.08 125.31 5.68 120.52 3.3 115.5 C2.12 112.91 2.12 112.91 0 111 C-2.06 110.85 -2.06 110.85 -4 112 C-5.3 114.74 -5.3 114.74 -6.25 118.06 C-8.46 124.21 -11.07 129.75 -17 133 C-23.88 133.75 -29.79 131.87 -36.38 130 C-44.8 127.73 -52.47 126.38 -61.2 126.87 C-66.69 127.18 -71.46 126.77 -76.07 123.55 C-81.88 117.51 -85.6 111.22 -86.25 102.75 C-85.86 96.89 -84.6 92.72 -80.56 88.38 C-74.04 83.53 -65.55 78.82 -57.32 78.94 C-56.41 78.95 -55.5 78.95 -54.56 78.96 C-52.66 78.99 -50.75 79.01 -48.85 79.04 C-47.47 79.05 -47.47 79.05 -46.07 79.06 C-44.83 79.08 -44.83 79.08 -43.56 79.1 C-40.93 79.05 -40.93 79.05 -38.09 78.5 C-34.84 77.97 -31.8 77.89 -28.51 77.9 C-26.71 77.91 -26.71 77.91 -24.88 77.91 C-23.02 77.92 -23.02 77.92 -21.12 77.94 C-19.86 77.94 -18.6 77.95 -17.3 77.95 C-14.2 77.96 -11.1 77.98 -8 78 C-7.34 79.32 -6.68 80.64 -6 82 C-1.47 80.75 1.96 78.84 5.84 76.3 C8.83 74.51 11.97 73.25 15.21 71.99 C17.35 71.07 17.35 71.07 18 68 C20.97 68.33 23.94 68.66 27 69 C24.6 60.69 22 52.84 18.05 45.15 C15.83 40.6 13.52 35.75 12.57 30.77 C12.38 30.18 12.2 29.6 12 29 C10.52 28.5 10.52 28.5 9 28 C6.02 23.04 4.12 17.78 2.25 12.31 C2.03 11.67 1.8 11.03 1.57 10.37 C0.4 6.81 -0.26 3.75 0 0 Z \",fill:\"#0E1440\",transform:\"translate(1206,890)\"})),_path71||(_path71=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.38 -0.45 3.93 -2.44 6.5 C-6.24 11.44 -6.57 15.92 -6 22 C-5.3 24.54 -4.49 26.98 -3.56 29.45 C-2.21 35.59 -4.49 40.65 -7.25 46.06 C-7.83 47.23 -8.42 48.4 -9.02 49.6 C-11 53 -11 53 -13.5 55.93 C-16.37 59.45 -17.98 62.95 -19.81 67.06 C-22.5 72.84 -24.42 75.92 -30.24 78.8 C-34.3 81.57 -35.03 86.45 -36 91 C-37.96 102.27 -38.11 113.59 -38.06 125 C-38.06 126.2 -38.05 127.39 -38.05 128.63 C-38.03 135.28 -38.03 135.28 -37.96 141.93 C-37.84 154.51 -40.22 163.12 -46.09 174.2 C-52.77 187.38 -50.33 203.02 -48 217 C-56.25 217 -64.5 217 -73 217 C-73.63 210.02 -74.18 203.28 -74.19 196.31 C-74.2 195.52 -74.21 194.73 -74.22 193.92 C-74.24 189.33 -73.71 185.39 -72.47 180.97 C-71.66 177.58 -71.57 174.16 -71.44 170.69 C-71.37 169.19 -71.29 167.7 -71.22 166.2 C-71.17 165.12 -71.17 165.12 -71.11 164.02 C-70.96 161.34 -70.71 158.67 -70.44 156 C-69.2 142.69 -69.37 127.45 -77 116 C-77.26 113.54 -77.26 113.54 -77.27 110.62 C-77.27 109.56 -77.27 108.49 -77.27 107.39 C-77.27 106.27 -77.26 105.15 -77.25 104 C-77.26 102.91 -77.27 101.83 -77.27 100.71 C-77.25 89.34 -76.53 74.53 -68 66 C-64.79 64 -62.3 63.81 -58.56 63.75 C-54.64 63.5 -54.64 63.5 -51.24 61.75 C-49.71 60 -49.71 60 -48 57 C-47.55 56.36 -47.09 55.72 -46.62 55.06 C-45.62 51.76 -46.2 49.32 -47 46 C-48.05 44.42 -48.05 44.42 -49.12 42.81 C-51 40 -51 40 -50.75 38.02 C-47.33 28.82 -37.97 20.28 -30 15 C-28.54 14.01 -27.08 13.02 -25.61 12.02 C-21.1 8.98 -16.57 5.96 -12 3 C-10.61 2.09 -10.61 2.09 -9.19 1.15 C-6.1 -0.47 -3.43 -0.2 0 0 Z \",fill:\"#512E58\",transform:\"translate(1091,1063)\"})),_path72||(_path72=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 -0.99 1.98 -1.98 3 -3 C4.98 -2.34 6.96 -1.68 9 -1 C8.34 -0.67 7.68 -0.34 7 0 C7.19 1.97 7.19 1.97 8 4 C9.99 4.98 11.95 5.44 14.09 6 C16 7 16 7 17.25 9.27 C20.52 21.17 14.39 34.91 10.87 46.16 C10.3 48.01 9.75 49.87 9.22 51.73 C6.41 61.56 1.88 72.13 -6 79 C-7.98 80.05 -9.97 81.05 -12 82 C-14.39 84.2 -16.57 86.52 -18.74 88.93 C-24.55 95.11 -30.06 99.51 -38.73 100.37 C-46.43 100.5 -52.71 99.43 -60 97 C-60.6 97.16 -61.2 97.33 -61.81 97.5 C-64 98 -64 98 -66.56 97.44 C-71.58 96.8 -76.09 97.96 -81 99 C-81.79 99.14 -82.58 99.28 -83.39 99.43 C-85.91 99.98 -88.07 100.74 -90.43 101.74 C-91.25 102.09 -92.06 102.43 -92.9 102.79 C-93.74 103.14 -94.57 103.5 -95.44 103.88 C-96.69 104.4 -96.69 104.4 -97.96 104.94 C-101.47 106.43 -104.87 107.93 -108.22 109.76 C-111.49 111.22 -113.46 111.56 -117 111 C-119.23 109.1 -119.23 109.1 -121.19 106.62 C-123.43 103.84 -125 102 -128 100 C-128.19 97.38 -128.19 97.38 -128 95 C-122.54 91.68 -116.97 89.26 -111 87 C-111 86.67 -111 86.34 -111 86 C-110.28 85.92 -109.56 85.84 -108.81 85.75 C-105.32 84.82 -103.62 83.48 -101 81 C-100.48 80.03 -99.96 79.06 -99.43 78.07 C-96.11 73.87 -92.77 73.06 -87.75 71.62 C-86.91 71.37 -86.07 71.11 -85.2 70.84 C-83.14 70.21 -81.07 69.6 -79 69 C-79.99 68.01 -79.99 68.01 -81 67 C-80.15 66.72 -79.31 66.44 -78.44 66.15 C-66.92 62.08 -60.74 56.12 -53 47 C-51.4 45.16 -49.8 43.33 -48.19 41.5 C-47.44 40.64 -46.69 39.79 -45.92 38.91 C-44 37 -44 37 -42 37 C-41.75 36.28 -41.5 35.56 -41.25 34.81 C-40 32 -40 32 -38.18 29.82 C-35.57 26.44 -33.79 22.95 -31.94 19.12 C-31.6 18.44 -31.26 17.76 -30.91 17.06 C-28.44 12.04 -26.15 6.97 -24.12 1.75 C-18.62 -6.81 -7.8 -2.37 0 0 Z \",fill:\"#482859\",transform:\"translate(419,1109)\"})),_path73||(_path73=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.15 2.86 2.15 2.86 2.31 4.75 C2.65 8.3 2.79 8.8 5.5 11.44 C9 15.02 8.94 18.12 9 23 C8.68 26.13 8.05 29.13 7.31 32.19 C7.15 32.96 6.99 33.72 6.82 34.51 C5.33 41.04 2.66 45.81 -2.5 50.19 C-6.89 54.47 -8.24 59.24 -10 65 C-10.43 66.3 -10.87 67.6 -11.32 68.9 C-14.88 78.79 -14.88 78.79 -16.12 89.12 C-16.13 89.99 -16.13 90.86 -16.13 91.76 C-16.15 94.04 -16.15 94.04 -15 96 C-14.51 103.27 -15.04 110.79 -16 118 C-16.33 118.33 -16.66 118.66 -17 119 C-17.43 121.29 -17.81 123.59 -18.16 125.89 C-18.26 126.6 -18.37 127.3 -18.48 128.02 C-18.71 129.52 -18.93 131.02 -19.16 132.52 C-19.49 134.77 -19.84 137.01 -20.18 139.26 C-21.3 146.64 -22.28 153.97 -22.77 161.42 C-23.1 165.08 -23.82 168.64 -24.6 172.23 C-25.02 175.14 -25 177.94 -24.97 180.87 C-25.01 183.73 -25.38 186.51 -25.76 189.34 C-28.14 207.01 -27.91 232.62 -17.06 247.62 C-15.75 249.12 -14.39 250.58 -13 252 C-11.93 253.31 -10.87 254.62 -9.81 255.94 C-7.44 258.64 -4.82 260.77 -2 263 C2 267.43 2 267.43 2 271 C2.66 271 3.32 271 4 271 C4.33 272.65 4.66 274.3 5 276 C-0.96 276.39 -0.96 276.39 -3 276 C-4.58 274.23 -4.58 274.23 -6 272 C-9.41 267.31 -12.83 263.06 -17 259 C-18.98 256.62 -20.85 254.22 -22.62 251.69 C-23.08 251.13 -23.53 250.57 -24 250 C-24.66 250 -25.32 250 -26 250 C-25.44 254.3 -23.91 257.05 -21.5 260.62 C-19.59 263.48 -18.09 265.74 -17 269 C-17.33 269.66 -17.66 270.32 -18 271 C-25.81 267.73 -30.48 258.33 -34 251 C-34.77 249.05 -35.49 247.11 -36.13 245.12 C-37.03 242.78 -37.03 242.78 -38.87 239.97 C-41.67 235.15 -43.05 229.96 -44.56 224.62 C-44.87 223.57 -45.17 222.52 -45.48 221.43 C-51 201.75 -51 201.75 -51 192 C-51.66 192 -52.32 192 -53 192 C-54.82 182.3 -55.33 172.84 -55.25 163 C-55.25 162.28 -55.24 161.56 -55.24 160.82 C-55.16 143.85 -54.28 127.52 -49.6 111.14 C-48.95 108.83 -48.35 106.5 -47.76 104.18 C-40.18 74.86 -30.32 46.92 -15.42 20.53 C-14.14 18.24 -12.89 15.94 -11.66 13.63 C-10.98 12.38 -10.3 11.13 -9.62 9.88 C-9.06 8.82 -8.5 7.77 -7.91 6.68 C-5.59 3.42 -3.42 2.02 0 0 Z \",fill:\"#220C37\",transform:\"translate(458,696)\"})),_path74||(_path74=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.97 0.65 3.95 1.27 5.94 1.88 C14.43 4.72 14.43 4.72 17 8 C17.4 10.19 17.4 10.19 17.61 12.64 C17.69 13.46 17.77 14.27 17.84 15.11 C17.92 16.05 17.92 16.05 18 17 C19.09 17.45 20.18 17.89 21.3 18.36 C23.57 19.29 25.84 20.22 28.11 21.16 C31.48 22.55 34.85 23.94 38.24 25.3 C46.04 28.45 53.5 32.17 61 35.99 C62.94 36.97 64.89 37.92 66.85 38.86 C76.43 43.47 85.86 48.2 91 58 C91.52 63.94 87.12 69.18 84 74 C84.33 74.33 84.66 74.66 85 75 C88.26 73.2 89.89 72.17 92 69 C92.39 67.01 92.73 65.01 93 63 C95.56 65.06 95.56 65.06 98 68 C98 71.49 97.88 73.84 95.73 76.67 C93.54 78.35 92.05 78.49 89.31 78.69 C88.5 78.75 87.7 78.82 86.86 78.89 C86.25 78.92 85.63 78.96 85 79 C86.88 80.88 90.03 80.69 92.56 81.06 C93.76 81.24 94.96 81.42 96.19 81.6 C97.12 81.73 98.05 81.86 99 82 C97.88 83.12 96.76 84.24 95.64 85.36 C94.41 86.59 93.18 87.83 91.96 89.08 C91.25 89.79 90.54 90.51 89.81 91.25 C89.14 91.94 88.46 92.62 87.77 93.33 C85.52 95.45 84.41 95.95 81.31 96.31 C77.78 95.98 75.76 94.88 72.79 93.02 C70.03 91.45 67.06 90.79 64 90 C63.28 89.66 62.56 89.32 61.81 88.97 C57.45 87.47 52.98 87.64 48.41 87.61 C38.9 87.3 33.89 82.24 27.69 75.62 C22.87 70.63 18.48 66.7 12.28 63.46 C8.49 61.03 5.84 57.63 3.01 54.17 C0.51 51.47 -1.35 50.11 -5.05 49.87 C-5.8 49.87 -6.54 49.87 -7.31 49.88 C-13.94 49.38 -19.04 46.06 -24.68 42.81 C-27.34 41.36 -29.13 40.63 -32 40 C-39.35 36.02 -44.88 29.14 -49 22 C-49.88 18.3 -49.88 18.3 -50 15 C-46.96 10.86 -43.97 9.12 -39 8 C-38.07 8.06 -37.14 8.12 -36.19 8.19 C-29.43 7.79 -24.1 3.11 -19 -1 C-13.1 -4.54 -5.81 -3.01 0 0 Z \",fill:\"#482859\",transform:\"translate(1055,646)\"})),_path75||(_path75=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 0 2.88 0 6 1 C7.49 3.28 8.14 5.38 9 8 C9.66 7.67 10.32 7.34 11 7 C13.66 16.16 13.48 26.13 11.47 35.45 C9.03 48.62 10.92 63.09 17 75 C17.51 75.41 18.03 75.83 18.56 76.26 C20.78 78.95 20.46 81.39 20.55 84.83 C20.58 85.83 20.58 85.83 20.61 86.85 C20.65 88.26 20.68 89.67 20.71 91.09 C20.75 93.23 20.81 95.37 20.88 97.51 C21.05 103.8 20.99 109.76 20 116 C19.94 117.48 19.91 118.96 19.94 120.44 C19.96 121.61 19.98 122.79 20 124 C20.99 124.5 20.99 124.5 22 125 C20.72 126.71 19.38 128.37 18 130 C17.34 130 16.68 130 16 130 C16.33 126.37 16.66 122.74 17 119 C12.19 125.13 12.19 125.13 9.76 132.29 C10.04 134.37 10.04 134.37 11 137 C17.18 134 21.85 128.8 24.44 122.5 C24.72 121.26 24.72 121.26 25 120 C25.99 120 26.98 120 28 120 C27.67 119.01 27.34 118.02 27 117 C27.99 116.67 28.98 116.34 30 116 C31.6 114.17 31.6 114.17 33.06 112 C35.8 108.1 35.8 108.1 38 107 C37.67 106.34 37.34 105.68 37 105 C37.64 104.75 38.28 104.5 38.94 104.25 C41.19 103.18 41.19 103.18 41.75 100.88 C41.83 100.26 41.91 99.64 42 99 C40.35 98.34 38.7 97.68 37 97 C37.66 96.67 38.32 96.34 39 96 C39 95.34 39 94.68 39 94 C38.04 93.81 38.04 93.81 37.06 93.62 C36.38 93.42 35.7 93.21 35 93 C32.94 88.88 34.33 83.43 35 79 C36.61 75.05 38.07 72.93 41 70 C41.34 70.48 41.68 70.96 42.02 71.46 C42.69 72.41 42.69 72.41 43.38 73.38 C43.82 74 44.26 74.63 44.71 75.27 C46.03 77.12 46.03 77.12 48 79 C48 79.66 48 80.32 48 81 C48.66 81.66 49.32 82.32 50 83 C50.12 86.5 50.12 86.5 50 90 C50 90.66 50 91.32 50 92 C50.33 92 50.66 92 51 92 C51.16 92.55 51.32 93.09 51.48 93.65 C53.31 99.56 55.83 104.7 59 110 C59.99 110 60.98 110 62 110 C62.55 116.29 60.99 119.46 57.75 124.56 C52.77 132.86 48.34 142.05 49 152 C49.33 152.99 49.66 153.98 50 155 C50.66 155 51.32 155 52 155 C53.25 157.49 53.13 159.19 53.13 161.98 C53.13 162.98 53.14 163.98 53.14 165.01 C53.13 166.06 53.13 167.11 53.12 168.19 C53.13 169.22 53.13 170.25 53.14 171.31 C53.12 182.82 51.5 191.48 45.12 201.18 C43.87 203.09 43.87 203.09 42.94 205.75 C42 208 42 208 40.14 209.8 C33.73 216.39 31.55 224.35 31.27 233.29 C30.87 238.74 29.65 243.96 28.46 249.29 C25.23 261.21 25.23 261.21 26.98 272.86 C28.31 275.64 28.34 277.93 28.46 281 C28.52 282.19 28.57 283.37 28.63 284.6 C28.69 285.87 28.75 287.13 28.81 288.44 C29.39 298.85 30.6 308.6 33.41 318.65 C33.63 319.44 33.85 320.22 34.07 321.04 C34.38 322.05 34.38 322.05 34.69 323.08 C35.05 325.32 34.68 326.85 34 329 C29.67 317.73 27.87 306.52 26.43 294.56 C25.49 286.84 24.04 279.5 22 272 C21.48 269.9 20.96 267.79 20.44 265.69 C19.96 263.79 19.48 261.9 19 260 C18.81 259.25 18.63 258.5 18.44 257.73 C18.02 256.13 17.52 254.56 17 253 C16.34 252.67 15.68 252.34 15 252 C9.66 238.09 9.51 223.93 15.36 210.39 C16.78 207.46 18.14 204.67 20 202 C20.66 202 21.32 202 22 202 C23.35 199.82 24.68 197.64 26 195.44 C26.38 194.83 26.76 194.22 27.16 193.59 C29.75 189.22 30.38 186.19 30 181 C30.32 178.6 30.79 176.49 31.73 174.25 C33.73 169.29 34.06 165.35 33.81 160 C33.53 152.35 34.97 145.3 36.75 137.88 C37 136.8 37.25 135.72 37.51 134.61 C39.83 125.38 42.92 120.55 50.39 114.61 C52.35 113.03 52.35 113.03 52 110 C48.95 109.02 47.05 109.02 44 110 C44 110.66 44 111.32 44 112 C43.44 112.07 42.89 112.13 42.31 112.2 C37.98 113.11 35.63 114.21 32.83 117.74 C30.78 121.12 28.87 124.52 27 128 C23.71 133.81 20.37 138.99 15.87 143.93 C13.74 146.28 11.74 148.72 9.75 151.19 C9.11 151.99 8.46 152.78 7.8 153.61 C5.13 157.17 3.2 160.41 1.75 164.62 C-0.49 170.9 -4.28 177.28 -9 182 C-9.99 182 -10.98 182 -12 182 C-12 183.32 -12 184.64 -12 186 C-11.34 186.33 -10.68 186.66 -10 187 C-11.49 187.99 -11.49 187.99 -13 189 C-15.66 183.68 -13.98 175.67 -13 170 C-12.34 169.01 -11.68 168.02 -11 167 C-8.78 162.13 -6.98 157.19 -5.25 152.12 C-0.72 139.15 4.23 126.88 11.27 115.05 C13.32 111.44 14.74 107.94 16 104 C14.7 104.99 14.7 104.99 13.38 106 C9.77 108.13 8.09 108.65 4 108 C3.34 107.01 2.68 106.02 2 105 C2.63 104.75 3.25 104.49 3.9 104.23 C5.12 103.71 5.12 103.71 6.38 103.19 C7.19 102.85 8 102.51 8.84 102.17 C11.3 101.06 11.3 101.06 13 98 C13.66 93.82 12.96 91.53 10.62 88.12 C9.37 86.34 9.37 86.34 8 85 C7.34 85 6.68 85 6 85 C6 86.32 6 87.64 6 89 C5.48 88.65 4.97 88.3 4.44 87.94 C1.03 86.63 -1.47 87.28 -5 88 C-5.99 88.5 -5.99 88.5 -7 89 C-8.88 89.13 -8.88 89.13 -11 89.12 C-12.05 89.13 -12.05 89.13 -13.12 89.13 C-15 89 -15 89 -17 88 C-16.79 87.38 -16.59 86.76 -16.38 86.12 C-16.25 85.42 -16.13 84.72 -16 84 C-16.66 83.34 -17.32 82.68 -18 82 C-19.25 68.46 -16.58 55.37 -10.95 43.09 C-9.89 40.76 -8.93 38.39 -8 36 C-9.49 36.5 -9.49 36.5 -11 37 C-10.94 36.4 -10.89 35.79 -10.83 35.17 C-9.36 19.09 -9.36 19.09 -8 3 C-7.67 3 -7.34 3 -7 3 C-6.67 4.98 -6.34 6.96 -6 9 C-5.38 8.17 -4.76 7.35 -4.12 6.5 C-3.42 5.67 -2.72 4.85 -2 4 C-1.34 4 -0.68 4 0 4 C-0.33 3.01 -0.66 2.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#341047\",transform:\"translate(545,610)\"})),_path76||(_path76=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28 0.88 2.55 1.78 3.81 2.69 C4.52 3.19 5.23 3.69 5.96 4.2 C10.48 8.19 11.76 13.17 13.31 18.81 C14.98 24.56 16.77 29.02 20.86 33.52 C22 35 22 35 22 38 C22.57 38.23 23.15 38.46 23.74 38.7 C26.6 40.35 28.13 42.29 30.19 44.88 C31.38 46.36 31.38 46.36 32.59 47.88 C34.86 50.82 37.06 53.81 39.25 56.81 C47.08 67.29 55.77 76.6 66.33 84.36 C71.95 88.51 75.11 92.24 77 99 C77.66 99 78.32 99 79 99 C80.62 101.5 80.62 101.5 82 104 C82 103.67 82 103.34 82 103 C81.34 102.34 80.68 101.68 80 101 C80.38 98.88 80.38 98.88 81 97 C81.99 98.65 82.98 100.3 84 102 C84.87 101.75 85.73 101.5 86.62 101.25 C90.99 100.93 92.63 102.36 96 105 C95.5 106.49 95.5 106.49 95 108 C95.99 108.99 96.98 109.98 98 111 C97.5 112.49 97.5 112.49 97 114 C98.22 114.1 99.43 114.21 100.69 114.31 C104.45 114.77 106.82 115.88 110 118 C110.7 118.16 111.4 118.33 112.12 118.5 C114 119 114 119 115.24 120.29 C121.24 126.13 129.87 130.33 137.68 133.11 C140.56 134.22 143.24 135.61 146 137 C148.9 138.37 151.82 139.69 154.75 141 C155.54 141.36 156.34 141.71 157.15 142.08 C162.13 144.28 167.02 146.12 172.35 147.33 C172.89 147.55 173.44 147.77 174 148 C174.33 148.99 174.66 149.98 175 151 C176.91 151.49 178.82 151.96 180.75 152.38 C184.59 153.44 187.79 155.53 191.19 157.56 C198.8 161.98 206.56 165.56 214.74 168.78 C220.39 171.07 225.58 173.71 230 178 C230.33 178.99 230.66 179.98 231 181 C231.78 181.54 232.57 182.07 233.38 182.62 C236.19 185.17 236.42 185.94 237.31 189.44 C238.4 193.16 239.47 194.83 242.75 196.94 C246.36 198.89 250.06 199.88 254 201 C256.6 202.82 258.71 204.69 260.88 207 C263.08 209.08 265.39 210.37 268.02 211.84 C271.45 213.84 274.68 216.11 277.94 218.38 C278.64 218.86 279.34 219.34 280.06 219.84 C290.07 226.8 290.07 226.8 294 230 C294 230.66 294 231.32 294 232 C294.71 232.22 295.42 232.45 296.15 232.68 C303.64 236.16 310.71 244.48 314 252 C314 252.99 314 253.98 314 255 C313.34 255 312.68 255 312 255 C311.16 253.42 311.16 253.42 310.31 251.81 C308.34 248.32 305.88 245.8 303 243 C303 242.34 303 241.68 303 241 C302.2 240.66 302.2 240.66 301.38 240.31 C298.84 238.91 296.78 237.19 294.59 235.3 C293 234 291.36 232.91 289.62 231.81 C288.76 231.21 287.89 230.62 287 230 C287 229.34 287 228.68 287 228 C286.27 227.72 285.54 227.45 284.78 227.16 C276.7 223.79 269.57 218.4 262.47 213.34 C254.24 207.7 245.94 203.51 236.62 199.94 C234.51 199.11 232.4 198.29 230.29 197.46 C229.25 197.06 228.21 196.66 227.15 196.24 C219.69 193.3 212.32 190.23 205.12 186.69 C198.99 183.74 192.73 181.39 186.31 179.12 C176.45 175.63 166.94 171.6 157.47 167.15 C154.93 165.97 152.39 164.8 149.84 163.64 C135.45 157.01 135.45 157.01 129.36 152.67 C120.71 146.55 112.21 141.01 102 138 C100.33 136.67 98.66 135.34 97 134 C95.35 133.32 93.68 132.68 92 132.06 C87.63 130.41 85.11 128.56 82 125 C77.86 121.08 74.46 120.11 69 119 C69 118.34 69 117.68 69 117 C68.39 116.82 67.77 116.64 67.14 116.45 C66.33 116.2 65.52 115.95 64.69 115.69 C63.89 115.44 63.09 115.2 62.26 114.95 C59.84 113.93 58.8 112.87 57 111 C55.37 110 53.72 109.02 52.06 108.06 C47.25 105.06 43.3 101.68 39.31 97.69 C38.78 97.16 38.25 96.63 37.71 96.09 C34 92.27 34 92.27 34 90 C33.34 90 32.68 90 32 90 C26.14 78.99 21.59 67.96 17.69 56.12 C17.14 54.48 16.58 52.84 16.03 51.2 C14.34 46.14 12.67 41.07 11 36 C10.45 34.32 9.89 32.64 9.34 30.97 C7.78 26.23 6.23 21.49 4.69 16.75 C4.45 16.01 4.21 15.27 3.96 14.51 C3.28 12.44 2.62 10.37 1.95 8.3 C1.57 7.12 1.19 5.95 0.8 4.75 C0 2 0 2 0 0 Z \",fill:\"#290E3D\",transform:\"translate(868,582)\"})),_path77||(_path77=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17 0.04 2.34 0.07 3.55 0.11 C4.44 0.16 5.33 0.2 6.25 0.25 C3.35 2.18 2.35 2.55 -0.94 2.88 C-2.82 3.06 -2.82 3.06 -4.75 3.25 C-4.07 3.24 -3.4 3.23 -2.7 3.21 C-1.81 3.21 -0.92 3.2 0 3.19 C1.32 3.17 1.32 3.17 2.67 3.15 C5.03 3.24 6.99 3.58 9.25 4.25 C9.25 4.91 9.25 5.57 9.25 6.25 C10.24 6.75 10.24 6.75 11.25 7.25 C7.62 7.91 3.99 8.57 0.25 9.25 C6.19 9.58 12.13 9.91 18.25 10.25 C18.25 10.58 18.25 10.91 18.25 11.25 C15.44 11.73 12.63 12.21 9.81 12.69 C9.03 12.82 8.25 12.96 7.44 13.1 C2.66 13.9 -2.08 14.52 -6.92 14.89 C-8.99 15.12 -8.99 15.12 -10.75 17.25 C-14.31 18.44 -17.19 18.35 -20.94 18.31 C-22.21 18.3 -23.48 18.29 -24.79 18.29 C-26.26 18.27 -26.26 18.27 -27.75 18.25 C-27.75 18.58 -27.75 18.91 -27.75 19.25 C-28.43 19.38 -29.1 19.52 -29.8 19.65 C-31.13 19.92 -31.13 19.92 -32.5 20.19 C-33.82 20.45 -33.82 20.45 -35.17 20.71 C-37.38 21.17 -39.56 21.7 -41.75 22.25 C-42.6 22.39 -43.44 22.54 -44.31 22.69 C-46.99 23.15 -46.99 23.15 -49.75 25.25 C-47.44 27.89 -45.13 30.53 -42.75 33.25 C-42.75 30.35 -44.23 28.65 -45.75 26.25 C-44.76 25.75 -44.76 25.75 -43.75 25.25 C-43.17 26.05 -42.6 26.86 -42 27.69 C-39.73 30.27 -39.05 30.93 -35.75 31.25 C-34.76 31.25 -33.77 31.25 -32.75 31.25 C-33.41 31.91 -34.07 32.57 -34.75 33.25 C-34.81 35.37 -34.81 35.37 -34.44 37.69 C-34.29 38.86 -34.29 38.86 -34.14 40.06 C-33.78 42.42 -33.78 42.42 -32.75 45.25 C-32.77 47.19 -32.77 47.19 -33 49.25 C-33.07 49.93 -33.13 50.61 -33.2 51.31 C-33.92 53.85 -34.54 54.78 -36.75 56.25 C-39.69 56.37 -39.69 56.37 -43.31 56.12 C-49.73 55.88 -55.39 56.84 -61.56 58.56 C-62.74 58.88 -62.74 58.88 -63.93 59.21 C-68.63 60.57 -68.63 60.57 -71.75 64.25 C-72.44 71.5 -73.19 80.01 -69.27 86.43 C-67.35 88.73 -65.2 90.7 -63 92.75 C-58.53 97 -55.77 101.29 -53.06 106.75 C-52.71 107.46 -52.36 108.16 -52 108.89 C-51.17 110.64 -50.45 112.44 -49.75 114.25 C-50.08 114.91 -50.41 115.57 -50.75 116.25 C-51.41 115.59 -52.07 114.93 -52.75 114.25 C-53.27 113.8 -53.78 113.34 -54.31 112.88 C-55.99 110.98 -56.16 109.67 -56.75 107.25 C-57.97 105.32 -57.97 105.32 -59.75 103.25 C-60.17 102.7 -60.6 102.15 -61.04 101.58 C-63.6 98.38 -65.85 95.99 -69.5 94.06 C-72.93 92.15 -73.45 91.74 -74.75 88.25 C-75.16 85.45 -75.16 85.45 -75.38 82.5 C-75.45 81.52 -75.52 80.53 -75.6 79.52 C-75.65 78.77 -75.7 78.02 -75.75 77.25 C-78.07 81.89 -76.75 86.62 -75.25 91.31 C-73.02 98.39 -73.02 98.39 -73.75 102.25 C-76.7 105.4 -78.15 106.22 -82.52 106.42 C-83.87 106.3 -85.22 106.16 -86.56 106 C-87.26 105.93 -87.95 105.87 -88.66 105.8 C-90.36 105.64 -92.06 105.45 -93.75 105.25 C-92.08 117.71 -89.56 128.94 -83.39 139.98 C-81.42 143.57 -80.28 146.12 -80.75 150.25 C-80.11 149.94 -79.47 149.63 -78.81 149.31 C-76.04 148.35 -74.52 148.19 -71.69 148.12 C-65.99 147.62 -62.23 144.5 -57.7 141.24 C-55.01 139.43 -52.58 138.22 -49.56 137.06 C-46.24 135.8 -46.24 135.8 -44.62 132.62 C-44.59 130.23 -44.59 130.23 -45.75 128.25 C-45.09 127.59 -44.43 126.93 -43.75 126.25 C-40.68 132.64 -40.68 132.64 -40.98 135.22 C-41.99 137.88 -43.07 138.38 -45.57 139.69 C-46.36 140.11 -47.14 140.53 -47.94 140.96 C-49.18 141.6 -49.18 141.6 -50.44 142.25 C-52.05 143.1 -53.65 143.96 -55.26 144.81 C-56.42 145.42 -56.42 145.42 -57.6 146.05 C-59.52 147.12 -61.3 148.26 -63.09 149.52 C-66.32 151.62 -68.96 151.88 -72.75 152.25 C-73.08 152.58 -73.41 152.91 -73.75 153.25 C-73.65 154.2 -73.56 155.15 -73.46 156.13 C-73.1 160.07 -73.02 163.35 -73.75 167.25 C-76.91 170.83 -80.64 172.9 -84.75 175.25 C-85.94 176.22 -87.12 177.21 -88.25 178.25 C-90.75 180.25 -90.75 180.25 -93.75 180.25 C-93.75 178.27 -93.75 176.29 -93.75 174.25 C-91.75 173.25 -91.75 173.25 -88.75 172.25 C-88.23 171.73 -87.72 171.22 -87.19 170.69 C-86.71 170.21 -86.24 169.74 -85.75 169.25 C-85.09 169.25 -84.43 169.25 -83.75 169.25 C-81.7 167.41 -81.7 167.41 -80.75 165.25 C-80.09 165.25 -79.43 165.25 -78.75 165.25 C-78.68 162.24 -78.69 159.52 -79.31 156.56 C-79.75 154.25 -79.75 154.25 -78.75 151.25 C-79.74 151.25 -80.73 151.25 -81.75 151.25 C-81.79 151.97 -81.83 152.69 -81.88 153.44 C-83.76 159.49 -90.73 162.6 -95.89 165.72 C-97.87 167.11 -97.87 167.11 -98.61 169.24 C-98.83 172.35 -97.14 174.52 -95.75 177.25 C-96.08 178.24 -96.41 179.23 -96.75 180.25 C-101.39 172.53 -104.4 164.94 -106.75 156.25 C-108.4 156.58 -110.05 156.91 -111.75 157.25 C-112.71 155.21 -113.67 153.17 -114.62 151.12 C-115.16 149.99 -115.69 148.85 -116.24 147.68 C-117.75 144.25 -117.75 144.25 -118.82 140.88 C-119.46 138.11 -119.46 138.11 -121.75 137.25 C-121.75 136.26 -121.75 135.27 -121.75 134.25 C-122.41 134.25 -123.07 134.25 -123.75 134.25 C-123.91 133.48 -124.07 132.72 -124.23 131.93 C-126.02 123.4 -127.99 114.92 -130.04 106.45 C-130.24 105.59 -130.45 104.73 -130.66 103.84 C-130.85 103.08 -131.03 102.31 -131.23 101.52 C-131.61 99.87 -131.95 98.2 -132.26 96.53 C-132.53 94.29 -132.53 94.29 -133.75 93.25 C-133.82 91.56 -133.83 89.87 -133.81 88.19 C-133.8 87.27 -133.79 86.35 -133.79 85.4 C-133.77 84.69 -133.76 83.98 -133.75 83.25 C-133.09 83.25 -132.43 83.25 -131.75 83.25 C-132.08 81.93 -132.41 80.61 -132.75 79.25 C-132.09 79.25 -131.43 79.25 -130.75 79.25 C-130.75 80.9 -130.75 82.55 -130.75 84.25 C-129.43 84.25 -128.11 84.25 -126.75 84.25 C-125.27 86 -125.27 86 -124 88.25 C-123.57 88.99 -123.14 89.74 -122.7 90.5 C-122.23 91.37 -122.23 91.37 -121.75 92.25 C-120.76 91.75 -120.76 91.75 -119.75 91.25 C-119.75 91.91 -119.75 92.57 -119.75 93.25 C-118.76 93.58 -117.77 93.91 -116.75 94.25 C-117.74 94.75 -117.74 94.75 -118.75 95.25 C-117.43 95.25 -116.11 95.25 -114.75 95.25 C-114.06 92.76 -113.75 90.87 -113.75 88.25 C-112.73 85.25 -112.01 83.51 -109.75 81.25 C-109.42 80.59 -109.09 79.93 -108.75 79.25 C-107.75 77.25 -107.75 77.25 -105.75 75.25 C-107.15 68.87 -109.43 65 -114.56 60.75 C-115.75 59.25 -115.75 59.25 -116.25 56.25 C-115.75 53.25 -115.75 53.25 -113.56 51.38 C-110.69 50.23 -108.8 49.99 -105.75 50.25 C-105.75 50.91 -105.75 51.57 -105.75 52.25 C-103.77 51.75 -103.77 51.75 -101.75 51.25 C-99.75 54.25 -99.75 54.25 -99.44 57.75 C-99.13 61.32 -99.13 61.32 -96.62 62.94 C-95.68 63.37 -94.73 63.8 -93.75 64.25 C-92.47 64.97 -91.2 65.7 -89.94 66.44 C-88.89 67.04 -87.83 67.63 -86.75 68.25 C-86.75 68.91 -86.75 69.57 -86.75 70.25 C-85.1 70.58 -83.45 70.91 -81.75 71.25 C-82.06 69.5 -82.37 67.75 -82.69 66 C-82.86 65.03 -83.04 64.05 -83.21 63.05 C-84.04 58.52 -84.04 58.52 -85.79 54.31 C-86.94 51.83 -87.05 49.98 -87.06 47.25 C-87.08 46.4 -87.1 45.56 -87.11 44.69 C-86.37 39.7 -82.22 36.64 -78.75 33.25 C-77.9 32.36 -77.06 31.48 -76.19 30.56 C-71.53 26.15 -67.63 25.94 -61.41 25.59 C-58.75 25.25 -57.04 24.59 -54.75 23.25 C-54.75 22.59 -54.75 21.93 -54.75 21.25 C-52.44 20.92 -50.13 20.59 -47.75 20.25 C-47.75 19.59 -47.75 18.93 -47.75 18.25 C-44.12 16.6 -40.49 14.95 -36.75 13.25 C-36.75 13.91 -36.75 14.57 -36.75 15.25 C-36.34 14.75 -35.93 14.25 -35.51 13.73 C-33.75 12.25 -33.75 12.25 -31.8 12.14 C-31.09 12.26 -30.37 12.38 -29.62 12.5 C-28.83 12.61 -28.03 12.73 -27.21 12.84 C-25.63 13.1 -24.05 13.37 -22.48 13.66 C-16.54 14.57 -12.27 13.56 -6.75 11.25 C-8.07 10.59 -9.39 9.93 -10.75 9.25 C-11.1 6.09 -11.08 4.69 -9.16 2.09 C-5.95 -0.36 -3.98 -0.16 0 0 Z \",fill:\"#0C0F38\",transform:\"translate(708.75,807.75)\"})),_path78||(_path78=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 5 3 C8.11 2.95 8.11 2.95 11.5 2.5 C17.67 1.78 17.67 1.78 21 4 C22.95 4.21 22.95 4.21 25.05 4.05 C25.83 4.03 26.61 4.01 27.42 3.98 C29.05 3.91 30.68 3.83 32.31 3.75 C36.31 3.63 38.44 3.67 41.96 5.74 C44 8 44.88 9.42 45.69 12.31 C45.92 13.1 46.16 13.89 46.41 14.7 C46.91 16.66 47.31 18.64 47.69 20.62 C49.33 24.84 51.61 26.46 55.04 29.27 C60.57 34.14 61.66 40.18 63.21 47.09 C63.93 49.75 64.8 51.7 66.19 54.06 C69.84 60.92 68.43 68.24 66.44 75.44 C63.29 84.75 58.76 94.77 50 100 C45.54 101.72 41.76 102.23 37 102 C36.67 101.01 36.34 100.02 36 99 C32.25 97.38 29.06 96.58 25 97 C22.4 98.5 22.4 98.5 19.94 100.5 C15.43 104 15.43 104 11 104 C11 104.66 11 105.32 11 106 C10.01 106.66 9.02 107.32 8 108 C6.51 116.11 6.78 124.46 6.68 132.69 C6.66 134.23 6.64 135.78 6.62 137.32 C6.58 140.57 6.54 143.81 6.5 147.06 C6.45 151.11 6.4 155.16 6.34 159.21 C6.28 163.18 6.23 167.15 6.18 171.12 C6.17 172.31 6.17 172.31 6.15 173.51 C6.05 182.05 5.98 190.59 6.04 199.14 C6.05 199.87 6.05 200.61 6.06 201.37 C6.08 204.82 6.1 208.26 6.15 211.71 C6.22 221.45 5.16 230.12 4 240 C-14.15 240 -32.3 240 -51 240 C-49.72 229.77 -49.72 229.77 -45 226 C-43.19 224.96 -41.35 223.96 -39.5 223 C-34.67 220.48 -31.84 218.68 -29 214 C-28.64 212.49 -28.33 210.97 -28.06 209.44 C-27.46 206.03 -26.84 204.38 -24.12 202.19 C-23.09 201.47 -22.06 200.74 -21 200 C-18.58 197.94 -17.19 196.7 -16.35 193.61 C-16.28 192.71 -16.2 191.82 -16.13 190.9 C-16.03 189.87 -15.94 188.84 -15.84 187.77 C-15.75 186.65 -15.66 185.53 -15.56 184.38 C-15.33 181.94 -15.09 179.51 -14.85 177.08 C-14.72 175.78 -14.59 174.48 -14.45 173.14 C-13.75 166.5 -12.8 159.89 -11.83 153.28 C-11.61 151.82 -11.4 150.36 -11.19 148.9 C-7.1 120.24 -7.1 120.24 2.57 109.65 C4.2 107.86 4.2 107.86 5.81 104.94 C7.94 102.09 9.23 101.1 12.19 99.31 C18.1 95.6 21.78 90.46 26 85 C26.73 84.17 27.45 83.34 28.2 82.49 C34.64 75.09 38.56 66.99 38 57 C36.13 52.44 32.63 49.74 28.94 46.65 C28.3 46.1 27.66 45.56 27 45 C26.42 44.58 25.85 44.16 25.25 43.73 C23.14 40.81 23.55 38.47 24 35 C25.97 32.26 25.97 32.26 28.5 29.69 C31.77 25.96 33.65 23.66 33.69 18.62 C33.33 15.18 32.91 11.95 31 9 C27.27 7.41 24.3 8.51 20.5 9.5 C14.56 10.87 9.72 11.01 3.71 10.26 C-0.03 9.9 -3.31 10.36 -7 11 C-7.12 10.36 -7.25 9.72 -7.38 9.06 C-7.58 8.38 -7.79 7.7 -8 7 C-8.66 6.67 -9.32 6.34 -10 6 C-8.71 5.19 -7.42 4.37 -6.12 3.56 C-5.41 3.11 -4.69 2.66 -3.95 2.19 C-2 1 -2 1 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(1104,1040)\"})),_path79||(_path79=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43 3.85 0.56 6.77 -0.38 10.69 C-1.34 14.89 -2.19 18.95 -2.56 23.25 C-3 27 -3 27 -5 29 C-5.28 31.53 -5.47 33.97 -5.56 36.5 C-5.88 43.76 -5.88 43.76 -7 46 C-7.55 52.12 -5.96 56.44 -3.62 61.94 C2.59 76.83 2.59 76.83 1.14 82.17 C0.42 83.66 0.42 83.66 -0.31 85.19 C-6.74 98.63 -4.32 116.46 -4.41 131.07 C-4.42 133.82 -4.46 136.57 -4.51 139.32 C-4.58 143.34 -4.6 147.34 -4.62 151.36 C-4.66 153.19 -4.66 153.19 -4.71 155.05 C-4.69 162.39 -3.65 166.89 0.81 172.8 C2 175 2 175 1.78 177.61 C1 180 1 180 -0.58 182.75 C-2.47 187.07 -2.15 190.44 -1.75 195.06 C-1.7 195.85 -1.64 196.64 -1.59 197.46 C-1.31 201.39 -0.8 205.14 0 209 C0.55 216.02 0.23 222.62 -3 229 C-4.61 230.75 -4.61 230.75 -6 232 C-6.99 231.67 -7.98 231.34 -9 231 C-9 230.34 -9 229.68 -9 229 C-9.63 228.8 -10.26 228.59 -10.91 228.38 C-13 227 -13 227 -13.91 224.24 C-14.1 223.13 -14.3 222.02 -14.5 220.88 C-15.67 215.25 -16.78 210.79 -20 206 C-22.93 204.59 -22.93 204.59 -26 205 C-28.4 205.99 -28.4 205.99 -30 208 C-30.38 209.66 -30.71 211.32 -31 213 C-32.53 215.4 -33.45 216.72 -36 218 C-36.27 219.64 -36.53 221.28 -36.72 222.94 C-38.18 233.77 -41.91 244.49 -46 254.56 C-46.32 255.38 -46.64 256.19 -46.97 257.03 C-49.35 262.65 -49.35 262.65 -52.69 264.46 C-53.45 264.64 -54.21 264.82 -55 265 C-55.33 265.33 -55.66 265.66 -56 266 C-58.94 266.19 -58.94 266.19 -62 266 C-62.66 265.34 -63.32 264.68 -64 264 C-69.35 268.2 -70.93 274.78 -73 281 C-73.99 280.67 -74.98 280.34 -76 280 C-79.57 285.35 -81.62 291.44 -83.31 297.62 C-84.88 303.13 -87.21 308.26 -89.58 313.47 C-91 316.62 -92.23 319.62 -93 323 C-93.66 323 -94.32 323 -95 323 C-93.1 315.58 -90.81 308.42 -88.12 301.25 C-85.28 293.56 -82.57 285.86 -80.03 278.07 C-79.17 275.5 -78.22 273.01 -77.19 270.5 C-75.92 266.75 -75.93 263.92 -76 260 C-75.25 256.62 -75.25 256.62 -74 254 C-73.36 253.91 -72.72 253.82 -72.07 253.72 C-71.38 253.48 -70.7 253.25 -70 253 C-68.65 250.24 -68.65 250.24 -67.69 246.81 C-65.56 240.22 -62.78 234.28 -59.55 228.16 C-58.07 225.14 -57.01 222.2 -56 219 C-55.42 217.57 -54.82 216.16 -54.19 214.75 C-53.84 213.97 -53.49 213.2 -53.14 212.39 C-52.39 210.83 -51.6 209.28 -50.77 207.76 C-47.58 201.93 -45.85 196.24 -44.43 189.8 C-43.71 186.57 -42.87 183.71 -41.52 180.69 C-39.56 175.94 -38.74 171.23 -37.88 166.19 C-37.54 164.31 -37.21 162.42 -36.87 160.54 C-36.72 159.72 -36.58 158.89 -36.43 158.04 C-36 156 -36 156 -35 154 C-34.86 152.99 -34.71 151.98 -34.56 150.94 C-33.94 146.55 -33.03 142.31 -32 138 C-31.71 136.78 -31.42 135.55 -31.12 134.29 C-30.79 132.92 -30.46 131.55 -30.12 130.19 C-29.96 129.49 -29.79 128.8 -29.61 128.08 C-28.57 123.91 -27.28 119.96 -25.75 115.94 C-24.18 111.45 -23.88 107.87 -24.06 103.12 C-24.34 94.44 -22.29 86.59 -20.23 78.2 C-19.22 74.06 -18.48 69.97 -17.94 65.75 C-16.99 58.9 -14.52 53.09 -11.49 46.92 C-9.4 42.03 -8.88 36.86 -8.12 31.62 C-4.7 9.41 -4.7 9.41 0 0 Z \",fill:\"#341047\",transform:\"translate(471,252)\"})),_path80||(_path80=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.66 5.38 1.19 8.89 -1.55 13.51 C-5.9 20.99 -9.16 28.71 -12 36.88 C-14.12 42.87 -16.26 48.8 -18.81 54.62 C-20.86 59.37 -22.09 64.1 -23.26 69.13 C-24.41 73.6 -26.22 77.75 -28 82 C-28.79 83.93 -29.56 85.87 -30.31 87.81 C-30.83 89.12 -30.83 89.12 -31.36 90.46 C-32.1 93.38 -31.93 95.15 -31 98 C-30.34 98.33 -29.68 98.66 -29 99 C-28.35 100.29 -27.75 101.61 -27.19 102.94 C-25.8 105.83 -25.32 106.81 -22.5 108.5 C-19.77 109.13 -19.77 109.13 -16 109 C-16.25 110.44 -16.25 110.44 -16.5 111.9 C-17.15 116.47 -17.02 120.96 -16.94 125.56 C-16.82 138.47 -17.38 151.35 -17.94 164.25 C-17.98 165.29 -18.02 166.33 -18.07 167.41 C-18.2 170.4 -18.33 173.4 -18.46 176.39 C-18.52 177.75 -18.52 177.75 -18.58 179.15 C-18.62 179.99 -18.66 180.83 -18.7 181.7 C-18.75 182.81 -18.75 182.81 -18.8 183.93 C-19 186.04 -19.43 187.97 -20 190 C-21.32 189.67 -22.64 189.34 -24 189 C-24.08 187.7 -24.16 186.4 -24.25 185.06 C-24.63 181.45 -25.44 178.74 -27.06 175.5 C-28.97 171.55 -29.29 168.62 -29.08 164.28 C-28.99 161.83 -29.14 159.5 -29.38 157.06 C-29.48 155.97 -29.48 155.97 -29.59 154.85 C-29.88 152.76 -29.88 152.76 -32 151 C-31.34 151 -30.68 151 -30 151 C-29.67 147.04 -29.34 143.08 -29 139 C-29.33 140.11 -29.66 141.23 -30 142.38 C-31.02 144.85 -31.52 145.78 -33.98 146.91 C-36.19 147.44 -36.19 147.44 -40 148 C-39.67 146.89 -39.34 145.77 -39 144.62 C-37.91 140.67 -37.97 138.85 -39 135 C-39.66 135 -40.32 135 -41 135 C-41.06 134.37 -41.12 133.75 -41.18 133.1 C-41.27 132.28 -41.35 131.47 -41.44 130.62 C-41.52 129.81 -41.6 129 -41.68 128.16 C-41.89 125.96 -41.89 125.96 -43 124 C-45.31 123.27 -47.65 122.6 -50 122 C-50.33 120.68 -50.66 119.36 -51 118 C-56.81 117.08 -60.12 119.66 -64.73 122.79 C-65.48 123.19 -66.23 123.59 -67 124 C-70 123 -70 123 -71 122 C-72.68 122.29 -74.34 122.62 -76 123 C-74.35 123.33 -72.7 123.66 -71 124 C-71 124.33 -71 124.66 -71 125 C-73.73 125.28 -76.45 125.52 -79.19 125.75 C-79.96 125.83 -80.73 125.91 -81.52 126 C-85.45 126.3 -87.4 126.36 -90.87 124.28 C-92.83 122.18 -94.42 120.19 -95.94 117.75 C-97.83 114.78 -99.77 111.95 -101.94 109.19 C-112 95.95 -112 95.95 -112 90 C-110.02 90 -108.04 90 -106 90 C-106 87.64 -106.08 85.34 -106.22 82.99 C-106.26 82.23 -106.31 81.47 -106.36 80.69 C-106.4 79.91 -106.45 79.12 -106.5 78.31 C-106.55 77.52 -106.6 76.72 -106.64 75.9 C-106.76 73.93 -106.88 71.97 -107 70 C-107.66 70 -108.32 70 -109 70 C-109.5 67.53 -109.5 67.53 -110 65 C-111.98 64.67 -113.96 64.34 -116 64 C-116 63.34 -116 62.68 -116 62 C-114.71 61.64 -113.42 61.29 -112.12 60.94 C-111.41 60.74 -110.69 60.54 -109.95 60.34 C-108 60 -108 60 -106 61 C-105.31 62.99 -104.64 64.99 -104 67 C-103.34 67.99 -102.68 68.98 -102 70 C-101.91 72.42 -101.91 72.42 -102.06 75.19 C-102.18 80.57 -101.11 84.08 -99 89 C-99 89.99 -99 90.98 -99 92 C-97.07 93.15 -97.07 93.15 -95 93 C-94.78 90.77 -94.78 90.77 -96.94 88.88 C-99.71 85.01 -99.92 82.74 -100 78 C-98.77 76.26 -98.77 76.26 -97 75 C-94.98 74.78 -94.98 74.78 -92.75 74.94 C-88.42 75.08 -85.18 74.23 -81 73 C-77.34 72.54 -73.68 72.12 -70.01 71.76 C-66.93 71.34 -66.93 71.34 -65.75 69.14 C-65.51 68.43 -65.26 67.73 -65 67 C-63.25 64.65 -61.43 62.65 -59 61 C-55.62 61.12 -55.62 61.12 -53 62 C-53.08 61.4 -53.17 60.79 -53.25 60.17 C-53.41 58.97 -53.41 58.97 -53.56 57.75 C-53.72 56.57 -53.72 56.57 -53.88 55.36 C-54 52.99 -53.7 51.25 -53 49 C-53.66 49 -54.32 49 -55 49 C-55.66 44.38 -56.32 39.76 -57 35 C-57.66 35 -58.32 35 -59 35 C-59.66 31.7 -60.32 28.4 -61 25 C-58 25 -58 25 -56.39 26.33 C-52.14 31.13 -49.34 35.99 -46.61 41.77 C-44.31 46.38 -41.59 50.65 -38.83 54.99 C-34 62.93 -34 62.93 -34 66 C-30.15 63.66 -29.33 61.75 -28.25 57.44 C-25.72 48.55 -21.9 40.36 -18 32 C-17.57 31.07 -17.14 30.15 -16.69 29.19 C-15.34 26.31 -13.99 23.44 -12.62 20.56 C-11.98 19.2 -11.98 19.2 -11.33 17.82 C-10.72 16.55 -10.72 16.55 -10.1 15.25 C-9.74 14.5 -9.39 13.75 -9.02 12.98 C-8 11 -8 11 -6 8 C-5.34 8 -4.68 8 -4 8 C-3.71 7.24 -3.42 6.47 -3.12 5.69 C-2 3 -2 3 0 0 Z \",fill:\"#090F36\",transform:\"translate(1029,1013)\"})),_path81||(_path81=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.02 8.93 0.08 15.86 0.15 22.78 C0.18 25.36 0.19 27.94 0.2 30.52 C0.2 34.25 0.25 37.97 0.29 41.7 C0.29 43.4 0.29 43.4 0.28 45.14 C0.43 53.64 2.61 60.26 6 68 C6.53 69.34 7.05 70.69 7.56 72.04 C8 73.18 8.43 74.33 8.88 75.51 C12.2 84.31 15.12 93.24 18.01 102.19 C18.89 104.92 19.78 107.65 20.67 110.39 C21.24 112.13 21.8 113.87 22.37 115.62 C22.63 116.43 22.9 117.25 23.17 118.09 C25 123.77 25 123.77 25 126 C20.82 127.95 16.73 128.6 12.21 129.24 C9.85 129.8 9.85 129.8 8.73 131.91 C7.92 134.05 7.92 134.05 7.56 136.56 C7 139 7 139 5.88 140.88 C4 142 4 142 0.56 142.19 C-3.54 140.82 -3.54 140.82 -5.25 137.56 C-6.61 134.36 -7.57 131.1 -8.5 127.75 C-9.65 123.66 -10.94 121.96 -14 119 C-20.47 107.45 -21.15 92.93 -21.81 80 C-21.87 79.05 -21.92 78.09 -21.97 77.11 C-22.21 71.03 -21.56 65.88 -20 60 C-20.61 60.17 -21.22 60.34 -21.85 60.51 C-24.39 61.09 -26.47 60.85 -29.06 60.62 C-36.21 60.57 -40.43 63.85 -46 68 C-46.97 68.66 -47.93 69.32 -48.93 70 C-56.17 75.02 -61.14 79.98 -65.75 87.44 C-71.22 95.77 -79.1 100.24 -87.91 104.45 C-96.13 108.57 -103.14 113.11 -108.3 120.82 C-112.55 126.28 -116.75 128.61 -123.31 130.56 C-128.38 132.13 -133.26 133.84 -138.07 136.11 C-140 137 -140 137 -142.49 137.79 C-149.6 141.21 -153.86 151.06 -157 158 C-157.66 158 -158.32 158 -159 158 C-159.23 158.58 -159.45 159.15 -159.69 159.75 C-161.37 162.63 -163.27 164.09 -166 166 C-166.87 166.21 -167.73 166.41 -168.62 166.62 C-171.14 167.75 -171.14 167.75 -171.77 169.99 C-172.23 171.73 -172.68 173.46 -173.12 175.2 C-175.2 181.83 -179.48 187.79 -184 193 C-184.66 192.67 -185.32 192.34 -186 192 C-186.62 189.44 -186.62 189.44 -187 187 C-186.01 187 -185.02 187 -184 187 C-182.22 183.2 -180.9 179.83 -180.19 175.69 C-179.25 171.19 -177.38 167.93 -174.91 164.09 C-173.37 161.6 -171.95 159.11 -170.56 156.54 C-170.13 155.74 -169.69 154.94 -169.25 154.12 C-168.39 152.53 -167.54 150.93 -166.69 149.33 C-163.49 143.44 -160.17 138.61 -153.81 135.88 C-150.62 134.49 -150.05 134.08 -148 131 C-145.6 130.51 -145.6 130.51 -142.62 130.12 C-135.68 128.59 -132.7 125.03 -128.29 119.83 C-124.94 115.9 -122 113.45 -117.29 111.24 C-113.3 109.08 -110.03 105.99 -106.59 103.08 C-103.53 100.62 -100.44 98.86 -97 97 C-96.48 96.44 -95.97 95.89 -95.44 95.31 C-93.24 93.31 -90.88 93.32 -88 93 C-87.5 91.51 -87.5 91.51 -87 90 C-84.46 88.44 -81.95 87.01 -79.31 85.62 C-74.02 82.83 -69.46 80.01 -65 76 C-64.41 75.49 -63.82 74.98 -63.21 74.46 C-61.67 72.6 -61.24 70.95 -60.62 68.62 C-59.27 64.31 -57.68 61.8 -54 59 C-51.26 58.06 -49.73 57.8 -46.94 58.56 C-44.96 59.18 -44.96 59.18 -42.94 58.31 C-40.63 56.75 -39.39 55.43 -38 53 C-38.03 52.21 -38.06 51.42 -38.09 50.6 C-37.98 47.51 -37.31 46.55 -35.38 44.19 C-34.83 43.51 -34.28 42.83 -33.72 42.12 C-33.15 41.42 -32.59 40.72 -32 40 C-30.93 38.57 -29.87 37.13 -28.81 35.69 C-27.42 33.79 -26.09 32.09 -24.39 30.46 C-21.97 27.92 -22 25.85 -22.04 22.42 C-22.11 20.3 -22.19 18.18 -22.3 16.07 C-22.44 10.83 -21.34 8.01 -18 4 C-14.62 1.74 -12.43 1.44 -8.44 0.88 C-7.28 0.71 -6.12 0.54 -4.93 0.37 C-2 0 -2 0 0 0 Z \",fill:\"#7D6282\",transform:\"translate(860,509)\"})),_path82||(_path82=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.24 5.74 5.02 12.04 7.07 18.28 C7.59 19.85 8.11 21.43 8.62 23 C8.88 23.78 9.14 24.57 9.41 25.37 C11.58 31.88 14.07 38.04 17.38 44.06 C18.82 47.32 19.17 49.36 18.62 52.88 C17.19 54.75 17.19 54.75 14.62 55.88 C11.57 56.27 8.66 56.44 5.62 55.88 C3.85 54.35 3.85 54.35 2.62 52.88 C1.45 53.37 0.27 53.87 -0.94 54.38 C-5.33 55.89 -8.94 55.88 -13.56 55.62 C-22.28 55.38 -28.12 58.49 -35.38 62.88 C-34.98 67.31 -34.98 67.31 -32.53 70.89 C-31.8 71.44 -31.07 71.99 -30.31 72.56 C-28.09 74.26 -28.09 74.26 -26.38 75.88 C-26.38 76.87 -26.38 77.86 -26.38 78.88 C-30.34 77.88 -34.29 76.89 -38.38 75.88 C-34.86 79.39 -33.02 80.77 -28.69 82.75 C-27.05 83.52 -27.05 83.52 -25.38 84.3 C-24.24 84.82 -23.11 85.34 -21.94 85.88 C-19.69 86.91 -17.44 87.95 -15.19 89 C-14.2 89.46 -13.2 89.91 -12.17 90.38 C-9.26 91.94 -6.91 93.77 -4.38 95.88 C-3.06 96.58 -1.74 97.27 -0.38 97.88 C-5.07 101.56 -7.86 102.36 -14 102.19 C-15.94 102.15 -15.94 102.15 -17.91 102.11 C-21.25 101.97 -24.57 101.68 -27.89 101.37 C-34.71 100.78 -41.51 100.65 -48.35 100.63 C-50.44 100.62 -52.53 100.59 -54.62 100.56 C-61.82 100.51 -68.2 101.03 -75.09 103.2 C-77.97 104.05 -80.58 104.18 -83.56 104.06 C-84.95 104.02 -84.95 104.02 -86.36 103.98 C-87.02 103.95 -87.69 103.91 -88.38 103.88 C-88.38 103.22 -88.38 102.56 -88.38 101.88 C-89.37 101.88 -90.36 101.88 -91.38 101.88 C-94.29 95.08 -96.03 90.19 -94.38 82.88 C-94.04 83.53 -93.72 84.19 -93.38 84.88 C-92.72 84.88 -92.05 84.88 -91.38 84.88 C-90.94 83.92 -90.94 83.92 -90.5 82.94 C-89.38 80.88 -89.38 80.88 -87.38 79.88 C-86.49 80.35 -85.6 80.82 -84.69 81.31 C-80.84 83.13 -78.58 83.5 -74.38 82.88 C-71.9 80.52 -71.9 80.52 -70.38 77.88 C-71.03 77.88 -71.7 77.88 -72.38 77.88 C-72.38 77.22 -72.38 76.56 -72.38 75.88 C-70.39 74.88 -68.41 73.89 -66.38 72.88 C-66.68 72.1 -66.98 71.33 -67.29 70.53 C-69.62 64.13 -71.16 59.54 -69.38 52.88 C-68.4 51.52 -67.4 50.19 -66.38 48.88 C-66.58 45.96 -67.25 44.99 -69.41 42.98 C-70.22 42.35 -71.04 41.71 -71.88 41.06 C-75.09 38.31 -76.26 37.21 -77.69 33.12 C-77.38 29.88 -77.38 29.88 -75.62 27.56 C-68.54 22.25 -61.93 22.6 -53.5 23.69 C-52.74 23.77 -51.98 23.85 -51.2 23.94 C-45.63 24.62 -45.63 24.62 -43.38 26.88 C-43.12 29.38 -43.12 29.38 -43.38 31.88 C-44.03 32.53 -44.7 33.19 -45.38 33.88 C-45.28 36.41 -45.28 36.41 -44.38 38.88 C-40.79 41.27 -37.63 41.97 -33.38 41.88 C-30.81 41.12 -28.76 40.12 -26.38 38.88 C-25.85 25.78 -25.85 25.78 -31.69 14.5 C-34.34 11.7 -36.97 9.73 -40.38 7.88 C-40.38 7.21 -40.38 6.56 -40.38 5.88 C-41.03 6.04 -41.7 6.2 -42.38 6.38 C-46.11 7 -49.59 6.94 -53.38 6.88 C-54.12 4.62 -54.12 4.62 -54.38 1.88 C-53.12 -0.44 -53.12 -0.44 -50.38 -2.12 C-47.58 -2.32 -44.86 -2.24 -42.06 -2.13 C-38.84 -2.12 -36.37 -2.98 -33.38 -4.12 C-30.93 -4.49 -30.93 -4.49 -28.38 -4.12 C-26.57 -2.07 -26.57 -2.07 -24.94 0.75 C-24.34 1.75 -23.75 2.76 -23.14 3.79 C-22.56 4.81 -21.98 5.83 -21.38 6.88 C-20.31 8.61 -19.25 10.33 -18.19 12.06 C-17.25 13.66 -16.31 15.27 -15.38 16.88 C-14.75 17.91 -14.75 17.91 -14.11 18.96 C-10.07 26.14 -10.79 32.15 -12.88 39.94 C-13.36 41.59 -13.86 43.23 -14.38 44.88 C-7.74 39.45 -8.01 28.24 -7.07 20.35 C-6.76 15.22 -7.88 11.34 -10.54 6.95 C-13.43 3.68 -16.93 2.05 -20.85 0.26 C-23.54 -1.21 -24.75 -2.56 -26.38 -5.12 C-15.49 -7.59 -8.51 -7.62 0 0 Z \",fill:\"#755A7D\",transform:\"translate(637.375,411.125)\"})),_path83||(_path83=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.58 0.23 1.15 0.45 1.75 0.69 C-2.61 11.52 -22.18 19.08 -32.25 23.69 C-37.59 25.7 -43.03 27.26 -48.55 28.7 C-52.03 29.3 -52.03 29.3 -53.25 30.69 C-54.02 43.68 -53.83 58.27 -50.79 70.94 C-49.83 75.82 -49.48 80.78 -49.01 85.73 C-48.6 89.91 -48.07 93.87 -47 97.94 C-45.11 106.41 -47.02 116.25 -51.25 123.69 C-53.69 126.45 -53.69 126.45 -56.54 129.23 C-57.04 129.73 -57.55 130.23 -58.07 130.74 C-59.66 132.31 -61.27 133.88 -62.88 135.44 C-64.49 137.01 -66.1 138.59 -67.71 140.18 C-69.16 141.6 -70.61 143.02 -72.07 144.44 C-74.28 146.49 -74.28 146.49 -75.25 148.69 C-75.91 148.69 -76.57 148.69 -77.25 148.69 C-77.52 149.29 -77.79 149.88 -78.06 150.5 C-79.25 152.69 -80.35 154.1 -82.25 155.69 C-82.91 155.69 -83.57 155.69 -84.25 155.69 C-84.54 156.97 -84.54 156.97 -84.84 158.27 C-86.67 162.71 -89.34 165.1 -92.81 168.31 C-98.29 173.57 -102.92 178.84 -107.29 185.07 C-109.39 187.88 -111.72 190.26 -114.25 192.69 C-115.43 189.14 -114.91 187.71 -114.06 184.12 C-112.99 178.32 -113.89 175.27 -116.34 170.04 C-119.05 163.04 -115.45 156.08 -112.64 149.62 C-111.44 147.09 -110.13 144.69 -108.75 142.25 C-105.76 136.45 -104.61 130.26 -103.2 123.94 C-101.33 115.68 -98.79 107.75 -95.97 99.77 C-94.92 96.74 -93.92 93.69 -92.93 90.65 C-91.99 87.95 -91.08 85.9 -89.25 83.69 C-86.95 82.62 -84.61 81.62 -82.25 80.69 C-81.23 79.71 -80.23 78.71 -79.25 77.69 C-77.93 77.32 -76.59 76.98 -75.25 76.69 C-75.08 74.46 -74.91 72.23 -74.75 70 C-74.66 68.76 -74.56 67.52 -74.47 66.24 C-74.29 63.37 -74.21 60.56 -74.25 57.69 C-75.16 57.77 -76.07 57.85 -77 57.94 C-80.25 57.69 -80.25 57.69 -82.69 55.94 C-84.25 53.69 -84.25 53.69 -84 51.44 C-83.75 50.86 -83.5 50.28 -83.25 49.69 C-84.24 49.19 -84.24 49.19 -85.25 48.69 C-84.26 46.71 -83.27 44.73 -82.25 42.69 C-81.59 42.69 -80.93 42.69 -80.25 42.69 C-81.03 40.19 -81.03 40.19 -82.25 37.69 C-85.21 36.5 -85.21 36.5 -88.31 36.81 C-93.3 36.65 -97.55 35.28 -102.25 33.69 C-102.25 33.36 -102.25 33.03 -102.25 32.69 C-101.3 32.38 -100.35 32.07 -99.38 31.75 C-96.39 30.81 -96.39 30.81 -94.25 29.69 C-90.99 29.25 -87.73 28.87 -84.46 28.53 C-81.04 28.13 -77.96 27.61 -74.64 26.65 C-70.25 25.4 -66.06 25.25 -61.53 25.03 C-57.92 24.65 -54.73 23.7 -51.25 22.69 C-48.81 22.34 -46.38 22.01 -43.94 21.69 C-33.88 20.05 -25.79 15 -17.25 9.69 C-16.66 9.32 -16.06 8.96 -15.45 8.59 C-11.55 6.2 -7.68 3.83 -4.1 0.98 C-2.25 -0.31 -2.25 -0.31 0 0 Z \",fill:\"#1A0A31\",transform:\"translate(720.25,597.3125)\"})),_path84||(_path84=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 2.94 1.09 5.87 1.12 8.81 C1.14 9.65 1.16 10.48 1.18 11.34 C1.18 12.14 1.19 12.94 1.2 13.77 C1.21 14.51 1.22 15.25 1.23 16.01 C1 18 1 18 -1 21 C-4.04 20.55 -6.15 19.92 -8.88 18.44 C-12.59 16.73 -14.95 16.64 -19 17 C-20.33 17.53 -20.33 17.53 -21.69 18.06 C-26.09 19.31 -29.8 18.63 -34.29 18 C-36.98 17.73 -36.98 17.73 -38.59 19.22 C-40.26 21.33 -40.68 22.86 -41.2 25.49 C-41.38 26.36 -41.55 27.23 -41.73 28.13 C-41.9 29.04 -42.07 29.94 -42.25 30.88 C-42.44 31.77 -42.62 32.67 -42.81 33.6 C-43.68 38.07 -44.3 41.53 -43 46 C-40.64 47.37 -38.26 47.93 -35.62 48.61 C-30.14 50.08 -26.49 51.24 -23 56 C-22.58 57.39 -22.19 58.79 -21.81 60.19 C-21.25 62.29 -21.25 62.29 -20 64 C-16.72 65.31 -13.51 65.74 -10 66 C-9.67 66.99 -9.34 67.98 -9 69 C-9.66 69 -10.32 69 -11 69 C-10.91 70.48 -10.91 70.48 -10.82 71.98 C-10.48 80.69 -11.22 88.74 -13.19 97.25 C-13.38 98.14 -13.58 99.03 -13.78 99.95 C-15.08 105.17 -16.27 108.98 -21 112 C-24.49 112.54 -27.81 112.33 -31.31 112.06 C-32.22 112.03 -33.14 111.99 -34.08 111.95 C-39.53 111.62 -43.61 110.64 -48.33 107.86 C-50.6 106.69 -52.5 106.69 -55 107 C-55.99 108.98 -56.98 110.96 -58 113 C-57.01 112.34 -56.02 111.68 -55 111 C-51.63 111.22 -49.42 111.74 -46.53 113.53 C-41.45 115.64 -36.76 115.44 -31.31 115.38 C-30.27 115.39 -29.22 115.4 -28.15 115.41 C-27.15 115.41 -26.14 115.4 -25.11 115.4 C-23.75 115.39 -23.75 115.39 -22.36 115.39 C-19.55 114.93 -18.69 114.25 -17 112 C-16.1 109.28 -16.1 109.28 -15.5 106.25 C-14.69 102.69 -13.89 99.42 -12.31 96.12 C-10.92 92.82 -10.74 90.55 -11 87 C-10.34 87 -9.68 87 -9 87 C-8.67 85.35 -8.34 83.7 -8 82 C-7.67 82 -7.34 82 -7 82 C-7.03 89.86 -8.59 96.88 -10.81 104.38 C-11.06 105.23 -11.31 106.09 -11.56 106.97 C-14.99 118.11 -14.99 118.11 -20.15 121.35 C-24.3 122.3 -28.32 122.38 -32.56 122.38 C-33.45 122.38 -34.33 122.38 -35.25 122.38 C-42.54 122.26 -48.29 120.88 -55 118 C-54.97 118.69 -54.94 119.39 -54.9 120.1 C-53.85 146.98 -53.85 146.98 -61 155 C-64.13 157.45 -67.15 157.88 -71.06 158.44 C-77.78 157.44 -82 152.16 -86.47 147.45 C-89.45 144.38 -92.22 142.09 -96 140 C-97.35 139.02 -98.68 138.02 -100 137 C-100.06 137.62 -100.12 138.24 -100.19 138.88 C-101 141 -101 141 -103.12 142.5 C-106.56 143.1 -108.45 142.42 -111.35 140.5 C-115.64 136.59 -116.87 131.97 -117.24 126.3 C-117.25 122.86 -117.18 119.44 -117 116 C-116.34 116.33 -115.68 116.66 -115 117 C-115 120.96 -115 124.92 -115 129 C-114.34 129 -113.68 129 -113 129 C-112.67 129.33 -112.34 129.66 -112 130 C-112.33 129.34 -112.66 128.68 -113 128 C-113.1 126.53 -113.16 125.05 -113.18 123.57 C-113.21 122.25 -113.21 122.25 -113.25 120.91 C-113.29 119.06 -113.32 117.21 -113.34 115.36 C-113.47 110.03 -113.47 110.03 -115.82 105.36 C-118.08 103.66 -118.08 103.66 -121.56 104.19 C-124.95 104.94 -124.95 104.94 -128 106 C-131 105.99 -133.99 105.87 -136.99 105.74 C-140.48 106.04 -142.22 106.92 -145 109 C-145.66 109.99 -146.32 110.98 -147 112 C-148.87 111.76 -148.87 111.76 -151 111 C-152.2 109.18 -152.2 109.18 -153.12 106.88 C-153.62 105.66 -153.62 105.66 -154.12 104.43 C-154.89 102.32 -155.54 100.23 -156.12 98.06 C-156.75 94.92 -156.75 94.92 -159 93 C-161.03 92.43 -161.03 92.43 -163.31 92.06 C-167.13 91.24 -169.98 90.6 -173 88 C-174.87 85.09 -176.47 82.1 -178 79 C-182.04 80.13 -184.22 80.86 -186.62 84.39 C-187.61 86.18 -188.55 87.99 -189.45 89.82 C-191 92 -191 92 -193.68 92.8 C-194.45 92.87 -195.21 92.93 -196 93 C-196 92.01 -196 91.02 -196 90 C-197.44 88.31 -197.44 88.31 -199 87 C-198.4 86.9 -197.8 86.79 -197.19 86.69 C-194.66 85.89 -193.65 85.04 -192 83 C-191.06 80.19 -190.87 78.39 -190.82 75.47 C-190.79 74.16 -190.79 74.16 -190.75 72.82 C-190.71 70.99 -190.68 69.15 -190.66 67.31 C-190.45 60.62 -190.45 60.62 -188.12 57.4 C-185.47 55.65 -184.11 55.44 -181 56 C-178.45 57.81 -178.01 58.94 -177.3 62.03 C-177.16 63.18 -177.02 64.32 -176.88 65.5 C-176.26 70.32 -176.26 70.32 -175 75 C-167.97 79.84 -161.2 80.46 -152.87 79.98 C-150 80 -150 80 -148 82 C-148.38 84.12 -148.38 84.12 -149 86 C-149.66 86 -150.32 86 -151 86 C-151.39 85.51 -151.78 85.02 -152.18 84.51 C-155.01 82.16 -157.59 82.71 -161.19 82.81 C-163.1 82.85 -163.1 82.85 -165.04 82.89 C-166.02 82.93 -166.99 82.96 -168 83 C-166.1 85.51 -164.99 86 -161.86 86.73 C-160.11 86.96 -160.11 86.96 -158.31 87.19 C-157.13 87.35 -155.95 87.5 -154.74 87.67 C-153.83 87.78 -152.93 87.89 -152 88 C-151.91 89.36 -151.91 89.36 -151.82 90.74 C-151.73 91.92 -151.65 93.1 -151.56 94.31 C-151.48 95.48 -151.4 96.66 -151.32 97.86 C-151.11 101.03 -151.11 101.03 -150 104 C-145.91 104.27 -145.91 104.27 -142.11 102.99 C-139.52 101.77 -137.79 101.87 -134.94 102 C-130.82 102.1 -127.21 101.74 -123.19 100.88 C-118.86 100 -116.02 99.84 -112 102 C-109.68 105.48 -110.08 106.58 -110.71 110.53 C-111.28 115.33 -111.07 120.17 -111 125 C-109.51 125.49 -109.51 125.49 -108 126 C-105.68 119.04 -107.23 111.15 -108.07 104.05 C-107.97 99.82 -106.37 97.55 -103.62 94.44 C-100.89 92.01 -97.39 91.3 -93.94 90.31 C-93.17 90.09 -92.41 89.88 -91.63 89.65 C-84.78 87.78 -78.43 86.11 -71.94 89.69 C-68.76 93.48 -68.76 93.48 -69 97 C-70.76 99.86 -72.87 102.41 -75 105 C-77.97 109.1 -78.98 112.97 -79 118 C-78.39 121.01 -77.37 123.77 -76.25 126.62 C-75.85 127.71 -75.85 127.71 -75.45 128.82 C-73.88 133.01 -72.27 137.14 -70 141 C-66.81 141.98 -65.03 142.51 -62 141 C-61.97 138.23 -61.95 135.46 -61.94 132.69 C-61.93 131.9 -61.92 131.12 -61.91 130.31 C-61.91 129.55 -61.91 128.79 -61.9 128.01 C-61.9 127.32 -61.89 126.62 -61.89 125.9 C-61.93 123.78 -61.93 123.78 -63 121 C-63.35 115.51 -63.33 112.56 -60 108 C-59.53 107.17 -59.05 106.35 -58.56 105.5 C-57 103 -57 103 -55.04 100.88 C-52.42 97.18 -51.71 93.89 -50.88 89.5 C-50.63 88.26 -50.63 88.26 -50.38 87 C-48.12 75.11 -46.79 62.97 -47.06 50.88 C-47.16 45.17 -46.55 39.75 -45.69 34.12 C-45.57 33.34 -45.45 32.55 -45.33 31.75 C-44.36 25.87 -43.26 19.33 -39 14.94 C-35.01 13.69 -31.74 14.29 -27.64 14.81 C-24.36 15.05 -22.08 14.07 -19 13 C-13.47 12.95 -9.64 13.95 -5 17 C-3.68 17 -2.36 17 -1 17 C-0.67 11.39 -0.34 5.78 0 0 Z \",fill:\"#0B113F\",transform:\"translate(903,1063)\"})),_path85||(_path85=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.97 0.63 7.71 3.27 11.44 6.44 C12.16 6.94 12.87 7.44 13.61 7.95 C15.44 9.44 15.44 9.44 16.44 12.44 C17.08 13.08 17.72 13.72 18.38 14.38 C20.37 16.37 21.23 17.94 22.44 20.44 C23.13 21.04 23.13 21.04 23.83 21.66 C26.05 24.12 26.92 26.73 28.12 29.81 C30.7 36.17 33.89 41.68 37.7 47.4 C39.63 50.78 40.52 53.68 41.44 57.44 C42.1 57.44 42.76 57.44 43.44 57.44 C43.88 58.36 44.33 59.27 44.79 60.22 C48.76 68.35 48.76 68.35 53.38 76.12 C55.44 79.44 55.44 79.44 55.44 82.44 C56.1 82.44 56.76 82.44 57.44 82.44 C60.67 89.36 63 94.77 62.44 102.44 C62.77 103.43 63.1 104.42 63.44 105.44 C65.09 105.44 66.74 105.44 68.44 105.44 C69.69 108.34 70.44 110.23 70.44 113.44 C71.88 115.13 71.88 115.13 73.44 116.44 C72.56 118.75 72.56 118.75 70.44 121.44 C67.18 122.78 63.86 123.65 60.44 124.44 C60.44 125.1 60.44 125.76 60.44 126.44 C59.06 127.33 57.66 128.2 56.25 129.06 C55.47 129.55 54.7 130.04 53.89 130.54 C51.44 131.44 51.44 131.44 48.92 130.92 C45.82 129.07 44.09 126.97 41.88 124.12 C41.13 123.18 40.39 122.24 39.62 121.26 C38.9 120.33 38.18 119.4 37.44 118.44 C36.11 116.77 34.77 115.1 33.44 113.44 C33.77 113.11 34.1 112.78 34.44 112.44 C30.41 110.51 26.84 109.25 22.44 108.5 C14.61 106.98 11 104.63 6.56 98.06 C5.55 96.44 4.53 94.83 3.53 93.2 C2.37 91.34 1.18 89.51 -0.04 87.68 C-0.86 86.43 -1.68 85.18 -2.5 83.94 C-3.08 83.06 -3.08 83.06 -3.68 82.16 C-7 77.04 -7.7 73.72 -7.62 67.69 C-7.62 66.7 -7.61 65.72 -7.6 64.7 C-7.59 63.96 -7.57 63.21 -7.56 62.44 C-8.22 62.44 -8.88 62.44 -9.56 62.44 C-12.6 54.86 -13.03 48.12 -13.12 40 C-13.23 32.65 -13.53 25.77 -15.15 18.59 C-15.71 15.65 -15.61 12.97 -15.31 10 C-15.22 9.01 -15.14 8.02 -15.05 7 C-14.56 4.44 -14.56 4.44 -12.56 1.44 C-8.52 0.36 -4.15 0.51 0 0 Z \",fill:\"#442255\",transform:\"translate(958.5625,428.5625)\"})),_path86||(_path86=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31 3.94 0.35 5.81 -0.88 9.75 C-2.36 14.54 -3.4 19.04 -4 24 C-3.34 24.33 -2.68 24.66 -2 25 C-2.13 25.71 -2.27 26.41 -2.4 27.14 C-4.17 37.4 -4.61 47.62 -5 58 C-5.33 58 -5.66 58 -6 58 C-6.11 64.41 -6.17 70.68 -5 77 C-4.01 77.5 -4.01 77.5 -3 78 C-2.58 79.86 -2.58 79.86 -2.25 82.31 C0.1 94.94 8.11 104.81 16.07 114.52 C18 117 19.68 119.51 21.31 122.19 C21.84 123.05 22.38 123.91 22.93 124.79 C23.46 125.89 23.46 125.89 24 127 C23.67 127.66 23.34 128.32 23 129 C21 127.62 21 127.62 19 126 C19 125.34 19 124.68 19 124 C18.34 124 17.68 124 17 124 C15.08 121.33 13.35 118.57 11.62 115.77 C8.32 110.6 8.32 110.6 3.88 106.44 C0.3 103.41 -1.21 100.25 -3 96 C-5.07 95.81 -5.07 95.81 -6.69 97.19 C-7.34 98.08 -7.34 98.08 -8 99 C-7.81 99.8 -7.63 100.61 -7.44 101.44 C-7 104 -7 104 -8.5 106.31 C-11.8 108.54 -14.11 108.3 -18 108 C-18.33 107.34 -18.66 106.68 -19 106 C-20.44 105.92 -21.87 105.86 -23.31 105.81 C-24.11 105.78 -24.91 105.74 -25.74 105.71 C-28.07 105.77 -28.07 105.77 -29.38 107.47 C-31.86 109.82 -34.23 109.48 -37.56 109.62 C-41.94 109.69 -41.94 109.69 -46 111 C-51.18 111.68 -51.18 111.68 -54 111 C-56.23 108.97 -57.72 106.72 -59 104 C-59 103.34 -59 102.68 -59 102 C-59.66 102 -60.32 102 -61 102 C-61.5 99.35 -62 96.71 -62.5 94.06 C-62.64 93.31 -62.79 92.55 -62.93 91.78 C-64 86.11 -64 86.11 -64 85 C-64.32 83.66 -64.66 82.33 -65 81 C-66 77.11 -66 77.11 -66 76 C-66.33 75.34 -66.66 74.68 -67 74 C-66.34 74 -65.68 74 -65 74 C-65.27 72.95 -65.54 71.9 -65.81 70.81 C-66 67 -66 67 -63.69 64.31 C-62.8 63.55 -61.91 62.79 -61 62 C-58.29 58.25 -58.71 54.46 -59 50 C-59.66 49.34 -60.32 48.68 -61 48 C-61.41 45.4 -61.41 45.4 -61.62 42.38 C-61.7 41.37 -61.77 40.37 -61.85 39.34 C-61.9 38.57 -61.95 37.79 -62 37 C-62.66 37 -63.32 37 -64 37 C-65.46 32.45 -65.32 27.99 -64.56 23.31 C-62.38 20.08 -59.68 19.44 -56.12 18.05 C-53.29 16.65 -52.38 14.77 -51 12 C-50.01 12 -49.02 12 -48 12 C-47.71 11.05 -47.42 10.1 -47.12 9.12 C-46 6 -46 6 -44 4 C-42.35 3.29 -40.68 2.62 -39 2 C-38.67 2.99 -38.34 3.98 -38 5 C-37.34 4.67 -36.68 4.34 -36 4 C-33.19 3.62 -33.19 3.62 -30 4 C-27.12 6.5 -27.12 6.5 -25 9 C-24.34 8.67 -23.68 8.34 -23 8 C-23.17 9.13 -23.33 10.27 -23.5 11.44 C-24.08 15.97 -24.1 20.44 -24 25 C-23.67 23.68 -23.34 22.36 -23 21 C-22.24 21.02 -21.47 21.04 -20.69 21.06 C-17.9 21.13 -17.9 21.13 -15 20 C-14.3 18.01 -13.65 16.01 -13 14 C-8.94 5.63 -8.94 5.63 -5 3 C-4.5 3.5 -4.5 3.5 -4 4 C-2.68 2.68 -1.36 1.36 0 0 Z M-5 24 C-4 27 -4 27 -4 27 Z M-6 29 C-5 31 -5 31 -5 31 Z M-7 34 C-7 37.3 -7 40.6 -7 44 C-6.67 44 -6.34 44 -6 44 C-6 40.7 -6 37.4 -6 34 C-6.33 34 -6.66 34 -7 34 Z M-8 44 C-8 47.96 -8 51.92 -8 56 C-7.67 56 -7.34 56 -7 56 C-7 52.04 -7 48.08 -7 44 C-7.33 44 -7.66 44 -8 44 Z M-4 86 C-3 90 -3 90 -3 90 Z M-3 90 C-2 92 -2 92 -2 92 Z M-2 92 C-1 94 -1 94 -1 94 Z M-1 94 C0 96 0 96 0 96 Z M0 96 C1 98 1 98 1 98 Z \",fill:\"#2B113E\",transform:\"translate(287,811)\"})),_path87||(_path87=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.48 2.04 7.6 5.41 9.46 10 C9.96 11.37 10.45 12.74 10.94 14.12 C12.25 17.57 13.89 20.83 15.56 24.12 C16.09 25.17 16.09 25.17 16.62 26.24 C19.01 30.94 21.59 35.47 24.38 39.94 C25.85 42.43 27.12 44.96 28.38 47.56 C30.15 51.21 32.14 54.13 34.75 57.25 C35.29 58.43 35.82 59.6 36.38 60.81 C38.63 64.98 41.96 65.92 46.31 67.33 C48.89 68.3 50.67 69.45 52.75 71.25 C54.24 74.74 53.82 78.52 53.75 82.25 C53.09 82.25 52.43 82.25 51.75 82.25 C51.74 82.83 51.73 83.4 51.72 84 C51.4 99.87 49.22 113.8 44.39 128.91 C43.66 131.59 43.24 134.25 42.81 137 C42.01 141.75 40.86 144.58 37.75 148.25 C34.34 150.53 33.6 150.36 29.69 150.06 C23.37 149.9 19.06 152.02 13.75 155.25 C13.75 155.91 13.75 156.57 13.75 157.25 C12.33 157.47 12.33 157.47 10.88 157.69 C7.86 158.08 7.86 158.08 5.75 159.25 C0.83 159.78 -3.02 160 -7.31 157.38 C-9.71 154.75 -10.19 153.74 -10.62 150.19 C-10.13 144.97 -7.93 141.65 -5.25 137.25 C-4.73 136.18 -4.73 136.18 -4.2 135.09 C-3.25 133.25 -3.25 133.25 -1.44 131.56 C4.43 125.36 6.61 118 8.25 109.81 C9.86 102.4 11.64 95.73 15.75 89.25 C12.29 90.24 12.29 90.24 8.75 91.25 C9.26 89.08 9.75 87.25 10.75 85.25 C9.1 84.92 7.45 84.59 5.75 84.25 C5.42 81.28 5.09 78.31 4.75 75.25 C6.73 75.25 8.71 75.25 10.75 75.25 C7.28 67.37 7.28 67.37 2.12 60.62 C-0.35 58.15 -0.92 56.79 -2.06 53.56 C-3.94 48.34 -6.85 44.76 -10.54 40.67 C-12.58 37.78 -13.09 35.77 -13.25 32.25 C-12.57 31.28 -11.89 30.31 -11.19 29.31 C-8.82 26.33 -8.82 26.33 -9.88 22.62 C-11.08 19.44 -11.08 19.44 -12.33 17.37 C-13.46 14.77 -13.45 12.82 -13.38 10 C-13.35 8.66 -13.35 8.66 -13.32 7.3 C-13.3 6.62 -13.27 5.95 -13.25 5.25 C-4.69 0.36 -4.69 0.36 0 0 Z \",fill:\"#482859\",transform:\"translate(308.25,963.75)\"})),_path88||(_path88=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.77 0.95 4.85 1.76 6.96 5.12 C7.58 6.37 8.2 7.62 8.81 8.88 C11.93 14.85 11.93 14.85 17.19 18.88 C20.4 19.82 22.7 20.41 26 20 C24.91 19.75 23.81 19.51 22.69 19.25 C18.94 17.98 17.89 17.34 16 14 C16.97 13.63 17.94 13.26 18.94 12.88 C22.98 11.18 26.31 8.75 29.79 6.11 C32.6 4.7 34.05 5.11 37 6 C36.34 6.99 35.68 7.98 35 9 C35.8 9.37 36.61 9.74 37.44 10.12 C40 12 40 12 40.81 15.19 C40.87 16.12 40.94 17.04 41 18 C40.34 18 39.68 18 39 18 C39.25 19.48 39.53 20.96 39.81 22.44 C39.96 23.26 40.11 24.08 40.27 24.93 C40.51 25.62 40.75 26.3 41 27 C41.99 27.33 42.98 27.66 44 28 C45.1 29.81 45.1 29.81 46.06 32 C47.32 35.15 47.32 35.15 50 37 C49.84 38.05 49.67 39.1 49.5 40.19 C49.1 43.22 48.92 45.96 49 49 C49 52.15 48.81 54.59 48.19 57.62 C48.04 58.4 47.89 59.18 47.73 59.98 C47 62 47 62 44 64 C41.67 64.37 39.34 64.71 37 65 C33.72 65.75 33.72 65.75 32 69 C31.69 71.55 31.69 71.55 31.73 74.4 C31.73 75.46 31.73 76.51 31.73 77.6 C31.73 78.7 31.74 79.8 31.75 80.94 C31.74 82.04 31.73 83.13 31.73 84.26 C31.73 85.85 31.73 85.85 31.73 87.46 C31.74 88.43 31.74 89.4 31.74 90.39 C32.01 93.06 32.64 94.71 34 97 C34.62 96.94 35.23 96.88 35.87 96.82 C42.63 96.46 47.68 97.64 53 102 C56.03 106.13 55.42 111.51 55.57 116.42 C55.65 118.28 55.82 120.14 56 122 C56.99 122.49 56.99 122.49 58 123 C58 123.99 58 124.98 58 126 C58.99 126.33 59.98 126.66 61 127 C64.78 136.08 61.79 144.45 58.64 153.24 C57.16 157.57 56.7 160.59 58 165 C59.57 167.81 61.49 169.98 64 172 C67.52 172.9 70.39 173 74 173 C73.86 172.03 73.71 171.06 73.56 170.06 C73.37 168.71 73.19 167.35 73 166 C72.84 164.83 72.84 164.83 72.68 163.64 C72.58 162.85 72.48 162.06 72.38 161.25 C72.28 160.51 72.18 159.78 72.09 159.02 C72 157 72 157 73 154 C72.67 153.34 72.34 152.68 72 152 C71.01 151.69 70.02 151.38 69 151.06 C68.01 150.71 67.02 150.36 66 150 C65.67 149.01 65.34 148.02 65 147 C72.69 140.79 72.69 140.79 77.04 141.18 C79.6 142.25 80.14 143.39 81.44 145.81 C83.96 150.11 86.41 153.25 91.38 154.69 C94.13 155.06 94.13 155.06 97.44 155.06 C102.04 156.27 103.3 158.29 105.93 162.09 C107 164 107 164 107 166 C110.99 166.82 110.99 166.82 115 167 C115.83 166.32 116.65 165.64 117.5 164.94 C120 163 120 163 122.08 163.18 C124.08 163.69 126.05 164.34 128 165 C130.17 160.05 132.13 155.07 134 150 C134.99 150 135.98 150 137 150 C138.5 151.5 138.11 152.9 138.19 155 C138.88 160.83 140.47 165.11 145 169 C148.43 170.63 152.04 171.71 155.66 172.83 C161.48 174.66 166.29 176.93 170 182 C170.94 184.63 171.17 185.54 170.19 188.19 C169 190 169 190 167 191 C165.06 191.13 163.12 191.2 161.18 191.25 C160 191.28 158.83 191.31 157.62 191.35 C155.15 191.41 152.67 191.46 150.2 191.52 C143.86 191.7 138.04 191.95 132 194 C129.6 197.13 129.99 198.9 130.44 202.81 C132.21 208.87 136.48 213.36 141.69 216.75 C144.77 217.91 147.86 218.93 151 219.94 C155.66 221.45 159.14 223.01 163 226 C163.78 226.54 164.57 227.07 165.38 227.62 C165.91 228.08 166.45 228.53 167 229 C167 229.66 167 230.32 167 231 C168.32 231.66 169.64 232.32 171 233 C171 233.66 171 234.32 171 235 C171.99 234.67 172.98 234.34 174 234 C174.33 235.65 174.66 237.3 175 239 C172.31 239.31 172.31 239.31 169 239 C167.31 237.36 165.65 235.69 164 234 C158.77 230.63 153.58 228.79 147.5 227.56 C139.69 225.91 133.73 223.06 128.38 217.06 C126.06 212.28 126.76 206.6 126.96 201.43 C127.15 198.16 127.15 198.16 126.39 195.71 C126.26 195.14 126.13 194.58 126 194 C129.37 189.28 132.76 188.23 138.21 187.26 C138.8 187.18 139.39 187.09 140 187 C140 186.34 140 185.68 140 185 C140.66 184.67 141.32 184.34 142 184 C142 182.68 142 181.36 142 180 C141.44 179.91 140.88 179.83 140.3 179.74 C137.76 179.35 135.23 178.96 132.69 178.56 C131.37 178.36 131.37 178.36 130.02 178.15 C129.17 178.02 128.32 177.89 127.45 177.75 C126.67 177.63 125.89 177.51 125.08 177.39 C123 177 123 177 120 176 C120 175.34 120 174.68 120 174 C119.07 174.12 118.14 174.25 117.19 174.38 C111.41 174.4 106.78 170.91 102 168 C101.33 167.62 100.65 167.24 99.96 166.85 C98.31 165.88 98.31 165.88 96 164 C96 162.68 96 161.36 96 160 C92.58 159.83 92.58 159.83 89 160 C88.34 160.66 87.68 161.32 87 162 C85.67 162.68 84.34 163.35 83 164 C81.56 165.22 81.56 165.22 81.62 168.88 C81.32 171.67 81.2 172.74 79.44 175 C78.96 175.33 78.49 175.66 78 176 C78.66 176.33 79.32 176.66 80 177 C79.59 177.59 79.18 178.18 78.76 178.79 C78.22 179.58 77.68 180.37 77.12 181.19 C76.59 181.96 76.06 182.74 75.51 183.54 C74.02 185.97 72.98 188.33 72 191 C71.34 190.67 70.68 190.34 70 190 C69.67 191.65 69.34 193.3 69 195 C69.33 195 69.66 195 70 195 C70.05 196.42 70.09 197.83 70.12 199.25 C70.15 200.04 70.17 200.83 70.2 201.64 C69.98 204.21 69.29 205.79 68 208 C62.41 208.35 57.99 207.65 53 205 C50.25 202.56 50.25 202.56 48 200 C47.28 199.3 46.56 198.6 45.81 197.88 C41.85 193.77 41.47 190.95 41.53 185.47 C42.49 178.34 45.37 171.67 48 165 C47.34 164.67 46.68 164.34 46 164 C46.66 162.68 47.32 161.36 48 160 C48.99 160 49.98 160 51 160 C50.34 159.67 49.68 159.34 49 159 C49 158.01 49 157.02 49 156 C49.99 156 50.98 156 52 156 C51.98 155.03 51.96 154.06 51.94 153.06 C52 150 52 150 53 149 C52.82 146.96 52.82 146.96 52 145 C48.38 143.79 47.36 144.46 44 146 C43.67 145.01 43.34 144.02 43 143 C41.18 142.34 41.18 142.34 39.06 142.06 C35.18 141.19 35.18 141.19 33.5 139.38 C32.75 135.83 32.82 132.62 33 129 C33.33 128.67 33.66 128.34 34 128 C33.01 127.51 33.01 127.51 32 127 C31.67 127.66 31.34 128.32 31 129 C30.71 128.05 30.42 127.1 30.12 126.12 C29.23 122.95 29.23 122.95 27 121 C27.99 121 28.98 121 30 121 C30 120.34 30 119.68 30 119 C29.34 118.67 28.68 118.34 28 118 C28.66 117.01 29.32 116.02 30 115 C30.42 112.92 30.42 112.92 30.56 110.69 C30.8 107.95 31.12 105.45 31.69 102.75 C32.06 99.46 31.63 97.87 30 95 C29.3 94.48 28.6 93.97 27.88 93.44 C27.26 92.96 26.64 92.49 26 92 C26 88 26 88 27.46 86.22 C29.62 83.1 29.53 80.09 29.62 76.42 C29.64 75.69 29.67 74.95 29.69 74.2 C29.74 72.65 29.78 71.1 29.82 69.56 C29.87 67.2 29.96 64.86 30.05 62.51 C30.1 61 30.14 59.49 30.18 57.98 C30.21 57.29 30.24 56.59 30.26 55.87 C30.35 50.74 29.2 47.51 27 43 C26.67 42.01 26.34 41.02 26 40 C24.51 39.51 24.51 39.51 23 39 C21.5 36.31 21.5 36.31 20 33 C17.87 28.35 15.31 24.89 12 21 C10.97 19.35 9.96 17.69 9 16 C8.34 15.01 7.68 14.02 7 13 C5.99 10.7 5.04 8.38 4.1 6.06 C3.04 3.69 3.04 3.69 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0D0F38\",transform:\"translate(643,1041)\"})),_path89||(_path89=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.99 8.81 17.36 18.66 23 30 C23 31.32 23 32.64 23 34 C23.99 34 24.98 34 26 34 C26.5 35.98 26.5 35.98 27 38 C27.56 38.04 28.11 38.08 28.69 38.12 C32.22 39.46 34.44 41.61 36 45 C36.03 50.59 33.35 55.63 30.98 60.57 C29.89 63.28 29.37 65.88 28.81 68.75 C27.31 75.37 24.02 79.79 19.96 85.09 C18.07 87.9 17.35 89.68 17 93 C18.98 94.65 20.96 96.3 23 98 C22 103.94 20.69 108.2 17 113 C17.99 112.34 18.98 111.68 20 111 C18.77 113.79 17.22 116.04 15.38 118.44 C13.21 121.39 12.43 123.26 13 127 C13.57 126.97 14.14 126.94 14.72 126.9 C18.7 126.96 21.13 127.19 24.12 129.96 C26.66 133.22 28.69 136.06 30 140 C34.16 140.52 38.24 141 42.44 141 C45 141 45 141 47 142 C47 141.34 47 140.68 47 140 C48.32 140.33 49.64 140.66 51 141 C51 140.34 51 139.68 51 139 C56.55 139.5 56.55 139.5 58.94 142.12 C60.96 144.39 60.96 144.39 64.44 143.94 C67.84 143.04 70.07 141.87 73 140 C73.99 140 74.98 140 76 140 C76.25 139.4 76.5 138.8 76.75 138.19 C78.16 135.71 79.65 134.57 82 133 C82.66 133.33 83.32 133.66 84 134 C82.62 136 82.62 136 81 138 C80.34 138 79.68 138 79 138 C78.67 138.99 78.34 139.98 78 141 C63.2 154.55 43.73 163.74 23.53 162.88 C20.81 163.01 19.66 163.49 17.44 165 C11.99 168.17 6.72 167.69 0.63 166.56 C-8.31 164.15 -18.3 160.14 -26 155 C-28.28 154.51 -30.57 154.08 -32.88 153.69 C-37.98 152.78 -42.37 151.53 -47.12 149.38 C-55.96 145.68 -65.56 146.07 -75 146 C-72.6 140.31 -72.6 140.31 -70.01 138.98 C-69.24 138.86 -68.48 138.74 -67.69 138.62 C-66.81 138.49 -65.93 138.35 -65.03 138.21 C-61.56 137.97 -58.17 138.07 -54.69 138.19 C-49.35 138.38 -49.35 138.38 -44.88 135.62 C-44.26 134.76 -43.64 133.89 -43 133 C-41.68 132.3 -40.35 131.63 -39 131 C-36.63 129.39 -34.31 127.7 -32 126 C-32.41 122.34 -32.41 122.34 -34.62 119.56 C-36 118 -36 118 -36.06 115.06 C-34.65 110.99 -32.73 110.01 -29 108 C-28.01 107.67 -27.02 107.34 -26 107 C-26 106.34 -26 105.68 -26 105 C-24.64 104.55 -24.64 104.55 -23.25 104.08 C-10.83 99.81 2.5 94.72 9.05 82.42 C13.4 73.35 15.94 63.81 18 54 C18.23 52.95 18.23 52.95 18.47 51.89 C21.06 40.5 21.06 40.5 20 29 C17.75 26.01 16.55 25.18 13 24 C13.08 23.28 13.17 22.56 13.25 21.81 C12.92 18.13 11.5 16.65 9 14 C8.01 13.5 8.01 13.5 7 13 C7 12.01 7 11.02 7 10 C5.82 9.66 5.82 9.66 4.62 9.31 C2 8 2 8 0.69 5.56 C0 3 0 3 0 0 Z \",fill:\"#3C194D\",transform:\"translate(264,988)\"})),_path90||(_path90=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C2.29 2.86 4.58 2.71 6.88 2.56 C8.15 2.48 9.43 2.4 10.74 2.32 C13.88 2.21 13.88 2.21 16 1 C18.35 0.88 20.71 0.82 23.06 0.81 C24.33 0.8 25.6 0.78 26.91 0.77 C29.87 0.84 32.54 1.29 35.42 1.99 C40.04 3.1 44.45 3.28 49.19 3.38 C57.67 3.66 65 5.19 73 8 C73 8.66 73 9.32 73 10 C74.18 10.4 74.18 10.4 75.38 10.81 C78 12 78 12 80 15 C79.01 15 78.02 15 77 15 C77.21 15.53 77.42 16.07 77.64 16.62 C78.15 19.97 77.08 21.98 75.75 25.06 C75.09 26.63 75.09 26.63 74.42 28.22 C73.14 30.73 72.28 32.37 70 34 C68.11 33.83 66.21 33.65 64.34 33.33 C60.24 32.75 56.13 32.92 52 33 C52 33.33 52 33.66 52 34 C53.83 34.46 55.66 34.92 57.49 35.37 C58.98 35.75 60.47 36.12 61.96 36.49 C63.02 36.76 63.02 36.76 64.11 37.03 C65.41 37.35 66.7 37.68 68 38 C68.68 38.16 69.36 38.33 70.06 38.5 C71.72 38.93 73.37 39.46 75 40 C71.67 41.66 68 40.82 64.38 40.56 C63.57 40.51 62.77 40.46 61.95 40.4 C59.96 40.27 57.98 40.14 56 40 C55.81 42.4 55.81 42.4 56 45 C60.13 49.47 64.91 51.36 70.44 53.74 C73.78 55.38 75.62 57.16 78 60 C78.66 60.66 79.32 61.32 80 62 C80.35 65.74 80.44 69.45 80.56 73.2 C81.03 77.26 81.75 79.61 84 83 C86.73 85.17 86.73 85.17 89.88 86.94 C99.19 92.93 99.19 92.93 101 98 C103.24 109.31 98.1 122.06 92.5 131.81 C90.14 135.14 87.77 137.3 84 139 C80.48 139.2 77.23 138.92 74.32 136.74 C72.64 134.53 72.44 132.94 72.12 130.18 C72 129.25 71.89 128.33 71.77 127.37 C71.66 126.4 71.55 125.43 71.44 124.44 C71.21 122.52 70.98 120.6 70.75 118.68 C70.65 117.83 70.55 116.98 70.45 116.11 C70.15 113.79 70.15 113.79 68 112 C65.16 111.2 62.38 110.5 59.5 109.88 C58.68 109.7 57.87 109.52 57.03 109.34 C46.67 107.2 39.55 106.95 30.38 112.62 C27.57 115.43 26.04 118.33 24.31 121.88 C22.8 124.32 21.46 125.54 19 127 C16.26 127.59 13.75 127.5 11 127 C7.2 124.4 6.19 121.36 5 117 C2.65 116.31 2.65 116.31 0 116 C-1.48 116.99 -1.48 116.99 -3 118 C-3.38 120.84 -3.58 123.48 -3.66 126.33 C-3.7 127.16 -3.73 127.99 -3.77 128.84 C-3.88 131.5 -3.97 134.16 -4.06 136.81 C-4.16 139.46 -4.26 142.1 -4.37 144.75 C-4.44 146.4 -4.5 148.04 -4.55 149.69 C-4.71 153.9 -5.17 157.13 -7 161 C-7.44 163.2 -7.44 163.2 -7.62 165.31 C-7.75 166.53 -7.87 167.75 -8 169 C-8.33 169 -8.66 169 -9 169 C-9.03 162.04 -9.04 155.09 -9.05 148.13 C-9.06 145.77 -9.07 143.4 -9.08 141.04 C-9.09 137.63 -9.09 134.22 -9.1 130.82 C-9.1 129.77 -9.11 128.72 -9.11 127.64 C-9.11 115.82 -9.11 115.82 -8 110 C-5.95 108.76 -5.95 108.76 -4 108 C-4 107.34 -4 106.68 -4 106 C-3.26 105.74 -2.53 105.47 -1.77 105.2 C0.98 104.01 2.95 102.63 5.31 100.81 C8.46 98.67 10.48 97.54 14.31 97.88 C18 99 18 99 20 101.06 C21.99 103.38 21.99 103.38 25.75 103.5 C31.89 103.16 36.38 100.76 40.51 96.28 C48.12 86.78 52.59 74.93 52.39 62.78 C51.84 58.89 50.22 56.05 48.28 52.67 C46.81 49.6 46.28 46.79 45.69 43.44 C44.07 35.57 39.75 31.25 33.84 26.12 C30.97 22.81 30.77 19.19 30 14.97 C28.68 11.06 27.36 9.41 24 7 C20.93 6.46 17.98 6.62 14.88 6.81 C13.27 6.89 11.66 6.96 10.05 7.02 C9.35 7.06 8.64 7.1 7.91 7.15 C6 7 6 7 3 5 C-0.33 5.14 -3.57 5.58 -6.87 6 C-10 6 -10 6 -12.41 4.65 C-14 3 -14 3 -14 1 C-12.23 0.64 -10.46 0.28 -8.69 -0.06 C-7.7 -0.26 -6.72 -0.46 -5.7 -0.66 C-3 -1 -3 -1 0 0 Z \",fill:\"#775979\",transform:\"translate(1119,1038)\"})),_path91||(_path91=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06 0.72 1.12 1.45 1.18 2.2 C1.36 4.19 1.54 6.18 1.73 8.17 C1.93 10.25 2.07 12.35 2.19 14.44 C2.8 17.34 2.8 17.34 6.06 18.88 C7.03 19.58 8 20.28 9 21 C9.28 23.1 9.13 24.99 8.96 27.09 C8.83 29.24 8.83 29.24 10.69 31.5 C13.38 33.25 14.85 33.35 18 33 C18 32.34 18 31.68 18 31 C18.64 30.71 19.28 30.42 19.94 30.12 C22.15 29.17 22.15 29.17 23 27 C23.66 27 24.32 27 25 27 C25 24.69 25 22.38 25 20 C25.33 20 25.66 20 26 20 C26.03 21.46 26.05 22.92 26.06 24.38 C26.07 25.19 26.09 26 26.1 26.84 C26 29 26 29 25 31 C24.51 34.73 24.1 38.46 23.7 42.2 C23 46 21.75 48.59 20 52 C19.51 54.79 19.51 54.79 19.44 57.56 C19.3 60.45 19.18 62.59 18 65.25 C16.79 68.57 16.76 71.22 16.77 74.76 C16.77 75.44 16.77 76.12 16.77 76.82 C16.77 79.11 16.79 81.4 16.81 83.69 C16.82 85.35 16.83 87.01 16.83 88.67 C16.9 102.78 17.17 116.89 17.43 131 C18.86 208.69 18.86 208.69 15 227 C14.67 227 14.34 227 14 227 C14 213.8 14 200.6 14 187 C12.68 187 11.36 187 10 187 C9.7 187.93 9.39 188.86 9.08 189.82 C4.75 202.61 4.75 202.61 0 208 C-0.66 208 -1.32 208 -2 208 C-2.33 209.65 -2.66 211.3 -3 213 C-3.66 213 -4.32 213 -5 213 C-5.5 216.96 -5.5 216.96 -6 221 C-6.66 221 -7.32 221 -8 221 C-8.13 221.96 -8.26 222.92 -8.39 223.91 C-10.13 236.05 -12.71 247.77 -16.84 259.32 C-18.51 264.62 -19.38 269.96 -20.23 275.44 C-21.22 280.03 -22.65 283.65 -26 287 C-27.32 286.67 -28.64 286.34 -30 286 C-30.99 288.64 -31.98 291.28 -33 294 C-33.96 290.16 -33.92 288.68 -33 285 C-33.66 285 -34.32 285 -35 285 C-35.66 273.94 -34.32 264.93 -30.78 254.46 C-26.33 241.17 -22.71 228.17 -24 214 C-25.82 211.78 -25.82 211.78 -28.41 211.63 C-31.08 211.77 -31.08 211.77 -32.81 213.62 C-34.57 216.06 -36.31 218.5 -38 221 C-38.48 221.69 -38.97 222.38 -39.46 223.09 C-43.86 229.82 -46.77 237.25 -49.75 244.69 C-53.23 253.17 -53.23 253.17 -57 256 C-59.44 256.69 -59.44 256.69 -62 257 C-64.65 257.31 -64.65 257.31 -67 258 C-69.02 260.79 -69.02 260.79 -69.89 263.36 C-71.15 266.35 -72.74 268.6 -74.69 271.19 C-78.56 276.39 -82.3 281.67 -86 287 C-87.17 283.62 -86.87 281.93 -85.42 278.7 C-85.06 277.89 -84.71 277.07 -84.34 276.24 C-83.77 274.97 -83.77 274.97 -83.19 273.69 C-80.73 268.18 -78.52 262.86 -77 257 C-75.35 251.34 -73.53 246.75 -70 242 C-69.67 242.99 -69.34 243.98 -69 245 C-68.34 245 -67.68 245 -67 245 C-66.94 244.05 -66.88 243.1 -66.81 242.12 C-66.09 237.02 -63.84 232.28 -61 228 C-60.01 227.67 -59.02 227.34 -58 227 C-57.34 227.66 -56.68 228.32 -56 229 C-51.99 229.35 -49.48 228.99 -46 227 C-45.34 227 -44.68 227 -44 227 C-43.63 225.85 -43.26 224.69 -42.88 223.5 C-41.63 219.72 -40.24 216.01 -38.79 212.3 C-36.19 205.57 -34.15 199 -32.65 191.92 C-30.29 181.29 -30.29 181.29 -27 178 C-25.91 176.09 -25.91 176.09 -25.75 174.12 C-24.61 170.89 -22.9 169.74 -20 168 C-17.03 168.05 -17.03 168.05 -14 169 C-9.55 174.77 -7.39 181.88 -6.52 189.04 C-6.13 191.39 -6.13 191.39 -3 193 C-3 193.66 -3 194.32 -3 195 C-2.01 194.67 -1.02 194.34 0 194 C0.33 194.33 0.66 194.66 1 195 C5.04 187.62 6.63 178.43 4.52 170.1 C3.63 166.49 3.49 162.82 3.25 159.12 C3.18 158.33 3.11 157.54 3.04 156.73 C2.71 151.55 3.35 148.6 6 144 C6.88 141.61 6.88 141.61 7 139 C5.83 136.72 5.83 136.72 4.1 134.54 C0.09 128.24 0.21 122.69 0.38 115.39 C0.39 113.46 0.39 113.46 0.4 111.5 C0.41 108.1 0.47 104.71 0.53 101.32 C0.57 98.58 0.59 95.84 0.61 93.1 C0.67 82.57 0.78 72.04 1.35 61.51 C1.41 60.42 1.47 59.32 1.53 58.19 C2.2 53.64 3.99 49.94 6.14 45.91 C8.27 38.72 3.2 30.22 0.39 23.62 C-2.31 16.99 -2.54 11.6 -1 4.56 C-0.72 3.27 -0.72 3.27 -0.44 1.94 C-0.29 1.3 -0.15 0.66 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(465,288)\"})),_path92||(_path92=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.43 0.96 0.43 0.96 0.88 1.94 C1.83 4.15 1.83 4.15 4 5 C4.71 7.27 4.71 7.27 5.38 10.25 C7.43 18.98 10.02 27.49 13.21 35.88 C14.01 38.03 14.76 40.2 15.51 42.38 C18.75 51.72 22.5 60.23 27.53 68.74 C30.98 74.59 34.03 80.67 37.11 86.73 C39.14 90.68 41.2 94.41 43.83 98 C46 101 46 101 46 103 C46.58 103.21 47.15 103.41 47.75 103.62 C50.2 105.13 51.31 106.69 52.81 109.11 C54.24 111.39 55.81 113.56 57.38 115.75 C59.64 118.97 61.77 122.22 63.75 125.62 C67.33 131.72 71.39 137.47 75.41 143.27 C81.05 151.37 85.76 158.9 88.99 168.24 C89.91 170.76 90.97 173.14 92.12 175.56 C96.55 185.37 96.57 196.24 97.21 206.81 C97.32 208.47 97.32 208.47 97.44 210.18 C97.5 211.18 97.56 212.17 97.62 213.2 C97.87 216 97.87 216 99.03 218.38 C100.32 221.86 100.18 225.08 100.05 228.72 C100.02 229.83 100.02 229.83 99.99 230.97 C99.94 232.54 99.89 234.1 99.83 235.67 C99.75 238.03 99.69 240.39 99.63 242.75 C99.4 250.45 98.87 257.85 97.45 265.45 C96.81 269.07 96.68 272.58 96.56 276.25 C95.13 304.62 81.88 326.17 62 346 C60.62 347.39 59.24 348.79 57.86 350.18 C56.3 351.74 54.74 353.31 53.19 354.88 C52.42 355.65 51.65 356.43 50.86 357.23 C49.32 358.78 47.76 360.31 46.19 361.82 C44 363.91 44 363.91 42.35 366.11 C39.2 369.75 36.47 371.12 31.72 371.54 C26.47 371.77 21.25 371.61 16 371.44 C14.16 371.4 12.32 371.37 10.47 371.34 C5.98 371.27 1.49 371.14 -3 371 C-2.23 367.36 -1.33 366.12 1.62 363.81 C5.4 360.66 8.22 357.32 11.15 353.39 C13.15 350.8 15.29 348.41 17.5 346 C27.56 334.87 40.09 319.55 41.75 304.06 C41.85 303.25 41.95 302.44 42.05 301.6 C41.99 298.43 41.01 295.99 40 293 C39.2 284.88 40.22 277.28 41.86 269.34 C44.03 257.75 43.77 245.76 44 234 C44.33 234 44.66 234 45 234 C50.05 264.59 50.05 264.59 45.96 274.54 C44.77 277.59 44.8 280.05 44.88 283.31 C44.89 284.38 44.91 285.45 44.93 286.55 C44.95 287.36 44.98 288.17 45 289 C45.66 289 46.32 289 47 289 C47 289.66 47 290.32 47 291 C46.34 291 45.68 291 45 291 C45.33 291.66 45.66 292.32 46 293 C46.66 293 47.32 293 48 293 C49.67 294.67 51.33 296.33 53 298 C54.98 299.36 56.98 300.7 59 302 C60.27 303.11 60.27 303.11 61.56 304.25 C63.86 306.11 63.86 306.11 66.44 306.69 C71.71 305.27 74.88 299.41 77.6 294.93 C84.28 283.07 87.73 271.38 90 258 C90.19 256.86 90.39 255.73 90.59 254.56 C91.51 246.63 91.63 238.61 91.9 230.64 C91.98 228.57 92.07 226.5 92.17 224.43 C92.54 211.85 89.37 199.04 86 187 C85.81 186.27 85.62 185.54 85.43 184.79 C83.72 178.92 80.82 173.78 77.91 168.44 C73.91 161.07 71.72 153.98 69.75 145.84 C68.35 140.54 66.32 136.37 63 132 C62.88 131.36 62.75 130.72 62.62 130.06 C61.86 127.54 60.49 126.44 58.59 124.7 C55.68 121.58 53.48 117.89 51.16 114.33 C49.14 111.76 49.14 111.76 45.93 111.05 C42.81 110.72 42.81 110.72 40 113 C39.77 112.22 39.55 111.43 39.31 110.62 C38.25 107.7 37.1 105.13 35.69 102.38 C33.84 98.76 32.2 95.14 30.69 91.38 C29.08 87.42 27.33 83.61 25.36 79.83 C13.34 56.67 -0.97 26.71 0 0 Z \",fill:\"#44214E\",transform:\"translate(569,909)\"})),_path93||(_path93=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 1.56 2.92 2.83 3.94 4.94 C5.24 7.46 6.97 9.03 9 11 C11 14 11 14 11 17 C11.66 17 12.32 17 13 17 C14.25 18.43 14.25 18.43 15.56 20.31 C16.21 21.23 16.21 21.23 16.88 22.18 C18 24 18 24 19 27 C19.7 27.56 20.4 28.11 21.12 28.69 C23.6 30.68 25.4 32.54 27.44 34.94 C29.55 37.43 31.61 39.62 34.19 41.62 C37.19 44.16 38.83 46.75 41 50 C46.37 55 52.56 58.86 58.78 62.73 C66.98 67.84 66.98 67.84 70.56 71.06 C77.75 77.51 86.64 81.39 95.44 85.12 C96.4 85.54 97.36 85.96 98.35 86.39 C104.82 89.17 111.36 91.66 118 94 C116 96 116 96 113.56 96.25 C111 96 111 96 108 94 C106.01 93.61 104.01 93.27 102 93 C101.81 93.66 101.63 94.32 101.44 95 C100 97.99 98.6 99.53 96.31 101.88 C93.26 105.21 93.26 105.21 92.94 109.81 C93.88 113.1 93.88 113.1 96 116 C96.31 119.06 96.31 119.06 96 122 C93 124 93 124 89.94 123.75 C87 123 87 123 85 121 C84.62 118.65 84.62 118.65 84.44 115.94 C84.46 112.66 84.46 112.66 83 110 C81.17 109.86 79.33 109.77 77.5 109.69 C61.95 108.56 48.26 103.78 34.44 96.69 C31.48 95.23 29.22 94.47 26 94 C25.34 93.67 24.68 93.34 24 93 C24 92.34 24 91.68 24 91 C23.13 90.87 23.13 90.87 22.23 90.74 C13.13 89.18 4.84 85.9 -3 81 C-2.34 80.67 -1.68 80.34 -1 80 C-0.22 80.35 0.57 80.7 1.38 81.06 C3.95 82.3 3.95 82.3 6.31 81.12 C6.87 80.75 7.43 80.38 8 80 C7.01 79.22 6.02 78.43 5 77.62 C4.01 76.76 3.02 75.89 2 75 C2 74.34 2 73.68 2 73 C1.34 72.81 0.68 72.63 0 72.44 C-7.32 68.93 -11.38 63.68 -15.25 56.74 C-17.31 53.51 -19.76 50.78 -22.38 48 C-34.65 34.99 -34.65 34.99 -37.44 28.81 C-39.55 25.01 -42.5 23.15 -46.04 20.71 C-48.21 18.82 -48.64 17.81 -49 15 C-48.16 15.43 -48.16 15.43 -47.31 15.88 C-43.06 17.95 -39.19 19.25 -34.5 19.94 C-30.46 20.64 -27.19 21.25 -24 24 C-24 24.99 -24 25.98 -24 27 C-22.37 29.18 -22.37 29.18 -20.25 31.38 C-17.94 33.87 -15.79 36.28 -13.75 39 C-11.75 41.29 -10.97 41.68 -8 42 C-5.9 41.15 -5.9 41.15 -3.94 39.75 C-3.27 39.31 -2.59 38.87 -1.9 38.42 C0.02 37.08 0.02 37.08 1.46 35.42 C3.92 33.16 6.86 32.76 10.04 31.94 C12.21 31.18 12.21 31.18 12.77 28.9 C12.85 28.27 12.92 27.65 13 27 C12.01 26.34 11.02 25.68 10 25 C9.3 22.34 9.22 19.76 9 17 C7.82 17.09 7.82 17.09 6.62 17.19 C5.76 17.13 4.89 17.06 4 17 C1.76 13.63 1.95 12 2.06 8.07 C1.97 5.15 1.08 2.69 0 0 Z \",fill:\"#3C194D\",transform:\"translate(1018,517)\"})),_path94||(_path94=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 -0.44 2.62 -0.44 6 0 C9.52 2.85 11.67 5.94 13 10.25 C13.77 13.24 13.77 13.24 16.69 14.75 C20.01 16.06 20.01 16.06 23.56 17 C27 18 27 18 29.38 19.44 C37.6 24.33 44.64 24.2 54 23 C56.25 26.54 57.9 30.02 59.38 33.95 C59.82 35.1 60.26 36.25 60.72 37.43 C61.18 38.65 61.65 39.87 62.12 41.12 C65.38 49.65 68.84 57.93 73 66.06 C77.53 75.17 79.15 83.93 80 94 C80.09 94.93 80.17 95.87 80.27 96.83 C80.52 99.72 80.74 102.61 80.94 105.5 C81.01 106.4 81.08 107.31 81.15 108.24 C81.46 114.48 81.46 114.48 79.18 117.06 C76.07 118.4 74.37 118.6 71 118 C67.55 115.73 64.7 113.21 62.62 109.62 C60.58 107.58 59.72 107.68 56.88 107.56 C53.5 107.7 50.78 108.32 47.62 109.5 C42.47 111.39 37.44 111.84 32 111 C29.31 109 29.31 109 28 107 C29.58 105.42 31.38 105.65 33.56 105.44 C34.8 105.31 34.8 105.31 36.07 105.18 C36.7 105.12 37.34 105.06 38 105 C37.67 104.01 37.34 103.02 37 102 C36.35 102.03 35.7 102.06 35.02 102.1 C28.05 102.01 28.05 102.01 25.39 99.46 C24.44 97.98 23.55 96.46 22.7 94.93 C20.95 91.92 18.98 89.26 16.87 86.51 C12.11 80.3 8.31 74.55 6 67 C5.44 65.33 4.88 63.67 4.31 62 C4.08 61.28 3.85 60.56 3.61 59.81 C3.02 57.93 3.02 57.93 2 56 C1.61 52.41 1.5 50.66 3.71 47.73 C4.45 47.03 5.18 46.34 5.94 45.62 C10.18 41.1 10.18 41.1 11.43 35.23 C10.03 27.99 5.77 21.74 1.12 16.19 C-1.33 13.19 -1.97 12.22 -2.56 8.25 C-2.04 5.23 -1.33 2.75 0 0 Z \",fill:\"#0A123C\",transform:\"translate(807,897)\"})),_path95||(_path95=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.69 4.8 5.09 11.22 6.5 17 C6.71 17.83 6.92 18.65 7.13 19.51 C7.76 22 8.38 24.5 9 27 C9.35 28.41 9.71 29.82 10.07 31.23 C11.42 36.61 12.75 41.99 14.07 47.38 C14.24 48.1 14.42 48.82 14.6 49.56 C14.94 50.94 15.27 52.31 15.61 53.69 C16.49 57.26 17.59 60.6 19 64 C19.38 65.33 19.75 66.67 20.12 68 C22.56 75.44 27.17 82.57 32.13 88.58 C34.01 91.02 34.91 93.14 36 96 C42.16 106.15 55.01 112.34 66 116 C66 116.66 66 117.32 66 118 C63.36 118 60.72 118 58 118 C59.65 118.33 61.3 118.66 63 119 C62.5 119.54 62.01 120.07 61.5 120.62 C59.53 123.74 59.49 125.37 60 129 C64.65 138.3 72.92 143.25 82.31 146.87 C85.85 148.36 87.9 149.77 90 153 C89.9 155 89.81 157 89.66 159 C90.15 161.86 91.47 162.66 93.75 164.38 C96.41 166.14 99.13 167.61 102 169 C102.66 169.33 103.32 169.66 104 170 C104 170.99 104 171.98 104 173 C104.73 173.09 105.46 173.18 106.21 173.27 C111.19 174.57 114.53 178.33 118 182 C119.94 185.44 119.94 185.44 121 188 C121.66 188.33 122.32 188.66 123 189 C122.34 187.02 121.68 185.04 121 183 C123.54 185.47 125.91 187.88 128.06 190.69 C130.01 193.02 131.3 193.78 134 195 C135 196 136 197 137 198 C137.99 198.33 138.98 198.66 140 199 C140 199.99 140 200.98 140 202 C133.31 200.51 127.17 197.16 121.12 194.03 C119.33 193.16 117.5 192.38 115.67 191.63 C112.03 190.08 108.77 188.12 105.44 186 C98.86 181.83 92.3 178.16 84.75 176.12 C83.39 175.57 83.39 175.57 82 175 C81.38 173.06 81.38 173.06 81 171 C79.02 169.25 79.02 169.25 77 168 C77.99 167.34 78.98 166.68 80 166 C76.97 163.77 75.68 162.9 71.88 163.44 C70.93 163.62 69.98 163.81 69 164 C67.51 163.01 67.51 163.01 66 162 C67.32 163.65 68.64 165.3 70 167 C67.53 165.85 65.95 164.95 64 163 C64 162.01 64 161.02 64 160 C63.34 160 62.68 160 62 160 C61.79 159.48 61.58 158.96 61.36 158.42 C57.76 150.77 52 146.36 45.53 141.22 C34.28 132.26 25.47 121.57 17 110 C15.72 108.29 14.43 106.58 13.12 104.88 C12.59 104.17 12.06 103.47 11.51 102.74 C9.93 100.76 9.93 100.76 7 99 C5.98 97.01 4.98 95.01 4 93 C3.34 92.28 2.68 91.56 2 90.81 C-0.5 87.3 -1.19 83.98 -2.24 79.84 C-4.04 73.11 -5.96 68.6 -11.44 64.12 C-18.65 58.16 -21.95 49.18 -23 40 C-23.14 36.33 -23.12 32.67 -23 29 C-22.34 29.66 -21.68 30.32 -21 31 C-19.04 29.04 -18.19 27.46 -17 25 C-16.67 24.67 -16.34 24.34 -16 24 C-15.78 22.65 -15.6 21.29 -15.46 19.92 C-15.35 19.09 -15.25 18.26 -15.14 17.4 C-14.92 15.65 -14.73 13.9 -14.54 12.14 C-13.97 7.8 -13.49 4.89 -10.07 1.95 C-6.39 -0.39 -4.14 -1.66 0 0 Z \",fill:\"#341546\",transform:\"translate(883,521)\"})),_path96||(_path96=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.23 2.16 10.17 6.8 14 12 C14.69 13.99 15.36 15.99 16 18 C18.35 19.34 18.35 19.34 21 20 C21.59 20.34 22.17 20.69 22.77 21.04 C25.7 22.3 28.07 22.19 31.25 22.12 C32.87 22.1 32.87 22.1 34.52 22.07 C35.75 22.04 35.75 22.04 37 22 C36.98 21.2 36.96 20.39 36.94 19.56 C37 17 37 17 38 16 C39.67 15.96 41.33 15.96 43 16 C43.62 18.38 43.62 18.38 44 21 C43.34 21.66 42.68 22.32 42 23 C42.03 25.09 42.07 27.18 42.13 29.27 C41.89 34.33 40.38 39.15 39 44 C38.34 44 37.68 44 37 44 C37.28 45.14 37.28 45.14 37.56 46.31 C38 49 38 49 37 52 C36.93 53.74 36.92 55.48 36.94 57.22 C36.95 58.74 36.95 58.74 36.96 60.29 C36.98 61.88 36.98 61.88 37 63.5 C37.03 65.59 37.05 67.69 37.06 69.78 C37.07 70.71 37.09 71.64 37.1 72.6 C37 75 37 75 36 78 C36.66 77.67 37.32 77.34 38 77 C38 76.01 38 75.02 38 74 C38.66 74 39.32 74 40 74 C40.25 73.18 40.5 72.35 40.75 71.5 C42.19 67.47 44 63.75 45.94 59.94 C46.28 59.24 46.63 58.55 46.99 57.83 C48.45 54.93 49.94 52.1 51.63 49.33 C53.52 46.11 54.62 42.72 55.84 39.21 C57.24 36.55 58.27 36.09 61 35 C61.99 34.34 62.98 33.68 64 33 C70.45 33.47 75.78 36.32 81 40 C83.66 44.46 83 48.01 82 53 C81.34 53 80.68 53 80 53 C79.9 53.89 79.8 54.78 79.7 55.7 C78.95 59.23 77.91 61.01 75.75 63.88 C73.45 67.01 71.2 70.14 69.12 73.44 C68.54 74.36 68.54 74.36 67.95 75.31 C66.84 77.15 66.84 77.15 66 80 C66.66 80.33 67.32 80.66 68 81 C67.67 81.52 67.34 82.03 67 82.56 C65.79 85.08 65.79 85.08 66 88.38 C66 92 66 92 64.98 94.7 C63.75 98.83 63.96 102.24 64.31 106.5 C64.36 107.23 64.41 107.97 64.46 108.72 C64.75 112.87 65.24 116.91 66 121 C62.6 117.6 62.64 112.7 61.78 108.09 C61.52 107.07 61.27 106.05 61 105 C60.34 104.67 59.68 104.34 59 104 C59 102.68 59 101.36 59 100 C53.72 99.67 48.44 99.34 43 99 C42.07 100.65 41.14 102.3 40.19 104 C39.67 104.93 39.14 105.86 38.61 106.81 C34.81 114.35 33.31 121.17 32.31 129.5 C32.18 130.51 32.05 131.53 31.92 132.57 C31.6 135.05 31.3 137.52 31 140 C30.67 140 30.34 140 30 140 C28.97 135.77 28.85 131.68 28.87 127.36 C28.87 126.63 28.87 125.9 28.86 125.15 C28.86 123.61 28.87 122.07 28.87 120.54 C28.87 118.21 28.87 115.88 28.86 113.54 C28.86 112.04 28.87 110.54 28.87 109.04 C28.87 108.36 28.86 107.67 28.86 106.96 C28.88 102.22 29.37 97.69 30 93 C30 92.03 30 91.06 30 90.06 C30 88 30 88 31 87 C32.19 81.33 32.02 75.76 31.96 69.98 C32.01 64.89 32.33 59.84 32.73 54.77 C33 50.99 33.04 47.66 32 44 C30.96 42.76 30.96 42.76 28.69 42.69 C25.84 42.74 25.84 42.74 23.94 45.06 C23.3 45.7 22.66 46.34 22 47 C20.01 46.84 20.01 46.84 18 46 C16.84 44.43 16.84 44.43 15.94 42.44 C15.61 41.72 15.27 41.01 14.93 40.27 C14.03 38.08 13.26 35.87 12.5 33.62 C11.41 30.03 11.41 30.03 9.18 28.8 C5.44 27.43 1.92 27.33 -2 28 C-4.85 29.93 -4.85 29.93 -7 33 C-7.49 33.57 -7.98 34.14 -8.49 34.73 C-12.86 40.01 -15.01 45.49 -17 52 C-17.35 53.14 -17.7 54.29 -18.06 55.46 C-20.84 64.87 -23.06 73.97 -23.56 83.77 C-24.11 86.53 -25.1 87.95 -27 90 C-29.69 90.75 -29.69 90.75 -32 91 C-32.66 89.35 -33.32 87.7 -34 86 C-34.99 88.31 -35.98 90.62 -37 93 C-37.33 93 -37.66 93 -38 93 C-41.34 62.38 -41.34 62.38 -34 47 C-33.22 45.34 -32.44 43.68 -31.67 42.02 C-29.47 37.34 -27.24 32.66 -25 28 C-24.34 28 -23.68 28 -23 28 C-22.9 27.28 -22.79 26.56 -22.69 25.81 C-21.93 22.73 -20.68 20.68 -19 18 C-18.02 15.73 -17.16 13.44 -16.32 11.12 C-11.1 -3.11 -11.1 -3.11 0 0 Z \",fill:\"#3C194D\",transform:\"translate(493,735)\"})),_path97||(_path97=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.17 0.37 8.76 1.76 13 6 C14.76 8.71 15 9.71 15 13 C15.61 13.08 16.23 13.15 16.86 13.23 C19.7 13.58 22.54 13.95 25.38 14.31 C26.34 14.43 27.31 14.55 28.3 14.67 C45.1 16.87 45.1 16.87 48.73 20.93 C50.29 23.48 50.86 25.77 51.5 28.69 C52.55 33.3 53.85 37.59 55.64 41.96 C56.36 46.07 54.12 48.83 51.86 52.12 C39.81 68.06 39.81 68.06 29.72 69.77 C28.87 69.89 28.87 69.89 28 70 C28.31 75.23 29.42 79.28 31.44 84.12 C36.41 96.53 37.44 109.87 34.56 122.88 C32.95 130.21 32.54 137.36 32.38 144.85 C32.26 149.38 31.97 152.84 30 157 C29.68 160.02 29.68 160.02 31 163 C32.9 164.71 34.91 166.13 37 167.59 C43.33 172.06 45.16 178.77 47 186 C47.89 191.69 46.86 197.03 44 202 C41.49 205.27 38.95 207.53 34.88 208.51 C28.72 208.82 22.87 207.1 16.98 205.49 C12.91 204.4 9.11 203.73 4.88 203.5 C0.11 203.15 -2.37 202.32 -6 199 C-8.24 196.33 -10.4 193.62 -12.55 190.89 C-15.67 187.21 -19.14 184.15 -22.84 181.07 C-29.38 174.81 -29.1 167.84 -29.31 159.38 C-29.32 158.52 -29.33 157.66 -29.34 156.77 C-29.45 152.04 -29.45 152.04 -31.48 147.89 C-35.38 146.51 -38.99 147.03 -43.06 147.44 C-44.68 147.59 -46.29 147.74 -47.91 147.87 C-48.62 147.94 -49.34 148.01 -50.07 148.09 C-52 148 -52 148 -55 146 C-59.25 158.05 -62.52 170.36 -58.44 182.93 C-56.53 189.6 -56.97 196.01 -57.52 202.84 C-57.69 204.93 -57.83 207.02 -57.97 209.11 C-58.53 217.16 -59.49 225.07 -61 233 C-61.99 233 -62.98 233 -64 233 C-64.8 229.71 -65.1 228.29 -64 225 C-63.86 223.21 -63.78 221.42 -63.75 219.62 C-63.72 218.69 -63.7 217.75 -63.67 216.79 C-64.07 213.38 -64.87 211.69 -67 209 C-69.8 207.12 -69.8 207.12 -73 205.69 C-74.05 205.18 -75.1 204.66 -76.19 204.14 C-78.96 202.81 -78.96 202.81 -82 203 C-82.85 197.78 -83.21 192.72 -83.25 187.44 C-83.27 186.71 -83.29 185.98 -83.31 185.23 C-83.35 180.48 -82.9 176.96 -80 173 C-77.22 172.15 -77.22 172.15 -74.06 171.94 C-69.32 171.4 -69.32 171.4 -65.31 168.94 C-63.07 163.92 -63.07 158.89 -62.87 153.48 C-62.81 152.25 -62.75 151.02 -62.69 149.75 C-62.65 148.59 -62.61 147.43 -62.57 146.23 C-61.71 141.35 -59.02 138.99 -55.56 135.62 C-53 134 -53 134 -50.5 134 C-48 135 -48 135 -45.91 137.03 C-41.92 139.73 -38.71 139.56 -34 139.56 C-24.45 139.62 -24.45 139.62 -20 143 C-20.35 144.11 -20.7 145.23 -21.06 146.38 C-22.37 149.8 -22.37 149.8 -21 152 C-23 155 -23 155 -24 156 C-24.1 157.64 -24.13 159.29 -24.12 160.94 C-24.13 161.83 -24.13 162.73 -24.13 163.65 C-24.15 166.02 -24.15 166.02 -23 168 C-19.86 167.64 -18.22 167.18 -15.75 165.16 C-9.63 160.36 0.01 155.68 7.99 156.37 C18.74 159.74 26.09 173.91 31.06 183.25 C32.05 185.16 33.03 187.08 34 189 C35.65 188.67 37.3 188.34 39 188 C40.27 185.1 39.95 183.83 39 180.75 C36.56 175.52 32.4 171.49 28.43 167.37 C26.23 164.96 25.06 163.3 24.44 160.06 C25 157 25 157 26.99 153.86 C29.45 149.67 29.62 146.02 29.64 141.25 C29.66 140.43 29.68 139.62 29.7 138.77 C29.74 137.06 29.77 135.34 29.78 133.62 C29.81 131.01 29.87 128.39 29.93 125.78 C29.96 124.1 29.99 122.43 30.02 120.75 C30.04 119.59 30.04 119.59 30.06 118.41 C30.11 113.83 29.72 109.53 29 105 C28.94 102.69 28.91 100.37 28.94 98.06 C28.95 96.92 28.96 95.78 28.96 94.6 C28.98 93.74 28.99 92.88 29 92 C28.34 92 27.68 92 27 92 C26.88 91.07 26.76 90.15 26.63 89.19 C26.47 87.99 26.3 86.8 26.12 85.56 C25.96 84.37 25.8 83.17 25.63 81.94 C25.42 80.97 25.22 80 25 79 C24.34 78.67 23.68 78.34 23 78 C21.86 76.82 20.71 75.64 19.57 74.46 C17.15 72.21 14.47 70.34 11.77 68.43 C10 67 10 67 8 64 C8.31 62 8.31 62 9 60 C9.33 59.01 9.66 58.02 10 57 C11.77 57.48 13.54 57.96 15.31 58.44 C16.3 58.7 17.28 58.97 18.3 59.25 C20.22 59.78 22.11 60.37 24 61 C30.6 61.69 34.67 61.29 40 57 C40.99 56.67 41.98 56.34 43 56 C43.72 54.36 44.38 52.68 45 51 C45.72 49.87 46.45 48.75 47.19 47.62 C49.43 43.72 49.07 41.44 48 37 C47.79 35.94 47.57 34.87 47.36 33.77 C46.21 26.57 46.21 26.57 42 21 C40.13 20.27 40.13 20.27 38.05 19.9 C37.28 19.74 36.52 19.58 35.73 19.41 C34.93 19.26 34.13 19.1 33.31 18.94 C30.21 18.3 27.1 17.65 24 17 C22.88 16.77 22.88 16.77 21.74 16.54 C15.15 15.08 15.15 15.08 13 12 C12.25 10.68 11.52 9.35 10.81 8 C8.01 3.33 5.15 2.4 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#846B8A\",transform:\"translate(1195,1047)\"})),_path98||(_path98=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.24 3.68 6.16 6.4 7 12 C6.59 15.08 5.81 18.01 5 21 C4.65 23 4.32 25 4 27 C3.77 27.87 3.55 28.73 3.31 29.62 C2.94 32.46 3.47 33.63 5 36 C6.15 37.3 6.15 37.3 9 38 C8.67 38.33 8.34 38.66 8 39 C7.85 43.43 7.92 46.67 9 51 C11.97 51.33 14.94 51.66 18 52 C18.33 52.99 18.66 53.98 19 55 C19.76 54.63 20.53 54.26 21.31 53.88 C22.64 53.44 22.64 53.44 24 53 C27 55 27 55 27.81 58.38 C27.99 61.84 27.9 63.2 26 66 C25.01 66 24.02 66 23 66 C23.66 66.33 24.32 66.66 25 67 C25 67.99 25 68.98 25 70 C24.01 70 23.02 70 22 70 C21.06 72.86 21.06 72.86 21.62 75.73 C22.19 79.13 20.86 81.41 19.56 84.56 C17.24 90.71 15.28 96.46 17 103 C20.81 109.63 24.66 113.54 32.06 115.56 C32.7 115.71 33.34 115.85 34 116 C34.99 116.28 34.99 116.28 36 116.56 C38.31 117.14 38.31 117.14 42 117 C42.22 115.54 42.43 114.08 42.62 112.62 C42.8 111.41 42.8 111.41 42.98 110.16 C42.98 109.45 42.99 108.74 43 108 C42.34 107.34 41.68 106.68 41 106 C41.99 103.36 42.98 100.72 44 98 C44.66 98 45.32 98 46 98 C47.57 95.93 47.57 95.93 49.06 93.31 C49.59 92.44 50.12 91.57 50.66 90.68 C51.97 88.07 52.58 85.87 53 83 C53.66 83 54.32 83 55 83 C55.5 81.52 55.5 81.52 56 80 C56.99 80 57.98 80 59 80 C59.99 79.67 60.98 79.34 62 79 C63.49 79.49 63.49 79.49 65 80 C65 79.34 65 78.68 65 78 C67.31 77.81 67.31 77.81 70 78 C71.56 79.38 71.56 79.38 73 81 C73.62 81.29 74.24 81.58 74.88 81.88 C77 83 77 83 79.5 85.56 C81.86 87.86 82.82 88.65 86 89 C86 89.99 86 90.98 86 92 C86.77 91.98 87.54 91.95 88.34 91.93 C89.84 91.9 89.84 91.9 91.38 91.88 C92.37 91.85 93.37 91.83 94.4 91.8 C97 92 97 92 99 94 C99.7 95.32 100.37 96.65 101 98 C97.81 99.02 95.58 98.96 92.31 98.25 C91.52 98.09 90.74 97.93 89.93 97.77 C89.29 97.51 88.65 97.26 88 97 C87.67 96.01 87.34 95.02 87 94 C84.69 94 82.38 94 80 94 C80 93.34 80 92.68 80 92 C79.43 91.9 78.86 91.79 78.27 91.68 C75.63 90.89 73.94 89.72 71.75 88.06 C71.04 87.54 70.34 87.01 69.61 86.47 C68.81 85.74 68.81 85.74 68 85 C68 84.34 68 83.68 68 83 C64.53 83.99 64.53 83.99 61 85 C61 85.99 61 86.98 61 88 C62.65 88.33 64.3 88.66 66 89 C66 89.33 66 89.66 66 90 C64.48 90.28 64.48 90.28 62.94 90.56 C58.05 91.92 55.29 95.32 52 99 C50.67 100.33 49.33 101.67 48 103 C47.4 104.69 46.86 106.4 46.38 108.12 C46.11 109.04 45.85 109.95 45.59 110.88 C45.39 111.58 45.2 112.28 45 113 C45.66 113 46.32 113 47 113 C47.05 115.1 47.09 117.21 47.12 119.31 C47.15 120.48 47.17 121.66 47.2 122.86 C47 126 47 126 45 129 C43.02 128.67 41.04 128.34 39 128 C39 128.33 39 128.66 39 129 C42.47 129.75 42.47 129.75 46 130 C46 130.66 46 131.32 46 132 C44.61 132.85 43.21 133.68 41.81 134.5 C41.04 134.96 40.26 135.43 39.46 135.91 C36.74 137.12 34.94 137.12 32 137 C31.34 137.33 30.68 137.66 30 138 C30 137.34 30 136.68 30 136 C28.68 136.33 27.36 136.66 26 137 C25.65 136.49 25.3 135.98 24.93 135.46 C22.34 131.85 19.89 128.75 16.38 126 C12.62 122.9 10.36 119.7 9 115 C8.71 111.63 8.75 108.37 9 105 C9.33 105 9.66 105 10 105 C10 106.98 10 108.96 10 111 C11.98 111.49 11.98 111.49 14 112 C13.84 111.51 13.67 111.01 13.5 110.5 C12.59 105.94 12.52 101.44 14 97 C11.83 97.83 11.83 97.83 11 100 C10.01 100 9.02 100 8 100 C7.42 102.23 6.91 104.45 6.46 106.71 C3.97 118.69 0.27 130.01 -7.48 139.66 C-9.53 142.57 -9.53 142.57 -11 149 C-28.49 149 -45.98 149 -64 149 C-57.34 141.23 -57.34 141.23 -54.38 138.81 C-49.08 134.32 -44.27 129.35 -39.39 124.41 C-38.06 123.06 -36.71 121.71 -35.37 120.37 C-27.05 112.04 -20.88 103.14 -15 93 C-14.64 92.39 -14.29 91.79 -13.92 91.17 C-6.41 78.15 -4.8 65.13 -4.31 50.43 C-4.14 46.9 -3.6 43.51 -3.01 40.03 C-1.73 32.11 -1.58 24.25 -1.44 16.25 C-1.39 14.06 -1.35 11.88 -1.29 9.7 C-1.25 7.75 -1.21 5.79 -1.17 3.84 C-1 1 -1 1 0 0 Z \",fill:\"#090E36\",transform:\"translate(669,1131)\"})),_path99||(_path99=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17 0.12 2.34 0.24 3.55 0.36 C4.44 0.47 5.33 0.58 6.25 0.69 C6.25 1.68 6.25 2.67 6.25 3.69 C5.59 4.02 4.93 4.35 4.25 4.69 C8.18 4.11 8.18 4.11 11.25 1.69 C18.62 0.71 25.18 1.22 31.25 5.69 C34.31 8.3 35.91 10.17 36.8 14.13 C37.4 22.3 34 27.33 29.25 33.69 C26.39 37.61 24.46 40.69 24.25 45.69 C24.56 46.43 24.87 47.17 25.19 47.94 C27.09 52.85 27.34 58.1 25.27 63.01 C23.11 66.62 21.04 69.72 17.25 71.69 C13.06 72.03 8.88 71.7 4.69 71.48 C-1.09 71.31 -4.12 71.87 -8.75 75.69 C-13.07 78.56 -16.42 80.46 -21.75 79.69 C-23.32 78.95 -24.88 78.22 -26.44 77.46 C-29.65 76.38 -32.82 76.2 -36.19 75.88 C-44.06 74.95 -48.34 72.66 -53.43 66.73 C-55.5 63.53 -55.26 60.33 -54.75 56.69 C-51.67 47.75 -46.22 41.83 -39.62 35.31 C-38.49 34.18 -38.49 34.18 -37.32 33.03 C-30.32 26.14 -23.08 19.95 -14.75 14.69 C-15.25 13.7 -15.25 13.7 -15.75 12.69 C-14.89 10.41 -14.89 10.41 -13.56 7.75 C-12.92 6.44 -12.92 6.44 -12.27 5.1 C-8.89 -0.27 -6.18 -0.68 0 0 Z \",fill:\"#8378A2\",transform:\"translate(768.75,638.3125)\"})),_path100||(_path100=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.02 0.51 1.02 0.51 2.05 1.02 C22.28 10.71 45.44 7.09 67.07 4.37 C71 4 71 4 74 5 C74 5.66 74 6.32 74 7 C73.34 7 72.68 7 72 7 C72.23 7.52 72.45 8.03 72.69 8.56 C73.18 12.37 71.83 14.7 70 18 C67.38 19.31 67.38 19.31 65 20 C64.67 20.66 64.34 21.32 64 22 C61.37 23.17 58.73 24.09 56 25 C52.75 26.08 52.75 26.08 50 28 C48.31 28.07 46.62 28.08 44.94 28.06 C44.02 28.05 43.1 28.04 42.15 28.04 C41.44 28.02 40.73 28.01 40 28 C40 28.33 40 28.66 40 29 C38.23 29.25 36.46 29.47 34.69 29.69 C33.7 29.82 32.72 29.94 31.7 30.07 C29 30 29 30 27.21 28.81 C25.77 26.65 25.37 24.93 24.94 22.38 C24.58 20.02 24.58 20.02 24 18 C23.34 17.67 22.68 17.34 22 17 C21.59 14.68 21.26 12.34 21 10 C20.05 10.03 19.09 10.07 18.11 10.11 C16.86 10.13 15.6 10.16 14.31 10.19 C12.45 10.24 12.45 10.24 10.55 10.29 C6.77 9.98 5.1 9.07 2 7 C1.01 7 0.02 7 -1 7 C-3.97 10.71 -4.92 14.97 -6.18 19.46 C-6.94 21.81 -7.84 23.82 -9 26 C-10.96 29.68 -12.11 33.39 -13.19 37.41 C-14 40 -14 40 -15.46 43.14 C-17.5 47.81 -18.27 52.69 -19.12 57.69 C-19.3 58.66 -19.47 59.63 -19.65 60.63 C-20.81 67.41 -21.71 74.12 -22 81 C-21.34 81 -20.68 81 -20 81 C-19.95 80.13 -19.9 79.26 -19.85 78.36 C-18.53 57.29 -18.53 57.29 -15 52 C-13.35 52.48 -11.71 52.96 -10.06 53.44 C-9.15 53.7 -8.23 53.97 -7.29 54.25 C-5 55 -5 55 -4 56 C-1.5 56.05 -1.5 56.05 1.38 55.81 C2.35 55.76 3.33 55.7 4.34 55.64 C7.1 55.22 7.1 55.22 8.85 53.14 C10.24 50.96 10.24 50.96 10 48 C10.99 47.67 11.98 47.34 13 47 C13 47.66 13 48.32 13 49 C13.99 49.33 14.98 49.66 16 50 C16.23 49.4 16.46 48.79 16.7 48.17 C18.71 43.24 20.27 39.82 25 37 C28.31 35.75 28.31 35.75 31 35 C31.33 35.66 31.66 36.32 32 37 C31.28 37.78 31.28 37.78 30.54 38.57 C25.85 43.71 25.85 43.71 23 50 C22.67 50.33 22.34 50.66 22 51 C21.73 56.28 22.12 60.01 24 65 C24.35 66.66 24.68 68.33 25 70 C25.64 72.67 26.32 75.34 27 78 C26.01 78.5 26.01 78.5 25 79 C22.97 78.07 20.96 77.07 19 76 C19 75.34 19 74.68 19 74 C17.92 73.6 17.92 73.6 16.81 73.19 C13.68 71.87 10.43 70.43 8 68 C7.61 66.49 7.26 64.97 6.94 63.44 C6.76 62.61 6.58 61.78 6.4 60.93 C6.2 59.98 6.2 59.98 6 59 C4.68 59 3.36 59 2 59 C2 58.34 2 57.68 2 57 C-2.97 58.13 -2.97 58.13 -7 61 C-7.17 64.51 -6.45 66.47 -4.18 69.15 C-3.46 69.9 -2.74 70.66 -2 71.44 C0.53 74.18 1.98 75.96 3.44 79.44 C2.85 84.21 0.67 86.92 -2.24 90.67 C-3.81 92.75 -5.06 94.57 -6 97 C-5.5 97.99 -5.5 97.99 -5 99 C-5.94 101.12 -5.94 101.12 -7 103 C-9.44 102.62 -9.44 102.62 -12 102 C-12.5 101.01 -12.5 101.01 -13 100 C-13.83 99.22 -14.65 98.43 -15.5 97.62 C-17.82 95.19 -18.64 94.23 -19 91 C-20.32 91 -21.64 91 -23 91 C-23 89.35 -23 87.7 -23 86 C-23.33 87.32 -23.66 88.64 -24 90 C-24.66 90 -25.32 90 -26 90 C-26 93.3 -26 96.6 -26 100 C-25.34 100.33 -24.68 100.66 -24 101 C-23.46 102.68 -23.46 102.68 -23.04 104.88 C-22.87 105.7 -22.71 106.51 -22.54 107.35 C-22.36 108.22 -22.18 109.1 -22 110 C-21.59 111.79 -21.17 113.58 -20.75 115.37 C-20.53 116.27 -20.32 117.18 -20.1 118.11 C-19.88 119.02 -19.66 119.93 -19.44 120.88 C-19.22 121.81 -19 122.75 -18.77 123.71 C-18.55 124.61 -18.34 125.51 -18.12 126.43 C-17.93 127.24 -17.74 128.04 -17.54 128.87 C-17.1 130.6 -16.56 132.31 -16 134 C-15.96 136.33 -15.96 138.67 -16 141 C-15.34 141 -14.68 141 -14 141 C-10.82 145.78 -8.86 150 -7 155.41 C-6.04 158.18 -6.04 158.18 -4 161 C-4 161.99 -4 162.98 -4 164 C-1.52 163.01 -1.52 163.01 1 162 C1.49 163.37 1.96 164.75 2.44 166.12 C2.7 166.89 2.97 167.66 3.25 168.45 C4 171 4 171 4.41 173.94 C5.08 177.39 6.27 179.76 8 182.81 C8.62 183.93 9.25 185.05 9.89 186.21 C10.23 186.81 10.57 187.42 10.92 188.04 C13.31 192.38 15.59 196.78 17.89 201.18 C19.45 204.13 21.02 207.03 22.77 209.88 C24 212 24 212 24 214 C24.66 214 25.32 214 26 214 C27.67 216.11 29.22 218.22 30.75 220.44 C31.2 221.08 31.64 221.71 32.1 222.37 C32.99 223.65 33.88 224.94 34.77 226.22 C35.82 227.74 36.89 229.25 37.96 230.76 C38.49 231.52 39.02 232.28 39.56 233.06 C40.02 233.71 40.47 234.36 40.94 235.04 C42 237 42 237 42.4 239.56 C43.17 242.7 44.44 243.15 47 245 C48.16 247.34 48.16 247.34 49.06 249.94 C50.31 253.47 51.65 256.08 54 259 C54.96 260.45 54.96 260.45 55.94 261.94 C57.9 264.97 57.9 264.97 60.06 267.44 C61.93 269.91 62.9 272.19 64.01 275.06 C65.62 278.22 68.07 280.71 70.48 283.3 C74.82 291 73.01 301.81 72.69 310.31 C72.65 311.56 72.62 312.81 72.58 314.1 C72.52 315.9 72.52 315.9 72.45 317.74 C72.41 318.82 72.37 319.9 72.33 321.02 C72 324.01 71.25 326.28 70 329 C68.06 328.19 68.06 328.19 66 327 C65 323.99 64.76 321.63 64.57 318.48 C63.55 302.77 62.49 289.39 55.48 275.09 C53.75 271.47 52.33 267.79 50.96 264.02 C49.92 261.83 48.74 260.65 47 259 C46.06 257.36 45.13 255.71 44.21 254.05 C42.88 251.79 41.4 249.69 39.88 247.56 C36.75 243.17 33.89 238.65 31.06 234.06 C26.24 226.26 21.29 218.53 15.06 211.75 C6.61 202.11 0.92 189.43 -4.91 178.09 C-5.96 176.09 -7.02 174.09 -8.1 172.11 C-20.94 147.95 -27.2 120.53 -28.42 93.34 C-28.47 92.18 -28.52 91.02 -28.58 89.82 C-28.63 88.28 -28.63 88.28 -28.68 86.7 C-29 83.97 -29.73 82.39 -31 80 C-31.43 73.57 -30.4 67.61 -29.19 61.31 C-28.92 59.87 -28.92 59.87 -28.64 58.39 C-27.28 51.21 -25.77 44.09 -24 37 C-23.34 37 -22.68 37 -22 37 C-21.86 36.41 -21.73 35.81 -21.59 35.2 C-19.68 27.85 -16.29 22.22 -12 16 C-11.25 14.88 -10.5 13.75 -9.75 12.62 C-9.17 11.76 -8.6 10.89 -8 10 C-7.48 9.11 -6.97 8.23 -6.44 7.31 C-5.11 5.18 -3.93 3.59 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#090E35\",transform:\"translate(601,801)\"})),_path101||(_path101=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 2.47 0.5 2.47 1 5 C1.74 5.09 2.47 5.17 3.23 5.26 C7.9 5.93 11.25 6.49 15.19 9.19 C17.49 12.76 17.14 14.79 17 19 C17.43 20.33 17.92 21.64 18.44 22.94 C20.64 29.06 20.64 35.37 20.89 41.81 C21 44 21.16 46.18 21.35 48.37 C21.99 56.47 22.02 64.27 21.19 72.38 C21.11 73.18 21.02 73.98 20.94 74.81 C20.49 78.58 20.03 81.76 18 85 C17.53 85.78 17.07 86.56 16.59 87.37 C16.07 88.24 15.54 89.1 15 90 C14.44 90.99 13.89 91.99 13.32 93.01 C12.74 94.04 12.16 95.07 11.56 96.12 C10.7 97.68 10.7 97.68 9.82 99.26 C8.01 101.98 6.87 103.49 4 105 C-1.04 105.69 -4.68 104.11 -9.06 101.81 C-9.66 101.52 -10.26 101.23 -10.88 100.93 C-14.97 98.84 -17.9 96.37 -21 93 C-23.68 90.42 -25.45 89.86 -29.06 89.56 C-33 89 -33 89 -34.94 87.12 C-37.3 82.41 -37.18 78.33 -37.19 73.19 C-37.2 72.39 -37.21 71.6 -37.22 70.78 C-37.24 66.07 -36.74 62.43 -35 58 C-32.65 51.78 -31.55 46.18 -31.12 39.56 C-30.34 30.46 -28.38 24.04 -22.44 16.94 C-20.16 15.13 -18.86 14.32 -16 14 C-15.67 12.35 -15.34 10.7 -15 9 C-11.53 8.51 -11.53 8.51 -8 8 C-7.88 7.22 -7.75 6.43 -7.62 5.62 C-7 3 -7 3 -5 1 C-2 0 -2 0 0 0 Z \",fill:\"#4B2E62\",transform:\"translate(552,1103)\"})),_path102||(_path102=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 1.52 6.72 3.21 10 5 C9.34 10.44 8.19 15.6 6.75 20.88 C6.56 21.63 6.37 22.38 6.17 23.15 C4.82 28.09 2.92 32.21 0.34 36.62 C-1.6 40.06 -3.2 43.63 -4.84 47.21 C-8.63 55.43 -12.53 63.41 -17.56 70.94 C-17.98 71.56 -18.4 72.19 -18.83 72.83 C-19.82 74.27 -20.9 75.64 -22 77 C-22.66 77 -23.32 77 -24 77 C-24.26 77.58 -24.52 78.16 -24.79 78.75 C-27.92 84.56 -33.26 89.49 -38 94 C-38.85 94.82 -38.85 94.82 -39.71 95.66 C-46.54 102.03 -54.19 107.2 -61.84 112.5 C-72.24 119.6 -72.24 119.6 -82.06 127.44 C-88.44 133 -88.44 133 -93 133 C-93 133.66 -93 134.32 -93 135 C-93.93 135.33 -94.86 135.66 -95.82 136 C-103.93 138.97 -110.65 142.5 -117.67 147.62 C-125.72 153.48 -134.81 159.19 -144 163 C-146.21 162.59 -146.21 162.59 -148 162 C-146.02 161.01 -146.02 161.01 -144 160 C-144 159.34 -144 158.68 -144 158 C-143.41 157.72 -142.81 157.44 -142.2 157.15 C-137.59 154.92 -133.22 152.56 -128.94 149.75 C-124.2 146.68 -119.35 143.92 -114.38 141.25 C-113.68 140.87 -112.99 140.5 -112.28 140.11 C-107.9 137.79 -103.66 136.16 -98.87 134.9 C-96.42 133.72 -96.04 132.46 -95 130 C-93.61 128.47 -92.17 127 -90.69 125.56 C-89.89 124.78 -89.09 124 -88.26 123.19 C-87.52 122.47 -86.77 121.75 -86 121 C-85 120 -84 119 -83 118 C-82 117 -81 116 -80 115 C-80.28 112.83 -80.57 110.67 -80.88 108.5 C-81.45 101.8 -81.45 101.8 -79.55 98.39 C-78.27 96.93 -76.97 95.49 -75.65 94.08 C-73.33 91.15 -73.31 88.77 -73.16 85.14 C-72.89 81.54 -71.76 79.15 -70 76 C-67.14 73.69 -64.96 72.99 -61.38 72.12 C-57.93 71.32 -57.93 71.32 -56.25 68.81 C-55.84 67.88 -55.42 66.96 -55 66 C-54.58 65.07 -54.58 65.07 -54.16 64.12 C-53.42 62.42 -52.7 60.71 -52 59 C-51.34 59.33 -50.68 59.66 -50 60 C-40.77 53.62 -38.85 44.67 -36.52 34.12 C-36.05 31.31 -35.88 28.78 -35.94 25.94 C-36 22.04 -35.8 21.19 -34 18 C-33.45 16.9 -33.45 16.9 -32.89 15.78 C-28.58 7.59 -28.58 7.59 -24 5 C-21.23 4.14 -18.46 3.41 -15.64 2.73 C-12.81 2.05 -12.81 2.05 -9.75 0.25 C-5.94 -1.48 -4.04 -1.08 0 0 Z \",fill:\"#806786\",transform:\"translate(829,455)\"})),_path103||(_path103=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.85 5.83 2.48 10.45 0 16 C-0.99 16 -1.98 16 -3 16 C-3.15 17.34 -3.15 17.34 -3.3 18.71 C-4.24 26.37 -5.68 33.02 -9 40 C-9.66 40 -10.32 40 -11 40 C-11.08 40.64 -11.16 41.28 -11.25 41.94 C-12.11 45.45 -13.5 48.46 -15.06 51.72 C-16.08 53.98 -16.08 53.98 -16.46 56.44 C-17.97 63.6 -22.44 70.64 -28.28 75.03 C-31.19 76.67 -32.75 76.81 -36 76 C-37.18 75.02 -38.33 74 -39.44 72.94 C-42.05 70.55 -42.71 70.04 -46.38 69.56 C-57.3 73.9 -62.96 85.71 -68.52 95.38 C-68.96 96.14 -69.4 96.9 -69.85 97.69 C-70.73 99.2 -71.59 100.72 -72.45 102.25 C-75.57 107.68 -75.57 107.68 -78.1 109.53 C-81.07 111.82 -81.98 115.09 -83.25 118.5 C-83.52 119.18 -83.79 119.85 -84.06 120.55 C-85.2 123.5 -86 125.81 -86 129 C-85.07 128.98 -84.14 128.95 -83.18 128.93 C-76.66 128.83 -71.18 128.94 -65 131 C-64.01 130.67 -63.02 130.34 -62 130 C-61 133 -61 133 -62.02 135.45 C-62.54 136.4 -63.07 137.35 -63.61 138.33 C-64.46 139.9 -64.46 139.9 -65.34 141.5 C-65.95 142.59 -66.56 143.69 -67.19 144.81 C-67.78 145.89 -68.37 146.97 -68.98 148.09 C-73.75 156.76 -73.75 156.76 -76.41 160.55 C-78.36 163.55 -78.33 165.49 -78 169 C-74.97 169.31 -74.97 169.31 -73.02 167.41 C-69.88 163.66 -68.12 159.31 -66.07 154.9 C-63.4 151.16 -61.45 150.82 -57 150 C-56.21 149.85 -55.41 149.7 -54.59 149.54 C-53.9 149.43 -53.21 149.31 -52.5 149.19 C-48.36 148.32 -45.85 146.64 -42.57 144.05 C-40.33 142.56 -38.6 142.54 -36 143 C-35.67 143.33 -35.34 143.66 -35 144 C-35.4 150.71 -36.91 156.35 -39.25 162.62 C-39.89 164.38 -40.52 166.14 -41.15 167.89 C-41.47 168.76 -41.78 169.62 -42.1 170.5 C-43.39 174.09 -44.61 177.7 -45.81 181.31 C-46.19 182.44 -46.57 183.57 -46.96 184.74 C-49.38 192.32 -50.62 197.22 -48.44 204.98 C-46.82 212.37 -50.15 220.2 -52.56 227.06 C-52.89 228.02 -53.22 228.98 -53.56 229.97 C-54.37 232.32 -55.18 234.66 -56 237 C-57.53 235.22 -57.53 235.22 -59 233 C-58.61 230.32 -58.11 228.11 -57.31 225.56 C-57.12 224.91 -56.94 224.25 -56.74 223.58 C-55.92 220.75 -55.01 218.02 -53.84 215.32 C-52.89 212.71 -52.92 211.1 -53.31 208.38 C-53.41 207.62 -53.51 206.86 -53.61 206.09 C-53.98 203.82 -53.98 203.82 -55 201 C-55.14 197.65 -55.07 194.56 -54.63 191.24 C-53.73 185.56 -53.73 185.56 -55.5 180.31 C-58.97 178.49 -61.12 178.46 -65 179 C-68.64 180.85 -70.59 182.35 -72.77 185.81 C-75.3 189.43 -77.97 191.78 -81.44 194.44 C-82 194.9 -82.56 195.35 -83.13 195.83 C-85.84 197.92 -87.37 199.03 -90.85 198.85 C-93 198 -93 198 -94 197 C-93.97 195.34 -93.87 193.67 -93.74 192.01 C-93.67 191 -93.61 189.98 -93.54 188.93 C-93.39 186.78 -93.23 184.63 -93.05 182.48 C-92.99 181.46 -92.93 180.44 -92.86 179.39 C-92.79 178.45 -92.72 177.51 -92.65 176.55 C-93.11 173.19 -94.42 172.11 -97 170 C-98.83 168.83 -98.83 168.83 -101 169 C-105.84 171.86 -109.68 175.34 -113.62 179.31 C-114.18 179.86 -114.74 180.4 -115.32 180.96 C-119.04 184.67 -121.58 188.34 -124 193 C-124.66 193 -125.32 193 -126 193 C-126.25 193.66 -126.5 194.33 -126.76 195.01 C-128.29 198.71 -130.07 202.25 -131.88 205.81 C-132.21 206.49 -132.55 207.16 -132.9 207.85 C-133.24 208.53 -133.58 209.2 -133.93 209.89 C-134.27 210.57 -134.61 211.25 -134.96 211.95 C-135.66 213.32 -136.35 214.69 -137.06 216.05 C-139.22 220.26 -141.01 224.46 -142.56 228.94 C-143.2 230.76 -143.2 230.76 -143.84 232.61 C-145.25 236.74 -146.64 240.86 -148 245 C-148.66 247.02 -149.33 249.04 -150 251.06 C-150.34 252.09 -150.67 253.11 -151.02 254.16 C-151.82 256.48 -152.72 258.69 -153.69 260.94 C-155.79 266.38 -155.67 272.24 -156 278 C-156.37 281.8 -156.79 285.36 -158 289 C-158.66 289 -159.32 289 -160 289 C-161 285.69 -161.1 282.7 -161.06 279.25 C-161.05 277.77 -161.05 277.77 -161.04 276.27 C-161.02 275.52 -161.01 274.77 -161 274 C-160.34 274 -159.68 274 -159 274 C-158.93 273.37 -158.86 272.74 -158.8 272.09 C-157.5 262.48 -154.46 253.59 -151.31 244.46 C-150.38 241.77 -149.48 239.09 -148.58 236.39 C-145.51 227.35 -142.18 218.67 -137.65 210.25 C-135.48 206.2 -134.12 202.42 -133 198 C-132.34 198 -131.68 198 -131 198 C-130.75 196.85 -130.5 195.69 -130.25 194.5 C-129.1 189.94 -127.24 186.05 -125 181.94 C-124.61 181.21 -124.22 180.47 -123.81 179.72 C-120.71 174.03 -117.22 168.68 -113.54 163.35 C-109.77 157.82 -106.79 152.09 -104 146 C-105.98 146.99 -107.96 147.98 -110 149 C-109.03 146.39 -108.03 144.05 -106.56 141.69 C-105.23 139.39 -104.45 137.49 -103.62 135 C-102.22 131.07 -100.26 128.68 -97 126 C-96.34 126 -95.68 126 -95 126 C-94.9 125.4 -94.81 124.81 -94.71 124.19 C-93.84 121.52 -92.82 120.74 -90.69 118.94 C-84.14 112.72 -79.84 104.63 -75.2 96.96 C-74.17 95.28 -73.09 93.64 -72 92 C-71.34 92 -70.68 92 -70 92 C-69.73 91.27 -69.46 90.54 -69.18 89.78 C-68.04 87.08 -66.73 84.9 -65.06 82.5 C-63.42 80.11 -61.87 77.77 -60.44 75.25 C-58.63 72.43 -56.37 70.37 -54 68 C-52.17 65.72 -50.4 63.41 -48.65 61.09 C-47.19 59.25 -45.7 57.61 -44 56 C-38.29 57.86 -38.29 57.86 -35.56 59.19 C-31.76 60.39 -29.83 60.23 -26 59 C-15.15 50.31 -10.38 35.27 -6.25 22.46 C-5.62 20.47 -4.96 18.49 -4.3 16.51 C-2.5 11.03 -0.83 5.73 0 0 Z \",fill:\"#3C194D\",transform:\"translate(474,540)\"})),_path104||(_path104=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.15 3.18 C5.71 8.34 5.74 13.64 6 19 C6.05 19.85 6.11 20.71 6.16 21.59 C6.63 35.02 3.67 49.15 0 62 C-0.2 62.79 -0.4 63.57 -0.61 64.38 C-4.04 77.08 -10 91.56 -18 102 C-19.55 104.31 -21.07 106.64 -22.6 108.98 C-24 111 -24 111 -26 113 C-26.99 113 -27.98 113 -29 113 C-29.33 113.99 -29.66 114.98 -30 116 C-32.35 117.86 -35.01 119.23 -37.62 120.69 C-38.32 121.1 -39.02 121.52 -39.75 121.95 C-44.44 124.6 -47.62 125.49 -53 125 C-53 125.66 -53 126.32 -53 127 C-55.13 127.72 -57.26 128.44 -59.39 129.14 C-61.02 129.68 -62.65 130.23 -64.26 130.8 C-70.35 132.82 -76.37 133.68 -82.73 134.35 C-86.16 134.44 -86.16 134.44 -89 136 C-91.53 136.24 -94.03 136.42 -96.56 136.56 C-97.27 136.61 -97.98 136.65 -98.72 136.69 C-100.48 136.8 -102.24 136.9 -104 137 C-104.33 136.01 -104.66 135.02 -105 134 C-106.18 134.23 -107.35 134.45 -108.56 134.69 C-118.65 135.82 -130.51 132.41 -140 129 C-142 127 -142 127 -142.38 124.69 C-141.89 121.18 -140.26 119.67 -138 117 C-137.22 114.82 -137.22 114.82 -137 113 C-137.66 113 -138.32 113 -139 113 C-139.33 112.34 -139.66 111.68 -140 111 C-151.46 110.05 -162.03 113.56 -172 119 C-176.6 121 -176.6 121 -179 121 C-190.6 132.79 -199.13 148.12 -200.25 164.69 C-200.2 169.35 -198.97 173.69 -197.75 178.17 C-197.06 180.77 -196.5 183.36 -196 186 C-196.66 186 -197.32 186 -198 186 C-202 179.25 -202 179.25 -202 177 C-202.99 177 -203.98 177 -205 177 C-206.33 161.88 -206.27 150.28 -198 137 C-197.48 136.11 -196.97 135.21 -196.44 134.29 C-186.3 117.28 -173.69 108.42 -154.58 103.36 C-154.06 103.24 -153.54 103.12 -153 103 C-154.22 102.53 -155.43 102.05 -156.69 101.56 C-157.37 101.3 -158.06 101.03 -158.76 100.75 C-164.66 98.77 -170.4 98.81 -176.56 98.81 C-177.54 98.81 -178.52 98.81 -179.53 98.81 C-186.55 98.86 -193.15 99.38 -200 101 C-198.63 98.25 -197.35 98.01 -194.5 96.88 C-178.67 91.88 -161.81 93.91 -146.82 100.3 C-144.07 101.36 -141.26 101.89 -138.38 102.44 C-131.92 103.79 -126.38 106.37 -120.51 109.28 C-111.59 113.65 -103.99 116.09 -94 115 C-91.89 114.15 -91.89 114.15 -90 113 C-86.78 111.13 -84.71 110.82 -81 111 C-62.98 111.54 -45.08 101.96 -31.62 90.59 C-29.9 89.08 -29.9 89.08 -29 87 C-28.34 87 -27.68 87 -27 87 C-26.75 86.44 -26.5 85.89 -26.25 85.31 C-25 83 -25 83 -23.19 80.81 C-20.87 77.84 -19.13 74.82 -17.36 71.51 C-16.43 69.8 -15.47 68.11 -14.49 66.43 C-3.77 47.91 -1.83 25.17 -1.18 4.12 C-1 1 -1 1 0 0 Z \",fill:\"#301243\",transform:\"translate(372,1039)\"})),_path105||(_path105=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.65 3.01 33.37 10.32 48.56 17.62 C49.64 18.14 50.71 18.65 51.81 19.18 C62.73 24.58 72.53 31.39 82 39 C83.36 40.06 83.36 40.06 84.74 41.14 C85.65 41.86 86.56 42.58 87.5 43.31 C88.34 43.97 89.17 44.62 90.03 45.3 C92 47 92 47 93 49 C93.44 49.43 93.89 49.85 94.34 50.29 C96.44 52.46 97.9 54.82 99.5 57.38 C100.38 58.78 100.38 58.78 101.28 60.21 C102.13 61.59 102.13 61.59 103 63 C103.55 63.85 104.11 64.7 104.68 65.58 C106.6 69.09 106.66 72.04 107 76 C107.66 76 108.32 76 109 76 C109.15 76.68 109.29 77.36 109.44 78.05 C112.26 91.1 115.25 103.88 119.9 116.41 C121.5 120.82 122.22 123.36 121 128 C121.69 130.18 121.69 130.18 122.88 132.25 C125.14 136.9 125.67 140.85 126 146 C126.66 146 127.32 146 128 146 C128 146.66 128 147.32 128 148 C128.66 148.33 129.32 148.66 130 149 C130 216.98 130 284.96 130 355 C125.38 352.23 123.86 350.89 120.94 346.69 C120.29 345.76 119.64 344.84 118.96 343.89 C117.65 341.96 116.38 340 115.14 338.01 C112.68 334.55 109.93 331.92 106.75 329.12 C106.2 328.63 105.64 328.13 105.07 327.62 C103.72 326.41 102.36 325.2 101 324 C101.33 323.34 101.66 322.68 102 322 C102.66 322.66 103.32 323.32 104 324 C105.01 324.33 106.02 324.66 107.06 325 C110 326 110 326 111 328 C111.14 327.26 111.29 326.51 111.44 325.75 C111.9 323.48 112.42 321.24 113 319 C112.34 319 111.68 319 111 319 C111.25 317.12 111.25 317.12 112 315 C115.05 312.85 118.36 312.5 122 312 C121.51 310.51 121.51 310.51 121 309 C121.66 308.67 122.32 308.34 123 308 C121.59 302.39 119.78 297.37 117.06 292.25 C112.86 284.15 110.74 275.56 108.81 266.69 C108.39 263.21 108.39 263.21 107 262 C101.85 261.46 96.74 260.99 92.31 264 C91.55 264.66 90.79 265.32 90 266 C86.98 262.32 85.62 258.59 84.06 254.14 C83.71 253.44 83.36 252.73 83 252 C82.01 251.67 81.02 251.34 80 251 C79.66 253 79.33 255 79 257 C78.81 258.11 78.63 259.23 78.44 260.38 C77.52 267.97 78.25 274.88 79.55 282.35 C80.03 285.57 80.23 287.54 78.74 290.48 C77 292 77 292 74 292 C73.34 290.35 72.68 288.7 72 287 C71.34 287 70.68 287 70 287 C69.67 285.68 69.34 284.36 69 283 C68.01 283 67.02 283 66 283 C62.78 277.73 62.78 277.73 62 276 C62.33 275.34 62.66 274.68 63 274 C63.99 274.33 64.98 274.66 66 275 C65.94 274.31 65.88 273.63 65.82 272.92 C65.69 270.21 65.64 267.69 66 265 C68.62 262.66 70.69 262.1 74 261 C74.96 258.04 74.96 258.04 75.56 254.56 C76.8 248.2 76.8 248.2 79 246 C80.94 246.06 80.94 246.06 83 247 C84.62 249.31 84.62 249.31 86 252 C86.37 252.7 86.74 253.4 87.12 254.12 C88 256 88 256 89 259 C89.61 258.57 90.23 258.13 90.86 257.69 C92.08 256.85 92.08 256.85 93.31 256 C94.11 255.44 94.91 254.89 95.74 254.31 C98 253 98 253 101 253 C101 253.66 101 254.32 101 255 C103.97 255 106.94 255 110 255 C111.2 251.3 111.2 251.3 110.62 248.69 C111.17 244.77 113.6 243.29 116.57 240.84 C118.27 239.08 118.27 239.08 117.83 236.67 C117.24 234.79 116.66 232.9 116.07 231.02 C114.34 225.16 113.25 221.23 116.25 215.69 C116.73 214.9 117.22 214.11 117.71 213.3 C119.63 209.87 119.78 206.88 120 203 C120.66 203 121.32 203 122 203 C122 202.34 122 201.68 122 201 C124 201 124 201 125.62 202.5 C126.31 203.24 126.31 203.24 127 204 C125.51 200.2 123.24 198.39 120 196 C119.9 196.64 119.79 197.28 119.69 197.94 C119.46 198.62 119.23 199.3 119 200 C118.01 200.33 117.02 200.66 116 201 C116.05 199.91 116.09 198.82 116.14 197.7 C116.59 182.43 114.09 168.68 107.86 154.7 C106.89 151.64 107.04 150.03 108 147 C109.19 145.25 109.19 145.25 111 144 C111.99 143.92 112.98 143.84 114 143.75 C117.27 143.27 117.27 143.27 119.12 140.12 C120.75 135.56 118.86 132.2 117.06 127.93 C115.41 123.38 115.19 118.81 115 114 C114.34 114 113.68 114 113 114 C109.12 104.23 105.71 94.59 103.44 84.31 C99.37 66.11 99.37 66.11 89 51 C89 50.34 89 49.68 89 49 C88.01 48.72 88.01 48.72 87 48.44 C84.26 47.12 82.91 46.1 80.75 44.06 C69.18 33.62 54.63 26.35 41 19 C41 18.01 41 17.02 41 16 C40.29 15.88 39.58 15.76 38.85 15.63 C35.88 14.97 33.26 14.01 30.44 12.88 C24.46 10.53 18.44 8.36 12.38 6.25 C11.5 5.94 10.62 5.64 9.72 5.32 C6.48 4.2 3.25 3.08 0 2 C0 1.34 0 0.68 0 0 Z M108 84 C109 87 109 87 109 87 Z M109 87 C109 88.65 109 90.3 109 92 C109.33 92 109.66 92 110 92 C110 90.35 110 88.7 110 87 C109.67 87 109.34 87 109 87 Z M110 92 C111 94 111 94 111 94 Z M110 95 C111 97 111 97 111 97 Z M111 97 C112 100 112 100 112 100 Z M119 123 C120 125 120 125 120 125 Z \",fill:\"#321541\",transform:\"translate(1150,617)\"})),_path106||(_path106=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2.25 2 2.25 4 5 C5.27 6.21 5.27 6.21 6.56 7.44 C9.41 10.44 12 13.7 12 18 C13.22 18.27 14.43 18.54 15.69 18.81 C20.49 20.03 23.76 21.72 27.25 25.31 C31.67 29.63 36.81 33.82 43 35 C43.23 34.42 43.45 33.84 43.69 33.25 C45.37 30.36 47.23 28.85 50 27 C51.32 27 52.64 27 54 27 C54 26.34 54 25.68 54 25 C58.95 24.01 63.9 23.02 69 22 C69 22.66 69 23.32 69 24 C70.01 23.67 71.02 23.34 72.06 23 C76 23 76 23 78.06 24.57 C79.98 26.66 81.64 28.5 83 31 C82.6 34.5 81.2 37.26 79 40 C76.38 40.69 76.38 40.69 73 40 C71.51 39.04 70.06 38.04 68.62 37 C65.58 34.83 63.4 33.51 59.62 33.31 C58.43 33.54 57.23 33.77 56 34 C55.53 34.82 55.05 35.65 54.56 36.5 C54.05 37.32 53.53 38.15 53 39 C49.25 39.66 45.44 39.72 42 38 C42 38.66 42 39.32 42 40 C36.89 41.63 31.93 43.05 26.62 43.88 C23.44 44.51 22.09 44.94 19.44 46.94 C17.95 50.11 17.76 52.05 17.56 55.5 C17.32 59.23 17.15 60.77 15.12 64 C11.51 66.31 8.31 67.08 4.17 68.06 C-3.49 70.33 -10.81 74.5 -17.5 78.81 C-23.22 82.5 -28.26 83.65 -35 83 C-37.25 81.6 -37.25 81.6 -39 79 C-39.37 75.63 -39.1 72.37 -38.81 69 C-38.76 68.1 -38.7 67.2 -38.64 66.27 C-38.19 59.76 -38.19 59.76 -37.49 56.96 C-36.36 52.43 -36.2 48.39 -38.5 44.38 C-39 43.59 -39.49 42.81 -40 42 C-40.62 39.25 -40.62 39.25 -40 36 C-37.95 32.75 -35.52 29.89 -33 27 C-32.39 26.28 -31.78 25.56 -31.15 24.82 C-28.57 21.81 -25.97 18.94 -23.06 16.25 C-20.55 14.02 -20.55 14.02 -21 10 C-22.02 9.94 -23.03 9.88 -24.08 9.82 C-25.47 9.73 -26.86 9.65 -28.25 9.56 C-28.97 9.52 -29.7 9.48 -30.44 9.43 C-35.83 9.1 -41.18 8.61 -46.55 7.99 C-49.42 8 -50.74 8.2 -53 10 C-54.04 12.89 -54.04 12.89 -54.56 16.25 C-55.52 21.01 -56.51 24.85 -59 29 C-60.2 25.4 -59.8 23.05 -59.3 19.35 C-59.04 17.3 -58.88 15.24 -58.75 13.19 C-57.81 9.19 -56.4 8.16 -53 6 C-50.02 4.51 -47.29 4.85 -43.97 4.82 C-42.53 4.8 -41.08 4.78 -39.63 4.75 C-37.36 4.72 -35.09 4.69 -32.82 4.67 C-22.83 4.6 -8.33 -2.78 0 0 Z \",fill:\"#7C5B7B\",transform:\"translate(625,161)\"})),_path107||(_path107=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.49 2.48 3.49 2.48 4 4 C4.77 3.92 5.55 3.83 6.34 3.75 C11.74 3.22 16.36 3.01 21.73 3.95 C26.17 4.05 30.47 2.63 34.73 1.5 C38.31 0.95 39.88 1.24 43 3 C45.37 6.62 45.7 10.99 45.67 15.25 C44.53 19.93 41.28 22.89 37.97 26.26 C35.43 29.8 35.36 31.73 36 36 C37.5 38.34 37.5 38.34 39.69 40.12 C40.41 40.79 41.14 41.46 41.89 42.14 C42.59 42.75 43.28 43.37 44 44 C48.81 48.63 48.81 48.63 50 51 C49.9 63.39 44.93 70.88 37 80 C36.16 81.05 35.33 82.1 34.5 83.16 C30.13 88.7 26.05 92.94 19.96 96.58 C17.15 98.61 15.77 101.05 14.12 104.06 C13.02 105.96 11.84 107.44 10.38 109.06 C5.51 115.08 4.27 121.61 3 129.06 C2.83 130.03 2.66 130.99 2.49 131.99 C0.31 144.67 -1.51 157.4 -2.68 170.21 C-2.79 171.43 -2.91 172.65 -3.03 173.91 C-3.26 176.3 -3.46 178.69 -3.65 181.08 C-4.51 190.17 -4.51 190.17 -7.44 193.18 C-9.13 194.38 -10.86 195.53 -12.62 196.62 C-15.35 199.35 -15.52 200.63 -16.31 204.31 C-17.82 210.63 -20.66 213.49 -26 217 C-28.31 218.33 -30.62 219.59 -33.02 220.76 C-36.03 222.65 -37.59 224.79 -38.73 228.14 C-38.88 228.84 -39.03 229.53 -39.19 230.25 C-39.46 231.49 -39.72 232.72 -40 234 C-40.99 234 -41.98 234 -43 234 C-43.07 229.25 -43.13 224.5 -43.16 219.75 C-43.18 218.13 -43.2 216.52 -43.23 214.9 C-43.26 212.58 -43.28 210.25 -43.29 207.93 C-43.31 207.21 -43.32 206.49 -43.34 205.75 C-43.34 201.31 -42.75 198.52 -40 195 C-37.33 193.27 -37.33 193.27 -34.25 191.81 C-33.19 191.31 -32.12 190.8 -31.02 190.28 C-28.62 189.26 -26.4 188.48 -23.88 187.88 C-20.99 187.31 -20.99 187.31 -19.84 185.45 C-16.44 175.58 -18.83 163.18 -23 154 C-23.91 152.33 -24.83 150.66 -25.75 149 C-30.05 140.7 -28.46 131.69 -26.06 122.97 C-24.02 117.26 -21.33 111.33 -17 107 C-13.44 106.81 -10.22 106.76 -6.72 107.44 C-2.21 108.31 -2.21 108.31 2.05 106.94 C5.91 103.86 8.19 100.98 9 96 C8.85 91.71 8.37 89.53 5.88 86 C4 83 4 83 4 79.5 C5.12 75.59 6.55 73.24 9 70 C9.47 69.31 9.94 68.63 10.42 67.92 C12.55 64.88 14.3 62.45 17.44 60.44 C20.94 59.84 23.56 60.12 27 61 C30.05 63.33 31.45 65.18 32 69 C36.21 68.19 38.48 67.56 41.44 64.38 C43.47 59.98 43.7 57.8 43 53 C41.05 50.75 41.05 50.75 38 49 C25.72 39.96 25.72 39.96 24.31 34.19 C25.56 28.41 30.2 24.71 34.38 20.75 C36.29 18.69 36.92 17.82 37 15 C35.56 10.68 35.56 10.68 33 7 C26.82 6.7 21.24 7.38 15.17 8.51 C11.93 9.01 8.78 9.18 5.5 9.31 C-1.33 9.74 -6.89 12.02 -13 15 C-11.87 11.6 -10.87 10.95 -8 9 C-8.66 8.34 -9.32 7.68 -10 7 C-8.41 5.8 -6.8 4.62 -5.19 3.44 C-4.29 2.78 -3.4 2.11 -2.48 1.43 C-1.66 0.96 -0.84 0.49 0 0 Z \",fill:\"#634369\",transform:\"translate(1093,1046)\"})),_path108||(_path108=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.53 4.19 -4.19 5.76 -7.86 8.15 C-8.44 8.53 -9.02 8.92 -9.61 9.31 C-11.47 10.53 -13.33 11.73 -15.19 12.94 C-17.03 14.14 -18.86 15.34 -20.7 16.55 C-21.88 17.32 -23.06 18.09 -24.24 18.86 C-27.27 20.84 -30.25 22.86 -33.18 24.98 C-35.75 26.82 -38.01 28 -41 29 C-40.61 32.45 -40.61 32.45 -39 36 C-33.38 38.97 -27.14 39.96 -20.95 41.25 C-16.12 42.47 -12.62 44.57 -9 48 C-6.53 52.32 -5.87 55.61 -5.56 60.56 C-5.25 65.49 -3.97 68.01 -1 72 C0.26 75.96 0.1 77.69 -1.19 81.69 C-4.33 87.43 -7.85 88.34 -13.83 90.17 C-16.25 90.96 -16.25 90.96 -18.69 93.25 C-21 95 -21 95 -24.12 94.88 C-27 94 -27 94 -30 92 C-32.19 91.94 -32.19 91.94 -34.5 92.31 C-35.66 92.46 -35.66 92.46 -36.84 92.61 C-39.17 92.98 -39.17 92.98 -42 94 C-42 93.01 -42 92.02 -42 91 C-42.66 91 -43.32 91 -44 91 C-44.2 89.65 -44.2 89.65 -44.41 88.28 C-46.06 78.73 -48.99 70.54 -53.16 61.81 C-53.98 60.04 -54.72 58.22 -55.45 56.4 C-57.07 52.85 -58.96 50.13 -61.38 47.06 C-64.88 42.5 -68.2 38.03 -71 33 C-70.67 32.34 -70.34 31.68 -70 31 C-61.8 29.65 -53.29 29.87 -45 30 C-45 29.34 -45 28.68 -45 28 C-48.96 28.5 -48.96 28.5 -53 29 C-53 28.34 -53 27.68 -53 27 C-60.78 26.81 -60.78 26.81 -68.5 27.62 C-71.61 28.09 -72.39 27.73 -75 26 C-83.84 14.8 -83.84 14.8 -83.19 8.44 C-81.4 3.26 -81.4 3.26 -79 1 C-76.32 0.75 -74.03 0.71 -71.38 0.88 C-66.01 1.15 -61.46 0.77 -56.24 -0.51 C-52.64 -1.3 -49.05 -1.52 -45.38 -1.69 C-44.57 -1.73 -43.77 -1.77 -42.95 -1.81 C-28.66 -2.38 -14.22 -1.44 0 0 Z \",fill:\"#7D6282\",transform:\"translate(631,516)\"})),_path109||(_path109=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.22 0.78 5.56 1.12 8.94 1.12 C19.66 1.12 32.86 13.87 40.16 21.14 C46.16 27.42 50.77 34.54 54.94 42.12 C55.64 43.09 56.34 44.06 57.06 45.06 C59.67 49.33 60.53 53.64 61.32 58.51 C62.3 64.24 64.09 68.62 66.83 73.73 C68.45 77.24 68.67 80.29 68.94 84.12 C69.12 84.78 69.31 85.44 69.5 86.12 C70.24 89.5 70.54 92.73 69.94 96.12 C67.69 99.12 67.69 99.12 64.94 101.12 C63.62 101.12 62.3 101.12 60.94 101.12 C60.94 100.47 60.94 99.81 60.94 99.12 C59.32 97.9 57.64 96.74 55.94 95.62 C54.24 94.51 52.56 93.35 50.94 92.12 C50.94 91.47 50.94 90.81 50.94 90.12 C48.96 91.12 48.96 91.12 46.94 92.12 C46.65 91.33 46.37 90.54 46.07 89.73 C38.56 72 22.14 59.29 6.94 48.12 C5.58 47.02 5.58 47.02 4.2 45.9 C-1.06 41.74 -5.9 39.33 -12.19 37.25 C-19.94 34.66 -24.28 30.84 -29.06 24.12 C-29.53 23.53 -30 22.94 -30.49 22.32 C-32.89 19.14 -33.21 17.02 -33.06 13.12 C-16.96 4.37 -16.96 4.37 -10.06 1.12 C-9.25 0.73 -8.44 0.34 -7.6 -0.07 C-4.61 -1.02 -3.02 -0.76 0 0 Z \",fill:\"#452354\",transform:\"translate(834.0625,94.875)\"})),_path110||(_path110=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.15 0.02 2.3 0.04 3.49 0.05 C4.36 0.08 5.23 0.1 6.12 0.12 C6.46 1.12 6.78 2.11 7.12 3.12 C7.86 3.02 8.59 2.92 9.35 2.82 C12.12 3.12 12.12 3.12 14.37 5.21 C16.64 8.17 18.91 11.12 21.12 14.12 C22 15.25 22 15.25 22.9 16.4 C32.9 30.04 34.72 49.94 34.69 66.38 C34.69 67.39 34.69 67.39 34.69 68.43 C34.65 78.53 33.66 88.17 31.5 98.06 C31.26 99.15 31.03 100.24 30.79 101.36 C29.05 108.43 26.37 114.88 21.12 120.12 C15.16 119.75 10.44 117.77 5.12 115.12 C4.16 114.65 3.19 114.18 2.19 113.69 C-1.7 110.74 -2.18 106.15 -2.88 101.54 C-3.04 100.45 -3.2 99.37 -3.37 98.25 C-3.54 97.1 -3.7 95.94 -3.88 94.75 C-4.14 92.96 -4.14 92.96 -4.41 91.13 C-5.65 82.38 -6.58 73.63 -7.19 64.81 C-7.57 59.54 -8.31 54.57 -9.57 49.43 C-9.92 46.77 -9.53 44.72 -8.88 42.12 C-9.53 42.12 -10.2 42.12 -10.88 42.12 C-11.35 39.97 -11.83 37.82 -12.3 35.67 C-12.65 34.12 -13.03 32.58 -13.45 31.05 C-15.85 22.05 -16.6 10.79 -12.88 2.12 C-8.67 -0.11 -4.69 -0.1 0 0 Z \",fill:\"#4A2F63\",transform:\"translate(624.875,1075.875)\"})),_path111||(_path111=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.98 0.87 2.96 1.73 2.94 2.62 C2.89 5.97 2.89 5.97 3.69 9.06 C4 12 4 12 3.12 14.56 C0.5 17.58 -2.29 19.02 -5.84 20.79 C-8.83 22.46 -10.65 23.89 -11.69 27.19 C-11.84 28.08 -11.84 28.08 -12 29 C-8.37 26.89 -4.96 24.6 -1.56 22.12 C-0.59 21.43 0.37 20.73 1.37 20 C3.43 18.44 5.18 16.88 7 15.06 C10.8 12.45 13.43 12.63 17.93 12.44 C22.73 11.75 26.66 9.51 30.96 7.37 C34.78 5.65 37.85 5.16 42 5 C40.75 8.74 39.12 9.27 35.73 11.01 C35.01 11.36 34.3 11.7 33.56 12.06 C32.84 12.42 32.12 12.78 31.38 13.14 C26.05 15.7 20.92 17.43 15 18 C13.82 22.02 13.88 23.71 15.56 27.62 C17.89 31.17 20.07 33.22 24 35 C30.69 35.96 30.69 35.96 36.74 33.73 C38.13 31.82 38.76 30.19 39.44 27.94 C40.79 24.18 40.79 24.18 42.69 22.56 C46.11 21.73 49.5 21.35 53 21 C52 23 52 23 50 23.75 C48.38 24.21 46.75 24.66 45.13 25.12 C42.66 25.91 42.66 25.91 41 29 C40.79 33.23 40.9 36.55 41.81 40.69 C42 44 42 44 39.97 46.46 C36.71 49.25 33.51 51.05 29.69 52.94 C21.3 57.16 21.3 57.16 14 63 C14 63.66 14 64.32 14 65 C21.38 64.48 26.38 62.89 31.44 57.31 C34.11 54.9 36.06 53.88 39.67 53.58 C43.95 54.35 47.22 57.02 50.68 59.53 C51.45 60.02 52.21 60.5 53 61 C53.66 60.67 54.32 60.34 55 60 C59.71 65.62 62.51 71.13 65 78 C65.33 78.66 65.66 79.32 66 80 C71.08 80.11 71.08 80.11 76 79 C79.52 78.73 83.03 78.55 86.55 78.38 C89.79 78.02 92.06 77.31 95 76 C97.62 75.62 97.62 75.62 100 76 C103.5 78.88 103.6 82.73 104.08 86.98 C104 89 104 89 102 91 C99.29 91.6 99.29 91.6 96.06 92.06 C92.88 92.53 90.05 92.98 87 94 C83.45 94.27 79.9 94.45 76.35 94.62 C73.28 94.97 71.52 95.28 69 97 C66.55 100.68 66.77 103.44 66.88 107.69 C66.88 108.39 66.89 109.09 66.9 109.81 C66.93 111.54 66.96 113.27 67 115 C66.34 115 65.68 115 65 115 C65 116.98 65 118.96 65 121 C64.67 120.01 64.34 119.02 64 118 C63.34 117.67 62.68 117.34 62 117 C61.53 115.89 61.05 114.77 60.56 113.62 C59.34 110.14 59.34 110.14 57.51 108.57 C55.63 106.61 55.1 104.89 54.31 102.31 C54.06 101.5 53.81 100.7 53.55 99.86 C53.37 99.25 53.19 98.63 53 98 C54.49 98.49 54.49 98.49 56 99 C56 97.35 56 95.7 56 94 C55.38 93.9 54.76 93.79 54.12 93.69 C52 93 52 93 50 90 C50.66 89.34 51.32 88.68 52 88 C47.3 88.49 44.57 89.66 40.81 92.5 C38.11 94.52 36.21 95.93 33 97 C34.42 99.03 35.55 99.9 37.98 100.42 C39.98 100.66 41.99 100.84 44 101 C43.34 101.66 42.68 102.32 42 103 C36.03 102.8 32.78 101.82 28 98 C26.37 95.75 25.12 93.36 23.88 90.88 C21.76 86.7 20.36 84 16 82 C14.54 79.71 14.54 79.71 13.19 76.94 C10.33 71.42 6.92 66.79 3 62 C0 58.26 0 58.26 0 56 C-0.66 56 -1.32 56 -2 56 C-4 52.34 -6 48.67 -8 45 C-8.55 43.99 -9.11 42.98 -9.68 41.94 C-13.03 35.78 -16.28 29.57 -19.44 23.31 C-19.97 22.27 -19.97 22.27 -20.51 21.2 C-23 16.24 -23 16.24 -23 14 C-22.34 14 -21.68 14 -21 14 C-20.73 14.68 -20.47 15.35 -20.2 16.05 C-19.84 16.94 -19.49 17.83 -19.12 18.75 C-18.78 19.63 -18.43 20.51 -18.07 21.42 C-17.14 23.67 -16.12 25.84 -15 28 C-15.31 27.11 -15.62 26.23 -15.94 25.31 C-16.83 22.53 -17.46 19.86 -18 17 C-9.67 10.41 -9.67 10.41 -5.62 7.94 C-2.53 5.65 -1.44 3.53 0 0 Z \",fill:\"#0A123C\",transform:\"translate(627,959)\"})),_path112||(_path112=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 2.31 0.66 4.62 1 7 C-0.11 7.43 -1.23 7.87 -2.38 8.31 C-6.18 9.7 -6.18 9.7 -8 13 C-9.33 13.62 -9.33 13.62 -10.69 14.25 C-13.71 15.85 -14.83 16.79 -17 19.25 C-21.53 24 -27.3 26.42 -33.17 29.14 C-36.1 30.52 -38.99 31.98 -41.88 33.44 C-43.58 34.29 -45.29 35.15 -47 36 C-48.08 34.73 -48.08 34.73 -49.19 33.44 C-51.69 30.74 -51.69 30.74 -54.5 30.94 C-60.53 33.5 -62.76 36.93 -65.2 42.78 C-71.06 59.1 -67.73 77.61 -61 93 C-60.52 94.23 -60.52 94.23 -60.03 95.49 C-57.92 100.75 -55.03 104.82 -51.39 109.15 C-50 111 -50 111 -50 113 C-49.34 113 -48.68 113 -48 113 C-47.63 113.93 -47.63 113.93 -47.25 114.88 C-45.79 117.35 -44.62 117.95 -42 119 C-42 119.66 -42 120.32 -42 121 C-41.2 121.25 -40.39 121.5 -39.56 121.75 C-36 123 -36 123 -34.27 123.95 C-23.19 129.89 -8.95 130.11 2.97 127 C6.5 125.83 9.82 124.42 13.16 122.79 C15.5 121.79 17.48 121.67 20 122 C19 125 19 125 15.68 126.75 C14.27 127.37 12.86 127.97 11.44 128.56 C10.75 128.87 10.05 129.17 9.34 129.48 C-3.59 135.01 -19.38 137.14 -32.73 131.8 C-39.04 128.92 -45.81 125.65 -51 121 C-51 120.34 -51 119.68 -51 119 C-51.88 118.63 -51.88 118.63 -52.79 118.26 C-55.38 116.78 -56.65 115.25 -58.44 112.88 C-58.99 112.15 -59.55 111.43 -60.12 110.68 C-64.7 104.15 -68.06 97.92 -70.69 90.38 C-70.98 89.56 -71.28 88.74 -71.58 87.89 C-72.8 84.47 -73.99 81.04 -75.13 77.59 C-76.51 73.5 -77.57 70.75 -81.5 68.69 C-87.26 67.56 -93.38 67.13 -99 69 C-98.5 72.96 -98.5 72.96 -98 77 C-97.34 77 -96.68 77 -96 77 C-94.69 83.56 -95.47 87.83 -98 94 C-98.66 94 -99.32 94 -100 94 C-100.01 94.59 -100.03 95.18 -100.04 95.79 C-100.12 98.46 -100.22 101.14 -100.31 103.81 C-100.34 104.74 -100.36 105.67 -100.38 106.63 C-100.42 107.52 -100.45 108.41 -100.49 109.33 C-100.51 110.15 -100.54 110.98 -100.57 111.82 C-101.09 114.46 -101.88 115.39 -104 117 C-104.66 117 -105.32 117 -106 117 C-106.66 113.04 -107.32 109.08 -108 105 C-108.99 105.5 -108.99 105.5 -110 106 C-110 107.98 -110 109.96 -110 112 C-116.88 111.12 -116.88 111.12 -118 110 C-117.82 107.31 -117.38 104.67 -117 102 C-118.89 101.32 -118.89 101.32 -121 101 C-123.36 103.36 -123.49 104.78 -124 108 C-123.04 108.46 -123.04 108.46 -122.06 108.94 C-120 110 -120 110 -119 111 C-118.96 112.67 -118.96 114.33 -119 116 C-118.34 116 -117.68 116 -117 116 C-115.38 117.38 -115.38 117.38 -114 119 C-114 119.66 -114 120.32 -114 121 C-113.34 121 -112.68 121 -112 121 C-112 122.32 -112 123.64 -112 125 C-116.05 125.98 -119.84 126.08 -124 126 C-124.19 127.89 -124.19 127.89 -124.38 129.81 C-124.7 133.1 -125.07 134.1 -127 137 C-130.72 132.88 -130.43 129.21 -130.59 123.88 C-131.04 120.68 -131.97 119.42 -134 117 C-134 116.34 -134 115.68 -134 115 C-136.64 114.34 -139.28 113.68 -142 113 C-143 109 -143 109 -141.98 107.12 C-140.57 104.07 -141.44 102.33 -142.36 99.14 C-144.2 91.89 -144.35 85.13 -144.19 77.69 C-144.17 76.46 -144.16 75.23 -144.15 73.96 C-144.11 70.97 -144.06 67.99 -144 65 C-144.66 65 -145.32 65 -146 65 C-147.52 72.5 -148.42 79.87 -148.94 87.5 C-149.49 95 -150.29 102.35 -151.62 109.75 C-153.36 119.51 -153.28 129.12 -153 139 C-156 139 -156 139 -157.67 137.4 C-161.81 129.94 -158.72 118.61 -157.43 110.59 C-156.99 106.89 -156.97 103.41 -157.06 99.69 C-157.17 92.41 -156.5 85.35 -155.62 78.12 C-155.5 77.08 -155.37 76.03 -155.24 74.96 C-154.43 68.57 -153.36 62.29 -152 56 C-151.34 56.66 -150.68 57.32 -150 58 C-147.5 58.81 -145.66 59 -143 59 C-142.9 57.95 -142.8 56.9 -142.7 55.82 C-142.55 54.45 -142.4 53.07 -142.25 51.69 C-142.16 50.65 -142.16 50.65 -142.06 49.6 C-141.69 46.36 -141.37 44.4 -139.12 41.99 C-137 41 -137 41 -133.88 41.5 C-131 43 -131 43 -129.62 45.19 C-128.88 48.52 -128.87 51.59 -129 55 C-129.66 55 -130.32 55 -131 55 C-131.66 53.35 -132.32 51.7 -133 50 C-133.99 50 -134.98 50 -136 50 C-135.99 50.77 -135.98 51.54 -135.96 52.34 C-135.96 53.34 -135.95 54.34 -135.94 55.38 C-135.93 56.37 -135.91 57.37 -135.9 58.4 C-136 61 -136 61 -137 63 C-137.54 68.32 -137.77 73.66 -138 79 C-138.04 79.73 -138.07 80.47 -138.11 81.22 C-138.2 83.36 -138.26 85.49 -138.31 87.62 C-138.35 88.9 -138.39 90.17 -138.43 91.48 C-137.9 95.81 -136.65 97.6 -134 101 C-132.02 100.01 -132.02 100.01 -130 99 C-130.66 98.4 -131.32 97.8 -132 97.19 C-134 95 -134 95 -134 92 C-132.42 91.52 -130.83 91.04 -129.25 90.56 C-128.37 90.3 -127.49 90.03 -126.58 89.75 C-125.73 89.51 -124.88 89.26 -124 89 C-122.94 88.64 -122.94 88.64 -121.86 88.28 C-120 88 -120 88 -117 90 C-119.97 90.99 -122.94 91.98 -126 93 C-126 93.99 -126 94.98 -126 96 C-120.72 95.01 -115.44 94.02 -110 93 C-110 87.67 -110.65 84.37 -112.62 79.62 C-112.9 78.97 -113.17 78.31 -113.45 77.63 C-117.15 68.89 -117.15 68.89 -124.16 62.86 C-126.58 61.88 -126.58 61.88 -130 61 C-130 60.01 -130 59.02 -130 58 C-128 56.75 -128 56.75 -125 56 C-119.31 57.5 -116.16 60.6 -113.1 65.45 C-111.71 67.41 -110.27 68.24 -108 69 C-108.66 67.35 -109.32 65.7 -110 64 C-107.52 63.5 -107.52 63.5 -105 63 C-104.67 63.99 -104.34 64.98 -104 66 C-103.32 65.71 -102.64 65.42 -101.95 65.12 C-93.76 61.86 -86.83 60.4 -78.38 63.5 C-77.26 64 -76.15 64.49 -75 65 C-75.01 64.14 -75.02 63.29 -75.04 62.4 C-75.12 51.59 -74.55 40.02 -70 30 C-67.12 28.19 -67.12 28.19 -64 27 C-62.76 25.7 -62.76 25.7 -61.5 24.38 C-58.55 21.57 -56.94 21.5 -53 21 C-52.38 20.53 -51.77 20.05 -51.13 19.57 C-48.75 17.81 -46.86 17.26 -44 16.56 C-39.98 15.47 -39.98 15.47 -36.81 12.81 C-35 11 -35 11 -31.44 10.88 C-30.3 10.92 -29.17 10.96 -28 11 C-27.01 10.34 -26.02 9.68 -25 9 C-22.67 9 -20.33 9 -18 9 C-17.01 8.34 -16.02 7.68 -15 7 C-13.68 7 -12.36 7 -11 7 C-11 6.34 -11 5.68 -11 5 C-10.01 4.67 -9.02 4.34 -8 4 C-7.3 2.68 -6.63 1.35 -6 0 C-3.51 -1.25 -2.59 -0.78 0 0 Z \",fill:\"#0B0910\",transform:\"translate(643,253)\"})),_path113||(_path113=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.4 6.9 1.76 12.07 -0.25 17.62 C-0.72 18.94 -0.72 18.94 -1.19 20.27 C-3.68 27.23 -6.28 34.13 -9 41 C-7.35 41.33 -5.7 41.66 -4 42 C-3.81 44.44 -3.62 46.87 -3.44 49.31 C-3.35 50.35 -3.35 50.35 -3.27 51.4 C-2.89 56.66 -4.02 60.12 -5.94 64.94 C-6.45 66.22 -6.45 66.22 -6.96 67.53 C-7.89 69.74 -8.9 71.87 -10 74 C-10.66 74 -11.32 74 -12 74 C-12.08 74.68 -12.17 75.36 -12.25 76.06 C-13.86 82.38 -18.05 87.9 -22 93 C-22.66 93 -23.32 93 -24 93 C-24 93.99 -24 94.98 -24 96 C-24.66 96 -25.32 96 -26 96 C-26.25 96.71 -26.5 97.42 -26.76 98.15 C-28.13 101.31 -29.83 103.79 -31.88 106.56 C-32.55 107.49 -33.23 108.42 -33.93 109.38 C-37.24 113.57 -39.78 116.46 -45 118 C-48.02 118.32 -51.02 118.44 -54.06 118.56 C-58.78 119.27 -61.32 121.23 -64.44 124.75 C-67 127 -67 127 -70.12 127 C-74.58 125.45 -74.58 125.45 -76 123 C-76.63 116.83 -75.43 112.66 -73 107 C-72.34 107 -71.68 107 -71 107 C-70.92 106.24 -70.83 105.47 -70.75 104.69 C-70.1 101.51 -69.24 98.94 -68.06 95.94 C-66.46 91.73 -65.64 87.9 -65.12 83.44 C-64.37 77.73 -62.62 73.95 -59.44 69.2 C-57.82 66.87 -57.82 66.87 -56.5 63.44 C-54.84 59.64 -52.76 56.47 -50.41 53.07 C-48.91 50.93 -48.91 50.93 -47.5 48.25 C-46.06 46.09 -44.83 44.96 -42.81 43.38 C-41.88 42.59 -40.96 41.81 -40 41 C-40 40.01 -40 39.02 -40 38 C-38.17 36.2 -36.37 34.6 -34.38 33 C-33.85 32.56 -33.33 32.12 -32.79 31.67 C-29.39 28.88 -25.97 26.87 -22 25 C-21.01 24.34 -20.02 23.68 -19 23 C-19 23.66 -19 24.32 -19 25 C-15.08 22.21 -15.08 22.21 -13 18 C-11.86 16.88 -11.86 16.88 -10.71 15.74 C-7.77 12.76 -5.79 9.77 -3.69 6.19 C-3.33 5.59 -2.97 4.99 -2.6 4.38 C-1.73 2.92 -0.86 1.46 0 0 Z \",fill:\"#4B295A\",transform:\"translate(423,539)\"})),_path114||(_path114=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.81 4.17 8 10.28 10.11 17.62 C10.92 20.4 11.83 23.09 12.81 25.81 C13.99 29.26 14.34 32.21 14.06 35.88 C13.1 36.31 13.1 36.31 12.12 36.75 C9.91 37.7 9.91 37.7 9.06 39.88 C9.11 45.53 10.27 50.97 11.62 56.44 C14.08 66.74 14.08 66.74 13.06 71.88 C11.06 74.94 11.06 74.94 9.06 76.88 C11.14 77.02 11.14 77.02 13.06 75.88 C13.59 80.11 13.02 82.18 10.54 85.49 C7.47 90.23 7.63 94.01 8.06 99.5 C8.78 108.6 8.78 108.6 5.76 112.35 C0.45 117.32 -5.18 118.28 -12.15 119.39 C-15.52 119.98 -18.78 120.85 -22.06 121.8 C-23.94 121.88 -23.94 121.88 -25.69 120.54 C-26.94 118.88 -26.94 118.88 -26.94 116.88 C-28.59 116.88 -30.24 116.88 -31.94 116.88 C-32.27 115.88 -32.6 114.89 -32.94 113.88 C-33.6 113.55 -34.26 113.22 -34.94 112.88 C-36.94 111.88 -36.94 111.88 -37.94 108.88 C-39.08 99.86 -37.65 94.32 -32.75 86.75 C-27.3 78.09 -25.52 67.64 -23.36 57.76 C-23.02 56.23 -22.65 54.71 -22.28 53.2 C-20.8 46.86 -20.58 40.52 -20.45 34.03 C-20.31 29.64 -20.04 27.86 -16.94 24.88 C-15.16 19.35 -14.73 14.66 -14.94 8.88 C-15.6 8.88 -16.26 8.88 -16.94 8.88 C-18.56 6.3 -18.98 5.2 -18.56 2.12 C-18.25 1.01 -18.25 1.01 -17.94 -0.12 C-12.33 -1.99 -5.59 -2.06 0 0 Z \",fill:\"#7C668F\",transform:\"translate(561.9375,321.125)\"})),_path115||(_path115=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 0.38 1.05 0.38 2.12 0.77 C5.82 2.08 9.53 3.28 13.28 4.41 C30.63 9.64 47.15 15.17 63.25 23.54 C65.32 24.6 67.4 25.61 69.49 26.62 C90.57 36.81 90.57 36.81 95.28 44.58 C96.03 47.39 96.03 47.39 96.28 49.58 C97.76 50.07 97.76 50.07 99.28 50.58 C103.45 56.68 105.56 63.08 106.78 70.33 C107.75 75.66 108.63 79.96 112.2 84.14 C115.87 86.67 120 87.19 124.35 87.81 C127.28 88.58 127.28 88.58 129.23 90.47 C130.28 92.58 130.28 92.58 129.28 95.58 C126.31 95.58 123.34 95.58 120.28 95.58 C120.28 94.92 120.28 94.26 120.28 93.58 C119.62 93.58 118.96 93.58 118.28 93.58 C117.95 95.23 117.62 96.88 117.28 98.58 C116.62 98.58 115.96 98.58 115.28 98.58 C115.39 99.81 115.39 99.81 115.5 101.07 C116.34 111.27 116.34 111.27 116.15 116.33 C116.09 120.88 116.86 125.18 117.72 129.64 C118.85 135.7 119.77 141.74 120.28 147.89 C120.39 148.95 120.39 148.95 120.51 150.04 C120.77 153.75 120.56 155.25 118.1 158.1 C114.82 159.81 113.67 159.82 110.15 158.89 C108.88 158.57 108.88 158.57 107.58 158.25 C105.8 157.73 104.04 157.16 102.28 156.58 C101.15 150.83 101.15 150.83 102.28 148.58 C101.62 148.58 100.96 148.58 100.28 148.58 C100.28 149.24 100.28 149.9 100.28 150.58 C99.62 150.25 98.96 149.92 98.28 149.58 C97.64 147.61 97.64 147.61 97.15 145.2 C96.99 144.41 96.82 143.62 96.64 142.8 C96.28 140.58 96.28 140.58 96.28 137.58 C95.22 135.58 95.22 135.58 93.76 133.52 C93.23 132.74 92.7 131.96 92.16 131.16 C91.6 130.35 91.04 129.54 90.47 128.7 C89.37 127.1 88.28 125.5 87.2 123.9 C86.68 123.15 86.16 122.39 85.63 121.62 C84.28 119.58 84.28 119.58 82.66 116.61 C80.95 114.1 79.81 113.69 76.9 112.95 C72.28 111.62 68.72 110.02 65.28 106.58 C64.42 101.45 66.17 98.55 68.89 94.41 C70.25 92.61 71.58 91.05 73.28 89.58 C73.94 89.58 74.6 89.58 75.28 89.58 C75.11 88.79 74.95 88.01 74.78 87.2 C74.28 84.58 74.28 84.58 74.28 82.58 C74.11 81.61 73.95 80.64 73.78 79.64 C73.28 76.46 73.36 73.53 73.53 70.33 C73.55 61.1 69.66 54.64 63.34 48.14 C59.84 44.84 56.33 42.13 52.28 39.58 C52.28 38.92 52.28 38.26 52.28 37.58 C51.44 37.19 51.44 37.19 50.59 36.8 C47.03 34.92 43.88 32.49 40.62 30.13 C38.28 28.43 38.28 28.43 35.28 27.58 C35.28 26.92 35.28 26.26 35.28 25.58 C33.3 24.92 31.32 24.26 29.28 23.58 C29.28 22.92 29.28 22.26 29.28 21.58 C28.77 21.34 28.26 21.1 27.73 20.85 C23.71 18.76 19.88 16.33 16.03 13.94 C11.89 11.42 7.77 9.38 3.28 7.58 C3.28 6.92 3.28 6.26 3.28 5.58 C1.82 5.17 1.82 5.17 0.34 4.76 C-0.67 4.37 -1.68 3.98 -2.72 3.58 C-3.05 2.59 -3.38 1.6 -3.72 0.58 C-1.72 -0.42 -1.72 -0.42 0 0 Z M19.28 10.58 C22.32 12.91 25.45 15.04 28.65 17.14 C39.63 24.44 50.16 32.1 60.28 40.58 C61.2 41.3 61.2 41.3 62.15 42.04 C64.69 44.03 66.43 45.8 68.22 48.51 C69.98 51.13 71.16 52.43 73.54 54.34 C77.17 57.39 80.15 60.73 83.15 64.39 C87.91 70.06 92.76 75.62 98.28 80.58 C98.61 80.58 98.94 80.58 99.28 80.58 C99.35 76.69 99.27 73.32 98.28 69.58 C98.01 67.99 97.73 66.41 97.47 64.83 C96.45 59.84 94.86 55.94 92.28 51.58 C91.53 50.18 91.53 50.18 90.77 48.76 C85.35 39.55 78.32 34.9 69.28 29.58 C68.38 29.01 67.49 28.45 66.57 27.88 C64.44 26.67 62.63 25.97 60.28 25.33 C54.91 23.65 50.24 20.91 45.39 18.1 C42.26 16.57 39.71 16.05 36.28 15.58 C34.6 14.59 32.94 13.59 31.28 12.58 C27.16 11.18 23.63 10.31 19.28 10.58 Z \",fill:\"#3F1C4E\",transform:\"translate(1112.722412109375,651.424560546875)\"})),_path116||(_path116=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.83 1.66 3.1 3.16 4.36 5.3 C6.03 8.05 7.86 10.49 9.88 13 C10.57 13.88 11.27 14.76 12 15.66 C14.01 18.16 14.01 18.16 16.94 20.38 C19.85 24.08 19.65 27.44 19.76 32.06 C20.29 38.56 23.91 44.07 28 49 C30.83 51.33 33.82 53.19 37 55 C37.63 55.37 38.27 55.73 38.92 56.11 C41.64 57.67 44.37 59.2 47.12 60.69 C51.48 64.19 54.26 68.46 55.41 73.99 C55.52 76.4 55.31 78.6 55 81 C54.92 81.65 54.83 82.29 54.75 82.96 C54.44 85.21 54.1 87.45 53.75 89.69 C53.64 90.41 53.53 91.14 53.42 91.88 C52.55 96.83 51.04 100.01 48 104 C47.34 103.67 46.68 103.34 46 103 C46.22 102.23 46.43 101.45 46.66 100.66 C49.91 88.82 49.91 88.82 46.41 77.34 C45.94 76.57 45.48 75.8 45 75 C44.37 73.95 43.74 72.9 43.09 71.82 C40.41 67.39 37.68 63 34.75 58.73 C33 56 33 56 33 54 C32.17 54.22 31.33 54.43 30.47 54.66 C20.15 57.21 20.15 57.21 14.88 57 C11.17 56.62 11.17 56.62 9.26 58.25 C7.61 60.18 7.61 60.18 8 64 C12.29 64 16.58 64 21 64 C21 64.66 21 65.32 21 66 C21.74 66.25 22.48 66.49 23.24 66.75 C28.5 69.13 32.66 73.92 34.96 79.21 C35.53 81.5 35.82 83.64 36 86 C36.12 87.44 36.12 87.44 36.24 88.91 C36.49 94.46 36.49 94.46 36 97 C32.66 100.26 29.61 100.76 25 101 C20.59 100.05 17.71 98.68 15 95 C15.19 92.78 15.42 91.58 17 90 C17.04 88.33 17.04 86.67 17 85 C7.91 81.65 -2.72 80.54 -11.88 84.12 C-14.27 85.94 -14.27 85.94 -15.19 89.25 C-14.93 94.45 -12.71 96.56 -9 100 C-7.37 101.38 -5.72 102.74 -4 104 C-4.42 106.97 -4.85 108.79 -6.62 111.25 C-9.11 116.22 -7.42 121.22 -6.19 126.44 C-4.8 129.42 -3.91 129.73 -1 131 C-1.75 131.24 -2.5 131.48 -3.27 131.73 C-4.25 132.07 -5.24 132.4 -6.25 132.75 C-7.22 133.07 -8.2 133.4 -9.2 133.73 C-12.19 135.08 -13.74 136.68 -16 139 C-19.52 138.83 -21.03 137.98 -24 136 C-25.73 135.81 -25.73 135.81 -27.5 135.62 C-31 135 -31 135 -32.94 133.44 C-34.18 130.58 -33.92 128.41 -33.78 125.34 C-34.15 121.4 -36.02 118.15 -37.75 114.63 C-39.26 111.46 -40.17 108.4 -41 105 C-41.66 105 -42.32 105 -43 105 C-47.79 99.59 -52 94.42 -52 87 C-51.67 87.66 -51.34 88.32 -51 89 C-50.34 89 -49.68 89 -49 89 C-47.62 90.25 -47.62 90.25 -46 92 C-45.28 92.66 -44.56 93.32 -43.81 94 C-42 96 -42 96 -42 99 C-41.34 99 -40.68 99 -40 99 C-39.67 99.99 -39.34 100.98 -39 102 C-37.04 103.17 -37.04 103.17 -34.69 104.06 C-31.73 105.28 -28.85 106.54 -26 108 C-26 106.68 -26 105.36 -26 104 C-27.18 103.54 -27.18 103.54 -28.38 103.06 C-31 102 -31 102 -33 101 C-33 100.34 -33 99.68 -33 99 C-34.49 98.5 -34.49 98.5 -36 98 C-36 97.34 -36 96.68 -36 96 C-36.99 95.67 -37.98 95.34 -39 95 C-40.54 93.19 -40.54 93.19 -42.06 91 C-44.08 87.98 -44.08 87.98 -47 86 C-46.5 85.01 -46.5 85.01 -46 84 C-42.76 84.35 -41.38 84.56 -39.19 87.06 C-38.6 88.02 -38.6 88.02 -38 89 C-35.97 88.54 -33.94 88.09 -31.91 87.63 C-29.78 87.17 -27.64 86.74 -25.5 86.34 C-16.53 84.72 -16.53 84.72 -9 80 C-6.9 76.85 -6.78 76.36 -6.98 72.83 C-7.01 72.02 -7.04 71.21 -7.07 70.37 C-7.15 68.68 -7.24 67 -7.34 65.31 C-7.52 59.59 -6.54 56.31 -3.12 51.7 C-1.62 49.43 -1.59 47.65 -2 45 C-2.66 45.66 -3.32 46.32 -4 47 C-4.66 46.34 -5.32 45.68 -6 45 C-5.34 44.36 -4.68 43.72 -4 43.06 C-0.94 38.37 -1.31 34.32 -2.41 29.02 C-3.09 26.04 -3.8 23.07 -4.58 20.12 C-5.64 15.99 -6.35 12.3 -6 8 C-4.45 5.96 -3.28 5.14 -1 4 C-0.35 1.98 -0.35 1.98 0 0 Z \",fill:\"#70577E\",transform:\"translate(576,353)\"})),_path117||(_path117=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 1.49 0.5 1.49 1 3 C1.66 3 2.32 3 3 3 C3.99 4.98 4.98 6.96 6 9 C7.02 4.9 7.02 4.9 6 1 C7.32 1 8.64 1 10 1 C10.5 2.49 10.5 2.49 11 4 C11.99 4.33 12.98 4.66 14 5 C14 5.66 14 6.32 14 7 C13.01 7.66 12.02 8.32 11 9 C12.07 8.92 13.14 8.83 14.25 8.75 C18 9 18 9 20.44 10.81 C22 13 22 13 22 16 C23.49 16.5 23.49 16.5 25 17 C25 17.66 25 18.32 25 19 C24.3 18.85 23.6 18.69 22.88 18.54 C17.03 17.51 17.03 17.51 11.59 19.39 C9.59 21.17 7.78 23 6 25 C5.19 25.78 5.19 25.78 4.36 26.57 C2.54 28.48 1.87 30.54 1 33 C0.34 33 -0.32 33 -1 33 C-1.05 35.9 -1.09 38.79 -1.12 41.69 C-1.15 42.91 -1.15 42.91 -1.18 44.16 C-1.21 48.68 -0.84 51.82 1 56 C1.01 58.39 1.01 58.39 0.69 60.69 C0.59 61.45 0.49 62.22 0.39 63.01 C0 65 0 65 -1 67 C-1.66 73.15 -0.49 76.64 2.43 82.02 C4.37 85.69 6.07 89.45 7.75 93.25 C8.06 93.92 8.36 94.6 8.68 95.29 C10.9 100.32 12.49 104.71 11.31 110.25 C9.79 113.45 9.01 113.49 6 115 C5.32 117 4.65 119 4 121 C1.88 122.88 1.88 122.88 0 124 C1.31 127.12 1.31 127.12 4 129 C4.25 129.76 4.5 130.53 4.75 131.31 C6.41 134.88 8.71 135.92 12 138 C13.88 140.25 13.88 140.25 15 142 C14.67 142.66 14.34 143.32 14 144 C13.6 143.51 13.2 143.02 12.78 142.51 C10.52 140.59 9.42 140.68 6.5 140.81 C5.73 140.84 4.95 140.87 4.16 140.89 C3.44 140.93 2.73 140.96 2 141 C1.01 141 0.02 141 -1 141 C-4.6 143.88 -4.6 143.88 -6.37 147.95 C-7.49 151.6 -10.95 153.12 -13.97 155.22 C-16.18 157.16 -16.65 158.14 -17 161 C-17.66 161 -18.32 161 -19 161 C-18.67 161.56 -18.34 162.11 -18 162.69 C-16.86 165.33 -17 167.14 -17 170 C-16.71 170.72 -16.42 171.44 -16.12 172.19 C-14.47 176.33 -13.8 180.63 -13 185 C-16.94 180.69 -16.94 180.69 -17.25 177.19 C-17.17 176.47 -17.09 175.74 -17 175 C-17.66 175 -18.32 175 -19 175 C-19.43 173.3 -19.43 173.3 -19.88 171.56 C-20.25 170.39 -20.62 169.21 -21 168 C-21.66 167.67 -22.32 167.34 -23 167 C-23.85 164.71 -23.85 164.71 -24.62 161.94 C-25.02 160.56 -25.02 160.56 -25.41 159.15 C-25.7 158.09 -25.7 158.09 -26 157 C-26.66 157 -27.32 157 -28 157 C-28.99 154.65 -29.97 152.3 -30.94 149.94 C-31.22 149.28 -31.49 148.62 -31.78 147.95 C-33.53 143.65 -34.73 139.68 -35 135 C-31.68 130.33 -28.36 129.16 -23 128 C-23 127.34 -23 126.68 -23 126 C-20.53 124.44 -17.96 123.1 -15.38 121.73 C-12.54 119.67 -11.89 118.36 -11 115 C-10.76 112.56 -10.76 112.56 -10.88 110.19 C-10.89 109.4 -10.91 108.61 -10.93 107.79 C-10.95 107.2 -10.98 106.61 -11 106 C-9.19 105.38 -9.19 105.38 -7 105 C-6.01 105.66 -5.02 106.32 -4 107 C-1.19 107.43 1.12 107.23 4 107 C6.18 103.72 6.32 102.23 5.75 98.4 C4.21 93.45 1.24 89.02 -2 85 C-4.96 83.62 -4.96 83.62 -7.48 85.21 C-8.37 85.78 -9.27 86.35 -10.19 86.94 C-11.09 87.5 -11.99 88.07 -12.92 88.65 C-13.61 89.1 -14.29 89.54 -15 90 C-25 74.03 -25 74.03 -25 68 C-25.99 67.5 -25.99 67.5 -27 67 C-27 66.01 -27 65.02 -27 64 C-27.33 63.18 -27.66 62.35 -28 61.5 C-29 59 -29 59 -29 56 C-32.19 53.28 -32.19 53.28 -36 52 C-36.08 53.11 -36.16 54.23 -36.25 55.38 C-36.5 56.57 -36.75 57.77 -37 59 C-38.79 60.13 -38.79 60.13 -41 61 C-41.67 61.27 -42.35 61.54 -43.04 61.82 C-53.62 65.5 -53.62 65.5 -59 65 C-60.62 63.58 -60.62 63.58 -62 62 C-64.1 60.82 -64.1 60.82 -66 60 C-66.33 61.98 -66.66 63.96 -67 66 C-67.99 66 -68.98 66 -70 66 C-70.37 59.42 -70.37 59.42 -68.62 57.44 C-68.09 56.96 -67.55 56.49 -67 56 C-66.77 55.05 -66.55 54.1 -66.31 53.12 C-64.43 48.64 -61.19 47.2 -57 45 C-55.5 46.25 -55.5 46.25 -54 48 C-54 49.32 -54 50.64 -54 52 C-53.34 52 -52.68 52 -52 52 C-51.67 52.99 -51.34 53.98 -51 55 C-49 56.21 -49 56.21 -47 57 C-46.01 55.35 -45.02 53.7 -44 52 C-42.51 52.5 -42.51 52.5 -41 53 C-41.31 51.1 -41.62 49.21 -41.94 47.31 C-42.11 46.26 -42.29 45.2 -42.46 44.11 C-42.8 42.14 -43.2 40.17 -43.68 38.23 C-43.79 37.49 -43.89 36.76 -44 36 C-42.69 34.64 -41.35 33.31 -40 32 C-39.62 30.01 -39.29 28.01 -39 26 C-37.24 22.31 -35.85 20.46 -32 19 C-27.08 23.52 -23.39 30.5 -22 37 C-22.66 37.99 -23.32 38.98 -24 40 C-23.67 40.99 -23.34 41.98 -23 43 C-22.32 42.8 -21.65 42.59 -20.95 42.38 C-20.06 42.11 -19.17 41.84 -18.25 41.56 C-17.37 41.3 -16.49 41.03 -15.58 40.75 C-13.39 40.12 -11.21 39.53 -9 39 C-7.38 33.36 -7.38 33.36 -7.31 27.56 C-6.95 23.43 -6.23 22.92 -3.5 20 C1.08 14.71 0.56 9.57 0.25 2.96 C0.16 1.99 0.08 1.01 0 0 Z \",fill:\"#301243\",transform:\"translate(937,392)\"})),_path118||(_path118=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.27 1.01 0.54 2.02 0.81 3.06 C2.41 6.84 4.5 8.13 8.02 10.13 C14.22 13.93 18.95 18.56 23.94 23.81 C25.57 25.51 27.2 27.21 28.84 28.89 C29.54 29.64 30.25 30.38 30.98 31.14 C32.95 32.96 34.49 34.06 37 35 C41.82 34.76 41.82 34.76 45.94 32.5 C49.29 30.06 51.84 30 56 30 C58.5 32.44 58.5 32.44 60 35 C59.36 35 58.72 35.01 58.06 35.01 C51.2 35.31 47.65 36.96 43 42 C43.48 42.41 43.96 42.82 44.45 43.24 C46.29 45.33 46.42 46.46 46.75 49.19 C47.89 54.92 51 57.92 55 62 C56.51 63.66 58.01 65.33 59.5 67 C60.26 67.84 61.02 68.69 61.81 69.56 C64.32 72.35 66.79 75.17 69.25 78.01 C70.48 79.41 71.75 80.79 73.04 82.14 C77.32 86.72 80.2 91.03 82.87 96.7 C84.57 100.17 86.11 102.38 89 105 C93.11 106.3 96.88 106.18 101 105 C101 104.37 101.01 103.74 101.01 103.09 C101.33 96.06 103.28 92.16 108 87 C108.44 87.48 108.88 87.97 109.34 88.46 C111.45 90.42 113.22 90.49 116 91 C116.33 91.66 116.66 92.32 117 93 C118.64 93.72 120.31 94.39 122 95 C122 95.66 122 96.32 122 97 C122.77 97.37 122.77 97.37 123.56 97.75 C126 99 126 99 127.65 100.06 C131.44 102.46 131.44 102.46 135.81 102.81 C138 102.04 138 102.04 140 101 C147.14 100.65 147.14 100.65 150.37 101.97 C153.42 103.16 156.05 103.41 159.31 103.62 C160.38 103.7 161.45 103.77 162.55 103.85 C163.76 103.93 163.76 103.93 165 104 C161.62 97.05 161.62 97.05 155.81 92.38 C152.98 91.93 152.98 91.93 150 92 C149.88 89.62 149.88 89.62 150 87 C150.66 86.34 151.32 85.68 152 85 C151.72 76.09 149.69 67.27 143.25 60.81 C142.18 59.86 141.11 58.91 140 58 C144.18 58 146.07 60.25 149 62.94 C149.55 63.44 150.1 63.94 150.66 64.46 C154.32 67.97 156.04 70.66 157.2 75.64 C161.07 87.05 174.06 98.59 182 107.5 C184.37 110.18 186.22 112.89 188 116 C188.58 116.47 189.15 116.95 189.75 117.44 C191 119 191 119 190.94 121.81 C189.64 126.22 187.91 129.91 183.81 132.25 C183.21 132.5 182.62 132.75 182 133 C181.67 133.66 181.34 134.32 181 135 C174.29 137.36 168.13 138.71 161.26 136.6 C158.57 135.88 156.03 135.77 153.25 135.62 C148.62 135.25 146.28 134.47 143 131 C139.86 127.68 136.71 125.05 132.94 122.5 C124.54 116.68 124.54 116.68 123.57 111.87 C123.38 110.7 123.38 110.7 123.19 109.5 C122.51 105.89 121.68 104.19 118.75 101.94 C115.46 99.92 112.88 99.53 109 100 C109.52 105.3 111.33 108.51 114 113 C114 113.66 114 114.32 114 115 C114.99 115.33 115.98 115.66 117 116 C118.02 117.65 119.02 119.32 120 121 C120.97 122.07 121.95 123.14 122.94 124.19 C125.36 126.92 126.62 129.3 127.81 132.75 C129.81 138.32 133.2 142.24 137.07 146.65 C139 149 139 149 140 152 C137.82 152.74 137.82 152.74 135 153 C132.48 151.5 132.48 151.5 129.86 149.22 C128.9 148.39 127.94 147.56 126.95 146.7 C122.25 142.4 117.72 137.97 113.25 133.44 C112.36 132.54 111.46 131.65 110.54 130.73 C106.04 126.2 101.7 121.59 97.54 116.74 C95.34 114.25 92.96 111.98 90.56 109.69 C86.09 105.27 82.33 100.68 78.75 95.51 C76.09 91.69 73.59 88.47 69.94 85.56 C66.82 82.84 65.77 80.68 64 77 C61.56 74.31 61.56 74.31 59 72 C56.65 69.82 56.05 69.16 55 66 C53.86 64.83 52.72 63.66 51.54 62.53 C49.68 60.69 47.93 58.77 46.19 56.81 C45.58 56.14 44.98 55.46 44.36 54.77 C43 53 43 53 43 51 C42.01 50.67 41.02 50.34 40 50 C38.42 48.4 38.42 48.4 36.75 46.38 C34.35 43.51 31.89 40.95 29.12 38.44 C25.68 35.09 25.1 32.75 25 28 C24.28 27.92 23.55 27.85 22.8 27.77 C19.28 26.8 17.73 25.23 15.12 22.69 C5.95 14.15 -3.6 11 -16 10 C-15.83 5.66 -15.62 3.62 -12.5 0.5 C-7.97 -1.44 -4.74 -0.97 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(640,102)\"})),_path119||(_path119=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.02 3.32 15.17 11.34 19 19 C15.52 23.24 11.66 24.56 6.62 26.25 C5.88 26.52 5.14 26.79 4.38 27.06 C0.91 28.26 -1.67 29.01 -5.38 28.94 C-8.06 28.7 -8.06 28.7 -9.54 30.57 C-10.08 31.62 -10.08 31.62 -10.62 32.69 C-11.03 33.41 -11.43 34.14 -11.84 34.89 C-12.23 35.58 -12.61 36.28 -13 37 C-15.12 40 -15.12 40 -17 42 C-17.99 42 -18.98 42 -20 42 C-20.3 42.65 -20.61 43.3 -20.92 43.98 C-25.01 52.52 -28.08 57.42 -37 61 C-36.99 62.07 -36.98 63.15 -36.96 64.25 C-36.96 65.69 -36.95 67.13 -36.94 68.56 C-36.93 69.27 -36.92 69.97 -36.91 70.7 C-36.9 73.96 -37 76.98 -37.51 80.22 C-38.38 86.91 -37.96 93.67 -37.79 100.4 C-37.69 108.11 -38.61 113.27 -42.09 120.17 C-43.24 122.49 -43.85 124.81 -44.5 127.31 C-44.76 128.28 -45.01 129.24 -45.27 130.23 C-45.63 131.6 -45.63 131.6 -46 133 C-47.8 139.61 -47.8 139.61 -49 142 C-49.66 142 -50.32 142 -51 142 C-52.57 150.43 -52.57 150.43 -49.94 158.12 C-47.03 159.98 -44.16 161.6 -41 163 C-41.66 164.65 -42.32 166.3 -43 168 C-42.34 168 -41.68 168 -41 168 C-41 168.66 -41 169.32 -41 170 C-38.69 168.35 -36.38 166.7 -34 165 C-33.34 165.33 -32.68 165.66 -32 166 C-31.71 166.97 -31.42 167.94 -31.12 168.94 C-30.3 172.03 -30.3 172.03 -28.19 173.38 C-25.7 174.09 -23.58 174.14 -21 174 C-20.01 175.98 -20.01 175.98 -19 178 C-19.47 178.43 -19.95 178.87 -20.44 179.31 C-22.24 181.02 -22.24 181.02 -23 184 C-25 185 -27 186 -29 187 C-31.73 189.48 -31.73 189.48 -34 192 C-36 194 -36 194 -39.31 194.31 C-43.13 193.99 -44.94 193.22 -48 191 C-48.66 192.65 -49.32 194.3 -50 196 C-49.1 196.15 -49.1 196.15 -48.19 196.31 C-45.72 197.09 -44.68 198.07 -43 200 C-42.34 199.01 -41.68 198.02 -41 197 C-38.4 196.27 -38.4 196.27 -35.38 195.81 C-34.37 195.65 -33.37 195.5 -32.34 195.33 C-31.57 195.22 -30.79 195.11 -30 195 C-30.33 193.68 -30.66 192.36 -31 191 C-30.01 191 -29.02 191 -28 191 C-28 191.66 -28 192.32 -28 193 C-26.02 192.01 -24.04 191.02 -22 190 C-22.33 189.34 -22.66 188.68 -23 188 C-21.35 188 -19.7 188 -18 188 C-17.01 189.98 -16.02 191.96 -15 194 C-14.67 193.01 -14.34 192.02 -14 191 C-12.97 191.14 -12.97 191.14 -11.92 191.29 C-11.02 191.4 -10.12 191.51 -9.19 191.62 C-8.29 191.74 -7.4 191.86 -6.48 191.98 C-3.74 192.24 -3.74 192.24 -1 190 C-0.27 187.44 -0.27 187.44 0 185 C0.65 184.81 1.3 184.61 1.98 184.41 C6.68 183.01 11.36 181.59 16 180 C13.61 182.59 11.15 184.59 8.25 186.56 C3.75 189.85 0.88 193.94 -2.24 198.51 C-5.86 203.63 -5.86 203.63 -9.02 204.65 C-13.24 205.19 -16 205.38 -19.69 203.06 C-23.43 200.73 -24.7 200.45 -29 201 C-31.34 202.41 -33.37 203.77 -35.5 205.44 C-39.54 208.57 -42.75 210.69 -48 211 C-52.84 209.35 -54.56 205.86 -56.8 201.55 C-58.39 198.17 -59.79 194.75 -61.11 191.26 C-61.96 188.99 -61.96 188.99 -63.07 186.87 C-65.66 181.64 -65.76 174.71 -65 169 C-63.89 166.05 -62.58 163.29 -61.2 160.46 C-59.73 157.44 -58.85 155.39 -59 152 C-60.06 149.71 -61.29 147.59 -62.59 145.43 C-66.43 138.83 -68.89 132.67 -68 125 C-66.38 120.78 -64.46 117.89 -61 115 C-58.09 114.28 -58.09 114.28 -54.94 113.94 C-50.74 113.48 -48.73 113.24 -46 110 C-41.64 102.32 -41.1 94.15 -40.62 85.5 C-40.58 84.84 -40.54 84.18 -40.5 83.51 C-39.94 74.61 -39.86 66.02 -41.45 57.23 C-41.97 54.22 -42.19 52.42 -40.88 49.61 C-38.54 47.6 -36.91 47.29 -33.88 46.88 C-31.25 46.54 -31.25 46.54 -29 46 C-27.83 43.65 -27.88 42.26 -27.9 39.65 C-27.91 38.8 -27.91 37.95 -27.91 37.07 C-27.92 36.18 -27.93 35.29 -27.94 34.38 C-27.94 33.48 -27.95 32.58 -27.95 31.66 C-27.96 29.44 -27.98 27.22 -28 25 C-25.62 24.41 -25.62 24.41 -23 24 C-21.67 25 -20.33 26 -19 27 C-16.3 26.78 -16.3 26.78 -14 26 C-14.48 23.42 -15.1 21.84 -16.56 19.62 C-18.37 16.33 -18.51 14.72 -18 11 C-16.16 8.72 -14.55 7.02 -12.38 5.12 C-11.85 4.63 -11.33 4.13 -10.79 3.62 C-7.18 0.37 -4.83 -0.78 0 0 Z \",fill:\"#411F4F\",transform:\"translate(534,1051)\"})),_path120||(_path120=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95 1.36 5.94 2.62 8.93 3.89 C8.93 4.55 8.93 5.21 8.93 5.89 C9.84 6.16 10.74 6.42 11.68 6.7 C14.71 7.81 16.7 8.57 18.93 10.89 C18.84 12.03 18.84 12.03 18.74 13.2 C18.66 15.86 18.66 15.86 20.15 17.28 C24.87 21.29 29.81 24.29 35.3 27.14 C36.1 27.57 36.9 28 37.73 28.45 C42.41 30.9 46.7 32.53 51.92 33.4 C54.19 33.95 55.82 34.85 57.8 36.08 C58.84 36.67 59.87 37.27 60.93 37.89 C61.92 37.56 62.91 37.23 63.93 36.89 C65.9 38.03 65.9 38.03 67.99 39.7 C69.03 40.51 69.03 40.51 70.09 41.34 C71.93 42.89 71.93 42.89 73.93 44.89 C74.73 45.01 75.52 45.14 76.34 45.27 C81.16 46.42 83.33 50.92 85.93 54.89 C86.93 56.71 87.91 58.54 88.87 60.39 C92.51 67.32 97.35 72.91 103.43 77.83 C104.25 78.51 105.08 79.19 105.93 79.89 C105.93 80.55 105.93 81.21 105.93 81.89 C105.27 81.89 104.61 81.89 103.93 81.89 C103.93 81.23 103.93 80.57 103.93 79.89 C102.94 80.38 102.94 80.38 101.93 80.89 C101.99 82.08 102.05 83.28 102.12 84.51 C102.1 93.12 100.92 103.32 94.93 109.89 C94.27 109.89 93.61 109.89 92.93 109.89 C92.6 111.54 92.27 113.19 91.93 114.89 C86.03 112.65 80.27 110.18 74.55 107.51 C73.91 107.21 73.26 106.91 72.59 106.6 C69.68 105.24 66.85 103.84 64.04 102.28 C54.6 97.05 44.4 95.08 33.93 92.89 C33.93 92.23 33.93 91.57 33.93 90.89 C33.2 90.79 32.48 90.69 31.73 90.58 C28.59 89.8 26.73 88.65 24.12 86.76 C23.25 86.14 22.38 85.51 21.48 84.87 C19.11 83.02 16.93 81.08 14.74 79.01 C11.16 75.75 8.74 74.99 3.93 74.89 C3.6 73.24 3.27 71.59 2.93 69.89 C3.92 69.56 4.91 69.23 5.93 68.89 C3.62 67.57 1.31 66.25 -1.07 64.89 C-0.74 65.88 -0.41 66.87 -0.07 67.89 C-0.4 68.55 -0.73 69.21 -1.07 69.89 C-4.45 69.2 -4.45 69.2 -8.07 67.89 C-9.51 65.26 -9.51 65.26 -10.07 62.89 C-8.75 62.56 -7.43 62.23 -6.07 61.89 C-9.2 61.03 -11.21 60.91 -14.45 61.45 C-18.58 61.95 -21.22 61.43 -25.07 59.89 C-25.4 58.9 -25.73 57.91 -26.07 56.89 C-27.96 56.49 -27.96 56.49 -30.2 56.39 C-33.76 55.76 -34.86 55.14 -37.22 52.32 C-38.95 49.55 -40.57 46.78 -42.07 43.89 C-43.06 44.55 -44.05 45.21 -45.07 45.89 C-48.98 45.22 -50.62 44.52 -52.95 41.26 C-54 39.59 -54 39.59 -55.07 37.89 C-60.41 31.91 -65.85 27.38 -73.07 23.89 C-73.81 23.41 -74.56 22.94 -75.32 22.45 C-78.24 20.79 -81.11 19.76 -84.3 18.73 C-86.07 17.89 -86.07 17.89 -88.07 14.89 C-88.5 9.58 -88.6 6.13 -85.07 1.89 C-78.08 -4.2 -68.1 -5.72 -59.07 -5.11 C-56.72 -4.84 -54.41 -4.5 -52.07 -4.11 C-52.07 -4.77 -52.07 -5.43 -52.07 -6.11 C-50.9 -6.1 -49.73 -6.09 -48.53 -6.08 C-46.98 -6.07 -45.43 -6.06 -43.88 -6.05 C-43.11 -6.04 -42.34 -6.03 -41.55 -6.02 C-12.73 -5.9 -12.73 -5.9 0 0 Z M-37.07 1.39 C-41.36 4.6 -45.82 6.95 -51.2 7.45 C-55.2 7.9 -57.66 8.78 -61.07 10.89 C-63.39 13.74 -63.39 13.74 -62.98 17.17 C-61.96 21.35 -60.23 24.16 -57.57 27.45 C-57.12 28.02 -56.68 28.58 -56.22 29.16 C-50.85 35.71 -45.1 39.32 -37.07 41.89 C-35.31 42.89 -33.56 43.92 -31.82 44.95 C-27.13 47.6 -23.59 48.36 -18.28 48.65 C-12.71 49.26 -9.71 53.25 -6.32 57.26 C-3.58 60.46 -1.23 62.56 2.49 64.51 C8.53 67.8 12.91 72.63 17.58 77.6 C22.94 83.22 27.27 86.12 35.16 86.36 C35.89 86.37 36.62 86.38 37.37 86.39 C43.37 86.46 47.49 87.28 52.93 89.89 C55.25 90.69 57.57 91.42 59.91 92.14 C61.93 92.89 61.93 92.89 64.93 94.89 C67.71 95.64 67.71 95.64 70.93 94.89 C73.86 92.82 76.35 90.37 78.93 87.89 C80.26 86.73 81.59 85.59 82.93 84.45 C83.92 83.6 84.91 82.76 85.93 81.89 C82.97 80.22 80.62 79.59 77.24 79.33 C73.03 78.99 73.03 78.99 71.93 77.89 C72.53 77.87 73.14 77.86 73.76 77.84 C79.11 77.54 79.11 77.54 83.49 74.64 C85.09 71.58 85.69 70.26 84.93 66.89 C82.53 64.07 82.53 64.07 79.93 61.89 C79.66 62.96 79.39 64.03 79.12 65.14 C78.06 68.49 77.38 70.44 74.93 72.89 C73.61 73.27 72.27 73.61 70.93 73.89 C75.93 63.89 75.93 63.89 77.16 61.81 C78.15 59.35 77.89 58.33 76.93 55.89 C70.27 43.96 57.93 39.33 46.03 34.15 C41.49 32.17 37.08 29.98 32.68 27.7 C26.05 24.29 19.27 21.61 12.26 19.11 C11.16 18.71 10.06 18.3 8.93 17.89 C8.13 17.59 7.32 17.3 6.5 16.99 C4.93 15.89 4.93 15.89 4.57 13.9 C4.59 12.75 4.59 12.75 4.62 11.58 C4.3 7.66 4.12 7.09 1.24 4.08 C-4.26 0.75 -10.89 -0.58 -17.07 -2.11 C-17.07 -2.44 -17.07 -2.77 -17.07 -3.11 C-25.4 -4.68 -30.31 -3.68 -37.07 1.39 Z \",fill:\"#452354\",transform:\"translate(1068.0703125,647.1123046875)\"})),_path121||(_path121=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 0.02 2.27 0.04 3.44 0.06 C3.44 0.72 3.44 1.38 3.44 2.06 C4.65 2.33 5.87 2.6 7.12 2.88 C12.23 4.01 17.33 5.19 22.42 6.38 C24.34 6.81 26.26 7.22 28.18 7.59 C30.53 8.08 32.35 8.9 34.44 10.06 C34.44 10.72 34.44 11.38 34.44 12.06 C35.31 12.18 36.18 12.3 37.08 12.42 C40.4 13.06 43.09 14.02 46.19 15.38 C49.94 16.99 53.69 18.58 57.5 20.06 C66.12 23.5 74.4 27.4 82.44 32.06 C82.44 32.72 82.44 33.38 82.44 34.06 C75.98 32 69.7 29.64 63.44 27.06 C63.44 26.4 63.44 25.74 63.44 25.06 C62.08 24.85 62.08 24.85 60.69 24.62 C56.96 23.98 54.19 23.5 50.9 21.6 C46.59 19.69 42.72 19.24 38.06 18.81 C37.25 18.72 36.44 18.63 35.6 18.54 C28.61 17.84 22.31 18.56 15.44 20.06 C15.17 20.97 14.9 21.88 14.62 22.81 C13.44 26.06 13.44 26.06 11.69 28.06 C11.07 29.05 11.07 29.05 10.44 30.06 C11.15 33.28 11.15 33.28 12.44 36.06 C9.78 38.49 7.33 39.46 3.94 40.44 C-0.23 41.72 -2.21 43.27 -4.56 47.06 C-4.56 46.4 -4.56 45.74 -4.56 45.06 C-5.22 45.06 -5.88 45.06 -6.56 45.06 C-6.81 45.66 -7.06 46.26 -7.31 46.88 C-9.34 50.42 -11.74 51.79 -15.56 53.06 C-12.52 58.17 -12.52 58.17 -7.56 61.06 C-6.31 61.6 -5.06 62.14 -3.81 62.69 C-2.74 63.14 -1.67 63.59 -0.56 64.06 C-0.23 62.08 0.1 60.1 0.44 58.06 C1.8 60.1 3.15 62.14 4.5 64.19 C6.16 66.85 6.16 66.85 7.44 68.06 C8.49 68.14 9.55 68.23 10.64 68.31 C15.24 69.22 16.9 70.79 20.19 74.06 C23.84 77.82 23.84 77.82 28.44 80.06 C28.44 81.05 28.44 82.04 28.44 83.06 C29.1 83.06 29.76 83.06 30.44 83.06 C30.68 83.85 30.93 84.63 31.19 85.44 C32.14 88.15 32.14 88.15 34.19 88.88 C37.36 90.55 39.3 92.91 41.69 95.56 C42.15 96.06 42.61 96.56 43.08 97.07 C46.44 100.8 46.44 100.8 46.44 103.06 C47.1 103.06 47.76 103.06 48.44 103.06 C55.03 109.14 59.59 116.28 64.28 123.82 C68.8 131.08 68.8 131.08 75.56 136.06 C78.21 137.47 78.94 139.49 80.44 142.06 C81.3 142.93 82.17 143.79 83.06 144.69 C85.44 147.06 85.44 147.06 86.44 150.06 C84.67 149.58 82.9 149.1 81.12 148.62 C80.14 148.36 79.15 148.09 78.14 147.82 C76.22 147.28 74.32 146.69 72.44 146.06 C72.44 145.4 72.44 144.74 72.44 144.06 C71.6 143.72 71.6 143.72 70.75 143.38 C67.23 141.38 64.1 138.82 62.64 134.97 C61.56 132.79 61.56 132.79 58.86 132.37 C57.84 132.23 56.81 132.08 55.75 131.94 C50.7 130.83 48.39 129.61 45.38 125.38 C43.51 122.32 42.17 119.49 41.19 116.06 C39.14 109.86 33.29 106.08 28.44 102.06 C27.5 101.27 26.56 100.48 25.59 99.67 C16.51 91.63 16.51 91.63 6.44 85.06 C6.44 84.4 6.44 83.74 6.44 83.06 C4.79 82.4 3.14 81.74 1.44 81.06 C1.44 80.4 1.44 79.74 1.44 79.06 C0.78 79.06 0.12 79.06 -0.56 79.06 C-2 77.75 -2 77.75 -3.56 76.06 C-4.08 75.65 -4.59 75.24 -5.12 74.81 C-6.56 73.06 -6.56 73.06 -7.06 69.94 C-8.56 63.89 -14.87 60.62 -19.56 57.06 C-20.8 56.01 -22.03 54.95 -23.25 53.88 C-25.65 51.79 -28.13 49.88 -30.69 48 C-33.96 45.58 -36.78 43.02 -39.56 40.06 C-39.23 39.4 -38.9 38.74 -38.56 38.06 C-38.56 37.4 -38.56 36.74 -38.56 36.06 C-40.81 34.11 -42.9 32.39 -45.56 31.06 C-47.25 28.19 -47.25 28.19 -48.56 25.06 C-47.56 22.06 -47.56 22.06 -45.62 20.5 C-36.42 16.18 -26.66 16.19 -16.98 18.62 C-12.54 19.43 -8.06 19.21 -3.56 19.06 C-2.42 14.39 -3.19 11.67 -4.56 7.06 C-4.75 3.69 -4.75 3.69 -4.56 1.06 C-3.56 0.06 -3.56 0.06 0 0 Z \",fill:\"#391949\",transform:\"translate(753.5625,57.9375)\"})),_path122||(_path122=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.27 -0.08 4.54 -0.14 6.81 -0.19 C8.08 -0.22 9.34 -0.26 10.64 -0.29 C14 0 14 0 15.95 1.26 C17 3 17 3 17 7 C16.34 7 15.68 7 15 7 C13.88 10.36 14.23 12.58 15 16 C15 17.32 15 18.64 15 20 C17.64 20.66 20.28 21.32 23 22 C23.98 28.33 24.93 35.05 22 41 C19 42.31 19 42.31 16 43 C15.54 43.96 15.54 43.96 15.06 44.94 C14 47 14 47 10.5 48.44 C6.89 49.6 6.89 49.6 5.88 52.28 C5.59 53.18 5.3 54.08 5 55 C4.73 55.82 4.47 56.63 4.19 57.47 C3.94 58.33 3.68 59.18 3.41 60.06 C3.12 61.02 2.84 61.97 2.54 62.96 C2.24 63.96 1.94 64.97 1.62 66 C1 68.08 0.37 70.16 -0.26 72.24 C-0.56 73.24 -0.86 74.23 -1.17 75.26 C-2.17 78.58 -3.21 81.88 -4.25 85.19 C-5.45 89.02 -6.4 92.82 -7.25 96.75 C-8.52 102.1 -10.65 106.72 -13.06 111.62 C-18.65 123.02 -18.65 123.02 -17.69 135.38 C-17.13 136.92 -16.57 138.46 -16 140 C-14.72 143.64 -15.26 146.37 -16 150.12 C-17.02 154.19 -17.02 154.19 -16 158 C-16.96 160.06 -16.96 160.06 -18.38 162.44 C-19.89 165 -21.05 167.16 -22 170 C-22.64 170.1 -23.28 170.21 -23.94 170.31 C-24.62 170.54 -25.3 170.77 -26 171 C-26.73 172.98 -27.39 174.98 -28 177 C-28.98 178.02 -29.98 179.02 -31 180 C-32.4 182.31 -33.71 184.63 -35 187 C-35.49 187.88 -35.98 188.75 -36.48 189.66 C-39.27 194.68 -41.86 199.66 -44 205 C-44.66 205 -45.32 205 -46 205 C-46.5 206.98 -46.5 206.98 -47 209 C-47.83 203.07 -46.39 198.98 -43.75 193.69 C-43.45 193.08 -43.15 192.47 -42.84 191.84 C-41.01 188.33 -39.28 186.19 -36 184 C-35.29 182.35 -34.63 180.68 -34 179 C-33.16 177.7 -32.31 176.41 -31.44 175.12 C-28.99 171.34 -28.28 168.47 -28 164 C-27.34 164 -26.68 164 -26 164 C-26.19 163.28 -26.37 162.56 -26.56 161.81 C-27 159 -27 159 -26.54 156.95 C-25.75 152.64 -25.82 148.38 -25.81 144 C-25.79 142.67 -25.79 142.67 -25.78 141.3 C-25.77 136.67 -26.02 133.27 -28 129 C-28.8 118.48 -22.73 107.56 -17.23 99.02 C-14.74 94.94 -14.2 90.67 -15 86 C-16.13 83.91 -16.13 83.91 -17.56 81.94 C-19.58 79 -20 78.28 -20 74.56 C-19 71 -19 71 -18.11 68.74 C-17.23 66.48 -16.44 64.39 -16 62 C-18.19 57.7 -20.65 56.62 -25 55 C-32.67 50.38 -32.67 50.38 -34 46 C-34.38 44.01 -34.73 42.01 -35 40 C-36.49 40.5 -36.49 40.5 -38 41 C-38.33 41.99 -38.66 42.98 -39 44 C-40.44 45.69 -40.44 45.69 -42 47 C-42.66 47 -43.32 47 -44 47 C-44.27 47.93 -44.54 48.86 -44.81 49.81 C-45.91 52.76 -46.62 54.06 -49 56 C-49.99 55.67 -50.98 55.34 -52 55 C-52 53.68 -52 52.36 -52 51 C-52.33 50.34 -52.66 49.68 -53 49 C-53 46.99 -53 44.98 -52.94 42.97 C-52.91 40.79 -52.91 40.79 -54 38 C-56.47 36.84 -56.47 36.84 -59 36 C-60 35 -60 35 -60.12 31.56 C-60 28 -60 28 -59 26 C-58.34 26 -57.68 26 -57 26 C-56.88 25.07 -56.75 24.14 -56.62 23.19 C-56 20 -56 20 -54 17 C-53.56 14.95 -53.19 12.89 -52.88 10.81 C-52.62 9.18 -52.62 9.18 -52.37 7.52 C-52.25 6.69 -52.12 5.86 -52 5 C-51.01 5 -50.02 5 -49 5 C-49.33 7.97 -49.66 10.94 -50 14 C-48.68 11.03 -47.36 8.06 -46 5 C-44.68 5.33 -43.36 5.66 -42 6 C-40.88 8.12 -40.88 8.12 -40 11 C-39.63 12.2 -39.26 13.39 -38.88 14.62 C-38 18 -38 18 -38 21 C-35.72 22.21 -35.72 22.21 -33 23 C-30.85 22.11 -30.85 22.11 -29 21 C-29.09 22.56 -29.2 24.13 -29.31 25.69 C-29.37 26.56 -29.43 27.43 -29.49 28.32 C-30 31 -30 31 -33 36 C-29.04 36.66 -25.08 37.32 -21 38 C-20.95 37.07 -20.9 36.15 -20.85 35.19 C-20.78 33.99 -20.7 32.8 -20.62 31.56 C-20.56 30.37 -20.49 29.17 -20.41 27.94 C-20.28 26.97 -20.14 26 -20 25 C-19.34 24.67 -18.68 24.34 -18 24 C-16.82 27.56 -17.14 30.49 -17.56 34.19 C-18.09 39.98 -17.61 44.43 -16 50 C-14.35 50.33 -12.7 50.66 -11 51 C-8.44 46.55 -7.63 43.43 -7.75 38.31 C-7.77 37.09 -7.79 35.88 -7.81 34.62 C-7.98 31.34 -8.33 28.14 -8.75 24.88 C-9.24 20.31 -9.24 20.31 -7.19 17.62 C-6.47 17.09 -5.74 16.55 -5 16 C-3.8 13.45 -3.8 13.45 -3 11 C-2.67 10.34 -2.34 9.68 -2 9 C-1.34 9 -0.68 9 0 9 C1.04 4.38 1.04 4.38 0 0 Z \",fill:\"#290E3D\",transform:\"translate(623,633)\"})),_path123||(_path123=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C3.22 0.9 4.43 0.79 5.69 0.69 C10.29 0.59 12.47 2.46 15.75 5.49 C17 7 17 7 17 9 C12.67 9 8.33 9 4 9 C2.19 10.34 2.19 10.34 0.38 12.12 C-2.6 14.91 -5.41 16.79 -9 18.69 C-11.87 20.54 -12.83 21.34 -13.67 24.69 C-14.02 38.23 -8.15 53.11 1 63 C1.43 63.79 1.87 64.57 2.32 65.38 C4.27 68.43 6.4 70.21 9.25 72.44 C12.5 75 15.6 77.55 18.56 80.44 C21.91 83.36 25.23 84 29.57 84.58 C32 85 32 85 34.35 85.99 C37.65 87.25 40.74 87.56 44.25 87.94 C48.61 88.44 52.65 89.05 56.75 90.69 C60.21 92 62.54 91.97 66.19 91.44 C77.21 90.04 88.14 95.59 98 100 C98 100.66 98 101.32 98 102 C98.95 102.08 99.9 102.16 100.88 102.25 C104 103 104 103 105.38 105.06 C105.68 106.02 105.68 106.02 106 107 C99.02 111.66 89.17 111.59 81 111 C79.51 110.5 79.51 110.5 78 110 C78 110.66 78 111.32 78 112 C76.58 111.95 76.58 111.95 75.14 111.89 C64.61 111.67 53.37 111.73 45 119 C42.18 122.59 42.65 126.64 43 131 C45.16 133.89 47.66 134.81 51 136 C54.5 137.25 56.4 138.4 59 141 C59.6 141.12 60.2 141.24 60.82 141.36 C64.22 142.36 66.42 144.8 68.94 147.19 C69.45 147.66 69.96 148.13 70.49 148.61 C73.09 151.03 75.45 153.5 77.67 156.28 C80.3 159.35 82.12 160.1 86 161 C86.66 160.34 87.32 159.68 88 159 C88.98 160.27 89.96 161.54 90.94 162.81 C91.48 163.52 92.03 164.23 92.59 164.96 C94 167 94 167 95 170 C97 170.92 97 170.92 99.38 171.5 C102.86 172.45 104.5 173.43 107 176 C110.95 176.93 114.23 177.04 118.19 176.38 C122 176 122 176 124.5 177.44 C124.99 177.95 125.49 178.47 126 179 C124.35 179 122.7 179 121 179 C120.96 180.93 120.96 180.93 122 183 C125.49 184.79 125.49 184.79 129 186 C129 184.35 129 182.7 129 181 C132.38 182.19 134.65 183.28 137 186 C135.68 186 134.36 186 133 186 C133.56 188.05 133.56 188.05 135 190 C135.92 190.12 136.84 190.24 137.79 190.37 C141.67 191.13 142.98 192.41 145.75 195.19 C150.45 199.65 155.32 202.92 161 206 C158 207 158 207 155.77 206.21 C151.47 204.03 147.82 202.02 144.38 198.62 C142.38 196.76 141.54 196.04 138.79 195.84 C136.32 196.11 136.32 196.11 133 197 C133 196.01 133 195.02 133 194 C132.36 194.02 131.72 194.05 131.06 194.07 C125.59 194.18 121.17 193.8 116 192 C115.67 192.99 115.34 193.98 115 195 C101.31 187.25 101.31 187.25 97.12 184.56 C93.89 182.49 90.56 180.65 87.2 178.8 C68.96 168.75 68.96 168.75 66.94 162.94 C66.98 160.96 67.09 158.98 67.25 157 C66.91 152.9 64.99 150.63 62 148 C59.05 146.27 59.05 146.27 56 145 C55.15 144.46 54.31 143.93 53.44 143.38 C50.86 141.92 48.88 141.57 46 141 C40.29 139.1 35.56 137.01 31 133 C30.01 132.67 29.02 132.34 28 132 C28 131.34 28 130.68 28 130 C26.33 129.44 26.33 129.44 24.62 128.88 C21.64 127.58 21.09 127.16 19.38 124.19 C18.9 120.16 19.85 118.38 22 115 C22.66 114.34 23.32 113.68 24 113 C24.9 113.01 25.81 113.02 26.74 113.03 C30.48 113 32.79 112.08 36.19 110.56 C41.97 108.01 41.97 108.01 45 107 C45 106.34 45 105.68 45 105 C43.61 105.22 43.61 105.22 42.19 105.44 C31.22 105.39 19.32 92.3 11.88 85.19 C5.65 78.78 0.36 71.54 -3.98 63.75 C-5.64 60.9 -7.61 58.26 -9.5 55.56 C-13.85 49.11 -15.8 42.78 -17.34 35.2 C-17.83 32.12 -17.83 32.12 -19 30 C-19.43 27.34 -19.7 24.68 -20 22 C-19.34 22 -18.68 22 -18 22 C-17.91 20.89 -17.91 20.89 -17.81 19.75 C-16.53 15.42 -13.3 13.88 -9.69 11.44 C-9.13 10.96 -8.57 10.49 -8 10 C-8 9.01 -8 8.02 -8 7 C-5.49 4.22 -3.12 2.08 0 0 Z \",fill:\"#411E4E\",transform:\"translate(938,531)\"})),_path124||(_path124=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.64 2.03 12.41 5.69 16.06 11.76 C17.23 14.56 17.58 17.26 18.06 20.25 C19.46 26.67 21.68 29.05 26.77 32.96 C30.59 36.45 32.71 41.02 34 46 C33.88 51.06 30.82 54.43 27.81 58.25 C27.34 58.89 26.87 59.52 26.39 60.18 C23.95 63.3 22.65 64.79 18.79 66.01 C15.33 66 13.92 64.78 11 63 C7.5 62.08 7.5 62.08 4 63 C1.75 65.35 0.45 68.12 -1 71 C-2.08 72.98 -3.16 74.96 -4.25 76.94 C-4.75 77.87 -5.25 78.81 -5.77 79.78 C-7 82 -7 82 -8 83 C-14.94 83.57 -20.92 83.57 -27 80 C-31.11 73.83 -30.43 66.14 -30.75 58.94 C-30.82 57.77 -30.89 56.61 -30.96 55.41 C-31.26 48.41 -30.65 42.57 -28.73 35.84 C-27.59 31.41 -27.35 26.99 -27.06 22.44 C-26.47 15 -25.87 7.58 -22 1 C-16.05 -2.97 -6.86 -1.04 0 0 Z \",fill:\"#472F6B\",transform:\"translate(351,803)\"})),_path125||(_path125=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.58 4.14 2.15 8.28 2.71 12.42 C2.9 13.82 3.09 15.22 3.29 16.62 C4.68 26.49 5.26 36.03 5 46 C1.75 47.33 -1.3 48.37 -4.75 49.06 C-7.66 49.48 -7.66 49.48 -10 51 C-10.23 53.18 -10.41 55.37 -10.56 57.56 C-10.69 59.36 -10.69 59.36 -10.82 61.19 C-10.88 62.12 -10.94 63.05 -11 64 C-11.66 64 -12.32 64 -13 64 C-13.25 66.92 -13.25 66.92 -13 70 C-11.51 70.99 -11.51 70.99 -10 72 C-6.9 79.23 -5.47 86.18 -6 94 C-6.99 94 -7.98 94 -9 94 C-9.33 94.66 -9.66 95.32 -10 96 C-12.33 93.67 -14.67 91.33 -17 89 C-23.92 86.77 -31.81 85.98 -39 87 C-41.98 88.89 -41.98 88.89 -44 92 C-44.55 92.55 -45.1 93.09 -45.67 93.66 C-50.6 98.62 -52.67 103.7 -54.76 110.34 C-56 113 -56 113 -58.14 113.88 C-59.06 113.94 -59.06 113.94 -60 114 C-60.43 122.75 -60.12 130.77 -58.06 139.31 C-57.88 140.07 -57.7 140.83 -57.51 141.61 C-57.24 142.72 -57.24 142.72 -56.97 143.86 C-55.04 151.91 -53.5 159.58 -58 167 C-60.19 169.82 -62.52 172.44 -65 175 C-66.65 174.67 -68.3 174.34 -70 174 C-69.63 170.75 -69.3 169.3 -66.95 166.94 C-64.11 162.67 -64.63 159.17 -65 154.19 C-65.09 152.79 -65.09 152.79 -65.17 151.36 C-65.8 142.89 -67.66 135.15 -70 127 C-70.6 124.59 -71.19 122.17 -71.75 119.75 C-72.11 118.23 -72.11 118.23 -72.48 116.67 C-73 114 -73 114 -73 110 C-76.56 116.44 -76.2 121.91 -75.75 129.12 C-75.67 130.84 -75.67 130.84 -75.59 132.58 C-75.32 138.09 -74.96 143.59 -74.52 149.09 C-74.46 150.03 -74.39 150.97 -74.32 151.93 C-74.19 153.67 -74.04 155.41 -73.87 157.15 C-73.33 164.64 -76.42 168.75 -80.94 174.44 C-83.65 176.49 -85.63 176.79 -89 177 C-91.88 176.56 -91.88 176.56 -94 176 C-92.91 172.72 -92.17 172.08 -89.56 170 C-85.58 166.81 -83.68 164.12 -83 159 C-83.04 151.41 -84.2 144.24 -86.28 136.95 C-88.16 129.23 -88.12 121.65 -88.06 113.75 C-88.06 112.67 -88.05 111.6 -88.05 110.49 C-88.04 108.5 -88.03 106.52 -88.02 104.53 C-88 102.35 -88 100.18 -88 98 C-86.5 95.75 -86.5 95.75 -85 94 C-84.14 94.14 -83.28 94.29 -82.39 94.44 C-74.16 95.73 -66.34 96.25 -58 96 C-58.19 95.38 -58.38 94.75 -58.58 94.11 C-58.72 93.41 -58.86 92.72 -59 92 C-57.69 90.25 -57.69 90.25 -56 89 C-55.34 89 -54.68 89 -54 89 C-53.88 88.43 -53.76 87.87 -53.63 87.29 C-53.47 86.55 -53.3 85.82 -53.12 85.06 C-52.96 84.33 -52.8 83.6 -52.63 82.85 C-52 81 -52 81 -50 80 C-50.99 79.01 -50.99 79.01 -52 78 C-49.73 74.46 -48.68 73.16 -44.5 72.19 C-42 72.05 -39.5 72 -37 72 C-37 72.99 -37 73.98 -37 75 C-35.33 75.33 -33.67 75.67 -32 76 C-29.34 76.53 -26.67 77.07 -24.01 77.6 C-23.35 77.73 -22.68 77.86 -22 78 C-21.5 76.51 -21.5 76.51 -21 75 C-20.34 74.67 -19.68 74.34 -19 74 C-19.11 67.85 -20.32 64.67 -24.56 60.22 C-30.63 54.7 -37.17 49.55 -44 45 C-44.19 43.86 -44.19 43.86 -44.38 42.69 C-45.41 38.24 -48.71 35.97 -52.25 33.31 C-54 32 -54 32 -55 30 C-55.74 29.73 -56.49 29.46 -57.25 29.19 C-60.68 27.71 -62.47 25.72 -65 23 C-68.11 19.81 -71.3 16.72 -74.56 13.69 C-75.31 12.99 -76.05 12.29 -76.82 11.57 C-79.09 9.61 -79.09 9.61 -83 10 C-83.33 10.66 -83.66 11.32 -84 12 C-84.84 10.9 -85.67 9.8 -86.5 8.69 C-86.96 8.07 -87.43 7.46 -87.91 6.82 C-89 5 -89 5 -89 2 C-83.15 2.45 -78.92 5.04 -74 8 C-74 8.99 -74 9.98 -74 11 C-73.22 11.31 -72.43 11.62 -71.62 11.94 C-67.15 13.75 -67.15 13.75 -65.56 16.44 C-64.1 19.24 -64.1 19.24 -61 21 C-61 21.99 -61 22.98 -61 24 C-60.28 24.27 -59.56 24.54 -58.82 24.82 C-56.04 25.98 -53.53 27.29 -50.94 28.81 C-49.68 29.53 -49.68 29.53 -48.4 30.27 C-45.69 32.22 -44.04 34.37 -42 37 C-37.79 40.98 -33.82 44.42 -28.25 46.19 C-23.43 45.91 -20.54 44.69 -17.25 41.09 C-16.05 39.67 -14.86 38.24 -13.68 36.81 C-11.68 34.65 -9.85 33.69 -7 33 C-7 32.67 -7 32.34 -7 32 C-6.03 31.73 -5.06 31.46 -4.06 31.19 C-3.05 30.8 -2.04 30.4 -1 30 C0.1 26.7 0.11 24.27 0.1 20.8 C0.09 19.59 0.09 18.38 0.09 17.14 C0.08 15.88 0.07 14.61 0.06 13.31 C0.06 12.04 0.05 10.76 0.05 9.45 C0.04 6.3 0.02 3.15 0 0 Z \",fill:\"#2B113D\",transform:\"translate(919,210)\"})),_path126||(_path126=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.67 13.85 -12 27.79 -22 37 C-23.49 37.49 -23.49 37.49 -25 38 C-25.69 39.32 -26.35 40.66 -27 42 C-28.7 43.78 -28.7 43.78 -30.69 45.5 C-31.33 46.07 -31.97 46.63 -32.64 47.22 C-38.33 51.51 -43.55 53.71 -50.44 55.25 C-51.17 55.42 -51.9 55.6 -52.65 55.77 C-54.43 56.19 -56.22 56.6 -58 57 C-57.34 58.1 -56.68 59.2 -56 60.34 C-54.52 62.8 -53.99 63.68 -54.06 66.62 C-56.47 72.74 -59.39 75.14 -65.25 77.94 C-70.07 80.37 -74.24 82.68 -78.18 86.42 C-83.02 90.63 -88.89 94.96 -95 97 C-97.6 93.1 -97.15 89.53 -97 85 C-102.29 87.35 -105.98 89.74 -110 94 C-110.66 94 -111.32 94 -112 94 C-112.66 96.31 -113.32 98.62 -114 101 C-114.66 100.01 -115.32 99.02 -116 98 C-117.07 98.49 -118.14 98.99 -119.25 99.5 C-122.25 100.89 -123.46 101 -127 101 C-126.34 102.32 -125.68 103.64 -125 105 C-127.64 105 -130.28 105 -133 105 C-135 97.38 -135 97.38 -135 94 C-135.66 94 -136.32 94 -137 94 C-140.83 87.77 -140.7 82.55 -139.32 75.59 C-137.8 71.45 -135.64 68.91 -132.5 65.94 C-131.96 65.42 -131.42 64.89 -130.86 64.35 C-126.29 60.06 -121.63 56.8 -116 54 C-115.05 53.51 -115.05 53.51 -114.09 53.02 C-93.23 42.32 -93.23 42.32 -85.98 44.65 C-84.68 45.31 -83.4 46.02 -82.14 46.77 C-74.15 51.34 -65.11 53.37 -56 52 C-51.79 50.71 -47.94 48.97 -44 47 C-43.2 46.64 -42.39 46.28 -41.56 45.91 C-34.9 42.67 -30.63 37.68 -26 32 C-25.42 31.29 -24.83 30.58 -24.23 29.84 C-20.59 25.28 -17.17 20.54 -13.75 15.81 C-13.11 14.94 -13.11 14.94 -12.46 14.05 C-9.92 10.5 -7.94 6.92 -6 3 C-2.7 0 -2.7 0 0 0 Z \",fill:\"#27103A\",transform:\"translate(430,1167)\"})),_path127||(_path127=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.15 1.18 1.15 1.18 1.31 2.38 C1.78 5.33 1.78 5.33 5 7 C5 7.99 5 8.98 5 10 C5.66 10 6.32 10 7 10 C7.33 9.34 7.66 8.68 8 8 C8.5 8.41 8.99 8.82 9.5 9.24 C13.94 12.76 17.45 14.84 23 16 C23 16.66 23 17.32 23 18 C24.11 18.19 25.22 18.38 26.36 18.57 C30 20 30 20 31.42 23.12 C31.67 24.36 31.93 25.6 32.19 26.88 C33.13 32 33.13 32 36.1 36.05 C38 38 38 38 38.39 41.02 C38.34 42.08 38.3 43.15 38.25 44.25 C38.21 45.33 38.18 46.41 38.14 47.52 C38.09 48.34 38.05 49.16 38 50 C37.67 50 37.34 50 37 50 C36.34 47.03 35.68 44.06 35 41 C29.45 39.97 29.45 39.97 24 41 C22.58 47.77 23.28 50.25 27 56 C27 56.99 27 57.98 27 59 C27.66 59 28.32 59 29 59 C29.66 64.28 30.32 69.56 31 75 C31.66 74.34 32.32 73.68 33 73 C35 73.16 35 73.16 37 74 C38.45 76.64 39.63 79.1 40.75 81.88 C41.07 82.61 41.38 83.34 41.71 84.1 C44 89.55 44 89.55 44 93 C42.06 91.88 42.06 91.88 40 90 C39.25 86.81 39.25 86.81 39 84 C38.34 84 37.68 84 37 84 C37.5 88.95 37.5 88.95 38 94 C38.99 94.33 39.98 94.66 41 95 C40.76 95.64 40.52 96.29 40.27 96.95 C37.57 104.22 35.22 111.57 33 119 C32.01 118.5 32.01 118.5 31 118 C30.01 118.99 30.01 118.99 29 120 C29 120.33 29 120.66 29 121 C26.75 121.17 24.5 121.33 22.25 121.5 C21 121.59 19.74 121.69 18.45 121.78 C15.97 121.94 13.49 122 11 122 C10.34 121.34 9.68 120.68 9 120 C6.18 125.55 4.47 129.74 5 136 C4.01 136.33 3.02 136.66 2 137 C1.67 135.02 1.34 133.04 1 131 C1.66 131 2.32 131 3 131 C2.81 130.2 2.63 129.39 2.44 128.56 C2.29 127.72 2.15 126.87 2 126 C2.5 125.5 2.5 125.5 3 125 C2.34 124.67 1.68 124.34 1 124 C0.5 124.99 0.5 124.99 0 126 C-2.7 117.9 -0.79 109.76 2.12 102 C3.45 97.47 3.22 93.42 2.51 88.78 C1.97 84.81 1.79 80.9 1.72 76.89 C1.69 75.72 1.69 75.72 1.66 74.53 C1.61 71.95 1.55 69.38 1.5 66.81 C1.46 65.01 1.42 63.21 1.38 61.42 C1.29 57.61 1.21 53.8 1.13 50 C1 43.83 0.86 37.67 0.71 31.51 C0.47 21.01 0.24 10.5 0 0 Z \",fill:\"#230C38\",transform:\"translate(482,396)\"})),_path128||(_path128=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.5 6.58 -0.27 11.99 -2.38 18.19 C-2.73 19.24 -3.09 20.3 -3.46 21.38 C-8.36 35.43 -15.04 48.65 -23.22 61.07 C-25.74 65.02 -26.72 68.33 -27 73 C-26.67 73.66 -26.34 74.32 -26 75 C-26.31 76.11 -26.62 77.23 -26.94 78.38 C-28.82 85.44 -28.58 92.57 -27 99.66 C-25.83 105.3 -25.66 110.75 -25.69 116.5 C-25.69 117.58 -25.69 118.65 -25.69 119.76 C-25.8 128.82 -26.74 137.67 -27.93 146.64 C-28.9 154.17 -29.25 161.46 -28.8 169.04 C-28.59 174.27 -29.73 176.96 -33 181 C-34.75 182.88 -34.75 182.88 -36 184 C-33.67 184.78 -31.39 185.42 -29 186 C-29.41 188.41 -29.67 189.69 -31.49 191.38 C-33.89 193.96 -33.84 196.15 -33.74 199.57 C-32.75 202.84 -31.16 203.94 -28.5 206.06 C-21.94 211.35 -19.29 217.68 -15.86 225.16 C-10.06 237.53 -0.7 248.14 8.09 258.46 C10.88 262.17 13.18 265.28 12.69 270 C10.64 273.64 8.28 275.21 4.9 277.57 C0.37 280.98 -0.65 285.7 -2 291 C-3.32 291.33 -4.64 291.66 -6 292 C-6 288.05 -5.39 285.89 -4 282.25 C-3.63 281.27 -3.26 280.28 -2.88 279.27 C-2.59 278.52 -2.3 277.77 -2 277 C-5.81 279.58 -6.81 281.53 -8 286 C-8.99 286 -9.98 286 -11 286 C-10.67 287.32 -10.34 288.64 -10 290 C-20.16 285.65 -26.07 278.15 -32.82 269.61 C-35 266.92 -35 266.92 -37.66 264.36 C-39.92 262.08 -41.28 259.88 -42.79 257.06 C-44.27 254.54 -45.99 252.27 -47.75 249.94 C-65.16 226.32 -65.16 226.32 -64 215 C-64.66 215 -65.32 215 -66 215 C-66 214.34 -66 213.68 -66 213 C-66.66 213 -67.32 213 -68 213 C-71.27 200.19 -74.25 187.31 -74 174 C-71.73 177.41 -71.38 180.24 -70.81 184.19 C-68.3 199.72 -64.39 215.58 -56 229 C-54.51 232.05 -53.22 235.06 -52.44 238.38 C-52.29 238.91 -52.15 239.45 -52 240 C-51.34 240.33 -50.68 240.66 -50 241 C-48.85 242.6 -48.85 242.6 -47.62 244.62 C-46.96 245.71 -46.96 245.71 -46.28 246.82 C-45.2 248.67 -44.18 250.55 -43.19 252.44 C-41 256.32 -38.08 259.46 -35.08 262.73 C-33.14 264.84 -31.29 267 -29.44 269.19 C-26.24 272.86 -22.77 275.92 -19 279 C-19.97 276.31 -20.88 274.15 -22.62 271.88 C-24 270 -24 270 -24 267 C-24.66 267 -25.32 267 -26 267 C-27.32 265.36 -27.32 265.36 -28.69 263.19 C-29.15 262.48 -29.6 261.77 -30.07 261.04 C-31 259 -31 259 -30 256 C-29.24 256.6 -29.24 256.6 -28.46 257.21 C-21.57 263.01 -21.57 263.01 -13.19 264.75 C-11.05 264.2 -11.05 264.2 -10 263 C-9.36 259.82 -9.55 257.75 -11.25 254.95 C-13.73 251.72 -16.34 248.68 -19.19 245.76 C-25.56 239.18 -29.33 232.21 -33.07 223.95 C-33.98 221.99 -33.98 221.99 -35.06 220.13 C-38.26 214.43 -38.97 208.95 -39.62 202.5 C-40.41 194.66 -40.41 194.66 -42.05 186.97 C-43.38 182.04 -43.46 177.08 -43.62 172 C-43.66 171.03 -43.7 170.07 -43.74 169.07 C-43.84 166.72 -43.92 164.36 -44 162 C-43.34 162 -42.68 162 -42 162 C-42.01 161.09 -42.02 160.19 -42.03 159.25 C-42.07 155.83 -42.09 152.41 -42.11 148.99 C-42.12 147.52 -42.13 146.05 -42.15 144.58 C-42.26 135.52 -41.85 126.9 -40 118 C-39.73 116.54 -39.45 115.07 -39.18 113.61 C-38.68 111.03 -38.18 108.44 -37.68 105.86 C-36.98 101.91 -36.47 97.99 -36 94 C-35.24 87.56 -35.24 87.56 -34.02 84.68 C-32.89 81.7 -32.54 79.04 -32.19 75.88 C-30.83 66.57 -27.3 59.33 -21.53 51.99 C-14.81 43.24 -10.93 33.2 -7 23 C-6.74 22.32 -6.47 21.64 -6.2 20.95 C-2.91 12.7 -2.91 12.7 -2 4 C-1 1.69 -1 1.69 0 0 Z \",fill:\"#351447\",transform:\"translate(480,714)\"})),_path129||(_path129=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.3 3.91 0.21 6.61 -0.88 10.44 C-2.25 15.49 -3.23 20.18 -3.44 25.44 C-3.8 31.41 -5.89 35.01 -9 40 C-15.27 50.37 -15.27 50.37 -16 62 C-12.87 65.13 -10.12 65.43 -5.81 65.81 C-1.09 66.42 1.77 67.17 5.5 70.12 C11.74 74.86 18.93 73.46 26.31 72.62 C27.64 72.32 27.64 72.32 29 72 C30.4 69.62 30.4 69.62 31 67 C31.33 66.34 31.66 65.68 32 65 C32.99 65 33.98 65 35 65 C35 65.66 35 66.32 35 67 C35.66 67.33 36.32 67.66 37 68 C33.87 76.51 33.87 76.51 30.25 78.56 C29.51 78.71 28.76 78.85 28 79 C28.33 80.32 28.66 81.64 29 83 C23.4 85.93 23.4 85.93 20.94 86.38 C18.68 86.94 18.68 86.94 16.5 89.5 C14 92 14 92 11.95 92.36 C11.31 92.57 10.66 92.78 10 93 C8.89 95.14 8.89 95.14 8.31 97.75 C8.08 98.61 7.85 99.47 7.61 100.36 C6.65 104.52 5.88 108.61 5.46 112.86 C5.38 113.75 5.29 114.64 5.2 115.55 C5.07 116.92 5.07 116.92 4.94 118.31 C4.85 119.24 4.76 120.18 4.66 121.13 C4.44 123.42 4.22 125.71 4 128 C2.85 127.67 1.7 127.34 0.52 127 C-3.82 125.92 -7.81 125.8 -12.25 125.94 C-19.47 126.12 -24.64 125.18 -31.12 121.94 C-33.27 119.72 -33.53 118.38 -34.31 115.44 C-34.94 113.04 -34.94 113.04 -36 111 C-39.47 109.45 -39.47 109.45 -43 109 C-43.66 108.34 -44.32 107.68 -45 107 C-44.64 102.92 -42.22 99.28 -40.38 95.69 C-39.65 94.24 -38.92 92.8 -38.2 91.35 C-37.14 89.25 -36.08 87.15 -35 85.06 C-31 77.24 -28.26 69.88 -26.49 61.26 C-25.48 56.55 -24.02 52.5 -21.94 48.12 C-18.96 41.69 -17.85 35.5 -17.03 28.48 C-16.47 24 -15.89 20.64 -13 17 C-11.24 16.07 -9.48 15.14 -7.71 14.23 C-4.55 11.96 -3.39 8.53 -2 5 C-1.38 3.51 -1.38 3.51 -0.75 2 C-0.5 1.34 -0.25 0.68 0 0 Z \",fill:\"#7C5C7B\",transform:\"translate(564,190)\"})),_path130||(_path130=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.83 0.26 1.66 0.53 2.52 0.8 C8.95 2.84 15.35 4.93 21.75 7.06 C23.07 7.5 23.07 7.5 24.42 7.94 C45.1 14.82 45.1 14.82 52 21 C53.29 23.69 53.24 24.94 53 28 C52.67 28.66 52.34 29.32 52 30 C51.38 34.94 52.1 37.48 54.56 41.81 C56.96 46.34 57.68 49.57 56.83 54.63 C55.61 58.12 53.62 60.31 51.04 62.91 C48.01 66.01 45.45 69.47 42.8 72.9 C41 75 41 75 38 77 C37.46 80.71 38.1 83.41 39.44 86.81 C43.88 99.51 42.1 111.56 38 124 C37.46 125.92 36.91 127.83 36.38 129.75 C35.52 132.72 34.77 134.35 33 137 C31.21 144.27 30.7 151.54 31 159 C31.66 159 32.32 159 33 159 C38.99 164.53 41.43 168.55 43.06 176.38 C44.36 182.38 44.36 182.38 46.1 188.27 C47.88 193.68 47.82 198.85 45.44 204.06 C42.19 209.77 38.34 214.59 32.69 218 C26.98 219.55 21.54 220.31 16.16 217.53 C12.5 215.76 9.6 215.5 5.56 215.19 C-0.99 214.48 -4.82 213.18 -9 208 C-9.98 206.79 -9.98 206.79 -10.98 205.56 C-12.36 203.82 -13.73 202.08 -15.09 200.33 C-17.49 197.41 -20.02 195.32 -23 193 C-29.5 186.95 -33.17 180.09 -34.38 171.25 C-35.59 166.87 -39.1 164.63 -42.69 162.12 C-47.34 160.54 -51.25 160.84 -56 162 C-58.8 163.29 -58.8 163.29 -60 166 C-61.05 172.18 -59.95 178.5 -57 184 C-53.72 188.17 -50.07 191.99 -46.27 195.68 C-43.55 198.5 -43.01 199.85 -42.88 203.81 C-44.67 212.39 -49.47 217.93 -56.11 223.37 C-58.1 224.87 -58.1 224.87 -59 227 C-59.66 227 -60.32 227 -61 227 C-61.33 230.3 -61.66 233.6 -62 237 C-62.66 237 -63.32 237 -64 237 C-63.94 236.32 -63.88 235.64 -63.83 234.94 C-63.55 231.63 -63.27 228.31 -63 225 C-62.89 223.74 -62.79 222.48 -62.68 221.19 C-62.41 217.8 -62.15 214.42 -61.91 211.03 C-61.8 209.63 -61.69 208.24 -61.57 206.84 C-60.91 198.9 -60.79 191.97 -63.28 184.3 C-66.73 173.23 -62.8 160.49 -59 150 C-58.01 150 -57.02 150 -56 150 C-55.67 150.33 -55.34 150.66 -55 151 C-51.67 151.14 -48.57 151.08 -45.27 150.63 C-44.31 150.51 -43.36 150.38 -42.38 150.25 C-41.03 150.04 -41.03 150.04 -39.65 149.83 C-37 150 -37 150 -34.21 151.4 C-30.99 155.19 -31.29 158.48 -31.31 163.31 C-31.23 171.69 -31.08 178.6 -25 185 C-23.8 186.03 -22.59 187.05 -21.38 188.06 C-16.7 192.02 -13.08 196.63 -9.3 201.43 C-5.18 206.04 -1.39 206.36 4.56 206.94 C9.49 207.47 14.11 208.17 18.88 209.62 C23.96 211.11 28.73 211.96 34 211 C38.73 208.25 40.94 205.2 42.53 200.09 C44.32 192.19 42.24 185.27 39 178 C36.44 173.98 33.74 171.46 29.69 168.94 C27 167 27 167 26 164.06 C26 161 26 161 26.97 158.93 C28.46 154.69 28.34 150.58 28.44 146.12 C28.65 139.53 29.14 133.32 30.56 126.88 C33.94 111.5 31.27 96.04 24.99 81.73 C23.98 78.95 23.8 76.93 24 74 C26.7 72.42 28.59 71.91 31.75 71.44 C37.58 70.05 40.46 65.53 44 61 C44.67 60.2 45.34 59.4 46.02 58.58 C50.37 53.42 50.37 53.42 52 47 C51.34 44.63 51.34 44.63 50.19 42.31 C48.28 37.95 47.3 33.93 46.69 29.23 C45.74 26.14 44.58 24.94 42 23 C39.41 22.28 37.07 21.77 34.44 21.38 C33.73 21.26 33.02 21.14 32.29 21.02 C30.87 20.78 29.44 20.55 28.01 20.32 C25.23 19.88 22.46 19.38 19.69 18.88 C18.85 18.73 18 18.58 17.14 18.43 C15 18 15 18 12 17 C10.86 15.06 10.04 13.07 9.16 11.01 C7.41 7.99 5.55 6.49 2.2 5.43 C0.04 4.88 -2.13 4.4 -4.31 3.94 C-5.79 3.61 -7.26 3.29 -8.74 2.96 C-9.46 2.81 -10.18 2.65 -10.93 2.49 C-12.79 2.05 -14.63 1.49 -16.46 0.91 C-20.8 -0.21 -24.91 -0.38 -29.38 -0.5 C-35.09 -0.66 -40.28 -1.21 -45.83 -2.56 C-49.25 -3.25 -52.45 -3.23 -55.94 -3.19 C-57.23 -3.18 -58.51 -3.17 -59.84 -3.17 C-62.9 -3.22 -62.9 -3.22 -65 -2 C-67.37 -1.93 -69.75 -1.92 -72.12 -1.94 C-73.41 -1.95 -74.69 -1.96 -76.01 -1.96 C-77.49 -1.98 -77.49 -1.98 -79 -2 C-79 -2.99 -79 -3.98 -79 -5 C-79.66 -5.33 -80.32 -5.66 -81 -6 C-52.68 -10.41 -27.24 -8.74 0 0 Z \",fill:\"#867396\",transform:\"translate(1198,1043)\"})),_path131||(_path131=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 16.5 1 33 1 50 C0.34 50 -0.32 50 -1 50 C-1.19 50.65 -1.37 51.29 -1.57 51.96 C-3 54 -3 54 -6.15 54.57 C-7.4 54.61 -8.65 54.65 -9.94 54.69 C-15.06 54.83 -15.06 54.83 -20 56 C-20 56.99 -20 57.98 -20 59 C-20.66 59.99 -21.32 60.98 -22 62 C-22.26 65.02 -22.26 65.02 -22.16 68.47 C-22.15 69.76 -22.14 71.06 -22.13 72.39 C-22.11 73.76 -22.08 75.13 -22.06 76.5 C-21.7 102.62 -21.7 102.62 -26 108 C-27 109 -27 109 -30.1 109.03 C-31.41 109 -32.71 108.97 -34.06 108.94 C-40.19 108.83 -40.19 108.83 -46.19 109.94 C-50.56 111.16 -54.7 111.46 -59.21 111.78 C-62.18 112.01 -65.08 112.43 -68 113 C-78.31 98.45 -81.61 80.17 -85 63 C-85.16 62.21 -85.31 61.43 -85.47 60.62 C-88.45 44.4 -86.71 27.37 -86 11 C-85.67 11 -85.34 11 -85 11 C-84.99 11.9 -84.98 12.8 -84.97 13.73 C-84.93 17.14 -84.87 20.55 -84.79 23.96 C-84.76 25.42 -84.74 26.88 -84.73 28.35 C-84.62 39.07 -84.32 50.87 -77.5 59.75 C-72.79 63.99 -66.76 63.63 -60.63 63.62 C-54.45 62.56 -50.91 58.68 -47 54 C-43.91 49.37 -44 44.43 -44 39 C-43.2 38.71 -42.39 38.42 -41.56 38.12 C-38.87 37.27 -38.87 37.27 -38 35 C-37.5 40.94 -37.5 40.94 -37 47 C-36.01 46.34 -35.02 45.68 -34 45 C-33.53 45.64 -33.05 46.28 -32.56 46.94 C-27.98 50.63 -23.04 50.17 -17.44 49.71 C-9.47 49.11 -9.47 49.11 -3 45 C-2.09 42.12 -2.09 42.12 -1.81 38.62 C-1.74 37.96 -1.67 37.3 -1.59 36.62 C-0.4 24.47 -0.3 12.19 0 0 Z \",fill:\"#401F54\",transform:\"translate(401,846)\"})),_path132||(_path132=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.36 1.09 3.95 2.36 6 4 C6.99 4 7.98 4 9 4 C10.36 4.28 10.36 4.28 11.75 4.56 C15.04 5.2 15.04 5.2 18.38 4.25 C25.63 3.75 30.41 9.22 35.62 13.75 C38.82 16.72 41.5 19.45 43.75 23.19 C46.71 28.05 50.56 31.87 54.56 35.88 C55.21 36.53 55.86 37.19 56.53 37.86 C59.84 41.12 62.92 43.72 67 46 C68.64 47.29 70.24 48.63 71.81 50 C72.6 50.68 73.39 51.36 74.21 52.06 C76 54 76 54 76 57 C77.49 57.5 77.49 57.5 79 58 C80.35 60.34 81.54 62.62 82.69 65.06 C83.01 65.73 83.33 66.39 83.66 67.07 C84.45 68.71 85.23 70.35 86 72 C82.03 73.32 80.27 72.34 76.32 71.02 C75.67 70.8 75.02 70.58 74.35 70.36 C72.98 69.9 71.6 69.44 70.23 68.97 C68.14 68.26 66.05 67.56 63.96 66.87 C58.32 64.97 53.08 63.16 48 60 C46.06 59.16 46.06 59.16 44.14 58.54 C43.09 58.17 43.09 58.17 42.01 57.8 C41.28 57.56 40.56 57.31 39.81 57.06 C38.38 56.58 36.95 56.09 35.52 55.6 C34.78 55.35 34.04 55.1 33.28 54.84 C31 54 31 54 28.78 52.94 C21.1 49.36 13.49 49.37 5.19 49.31 C3.09 49.28 1 49.25 -1.09 49.21 C-2.98 49.18 -4.86 49.16 -6.75 49.14 C-9.64 49.02 -12.18 48.59 -15 48 C-16.84 47.86 -18.68 47.76 -20.52 47.68 C-21.54 47.64 -22.56 47.6 -23.62 47.56 C-24.67 47.52 -25.73 47.48 -26.81 47.44 C-28.42 47.37 -28.42 47.37 -30.07 47.31 C-32.71 47.2 -35.36 47.1 -38 47 C-36.51 46.5 -36.51 46.5 -35 46 C-35 45.34 -35 44.68 -35 44 C-24.63 39.98 -15.65 39.5 -4.69 39.75 C-3.16 39.77 -1.63 39.79 -0.1 39.8 C3.6 39.85 7.3 39.92 11 40 C9.19 38.19 6.39 38.62 3.94 38.44 C2.83 38.35 1.73 38.27 0.59 38.18 C-0.26 38.12 -1.12 38.06 -2 38 C-2 37.67 -2 37.34 -2 37 C2.46 36.5 2.46 36.5 7 36 C7 35.34 7 34.68 7 34 C6.24 33.75 5.48 33.49 4.7 33.23 C3.71 32.89 2.71 32.54 1.69 32.19 C0.7 31.85 -0.28 31.51 -1.3 31.17 C-3.91 30.04 -5.15 29.08 -7 27 C-7.66 26.67 -8.32 26.34 -9 26 C-9 25.34 -9 24.68 -9 24 C-9.8 23.69 -10.61 23.38 -11.44 23.06 C-14 22 -14 22 -15 21 C-15.29 18.76 -15.51 16.5 -15.69 14.25 C-15.79 13.02 -15.9 11.79 -16.01 10.52 C-16 7.02 -15.69 5.03 -14 2 C-9.55 -0.97 -5.22 -0.64 0 0 Z \",fill:\"#7F709D\",transform:\"translate(691,209)\"})),_path133||(_path133=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 1.56 1.88 1.56 3 4 C3.49 11.66 2.61 19.36 2 27 C4.17 27.93 4.17 27.93 7 28 C9.43 26.57 11.4 25.21 13.56 23.44 C14.13 23.01 14.69 22.58 15.27 22.13 C19.02 19.16 21.43 16.07 24 12 C27.28 9.23 29.32 8.11 33.56 7.44 C38.05 8.17 39.28 9.38 42 13 C42.41 16.04 42.07 18.91 41.69 21.94 C41.06 27.64 40.93 31.52 43 37 C43.2 42.89 41.76 48.38 39.77 53.88 C38.68 56.88 37.85 59.93 37 63 C37.33 63.33 37.66 63.66 38 64 C37.54 71.56 35.67 78.54 33.62 85.81 C33.01 88.03 32.4 90.24 31.79 92.46 C31.49 93.53 31.19 94.61 30.89 95.72 C29.52 100.79 28.25 105.89 27 111 C26.67 111 26.34 111 26 111 C26.01 109.74 26.02 108.48 26.04 107.19 C26.1 96.41 25.84 85.75 25 75 C25.66 75 26.32 75 27 75 C27.33 72.03 27.66 69.06 28 66 C27.01 67.98 27.01 67.98 26 70 C24 72 24 72 21.81 72.06 C16.31 69.98 12.71 65.2 9.56 60.38 C7.22 56.89 4.46 55.31 0.87 53.25 C-2.89 50.74 -4.64 47.39 -5.75 43.12 C-5.83 42.42 -5.92 41.72 -6 41 C-6.99 41 -7.98 41 -9 41 C-10 40 -10 40 -10.12 37.5 C-10 35 -10 35 -9 34 C-9.18 31.5 -9.18 31.5 -9.69 28.62 C-9.84 27.65 -9.98 26.67 -10.14 25.66 C-11.16 22.5 -12.13 21.59 -15 20 C-18.24 19.78 -20.11 20.25 -22.62 22.37 C-35.7 36.48 -46.01 55.54 -48.47 74.52 C-49.31 80.04 -50.39 85.6 -53.54 90.29 C-55.39 93.72 -55.68 96.94 -56 100.75 C-56.59 106.76 -57.42 112.64 -58.56 118.56 C-59.91 125.62 -60.45 132.53 -60.69 139.71 C-60.98 142.73 -61.41 144.46 -63 147 C-62.97 145.98 -62.97 145.98 -62.93 144.94 C-62.77 136.14 -63.77 127.69 -65 119 C-64.34 119 -63.68 119 -63 119 C-62.94 118.19 -62.88 117.38 -62.82 116.54 C-62.64 114.21 -62.46 111.89 -62.27 109.56 C-62.11 107.47 -61.98 105.38 -61.92 103.29 C-61.59 95.67 -59.12 89.16 -56.48 82.09 C-55.25 78.77 -54.25 75.44 -53.38 72 C-52.31 67.89 -50.89 64.19 -49.09 60.35 C-47.88 57.75 -46.82 55.1 -45.75 52.44 C-43.67 47.42 -41.37 42.55 -38.94 37.69 C-38.61 37.03 -38.28 36.37 -37.94 35.7 C-35.76 31.38 -33.43 27.18 -31 23 C-30.34 23 -29.68 23 -29 23 C-28.72 22.01 -28.72 22.01 -28.44 21 C-23.97 11.68 -10.97 -5.13 0 0 Z \",fill:\"#3F1C4F\",transform:\"translate(379,710)\"})),_path134||(_path134=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.31 5.56 6.8 11.77 7.09 19.36 C7.38 26.1 10.2 29.4 15 34 C11.32 35.15 11.32 35.15 8.44 33.81 C2.47 29.38 2.08 24.26 0.84 17.21 C0.01 14.05 -0.33 12.79 -3 11 C-8.54 9.44 -15.46 9.44 -21 11 C-22.91 12.55 -23.87 13.53 -24.53 15.93 C-25.03 21.55 -24.88 26.94 -24.44 32.56 C-23.76 43.36 -23.2 55.45 -29 65 C-32.76 67.24 -35.18 68.01 -39.56 67.94 C-44.27 66.65 -47.45 64.21 -51.25 61.25 C-52.91 59.81 -52.91 59.81 -55 60 C-54.62 64.02 -54.23 68.04 -53.83 72.06 C-53.69 73.43 -53.56 74.79 -53.43 76.16 C-53.25 78.13 -53.05 80.1 -52.85 82.07 C-52.74 83.25 -52.62 84.44 -52.5 85.66 C-52 88.97 -51.13 91.86 -50 95 C-49.25 98.53 -49.14 101.48 -50 105 C-52.01 107.83 -54.24 110.17 -56.7 112.62 C-58.74 114.74 -60.12 116.59 -61.56 119.12 C-63.85 123.06 -66.8 125.87 -70.09 128.97 C-72.02 131.02 -73.23 132.97 -74.56 135.44 C-75.73 137.47 -75.73 137.47 -77 139 C-78.09 139.12 -79.19 139.25 -80.31 139.38 C-85.56 140.26 -87.07 143.08 -90.14 147.23 C-92.26 150.39 -94.16 153.6 -95.89 156.99 C-97.09 159.16 -98.51 161.03 -100 163 C-101.16 165.39 -101.16 165.39 -101 168 C-99.39 169.72 -97.71 171.38 -96 173 C-95.2 173.81 -94.4 174.63 -93.57 175.46 C-88.08 181.03 -88.08 181.03 -82.12 186.06 C-78.21 189.34 -76.64 193.25 -75 198 C-74.57 199.2 -74.13 200.39 -73.69 201.62 C-71.75 210.07 -73.72 219.53 -75 228 C-72.74 229.41 -70.51 230.78 -68.06 231.84 C-62.75 234.18 -59.77 236.88 -57 242 C-55.21 247.37 -55.29 252.07 -57.62 257.19 C-59.82 261.07 -62.16 263.61 -66 266 C-71.31 267.43 -74.99 267.2 -80 265 C-81.6 264.89 -83.21 264.81 -84.81 264.75 C-89.84 264.36 -92.55 262.64 -96.31 259.38 C-100.43 256.03 -105.97 256.7 -111.02 256.57 C-116.55 256.32 -119.75 255.1 -123.77 251.35 C-128.99 245.28 -129.13 240.82 -129 233 C-129.77 232.61 -130.54 232.23 -131.34 231.83 C-132.84 231.05 -132.84 231.05 -134.38 230.25 C-135.87 229.48 -135.87 229.48 -137.4 228.7 C-140.07 226.96 -140.94 225.95 -142 223 C-141.01 223 -140.02 223 -139 223 C-138.34 223.99 -137.68 224.98 -137 226 C-134.85 226.87 -134.85 226.87 -132.38 227.56 C-126.82 229.62 -124.24 232.79 -120.89 237.56 C-118.41 240.77 -115.63 243.18 -112 245 C-106.95 245.38 -103.94 245.25 -100 242 C-98.17 239.76 -96.42 237.46 -94.68 235.15 C-91.61 231.23 -88.34 229.13 -83.88 227.12 C-81.14 225.77 -80.01 225.01 -78.06 222.56 C-75.03 212.4 -75.53 203.62 -80 194 C-82.58 189.38 -85.82 186.22 -90 183 C-90.56 182.22 -91.11 181.43 -91.69 180.62 C-94.61 177.31 -97.89 175.6 -101.76 173.53 C-104.28 171.81 -105.13 170.91 -106 168 C-105.71 160.81 -103.33 155.76 -98.19 150.81 C-96.85 149.6 -96.85 149.6 -95.48 148.37 C-93.14 146.13 -91.68 144.15 -90.06 141.38 C-87.14 136.67 -83.33 134.07 -78.81 130.95 C-71.31 125.74 -66.47 120.83 -62.42 112.61 C-61.04 110.08 -59.61 108.31 -57.62 106.25 C-55.24 103.65 -55.02 103.13 -54.56 99.38 C-54.93 96.16 -54.93 96.16 -55.5 93.66 C-56.04 90.81 -56.29 88.03 -56.5 85.14 C-56.58 84.02 -56.66 82.91 -56.75 81.76 C-56.83 80.6 -56.91 79.44 -57 78.25 C-57.17 75.96 -57.33 73.68 -57.5 71.39 C-57.62 69.76 -57.62 69.76 -57.73 68.09 C-57.97 65.32 -58.34 62.61 -58.75 59.86 C-59 56 -59 56 -57.63 54.33 C-53.79 51.19 -49.83 49 -44.81 49 C-42 50 -42 50 -39.44 52.06 C-37.16 54.18 -37.16 54.18 -34.38 54.5 C-31.89 54.21 -31.89 54.21 -30.38 52.27 C-28.82 49.7 -28.58 48.21 -28.49 45.23 C-28.44 43.9 -28.44 43.9 -28.38 42.54 C-28.36 41.62 -28.34 40.7 -28.31 39.75 C-28.28 38.81 -28.24 37.88 -28.21 36.91 C-28.13 34.61 -28.06 32.31 -28 30 C-28.66 30 -29.32 30 -30 30 C-30.11 27.12 -30.19 24.25 -30.25 21.38 C-30.28 20.57 -30.32 19.76 -30.35 18.93 C-30.44 13.47 -29.77 10.25 -26 6 C-24.03 4.86 -24.03 4.86 -21.94 4.31 C-21.16 4.1 -20.38 3.88 -19.57 3.66 C-18.72 3.44 -17.87 3.22 -17 3 C-16.07 2.72 -15.14 2.44 -14.18 2.16 C-3.79 -0.9 -3.79 -0.9 0 0 Z \",fill:\"#846E8F\",transform:\"translate(784,291)\"})),_path135||(_path135=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.18 4.62 0.34 6.94 0.5 C10.41 0.74 13.65 1.03 17 2 C17 2.66 17 3.32 17 4 C18.32 4 19.64 4 21 4 C23.14 4.66 23.14 4.66 25.25 5.5 C25.96 5.78 26.66 6.06 27.39 6.34 C28.19 6.67 28.19 6.67 29 7 C29 7.66 29 8.32 29 9 C29.62 9.18 30.23 9.36 30.87 9.55 C35.93 11.05 40.96 12.61 45.96 14.31 C47.77 14.92 49.61 15.5 51.44 16.06 C54 17 54 17 56 19 C56.5 20.48 56.5 20.48 57 22 C56.43 21.87 55.86 21.73 55.28 21.6 C54.51 21.42 53.73 21.24 52.94 21.06 C51.81 20.8 51.81 20.8 50.65 20.54 C49.34 20.27 49.34 20.27 48 20 C46.33 19.64 46.33 19.64 44.63 19.27 C40.27 18.95 37.89 19.88 33.94 21.69 C32.77 22.21 31.6 22.73 30.4 23.26 C27.08 24.96 24.09 26.91 21 29 C18.7 30.14 16.39 31.05 14 32 C14.24 37.78 15.7 40.38 19.72 44.52 C21 46 21 46 21 48 C21.64 48.29 22.28 48.58 22.94 48.88 C25 50 25 50 26 52 C28.45 52.94 30.89 53.79 33.38 54.62 C40.92 57.3 46.82 60.86 53 66 C53.72 66.56 54.45 67.12 55.19 67.7 C58.5 70.35 60.06 71.94 61 76 C63.27 78.52 63.27 78.52 66 81 C67.67 82.67 69.33 84.33 71 86 C71.91 86.86 71.91 86.86 72.85 87.74 C85.21 99.6 85.21 99.6 86.43 106.41 C86.44 108.63 86.44 108.63 86 112 C83.88 112 83.88 112 81 111 C75 104.61 75 104.61 75 101 C73.51 100.5 73.51 100.5 72 100 C71.33 98.67 70.67 97.33 70 96 C66.33 92.17 62.45 88.55 58.56 84.94 C57.74 84.16 57.74 84.16 56.9 83.37 C53.47 80.18 49.95 77.54 46 75 C43.62 72.88 43.62 72.88 42 71 C42 70.34 42 69.68 42 69 C41.3 68.8 40.61 68.59 39.89 68.38 C36.07 66.56 33.69 63.92 30.75 60.94 C25.57 55.77 25.57 55.77 18.69 53.75 C17.47 53.83 16.25 53.91 15 54 C15 53.34 15 52.68 15 52 C12.69 51.67 10.38 51.34 8 51 C8 50.34 8 49.68 8 49 C6.05 48.66 6.05 48.66 4.06 48.31 C-2.9 46.75 -8.47 43.5 -13.75 38.75 C-16.46 36.33 -18.24 35.1 -22 35 C-26.21 35.34 -29.03 35.92 -32 39 C-33.19 41.29 -34.08 43.57 -35 46 C-41.22 44.8 -45.97 41.86 -50 37 C-50 35.68 -50 34.36 -50 33 C-49.26 32.94 -48.51 32.88 -47.75 32.81 C-44.18 31.76 -43.22 29.89 -41 27 C-40.01 27 -39.02 27 -38 27 C-37.3 26.24 -36.6 25.47 -35.88 24.69 C-32.24 21.29 -28.73 20.27 -24 19 C-24 15.89 -24.46 13.06 -25 10 C-24.34 10 -23.68 10 -23 10 C-22.71 9.19 -22.71 9.19 -22.41 8.36 C-20.78 4.45 -19.43 1.68 -15.44 -0.06 C-10.23 -1.57 -5.29 -0.69 0 0 Z \",fill:\"#3F1D4E\",transform:\"translate(788,76)\"})),_path136||(_path136=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.6 -0.66 1.2 -1 1.81 C-2.21 4.05 -2.21 4.05 -2 7 C-3.17 8.46 -4.35 9.92 -5.61 11.3 C-7.12 13.04 -7.12 13.04 -8.31 15.44 C-10.38 18.57 -12.63 20.04 -15.75 22.12 C-21.88 26.56 -25.6 31.28 -29 38 C-29.38 38.72 -29.76 39.43 -30.14 40.17 C-32.61 48.32 -33.17 60.93 -29.57 68.77 C-28.36 70.83 -27.11 72.86 -25.81 74.86 C-22.41 80.75 -21.42 87.41 -20 94 C-19.49 96.06 -18.97 98.13 -18.44 100.19 C-17.08 105.6 -15.85 111.03 -14.65 116.48 C-14.25 118.92 -14.25 118.92 -13 120 C-12.96 121.67 -12.96 123.33 -13 125 C-13.54 124.59 -14.09 124.18 -14.64 123.76 C-15.36 123.22 -16.08 122.68 -16.81 122.12 C-17.87 121.32 -17.87 121.32 -18.96 120.51 C-20.6 119.29 -22.3 118.14 -24 117 C-24 116.34 -24 115.68 -24 115 C-24.55 114.92 -25.09 114.84 -25.66 114.76 C-43.97 111.99 -58.43 106.61 -73 95 C-74.18 94.09 -75.37 93.18 -76.56 92.27 C-79.72 89.86 -82.86 87.44 -86 85 C-84.79 80.37 -83.7 78.18 -79.62 75.62 C-78.85 75.12 -78.08 74.62 -77.29 74.1 C-75 73 -75 73 -71 73 C-70.5 72.01 -70.5 72.01 -70 71 C-68.83 72.45 -67.66 73.91 -66.5 75.38 C-65.85 76.19 -65.2 77 -64.53 77.84 C-63 80 -63 80 -63 82 C-62.14 82.11 -62.14 82.11 -61.27 82.22 C-58.19 83.28 -56.85 85.08 -54.69 87.5 C-50.74 91.61 -48.71 92.48 -43 93 C-40.14 94.77 -37.56 96.82 -35 99 C-35.74 95.86 -36.76 92.98 -38 90 C-38.66 90 -39.32 90 -40 90 C-40.33 89.19 -40.65 88.38 -40.99 87.55 C-41.43 86.48 -41.86 85.41 -42.31 84.31 C-42.74 83.26 -43.17 82.2 -43.61 81.11 C-44.9 78.02 -44.9 78.02 -46.6 75.48 C-48.22 72.61 -48.63 70.31 -49.06 67.06 C-49.54 63.76 -50.03 60.91 -51.12 57.75 C-54.47 47.22 -50.18 36.48 -45.46 27.12 C-41.16 19.03 -35.66 11.32 -29 5 C-28.01 5.33 -27.02 5.66 -26 6 C-24.67 5 -23.33 4 -22 3 C-19.6 2.59 -19.6 2.59 -17.06 2.5 C-13.72 2.28 -12.23 2.14 -9.31 0.38 C-6 -1.6 -3.66 -0.79 0 0 Z \",fill:\"#3C1A4D\",transform:\"translate(223,1153)\"})),_path137||(_path137=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 2.47 0.5 2.47 1 5 C1.99 5.33 2.98 5.66 4 6 C5.86 7.84 7.48 9.82 9.16 11.83 C10.29 13.17 11.46 14.48 12.68 15.73 C21.35 24.81 21.18 37.76 21.12 49.62 C21.12 50.69 21.12 51.75 21.11 52.85 C21 69.92 21 69.92 20 75 C19.01 75.49 19.01 75.49 18 76 C17.97 75.41 17.95 74.82 17.92 74.22 C17.81 71.5 17.68 68.78 17.56 66.06 C17.52 65.14 17.48 64.21 17.44 63.26 C17.15 52.1 17.15 52.1 14.44 41.38 C13.29 38.24 13.01 36.66 13.06 33.19 C13.31 29.98 13.31 29.98 11.39 27.88 C8.47 25.58 6.41 25.23 2.75 24.75 C1.67 24.6 0.59 24.45 -0.52 24.3 C-1.34 24.2 -2.16 24.1 -3 24 C-3 22.02 -3 20.04 -3 18 C-6.03 19.14 -6.03 19.14 -9 21 C-9.89 23.55 -9.89 23.55 -10 26 C-11.97 27.97 -15.35 27.66 -18 28 C-18.1 28.64 -18.21 29.28 -18.31 29.94 C-18.54 30.62 -18.77 31.3 -19 32 C-19.99 32.33 -20.98 32.66 -22 33 C-29.13 38.82 -31.98 46.06 -32.91 55.05 C-33.05 56.68 -33.17 58.32 -33.28 59.96 C-33.76 66.82 -35.69 72.62 -38.17 79 C-39.29 83.04 -39.33 86.83 -39.31 91 C-39.33 91.78 -39.34 92.56 -39.36 93.37 C-39.37 98.25 -38.92 101.88 -36 106 C-33.92 106.79 -33.92 106.79 -31.62 106.62 C-27.2 106.83 -25.2 107.8 -22 111 C-21.4 111.54 -20.8 112.07 -20.19 112.62 C-19 114 -19 114 -19 116 C-18.41 116.18 -17.82 116.36 -17.21 116.55 C-13.65 117.68 -10.49 118.69 -7.31 120.69 C-4.28 122.41 -2.43 122.51 1 122 C4.03 119.38 6.05 116.57 8.06 113.12 C8.83 111.81 8.83 111.81 9.61 110.47 C11.17 107.69 12.6 104.86 14 102 C14.99 100.52 14.99 100.52 16 99 C16.45 96.88 16.45 96.88 16.63 94.55 C16.72 93.7 16.8 92.86 16.89 91.98 C16.97 91.1 17.04 90.22 17.12 89.31 C17.25 87.97 17.25 87.97 17.39 86.61 C17.6 84.41 17.8 82.2 18 80 C18.33 80 18.66 80 19 80 C19.79 109.25 19.79 109.25 11 121 C10.15 122.19 9.29 123.38 8.44 124.57 C-4.16 142.08 -4.16 142.08 -8 144 C-14.18 144.61 -17.88 142.96 -23.12 140.06 C-29.25 136.68 -29.25 136.68 -36 135 C-36.66 132.36 -37.32 129.72 -38 127 C-37.34 127 -36.68 127 -36 127 C-36.66 126.01 -37.32 125.02 -38 124 C-40.32 123.61 -42.66 123.28 -45 123 C-47.44 121.94 -47.44 121.94 -49 121 C-49.33 121.99 -49.66 122.98 -50 124 C-52.5 121.5 -52.36 120.33 -52.62 116.88 C-52.7 115.96 -52.77 115.05 -52.85 114.12 C-52.9 113.42 -52.95 112.72 -53 112 C-52.01 112 -51.02 112 -50 112 C-48.9 108.69 -48.76 106.04 -48.69 102.56 C-48.65 101.43 -48.61 100.3 -48.57 99.13 C-49.08 95.41 -50.13 94.31 -53 92 C-51.55 88.62 -49.63 86.54 -47 84 C-46.5 83.01 -46.5 83.01 -46 82 C-47.32 81.34 -48.64 80.68 -50 80 C-49.55 79.28 -49.1 78.56 -48.63 77.82 C-44.3 70.32 -42.78 62.45 -42 53.94 C-40.96 42.81 -38.17 34.68 -31 26 C-30.34 25.01 -29.68 24.02 -29 23 C-28.34 23.99 -27.68 24.98 -27 26 C-26.96 25.05 -26.93 24.09 -26.89 23.11 C-26.82 21.86 -26.76 20.6 -26.69 19.31 C-26.63 18.07 -26.57 16.83 -26.51 15.55 C-25.99 11.94 -25.1 9.94 -23 7 C-23.66 6.01 -24.32 5.02 -25 4 C-16.61 -1.68 -9.81 -2.07 0 0 Z \",fill:\"#482859\",transform:\"translate(555,1085)\"})),_path138||(_path138=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.75 0.25 1.51 0.5 2.28 0.76 C6.65 2.34 9.74 4.23 13.31 7.25 C15.41 8.26 15.41 8.26 17.56 8.88 C18.33 9.11 19.1 9.35 19.89 9.6 C23.06 10.45 26.24 11.13 29.46 11.72 C31.31 12.25 31.31 12.25 33.31 14.25 C34.91 14.76 36.54 15.19 38.17 15.58 C44.52 17.23 50.5 19.51 56.56 22 C57.71 22.47 58.86 22.94 60.04 23.43 C69.39 27.32 78.56 31.55 87.69 35.94 C88.65 36.4 88.65 36.4 89.62 36.86 C98.54 41.14 106.98 45.92 115.31 51.25 C116.4 51.94 117.48 52.62 118.59 53.33 C125.45 57.71 131.5 62.56 137.31 68.25 C138.37 69.25 138.37 69.25 139.44 70.27 C147.26 78.26 152.84 88.05 158.65 97.54 C159.78 99.39 160.94 101.23 162.11 103.06 C162.95 104.39 162.95 104.39 163.8 105.75 C164.56 106.94 164.56 106.94 165.34 108.16 C166.31 110.25 166.31 110.25 165.31 113.25 C161.89 109.41 158.95 105.68 156.31 101.25 C155.69 100.65 155.08 100.05 154.44 99.43 C152.19 97.12 150.62 94.81 148.94 92.06 C148.33 91.09 147.73 90.12 147.11 89.12 C146.22 87.7 146.22 87.7 145.31 86.25 C143.36 83.22 141.35 80.23 139.31 77.25 C138.88 76.6 138.44 75.94 137.99 75.27 C129.89 63.69 118.75 56.63 106.76 49.67 C104.25 48.22 101.77 46.74 99.28 45.25 C97.63 44.27 95.97 43.29 94.31 42.31 C93.56 41.86 92.81 41.42 92.03 40.95 C86.65 37.82 81.14 35.45 75.31 33.25 C68.28 30.49 61.34 27.55 54.41 24.52 C52.02 23.54 49.84 22.77 47.31 22.25 C47.31 21.59 47.31 20.93 47.31 20.25 C44.94 19.59 42.7 19.17 40.25 18.88 C19.67 15.61 19.67 15.61 15.31 11.25 C13.31 11.21 11.31 11.21 9.31 11.25 C9.46 12.6 9.6 13.96 9.75 15.31 C9.84 16.13 9.93 16.95 10.02 17.79 C10.27 19.91 10.63 22.02 11 24.12 C11.31 27.25 11.31 27.25 9.31 30.25 C3.27 31.21 -2.64 30.16 -8.51 28.7 C-17.09 26.92 -26.8 28.57 -34.69 32.25 C-34.36 33.24 -34.03 34.23 -33.69 35.25 C-33.69 35.91 -33.69 36.57 -33.69 37.25 C-33.59 39.3 -33.59 39.3 -32.69 41.25 C-31.04 41.96 -29.37 42.62 -27.69 43.25 C-25.38 45.38 -25.38 45.38 -23.69 47.25 C-24.02 48.24 -24.35 49.23 -24.69 50.25 C-23.55 53.66 -22.53 54.13 -19.61 55.97 C4.64 72.1 4.64 72.1 7.06 81 C7.14 81.74 7.23 82.49 7.31 83.25 C5.33 82.26 3.35 81.27 1.31 80.25 C1.31 79.59 1.31 78.93 1.31 78.25 C0.51 77.93 0.51 77.93 -0.31 77.6 C-3.56 75.76 -6.07 73.25 -8.75 70.69 C-12.79 66.89 -16.86 63.22 -21.19 59.75 C-31.55 51.41 -41.81 42.17 -50.69 32.25 C-50.69 31.59 -50.69 30.93 -50.69 30.25 C-51.22 30.02 -51.76 29.8 -52.31 29.56 C-56.45 27.28 -59.79 24.17 -63.06 20.81 C-65.22 18.71 -67.26 17.06 -69.69 15.31 C-72.32 13.4 -74.39 11.58 -76.38 9 C-80.07 4.61 -84.12 3.97 -89.69 3.44 C-90.7 3.33 -91.71 3.22 -92.75 3.11 C-96.22 3.28 -97.79 4.41 -100.69 6.25 C-103.44 6.61 -105.9 6.39 -108.69 6.25 C-104.13 1.69 -96.82 1.03 -90.62 0.81 C-85.64 0.91 -82.11 1.97 -77.82 4.47 C-74.83 5.56 -72.82 4.83 -69.69 4.25 C-68.26 4.03 -66.83 3.81 -65.4 3.6 C-64.61 3.48 -63.82 3.37 -63.01 3.25 C-62.18 3.12 -61.35 3 -60.49 2.88 C-58.71 2.61 -56.92 2.34 -55.14 2.08 C-52.34 1.66 -49.55 1.25 -46.75 0.83 C-44.04 0.43 -41.33 0.03 -38.62 -0.38 C-37.78 -0.5 -36.95 -0.62 -36.09 -0.75 C-35.3 -0.86 -34.52 -0.98 -33.72 -1.1 C-32.69 -1.25 -32.69 -1.25 -31.65 -1.41 C-29.66 -1.73 -29.66 -1.73 -27.64 -2.27 C-18.36 -4.55 -8.87 -2.98 0 0 Z \",fill:\"#280F3B\",transform:\"translate(740.6875,47.75)\"})),_path139||(_path139=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C3 2.35 5 2.68 7 3 C7.99 3.66 8.98 4.32 10 5 C10 5.66 10 6.32 10 7 C11.55 6.91 11.55 6.91 13.12 6.81 C20.05 7.15 23.87 10.64 29 15 C29.93 15.45 30.86 15.91 31.81 16.38 C34 18 34 18 34.75 21.25 C34.83 22.49 34.91 23.73 35 25 C35.16 26.09 35.33 27.19 35.5 28.31 C35.66 29.53 35.83 30.75 36 32 C36.25 33.2 36.25 33.2 36.5 34.42 C37.59 40.79 37.59 40.79 36.01 44.05 C29.79 51.88 21.1 53.67 11.82 55.61 C7.48 56.44 7.48 56.44 4 59 C3.72 61.7 3.68 63.41 5 65.81 C6.99 70.17 6.46 74.67 4.94 79.06 C3.76 82.76 4.34 85.2 5 89 C5.83 96.51 3.51 100.29 -0.81 106.31 C-1.36 107.11 -1.91 107.91 -2.47 108.73 C-8.69 117.7 -8.69 117.7 -13.22 118.75 C-20.18 119.21 -28.49 118.53 -34.32 114.33 C-36.12 112.32 -37.56 110.29 -39 108 C-39.56 107.19 -40.13 106.38 -40.71 105.55 C-42.62 102.77 -44.49 100.02 -46 97 C-45.42 96.77 -44.83 96.55 -44.23 96.32 C-27.99 90.15 -27.99 90.15 -15 79 C-14.44 78.34 -13.87 77.68 -13.29 77 C-6.9 68.47 -2.15 55.78 -1.68 45.15 C-1.62 43.75 -1.62 43.75 -1.56 42.32 C-1.52 41.35 -1.48 40.38 -1.44 39.38 C-1.37 37.95 -1.37 37.95 -1.31 36.5 C-1.07 31.04 -0.97 25.61 -1.03 20.14 C-0.99 17.36 -0.57 14.72 0 12 C-0.66 11.67 -1.32 11.34 -2 11 C-1.67 10.67 -1.34 10.34 -1 10 C-0.77 8.32 -0.59 6.63 -0.44 4.94 C-0.35 4.02 -0.27 3.1 -0.18 2.15 C-0.09 1.09 -0.09 1.09 0 0 Z \",fill:\"#7C5B7A\",transform:\"translate(692,287)\"})),_path140||(_path140=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.75 0.32 3.5 0.64 4.27 0.98 C8.03 2.39 11.59 2.34 15.57 2.46 C18 3 18 3 19.27 4.91 C19.51 5.6 19.75 6.29 20 7 C20.35 7.7 20.7 8.4 21.06 9.12 C28.42 23.84 19.37 47.27 14.81 61.94 C14.56 62.74 14.31 63.55 14.06 64.38 C13.44 66.27 12.73 68.14 12 70 C11.01 70.49 11.01 70.49 10 71 C11.1 65.75 12.37 60.61 13.9 55.47 C18.07 42.02 18.07 42.02 17.25 28.25 C15.75 25.56 14.91 25.15 12 24.31 C9.18 23.47 8.14 23.14 6 21 C6.66 21 7.32 21 8 21 C7.01 19.02 7.01 19.02 6 17 C5.4 17.31 4.8 17.62 4.19 17.94 C-0.4 20.17 -0.4 20.17 -3.02 19.44 C-3.75 19.15 -4.49 18.86 -5.25 18.56 C-10.31 16.77 -14.44 16.59 -19.75 17.44 C-22.7 19.49 -23.04 21.66 -23.99 25.02 C-25.32 28.95 -27.13 32.56 -29 36.25 C-29.34 36.94 -29.69 37.62 -30.04 38.33 C-33.93 45.97 -33.93 45.97 -36 49 C-36.66 49 -37.32 49 -38 49 C-38.19 49.66 -38.37 50.32 -38.56 51 C-42.08 58.34 -48.85 63.9 -54.57 69.54 C-56.77 71.76 -58.8 74.05 -60.81 76.44 C-65.67 82.05 -71.06 83.87 -78 86 C-77.67 86.99 -77.34 87.98 -77 89 C-77.54 89.14 -78.09 89.28 -78.65 89.42 C-90.64 91.96 -90.64 91.96 -99.88 99.12 C-100.2 99.77 -100.53 100.41 -100.87 101.07 C-104.09 106.56 -109.37 108.03 -115.12 109.62 C-120.81 111.22 -120.81 111.22 -126 114 C-126.84 116.32 -126.84 116.32 -126 119 C-124.36 120.71 -122.61 122.12 -120.73 123.57 C-119 125 -119 125 -117.44 127.38 C-116.07 129.28 -116.07 129.28 -113.43 129.34 C-108.95 128.9 -105.67 127.26 -101.69 125.25 C-100.17 124.52 -98.66 123.78 -97.14 123.05 C-94.81 121.9 -92.47 120.74 -90.14 119.58 C-85.45 117.34 -82.28 116.81 -77 117 C-75.33 116.68 -73.66 116.32 -72 115.94 C-67.58 114.97 -64.41 115.17 -60 116 C-59.34 115.67 -58.68 115.34 -58 115 C-56.51 115.99 -56.51 115.99 -55 117 C-45.47 119.1 -34.9 119.72 -26.27 114.69 C-22.07 111.56 -18.59 107.8 -15 104 C-12.74 101.81 -10.52 99.92 -8 98 C-7.01 98.33 -6.02 98.66 -5 99 C-5.4 99.45 -5.8 99.9 -6.21 100.36 C-10.56 105.28 -14.71 110.33 -18.79 115.48 C-23.1 120.39 -27.76 123.06 -33.62 125.69 C-34.29 125.99 -34.96 126.3 -35.65 126.62 C-46.95 131.79 -55.78 130.54 -67.12 126.31 C-69.99 125.21 -72.74 124.14 -75.44 122.68 C-83.42 120.56 -91.87 126.1 -98.75 129.56 C-100.76 130.57 -102.78 131.57 -104.8 132.57 C-106.12 133.23 -106.12 133.23 -107.46 133.91 C-112.69 136.16 -116.43 135.86 -122 135 C-123.16 136.05 -123.16 136.05 -124 138 C-125.01 137.05 -126 136.09 -127 135.12 C-127.56 134.59 -128.11 134.06 -128.69 133.51 C-130 132 -130 132 -130 130 C-130.87 129.61 -130.87 129.61 -131.75 129.21 C-134.17 127.91 -135.92 126.42 -137.94 124.56 C-140.81 121.99 -143.58 119.82 -147 118 C-147.33 118.99 -147.66 119.98 -148 121 C-150.88 121.12 -150.88 121.12 -154 121 C-154.66 120.34 -155.32 119.68 -156 119 C-155.79 116.52 -155.33 115.33 -153.57 113.55 C-148.36 110.13 -144.19 109.57 -138.02 109.3 C-134.08 108.91 -130.95 107.63 -127.36 106.04 C-125.1 105.04 -122.86 104.29 -120.5 103.56 C-114.36 101.55 -108.14 99.24 -103.62 94.51 C-100.64 91.65 -98.17 90.65 -94.31 89.25 C-87.19 86.46 -82.3 82.44 -77 77 C-76.37 76.39 -75.73 75.78 -75.08 75.15 C-72.02 72.18 -69.23 69.09 -66.5 65.81 C-63.29 62.11 -60.51 59.97 -56 58 C-54 57.96 -52 57.96 -50 58 C-46.33 55.86 -44.84 53.29 -42.94 49.56 C-41.17 46.12 -39.34 43.08 -37 40 C-36.29 37.85 -36.29 37.85 -36 36 C-35.34 36 -34.68 36 -34 36 C-33.82 35.23 -33.64 34.45 -33.45 33.66 C-31.15 24.12 -31.15 24.12 -29.19 19.56 C-27.71 16.16 -27.71 16.16 -28.62 13.19 C-29.92 11.13 -31.17 9.58 -33 8 C-32.34 6.68 -31.68 5.36 -31 4 C-28.69 4 -26.38 4 -24 4 C-23.67 4.99 -23.34 5.98 -23 7 C-21.89 5.58 -21.89 5.58 -20.75 4.12 C-18.15 0.8 -15.72 -0.66 -11.56 -1.48 C-10.72 -1.57 -9.87 -1.66 -9 -1.75 C-8.15 -1.85 -7.31 -1.95 -6.44 -2.05 C-3.73 -1.99 -2.33 -1.31 0 0 Z \",fill:\"#45245A\",transform:\"translate(418,1090)\"})),_path141||(_path141=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.15 2.86 2.15 2.86 2.31 4.75 C2.65 8.3 2.79 8.8 5.5 11.44 C9 15.02 8.94 18.12 9 23 C8.68 26.13 8.05 29.13 7.31 32.19 C7.15 32.96 6.99 33.72 6.82 34.51 C5.33 41.04 2.66 45.81 -2.5 50.19 C-6.89 54.47 -8.24 59.24 -10 65 C-10.43 66.3 -10.87 67.6 -11.32 68.9 C-14.88 78.79 -14.88 78.79 -16.12 89.12 C-16.13 89.99 -16.13 90.86 -16.13 91.76 C-16.15 94.04 -16.15 94.04 -15 96 C-14.51 103.27 -15.04 110.79 -16 118 C-16.33 118.33 -16.66 118.66 -17 119 C-17.43 121.29 -17.81 123.59 -18.16 125.89 C-18.26 126.6 -18.37 127.3 -18.48 128.02 C-18.71 129.52 -18.93 131.02 -19.16 132.52 C-19.49 134.77 -19.84 137.01 -20.18 139.26 C-21.3 146.64 -22.28 153.97 -22.77 161.42 C-23.1 165.08 -23.82 168.64 -24.6 172.23 C-25.02 175.14 -25 177.94 -24.97 180.87 C-25.01 183.73 -25.38 186.51 -25.76 189.34 C-28.14 207.01 -27.91 232.62 -17.06 247.62 C-15.75 249.12 -14.39 250.58 -13 252 C-11.93 253.31 -10.87 254.62 -9.81 255.94 C-7.44 258.64 -4.82 260.77 -2 263 C2 267.43 2 267.43 2 271 C2.66 271 3.32 271 4 271 C4.33 272.65 4.66 274.3 5 276 C-0.96 276.39 -0.96 276.39 -3 276 C-4.58 274.23 -4.58 274.23 -6 272 C-9.41 267.31 -12.83 263.06 -17 259 C-18.98 256.62 -20.85 254.22 -22.62 251.69 C-23.08 251.13 -23.53 250.57 -24 250 C-24.66 250 -25.32 250 -26 250 C-25.44 254.3 -23.91 257.05 -21.5 260.62 C-19.59 263.48 -18.09 265.74 -17 269 C-17.33 269.66 -17.66 270.32 -18 271 C-25.81 267.73 -30.48 258.33 -34 251 C-34.77 249.05 -35.49 247.11 -36.13 245.12 C-37.03 242.78 -37.03 242.78 -38.87 239.97 C-41.67 235.15 -43.05 229.96 -44.56 224.62 C-44.87 223.57 -45.17 222.52 -45.48 221.43 C-51 201.75 -51 201.75 -51 192 C-51.66 192 -52.32 192 -53 192 C-54.82 182.3 -55.32 172.84 -55.25 163 C-55.25 162.28 -55.24 161.56 -55.24 160.82 C-55.17 144.71 -54.82 128.51 -50 113 C-49.67 113 -49.34 113 -49 113 C-48.95 115.23 -48.91 117.46 -48.88 119.69 C-48.85 120.93 -48.83 122.17 -48.8 123.45 C-48.99 126.88 -49.66 128.89 -51 132 C-51.73 136.63 -51.83 141.32 -52 146 C-52.06 147.39 -52.06 147.39 -52.12 148.81 C-52.75 165.38 -52.38 182.93 -45.96 198.52 C-45.03 200.91 -44.61 202.91 -44.32 205.44 C-44.22 206.27 -44.12 207.09 -44.01 207.94 C-43.9 208.81 -43.8 209.67 -43.69 210.56 C-42.59 218.75 -40.8 225.61 -37 233 C-36.67 233 -36.34 233 -36 233 C-35.01 232.01 -35.01 232.01 -34 231 C-34 230.01 -34 229.02 -34 228 C-33.34 227.67 -32.68 227.34 -32 227 C-32.14 225.4 -32.29 223.79 -32.44 222.19 C-32.52 221.29 -32.6 220.4 -32.68 219.48 C-32.93 216.87 -32.93 216.87 -34 214 C-34.1 212.65 -34.15 211.3 -34.16 209.95 C-34.17 209.14 -34.18 208.32 -34.19 207.49 C-34.19 206.61 -34.2 205.74 -34.2 204.84 C-34.21 203.93 -34.21 203.02 -34.22 202.09 C-34.23 200.17 -34.24 198.25 -34.24 196.32 C-34.25 193.41 -34.28 190.49 -34.31 187.57 C-34.32 185.7 -34.32 183.83 -34.33 181.96 C-34.34 181.1 -34.35 180.24 -34.37 179.35 C-34.34 173.4 -33.2 168.52 -31 163 C-30.34 163.33 -29.68 163.66 -29 164 C-28.88 162.91 -28.75 161.81 -28.62 160.69 C-28 157 -28 157 -26 154 C-25.2 151.09 -24.78 148.11 -24.31 145.12 C-24.18 144.27 -24.04 143.42 -23.9 142.55 C-23 136.41 -23.12 130.86 -23.87 124.69 C-24.06 120.73 -22.97 118.38 -21 115 C-21.66 115 -22.32 115 -23 115 C-25.77 98.34 -25.58 78.02 -17.73 62.76 C-16.56 59.94 -17.04 57.82 -18 55 C-18.66 54.34 -19.32 53.68 -20 53 C-20.94 45.98 -18.22 39.59 -16 33 C-18.22 34.93 -18.22 34.93 -19 38 C-20.32 37.67 -21.64 37.34 -23 37 C-21.49 31.92 -19.31 27.46 -16.81 22.81 C-16.41 22.07 -16.01 21.32 -15.6 20.55 C-6.03 2.86 -6.03 2.86 0 0 Z \",fill:\"#290E3D\",transform:\"translate(458,696)\"})),_path142||(_path142=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.76 7.35 7.76 7.35 8.36 11.45 C7.91 14.65 6.88 15.72 4.62 18 C0.82 22.11 -0.8 24.78 -1.31 30.44 C-0.73 37.13 2.4 40.55 7.01 45.02 C16.8 54.79 16.8 54.79 17.31 60.5 C14.93 66.86 12.11 72.58 8 78 C7.73 78.68 7.46 79.36 7.19 80.06 C6 82 6 82 3.32 83.27 C-0.52 85.27 -3.17 87.69 -6.25 90.69 C-10.11 94.37 -13.96 97.82 -18.25 101 C-23.15 104.79 -26.55 109.35 -30.09 114.36 C-33.88 119.59 -33.88 119.59 -37.56 120.94 C-40.55 122.24 -40.65 123.14 -42 126 C-44.62 128.25 -44.62 128.25 -47 130 C-51.25 126.51 -53.47 122.21 -55 117 C-55.32 111.75 -53.52 107.53 -51 103 C-50.6 101.67 -50.6 101.67 -50.19 100.31 C-48.52 97.07 -46.23 96.58 -43 95 C-40.33 92.16 -40.33 92.16 -38 89 C-37.26 88.09 -36.51 87.18 -35.75 86.25 C-33.98 84.13 -33.98 84.13 -33 82 C-37.47 83.65 -39.32 84.98 -42 89 C-43.31 90.35 -44.64 91.69 -46 93 C-47.67 88.95 -46.19 85.6 -44.81 81.69 C-44.47 80.68 -44.47 80.68 -44.12 79.66 C-42.51 75.09 -40.66 71.04 -38 67 C-37.34 67.33 -36.68 67.66 -36 68 C-36.99 70.97 -37.98 73.94 -39 77 C-38.11 76.94 -37.23 76.88 -36.31 76.81 C-33 77 -33 77 -30.69 78.56 C-26.72 80.69 -23.31 79.78 -19 79 C-19.46 78.57 -19.92 78.14 -20.39 77.7 C-22.32 75.67 -23.5 73.4 -24.82 70.95 C-26.11 68.82 -27.63 67.07 -29.25 65.19 C-32.31 61.23 -32.59 58.12 -32.41 53.2 C-32 51 -32 51 -30 48 C-29.67 47.34 -29.34 46.68 -29 46 C-28.01 45.51 -28.01 45.51 -27 45 C-23.97 48.57 -21.75 52.14 -19.62 56.31 C-18.42 58.54 -17.21 60.77 -16 63 C-15.36 64.3 -15.36 64.3 -14.71 65.62 C-13.3 68.05 -12.35 69.45 -10 71 C-5.25 71.77 -0.75 71.74 4 71 C4.66 70.34 5.32 69.68 6 69 C6 68.34 6 67.68 6 67 C5.12 67.03 4.24 67.07 3.33 67.11 C2.17 67.13 1.01 67.16 -0.19 67.19 C-1.91 67.24 -1.91 67.24 -3.67 67.29 C-7.5 66.96 -9.06 66.47 -12 64 C-13.82 61.45 -15.29 58.77 -16.75 56 C-17.15 55.28 -17.55 54.55 -17.96 53.8 C-20.89 48.41 -22.71 44.31 -22 38 C-19.46 33.08 -16.15 28.67 -12 25 C-12 25.66 -12 26.32 -12 27 C-11.01 27.33 -10.02 27.66 -9 28 C-8.51 28.99 -8.51 28.99 -8 30 C-5.69 26.37 -3.38 22.74 -1 19 C-2.65 19.33 -4.3 19.66 -6 20 C-7.06 15.59 -7.34 13.65 -5.19 9.56 C-4.47 8.72 -3.74 7.87 -3 7 C-2.34 7 -1.68 7 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#0A123C\",transform:\"translate(1055,990)\"})),_path143||(_path143=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.58 3.78 6.99 8.52 9 14 C9.64 13.95 10.28 13.91 10.94 13.86 C17.27 13.6 20.89 14.17 26 18 C28.24 20.71 28 21.93 27.75 25.5 C27.09 28.59 26.44 30.27 25 33 C24.42 34.18 23.83 35.36 23.23 36.57 C22.55 37.95 21.87 39.32 21.19 40.69 C20.83 41.41 20.48 42.13 20.11 42.87 C18.26 46.59 16.33 50.16 14.12 53.69 C11.51 58.22 11.1 62.9 10.46 68.03 C9.92 71.5 8.97 74.09 7 77 C6.01 77.66 5.02 78.32 4 79 C3.01 81.7 3.01 81.7 2.38 84.81 C2.14 85.85 1.9 86.89 1.65 87.96 C1.23 89.9 0.86 91.86 0.54 93.82 C0.36 94.54 0.18 95.26 0 96 C-0.99 96.5 -0.99 96.5 -2 97 C-3.01 100.56 -3.82 104.06 -4.5 107.69 C-5.06 110.27 -5.96 112.57 -7 115 C-7.99 114.5 -7.99 114.5 -9 114 C-8.98 113.07 -8.96 112.14 -8.94 111.19 C-8.84 107.98 -8.84 107.98 -10 105 C-11.13 99.46 -11.06 96.73 -8.92 91.37 C-7.89 88.72 -6.99 86.05 -6.1 83.36 C-5.76 82.35 -5.43 81.34 -5.09 80.3 C-4.41 78.24 -3.73 76.17 -3.05 74.11 C-1.07 68.13 1 62.22 3.24 56.34 C4.17 53.49 4.32 50.98 4 48 C-1.09 48.38 -1.09 48.38 -5.38 50.94 C-10.52 54.98 -17.65 55.19 -24 56 C-24.28 56.72 -24.57 57.44 -24.86 58.18 C-30.28 71.56 -30.28 71.56 -37 75 C-39 73 -39 73 -39.41 70.38 C-38.85 65.79 -36.88 62.8 -34.44 58.94 C-33.52 57.44 -32.61 55.93 -31.7 54.43 C-31.24 53.69 -30.79 52.94 -30.32 52.18 C-28.4 49.01 -26.59 45.81 -24.81 42.56 C-24.24 41.53 -23.67 40.5 -23.08 39.44 C-22.72 38.64 -22.37 37.83 -22 37 C-22.33 36.34 -22.66 35.68 -23 35 C-24.49 35.5 -24.49 35.5 -26 36 C-26.9 35.69 -27.8 35.39 -28.73 35.07 C-32.46 33.85 -35.46 33.8 -39.38 33.88 C-41.24 33.9 -41.24 33.9 -43.15 33.93 C-44.09 33.95 -45.03 33.98 -46 34 C-47.35 30.95 -46.9 29.67 -45.89 26.4 C-45.36 25.05 -44.81 23.71 -44.25 22.38 C-43.98 21.69 -43.72 21.01 -43.45 20.31 C-42 16.77 -41.25 15.17 -38 13 C-38 16 -38 16 -39 19 C-34.58 17.73 -34.58 17.73 -31 15 C-28.23 14.21 -25.44 13.6 -22.63 12.98 C-19.52 11.82 -18.74 10.76 -17 8 C-16.04 6.78 -15.06 5.57 -14.06 4.38 C-13.58 3.78 -13.1 3.19 -12.6 2.59 C-8.64 -1.34 -5.29 -1.55 0 0 Z \",fill:\"#3A164A\",transform:\"translate(434,636)\"})),_path144||(_path144=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26 -0.01 2.52 -0.02 3.81 -0.04 C5.64 -0.04 5.64 -0.04 7.5 -0.04 C8.6 -0.05 9.71 -0.05 10.84 -0.06 C14.2 0.2 16.86 1.01 20 2.19 C27.29 4.43 34.38 6.58 42 7.19 C42 7.85 42 8.51 42 9.19 C43.45 9.23 43.45 9.23 44.93 9.27 C57.84 9.83 66.31 13.48 77.12 20.38 C82.13 23.52 85.96 25.24 92 24.19 C97.35 21.94 101.04 18.38 104.61 13.9 C106.57 11.48 108.76 9.36 111 7.19 C115.07 8.68 116.29 10.92 118.25 14.69 C119.03 16.16 119.03 16.16 119.83 17.66 C121 20.19 121 20.19 121 22.19 C121.66 22.19 122.32 22.19 123 22.19 C123.37 23.32 123.74 24.46 124.12 25.62 C124.87 27.57 124.87 27.57 126 29.19 C129.08 30.24 129.08 30.24 132 30.19 C133.16 33.67 133.11 36.38 133.1 40.04 C133.1 41.04 133.1 41.04 133.09 42.05 C133.09 44.16 133.08 46.27 133.06 48.38 C133.06 49.81 133.05 51.24 133.05 52.67 C133.04 56.18 133.02 59.68 133 63.19 C129 61.86 126.89 60.2 124 57.19 C122.41 56.06 120.79 54.98 119.15 53.95 C118.21 53.35 117.28 52.76 116.32 52.15 C115.35 51.55 114.38 50.94 113.38 50.31 C112.43 49.71 111.48 49.11 110.5 48.5 C108.59 47.29 106.67 46.09 104.74 44.9 C103.07 43.86 101.42 42.79 99.79 41.67 C91.08 35.89 80.97 33.03 71.12 29.75 C69.65 29.26 69.65 29.26 68.15 28.75 C61.45 26.52 54.73 24.34 48 22.19 C47.26 21.95 46.52 21.71 45.76 21.47 C21.42 13.68 -1.54 13.93 -26.75 16.31 C-28.35 16.45 -28.35 16.45 -29.97 16.59 C-40.3 17.78 -48.98 22.22 -57.12 28.56 C-61.81 32.19 -61.81 32.19 -64 32.19 C-64.33 33.18 -64.66 34.17 -65 35.19 C-67.06 35.88 -67.06 35.88 -69 36.19 C-69 30.45 -66.18 27.4 -62.44 23.43 C-56.21 17.71 -48.76 13.93 -41.19 10.3 C-38.81 9.17 -38.81 9.17 -36.19 7.12 C-25.19 0.44 -12.48 0.01 0 0 Z \",fill:\"#131847\",transform:\"translate(1147,1020.8125)\"})),_path145||(_path145=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.92 1.13 0.84 2.27 0.75 3.44 C0.74 12.06 3.46 20.81 5.9 29.03 C7.8 35.59 8.53 42.08 9 48.88 C9.12 50.23 9.12 50.23 9.24 51.62 C9.47 56.09 9.53 58.98 6.55 62.48 C5.71 63.31 4.87 64.14 4 65 C3.15 67.22 3.15 67.22 3 69 C7.16 69.35 8.82 68.63 12 66 C12.66 66 13.32 66 14 66 C14.33 66.66 14.66 67.32 15 68 C16.97 67.85 16.97 67.85 19 67 C20.14 64.92 20.14 64.92 20.75 62.44 C21.11 61.2 21.11 61.2 21.48 59.93 C21.65 59.3 21.82 58.66 22 58 C25 59 25 59 26 60 C25.82 64.65 25.01 68.07 21.87 71.61 C19.36 73.47 16.75 74.28 13.81 75.31 C9.52 76.82 9.52 76.82 6.74 80.17 C5.83 84.1 5.85 87.12 7 91 C5.86 91.68 5.86 91.68 4.69 92.38 C2.76 93.54 0.87 94.75 -1 96 C-3.93 96.16 -3.93 96.16 -7.44 96.06 C-19.66 95.4 -19.66 95.4 -31 99 C-31.33 99.66 -31.66 100.32 -32 101 C-32.66 101 -33.32 101 -34 101 C-34.09 101.54 -34.18 102.07 -34.27 102.62 C-35.25 105.8 -36.86 108.22 -38.69 111 C-39.35 112.03 -40.02 113.06 -40.7 114.12 C-44.19 118.49 -48.02 121.01 -53.44 122.31 C-57.89 123.67 -60.33 125.84 -63.39 129.28 C-65 131 -65 131 -66.99 132.33 C-69.35 134.29 -69.85 135.54 -70.7 138.45 C-71.09 139.72 -71.09 139.72 -71.48 141.02 C-71.74 141.9 -71.99 142.78 -72.25 143.69 C-72.65 145.03 -72.65 145.03 -73.06 146.39 C-73.72 148.59 -74.37 150.79 -75 153 C-76.65 153 -78.3 153 -80 153 C-80 153.99 -80 154.98 -80 156 C-80.99 156 -81.98 156 -83 156 C-83 155.34 -83 154.68 -83 154 C-83.76 154.08 -84.53 154.16 -85.31 154.25 C-88 154 -88 154 -89.63 152.32 C-92.11 148.12 -91.98 143.7 -91 139 C-89.02 136.42 -86.65 134.84 -84 133 C-82.99 131.68 -81.98 130.35 -81 129 C-80.34 129 -79.68 129 -79 129 C-78.98 127.85 -78.96 126.69 -78.94 125.5 C-77.95 117.52 -70.8 112.81 -65 108 C-63.38 106.19 -61.83 104.34 -60.3 102.45 C-59 101 -59 101 -57 100 C-55.93 100.12 -54.86 100.25 -53.75 100.38 C-49.58 99.96 -49.2 99.63 -46.62 96.62 C-43.66 92.78 -42.93 90.49 -42.75 85.62 C-42.3 80.34 -42.3 80.34 -39.88 77.56 C-38.93 77.05 -37.98 76.53 -37 76 C-35.73 75.25 -34.46 74.5 -33.19 73.75 C-32.14 73.17 -31.08 72.6 -30 72 C-30.66 70.68 -31.32 69.36 -32 68 C-30.5 66.81 -30.5 66.81 -28 66 C-24.43 66.87 -21.11 68.3 -18 70.25 C-14.46 71.58 -11.66 70.83 -8 70 C-6.6 68.37 -6.6 68.37 -6 66 C-5.32 64.99 -4.64 63.98 -3.94 62.93 C-1.37 58.47 -1.73 54.7 -2.19 49.69 C-2.31 47.83 -2.44 45.98 -2.56 44.13 C-2.63 43.15 -2.7 42.16 -2.78 41.15 C-3.18 35.48 -3.48 29.8 -3.75 24.12 C-3.82 23.03 -3.89 21.93 -3.96 20.8 C-4.26 14.58 -3.93 10.51 -1 5 C-0.31 2.22 -0.31 2.22 0 0 Z \",fill:\"#897795\",transform:\"translate(846,315)\"})),_path146||(_path146=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.31 1.83 4.55 3.72 5.75 5.62 C9.04 10.74 9.04 10.74 13.25 15.06 C16.66 18.17 17.7 22 19.04 26.32 C20.05 29.14 21.44 31.45 23 34 C23.15 35.05 23.15 35.05 23.31 36.12 C23.91 38.39 23.91 38.39 27.06 39.75 C28.52 40.37 28.52 40.37 30 41 C30 41.33 30 41.66 30 42 C28.35 42 26.7 42 25 42 C25.96 44.41 25.96 44.41 29.44 45.81 C31.93 47.2 32.89 47.83 34.44 50.31 C36.11 58.29 36.11 58.29 33.91 61.68 C32.65 63.15 31.33 64.58 30 66 C29.5 67.48 29.5 67.48 29 69 C30.65 69.33 32.3 69.66 34 70 C34 70.66 34 71.32 34 72 C34.66 72 35.32 72 36 72 C36 75.3 36 78.6 36 82 C34.02 82.99 34.02 82.99 32 84 C33.32 84.99 34.64 85.98 36 87 C36.33 86.34 36.66 85.68 37 85 C39.36 96.78 36.78 105.33 32.18 116.1 C30.38 120.54 28.95 124.84 29.06 129.69 C29 132 29 132 27.58 134.3 C25.92 137.13 25.33 139.36 24.69 142.56 C21.85 154.43 15.39 167.07 5 174 C1.56 174 1.56 174 -2 173 C-4.44 169.94 -4.44 169.94 -6 167 C-6.71 167.22 -7.42 167.43 -8.15 167.66 C-9.53 168.07 -9.53 168.07 -10.94 168.5 C-12.31 168.92 -12.31 168.92 -13.71 169.34 C-16 170 -16 170 -17 170 C-17 168.35 -17 166.7 -17 165 C-16.34 165 -15.68 165 -15 165 C-14.61 164.14 -14.61 164.14 -14.2 163.26 C-12.93 160.86 -11.46 158.92 -9.75 156.81 C-3.1 148.35 1.69 139.89 6 130 C6.66 130 7.32 130 8 130 C7.95 129.17 7.9 128.33 7.85 127.47 C8.02 123.5 9.08 120.16 10.38 116.44 C12.74 109.33 14.14 102.46 15 95 C15.66 95 16.32 95 17 95 C17.08 90.33 17.13 85.65 17.16 80.98 C17.18 79.4 17.2 77.82 17.23 76.24 C17.47 61.27 16.17 46.97 10.56 32.94 C10.28 32.18 9.99 31.41 9.69 30.63 C8.28 26.95 6.74 23.45 4.89 19.97 C2.81 15.92 1.95 11.97 1.25 7.5 C1.12 6.77 1 6.05 0.87 5.3 C0.57 3.53 0.28 1.77 0 0 Z \",fill:\"#311243\",transform:\"translate(570,1080)\"})),_path147||(_path147=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.01 0.74 2.03 1.48 2.04 2.24 C2.35 21.03 2.35 21.03 5.57 39.47 C5.71 40.31 5.86 41.14 6 42 C5.34 42.66 4.68 43.32 4 44 C4 44.99 4 45.98 4 47 C5.24 47.37 6.48 47.74 7.75 48.12 C10.76 49.29 12.09 50.09 14.44 52.44 C16.35 56.79 16.57 60.57 16.73 65.29 C16.81 68.22 16.81 68.22 19 71 C19.99 67.7 20.98 64.4 22 61 C27.94 60.5 27.94 60.5 34 60 C34 58.68 34 57.36 34 56 C33.34 56 32.68 56 32 56 C32 55.34 32 54.68 32 54 C31.01 53.67 30.02 53.34 29 53 C29 52.34 29 51.68 29 51 C28.34 51 27.68 51 27 51 C26.73 50.05 26.46 49.1 26.19 48.12 C25.25 44.75 25.25 44.75 22 43 C21.56 40.56 21.56 40.56 22 38 C24 36.19 24 36.19 26 35 C26.99 35.66 27.98 36.32 29 37 C29.41 39.71 29.13 42.24 29 45 C31.31 45.66 33.62 46.32 36 47 C35.5 43.53 35.5 43.53 35 40 C35.99 39.67 36.98 39.34 38 39 C39.81 40.81 39.38 43.61 39.56 46.06 C39.65 47.17 39.73 48.27 39.82 49.41 C39.91 50.69 39.91 50.69 40 52 C41.98 51.5 41.98 51.5 44 51 C42.01 65.78 39.37 80.62 31.12 93.31 C27.29 99.38 26.9 104.97 28 112 C29.23 115.2 29.23 115.2 32 117 C32 118.32 32 119.64 32 121 C32.56 121.19 33.11 121.37 33.69 121.56 C36.57 123.35 37.83 125.47 39.7 128.25 C41.46 130.61 43.68 132.21 46 134 C46 134.66 46 135.32 46 136 C46.78 136.31 47.57 136.62 48.38 136.94 C51 138 51 138 53 139 C53 139.99 53 140.98 53 142 C53.66 142.33 54.32 142.66 55 143 C54.01 143.33 53.02 143.66 52 144 C50.66 143.01 49.33 142.01 48 141 C45.92 140.24 43.83 139.57 41.71 138.94 C40 138 40 138 39.26 135.9 C39.18 135.27 39.09 134.65 39 134 C38.34 134 37.68 134 37 134 C36.77 133.05 36.55 132.1 36.31 131.12 C35.31 127.81 35.31 127.81 32.38 126.62 C31.2 126.32 31.2 126.32 30 126 C30 125.34 30 124.68 30 124 C29.34 124 28.68 124 28 124 C29.23 128.6 31.1 131.79 33.98 135.48 C35 137 35 137 35 139 C30.29 137.86 27.48 135.07 24.43 131.49 C22.23 127.66 22.34 124.02 22.23 119.68 C21.92 116.09 20.37 114.65 18 112 C16.16 107.3 15 103.05 15 98 C14.22 97.86 13.43 97.71 12.62 97.56 C10 97 10 97 8 96 C8 95.34 8 94.68 8 94 C7.01 93.96 6.02 93.92 5 93.88 C0.64 93.31 -1.95 91 -5.2 88.18 C-5.8 87.79 -6.39 87.4 -7 87 C-8.49 87.5 -8.49 87.5 -10 88 C-10.33 87.01 -10.66 86.02 -11 85 C-11.99 84.34 -12.98 83.68 -14 83 C-16.01 77.71 -16.3 72.87 -16.27 67.25 C-16.27 66.43 -16.27 65.62 -16.27 64.77 C-16.27 63.06 -16.27 61.34 -16.26 59.62 C-16.25 57.01 -16.26 54.39 -16.27 51.78 C-16.27 50.1 -16.27 48.43 -16.27 46.75 C-16.27 45.98 -16.27 45.2 -16.28 44.41 C-16.24 39.61 -15.49 35.61 -14 31 C-13.46 27.86 -13.01 24.73 -12.56 21.57 C-12 19 -12 19 -10 17 C-9.62 41.72 -9.62 41.72 -11.55 52.85 C-13.12 63.78 -13.12 63.78 -10 74 C-9.01 74 -8.02 74 -7 74 C-7.16 73.49 -7.32 72.97 -7.48 72.45 C-9.98 60.69 -7.44 48.17 -5.5 36.54 C-4.48 30.37 -3.68 24.32 -3.44 18.06 C-3.17 11.7 -2.03 6.03 0 0 Z \",fill:\"#1B0A31\",transform:\"translate(497,318)\"})),_path148||(_path148=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75 1.5 1.75 1.5 3 3 C3.99 3.33 4.98 3.66 6 4 C7.69 5.65 9.35 7.32 11 9 C12.18 10.03 13.36 11.05 14.56 12.05 C26.87 22.39 26.87 22.39 30.87 28.36 C33.06 31.55 35.99 34.06 38.81 36.69 C40 38 40 38 40 40 C41.49 40.5 41.49 40.5 43 41 C44.39 42.6 44.39 42.6 45.81 44.62 C48.68 48.61 51.76 52.3 55 56 C54.5 56.99 54.5 56.99 54 58 C53.23 57.73 52.45 57.47 51.66 57.2 C41.57 53.68 41.57 53.68 31.11 51.68 C21.96 50.63 15.01 47.4 7 43 C4.22 41.47 1.43 39.98 -1.38 38.5 C-2.02 38.14 -2.66 37.78 -3.32 37.4 C-8.32 34.77 -11.48 34.79 -17 36 C-17.93 36.47 -18.86 36.95 -19.81 37.44 C-28.84 41.86 -41.4 42.63 -51.12 40.19 C-55.62 38.33 -55.62 38.33 -57 36 C-56.96 33.3 -56.53 31.59 -54.71 29.57 C-52.42 27.49 -50.05 25.51 -47.66 23.55 C-44.59 20.9 -43.17 19.65 -42.09 15.62 C-42.05 14.32 -42.05 14.32 -42 13 C-44.31 12.34 -46.62 11.68 -49 11 C-49 10.34 -49 9.68 -49 9 C-38.5 5.58 -28.05 2.58 -17.19 0.56 C-16.28 0.39 -15.36 0.21 -14.43 0.03 C-9.3 -0.87 -5.09 -1.18 0 0 Z \",fill:\"#66476C\",transform:\"translate(638,117)\"})),_path149||(_path149=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.55 3.2 4.53 6.89 5.81 11.38 C6.07 12.27 6.33 13.17 6.59 14.09 C9.5 24.89 11.06 35.92 12.73 46.95 C14.4 57.83 16.47 68.48 19.26 79.14 C20.89 85.75 21.06 91.41 20.31 98.19 C19.93 101.19 19.93 101.19 20 105 C21.65 105.33 23.3 105.66 25 106 C27.09 113.55 28.58 121.1 29.81 128.82 C30.7 134.39 31.78 139.91 32.94 145.44 C34.62 153.5 35.85 161.59 37 169.75 C38.65 181.35 40.5 192.77 44.75 203.75 C46 207 46 207 46 211 C44.06 210.27 44.06 210.27 42 209 C41.35 207.01 41.35 207.01 41.06 204.69 C40.42 201.02 40.2 200.2 37.44 197.44 C34.04 194.04 34.39 191.7 34 187 C33.34 186.67 32.68 186.34 32 186 C31.52 183.13 31.16 180.33 30.88 177.44 C30.79 176.63 30.7 175.82 30.61 174.99 C30.4 173 30.2 171 30 169 C28.79 169.16 27.59 169.33 26.34 169.5 C23.04 169.91 19.83 170.11 16.5 170.06 C15.64 170.05 14.79 170.04 13.91 170.04 C13.28 170.02 12.65 170.01 12 170 C11.67 169.01 11.34 168.02 11 167 C10.34 167 9.68 167 9 167 C8.97 166.35 8.95 165.7 8.92 165.03 C8.81 162.08 8.69 159.13 8.56 156.19 C8.52 155.16 8.48 154.14 8.44 153.08 C8.4 152.1 8.36 151.12 8.32 150.11 C8.28 149.2 8.24 148.29 8.21 147.36 C8.08 144.85 8.08 144.85 7 142 C6.38 141.69 5.76 141.38 5.12 141.06 C2.53 139.77 1.68 138.35 0 136 C-0.89 135.15 -1.77 134.31 -2.69 133.44 C-5 131 -5 131 -5 128 C-3.02 127.5 -3.02 127.5 -1 127 C-2.51 115.74 -2.51 115.74 -6 105 C-6.99 104.34 -7.98 103.68 -9 103 C-8.67 101.02 -8.34 99.04 -8 97 C-7.34 97 -6.68 97 -6 97 C-6.07 95.64 -6.07 95.64 -6.14 94.26 C-6.18 93.08 -6.21 91.9 -6.25 90.69 C-6.32 88.93 -6.32 88.93 -6.39 87.14 C-6 84 -6 84 -4.34 82.16 C-1.63 80.82 0.76 80.28 3.75 79.81 C4.73 79.65 5.72 79.5 6.73 79.33 C7.86 79.17 7.86 79.17 9 79 C9.47 68.36 8.45 58.12 7.07 47.57 C6.86 46.02 6.86 46.02 6.66 44.43 C6.53 43.5 6.4 42.58 6.28 41.62 C6 39 6 39 6.03 36.37 C6.11 33.79 6.11 33.79 4.94 30.62 C3.91 26.66 4.19 23.98 5 20 C4.34 20 3.68 20 3 20 C2.95 19.26 2.9 18.53 2.85 17.77 C2.78 16.79 2.7 15.82 2.62 14.81 C2.56 13.85 2.49 12.89 2.41 11.89 C2 8.98 1.1 6.72 0 4 C0 2.68 0 1.36 0 0 Z M8 44 C9 46 9 46 9 46 Z M9 46 C10 49 10 49 10 49 Z M11 57 C12 59 12 59 12 59 Z M13 64 C13 65.65 13 67.3 13 69 C13.33 69 13.66 69 14 69 C14 67.35 14 65.7 14 64 C13.67 64 13.34 64 13 64 Z M14 69 C15 73 15 73 15 73 Z M17 85 C18 87 18 87 18 87 Z M18 90 C18 91.65 18 93.3 18 95 C18.66 93.68 19.32 92.36 20 91 C19.34 90.67 18.68 90.34 18 90 Z M23 117 C24 120 24 120 24 120 Z M32 165 C31.67 165.66 31.34 166.32 31 167 C31.66 167 32.32 167 33 167 C32.67 166.34 32.34 165.68 32 165 Z \",fill:\"#28103A\",transform:\"translate(914,177)\"})),_path150||(_path150=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.74 0.76 1.49 1.53 2.25 2.31 C4.43 4.44 6.52 6.26 9 8 C7.68 5.69 6.36 3.38 5 1 C5.66 0.67 6.32 0.34 7 0 C7.58 0.8 8.15 1.61 8.75 2.44 C11.02 5.02 11.7 5.68 15 6 C15.99 6 16.98 6 18 6 C17.34 6.66 16.68 7.32 16 8 C15.94 10.12 15.94 10.12 16.31 12.44 C16.46 13.61 16.46 13.61 16.61 14.81 C16.97 17.17 16.97 17.17 18 20 C17.98 21.94 17.98 21.94 17.75 24 C17.68 24.68 17.62 25.36 17.55 26.06 C16.83 28.6 16.21 29.53 14 31 C11.06 31.12 11.06 31.12 7.44 30.88 C1.02 30.63 -4.64 31.59 -10.81 33.31 C-11.6 33.53 -12.38 33.74 -13.18 33.96 C-17.88 35.32 -17.88 35.32 -21 39 C-21.69 46.25 -22.44 54.76 -18.52 61.18 C-16.6 63.48 -14.45 65.45 -12.25 67.5 C-7.78 71.75 -5.02 76.04 -2.31 81.5 C-1.96 82.21 -1.61 82.91 -1.25 83.64 C-0.42 85.39 0.3 87.19 1 89 C0.67 89.66 0.34 90.32 0 91 C-0.99 90.01 -0.99 90.01 -2 89 C-2.52 88.55 -3.03 88.09 -3.56 87.62 C-5.24 85.73 -5.41 84.42 -6 82 C-7.22 80.07 -7.22 80.07 -9 78 C-9.42 77.45 -9.85 76.9 -10.29 76.33 C-12.85 73.13 -15.1 70.74 -18.75 68.81 C-22.18 66.9 -22.7 66.49 -24 63 C-24.41 60.2 -24.41 60.2 -24.62 57.25 C-24.7 56.27 -24.77 55.28 -24.85 54.27 C-24.9 53.52 -24.95 52.77 -25 52 C-27.32 56.64 -26 61.37 -24.5 66.06 C-22.27 73.14 -22.27 73.14 -23 77 C-25.95 80.15 -27.4 80.97 -31.77 81.17 C-33.12 81.05 -34.47 80.91 -35.81 80.75 C-36.51 80.68 -37.2 80.62 -37.91 80.55 C-39.61 80.39 -41.31 80.2 -43 80 C-41.33 92.46 -38.81 103.69 -32.64 114.73 C-30.67 118.32 -29.53 120.87 -30 125 C-29.04 124.54 -29.04 124.54 -28.06 124.06 C-25.29 123.1 -23.77 122.94 -20.94 122.88 C-15.24 122.37 -11.48 119.25 -6.95 115.99 C-4.26 114.18 -1.83 112.97 1.19 111.81 C4.51 110.55 4.51 110.55 6.12 107.38 C6.16 104.98 6.16 104.98 5 103 C5.66 102.34 6.32 101.68 7 101 C10.07 107.39 10.07 107.39 9.77 109.97 C8.76 112.63 7.68 113.13 5.18 114.44 C4.39 114.86 3.61 115.28 2.81 115.71 C1.98 116.14 1.16 116.56 0.31 117 C-1.3 117.85 -2.9 118.71 -4.51 119.56 C-5.67 120.17 -5.67 120.17 -6.85 120.8 C-8.77 121.87 -10.55 123.01 -12.34 124.27 C-15.57 126.37 -18.21 126.63 -22 127 C-22.33 127.33 -22.66 127.66 -23 128 C-22.9 128.95 -22.81 129.9 -22.71 130.88 C-22.35 134.82 -22.27 138.1 -23 142 C-26.16 145.58 -29.89 147.65 -34 150 C-35.19 150.97 -36.37 151.96 -37.5 153 C-40 155 -40 155 -43 155 C-43 153.02 -43 151.04 -43 149 C-41 148 -41 148 -38 147 C-37.48 146.48 -36.97 145.97 -36.44 145.44 C-35.96 144.96 -35.49 144.49 -35 144 C-34.34 144 -33.68 144 -33 144 C-30.95 142.16 -30.95 142.16 -30 140 C-29.34 140 -28.68 140 -28 140 C-27.93 136.99 -27.94 134.27 -28.56 131.31 C-29 129 -29 129 -28 126 C-28.99 126 -29.98 126 -31 126 C-31.04 126.72 -31.08 127.44 -31.12 128.19 C-33.01 134.24 -39.98 137.35 -45.14 140.47 C-47.12 141.86 -47.12 141.86 -47.86 143.99 C-48.08 147.1 -46.39 149.27 -45 152 C-45.33 152.99 -45.66 153.98 -46 155 C-55.64 138.31 -55.64 138.31 -54.57 132.75 C-54.38 132.17 -54.19 131.59 -54 131 C-53.01 131.99 -52.02 132.98 -51 134 C-50 133.49 -50 133.49 -48.99 132.98 C-47.66 132.31 -47.66 132.31 -46.31 131.62 C-45.44 131.18 -44.57 130.74 -43.68 130.29 C-36.85 127 -36.85 127 -34 127 C-33.3 119.57 -35.63 114.55 -39 108 C-39.66 108 -40.32 108 -41 108 C-43.85 103.35 -45.7 99.3 -47 94 C-47.99 94 -48.98 94 -50 94 C-53.09 88.33 -55.58 83.49 -56 77 C-55.34 77 -54.68 77 -54 77 C-54.33 76.34 -54.66 75.68 -55 75 C-55.66 75 -56.32 75 -57 75 C-57 74.01 -57 73.02 -57 72 C-56.34 72 -55.68 72 -55 72 C-54.5 71.01 -54.5 71.01 -54 70 C-54.66 70 -55.32 70 -56 70 C-55.75 67.62 -55.75 67.62 -55 65 C-53.19 63.81 -53.19 63.81 -51 63 C-47.53 61.58 -45.98 59.95 -43.88 56.88 C-42.37 54.68 -42.37 54.68 -41 53 C-40.34 53 -39.68 53 -39 53 C-39 52.34 -39 51.68 -39 51 C-36.03 51.33 -33.06 51.66 -30 52 C-28.01 49.61 -27 47.79 -26.99 44.65 C-27.25 42.08 -27.59 39.55 -28 37 C-28.19 35.8 -28.37 34.61 -28.56 33.38 C-28.71 32.59 -28.85 31.81 -29 31 C-29.66 31 -30.32 31 -31 31 C-31.58 20.08 -31.58 20.08 -28 15 C-25.83 12.76 -23.5 10.86 -21 9 C-20.38 8.53 -19.76 8.06 -19.12 7.58 C-14.12 4.14 -9.06 2.5 -3 2 C-2.5 2.5 -2.5 2.5 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#0D0F39\",transform:\"translate(658,833)\"})),_path151||(_path151=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 1.18 4.02 2.11 5.8 4.41 C6.9 9.42 6.87 14.3 6.8 19.41 C6.81 20.54 6.82 21.67 6.83 22.84 C6.85 25.36 6.84 27.88 6.8 30.41 C7.79 30.41 8.78 30.41 9.8 30.41 C10.82 32.07 11.81 33.73 12.8 35.41 C14.28 35.91 14.28 35.91 15.8 36.41 C15.8 35.42 15.8 34.43 15.8 33.41 C16.46 33.41 17.12 33.41 17.8 33.41 C17.8 34.07 17.8 34.73 17.8 35.41 C19.78 35.41 21.76 35.41 23.8 35.41 C23.8 34.75 23.8 34.09 23.8 33.41 C26.67 33.72 26.67 33.72 29.8 34.41 C33.36 39.75 32.23 45.94 31.16 52.08 C30.62 54.64 30.08 57.19 29.52 59.75 C28.87 63.04 28.51 66.19 28.3 69.54 C27.97 73.59 27.68 76.34 24.8 79.41 C21.6 81.4 18.38 83.06 14.7 83.88 C10.67 85 8.18 88.87 5.86 92.16 C3.8 94.41 3.8 94.41 0.98 95.41 C-2.99 95.41 -5.58 93.96 -9.2 92.41 C-12.42 91.82 -12.42 91.82 -15.2 93.41 C-17.48 97.32 -18.68 101.61 -19.94 105.93 C-20.17 106.71 -20.4 107.49 -20.64 108.29 C-20.82 108.98 -21.01 109.68 -21.2 110.4 C-22.68 113.37 -24.4 114.66 -27.2 116.41 C-34.43 117.49 -41.93 117.36 -48.2 113.41 C-52.85 109.01 -53.1 104.56 -53.3 98.48 C-53.34 94.97 -53.34 91.47 -53.33 87.97 C-53.32 86.72 -53.32 85.46 -53.32 84.17 C-53.21 66 -51.74 48.74 -46.77 31.22 C-46.48 30.18 -46.48 30.18 -46.18 29.12 C-43.95 21.66 -39.88 15.51 -33.2 11.41 C-30.69 10.65 -30.69 10.65 -27.95 10.04 C-21.17 8.5 -16.58 4.64 -11.2 0.41 C-7.49 -1.45 -3.95 -1.06 0 0 Z M-40.61 23.84 C-44.83 30.66 -45.69 37.85 -46.2 45.72 C-46.58 51.43 -47.21 56.7 -48.78 62.21 C-50.57 68.98 -50.4 75.28 -50.02 82.22 C-49.97 83.4 -49.93 84.57 -49.88 85.78 C-49.8 95.8 -49.8 95.8 -45.33 104.29 C-39.85 107.18 -33.22 107.52 -27.2 106.41 C-24.56 104.22 -23.55 101.52 -22.2 98.41 C-21.13 96.42 -20.05 94.44 -18.95 92.47 C-18.45 91.54 -17.95 90.6 -17.44 89.63 C-16.2 87.41 -16.2 87.41 -15.2 86.41 C-11.36 86.11 -8.98 85.94 -5.64 87.97 C-3.27 89.64 -3.27 89.64 -0.41 89.42 C4.11 88 5.86 85.38 8.61 81.66 C9.1 81.04 9.59 80.42 10.09 79.78 C13.68 75.09 13.68 75.09 14.8 69.41 C12.79 63.26 9.96 57.92 4.67 54.1 C-0.4 50.21 -1.08 44.88 -2.32 38.93 C-3.48 34.32 -4.73 31.51 -8.58 28.64 C-9.88 27.91 -9.88 27.91 -11.2 27.16 C-12.07 26.66 -12.94 26.16 -13.83 25.64 C-18.68 23.12 -23.28 22.95 -28.64 22.6 C-29.93 22.48 -29.93 22.48 -31.24 22.37 C-36.16 22.02 -36.16 22.02 -40.61 23.84 Z \",fill:\"#462860\",transform:\"translate(370.203125,779.58984375)\"})),_path152||(_path152=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.35 2.23 3.12 3.02 4 6 C4.09 10.62 3.92 15.51 2.3 19.88 C1.8 23.4 3.22 26.56 4.31 29.88 C7.57 40.34 9.36 50.59 8.97 61.6 C8.92 64 8.92 64 9.48 66.28 C10.05 69.25 10.09 72.11 10.14 75.13 C10.33 84.55 11.98 92.85 14.92 101.79 C17.77 110.64 17.64 116.89 13.69 125.38 C13.38 126.09 13.07 126.8 12.75 127.53 C11.17 131.03 10.26 132.83 7 135 C-7.08 121.7 -13.89 103.83 -18.94 85.56 C-19.24 84.46 -19.55 83.36 -19.87 82.22 C-22.63 71.71 -22.29 63.65 -19.81 53.12 C-19.47 51.67 -19.47 51.67 -19.13 50.18 C-17.21 42.27 -14.68 35.28 -10.35 28.36 C-5.92 21.07 -5.27 15.47 -6 7 C-6.63 6.88 -7.27 6.76 -7.92 6.63 C-10 6 -10 6 -11.25 3.94 C-11.5 3.3 -11.75 2.66 -12 2 C-7.62 -0.6 -4.91 -1.81 0 0 Z \",fill:\"#131948\",transform:\"translate(888,837)\"})),_path153||(_path153=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.58 5.78 3.76 10.61 1.19 15.94 C-3.66 26.36 -5.4 38.13 -6.87 49.44 C-7.56 54.4 -8.86 58.42 -11 63 C-14.27 71.08 -16.47 78.65 -17.46 87.3 C-18.07 91.45 -19.07 95.39 -20.12 99.44 C-21.52 104.88 -22.13 109.52 -21.81 115.19 C-21.52 123.09 -23.79 129.75 -26.42 137.15 C-28.2 142.18 -29.37 146.75 -29.8 152.07 C-30.05 154.46 -30.69 156.52 -31.56 158.75 C-32.73 161.99 -33.22 164.52 -33 168 C-33.33 168.33 -33.66 168.66 -34 169 C-34.41 170.81 -34.78 172.63 -35.12 174.46 C-35.33 175.57 -35.55 176.68 -35.77 177.83 C-36.21 180.18 -36.66 182.54 -37.1 184.9 C-37.31 186.01 -37.52 187.13 -37.75 188.27 C-37.94 189.3 -38.13 190.32 -38.33 191.38 C-39 194 -39 194 -41 197 C-41.64 198.84 -41.64 198.84 -42.11 200.84 C-42.31 201.59 -42.5 202.34 -42.7 203.11 C-42.9 203.9 -43.1 204.69 -43.31 205.5 C-45.23 212.71 -47.57 219.35 -51 226 C-52.76 229.44 -54.35 232.84 -55.75 236.44 C-57.76 241.58 -60.11 246.53 -62.5 251.51 C-64.17 255.06 -65.58 258.55 -66.69 262.31 C-68 266 -68 266 -70 267.09 C-70.66 267.39 -71.32 267.69 -72 268 C-73.68 270.94 -74.01 272.8 -73.89 276.2 C-74.01 280.42 -75.07 283.79 -76.56 287.69 C-77.12 289.19 -77.67 290.7 -78.23 292.21 C-78.66 293.38 -78.66 293.38 -79.11 294.58 C-80.3 297.83 -81.44 301.1 -82.57 304.37 C-83.74 307.74 -84.93 311.11 -86.11 314.48 C-86.7 316.15 -87.28 317.81 -87.86 319.48 C-91.37 329.52 -95.3 339.02 -100.21 348.45 C-102.13 352.25 -103.7 356.07 -105.11 360.08 C-106.1 362.21 -107.32 363.39 -109 365 C-109.71 367.1 -109.71 367.1 -110 369 C-110.66 369 -111.32 369 -112 369 C-112.27 370.13 -112.54 371.27 -112.81 372.44 C-113.2 373.61 -113.6 374.79 -114 376 C-114.99 376.33 -115.98 376.66 -117 377 C-117.1 377.68 -117.2 378.36 -117.3 379.05 C-118.15 382.64 -119.6 385.82 -121.19 389.12 C-121.5 389.78 -121.81 390.43 -122.12 391.11 C-124.87 396.85 -127.86 402.46 -131 408 C-132.32 408 -133.64 408 -135 408 C-135 407.01 -135 406.02 -135 405 C-135.66 404.67 -136.32 404.34 -137 404 C-136.58 403.54 -136.15 403.07 -135.71 402.59 C-127.73 393.18 -123.74 381.61 -120 370 C-119.34 369.01 -118.68 368.02 -118 367 C-117.51 365.18 -117.08 363.34 -116.69 361.5 C-115.42 356.19 -113.6 351.54 -111.24 346.63 C-110.1 344.22 -109.13 341.81 -108.19 339.31 C-105.03 331.29 -100.9 323.68 -96.98 316.01 C-91.98 306.19 -87.35 296.27 -82.95 286.18 C-82.05 284.12 -81.14 282.06 -80.22 280.01 C-73.73 265.41 -67.84 250.55 -62.32 235.56 C-61.49 233.31 -60.63 231.07 -59.74 228.85 C-57.54 223.23 -56.67 219.02 -57 213 C-56.67 212.67 -56.34 212.34 -56 212 C-55.88 211.03 -55.75 210.06 -55.62 209.06 C-55.24 206.12 -54.58 203.41 -53.71 200.57 C-53.44 199.69 -53.17 198.81 -52.89 197.91 C-52.6 196.95 -52.3 195.99 -52 195 C-46.68 177.44 -46.68 177.44 -41.81 159.75 C-39.74 151.8 -37.39 143.76 -34.24 136.17 C-31.94 130.54 -31.12 125.01 -30.31 119 C-27.1 97.34 -20.98 76.24 -15.08 55.19 C-11.89 43.76 -8.95 32.27 -6.06 20.76 C-4.28 13.75 -2.43 6.82 0 0 Z \",fill:\"#290E3D\",transform:\"translate(470,239)\"})),_path154||(_path154=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91 3.07 1.09 5.8 1 9 C1.99 8.67 2.98 8.34 4 8 C6.04 11.06 6.42 12.45 6.81 16 C6.92 16.87 7.03 17.73 7.14 18.62 C7 21 7 21 5.7 22.8 C3.17 24.58 1.02 24.19 -2 24 C-2.66 24 -3.32 24 -4 24 C-4.1 24.62 -4.21 25.24 -4.31 25.88 C-5 28 -5 28 -8 30 C-9.01 32.18 -9.01 32.18 -9.69 34.62 C-10.06 35.85 -10.06 35.85 -10.45 37.1 C-10.72 38.04 -10.72 38.04 -11 39 C-11.66 39 -12.32 39 -13 39 C-13.29 39.57 -13.57 40.14 -13.87 40.73 C-15.58 44.16 -17.29 47.58 -19 51 C-17.02 50.01 -17.02 50.01 -15 49 C-15 49.66 -15 50.32 -15 51 C-13.02 50.01 -13.02 50.01 -11 49 C-11 49.66 -11 50.32 -11 51 C-10.24 50.22 -9.47 49.43 -8.69 48.62 C-6 46 -6 46 -3 44 C-2.45 53.15 -7.91 59.73 -13.7 66.3 C-24.11 77.7 -24.11 77.7 -28 79 C-28.33 79.99 -28.66 80.98 -29 82 C-30.32 82 -31.64 82 -33 82 C-33.33 82.99 -33.66 83.98 -34 85 C-36.77 86.54 -36.77 86.54 -40.25 88.06 C-41.39 88.57 -42.53 89.08 -43.7 89.6 C-44.79 90.06 -45.88 90.52 -47 91 C-48.33 91.57 -48.33 91.57 -49.7 92.16 C-52 93 -52 93 -55.62 93.44 C-58.94 93.73 -58.94 93.73 -60.94 95.44 C-62.19 96.96 -62.19 96.96 -62 99 C-62.61 99.23 -63.21 99.46 -63.84 99.7 C-66.57 100.76 -69.29 101.87 -72 103 C-72.86 103.35 -73.72 103.7 -74.61 104.06 C-81.41 107.11 -85.35 111.27 -90 117 C-93.52 120.69 -97.27 124.03 -101.13 127.35 C-102.06 128.17 -102.06 128.17 -103 129 C-103.53 129.46 -104.07 129.92 -104.62 130.4 C-106.46 132.35 -106.46 132.35 -108 137 C-124.5 137 -141 137 -158 137 C-162.75 115.61 -162.75 115.61 -156.2 105.11 C-154.54 102.66 -152.89 100.28 -151 98 C-150.67 98 -150.34 98 -150 98 C-150.03 99.54 -150.03 99.54 -150.07 101.11 C-150.09 102.47 -150.11 103.83 -150.12 105.19 C-150.14 105.86 -150.16 106.53 -150.18 107.23 C-150.22 111.29 -149.8 114.35 -148 118 C-147.34 118 -146.68 118 -146 118 C-145.34 121.63 -144.68 125.26 -144 129 C-141.69 128.67 -139.38 128.34 -137 128 C-137.33 127.01 -137.66 126.02 -138 125 C-137.3 124.8 -136.6 124.59 -135.88 124.38 C-134.97 124.11 -134.06 123.84 -133.12 123.56 C-132.22 123.3 -131.32 123.03 -130.38 122.75 C-128.02 122.07 -128.02 122.07 -126 121 C-125.67 121.66 -125.34 122.32 -125 123 C-124.38 121.36 -124.38 121.36 -123.75 119.69 C-122.33 116.41 -121.14 114.83 -118 113 C-117.44 112.65 -116.87 112.3 -116.29 111.94 C-111.45 109 -111.45 109 -108 109 C-107.77 110.95 -107.54 112.91 -107.32 114.86 C-107.01 116.96 -106.55 118.95 -106 121 C-99.45 116.73 -93.07 112.37 -86.94 107.52 C-82.78 104.26 -78.61 101.82 -73.81 99.62 C-70.45 97.97 -69.1 97.14 -66.81 94.06 C-65.58 89.4 -66.15 86.47 -68.55 82.32 C-69.03 81.55 -69.51 80.79 -70 80 C-68.9 79.79 -67.8 79.58 -66.67 79.37 C-54.65 76.94 -45.01 73.49 -37.27 63.43 C-35.51 61.45 -33.46 60.89 -31 60 C-30.32 58.67 -29.66 57.34 -29 56 C-27.64 54.23 -26.27 52.49 -24.88 50.75 C-18.94 42.95 -13.19 33.64 -11 24 C-12.65 24.99 -14.3 25.98 -16 27 C-15.58 25.52 -15.14 24.04 -14.69 22.56 C-14.44 21.74 -14.2 20.92 -13.95 20.07 C-13.64 19.38 -13.32 18.7 -13 18 C-12.01 17.67 -11.02 17.34 -10 17 C-9.81 15.95 -9.81 15.95 -9.62 14.88 C-8.95 11.79 -8.2 8.93 -7 6 C-6.01 5.67 -5.02 5.34 -4 5 C-2.61 3.38 -1.27 1.71 0 0 Z \",fill:\"#311540\",transform:\"translate(441,1143)\"})),_path155||(_path155=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C1.97 1.94 2.94 1.88 3.94 1.81 C8.62 1.78 12.67 3.35 17 5 C17.99 9.04 18.04 12.68 17.88 16.83 C17.83 18.12 17.78 19.42 17.73 20.75 C17.68 22.1 17.62 23.46 17.56 24.81 C17.51 26.19 17.46 27.56 17.4 28.94 C17.27 32.29 17.14 35.65 17 39 C16.09 39.2 16.09 39.2 15.17 39.41 C14.36 39.58 13.56 39.76 12.74 39.95 C11.95 40.12 11.16 40.3 10.34 40.48 C2.74 42.07 2.74 42.07 -3 47 C-4.78 50.56 -3.95 55.03 -3.79 58.97 C-3.67 64.74 -4.84 67.73 -8.77 71.85 C-14.55 76.87 -20.52 81.63 -26.57 86.31 C-29.55 88.63 -32.43 91.06 -35.31 93.5 C-39.06 96.54 -42.2 97.86 -46.8 99.11 C-50.38 100.56 -52.76 103.23 -55.54 105.86 C-60.3 110 -66.38 114.59 -72.78 115.31 C-73.51 115.21 -74.25 115.11 -75 115 C-75.41 114.34 -75.83 113.68 -76.25 113 C-77.79 110.77 -77.79 110.77 -80.08 110.84 C-81.67 110.9 -83.26 111.01 -84.84 111.15 C-87 111 -87 111 -88.78 109.5 C-89.18 109.01 -89.59 108.51 -90 108 C-85.83 103.52 -81.18 100.09 -76.19 96.56 C-74.64 95.46 -73.09 94.36 -71.54 93.25 C-70.79 92.72 -70.03 92.19 -69.25 91.64 C-67.74 90.54 -66.26 89.4 -64.82 88.22 C-62.92 86.68 -61.12 85.23 -59 84 C-56.27 84.31 -56.27 84.31 -54 85 C-48.32 82.04 -43.84 77.01 -39.8 72.14 C-37.86 69.84 -35.81 67.68 -33.75 65.5 C-21.15 51.53 -8.88 32.89 -3 15 C-3.5 13.51 -3.5 13.51 -4 12 C-3.22 9.08 -3.22 9.08 -2.06 5.81 C-1.68 4.73 -1.3 3.64 -0.91 2.52 C-0.61 1.69 -0.31 0.86 0 0 Z \",fill:\"#624268\",transform:\"translate(843,470)\"})),_path156||(_path156=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4.23 19.39 4.4 36.73 2 54 C1.67 54.33 1.34 54.66 1 55 C0.71 57.64 0.55 60.29 0.38 62.95 C-0.58 70.68 -3.61 78.19 -6.04 85.58 C-6.47 86.89 -6.89 88.2 -7.31 89.51 C-11.65 103.11 -16.69 117.61 -28 127 C-31.78 128.49 -33.55 128.59 -37.29 127.07 C-38.85 126.33 -40.38 125.55 -41.89 124.71 C-43.97 123.79 -43.97 123.79 -46.02 124.57 C-48.53 126.38 -50.13 128.42 -52 130.88 C-54.5 134.15 -57.03 137.15 -60 140 C-59.39 137.2 -58.54 134.9 -57.19 132.38 C-52.98 124.09 -50.17 115.58 -47.75 106.63 C-47.22 104.73 -46.62 102.86 -46 101 C-45.01 100.5 -45.01 100.5 -44 100 C-44 102.31 -44 104.62 -44 107 C-43.34 104.69 -42.68 102.38 -42 100 C-40.35 100.33 -38.7 100.66 -37 101 C-32.13 95.14 -31.19 87.62 -30.12 80.25 C-29.3 74.86 -27.71 69.98 -25.89 64.85 C-24.09 59.63 -23.07 54.45 -22.17 49.02 C-20.9 41.75 -18.51 34.92 -16 28 C-15.34 28 -14.68 28 -14 28 C-13.92 27.26 -13.83 26.51 -13.75 25.75 C-13 23 -13 23 -11.25 21.31 C-6.96 16.91 -4.39 10.91 -2.81 5 C-2 2 -2 2 0 0 Z \",fill:\"#401E54\",transform:\"translate(476,473)\"})),_path157||(_path157=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.56 1.62 1.56 1.62 3 4 C2.88 7.12 2.88 7.12 2 10 C1.01 10.66 0.02 11.32 -1 12 C-1.5 14.5 -1.5 14.5 -1 17 C-0.01 17.66 0.98 18.32 2 19 C2.17 21.84 2.19 24.48 2.06 27.31 C1.86 32.44 1.78 36.25 4 41 C6.02 49.95 1.53 57.76 -2.88 65.26 C-4.84 68.31 -7.21 70.68 -9.92 73.06 C-13.31 76.22 -16 79.93 -18.82 83.58 C-21.15 86.17 -22.8 87.63 -26 89 C-28.75 89.13 -31.16 89.11 -33.88 88.88 C-34.56 88.84 -35.24 88.8 -35.94 88.77 C-43.51 88.22 -48.81 85.76 -53.88 80.12 C-54.39 79.52 -54.91 78.93 -55.44 78.31 C-55.98 77.71 -56.52 77.1 -57.08 76.47 C-58.39 74.99 -59.7 73.5 -61 72 C-56.92 64.97 -51.83 59.59 -45.94 54.05 C-42.33 50.59 -40.12 47.59 -38 43 C-36.43 41.39 -36.43 41.39 -34.88 40.25 C-31.98 38.31 -31.98 38.31 -31 36 C-30.34 36 -29.68 36 -29 36 C-28.77 35.44 -28.54 34.88 -28.31 34.31 C-26.64 31.36 -24.55 29.44 -22.1 27.11 C-21.11 26.17 -20.13 25.22 -19.15 24.27 C-17.61 22.79 -16.07 21.32 -14.52 19.86 C-8.34 14.03 -4.04 9.43 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#775878\",transform:\"translate(674,710)\"})),_path158||(_path158=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93 0.28 0.93 0.28 1.88 0.56 C4.04 1.24 4.04 1.24 6 0 C19.77 0.08 19.77 0.08 25 4 C25.88 6.19 25.88 6.19 26 8 C26.66 8 27.32 8 28 8 C28.33 7.01 28.66 6.02 29 5 C31.15 18.41 27.69 29.99 23.64 42.66 C22.91 45.34 22.49 48 22.06 50.75 C21.26 55.5 20.11 58.33 17 62 C13.59 64.28 12.85 64.11 8.94 63.81 C2.62 63.65 -1.69 65.77 -7 69 C-7 69.66 -7 70.32 -7 71 C-8.42 71.22 -8.42 71.22 -9.88 71.44 C-12.89 71.83 -12.89 71.83 -15 73 C-19.92 73.53 -23.77 73.75 -28.06 71.12 C-30.46 68.5 -30.94 67.49 -31.38 63.94 C-30.88 58.72 -28.68 55.4 -26 51 C-25.48 49.93 -25.48 49.93 -24.95 48.84 C-24 47 -24 47 -22.19 45.31 C-15.94 38.71 -13.81 30.72 -12 22 C-11.01 22.33 -10.02 22.66 -9 23 C-8.91 22.02 -8.91 22.02 -8.81 21.02 C-7.71 12.82 -4.49 6.87 0 0 Z \",fill:\"#462860\",transform:\"translate(329,1050)\"})),_path159||(_path159=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89 0.26 1.77 0.53 2.69 0.8 C5 1.69 5 1.69 7 3.69 C9.73 15.09 6.28 27.49 4.04 38.75 C3.56 41.21 3.09 43.67 2.62 46.12 C2.31 47.7 2 49.27 1.69 50.84 C1.55 51.57 1.41 52.3 1.27 53.05 C-0.09 59.82 -0.09 59.82 -2 62.69 C-2.95 63.22 -3.9 63.76 -4.88 64.31 C-9.25 67.63 -10.34 71.58 -12 76.69 C-12.66 76.69 -13.32 76.69 -14 76.69 C-14 79 -14 81.31 -14 83.69 C-14.66 83.69 -15.32 83.69 -16 83.69 C-16.66 85.01 -17.32 86.33 -18 87.69 C-18.99 87.69 -19.98 87.69 -21 87.69 C-21 88.35 -21 89.01 -21 89.69 C-23.19 90.5 -23.19 90.5 -26 90.69 C-28.81 88.75 -28.81 88.75 -31 85.69 C-31.14 83.68 -31.14 83.68 -31 81.56 C-31 80.28 -31 79 -31 77.69 C-33.3 75.79 -33.3 75.79 -36 74.69 C-38.17 71.43 -38.12 70.06 -38 66.28 C-38 61.76 -38.54 57.26 -38.98 52.76 C-39 49.69 -39 49.69 -37 46.69 C-36.74 44.74 -36.48 42.79 -36.29 40.83 C-35.86 37.66 -34.95 34.74 -34 31.69 C-33.34 31.69 -32.68 31.69 -32 31.69 C-31.87 31 -31.75 30.31 -31.62 29.6 C-30.93 26.38 -30.03 23.27 -29.06 20.12 C-28.72 19.01 -28.38 17.89 -28.04 16.75 C-27.19 14.24 -26.26 12.01 -25 9.69 C-23.35 9.69 -21.7 9.69 -20 9.69 C-19.67 8.7 -19.34 7.71 -19 6.69 C-16.36 6.36 -13.72 6.03 -11 5.69 C-10.67 4.7 -10.34 3.71 -10 2.69 C-9.34 2.69 -8.68 2.69 -8 2.69 C-7.67 1.7 -7.34 0.71 -7 -0.31 C-4.22 -1.7 -2.93 -0.9 0 0 Z \",fill:\"#482859\",transform:\"translate(504,231.3125)\"})),_path160||(_path160=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.69 0.61 5.36 1.17 8.06 1.71 C15.23 3.19 21.32 4.62 27.2 9.2 C31.38 11.92 36.04 13.55 40.69 15.3 C45.68 17.23 49.91 19.29 53.09 23.78 C53.97 26.65 53.7 27.97 52.72 30.84 C51.52 32.82 50.25 34.74 48.96 36.66 C47.66 38.93 47.09 40.93 46.47 43.46 C45 48.23 42.43 50.39 38.19 52.88 C32.83 54.97 28.02 53.47 22.84 51.46 C19.72 49.84 19.72 49.84 18.27 48.39 C16.57 46.69 14.86 45.66 12.78 44.46 C10.12 42.86 8.76 41.9 6.91 39.34 C4.49 36.58 3.02 36.04 -0.34 34.71 C-6.35 32.18 -9.95 28.47 -14.37 23.77 C-19.13 18.82 -24.77 14.89 -30.28 10.84 C-31.01 10.28 -31.74 9.71 -32.49 9.13 C-34.63 7.59 -36.81 6.73 -39.28 5.84 C-38.95 4.19 -38.62 2.54 -38.28 0.84 C-35.28 0.84 -35.28 0.84 -33.28 1.84 C-32.62 0.19 -31.96 -1.46 -31.28 -3.16 C-20.71 -5.03 -10.34 -2.34 0 0 Z \",fill:\"#4B2F63\",transform:\"translate(1079.28125,672.16015625)\"})),_path161||(_path161=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.94 0.9 2.88 1.79 2.82 2.72 C2.52 11.02 3.37 17.72 6.22 25.54 C7.66 29.52 8.26 32.77 8 37 C9.49 37.5 9.49 37.5 11 38 C11.33 32.72 11.66 27.44 12 22 C12.33 22.66 12.66 23.32 13 24 C13.72 23.92 14.44 23.83 15.19 23.75 C18 24 18 24 20.56 26.06 C21.37 26.7 22.17 27.34 23 28 C25.13 27.68 25.13 27.68 27 27 C27.29 27.59 27.58 28.18 27.88 28.79 C30.67 34.17 33.25 37.31 38 41 C39.38 43.31 39.38 43.31 40 45 C36.85 44.3 33.98 43.22 31 42 C30.01 41.67 29.02 41.34 28 41 C27.63 43.19 27.28 45.37 26.94 47.56 C26.74 48.78 26.54 50 26.34 51.25 C25.84 56.71 26.01 60.59 29.19 65.12 C30.08 66.55 30.08 66.55 31 68 C30.25 70.88 30.25 70.88 29 73 C21.17 74.17 21.17 74.17 17 73 C10.85 72.39 10.85 72.39 5.62 75.25 C2.62 78.26 2.62 78.26 1 82 C1.18 82.85 1.37 83.7 1.55 84.58 C2.12 88.91 1.42 92.51 0.56 96.75 C-0.55 101.84 -0.55 101.84 -1 107 C4.45 106.5 4.45 106.5 10 106 C10.33 104.68 10.66 103.36 11 102 C13.15 100.01 15.18 98.92 17.86 97.72 C21.24 95.87 23.09 94 25.56 91.06 C27.81 88.41 29.86 86.11 32.6 83.96 C35.06 81.95 36.31 80.3 37.88 77.56 C38.37 76.7 38.87 75.84 39.38 74.95 C42.29 69.65 45.17 64.34 48 59 C48.99 59.99 49.98 60.98 51 62 C47.43 73.52 43.23 84.14 35.73 93.7 C34.19 95.74 33.05 97.67 32 100 C32.99 100.33 33.98 100.66 35 101 C34.96 101.78 34.92 102.57 34.88 103.38 C35.01 107.29 35.71 110.82 36.56 114.63 C37 117 37 117 37 121 C36.01 121 35.02 121 34 121 C32.28 123.44 32.28 123.44 31 126 C28.5 124.69 28.5 124.69 26 123 C26 122.01 26 121.02 26 120 C25.34 120 24.68 120 24 120 C23.34 118.35 22.68 116.7 22 115 C18.44 115 17.72 115.89 15 118 C14.34 118 13.68 118 13 118 C12.34 120.31 11.68 122.62 11 125 C10.34 125 9.68 125 9 125 C8.88 126.28 8.75 127.56 8.62 128.88 C8.25 132.75 8.25 132.75 6 135 C2.7 134.67 1.38 134.38 -1 132 C-1.61 130.02 -2.15 128.02 -2.62 126 C-2.89 124.93 -3.15 123.86 -3.41 122.75 C-4 120 -4 120 -4 118 C-5.32 117.34 -6.64 116.68 -8 116 C-7.46 110.31 -6.86 104.65 -6 99 C-6.99 98.34 -7.98 97.68 -9 97 C-9.5 97.99 -9.5 97.99 -10 99 C-11.09 92.67 -11.03 88.64 -7.81 82.88 C-6.79 81.03 -6.79 81.03 -7.48 79.13 C-8.37 75.49 -7.62 72.34 -6 69 C-2.45 66.42 0.59 65.15 4.69 63.62 C8.67 61.67 9.97 59.91 12 56 C12.78 53.27 12.78 53.27 13 51 C11.68 50.67 10.36 50.34 9 50 C8.83 50.64 8.66 51.28 8.48 51.93 C8.24 52.76 8 53.59 7.75 54.44 C7.52 55.26 7.29 56.08 7.05 56.93 C6 59 6 59 4.08 59.91 C2 60 2 60 -1 58 C-0.73 57.34 -0.46 56.68 -0.19 56 C0.2 55.01 0.6 54.02 1 53 C1.58 51.89 2.15 50.77 2.75 49.62 C5.84 41.33 2.34 31.31 0.31 23.06 C-1.48 15.24 -0.85 7.9 0 0 Z \",fill:\"#593960\",transform:\"translate(859,324)\"})),_path162||(_path162=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.86 1.85 1.71 2.69 1.56 3.56 C0.99 7.04 0.49 10.51 0 14 C-0.66 14 -1.32 14 -2 14 C0.61 17.45 0.61 17.45 3.81 20.31 C5.56 22.8 4.87 24.88 4.4 27.75 C4.27 28.49 4.14 29.23 4 30 C2.77 37.19 2.77 37.19 5 44 C4.34 44 3.68 44 3 44 C2.95 44.68 2.9 45.36 2.85 46.05 C2.33 52.49 1.41 58.7 0 65 C0.99 65.5 0.99 65.5 2 66 C3.98 58.68 5.62 52.5 4 45 C4.66 45 5.32 45 6 45 C8.69 50.73 7.58 54.79 6 60.62 C5.77 61.52 5.53 62.41 5.29 63.33 C3.35 70.41 0.59 76.6 -3 83 C-4.23 85.43 -5.43 87.87 -6.62 90.31 C-8.34 93.77 -10.06 97.2 -12.06 100.5 C-16.61 108.31 -20.61 116.67 -20.8 125.82 C-21.04 128.48 -21.98 130.53 -23 133 C-24.27 138.34 -25.03 143.72 -25.44 149.19 C-25.91 155.19 -27.08 161.02 -28.28 166.91 C-30.25 177.44 -30.3 188.13 -30.61 198.8 C-30.64 199.97 -30.68 201.14 -30.72 202.35 C-30.75 203.41 -30.78 204.47 -30.81 205.57 C-31 208 -31 208 -32 209 C-31.99 212.04 -31.9 215.03 -31.75 218.06 C-31.68 219.42 -31.68 219.42 -31.61 220.8 C-31.2 227.76 -30.18 234.37 -28.75 241.18 C-27.98 245.08 -27.54 248.93 -27.12 252.88 C-26.26 259.56 -24.34 264.22 -21 270 C-20.15 271.74 -20.15 271.74 -19.28 273.52 C-15.32 281.62 -10.87 287.92 -4.52 294.32 C-1.1 297.96 1.71 301.18 2.5 306.19 C2 309 2 309 0.38 310.94 C-3.01 312.45 -4.47 312.16 -8 311 C-10.81 309.17 -13.39 307.1 -16 305 C-16.99 304.34 -17.98 303.68 -19 303 C-18.71 303.54 -18.42 304.07 -18.12 304.62 C-16.83 307.35 -15.91 310.13 -15 313 C-14.34 313 -13.68 313 -13 313 C-9 319.75 -9 319.75 -9 322 C-8.34 322.33 -7.68 322.66 -7 323 C-7.33 323.66 -7.66 324.32 -8 325 C-17.29 321.08 -24.02 310.77 -30 303 C-31.33 301.33 -32.66 299.66 -34 298 C-33.67 297.34 -33.34 296.68 -33 296 C-31.02 297.49 -31.02 297.49 -29 299 C-29.56 294.71 -31.07 292.04 -33.5 288.5 C-35.93 284.96 -37.44 282.29 -38 278 C-34 278 -34 278 -32.38 279.25 C-31 281 -31 281 -30.12 282.88 C-28.92 285.16 -27.42 286.67 -25.57 288.45 C-23.58 290.42 -21.69 292.48 -19.81 294.56 C-18.8 295.68 -18.8 295.68 -17.77 296.82 C-16 299 -16 299 -15.02 301.23 C-14.16 303.19 -14.16 303.19 -12.05 303.61 C-10.04 303.74 -8.02 303.87 -6 304 C-6.33 302.35 -6.66 300.7 -7 299 C-7.66 299 -8.32 299 -9 299 C-10.03 297.35 -11.03 295.68 -12 294 C-14.16 290.99 -16.37 288.66 -19.25 286.38 C-33.78 274.35 -36.66 256.81 -38.62 239.01 C-39.41 229.62 -38.68 220.53 -37.47 211.21 C-37.13 208.53 -37.01 206.17 -37.06 203.45 C-37 200.01 -36.4 197.3 -35.5 194.01 C-34.7 190.78 -34.43 187.5 -34.12 184.19 C-33.29 175.97 -32.15 167.8 -30.94 159.62 C-30.76 158.44 -30.59 157.26 -30.41 156.04 C-29.06 147.06 -29.06 147.06 -28 143 C-26.07 132.28 -26.07 132.28 -28 122 C-29.27 113.51 -26.37 105.83 -23.65 97.94 C-23.06 96.17 -22.54 94.38 -22.02 92.59 C-19.97 85.54 -17.17 81.16 -12 76 C-5.2 68.09 -2.35 56.27 -3 45.88 C-3.69 41.66 -5.98 39.94 -9 37 C-9.72 34.27 -9.86 31.84 -10 29 C-15.22 31.11 -17.23 33.26 -19.88 38.19 C-20.47 39.27 -21.07 40.36 -21.68 41.48 C-22.12 42.31 -22.55 43.14 -23 44 C-23.66 43.01 -24.32 42.02 -25 41 C-24.22 39.66 -23.42 38.33 -22.62 37 C-22.18 36.26 -21.74 35.51 -21.29 34.75 C-20.86 34.17 -20.44 33.6 -20 33 C-19.34 33 -18.68 33 -18 33 C-17.75 32.33 -17.5 31.66 -17.25 30.97 C-15.72 27.34 -13.92 23.91 -12.06 20.44 C-11.72 19.78 -11.37 19.12 -11.01 18.44 C-9.21 15.07 -7.34 12.03 -5 9 C-4.08 7.43 -3.18 5.85 -2.31 4.25 C-1.88 3.45 -1.44 2.65 -0.99 1.83 C-0.66 1.22 -0.34 0.62 0 0 Z \",fill:\"#301243\",transform:\"translate(469,668)\"})),_path163||(_path163=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.37 1.11 0.74 1.69 1.12 C0.99 1.54 0.28 1.95 -0.44 2.38 C-10.09 7.7 -10.09 7.7 -16.31 16.12 C-21.25 18.34 -25.86 19.81 -31.31 20.12 C-31.93 19.8 -32.56 19.47 -33.2 19.14 C-35.8 17.89 -37.58 17.99 -40.44 18.12 C-43.07 18.25 -43.07 18.25 -45.31 18.12 C-46.3 17.13 -46.3 17.13 -47.31 16.12 C-46.22 16.15 -45.13 16.17 -44 16.19 C-40.37 16.31 -40.37 16.31 -37.31 15.12 C-38.92 15.04 -40.52 14.99 -42.12 14.94 C-43.02 14.9 -43.91 14.87 -44.83 14.83 C-47.35 14.92 -47.35 14.92 -49.12 16.47 C-50.75 18.73 -50.53 20.41 -50.31 23.12 C-49.32 23.12 -48.33 23.12 -47.31 23.12 C-47.31 23.78 -47.31 24.45 -47.31 25.12 C-52.71 28.87 -56.8 29.37 -63.31 29.12 C-63.97 28.79 -64.63 28.47 -65.31 28.12 C-71.59 26.84 -71.59 26.84 -77.31 29.12 C-77.97 29.12 -78.63 29.12 -79.31 29.12 C-80.69 29.7 -82.04 30.34 -83.38 31 C-84.09 31.35 -84.8 31.7 -85.54 32.05 C-87.48 33.01 -87.48 33.01 -88.31 35.12 C-90.62 35.12 -92.93 35.12 -95.31 35.12 C-93.83 36.12 -93.83 36.12 -92.31 37.12 C-98.27 39.7 -103.93 40.83 -110.36 41.7 C-112.75 42.04 -114.99 42.48 -117.31 43.12 C-118.28 43.39 -119.25 43.66 -120.25 43.94 C-123.83 45.32 -125.72 46.26 -128.31 49.12 C-129.61 52.73 -130.52 56.38 -131.31 60.12 C-132.96 58.48 -134.61 56.83 -136.31 55.12 C-137.27 56.83 -137.27 56.83 -138.25 58.56 C-140.19 62 -140.19 62 -141.31 63.12 C-143.33 63.36 -145.35 63.54 -147.38 63.69 C-148.48 63.77 -149.58 63.86 -150.72 63.94 C-151.58 64 -152.43 64.06 -153.31 64.12 C-153.31 63.47 -153.31 62.8 -153.31 62.12 C-154.03 62.17 -154.76 62.21 -155.5 62.25 C-158.52 62.12 -160.58 61.37 -163.31 60.12 C-164.96 66.26 -166.04 72.34 -166.94 78.62 C-167.14 80 -167.14 80 -167.34 81.41 C-167.67 83.65 -167.99 85.88 -168.31 88.12 C-168.97 88.12 -169.63 88.12 -170.31 88.12 C-171.42 73.58 -168.61 57.65 -162.41 44.46 C-160.99 41.44 -160.19 38.33 -159.31 35.12 C-156.85 28.39 -156.85 28.39 -154.31 27.12 C-154 25.16 -154 25.16 -153.94 22.88 C-153.57 18.53 -152.46 16.28 -149.31 13.12 C-145.94 13.67 -144.23 14.18 -141.31 16.12 C-137.68 16.22 -134.09 16.06 -130.46 15.9 C-129.42 15.98 -128.38 16.05 -127.31 16.12 C-125.31 19.12 -125.31 19.12 -125.32 21.45 C-125.31 24.72 -124.44 26.89 -123.12 29.88 C-122.72 30.84 -122.31 31.8 -121.89 32.8 C-120.5 35.32 -120.5 35.32 -117.82 36.08 C-115.06 36.37 -115.06 36.37 -112.31 34.12 C-109.83 33.93 -109.83 33.93 -107.12 34 C-106.22 34.02 -105.32 34.04 -104.39 34.05 C-103.71 34.08 -103.02 34.1 -102.31 34.12 C-102.31 33.79 -102.31 33.47 -102.31 33.12 C-101.4 33.17 -100.5 33.21 -99.56 33.25 C-96.29 33.12 -95.08 32.68 -92.31 31.12 C-91.4 30.86 -90.5 30.59 -89.56 30.31 C-85.4 28.79 -81.67 27.07 -78.31 24.12 C-76.83 20.53 -76.31 17.99 -76.31 14.12 C-75.65 14.12 -74.99 14.12 -74.31 14.12 C-74.31 13.47 -74.31 12.8 -74.31 12.12 C-75.3 11.79 -76.29 11.47 -77.31 11.12 C-76.44 11.04 -76.44 11.04 -75.54 10.96 C-72.88 10.7 -70.22 10.45 -67.56 10.19 C-66.64 10.1 -65.72 10.01 -64.77 9.92 C-63.44 9.79 -63.44 9.79 -62.08 9.66 C-61.26 9.58 -60.44 9.5 -59.6 9.42 C-57.35 9.18 -57.35 9.18 -55.37 8.61 C-52.79 8 -50.33 7.89 -47.68 7.77 C-32.81 6.94 -18.32 5.78 -4.45 -0.09 C-2.31 -0.88 -2.31 -0.88 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(749.3125,793.875)\"})),_path164||(_path164=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.83 3.49 11.21 10.75 14.38 18.31 C14.73 19.12 15.08 19.93 15.45 20.77 C18 26.68 18 26.68 18 29 C18.66 29 19.32 29 20 29 C21.51 31.12 21.51 31.12 23.12 33.88 C23.66 34.78 24.2 35.68 24.76 36.62 C26 39 26 39 26 41 C26.66 41 27.32 41 28 41 C29.05 42.43 29.05 42.43 30.17 44.44 C30.59 45.16 31 45.89 31.43 46.64 C31.86 47.42 32.3 48.2 32.75 49 C35.83 54.38 38.91 59.53 42.79 64.39 C44 66 44 66 45.81 69.31 C48.79 74.74 52.97 79.34 57 84 C57.53 84.62 58.06 85.24 58.61 85.88 C66.75 94.62 77.99 103.61 90 105 C90 105.66 90 106.32 90 107 C83.77 111.98 76.82 112 69.14 111.3 C62.68 110.38 56.84 107.8 51 105 C50.24 104.64 49.48 104.27 48.69 103.9 C37.17 98.24 26.92 92.47 22 80 C20.96 78.43 19.87 76.89 18.75 75.38 C13.58 68.12 8.99 61.02 7.42 52.15 C7 49.98 6.37 48.02 5.62 45.94 C3.48 39.75 2.02 33.36 0.49 26.99 C0.16 25.64 -0.19 24.3 -0.56 22.96 C-1.72 18.65 -2.27 14.75 -2.25 10.25 C-2.26 9.16 -2.26 8.07 -2.27 6.95 C-2.01 4.09 -1.48 2.43 0 0 Z \",fill:\"#220C37\",transform:\"translate(893,531)\"})),_path165||(_path165=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.07 0.5 12.73 1.79 17.92 6.88 C23.01 12.95 27.09 20.22 26.94 28.31 C26 31 26 31 24.44 33.69 C22.1 39.07 22.32 45.01 23.62 50.7 C23.81 51.84 23.81 51.84 24 53 C22.06 55.68 20.65 56.79 17.5 57.81 C15.04 58 13.33 57.78 11 57 C11 57.66 11 58.32 11 59 C9.05 59.15 9.05 59.15 7.06 59.31 C2.86 59.77 -0.79 60.81 -4.75 62.26 C-7.02 63.01 -9.21 63.42 -11.56 63.81 C-16.71 64.87 -20.02 67.72 -24 71 C-27.94 73.79 -31.12 75 -36 75 C-38.94 73.19 -38.94 73.19 -41 70 C-41.63 65.84 -41.45 61.75 -40.41 57.67 C-39.81 55.16 -39.5 53.54 -40 51 C-42.37 48.42 -44.93 46.33 -47.66 44.14 C-49.92 42.07 -50.82 41.14 -51.38 38.19 C-51 35 -51 35 -49.25 32.69 C-42.16 27.37 -35.55 27.73 -27.12 28.81 C-26.37 28.9 -25.61 28.98 -24.83 29.06 C-19.26 29.74 -19.26 29.74 -17 32 C-16.75 34.5 -16.75 34.5 -17 37 C-17.66 37.66 -18.32 38.32 -19 39 C-18.91 41.54 -18.91 41.54 -18 44 C-14.41 46.39 -11.25 47.09 -7 47 C-4.44 46.25 -2.38 45.24 0 44 C0.52 30.9 0.52 30.9 -5.31 19.62 C-7.97 16.82 -10.6 14.86 -14 13 C-14 12.34 -14 11.68 -14 11 C-14.66 11.17 -15.32 11.33 -16 11.5 C-19.73 12.12 -23.22 12.06 -27 12 C-27.75 9.75 -27.75 9.75 -28 7 C-26.75 4.69 -26.75 4.69 -24 3 C-21.21 2.8 -18.49 2.88 -15.69 2.99 C-12.47 3 -9.99 2.14 -7 1 C-4.55 0.63 -4.55 0.63 -2 1 C-0.19 3.05 -0.19 3.05 1.44 5.88 C2.03 6.88 2.62 7.88 3.23 8.92 C3.82 9.94 4.4 10.95 5 12 C6.06 13.73 7.12 15.46 8.19 17.19 C9.13 18.79 10.07 20.39 11 22 C11.62 23.03 11.62 23.03 12.26 24.09 C16.31 31.27 15.59 37.28 13.5 45.06 C13.01 46.71 12.52 48.36 12 50 C18.64 44.57 18.36 33.36 19.3 25.47 C19.62 20.34 18.49 16.47 15.83 12.07 C12.95 8.81 9.44 7.18 5.52 5.39 C2.84 3.91 1.63 2.56 0 0 Z \",fill:\"#715376\",transform:\"translate(611,406)\"})),_path166||(_path166=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2 2.98 2 4 2 C4 2.99 4 3.98 4 5 C4.95 5.06 5.9 5.12 6.88 5.19 C7.91 5.46 8.94 5.72 10 6 C10.4 7.18 10.4 7.18 10.81 8.38 C11.4 9.67 11.4 9.67 12 11 C13.95 11.77 13.95 11.77 16.25 12.31 C20.89 13.68 23.06 15.47 25.71 19.5 C29.87 27.58 31.82 35.05 30 44 C29.01 44.33 28.02 44.66 27 45 C26.01 45.99 26.01 45.99 25 47 C20.72 49.53 17.92 50.15 13 50 C12.67 49.3 12.34 48.6 12 47.88 C7.91 39.7 2.83 33.17 -5.5 29 C-11.26 27.35 -15.84 26.88 -21.25 29.69 C-24.03 31.96 -24.03 31.96 -26.5 34.5 C-29 37 -29 37 -32.12 39.06 C-35.04 40.8 -35.04 40.8 -36.69 43.25 C-37.12 43.83 -37.55 44.4 -38 45 C-38.99 45 -39.98 45 -41 45 C-41 45.66 -41 46.32 -41 47 C-41.58 46.89 -42.16 46.79 -42.76 46.68 C-48.21 45.84 -51.2 45.94 -56 49 C-57.37 49.85 -58.75 50.71 -60.12 51.56 C-60.77 51.98 -61.41 52.39 -62.07 52.82 C-64 54 -65.96 55.02 -68 56 C-68 57.32 -68 58.64 -68 60 C-71.63 61.65 -75.26 63.3 -79 65 C-80.98 63.51 -80.98 63.51 -83 62 C-85.31 61.27 -87.65 60.59 -90 60 C-90.5 60.99 -90.5 60.99 -91 62 C-91.78 61.98 -92.57 61.96 -93.38 61.94 C-95.98 61.81 -95.98 61.81 -98 63 C-98.99 62.67 -99.98 62.34 -101 62 C-101 62.66 -101 63.32 -101 64 C-101.64 64.1 -102.28 64.21 -102.94 64.31 C-103.62 64.54 -104.3 64.77 -105 65 C-105.5 66.49 -105.5 66.49 -106 68 C-107.32 67.67 -108.64 67.34 -110 67 C-110.5 68.49 -110.5 68.49 -111 70 C-112.68 70.67 -114.36 71.34 -116.05 71.99 C-118.32 73.17 -119.61 74.54 -121.31 76.44 C-125.76 81.18 -131.34 83.35 -137.68 84.48 C-140.18 84.82 -140.18 84.82 -142 87 C-146.7 88.06 -151.34 88.35 -156 87 C-153.43 83.87 -150.81 83.12 -147 81.94 C-140.73 79.79 -134.98 77.11 -129.12 74 C-128.34 73.58 -127.56 73.17 -126.75 72.74 C-123.06 70.75 -119.49 68.69 -115.98 66.39 C-111.91 63.82 -107.73 62.24 -103.19 60.69 C-74.79 50.87 -74.79 50.87 -50.62 33.62 C-39.35 22.35 -25.05 13.87 -11.69 5.31 C-10.87 4.78 -10.05 4.25 -9.21 3.71 C-8.06 2.98 -8.06 2.98 -6.89 2.24 C-6.21 1.81 -5.53 1.37 -4.83 0.93 C-3 0 -3 0 0 0 Z \",fill:\"#080C30\",transform:\"translate(919,703)\"})),_path167||(_path167=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 3.41 4.77 6.35 5.1 11.17 C4.87 17.57 3.38 23.78 2 30 C1.86 30.67 1.72 31.34 1.57 32.03 C-1.2 45.16 -4.9 60.49 -16 69 C-16.74 69.64 -17.49 70.28 -18.25 70.94 C-21.44 73.33 -24.78 75.03 -28.38 76.69 C-29.01 76.99 -29.64 77.3 -30.3 77.62 C-34.56 79.61 -38.31 80.55 -43 81 C-43 81.66 -43 82.32 -43 83 C-44.46 84.29 -44.46 84.29 -46.38 85.62 C-47 86.07 -47.63 86.52 -48.27 86.98 C-50 88 -50 88 -52 88 C-52.35 92.23 -51.56 93.73 -49 97 C-48.62 98.66 -48.28 100.32 -48 102 C-56.21 108.53 -56.21 108.53 -59.94 110.75 C-62.29 111.98 -62.29 111.98 -64 115 C-67.2 115.26 -67.2 115.26 -71.12 115.12 C-72.49 115.1 -73.85 115.08 -75.22 115.06 C-76.47 115.04 -77.71 115.02 -79 115 C-82.02 115 -84.03 115.23 -87 116 C-87.72 116.96 -88.43 117.92 -89.17 118.91 C-92.31 122.89 -95.87 123.45 -100.69 124.31 C-105.99 125.21 -105.99 125.21 -111 127 C-113.37 127.07 -115.75 127.08 -118.12 127.06 C-119.41 127.05 -120.69 127.04 -122.01 127.04 C-123 127.02 -123.98 127.01 -125 127 C-124.04 121.31 -121.82 117.64 -117.5 113.75 C-113.54 110.98 -110.67 109.77 -105.81 109.44 C-102.6 109.45 -102.6 109.45 -100 108 C-100.07 106.06 -100.07 106.06 -100.38 103.81 C-100.47 103.01 -100.57 102.2 -100.68 101.37 C-101.06 98.57 -101.5 95.78 -102 93 C-104.73 93.37 -105.81 93.79 -107.7 95.85 C-108.21 96.58 -108.72 97.31 -109.25 98.06 C-109.77 98.8 -110.29 99.53 -110.83 100.29 C-111.21 100.85 -111.6 101.42 -112 102 C-113.65 101.67 -115.3 101.34 -117 101 C-117.5 96.55 -117.5 96.55 -118 92 C-119.16 91.92 -120.31 91.84 -121.5 91.75 C-122.15 91.7 -122.8 91.66 -123.47 91.61 C-130.53 92.7 -136.45 97.54 -142 101.75 C-142.68 102.26 -143.36 102.76 -144.06 103.29 C-145.71 104.52 -147.36 105.76 -149 107 C-149.66 106.67 -150.32 106.34 -151 106 C-150.34 105.01 -149.68 104.02 -149 103 C-149.66 102.67 -150.32 102.34 -151 102 C-148.55 99.48 -146.17 97.13 -143.38 95 C-140.88 93.17 -140.88 93.17 -139.81 90.56 C-136.92 86.47 -132.5 84.98 -128 83 C-128 82.67 -128 82.34 -128 82 C-126.38 81.81 -124.75 81.62 -123.12 81.44 C-121.77 81.28 -121.77 81.28 -120.38 81.12 C-118 81 -118 81 -116 82 C-116 82.66 -116 83.32 -116 84 C-109.03 87.53 -101.95 90.76 -94 91 C-93.34 90.34 -92.68 89.68 -92 89 C-92.99 88.34 -93.98 87.68 -95 87 C-94.31 87.01 -93.62 87.02 -92.91 87.03 C-89.75 87.07 -86.59 87.1 -83.44 87.12 C-81.81 87.15 -81.81 87.15 -80.15 87.18 C-74.35 87.21 -69.53 86.91 -64 85 C-61.65 84.43 -59.3 83.89 -56.94 83.38 C-55.77 83.11 -54.6 82.85 -53.4 82.59 C-50.19 82.03 -47.25 81.89 -44 82 C-44 81.34 -44 80.68 -44 80 C-44.66 79.67 -45.32 79.34 -46 79 C-45.25 78.78 -44.5 78.56 -43.73 78.34 C-30.14 74.13 -22.93 68.89 -15 57 C-14.35 56.05 -13.7 55.11 -13.02 54.13 C-4.26 40.99 0.46 24.24 -2.5 8.31 C-2.66 7.55 -2.83 6.79 -3 6 C-3 4.68 -3 3.36 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z M-2 26 C-1 29 -1 29 -1 29 Z \",fill:\"#38144A\",transform:\"translate(281,1012)\"})),_path168||(_path168=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.29 0.64 0.58 1.28 0.88 1.94 C1.83 4.15 1.83 4.15 4 5 C4.71 7.27 4.71 7.27 5.38 10.25 C7.43 18.98 10.02 27.49 13.21 35.88 C14.01 38.03 14.76 40.2 15.51 42.38 C18.75 51.72 22.5 60.23 27.53 68.74 C30.98 74.59 34.03 80.67 37.11 86.73 C39.14 90.68 41.2 94.41 43.83 98 C46 101 46 101 46 103 C46.58 103.21 47.15 103.41 47.75 103.62 C50.2 105.13 51.31 106.69 52.81 109.11 C54.24 111.39 55.81 113.56 57.38 115.75 C59.64 118.97 61.77 122.22 63.75 125.62 C67.33 131.72 71.39 137.47 75.41 143.27 C81.05 151.37 85.76 158.9 88.99 168.24 C89.91 170.76 90.97 173.14 92.12 175.56 C96.55 185.37 96.57 196.24 97.21 206.81 C97.32 208.47 97.32 208.47 97.44 210.18 C97.5 211.18 97.56 212.17 97.62 213.2 C97.87 216 97.87 216 99.03 218.37 C100.33 221.88 100.2 225.15 100.08 228.83 C100.06 229.58 100.05 230.33 100.03 231.1 C99.99 232.68 99.94 234.26 99.89 235.84 C99.81 238.23 99.76 240.62 99.72 243.01 C99.52 250.78 99.1 257.75 96 265 C95.34 265 94.68 265 94 265 C93.78 265.97 93.56 266.94 93.34 267.94 C89.38 284.91 84.01 306.49 69 317 C66.11 318.45 64.23 318.3 61 318 C58.95 317.08 57.01 316.03 55.04 314.96 C52.03 313.54 49.29 313.27 46 313 C46 312.01 46 311.02 46 310 C45.55 305.95 44.1 303.21 41.94 299.84 C37.38 290.87 39.94 278.66 41.86 269.34 C44.03 257.75 43.77 245.76 44 234 C44.33 234 44.66 234 45 234 C50.05 264.59 50.05 264.59 45.96 274.54 C44.77 277.59 44.8 280.05 44.88 283.31 C44.89 284.38 44.91 285.45 44.93 286.55 C44.95 287.36 44.98 288.17 45 289 C45.66 289 46.32 289 47 289 C47 289.66 47 290.32 47 291 C46.34 291 45.68 291 45 291 C45.33 291.66 45.66 292.32 46 293 C46.66 293 47.32 293 48 293 C49.67 294.67 51.33 296.33 53 298 C54.98 299.36 56.98 300.7 59 302 C60.27 303.11 60.27 303.11 61.56 304.25 C63.86 306.11 63.86 306.11 66.44 306.69 C71.71 305.27 74.88 299.41 77.6 294.93 C84.28 283.07 87.73 271.38 90 258 C90.19 256.86 90.39 255.73 90.59 254.56 C91.51 246.63 91.63 238.61 91.9 230.64 C91.98 228.57 92.07 226.5 92.17 224.43 C92.54 211.85 89.37 199.04 86 187 C85.81 186.27 85.62 185.54 85.43 184.79 C83.72 178.92 80.82 173.78 77.91 168.44 C73.91 161.07 71.72 153.98 69.75 145.84 C68.35 140.54 66.32 136.37 63 132 C62.88 131.36 62.75 130.72 62.62 130.06 C61.86 127.54 60.49 126.44 58.59 124.7 C55.68 121.58 53.48 117.89 51.16 114.33 C49.14 111.76 49.14 111.76 45.93 111.05 C42.81 110.72 42.81 110.72 40 113 C39.77 112.22 39.55 111.43 39.31 110.62 C38.25 107.7 37.1 105.13 35.69 102.38 C33.84 98.76 32.2 95.14 30.69 91.38 C29.08 87.42 27.33 83.61 25.36 79.83 C13.34 56.67 -0.97 26.71 0 0 Z \",fill:\"#462453\",transform:\"translate(569,909)\"})),_path169||(_path169=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.85 3.87 5.71 8.38 7.69 13.38 C8.03 14.22 8.36 15.07 8.71 15.95 C13.29 27.87 16.58 40.23 20.02 52.51 C21.27 56.98 22.57 61.43 23.88 65.88 C24.07 66.53 24.26 67.19 24.46 67.88 C25.48 71.35 26.6 74.77 27.81 78.19 C28.94 81.8 29.71 84.28 29 88 C27.06 89.62 27.06 89.62 24 91 C23.3 91.35 22.6 91.7 21.88 92.07 C13.83 95.97 13.83 95.97 9 95 C3.2 91.62 1.14 86.84 -1.61 80.84 C-2.86 78.04 -2.86 78.04 -4.55 75.99 C-6.35 73.52 -7.09 71.16 -8 68.25 C-9.09 64.82 -10.19 61.45 -11.56 58.12 C-13.8 52.31 -14.82 46.1 -16 40 C-16.2 39.07 -16.4 38.14 -16.61 37.18 C-17.14 32.82 -16.89 28.62 -16.62 24.25 C-16.57 23.36 -16.52 22.47 -16.47 21.56 C-16.36 19.81 -16.26 18.07 -16.14 16.33 C-16.03 14.41 -15.93 12.49 -15.85 10.57 C-15.69 7.94 -15.69 7.94 -15 4 C-10.44 -0.03 -6.03 -0.65 0 0 Z \",fill:\"#4A2E62\",transform:\"translate(551,885)\"})),_path170||(_path170=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.54 0.36 10.38 0.68 15 4 C16.83 6.32 18.46 8.72 20.09 11.18 C26.33 20.4 33.55 29.97 44.44 33.69 C48 35 48 35 49.5 36.81 C50.13 39.59 50.13 42.16 50 45 C50.66 45 51.32 45 52 45 C52 45.66 52 46.32 52 47 C51.01 47 50.02 47 49 47 C49 48.32 49 49.64 49 51 C50.49 51.5 50.49 51.5 52 52 C51.38 61.84 51.38 61.84 48 66 C44.53 67.16 41.64 67.07 38 67 C38 66.34 38 65.68 38 65 C36.91 65.06 35.81 65.12 34.69 65.19 C30.54 64.98 30.58 64.78 28 62 C23.1 58.91 18.74 57.74 13 57 C9.56 55.44 9.56 55.44 7 54 C7 54.66 7 55.32 7 56 C-2.31 51.9 -9.07 42.94 -15 35 C-14.67 34.34 -14.34 33.68 -14 33 C-13.01 33.33 -12.02 33.66 -11 34 C-11.5 33.17 -11.99 32.35 -12.5 31.5 C-14.42 27.02 -14.69 24.84 -14 20 C-11.42 17.36 -8.97 15.54 -5.75 13.75 C-3.24 11.24 -3.05 8.59 -2.49 5.16 C-2 3 -2 3 0 0 Z \",fill:\"#472758\",transform:\"translate(951,551)\"})),_path171||(_path171=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.05 -0.2 6.05 -0.2 8 0 C10 2 10 2 10.05 5.39 C9.96 6.82 9.86 8.25 9.75 9.69 C9.7 10.44 9.64 11.2 9.59 11.98 C9.41 14.32 9.21 16.66 9 19 C8.94 19.7 8.88 20.4 8.81 21.12 C8.06 29.04 7.02 36.07 3 43 C2.58 43.75 2.16 44.49 1.72 45.26 C-3.81 54.29 -10.76 59.8 -20.31 64.12 C-21.01 64.44 -21.7 64.76 -22.42 65.09 C-27.38 67.2 -27.38 67.2 -30.29 66.27 C-30.86 65.85 -31.42 65.43 -32 65 C-36.21 63.07 -40.4 61.53 -44.81 60.12 C-51.82 57.83 -58.8 55.37 -64 50 C-65.27 49.38 -65.27 49.38 -66.56 48.75 C-69.92 46.34 -70.18 43.94 -71 40 C-70.35 39.75 -69.7 39.49 -69.02 39.23 C-60.38 36.23 -60.38 36.23 -53.12 31 C-46.47 24.74 -37.37 25.58 -28.87 25.65 C-23.04 25.66 -23.04 25.66 -18.26 22.62 C-17.51 21.76 -16.77 20.89 -16 20 C-12.66 18.56 -12.66 18.56 -9.06 17.44 C-4.13 15.89 -0.03 14.31 4 11 C4 9.68 4 8.36 4 7 C-1.95 8.64 -7.48 10.52 -12.99 13.33 C-15.39 14.13 -16.64 13.82 -19 13 C-14.5 8.83 -10.4 6.67 -4.62 4.69 C-3.89 4.42 -3.15 4.16 -2.39 3.89 C-0.6 3.25 1.2 2.62 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#66476C\",transform:\"translate(674,314)\"})),_path172||(_path172=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.61 0.02 13.62 0.17 19.48 5.41 C22.97 9.06 24.19 11.65 24.5 16.69 C24.36 21.74 22.73 25.26 20.29 29.62 C19.11 31.79 18.35 33.78 17.62 36.12 C16.16 40.31 13.54 43.14 10.52 46.34 C7.51 49.63 7.89 52.27 7.94 56.62 C7.95 57.81 7.96 59 7.96 60.23 C7.98 61.14 7.99 62.06 8 63 C8.66 63 9.32 63 10 63 C9.4 66.36 8.15 68.38 6 71 C6.66 70.67 7.32 70.34 8 70 C6.56 73.19 4.8 75.62 2.5 78.25 C1.89 78.96 1.28 79.66 0.66 80.39 C-1 82 -1 82 -3 82 C-3.08 82.76 -3.16 83.53 -3.25 84.31 C-4.15 87.55 -5.21 88.26 -8 90 C-9.16 91.04 -9.16 91.04 -9.88 93 C-11 95 -11 95 -14 96 C-15.71 98.76 -15.71 98.76 -17.19 102.12 C-17.72 103.24 -18.25 104.36 -18.79 105.51 C-20.53 110.52 -20.81 114.31 -18.5 119.12 C-18 120.07 -17.51 121.02 -17 122 C-16.68 124.46 -16.68 124.46 -17 127 C-18.54 128.88 -18.54 128.88 -20.62 130.56 C-21.36 131.16 -22.09 131.76 -22.84 132.38 C-24.57 133.68 -26.37 134.89 -28.19 136.06 C-31.44 138.31 -33.48 140.97 -36 144 C-37.31 144.62 -37.31 144.62 -38.64 145.25 C-39.42 145.83 -40.2 146.4 -41 147 C-41.49 150.29 -41.49 150.29 -41.12 153.94 C-40.8 158.97 -40.74 161.16 -44 165 C-44.25 168.67 -44.25 168.67 -44 172 C-39.98 174.37 -36.43 174.28 -31.85 174.36 C-24.89 175.92 -20.77 182.5 -16.75 187.94 C-16.22 188.63 -15.69 189.32 -15.15 190.03 C-9.89 197.07 -8.12 203.23 -9 212 C-9.91 216.02 -11.55 218.57 -14.56 221.44 C-18.6 223.27 -21.37 223.22 -25.73 222.85 C-28.04 222.79 -28.04 222.79 -29.64 224.24 C-31.11 226.14 -32.39 228.07 -33.62 230.12 C-35.92 233.92 -35.92 233.92 -37 235 C-42.71 235.57 -46.45 234.35 -51 231 C-52.07 230.01 -53.13 229.01 -54.19 228 C-58.04 224.53 -62.32 223.3 -67.23 221.86 C-69.67 221.1 -71.77 220.22 -74 219 C-73.01 218.01 -72.02 217.02 -71 216 C-71 216.66 -71 217.32 -71 218 C-70.01 217.92 -69.02 217.84 -68 217.75 C-61.64 217.78 -56.93 221.01 -52.44 225.25 C-49.75 227.68 -49.07 227.99 -45.25 228.56 C-42.13 228.23 -42.13 228.23 -40.25 226.94 C-38.8 224.83 -38.8 224.83 -37.56 221.5 C-35.94 217.88 -35.42 216.8 -32 215 C-31.32 214.83 -30.65 214.65 -29.95 214.48 C-25.04 213.21 -22.42 211.92 -19.44 207.69 C-17.29 203.96 -15.87 201.33 -17 197 C-19.78 192.73 -23.23 188.91 -28 187 C-30.77 186.69 -33.5 186.5 -36.28 186.41 C-39.63 185.91 -41.37 185.15 -44 183 C-45.48 179.85 -45.48 179.85 -46.62 176.06 C-46.83 175.4 -47.04 174.74 -47.25 174.05 C-48.81 168.95 -50.1 163.8 -51.23 158.59 C-52.56 154.11 -53.97 151.63 -58 149.15 C-61.72 146.49 -62.74 143.78 -64 139.56 C-64.23 138.91 -64.46 138.25 -64.69 137.58 C-65.66 134.53 -66.08 132.37 -65.38 129.23 C-63.84 126.74 -62.39 125.42 -60 123.75 C-59.3 123.25 -58.6 122.75 -57.88 122.23 C-54.17 119.8 -52.1 120.19 -47.72 120.74 C-41.89 121.3 -35.59 121.86 -30 120 C-28.84 117.15 -28.84 117.15 -27.88 113.69 C-25.76 107.17 -22.69 102.42 -18.38 97.05 C-15.91 93.88 -13.75 90.59 -11.62 87.19 C-7.88 81.2 -3.8 75.52 0.46 69.89 C5.11 63.69 5.04 59.77 4.74 52.23 C5.03 48.61 5.82 46.87 8 44 C9.45 43.07 9.45 43.07 10.94 42.12 C16.17 37.98 16.99 30.27 18 24 C18.69 17.94 18.95 13.01 16.31 7.44 C12.11 3.37 5.49 2.37 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#816786\",transform:\"translate(715,294)\"})),_path173||(_path173=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.99 -0.07 10.74 1.84 15.8 6.6 C16.3 7.1 16.3 7.1 16.8 7.6 C18.63 7.86 20.46 8.06 22.3 8.23 C23.3 8.32 24.3 8.42 25.33 8.52 C26.15 8.54 26.96 8.57 27.8 8.6 C28.13 8.27 28.46 7.94 28.8 7.6 C31.72 7.19 33.89 7.07 36.5 8.58 C40.44 11.68 41.44 13.82 42.06 18.58 C43.12 32.53 43.12 32.53 40.07 37.32 C37.76 39.33 35.38 40.96 32.8 42.6 C31.58 43.73 30.37 44.87 29.18 46.04 C25.45 49.3 21.4 51.86 17.18 54.41 C16.54 54.8 15.91 55.18 15.26 55.58 C10.7 58.27 6.33 60.6 0.93 60.6 C-2.82 59.4 -5.16 57.52 -8.19 55.07 C-10.33 53.38 -10.33 53.38 -13.76 52.23 C-18.48 50 -21.36 46.94 -24.2 42.6 C-25.07 39.54 -25.07 39.54 -24.2 36.6 C-21.74 33.3 -18.95 30.48 -15.25 28.63 C-10.88 26.38 -10.88 26.38 -8.23 22.39 C-7.62 19.78 -7.22 17.2 -6.89 14.54 C-6.63 12.76 -6.36 10.97 -6.09 9.19 C-5.98 8.41 -5.88 7.62 -5.78 6.81 C-4.88 3.37 -3.51 0.96 0 0 Z \",fill:\"#8378A2\",transform:\"translate(673.19921875,554.3984375)\"})),_path174||(_path174=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.19 0.56 0.37 1.11 0.56 1.69 C2.1 4.16 3.14 4.82 5.56 6.31 C8.43 8.29 8.96 8.89 10.31 12.31 C9.94 16.74 8.62 18.36 5.64 21.52 C0.82 28.81 0.62 36.91 0.88 45.38 C1.03 54.16 0.88 62.82 0.09 71.58 C-0.27 76.56 0.11 79.71 3 84 C5.84 86.98 8.52 87.4 12.53 87.92 C21.08 89.04 21.08 89.04 23.65 91.72 C24.49 93.88 24.82 95.7 25 98 C25.16 99.13 25.33 100.27 25.5 101.44 C24.02 111.98 16.46 117.6 8.56 123.78 C7.2 124.85 5.85 125.94 4.52 127.03 C-0.46 131 -0.46 131 -5 131 C-4.45 127.3 -3.54 124.92 -1.35 121.9 C-0.82 121.16 -0.29 120.42 0.26 119.66 C0.81 118.91 1.37 118.15 1.94 117.38 C3.03 115.86 4.12 114.35 5.21 112.84 C5.7 112.17 6.19 111.51 6.69 110.82 C10.62 105.37 9.89 102.43 9 96 C8.92 95.01 8.84 94.02 8.75 93 C8.16 90.76 8.16 90.76 5.69 89.81 C4.8 89.54 3.91 89.28 3 89 C2.39 88.67 1.78 88.35 1.15 88.01 C-2.01 86.53 -5.24 86.19 -8.66 85.66 C-11.42 84.88 -12.42 84.41 -14 82 C-14.41 78.85 -14.41 78.85 -14.5 75.06 C-15.03 63.38 -17.16 50.27 -26.21 41.97 C-27.75 40.8 -29.3 39.66 -30.87 38.55 C-33.95 36.31 -35.92 34.19 -38 31 C-38 27.9 -37.29 26.43 -35.56 23.88 C-33.54 20.15 -33.12 16.59 -32.53 12.43 C-32 10 -32 10 -30 8 C-24.06 7.3 -21.02 8.06 -16.25 11.61 C-15 13 -15 13 -15 16 C-10.17 15.85 -7.75 13.38 -4.58 10.05 C-2.15 6.9 -1.13 3.8 0 0 Z \",fill:\"#8A7896\",transform:\"translate(729,431)\"})),_path175||(_path175=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.21 2.56 3.96 3.74 4.67 7.89 C5.24 10.37 5.59 11.64 7.51 13.34 C9.45 14.44 11.39 15.37 13.44 16.25 C21.99 20.17 21.99 20.17 24 24 C23.93 27.36 23.45 29.34 21.56 32.12 C18.33 34.49 14.99 35.72 11.24 37.07 C8.85 37.89 8.85 37.89 7 40 C6.52 48.4 7.91 56.22 13 63 C18.56 69.09 24.4 74.62 32 78 C32 78.66 32 79.32 32 80 C33.49 80.5 33.49 80.5 35 81 C31.67 81.97 28.52 82.2 25.06 82.38 C19.2 82.78 13.78 83.88 8.09 85.3 C4.4 86.13 0.79 86.53 -2.98 86.79 C-5.2 86.95 -5.2 86.95 -8 88 C-18.63 88.78 -27.62 88.22 -35.94 81.12 C-39.87 77.48 -42.88 74.19 -43.19 68.69 C-43.13 67.8 -43.06 66.91 -43 66 C-42.34 66.66 -41.68 67.32 -41 68 C-39.95 67.5 -39.95 67.5 -38.88 67 C-35.63 65.87 -33.42 65.64 -30 66 C-29.17 66.52 -28.35 67.03 -27.5 67.56 C-25.05 69.26 -25.05 69.26 -22 68.94 C-18.93 68.18 -18.93 68.18 -16.69 66.12 C-14.06 64.05 -12.51 63.42 -9.38 62.5 C-6.6 61.64 -5.18 61.16 -3 59.19 C-1.29 55.45 -0.58 52.44 -1.75 48.44 C-2.93 45.98 -2.93 45.98 -4.56 43.88 C-6.42 40.15 -6.48 36.84 -6.77 32.73 C-7.07 29.16 -7.65 26.33 -9 23 C-10.8 21.73 -10.8 21.73 -13 21 C-15.86 18.83 -18.53 16.6 -21 14 C-19.35 13.34 -17.7 12.68 -16 12 C-16.99 12 -17.98 12 -19 12 C-17.53 8.44 -15.63 6.56 -12.62 4.19 C-11.85 3.56 -11.08 2.94 -10.29 2.29 C-8 1 -8 1 -5.85 1.36 C-5.24 1.57 -4.63 1.78 -4 2 C-1.78 1.14 -1.78 1.14 0 0 Z \",fill:\"#806685\",transform:\"translate(631,541)\"})),_path176||(_path176=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.74 0.25 1.49 0.5 2.25 0.75 C2.78 2.33 3.3 3.91 3.81 5.5 C4.1 6.38 4.39 7.26 4.69 8.17 C5.25 10.75 5.25 10.75 4.25 14.75 C3.26 10.79 2.27 6.83 1.25 2.75 C-7.58 6.28 -14.21 15.47 -18.75 23.75 C-19.68 27.6 -19.71 30.73 -19.25 34.62 C-19.25 37.71 -19.42 39.27 -21.19 41.82 C-29.72 49.81 -44.83 60.97 -56.75 61.12 C-62.62 61.5 -64.84 62.36 -68.75 66.75 C-69.53 67.91 -70.3 69.08 -71.06 70.25 C-73.55 73.91 -76.37 75.52 -80.28 77.49 C-83.77 79.27 -87.06 81.36 -90.39 83.42 C-92.75 84.75 -92.75 84.75 -95.17 85.68 C-98.34 87 -100.93 88.79 -103.75 90.75 C-109.22 94.54 -109.22 94.54 -112.5 95.81 C-115.08 96.64 -115.08 96.64 -116.75 99.75 C-116.51 102.79 -115.9 104.53 -114.19 107.06 C-112.23 110.72 -112.03 113.74 -112.75 117.75 C-114.92 122.85 -117.8 127.56 -120.57 132.35 C-123.85 138.16 -123.85 138.16 -124.84 144.66 C-123.01 149.85 -120.12 153.42 -115.75 156.75 C-112.57 157.61 -109.97 157.29 -106.75 156.75 C-101.75 156.05 -96.85 155.63 -91.8 155.46 C-66.01 154.58 -40.75 147.88 -19.8 132.27 C-17.75 130.75 -17.75 130.75 -14.38 128.75 C-10.92 126.12 -9.75 123.61 -7.75 119.75 C-6.94 118.82 -6.94 118.82 -6.12 117.87 C-4.33 115.1 -4.66 113.55 -5 110.31 C-5.19 105.27 -5.19 105.27 -3.2 102.92 C-1.25 101.56 -1.25 101.56 2.25 99.75 C1.91 100.46 1.57 101.17 1.23 101.9 C0.14 105.08 0.29 107.05 0.62 110.38 C0.77 117.99 -2.73 122.32 -7.75 127.75 C-9.97 129.93 -12.27 131.87 -14.75 133.75 C-15.68 134.53 -16.61 135.32 -17.56 136.12 C-19.75 137.75 -19.75 137.75 -21.75 137.75 C-21.75 138.41 -21.75 139.07 -21.75 139.75 C-23.77 141.19 -25.76 142.48 -27.88 143.75 C-28.44 144.11 -29.01 144.46 -29.6 144.83 C-33.23 147.04 -36.73 148.45 -40.75 149.75 C-42.97 150.98 -42.97 150.98 -45 152.44 C-45.76 152.97 -46.53 153.49 -47.31 154.04 C-48.12 154.6 -48.92 155.17 -49.75 155.75 C-50.62 156.34 -51.48 156.92 -52.38 157.52 C-58.83 161.92 -63.72 165.98 -67.75 172.75 C-71.27 175.1 -73.64 175.3 -77.81 175.81 C-82.44 176.26 -82.44 176.26 -86.75 177.75 C-89.59 178.06 -92.4 178.31 -95.25 178.5 C-96.04 178.57 -96.82 178.64 -97.63 178.71 C-99.91 178.86 -99.91 178.86 -103.75 178.75 C-105.76 175.73 -105.95 174.79 -106.31 171.38 C-106.91 168.44 -107.19 167.16 -109.63 165.37 C-111.21 164.61 -112.79 163.86 -114.37 163.12 C-117.92 161.07 -119.84 158.19 -122.17 154.88 C-123.81 152.51 -123.81 152.51 -126.75 150.12 C-128.75 147.75 -128.75 147.75 -128.62 144.61 C-127.62 140.17 -125.98 136.62 -123.88 132.62 C-123.52 131.94 -123.17 131.25 -122.81 130.54 C-121.3 127.61 -119.76 124.76 -118.05 121.95 C-116.38 119.13 -115.89 117.01 -115.75 113.75 C-117.03 111.07 -118.42 109.11 -120.44 106.94 C-122.44 103.59 -122.33 100.49 -121.75 96.75 C-119.25 88.21 -113.22 80.55 -105.75 75.75 C-103.52 74.89 -101.29 74.16 -99 73.47 C-96.51 72.73 -96.51 72.73 -93.38 71.12 C-89.99 69.84 -87.74 69.52 -84.19 69.31 C-78.4 68.89 -75.1 67.32 -71.12 62.96 C-65.99 57.37 -65.99 57.37 -61.69 56.81 C-59.41 56.78 -57.14 56.78 -54.87 56.91 C-49.17 56.62 -44.61 53.55 -39.75 50.75 C-38.9 50.27 -38.06 49.78 -37.18 49.29 C-29.9 44.44 -27.73 37.7 -24.75 29.75 C-20.76 19.71 -13.75 11.83 -6.75 3.75 C-6.06 2.91 -5.37 2.07 -4.66 1.21 C-2.75 -0.25 -2.75 -0.25 0 0 Z \",fill:\"#846F90\",transform:\"translate(824.75,577.25)\"})),_path177||(_path177=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56 0.49 4.56 0.49 6.52 2.73 C8.06 5.09 9.21 7.44 10.38 10 C13.04 15.41 15.66 17.94 21.19 20.44 C24 22 24 22 25.38 24.69 C25.58 25.45 25.79 26.21 26 27 C24.62 28.5 24.62 28.5 23 30 C22.34 30 21.68 30 21 30 C21.7 32.98 21.7 32.98 23.53 34.25 C26.75 38.09 25.56 44.65 25.56 49.51 C25.56 51.73 25.62 53.94 25.67 56.16 C25.81 68.02 25.81 68.02 22.03 72.27 C21.49 72.72 20.95 73.18 20.39 73.65 C17.39 76.56 17.86 80.7 17.79 84.65 C17.75 86.28 17.75 86.28 17.7 87.95 C17.65 90.22 17.61 92.5 17.57 94.78 C17.27 105.42 17.27 105.42 14 110 C11.44 111 11.44 111 9 111 C8.34 110.34 7.68 109.68 7 109 C4.93 108.36 4.93 108.36 3 108 C2.81 106.88 2.61 105.75 2.41 104.6 C1.75 100.74 1.05 96.89 0.36 93.05 C0.08 91.45 -0.17 89.85 -0.4 88.25 C-1.35 82.46 -4.14 78.47 -7.38 73.63 C-9.63 69.97 -10.38 67.26 -11 63 C-11.12 62.31 -11.23 61.61 -11.35 60.89 C-11.96 54.52 -9.36 50.83 -5.82 45.7 C-1.97 39.98 1.25 34.06 0 27 C-0.85 26.46 -1.69 25.92 -2.57 25.36 C-5 23 -5 23 -5.27 21.08 C-5.15 18.7 -4.86 16.41 -4.5 14.06 C-4.41 13.26 -4.31 12.47 -4.22 11.64 C-3.62 7.11 -2.75 3.78 0 0 Z \",fill:\"#45224F\",transform:\"translate(490,817)\"})),_path178||(_path178=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.66 1.22 12.82 3.25 19 6 C21.64 6.76 24.29 7.48 26.96 8.16 C27.63 8.43 28.31 8.71 29 9 C29.49 10.49 29.49 10.49 30 12 C31.91 12.49 33.82 12.96 35.75 13.38 C39.59 14.44 42.79 16.53 46.19 18.56 C53.8 22.98 61.56 26.56 69.74 29.78 C75.39 32.07 80.58 34.71 85 39 C85.33 39.99 85.66 40.98 86 42 C86.78 42.54 87.57 43.07 88.38 43.62 C91.19 46.17 91.42 46.94 92.31 50.44 C93.4 54.16 94.47 55.83 97.75 57.94 C101.36 59.89 105.06 60.88 109 62 C111.6 63.82 113.71 65.69 115.88 68 C118.08 70.08 120.39 71.37 123.02 72.84 C126.45 74.84 129.68 77.11 132.94 79.38 C133.64 79.86 134.34 80.34 135.06 80.84 C145.07 87.8 145.07 87.8 149 91 C149 91.66 149 92.32 149 93 C149.71 93.22 150.42 93.45 151.15 93.68 C158.64 97.16 165.71 105.48 169 113 C169 113.99 169 114.98 169 116 C168.34 116 167.68 116 167 116 C166.44 114.95 165.89 113.9 165.31 112.81 C163.34 109.32 160.88 106.8 158 104 C158 103.34 158 102.68 158 102 C157.46 101.77 156.93 101.55 156.38 101.31 C153.84 99.91 151.78 98.19 149.59 96.3 C148 95 146.36 93.91 144.62 92.81 C143.76 92.21 142.89 91.62 142 91 C142 90.34 142 89.68 142 89 C141.27 88.72 140.54 88.45 139.78 88.16 C131.7 84.79 124.57 79.4 117.47 74.34 C109.24 68.7 100.94 64.51 91.62 60.94 C89.51 60.11 87.4 59.29 85.29 58.46 C84.25 58.06 83.21 57.66 82.15 57.24 C74.69 54.3 67.32 51.23 60.12 47.69 C53.99 44.74 47.73 42.39 41.31 40.12 C30.59 36.33 20.27 31.88 10 27 C9.28 26.66 8.56 26.32 7.82 25.97 C-6.14 19.32 -6.14 19.32 -8.19 13.81 C-8.46 12.88 -8.72 11.96 -9 11 C-8.05 10.65 -7.1 10.3 -6.12 9.94 C-2.66 8.24 -2.66 8.24 -1.69 4.38 C-1.46 3.26 -1.23 2.15 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#28103B\",transform:\"translate(1013,721)\"})),_path179||(_path179=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.14 0.64 -0.29 1.28 -0.44 1.94 C-0.72 3.45 -0.72 3.45 -1 5 C-1.23 6.07 -1.23 6.07 -1.46 7.16 C-1.88 9.52 -2.15 11.6 -2 14 C0.99 17.91 4.31 20.44 9 22 C9.5 22.99 9.5 22.99 10 24 C14.59 26.21 19.2 27.97 24.31 28.06 C27.24 27.08 27.24 27.08 29.94 24.44 C33 22 33 22 36.62 21.56 C39.72 21.96 41.4 22.39 44 24 C44.66 24.27 45.32 24.54 46 24.81 C48.89 26.53 50.29 28.09 52 31 C52.17 36.25 51.48 38.83 48 42.75 C47.46 43.28 46.93 43.81 46.38 44.36 C44.81 46.23 44.5 47.64 44 50 C43 51 42 52 41 53 C39.95 54.98 38.95 56.97 38 59 C37.34 59 36.68 59 36 59 C36.33 59.99 36.66 60.98 37 62 C36.34 62.99 35.68 63.98 35 65 C34.54 66.52 34.54 66.52 34.06 68.06 C33 71 33 71 30 73 C30 72.34 30 71.68 30 71 C29.34 71 28.68 71 28 71 C28.16 70.34 28.33 69.68 28.5 69 C29.12 65.27 29.06 61.78 29 58 C22.16 54.81 16.62 52.27 9 53 C7.63 48.69 6.84 44.68 6.31 40.19 C4.65 29.9 -2.06 23.2 -10 17 C-10.71 16.43 -11.42 15.86 -12.14 15.27 C-16.6 11.6 -16.6 11.6 -22 10 C-27.29 11.15 -30.74 13.83 -34.81 17.19 C-35.42 17.68 -36.03 18.17 -36.66 18.67 C-39.38 20.85 -42.06 23.05 -44.73 25.28 C-45.89 26.22 -45.89 26.22 -47.06 27.19 C-47.71 27.74 -48.36 28.29 -49.04 28.86 C-51.64 30.37 -53.02 30.47 -56 30 C-58.75 28.39 -58.75 28.39 -61.56 26.25 C-62.49 25.55 -63.42 24.86 -64.38 24.14 C-67 22 -67 22 -69.21 19.79 C-70.88 17.89 -70.88 17.89 -73.12 17.12 C-75.97 15.42 -76.19 13.09 -77 10 C-77.66 10 -78.32 10 -79 10 C-79 9.34 -79 8.68 -79 8 C-79.66 7.67 -80.32 7.34 -81 7 C-79.48 6.38 -79.48 6.38 -77.94 5.75 C-75.28 4.63 -72.93 3.36 -70.5 1.81 C-66.54 -0.24 -64.39 -0.57 -60 0 C-55.39 2.3 -51.9 5.68 -48.19 9.19 C-47.59 9.75 -46.99 10.31 -46.38 10.88 C-44.91 12.25 -43.46 13.62 -42 15 C-41.45 12.92 -41 11.16 -41 9 C-39.79 9.65 -39.79 9.65 -38.56 10.31 C-33.85 11.22 -31.98 9.74 -28.05 7.26 C-24.41 5.02 -21.49 4.89 -17.31 4.94 C-16.32 4.95 -15.32 4.96 -14.3 4.96 C-13.16 4.98 -13.16 4.98 -12 5 C-11.67 4.01 -11.34 3.02 -11 2 C-6.98 -0.56 -4.59 -1.49 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(955,755)\"})),_path180||(_path180=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.06 1.94 3.06 1.94 5 4 C5 4.66 5 5.32 5 6 C5.99 6.5 5.99 6.5 7 7 C8.05 8.08 8.05 8.08 9.12 9.19 C11.14 11.25 13.22 12.95 15.56 14.62 C19.42 17.45 22.96 20.54 26.5 23.75 C27.04 24.23 27.58 24.72 28.14 25.22 C29.47 26.44 30.74 27.71 32 29 C32 29.66 32 30.32 32 31 C33.98 31.66 35.96 32.32 38 33 C34.79 35.14 31.54 36.48 28 38 C27.01 38.66 26.02 39.32 25 40 C19.23 40.11 16.43 38.18 12.42 34.43 C10.52 32.52 8.64 30.6 6.77 28.67 C5.57 27.44 4.38 26.22 3.19 25 C2.59 24.38 1.99 23.77 1.37 23.13 C-2.97 18.77 -7.4 15.48 -12.89 12.62 C-15.7 10.46 -16.16 8.37 -17 5 C-23.02 3.91 -23.02 3.91 -28.94 5 C-31.72 7.7 -32.22 10.26 -33 14 C-31.76 13.92 -30.52 13.84 -29.25 13.75 C-16 13.79 -7.04 20.99 2.14 29.58 C3.92 31.14 3.92 31.14 6.17 31.49 C7.08 31.74 7.08 31.74 8 32 C8.5 33.64 8.5 33.64 9 35.31 C10.69 40.52 14.39 43.68 18.23 47.35 C24.12 52.99 29.1 59.22 34.06 65.69 C35.97 68.18 35.97 68.18 39 70 C39.68 71.14 39.68 71.14 40.38 72.31 C41.9 75.1 41.9 75.1 44.31 77.25 C46.63 79.62 48.13 81.67 49.88 84.44 C52.72 88.86 55.87 91.78 60 95 C59.01 95 58.02 95 57 95 C56.06 95.12 55.12 95.24 54.15 95.37 C50.43 94.93 49.29 93.73 46.97 90.89 C46.52 90.3 46.08 89.72 45.62 89.12 C45.15 88.53 44.68 87.94 44.19 87.33 C42.78 85.57 41.39 83.78 40 82 C38.61 80.27 37.21 78.54 35.81 76.81 C34.54 75.21 33.27 73.61 32 72 C24.99 63.13 17.64 54.68 10.05 46.31 C8.51 44.57 7.05 42.77 5.62 40.94 C0.8 35.54 -5.08 31.21 -10.84 26.85 C-11.91 25.94 -11.91 25.94 -13 25 C-13 24.34 -13 23.68 -13 23 C-14.32 22.67 -15.64 22.34 -17 22 C-17 21.34 -17 20.68 -17 20 C-24.15 18.84 -29.94 19.4 -37 20.88 C-38.87 21.25 -40.75 21.62 -42.62 21.99 C-43.53 22.17 -44.43 22.35 -45.36 22.53 C-48.57 23.1 -51.77 23.46 -55.02 23.75 C-58.14 24.14 -61.01 25.05 -64 26 C-64.33 25.67 -64.66 25.34 -65 25 C-66.86 25.25 -66.86 25.25 -68.75 25.5 C-74.83 26.31 -74.83 26.31 -78 25 C-79.92 22.04 -80 20.03 -80 16.5 C-78.75 12.11 -76.82 10.24 -73 8 C-55.6 -0.76 -36.01 -0.18 -17.05 -0.02 C-10.92 0.03 -6.19 -1.41 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(657,98)\"})),_path181||(_path181=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.28 -0.52 10.28 -0.52 15.31 1.44 C21.31 3.76 27.63 3.74 34 4 C30.44 5.83 27.45 6.89 23.44 7.19 C20.73 7.82 20.73 7.82 19.12 10.69 C17.88 14.34 18.03 16.31 19 20 C20.13 20.27 21.27 20.54 22.44 20.81 C23.61 21.2 24.79 21.6 26 22 C26.33 22.99 26.66 23.98 27 25 C28.33 25.35 29.66 25.69 31 26 C31.43 26.46 31.86 26.91 32.3 27.38 C34.45 29.42 36.59 30.29 39.31 31.44 C49.76 36.05 49.76 36.05 52.18 39.86 C53.13 42.33 52.94 43.66 52.56 46.25 C52.47 49.5 52.74 50.67 54.79 53.26 C58 56.17 61.06 58.53 64.95 60.47 C68.13 62.07 70.79 63.92 73.62 66.06 C77.22 68.82 77.22 68.82 81.18 70.96 C84.28 72.73 85.17 75.87 86.66 79 C88.32 81.47 89.18 81.43 92 82 C93.01 82.99 94.01 83.99 95 85 C97.06 86.1 97.06 86.1 99.31 87 C102.95 88.54 106.48 90.2 110 92 C110 92.66 110 93.32 110 94 C110.85 94.27 111.69 94.54 112.56 94.81 C122.65 98.3 122.65 98.3 124 101 C125.88 101.58 125.88 101.58 128.12 101.94 C131.21 102.55 133.9 103.29 136.75 104.62 C139.8 106.19 139.8 106.19 142.5 105.88 C145.98 106.05 147.66 107.79 150.25 110 C151.98 111.21 151.98 111.21 154.14 110.78 C156.2 110.13 156.2 110.13 157.25 107.94 C157.62 106.98 157.62 106.98 158 106 C162.5 107.07 166.75 108.14 171 110 C170.01 110.5 170.01 110.5 169 111 C169.33 111.99 169.66 112.98 170 114 C170.7 114.06 171.4 114.12 172.12 114.19 C175.92 115.26 178.67 116.83 181 120 C181.68 122.58 182.06 125.13 182.45 127.77 C182.82 130.25 182.82 130.25 185.38 131.88 C186.67 132.43 186.67 132.43 188 133 C189.37 134.29 190.71 135.63 192 137 C192.68 137.66 193.36 138.32 194.06 139 C195.9 140.9 197.46 142.85 199 145 C198.67 145.66 198.34 146.32 198 147 C197.01 146.34 196.02 145.68 195 145 C195.33 145.33 195.66 145.66 196 146 C196.04 148 196.04 150 196 152 C196.52 152.23 197.04 152.46 197.57 152.7 C202.2 154.86 205.69 156.99 209 161 C209.81 163.31 209.81 163.31 210 165 C205.96 163.59 202.96 161.65 199.56 159.06 C196.65 156.85 194.03 155.01 190.71 153.43 C188 152 188 152 187 149 C185.12 147.89 185.12 147.89 183 147 C182.01 146.34 181.02 145.68 180 145 C178.42 144.63 178.42 144.63 176.81 144.25 C172.13 142.96 168.3 140.57 165 137 C164.24 134.95 163.89 133.04 163.55 130.89 C162.55 127.48 159.77 126.08 157 124 C156.76 123.37 156.51 122.74 156.26 122.1 C154.31 118.85 151.19 117.74 147.88 116.19 C147.16 115.84 146.45 115.5 145.72 115.14 C140.18 112.48 134.54 110.06 128.88 107.66 C123 105.11 117.56 102.01 112.09 98.7 C109.07 96.91 109.07 96.91 105.79 95.96 C103 95 103 95 101.53 93.5 C99.22 91.23 96.65 90.8 93.56 89.94 C89.84 88.88 86.39 87.88 83 86 C83 84.68 83 83.36 83 82 C81.82 81.81 81.82 81.81 80.62 81.62 C78 81 78 81 76 79 C75.17 78.73 74.35 78.46 73.5 78.19 C70.24 76.64 70.18 75.31 69 72 C66.98 69.73 66.98 69.73 65 68 C65.66 69.65 66.32 71.3 67 73 C63.67 71.63 62.4 70.42 60.75 67.25 C57.56 61.82 52.99 58 47 56 C47 55.01 47 54.02 47 53 C45.79 52.72 45.79 52.72 44.56 52.44 C39.67 50.46 35.52 47.97 32 44 C31.42 41.18 31.76 38.91 32 36 C29.27 32.48 26.52 31.24 22.38 29.81 C13.94 26.47 6.05 20.29 2 12 C1.56 8.81 1.56 8.81 2 6 C3.5 4.12 3.5 4.12 5 3 C2.52 2.01 2.52 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#391948\",transform:\"translate(940,638)\"})),_path182||(_path182=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.99 8.81 17.36 18.66 23 30 C23 31.32 23 32.64 23 34 C23.99 34 24.98 34 26 34 C26.5 35.98 26.5 35.98 27 38 C27.56 38.04 28.11 38.08 28.69 38.12 C32.22 39.46 34.44 41.61 36 45 C36.03 50.59 33.35 55.63 30.98 60.57 C29.89 63.28 29.37 65.88 28.81 68.75 C27.31 75.37 24.02 79.79 19.96 85.09 C18.07 87.9 17.35 89.68 17 93 C18.98 94.65 20.96 96.3 23 98 C22 103.94 20.69 108.2 17 113 C18.49 112.01 18.49 112.01 20 111 C18.77 113.79 17.22 116.04 15.38 118.44 C13.21 121.39 12.43 123.26 13 127 C13.85 126.95 13.85 126.95 14.72 126.9 C18.7 126.96 21.13 127.19 24.12 129.96 C26.66 133.22 28.69 136.06 30 140 C34.16 140.52 38.24 141 42.44 141 C45 141 45 141 47 142 C47 141.34 47 140.68 47 140 C48.32 140.33 49.64 140.66 51 141 C51 140.34 51 139.68 51 139 C56.55 139.5 56.55 139.5 58.94 142.12 C60.96 144.39 60.96 144.39 64.44 143.94 C67.84 143.04 70.07 141.87 73 140 C73.99 140 74.98 140 76 140 C76.25 139.4 76.5 138.8 76.75 138.19 C78.16 135.71 79.65 134.57 82 133 C82.66 133.33 83.32 133.66 84 134 C82.63 136 82.63 136 81 138 C80.34 138 79.68 138 79 138 C78.67 138.99 78.34 139.98 78 141 C76.33 142.54 76.33 142.54 74.25 144.06 C73.57 144.57 72.9 145.08 72.2 145.6 C67.95 148.3 64.19 149.26 59.19 149.62 C58.21 149.7 57.24 149.77 56.23 149.85 C55.49 149.9 54.76 149.95 54 150 C54 150.66 54 151.32 54 152 C48.08 153.48 42.72 154.22 37.38 151.06 C33.56 148.89 30.37 148.71 26 148.56 C19.85 148.3 15.57 147.23 11 143 C10.5 142.01 10.5 142.01 10 141 C7.77 139.96 7.77 139.96 5.06 139.06 C4.08 138.72 3.09 138.37 2.07 138.02 C-1.63 136.79 -5.35 135.67 -9.1 134.61 C-11 134 -11 134 -12 133 C-13.03 125.88 -11.34 120.96 -8.16 114.66 C-7.02 112.04 -6.65 110.15 -6.5 107.31 C-6.01 100.2 -1.94 95.64 3.19 91 C6.69 88 6.69 88 9 88 C9.25 87.32 9.5 86.63 9.76 85.93 C10.93 83.17 12.29 80.6 13.77 77.99 C19.97 66.93 26.35 54.58 23.19 41.69 C22.6 39.86 22.6 39.86 22 38 C21.66 36.61 21.66 36.61 21.3 35.19 C21.06 34.2 20.81 33.21 20.56 32.19 C20.34 31.25 20.11 30.32 19.88 29.36 C19.14 26.67 19.14 26.67 16 25 C15.01 24.67 14.02 24.34 13 24 C13.08 23.28 13.17 22.56 13.25 21.81 C12.92 18.13 11.5 16.65 9 14 C8.34 13.67 7.68 13.34 7 13 C7 12.01 7 11.02 7 10 C6.22 9.77 5.43 9.55 4.62 9.31 C2 8 2 8 0.69 5.56 C0 3 0 3 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(264,988)\"})),_path183||(_path183=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.78 1.37 8.7 3.46 12.81 6.19 C13.42 6.59 14.03 6.99 14.66 7.4 C32.99 19.53 32.99 19.53 34.53 26.35 C34.8 28.08 35.07 29.81 35.34 31.54 C36.26 34.98 38.07 36.95 40.56 39.43 C44.67 43.92 44.17 48.27 44 54 C38.67 56.67 33.33 59.33 28 62 C27.33 62.36 26.65 62.71 25.96 63.08 C22.62 64.65 20.66 64.6 17 64 C11.38 60.22 7.81 56.13 5 50 C3.21 47.84 1.34 45.78 -0.57 43.73 C-2 42 -2 42 -2 40 C-2.66 40 -3.32 40 -4 40 C-4.33 38.68 -4.66 37.36 -5 36 C-5.99 36 -6.98 36 -8 36 C-10.06 33.19 -10.06 33.19 -12 30 C-12.66 29.01 -13.32 28.02 -14 27 C-14 26.34 -14 25.68 -14 25 C-15.3 23.28 -15.3 23.28 -16.94 21.5 C-20.9 17.07 -20.9 17.07 -21.25 13.19 C-20.96 9.53 -20.29 7.84 -18 5 C-14.32 3.22 -10.77 2.53 -6.75 1.94 C-3.06 1.67 -3.06 1.67 0 0 Z \",fill:\"#4F3469\",transform:\"translate(1203,643)\"})),_path184||(_path184=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43 3.85 0.56 6.77 -0.38 10.69 C-1.34 14.89 -2.19 18.95 -2.56 23.25 C-3 27 -3 27 -5 29 C-5.28 31.53 -5.47 33.97 -5.56 36.5 C-5.88 43.76 -5.88 43.76 -7 46 C-7.55 52.12 -5.96 56.44 -3.62 61.94 C2.59 76.83 2.59 76.83 1.14 82.17 C0.42 83.66 0.42 83.66 -0.31 85.19 C-6.74 98.63 -4.32 116.46 -4.41 131.07 C-4.42 133.82 -4.46 136.57 -4.51 139.32 C-4.58 143.34 -4.6 147.34 -4.62 151.36 C-4.66 153.19 -4.66 153.19 -4.71 155.05 C-4.69 162.39 -3.65 166.89 0.81 172.8 C2 175 2 175 1.78 177.61 C1 180 1 180 -0.58 182.75 C-2.47 187.07 -2.15 190.44 -1.75 195.06 C-1.7 195.85 -1.64 196.64 -1.59 197.46 C-1.31 201.39 -0.8 205.14 0 209 C0.55 216.02 0.23 222.62 -3 229 C-4.61 230.75 -4.61 230.75 -6 232 C-6.99 231.67 -7.98 231.34 -9 231 C-9 230.34 -9 229.68 -9 229 C-9.63 228.8 -10.26 228.59 -10.91 228.38 C-13 227 -13 227 -13.91 224.24 C-14.1 223.13 -14.3 222.02 -14.5 220.88 C-15.67 215.25 -16.78 210.79 -20 206 C-22.93 204.59 -22.93 204.59 -26 205 C-28.4 205.99 -28.4 205.99 -30 208 C-30.38 209.66 -30.71 211.32 -31 213 C-32.53 215.4 -33.45 216.72 -36 218 C-36.27 219.64 -36.53 221.28 -36.72 222.94 C-38.18 233.77 -41.91 244.49 -46 254.56 C-46.32 255.38 -46.64 256.19 -46.97 257.03 C-49.35 262.65 -49.35 262.65 -52.69 264.46 C-53.45 264.64 -54.21 264.82 -55 265 C-55.33 265.33 -55.66 265.66 -56 266 C-58.94 266.19 -58.94 266.19 -62 266 C-62.66 265.34 -63.32 264.68 -64 264 C-69.35 268.2 -70.93 274.78 -73 281 C-73.99 280.67 -74.98 280.34 -76 280 C-79.57 285.35 -81.62 291.44 -83.31 297.62 C-84.88 303.13 -87.21 308.26 -89.58 313.47 C-91 316.62 -92.23 319.62 -93 323 C-93.66 323 -94.32 323 -95 323 C-93.1 315.58 -90.81 308.42 -88.12 301.25 C-85.28 293.56 -82.57 285.86 -80.03 278.07 C-79.17 275.5 -78.22 273.01 -77.19 270.5 C-75.92 266.75 -75.93 263.92 -76 260 C-75.25 256.62 -75.25 256.62 -74 254 C-73.05 253.89 -73.05 253.89 -72.09 253.77 C-71.4 253.52 -70.71 253.26 -70 253 C-68.93 250.63 -68.12 248.47 -67.38 246 C-66.64 243.63 -65.86 241.33 -65 239 C-64.34 238.67 -63.68 238.34 -63 238 C-62.01 238.99 -62.01 238.99 -61 240 C-60.01 238.68 -59.02 237.36 -58 236 C-57.67 237.98 -57.34 239.96 -57 242 C-56.67 242 -56.34 242 -56 242 C-55.5 244.48 -55.5 244.48 -55 247 C-53.35 247.33 -51.7 247.66 -50 248 C-48.68 245.03 -47.36 242.06 -46 239 C-46.99 238.67 -47.98 238.34 -49 238 C-48.34 237.34 -47.68 236.68 -47 236 C-46.12 232.35 -45.38 228.69 -44.68 225 C-43.54 219.44 -41.73 214.99 -39 210 C-38.34 210.33 -37.68 210.66 -37 211 C-36.76 210.4 -36.52 209.79 -36.27 209.17 C-35.93 208.37 -35.6 207.57 -35.25 206.75 C-34.76 205.57 -34.76 205.57 -34.27 204.36 C-31.86 199.88 -28.25 197.28 -24 194.62 C-23.15 194.08 -22.31 193.54 -21.44 192.98 C-19 192 -19 192 -16.81 192.59 C-14.68 194.25 -14.04 195.52 -13 198 C-12.59 198.77 -12.17 199.54 -11.75 200.33 C-8.35 206.78 -6.96 212.01 -7 219.31 C-7.27 222.82 -7.27 222.82 -6 225 C-3.74 220.47 -3.84 216.96 -4 212 C-4 207.67 -4 203.33 -4 199 C-4.99 199 -5.98 199 -7 199 C-6.67 198.01 -6.34 197.02 -6 196 C-5.63 192.91 -5.49 189.8 -5.31 186.69 C-5.25 185.85 -5.19 185 -5.13 184.13 C-4.85 179.2 -5.21 175.68 -7 171 C-7.85 166.09 -8.15 161.33 -8.22 156.36 C-8.24 155.26 -8.24 155.26 -8.26 154.15 C-8.29 151.75 -8.32 149.36 -8.35 146.97 C-8.37 145.3 -8.4 143.62 -8.42 141.95 C-8.47 138.45 -8.51 134.94 -8.56 131.44 C-8.61 126.97 -8.68 122.49 -8.74 118.02 C-8.79 114.57 -8.84 111.11 -8.88 107.65 C-8.9 106 -8.93 104.36 -8.95 102.71 C-8.99 100.4 -9.01 98.08 -9.04 95.77 C-9.05 94.46 -9.07 93.15 -9.09 91.8 C-8.99 87.78 -8.56 83.98 -8 80 C-8.97 79.65 -9.94 79.3 -10.94 78.94 C-14 77 -14 77 -14.71 73.87 C-15.49 63.55 -14.44 53.74 -11 44 C-9.18 38.23 -8.18 32.46 -7.19 26.5 C-5.6 17.29 -3.32 8.74 0 0 Z \",fill:\"#39154B\",transform:\"translate(471,252)\"})),_path185||(_path185=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.93 12.4 3.18 24.71 2.93 37.24 C2.89 38.95 2.86 40.66 2.84 42.37 C2.81 44.82 2.75 47.26 2.68 49.71 C2.67 50.44 2.66 51.17 2.66 51.92 C2.45 57.32 0.88 60.44 -2 65 C-2.92 67.96 -2.92 67.96 -2 71 C0.08 73.91 2.51 76.44 5 79 C9.62 83.77 12.23 87.26 13 94 C11.62 96.5 11.62 96.5 10 98 C7.7 97.86 7.7 97.86 5 97 C3.33 94.52 3.33 94.52 1.81 91.25 C-3.06 81.58 -9.21 72.51 -18 66 C-26.76 64.3 -35.43 68.75 -43 73 C-44.68 74.32 -46.35 75.65 -48 77 C-50.25 76.88 -50.25 76.88 -52 76 C-53.22 73.55 -53.17 71.86 -53.19 69.12 C-53.2 68.26 -53.22 67.4 -53.23 66.51 C-52.99 63.85 -52.23 62.33 -51 60 C-51 59.01 -51 58.02 -51 57 C-50.37 54.99 -49.71 52.99 -49 51 C-53.5 47.95 -59.05 48.68 -64.27 48.7 C-70.29 48.54 -72.66 47.13 -77 43 C-80.75 42.82 -81.86 43.88 -84.69 46.38 C-87.69 49.78 -89.23 51.8 -89.34 56.31 C-89.39 57.55 -89.39 57.55 -89.43 58.82 C-89.46 59.69 -89.48 60.55 -89.5 61.44 C-89.54 63.14 -89.6 64.85 -89.66 66.56 C-89.67 67.31 -89.69 68.07 -89.71 68.85 C-90.04 71.27 -90.8 72.88 -92 75 C-92.45 75.87 -92.91 76.73 -93.38 77.62 C-97.04 80.94 -100.49 80.87 -105.32 81.25 C-108.13 81.72 -108.13 81.72 -109.35 84.02 C-110.21 87.95 -110.29 91.67 -110.25 95.69 C-110.26 96.46 -110.27 97.23 -110.27 98.03 C-110.43 102.49 -110.43 102.49 -108 106 C-107.93 106.63 -107.85 107.26 -107.77 107.91 C-106.23 112.08 -100.9 113.31 -97.1 115.12 C-93.71 117.18 -92.49 118.36 -91 122 C-90.67 125.23 -90.67 125.23 -90.75 128.62 C-90.77 130.31 -90.77 130.31 -90.8 132.04 C-91 135 -91 135 -92 138 C-92 138.99 -92 139.98 -92 141 C-99.59 141 -107.18 141 -115 141 C-114.83 138.65 -114.66 136.3 -114.49 133.88 C-114.05 126.97 -113.94 120.1 -114.01 113.18 C-114.02 111.8 -114.02 111.8 -114.03 110.38 C-114.07 106.58 -114.11 102.77 -114.17 98.97 C-114.21 96.14 -114.24 93.32 -114.26 90.49 C-114.28 89.64 -114.3 88.79 -114.31 87.91 C-114.34 82.5 -113.55 78.8 -111 74 C-110.01 73.01 -110.01 73.01 -109 72 C-108.75 70.57 -108.54 69.13 -108.38 67.69 C-107.8 64.83 -107.45 63.41 -105.27 61.44 C-103.22 60.2 -101.13 59.09 -99 58 C-96.25 56.05 -94.37 54.63 -92.65 51.73 C-90.8 48.66 -88.67 46.01 -86.38 43.25 C-85.58 42.29 -84.78 41.32 -83.96 40.33 C-81.19 37.04 -81.19 37.04 -78.75 36.56 C-74.64 37.22 -73.43 39.78 -71 43 C-68.38 44.31 -66.22 44.26 -63.29 44.43 C-62.15 44.5 -61 44.58 -59.83 44.65 C-57.41 44.8 -55 44.94 -52.58 45.07 C-51.44 45.15 -50.29 45.23 -49.11 45.3 C-48.06 45.37 -47 45.43 -45.92 45.49 C-41.97 46.18 -39.06 47.58 -36.64 50.82 C-35.76 52.55 -34.88 54.27 -34 56 C-33.25 55.95 -32.5 55.91 -31.73 55.86 C-24.28 55.6 -18.63 56.54 -12 60 C-11.67 60.33 -11.34 60.66 -11 61 C-8.13 61.5 -8.13 61.5 -5 61 C-2.23 58.78 -1.13 56.9 -0.62 53.38 C-0.44 50 -0.39 46.64 -0.39 43.26 C-0.37 42.03 -0.36 40.79 -0.34 39.52 C-0.3 36.24 -0.28 32.97 -0.26 29.7 C-0.24 26.35 -0.2 23.01 -0.16 19.66 C-0.09 13.11 -0.03 6.55 0 0 Z \",fill:\"#816786\",transform:\"translate(1223,1139)\"})),_path186||(_path186=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.24 1.79 3.48 1.59 4.75 1.38 C7.27 1.07 8.84 0.96 11.31 1.62 C13 3 13 3 14.2 5.17 C16.53 8.83 19.38 11.63 22.46 14.66 C23.09 15.28 23.72 15.91 24.36 16.55 C26.36 18.54 28.37 20.52 30.38 22.5 C31.72 23.83 33.06 25.16 34.4 26.5 C37.42 29.49 40.44 32.49 43.46 35.47 C44.88 36.88 46.28 38.3 47.68 39.72 C49.65 41.66 51.63 43.43 53.78 45.16 C54.46 45.7 55.13 46.25 55.83 46.82 C56.53 47.37 57.22 47.93 57.94 48.5 C59.32 49.61 60.71 50.73 62.09 51.84 C63.08 52.64 63.08 52.64 64.1 53.46 C65.86 54.88 67.58 56.34 69.3 57.81 C71.93 60.12 71.93 60.12 75.19 61.5 C78 63 78 63 79.39 65.41 C81.21 68.33 82.64 69.3 85.62 70.94 C86.94 71.69 86.94 71.69 88.29 72.46 C89.18 72.97 90.08 73.48 91 74 C92.7 75 94.39 76.02 96.06 77.06 C96.8 77.51 97.53 77.95 98.29 78.41 C100.54 80.5 100.8 81.97 101 85 C99.56 87.81 99.56 87.81 98 90 C90.65 88.96 83.8 87.14 76.84 84.59 C71.81 82.87 68.22 82.98 63 84 C61.98 84.56 61.98 84.56 60.94 85.12 C57.11 86.86 53.03 85.37 49.24 84.01 C45.66 82.89 42.29 82.46 38.56 82.06 C30.62 81.13 30.62 81.13 27.06 79.44 C24 77.77 24 77.77 20.25 77.77 C15.22 77.2 12.52 74.7 8.94 71.31 C8.36 70.79 7.79 70.28 7.2 69.74 C6.05 68.7 4.9 67.65 3.75 66.59 C1.38 64.44 -1.08 62.39 -3.55 60.34 C-5.55 58.49 -6.71 56.39 -8 54 C-8.63 53.24 -9.27 52.48 -9.92 51.7 C-13.33 47.27 -15.04 42.21 -17 37 C-17.32 36.15 -17.65 35.3 -17.98 34.42 C-20.16 28.07 -21.06 21.68 -20 15 C-18 12.56 -18 12.56 -15 11 C-13.66 10.2 -12.33 9.39 -11 8.56 C-10.32 8.15 -9.63 7.73 -8.93 7.3 C-6.28 5.52 -4.18 3.31 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z M7 13 C4.49 15.97 3.93 18.25 3.81 22 C3.58 24.78 3.36 25.68 1.23 27.55 C-0.18 28.41 -1.62 29.23 -3.09 29.99 C-5.16 30.97 -5.16 30.97 -7 33 C-7.47 38.68 -7 42 -4 47 C-5.32 46.67 -6.64 46.34 -8 46 C-6.56 50.53 -4.02 53.55 -0.81 56.94 C-0.32 57.46 0.17 57.99 0.67 58.53 C4.23 62.31 7.94 65.75 12 69 C12.99 68.5 12.99 68.5 14 68 C15.69 68.31 15.69 68.31 18 69 C19.11 69.31 20.23 69.62 21.38 69.94 C23.17 70.46 23.17 70.46 25 71 C25.99 71.29 26.98 71.58 28 71.88 C30.44 72.79 32.4 73.75 34.62 75.06 C38.47 77.27 40.64 78 45 78 C45 78.66 45 79.32 45 80 C50.83 80.28 50.83 80.28 56 78 C58.09 74.17 59.13 70.27 58.69 65.94 C58.46 65.3 58.23 64.66 58 64 C57.34 64 56.68 64 56 64 C56 62.68 56 61.36 56 60 C56.99 60 57.98 60 59 60 C59 59.34 59 58.68 59 58 C58.34 58 57.68 58 57 58 C56.95 57.37 56.9 56.75 56.85 56.1 C56.74 54.88 56.74 54.88 56.62 53.62 C56.52 52.41 56.52 52.41 56.41 51.16 C56.17 48.8 56.17 48.8 54 47 C52.21 46.38 52.21 46.38 50.38 45.75 C39.82 41.87 33.01 33.14 27 23.95 C23.08 17.99 20.4 14.84 13.3 13.27 C10.72 12.92 10.72 12.92 7 13 Z \",fill:\"#452254\",transform:\"translate(944,538)\"})),_path187||(_path187=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.42 2.1 5.7 4.11 7 8 C7 8.66 7 9.32 7 10 C7.31 11.34 7.65 12.67 8 14 C7.34 14 6.68 14 6 14 C6.52 15.2 7.03 16.39 7.56 17.62 C9.96 24.14 7.81 28.87 5.33 35.05 C4 37 4 37 1.59 37.87 C-2.13 39.49 -2.9 41.8 -4.69 45.38 C-5.27 46.52 -5.85 47.66 -6.45 48.84 C-6.96 49.88 -7.47 50.92 -8 52 C-8.67 53.33 -9.33 54.67 -10 56 C-9.01 56.49 -9.01 56.49 -8 57 C-9.27 59.04 -10.61 61.04 -12 63 C-12.66 63 -13.32 63 -14 63 C-13.86 64.38 -13.71 65.75 -13.56 67.12 C-13.48 67.94 -13.39 68.76 -13.3 69.61 C-13.02 72.18 -13.02 72.18 -12.25 75.38 C-12 78 -12 78 -13 79.94 C-16.11 81.59 -18.66 80.69 -22 80 C-22.33 80.99 -22.66 81.98 -23 83 C-28.41 82.57 -31.75 81.42 -36 78 C-36 77.34 -36 76.68 -36 76 C-36.93 75.73 -37.86 75.46 -38.81 75.19 C-41.88 74.04 -43.04 73.5 -45 71 C-46.92 61.47 -42.11 53.94 -37.09 46.32 C-34.55 42.28 -32.24 38.13 -29.94 33.94 C-26.83 28.28 -23.67 22.67 -20.3 17.17 C-18.94 14.9 -17.69 12.58 -16.44 10.25 C-12.29 2.71 -9.21 -2.15 0 0 Z \",fill:\"#4A2E63\",transform:\"translate(408,1118)\"})),_path188||(_path188=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C6.37 1.95 6.37 1.95 10.06 1.5 C13.85 1.09 13.85 1.09 17 1 C19 3 19 3 19.56 6.12 C18.95 10.34 18.38 11.01 15.56 13.94 C11.93 17.78 10.91 20.74 11 26 C11.03 27.1 11.07 28.2 11.1 29.34 C11.42 43.12 11.42 43.12 7 48 C3.63 50.34 0.08 51.66 -3.81 52.88 C-7.2 54.62 -7.67 56.43 -9 60 C-9.74 63.35 -10.44 66.7 -11.06 70.07 C-12.15 73.48 -12.96 74.23 -16 76 C-16.82 76.39 -17.63 76.77 -18.48 77.17 C-22.71 80.24 -24.26 84.92 -26.43 89.58 C-28.82 94.44 -31.27 97.29 -35.52 100.63 C-37.71 102.65 -38.06 104.46 -38.38 107.38 C-38.49 108.33 -38.61 109.29 -38.73 110.28 C-38.82 111.18 -38.91 112.07 -39 113 C-39.31 114.95 -39.31 114.95 -39.62 116.94 C-39.77 118.29 -39.89 119.64 -40 121 C-40.07 121.8 -40.13 122.6 -40.2 123.42 C-40.65 134.44 -38.49 146.53 -35 157 C-34.27 162.72 -34.06 167.5 -37.62 172.25 C-39.22 174.14 -40.82 175.84 -42.66 177.48 C-47.88 182.47 -48.04 188.29 -48.62 195.12 C-48.93 198.25 -49.4 200.94 -50.25 203.94 C-51.25 207.96 -50.6 211.03 -49.52 214.98 C-48.91 217.36 -48.84 219.55 -49 222 C-50.32 222 -51.64 222 -53 222 C-57.1 206.4 -58.66 190.48 -50.21 175.91 C-42.8 162.83 -43.9 148.69 -44 134 C-44.01 133.08 -44.01 132.15 -44.02 131.2 C-44.03 129.63 -44.04 128.07 -44.05 126.5 C-44.05 125.8 -44.06 125.1 -44.06 124.38 C-44.07 123.69 -44.07 123 -44.08 122.3 C-44.12 92.76 -44.12 92.76 -36.75 83.41 C-35 82 -35 82 -32.06 80.83 C-27.8 78.28 -26.81 75.24 -25 70.75 C-22.74 65.26 -20.42 61.08 -16.41 56.69 C-14.2 54.04 -12.92 51.15 -11.56 48 C-11.05 46.85 -10.53 45.69 -10 44.5 C-8.54 39.4 -9.5 35.6 -11.06 30.62 C-12.5 25.06 -12.87 20.22 -10.75 14.81 C-8.89 11.83 -7 8.89 -5 6 C-9.55 5.82 -12.88 6 -17 8 C-11.61 2.3 -8.11 -0.75 0 0 Z \",fill:\"#593960\",transform:\"translate(1096,1058)\"})),_path189||(_path189=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.43 1.26 4.37 2.75 6.58 5.53 C9.17 8.32 12.34 10.06 15.62 11.94 C16.61 12.53 16.61 12.53 17.62 13.13 C21.23 15.26 21.23 15.26 25.16 16.64 C27.77 17.3 28.95 18.65 30.81 20.56 C31.43 21.18 32.04 21.8 32.67 22.43 C34.06 24.12 34.06 24.12 34.06 26.12 C34.7 26.39 35.34 26.66 36 26.94 C38.06 28.12 38.06 28.12 39.06 31.12 C40.05 30.63 40.05 30.63 41.06 30.12 C41.91 31.83 42.74 33.54 43.56 35.25 C44.03 36.2 44.49 37.15 44.97 38.13 C46.15 41.37 46.33 43.71 46.06 47.12 C45.57 48.12 45.57 48.12 45.06 49.12 C46.05 48.8 47.04 48.47 48.06 48.12 C46.53 51.58 44.48 54.23 42.06 57.12 C41.26 58.16 40.45 59.19 39.62 60.25 C37.14 63.04 35.51 64.73 32.06 66.12 C28.72 65.9 26.06 65.63 23.06 64.12 C23.06 63.47 23.06 62.81 23.06 62.12 C22.4 62.12 21.74 62.12 21.06 62.12 C21.06 61.47 21.06 60.81 21.06 60.12 C19.74 59.8 18.42 59.47 17.06 59.12 C17.06 58.47 17.06 57.81 17.06 57.12 C15.83 56.85 15.83 56.85 14.56 56.56 C5.16 52.7 1.06 45.3 -3.12 36.5 C-6.93 28.71 -11.48 21.27 -17.81 15.25 C-20.08 12.98 -20.98 11.16 -21.94 8.12 C-22.6 8.12 -23.26 8.12 -23.94 8.12 C-23.94 6.47 -23.94 4.82 -23.94 3.12 C-22.95 3.46 -21.96 3.78 -20.94 4.12 C-18.3 3.73 -18.3 3.73 -15.94 3.12 C-15.94 3.78 -15.94 4.44 -15.94 5.12 C-9.26 4.84 -5.47 0.23 0 0 Z \",fill:\"#482859\",transform:\"translate(738.9375,130.875)\"})),_path190||(_path190=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.97 0.14 1.94 0.29 2.94 0.44 C4.29 0.63 5.65 0.81 7 1 C7.7 1.11 8.4 1.21 9.12 1.32 C14.89 2.12 20.23 1.78 26 1 C26.17 1.57 26.34 2.14 26.52 2.72 C27.94 7.25 29.55 11.14 32.03 15.18 C33.16 17.29 33.81 19.39 34.5 21.69 C35.42 24.68 35.86 25.86 38.12 28.12 C40.8 30.8 40.48 33.28 41 37 C41.73 39.42 42.52 41.81 43.38 44.19 C44.01 45.97 44.01 45.97 44.65 47.79 C45.86 50.67 47.06 52.6 49 55 C51.68 59.2 53.9 63.61 56.12 68.06 C56.48 68.77 56.84 69.48 57.21 70.21 C57.56 70.89 57.9 71.58 58.26 72.29 C58.57 72.9 58.88 73.52 59.2 74.16 C60.04 76.08 60.55 77.95 61 80 C60.57 79.5 60.13 79.01 59.69 78.5 C58 76.67 58 76.67 55 77 C40.93 51.78 40.93 51.78 39 46 C38.01 45.5 38.01 45.5 37 45 C35.97 43.35 34.97 41.68 34 40 C32.82 38.58 32.82 38.58 29.44 38.94 C27.74 38.97 27.74 38.97 26 39 C26 38.01 26 37.02 26 36 C26.99 36 27.98 36 29 36 C29 35.34 29 34.68 29 34 C27.68 33.67 26.36 33.34 25 33 C25 32.01 25 31.02 25 30 C24.01 30.33 23.02 30.66 22 31 C22.21 31.52 22.41 32.03 22.62 32.56 C23.16 36.03 22.08 38.71 21 42 C20.67 42 20.34 42 20 42 C19.01 37.05 19.01 37.05 18 32 C17.34 32 16.68 32 16 32 C16.08 32.76 16.16 33.52 16.25 34.31 C16.62 40.39 16.57 44.08 12.5 48.81 C11.53 49.89 11.53 49.89 10.55 50.98 C8.27 53.95 8.74 56.36 9 60 C8.57 63.08 7.85 65.48 6 68 C1.46 70.77 -2.7 72 -8 72 C-9.75 70 -9.75 70 -11 68 C-10.01 67.01 -9.02 66.02 -8 65 C-8.34 64.35 -8.68 63.7 -9.02 63.02 C-11.39 58.4 -13.36 53.93 -15 49 C-15.66 48.67 -16.32 48.34 -17 48 C-16.29 46.29 -15.58 44.58 -14.88 42.88 C-14.42 41.77 -13.96 40.66 -13.49 39.52 C-12.53 37.26 -11.54 35.02 -10.51 32.79 C-6.2 23.39 -3.74 13.9 -1.48 3.84 C-1 2 -1 2 0 0 Z M49 59 C50 61 50 61 50 61 Z M50 61 C51 63 51 63 51 63 Z M51 63 C52 65 52 65 52 65 Z M53 67 C53.33 68.65 53.66 70.3 54 72 C54.33 71.01 54.66 70.02 55 69 C54.34 68.34 53.68 67.68 53 67 Z \",fill:\"#2F163C\",transform:\"translate(922,363)\"})),_path191||(_path191=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 1.38 1.5 1.38 3 3 C3 3.66 3 4.32 3 5 C3.76 5.27 4.53 5.54 5.31 5.81 C9.5 7.66 9.5 7.66 11 10 C10.75 12.81 10.75 12.81 10 16 C9.72 17.67 9.72 17.67 9.44 19.38 C9.29 20.24 9.15 21.11 9 22 C8.34 22 7.68 22 7 22 C7.5 23.49 7.5 23.49 8 25 C8.07 26.73 8.08 28.46 8.06 30.19 C8.05 31.09 8.04 31.99 8.04 32.92 C8.02 33.61 8.01 34.29 8 35 C8.91 35.21 9.81 35.41 10.75 35.62 C14.95 37.4 16.06 38.89 18 43 C18.58 47.45 18.07 51.67 17.31 56.06 C16.92 60.98 18.01 63.54 20 68 C20.66 68 21.32 68 22 68 C22.06 67.41 22.13 66.81 22.19 66.2 C23.57 56.85 28.42 47.93 35.89 41.95 C40.33 39.95 45.26 40.58 50 41 C50 42.98 50 44.96 50 47 C54.18 48.39 57.38 47.72 61.38 45.94 C61.91 45.63 62.45 45.32 63 45 C62.47 49.2 61.57 52.23 59.44 55.88 C52.84 67.61 47.37 79.06 43.31 91.92 C42.02 96.02 40.46 99.97 38.81 103.94 C37.64 106.91 36.81 109.91 36 113 C35.67 113 35.34 113 35 113 C34.53 106.62 36.22 101.65 38.38 95.69 C40.57 89.55 42.38 83.6 43.56 77.19 C44.81 70.97 47.69 65.35 51 60 C51.7 57.81 51.7 57.81 52 56 C51.2 56.02 50.39 56.04 49.56 56.06 C47 56 47 56 46 55 C44.47 55.25 42.95 55.58 41.44 55.94 C40.61 56.13 39.78 56.33 38.93 56.53 C38.3 56.68 37.66 56.84 37 57 C36.77 58.28 36.55 59.56 36.31 60.88 C35.29 65.57 33.43 69.45 31.12 73.64 C29.95 76.1 29.52 78.34 29 81 C26.7 83.47 25.28 83.95 21.94 84.5 C19 84 19 84 17.25 81.62 C16.84 80.76 16.42 79.89 16 79 C15.01 78.01 15.01 78.01 14 77 C13.02 75.6 12.06 74.18 11.12 72.75 C9.33 70.03 7.53 67.31 5.69 64.62 C2.89 60.27 2.75 56.27 2.5 51.25 C2.24 46.13 1.98 41.05 1 36 C-1.83 34.59 -3.87 34.68 -7 35 C-9.51 37.7 -10.46 40.07 -11.25 43.62 C-13.2 51.31 -16.24 58.55 -19.18 65.9 C-20.24 68.6 -21.2 71.33 -22.19 74.06 C-24.77 80.81 -27.89 87.3 -31 93.81 C-31.51 94.89 -32.02 95.96 -32.55 97.07 C-35.39 102.95 -38.42 108.54 -42 114 C-43.01 115.66 -44.01 117.33 -45 119 C-46.5 114.5 -44.73 111.48 -42.69 107.35 C-42.2 106.48 -41.71 105.6 -41.21 104.69 C-40.66 103.7 -40.12 102.72 -39.56 101.7 C-38.98 100.67 -38.41 99.63 -37.81 98.56 C-21.75 70.44 -21.75 70.44 -18 39 C-18.23 38.31 -18.45 37.63 -18.69 36.92 C-19.14 34.12 -18.04 33.04 -16.44 30.75 C-13.16 25.63 -11.13 20.43 -9.18 14.71 C-7.2 9.03 -4.54 4.08 0 0 Z \",fill:\"#38154A\",transform:\"translate(498,669)\"})),_path192||(_path192=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.3 2.64 -6.6 5.28 -10 8 C-10.66 7.34 -11.32 6.68 -12 6 C-4.8 -1.6 -4.8 -1.6 0 0 Z M-14 8 C-13.51 9.48 -13.51 9.48 -13 11 C-10.03 10.51 -10.03 10.51 -7 10 C-7 10.66 -7 11.32 -7 12 C-9.24 13.63 -11.48 15.14 -13.81 16.62 C-15.2 17.54 -16.59 18.45 -17.98 19.37 C-20.31 20.9 -22.66 22.42 -25.02 23.91 C-30.86 27.8 -35.32 32.3 -39.75 37.69 C-40.29 38.33 -40.83 38.97 -41.38 39.63 C-44.33 43.28 -44.33 43.28 -44.96 47.78 C-44 50.22 -44 50.22 -41.88 52.88 C-40 56 -40 56 -40 59.5 C-41.41 64.43 -43.96 68.77 -48 72 C-50.52 72.41 -50.52 72.41 -53.38 72.5 C-59.21 72.87 -59.21 72.87 -64 76 C-70.95 86.84 -71.19 99.23 -71.25 111.69 C-71.27 112.8 -71.29 113.92 -71.31 115.06 C-71.32 116.14 -71.32 117.22 -71.33 118.32 C-71.34 119.29 -71.35 120.26 -71.36 121.26 C-70.94 124.49 -69.79 126.32 -68 129 C-63.63 140.26 -62.48 154.98 -64.48 166.88 C-65.23 171.42 -65.35 175.96 -65.52 180.55 C-65.69 184.12 -66.03 187.1 -67.03 190.57 C-68.78 197.02 -68.21 203.87 -68.12 210.5 C-68.11 211.91 -68.11 213.32 -68.1 214.73 C-68.07 218.15 -68.04 221.58 -68 225 C-70.97 225 -73.94 225 -77 225 C-77.08 220.24 -77.01 215.63 -76.5 210.89 C-75.96 205.08 -75.85 199.33 -75.88 193.5 C-75.88 192.46 -75.88 191.42 -75.88 190.34 C-75.92 183.25 -76.14 176.19 -76.64 169.12 C-77.8 151.93 -76.72 134.62 -76 117.44 C-75.81 112.83 -75.62 108.23 -75.44 103.62 C-75.39 102.52 -75.35 101.42 -75.3 100.29 C-75.02 92.62 -74.94 84.97 -75.07 77.28 C-74.9 69.65 -72.15 64.77 -67.46 58.96 C-66.04 57.06 -65.1 55.28 -64.12 53.12 C-59.08 42.67 -50.44 35.67 -41.69 28.43 C-38.45 25.69 -35.37 22.76 -32.28 19.84 C-29.69 17.75 -27.02 16.39 -24 15 C-24 14.01 -24 13.02 -24 12 C-23.34 12 -22.68 12 -22 12 C-22 11.34 -22 10.68 -22 10 C-21.24 10.04 -20.47 10.08 -19.69 10.12 C-16.77 10.22 -16.77 10.22 -14 8 Z \",fill:\"#57385E\",transform:\"translate(1086,1055)\"})),_path193||(_path193=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C1.99 2.33 2.98 2.66 4 3 C8.43 12.47 8.57 22.78 8.82 33.02 C8.94 37.73 9.42 42.33 10 47 C11.13 43.62 11.14 40.87 11.25 37.31 C11.67 30.56 13.18 25.82 18 21 C20.69 21.18 23.33 21.62 26 22 C25.34 22.33 24.68 22.66 24 23 C24.33 23.64 24.66 24.28 25 24.94 C26.63 29.93 26.75 34.81 25.05 39.8 C23.85 43.45 23.4 47.02 23 50.81 C22.34 56.65 21.43 62.3 20 68 C19.34 68 18.68 68 18 68 C18 68.66 18 69.32 18 70 C18.66 70 19.32 70 20 70 C20.22 71.64 20.22 71.64 20.44 73.31 C20.88 76.93 20.88 76.93 22 80 C20.13 84.06 17.69 86.51 14 89 C13.01 89 12.02 89 11 89 C10.34 92.3 9.68 95.6 9 99 C10.65 98.67 12.3 98.34 14 98 C12.73 100.04 11.39 102.04 10 104 C9.34 104 8.68 104 8 104 C7.69 105.39 7.69 105.39 7.38 106.81 C5.07 114.87 0.2 122.5 -5 129 C-5.66 129 -6.32 129 -7 129 C-7.22 129.54 -7.45 130.08 -7.68 130.64 C-10.72 136.08 -15.69 140.53 -20 145 C-20.64 145.67 -21.28 146.34 -21.94 147.02 C-30.39 155.07 -43.49 162.76 -55.19 163.75 C-56.23 163.85 -57.28 163.95 -58.36 164.05 C-61 164 -61 164 -63 162 C-60.04 159.9 -57.46 158.79 -53.94 158.12 C-47.96 156.94 -42.53 154.5 -37 152 C-36.24 151.66 -35.49 151.32 -34.71 150.97 C-32.82 150.11 -32.82 150.11 -32 148 C-31.42 147.9 -30.85 147.79 -30.25 147.69 C-26.91 146.67 -25.37 144.54 -23 142 C-21.9 140.94 -20.79 139.87 -19.69 138.81 C-8.29 127.61 -8.29 127.61 -2.88 113.24 C-2.92 112.5 -2.96 111.76 -3 111 C-3.74 111.99 -4.49 112.98 -5.25 114 C-6.52 115.69 -6.52 115.69 -8 117 C-11.67 117 -15.33 117 -19 117 C-18.21 115.56 -17.42 114.12 -16.62 112.69 C-16.18 111.89 -15.74 111.09 -15.29 110.26 C-14.26 108.46 -13.15 106.72 -12 105 C-11.34 105 -10.68 105 -10 105 C-9.89 104.4 -9.78 103.79 -9.67 103.17 C-8.78 98.68 -8.03 95.54 -5 92 C-4.29 90.35 -3.61 88.69 -3 87 C-2.01 87.99 -2.01 87.99 -1 89 C2 89.33 2 89.33 5 89 C7.27 87.2 7.27 87.2 7.01 84.72 C6.85 83.41 6.85 83.41 6.69 82.06 C6.59 81.19 6.49 80.31 6.39 79.41 C6.05 76.87 6.05 76.87 5 74 C3.02 74.99 3.02 74.99 1 76 C1 73.36 1 70.72 1 68 C0.01 68.33 -0.98 68.66 -2 69 C-2.5 70.48 -2.5 70.48 -3 72 C-3.48 72.47 -3.96 72.94 -4.46 73.43 C-6.25 75.25 -6.86 76.78 -7.69 79.19 C-7.94 79.9 -8.19 80.62 -8.45 81.36 C-8.63 81.9 -8.81 82.44 -9 83 C-10.49 78.38 -8.85 74.91 -7.31 70.5 C-6.18 67.01 -5.08 63.51 -4 60 C-3.78 59.27 -3.55 58.55 -3.32 57.8 C2.11 39.23 0.36 19.13 0 0 Z \",fill:\"#351547\",transform:\"translate(440,1077)\"})),_path194||(_path194=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.78 1.53 1.57 2.31 2.38 C4.91 5.07 4.91 5.07 8 7 C8.56 9.19 8.56 9.19 9 12 C10.36 17.27 12.19 22.15 14.38 27.12 C14.81 28.16 14.81 28.16 15.26 29.21 C17.04 33.31 19.01 36.61 22 40 C24.97 38.02 27.94 36.04 31 34 C36.81 37.05 39.26 41.17 42 47 C43.15 50.74 43.47 53.75 42.06 57.5 C39.31 59.5 37.27 59.4 33.94 59.34 C32 59 32 59 29 57 C28.01 57 27.02 57 26 57 C26.05 57.87 26.05 57.87 26.11 58.76 C26.29 63.95 26.16 67.65 23 72 C16.53 77 16.53 77 13 77 C13 77.66 13 78.32 13 79 C11.93 79.45 11.93 79.45 10.85 79.92 C9.93 80.34 9.01 80.76 8.06 81.19 C7.15 81.59 6.23 82 5.29 82.42 C2.78 83.8 2.78 83.8 2.25 86.49 C2.16 87.32 2.08 88.15 2 89 C1.67 89.99 1.34 90.98 1 92 C-9.26 76.46 -9.26 76.46 -8.75 71.62 C-8 70 -8 70 -7 69 C-7.99 68.01 -8.98 67.02 -10 66 C-9.5 65.01 -9.5 65.01 -9 64 C-9.33 63.34 -9.66 62.68 -10 62 C-10.26 58.88 -10.23 55.75 -10.25 52.62 C-10.27 51.76 -10.29 50.9 -10.31 50.01 C-10.35 43.6 -10.35 43.6 -8.48 40.4 C-7.99 39.94 -7.5 39.48 -7 39 C-6.34 39.66 -5.68 40.32 -5 41 C-3.02 38.52 -3.02 38.52 -1 36 C-1.99 35.01 -2.98 34.02 -4 33 C-3.67 32.01 -3.34 31.02 -3 30 C-3.68 27.58 -3.68 27.58 -4.81 25.06 C-5.17 24.21 -5.53 23.35 -5.89 22.47 C-6.87 20.28 -7.91 18.14 -9 16 C-4.25 11.12 -4.25 11.12 -2 10 C-1.57 7.91 -1.57 7.91 -1.44 5.5 C-1.1 1.1 -1.1 1.1 0 0 Z \",fill:\"#290E3D\",transform:\"translate(901,441)\"})),_path195||(_path195=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C1.39 2.12 0.77 3.25 0.14 4.4 C-0.68 5.91 -1.5 7.43 -2.31 8.94 C-2.72 9.67 -3.12 10.41 -3.54 11.17 C-5.98 15.72 -7.86 20.16 -9.33 25.11 C-10.3 27.85 -11.68 29.29 -14 31 C-14.74 31.27 -15.49 31.54 -16.25 31.81 C-21.51 34.09 -25.84 38.27 -29 43 C-29.66 43 -30.32 43 -31 43 C-31.21 43.72 -31.41 44.44 -31.62 45.19 C-33.09 48.19 -34.72 49.42 -37.3 51.46 C-45.46 58.84 -51.85 72.23 -54 83 C-54.66 83 -55.32 83 -56 83 C-56.27 83.7 -56.54 84.4 -56.81 85.12 C-58.07 88.16 -59.5 91.07 -61 94 C-62.32 94 -63.64 94 -65 94 C-64.67 94.99 -64.34 95.98 -64 97 C-67 99 -67 99 -69.69 98.62 C-70.45 98.42 -71.21 98.21 -72 98 C-71.4 94.93 -70.75 91.87 -70.06 88.81 C-69.89 88.03 -69.72 87.26 -69.54 86.45 C-69.18 84.82 -68.81 83.18 -68.43 81.55 C-67.15 75.8 -65.94 69.87 -67 64 C-69.29 61.21 -69.29 61.21 -72 59 C-72.27 57.95 -72.54 56.9 -72.81 55.81 C-73.67 52.89 -73.67 52.89 -75.89 52.18 C-77.91 51.68 -79.95 51.33 -82 51 C-78.57 41.57 -70.69 30.33 -62 25 C-58.49 24.13 -54.97 23.55 -51.41 22.94 C-47.71 21.92 -45.87 20.48 -43 18 C-39.94 17.38 -39.94 17.38 -37 18 C-35 20.69 -35 20.69 -33 24 C-31.04 25.71 -29.04 27.38 -27 29 C-25.65 30.32 -24.31 31.64 -23 33 C-23 32.34 -23 31.68 -23 31 C-21.85 29.89 -20.7 28.77 -19.55 27.66 C-14.04 21.75 -9.91 14.39 -5.68 7.54 C-3.93 4.89 -2.02 2.45 0 0 Z \",fill:\"#3C194D\",transform:\"translate(345,714)\"})),_path196||(_path196=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0.25 2 0.25 4 1 C4.33 1.99 4.66 2.98 5 4 C5.99 4.33 6.98 4.66 8 5 C8 5.99 8 6.98 8 8 C10.47 8.99 10.47 8.99 13 10 C13 10.66 13 11.32 13 12 C13.57 12.26 14.14 12.52 14.73 12.79 C17.2 14.11 19.13 15.62 21.25 17.44 C21.96 18.03 22.66 18.63 23.39 19.25 C25 21 25 21 25 24 C25.66 24 26.32 24 27 24 C27.39 24.89 27.78 25.77 28.19 26.69 C29.85 30.1 29.85 30.1 32.62 32.62 C35.11 35.11 35.31 35.77 36 39 C37.29 41.03 38.63 43.02 40 45 C41.26 47.12 42.52 49.23 43.75 51.36 C44.99 53.31 44.99 53.31 48 54 C48.15 52.82 48.15 52.82 48.31 51.62 C49 49 49 49 52 47 C53.32 47.66 54.64 48.32 56 49 C56.33 48.01 56.66 47.02 57 46 C60.06 44.81 60.06 44.81 63 44 C63.33 44.66 63.66 45.32 64 46 C63.51 46.99 63.51 46.99 63 48 C64.32 47.67 65.64 47.34 67 47 C67 45.68 67 44.36 67 43 C72.47 40.07 72.47 40.07 75.75 39.62 C76.49 39.42 77.23 39.21 78 39 C78.7 37.35 79.36 35.68 80 34 C82.25 32.06 82.25 32.06 85 31 C87.94 31.81 87.94 31.81 91 33 C94.13 33.5 94.13 33.5 97 33 C98.77 31.08 98.77 31.08 100 29 C100.66 29 101.32 29 102 29 C102.37 27.92 102.37 27.92 102.75 26.81 C104 24 104 24 106.06 21.75 C108.44 18.38 108.59 15.93 108.82 11.89 C109 10 109 10 110 9 C110.04 7.33 110.04 5.67 110 4 C113.84 6.5 117.46 9.08 121 12 C120.34 13.32 119.68 14.64 119 16 C118.34 16 117.68 16 117 16 C116.51 13.52 116.51 13.52 116 11 C115.34 11 114.68 11 114 11 C114 11.66 114 12.32 114 13 C113.34 13 112.68 13 112 13 C112.1 14.11 112.21 15.23 112.31 16.38 C112.37 20.28 111.34 22.39 109.31 25.69 C106.82 30.2 106.94 32.82 108.12 37.81 C108.73 39.88 109.36 41.94 110 44 C110.83 46.68 110.83 46.68 111 49 C109.57 50.77 109.57 50.77 107.56 52.38 C104.29 55.29 104.29 55.29 103.69 59.75 C103.79 60.82 103.89 61.89 104 63 C103.34 63.99 102.68 64.98 102 66 C95.88 66.44 95.88 66.44 93 65 C93 64.34 93 63.68 93 63 C92.2 63.4 92.2 63.4 91.39 63.8 C89.26 64.87 87.13 65.93 85 67 C83.94 67.59 83.94 67.59 82.86 68.2 C82.25 68.46 81.63 68.73 81 69 C79 68 79 68 78 65 C76.76 61.36 76.76 61.36 75 58 C72.93 56.96 72.93 56.96 71 57 C69.26 60.05 68.75 62.53 68.38 66 C67.9 68.69 67.9 68.69 67 71 C64.99 72.28 63.01 72.97 60.78 73.8 C58.75 74.9 58.75 74.9 58.25 77.45 C58.02 79.99 57.92 82.45 58 85 C56.22 84.86 56.22 84.86 54 84 C52.18 81.49 52.18 81.49 50.44 78.31 C49.86 77.28 49.28 76.24 48.68 75.18 C46.27 70.62 44 66.16 42.25 61.31 C40.26 56.18 37.47 51.8 34.39 47.25 C33 45 33 45 33 43 C32.39 42.76 31.79 42.51 31.16 42.26 C27.31 40.01 25.81 35.96 24 32 C23.54 30.24 23.54 30.24 23.06 28.44 C20.61 20.52 13.47 12.66 6.38 8.44 C3.12 6.47 1.33 3.99 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#391948\",transform:\"translate(1158,807)\"})),_path197||(_path197=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.47 8.95 -0.22 14.33 -4 20 C-4.66 20 -5.32 20 -6 20 C-6.19 20.89 -6.39 21.78 -6.59 22.7 C-6.85 23.87 -7.11 25.04 -7.38 26.25 C-7.76 27.99 -7.76 27.99 -8.15 29.77 C-9 33 -9 33 -10.16 34.94 C-11.5 38.21 -10.68 41.36 -10.12 44.75 C-10.02 45.45 -9.92 46.14 -9.81 46.86 C-9.55 48.58 -9.28 50.29 -9 52 C-5.45 50.04 -2.88 48.07 -0.25 45 C0.34 44.32 0.94 43.64 1.55 42.94 C3.19 40.96 3.19 40.96 4 38 C5.64 36.71 5.64 36.71 7.69 35.38 C11.06 32.99 13 30.73 15.12 27.19 C17.61 23.12 17.61 23.12 21.38 21.94 C22.24 21.96 23.11 21.98 24 22 C23.74 26.3 23.3 28.95 20.62 32.38 C15.5 39.03 14.61 45.79 15 54 C15.66 54 16.32 54 17 54 C16.67 57.63 16.34 61.26 16 65 C14.35 65 12.7 65 11 65 C10.76 66.06 10.52 67.13 10.27 68.23 C8.34 76.58 6.28 84.83 3.83 93.05 C3.09 95.69 2.49 98.3 2 101 C1.67 101 1.34 101 1 101 C1.33 93.41 1.66 85.82 2 78 C2.66 78 3.32 78 4 78 C3.5 73.55 3.5 73.55 3 69 C-1.69 69.52 -1.69 69.52 -6.18 70.88 C-10.8 72.71 -15.61 73.86 -20.41 75.14 C-24.38 76.22 -28.21 77.35 -32 79 C-32 79.66 -32 80.32 -32 81 C-32.99 81.5 -32.99 81.5 -34 82 C-34 82.99 -34 83.98 -34 85 C-34.59 86.97 -34.59 86.97 -35.38 89.06 C-35.63 89.75 -35.89 90.45 -36.15 91.16 C-37 93 -37 93 -39 95 C-39.25 97.52 -39.42 99.97 -39.5 102.5 C-39.73 109.73 -39.73 109.73 -42 112 C-42 109.36 -42 106.72 -42 104 C-42.66 104 -43.32 104 -44 104 C-43.29 100.91 -42.57 97.82 -41.86 94.73 C-41.3 92.32 -40.75 89.9 -40.2 87.49 C-39.95 86.38 -39.7 85.27 -39.44 84.12 C-39.21 83.12 -38.98 82.11 -38.75 81.07 C-36.8 73.07 -34.19 65.27 -31.65 57.45 C-30.15 52.77 -28.73 48.1 -27.47 43.36 C-26.17 38.51 -24.64 33.79 -22.94 29.06 C-22.55 27.97 -22.55 27.97 -22.16 26.86 C-20.95 23.47 -19.73 20.16 -18 17 C-17.01 17.33 -16.02 17.66 -15 18 C-10.77 14.27 -8.24 10.24 -5.53 5.3 C-3.93 2.9 -2.39 1.58 0 0 Z \",fill:\"#351047\",transform:\"translate(515,135)\"})),_path198||(_path198=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.44 0.48 0.88 0.96 1.33 1.46 C3.68 3.63 5.54 3.5 8.69 3.69 C9.68 3.75 10.68 3.82 11.7 3.89 C12.46 3.92 13.22 3.96 14 4 C14 8.82 13.24 9.58 10 13 C7.82 14.71 5.66 16.31 3.38 17.88 C2.45 18.53 2.45 18.53 1.5 19.19 C-1.28 21.15 -4.09 23.06 -6.93 24.92 C-11 27.62 -14.21 29.95 -17 34 C-22.34 41.74 -31.36 45.92 -39.43 50.32 C-42.13 52.09 -43.37 53.24 -45 56 C-45.36 59.02 -45.36 59.02 -45.19 62.34 C-45.16 63.57 -45.14 64.8 -45.12 66.06 C-45.04 68.64 -44.96 71.22 -44.88 73.8 C-44.86 75.03 -44.84 76.26 -44.81 77.53 C-44.76 79.21 -44.76 79.21 -44.71 80.93 C-45.04 84.4 -46.07 86.15 -48 89 C-48.66 91.48 -48.66 91.48 -49 94 C-49.69 97.91 -50.61 100.75 -53 104 C-54.32 103.67 -55.64 103.34 -57 103 C-58.06 96.61 -59.04 90.27 -59.5 83.81 C-59.76 80.27 -60.18 76.96 -61 73.5 C-62.8 65.17 -62.74 56.49 -63 48 C-63.02 47.29 -63.05 46.58 -63.07 45.85 C-63.3 38.05 -63.3 38.05 -63 35 C-60.52 32.52 -58.16 32.16 -54.83 31.3 C-39.66 27.33 -26.39 19.97 -13.35 11.37 C-12.52 10.82 -11.68 10.27 -10.82 9.71 C-9.92 8.86 -9.92 8.86 -9 8 C-9 6.68 -9 5.36 -9 4 C-6.48 0.76 -4.11 0 0 0 Z \",fill:\"#67476D\",transform:\"translate(729,593)\"})),_path199||(_path199=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.41 0.22 7.08 0.4 10.81 2.81 C13.51 6.74 14.32 10.3 15.3 14.93 C16.1 18.43 17.28 21.65 18.64 24.96 C19.36 29.07 17.12 31.83 14.86 35.12 C2.81 51.06 2.81 51.06 -7.28 52.77 C-7.85 52.85 -8.41 52.92 -9 53 C-8.69 58.23 -7.58 62.28 -5.56 67.12 C-0.59 79.53 0.44 92.87 -2.44 105.88 C-4.05 113.21 -4.46 120.36 -4.62 127.85 C-4.74 132.38 -5.03 135.84 -7 140 C-7.32 143.02 -7.32 143.02 -6 146 C-4.1 147.71 -2.09 149.13 0 150.59 C6.33 155.06 8.16 161.77 10 169 C10.89 174.69 9.86 180.03 7 185 C4.49 188.27 1.95 190.53 -2.12 191.51 C-8.28 191.82 -14.13 190.1 -20.02 188.49 C-24.09 187.4 -27.89 186.73 -32.12 186.5 C-36.89 186.15 -39.37 185.32 -43 182 C-45.24 179.33 -47.4 176.62 -49.55 173.89 C-52.67 170.21 -56.14 167.15 -59.84 164.07 C-66.38 157.81 -66.1 150.84 -66.31 142.38 C-66.32 141.52 -66.33 140.66 -66.34 139.77 C-66.45 135.04 -66.45 135.04 -68.48 130.89 C-72.38 129.51 -75.99 130.03 -80.06 130.44 C-81.68 130.59 -83.29 130.74 -84.91 130.87 C-85.62 130.94 -86.34 131.01 -87.07 131.09 C-89 131 -89 131 -92 129 C-95.31 138.31 -95.31 138.31 -97 148 C-97.33 148 -97.66 148 -98 148 C-98.33 139.5 -98.68 129.43 -92.88 122.69 C-91.45 121.36 -91.45 121.36 -90 120 C-88.19 120.25 -88.19 120.25 -86 121 C-85.6 121.67 -85.2 122.34 -84.78 123.03 C-83 125.43 -83 125.43 -79.09 125.47 C-77.56 125.5 -76.03 125.51 -74.5 125.5 C-71.57 125.49 -68.93 125.65 -66 126 C-63.89 128.09 -63.07 129.4 -62.71 132.36 C-62.74 133.22 -62.78 134.07 -62.81 134.96 C-62.84 135.91 -62.86 136.85 -62.88 137.83 C-62.96 139.81 -63.04 141.78 -63.12 143.76 C-63.26 149.68 -62.99 153.82 -60 159 C-56.67 161.22 -55.86 161.7 -52 161 C-50.22 159.72 -48.65 158.29 -47.04 156.8 C-35.5 146.63 -35.5 146.63 -28.75 147 C-24.96 147.47 -23.11 148.34 -20.56 151.19 C-18.24 154.28 -17.14 157.31 -16 161 C-15.01 161.33 -14.02 161.66 -13 162 C-10.79 165.96 -10.59 169.53 -11 174 C-13.07 177.34 -16.35 177.95 -20 179 C-19.73 180.98 -19.73 180.98 -19 183 C-15.68 184.11 -13.11 184.17 -9.62 184.19 C-8.5 184.2 -7.38 184.22 -6.23 184.23 C-1.83 183.92 0.94 182.89 4.31 180.06 C7.22 174.78 6.75 169.42 5.48 163.64 C3.18 157.25 -1.4 153.68 -6.64 149.55 C-9.66 146.29 -10.02 144.42 -10 140 C-9.54 139.09 -9.08 138.17 -8.6 137.23 C-6.32 132.62 -6.47 128.33 -6.38 123.25 C-6.32 121.36 -6.27 119.47 -6.21 117.58 C-6.18 116.65 -6.16 115.72 -6.13 114.77 C-5.96 111.22 -5.6 107.72 -5.22 104.19 C-4.75 99.46 -4.88 94.75 -5 90 C-5.01 88.49 -5.01 88.49 -5.02 86.95 C-5.41 75.56 -9.16 60.73 -17 52 C-18.94 50.4 -20.79 49.23 -23 48 C-20 47 -20 47 -17 48 C-14.71 48.15 -12.42 48.22 -10.12 48.25 C-8.91 48.28 -7.7 48.3 -6.45 48.33 C0.78 47.64 4.37 42.77 8.9 37.56 C13.77 31.7 13.77 31.7 14.88 24.31 C14.18 21.16 14.18 21.16 12.99 19.14 C11.8 16.57 11.57 14.31 11.25 11.5 C10.47 6.84 10.47 6.84 7.12 3.44 C6.09 2.96 5.06 2.49 4 2 C2.82 1.38 2.82 1.38 1.62 0.75 C1.09 0.5 0.55 0.26 0 0 Z \",fill:\"#846F90\",transform:\"translate(1232,1064)\"})),_path200||(_path200=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 -0.44 2.62 -0.44 6 0 C9.52 2.85 11.67 5.94 13 10.25 C13.77 13.24 13.77 13.24 16.69 14.75 C20.01 16.06 20.01 16.06 23.56 17 C27 18 27 18 29.38 19.44 C37.6 24.33 44.64 24.2 54 23 C56.41 26.94 58.4 30.67 60 35 C59.67 35.99 59.34 36.98 59 38 C58.59 37.51 58.17 37.01 57.75 36.5 C55.2 34.31 52.89 34.91 49.68 35.01 C46.62 35 43.71 34.68 40.69 34.25 C39.7 34.11 38.72 33.97 37.7 33.83 C33.25 32.46 31.45 29.7 29 25.88 C25.73 21.17 22.51 20.86 17.04 19.57 C14.15 18.76 11.62 17.44 9 16 C7.66 18.91 7.66 18.91 9 21.26 C9.47 22.06 9.95 22.86 10.44 23.69 C10.91 24.5 11.38 25.3 11.87 26.14 C12.24 26.75 12.62 27.37 13 28 C13.95 27.9 14.9 27.79 15.88 27.69 C21.16 27.66 25.57 30.33 30 33 C32 35 32 35 32.38 37.31 C31.87 40.96 30.66 42.48 28 45 C25.06 46.12 25.06 46.12 22 46 C19.03 43.57 17.13 41.19 15 38 C14.65 39.12 14.3 40.24 13.94 41.39 C13.48 42.87 13.02 44.34 12.56 45.81 C12.33 46.55 12.1 47.29 11.87 48.05 C10.93 51.04 9.99 54.03 9 57 C7.64 69.39 13.42 77.1 20.76 86.38 C23.01 89.02 23.74 89.86 27.1 90.24 C32.64 90.4 36.31 89.87 41.02 86.88 C43.9 85.6 45.88 85.55 49 86 C51.3 88.15 51.3 88.15 53.31 90.94 C53.99 91.85 54.67 92.77 55.36 93.71 C55.9 94.47 56.44 95.22 57 96 C57.33 96.33 57.66 96.66 58 97 C58.33 96.34 58.66 95.68 59 95 C60.79 94.27 62.61 93.61 64.44 93 C68.62 91.67 68.62 91.67 72 89 C72.64 86.93 72.64 86.93 73 85 C73.66 85 74.32 85 75 85 C75 81.04 75 77.08 75 73 C77.93 75.93 77.97 79.36 78.56 83.31 C78.69 84.14 78.82 84.98 78.95 85.83 C79.88 92.37 80.52 98.91 80.94 105.5 C81.01 106.4 81.08 107.3 81.15 108.23 C81.46 114.48 81.46 114.48 79.18 117.06 C76.07 118.4 74.37 118.6 71 118 C67.55 115.73 64.7 113.21 62.62 109.62 C60.58 107.58 59.72 107.68 56.88 107.56 C53.5 107.7 50.78 108.32 47.62 109.5 C42.47 111.39 37.44 111.84 32 111 C29.31 109 29.31 109 28 107 C29.58 105.42 31.38 105.65 33.56 105.44 C34.8 105.31 34.8 105.31 36.07 105.18 C36.7 105.12 37.34 105.06 38 105 C37.67 104.01 37.34 103.02 37 102 C36.35 102.03 35.7 102.06 35.02 102.1 C28.05 102.01 28.05 102.01 25.39 99.46 C24.44 97.98 23.55 96.46 22.7 94.93 C20.95 91.92 18.98 89.26 16.87 86.51 C12.11 80.3 8.31 74.55 6 67 C5.44 65.33 4.88 63.67 4.31 62 C4.08 61.28 3.85 60.56 3.61 59.81 C3.02 57.93 3.02 57.93 2 56 C1.61 52.41 1.5 50.66 3.71 47.73 C4.45 47.03 5.18 46.34 5.94 45.62 C10.18 41.1 10.18 41.1 11.43 35.23 C10.03 27.99 5.77 21.74 1.12 16.19 C-1.33 13.19 -1.97 12.22 -2.56 8.25 C-2.04 5.23 -1.33 2.75 0 0 Z \",fill:\"#0B123F\",transform:\"translate(807,897)\"})),_path201||(_path201=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.22 1.05 2.42 2.11 3.6 3.2 C5.07 4.6 5.07 4.6 7.08 5.5 C7.08 6.16 7.08 6.82 7.08 7.5 C8.4 8.16 9.72 8.82 11.08 9.5 C11.08 10.16 11.08 10.82 11.08 11.5 C12.18 11.87 12.18 11.87 13.3 12.23 C16.45 13.67 18.15 15.31 20.52 17.82 C23 20.41 25.38 22.82 28.27 24.94 C33.08 29.32 37.01 35.08 37.96 41.63 C38 42.58 38.04 43.53 38.08 44.5 C36.6 44.01 36.6 44.01 35.08 43.5 C34.55 44.27 34.01 45.03 33.46 45.82 C30.88 48.73 28.62 49.97 25.08 51.5 C25.36 53.44 25.36 53.44 26.08 55.5 C27.07 56.16 28.06 56.82 29.08 57.5 C29.08 58.49 29.08 59.48 29.08 60.5 C23.14 61 23.14 61 17.08 61.5 C16.59 58.53 16.59 58.53 16.08 55.5 C15.42 55.5 14.76 55.5 14.08 55.5 C14.08 54.84 14.08 54.18 14.08 53.5 C13.22 53.26 12.35 53.01 11.46 52.75 C3.4 49.77 -1.64 44.16 -6.92 37.5 C-7.25 36.51 -7.58 35.52 -7.92 34.5 C-8.91 33.84 -9.9 33.18 -10.92 32.5 C-11.95 30.86 -12.94 29.19 -13.92 27.5 C-14.93 26.01 -15.95 24.52 -16.98 23.04 C-17.55 22.22 -18.12 21.4 -18.71 20.55 C-19.89 18.85 -21.08 17.15 -22.27 15.45 C-22.83 14.63 -23.4 13.82 -23.98 12.97 C-24.76 11.87 -24.76 11.87 -25.55 10.74 C-26.98 8.4 -27.97 6.08 -28.92 3.5 C-27.85 2.18 -26.76 0.87 -25.67 -0.43 C-25.06 -1.16 -24.46 -1.9 -23.84 -2.65 C-17.65 -8.6 -5.91 -4.61 0 0 Z \",fill:\"#4B295A\",transform:\"translate(822.91796875,139.49609375)\"})),_path202||(_path202=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.65 3.01 33.37 10.32 48.56 17.62 C49.64 18.14 50.71 18.65 51.81 19.18 C62.73 24.58 72.53 31.39 82 39 C83.36 40.06 83.36 40.06 84.74 41.14 C85.65 41.86 86.56 42.58 87.5 43.31 C88.34 43.97 89.17 44.62 90.03 45.3 C92 47 92 47 93 49 C93.44 49.43 93.89 49.85 94.34 50.29 C96.44 52.46 97.9 54.82 99.5 57.38 C100.38 58.78 100.38 58.78 101.28 60.21 C102.13 61.59 102.13 61.59 103 63 C103.55 63.85 104.11 64.7 104.68 65.58 C106.6 69.09 106.66 72.04 107 76 C107.66 76 108.32 76 109 76 C109.15 76.68 109.29 77.36 109.44 78.05 C112.26 91.1 115.25 103.88 119.9 116.41 C121.5 120.82 122.22 123.36 121 128 C121.69 130.18 121.69 130.18 122.88 132.25 C125.14 136.9 125.67 140.85 126 146 C126.66 146 127.32 146 128 146 C128 146.66 128 147.32 128 148 C128.66 148.33 129.32 148.66 130 149 C130 189.26 130 229.52 130 271 C126 270 126 270 123.69 267.5 C121.75 263.48 121.9 261.59 122.74 257.34 C123.12 254.91 123.12 254.91 122.52 252.14 C121.95 248.68 122.08 245.68 122.38 242.19 C122.47 241.05 122.56 239.91 122.65 238.73 C123 236 123 236 124 235 C124.13 233.19 124.2 231.38 124.25 229.57 C124.3 227.91 124.3 227.91 124.35 226.22 C124.41 223.88 124.46 221.53 124.52 219.19 C124.55 218.08 124.59 216.97 124.62 215.82 C124.66 214.29 124.66 214.29 124.7 212.73 C125 209.99 125.69 208.39 127 206 C127 203.14 126.61 201.62 124.59 199.57 C123.1 198.33 121.55 197.16 120 196 C119.9 196.64 119.79 197.28 119.69 197.94 C119.46 198.62 119.23 199.3 119 200 C118.01 200.33 117.02 200.66 116 201 C116.05 199.91 116.09 198.82 116.14 197.7 C116.59 182.43 114.09 168.68 107.86 154.7 C106.89 151.64 107.04 150.03 108 147 C109.19 145.25 109.19 145.25 111 144 C111.99 143.92 112.98 143.84 114 143.75 C117.27 143.27 117.27 143.27 119.12 140.12 C120.75 135.56 118.86 132.2 117.06 127.93 C115.41 123.38 115.19 118.81 115 114 C114.34 114 113.68 114 113 114 C109.12 104.23 105.71 94.59 103.44 84.31 C99.37 66.11 99.37 66.11 89 51 C89 50.34 89 49.68 89 49 C88.01 48.72 88.01 48.72 87 48.44 C84.26 47.12 82.91 46.1 80.75 44.06 C69.18 33.62 54.63 26.35 41 19 C41 18.01 41 17.02 41 16 C40.29 15.88 39.58 15.76 38.85 15.63 C35.88 14.97 33.26 14.01 30.44 12.88 C24.46 10.53 18.44 8.36 12.38 6.25 C11.5 5.94 10.62 5.64 9.72 5.32 C6.48 4.2 3.25 3.08 0 2 C0 1.34 0 0.68 0 0 Z M108 84 C109 87 109 87 109 87 Z M109 87 C109 88.65 109 90.3 109 92 C109.33 92 109.66 92 110 92 C110 90.35 110 88.7 110 87 C109.67 87 109.34 87 109 87 Z M110 92 C111 94 111 94 111 94 Z M110 95 C111 97 111 97 111 97 Z M111 97 C112 100 112 100 112 100 Z M119 123 C120 125 120 125 120 125 Z \",fill:\"#3C194D\",transform:\"translate(1150,617)\"})),_path203||(_path203=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.38 1.1 4.07 1.94 5.88 4.94 C6.31 7.23 6.31 7.23 6.39 9.7 C6.42 10.59 6.46 11.48 6.49 12.4 C6.53 13.78 6.53 13.78 6.56 15.19 C6.6 16.12 6.63 17.06 6.67 18.02 C6.75 20.33 6.82 22.63 6.88 24.94 C6.22 24.94 5.56 24.94 4.88 24.94 C5.37 27.41 5.37 27.41 5.88 29.94 C5.22 29.94 4.56 29.94 3.88 29.94 C4.37 31.92 4.37 31.92 4.88 33.94 C4.22 33.94 3.56 33.94 2.88 33.94 C3.37 35.92 3.37 35.92 3.88 37.94 C3.22 37.94 2.56 37.94 1.88 37.94 C2.06 38.51 2.25 39.09 2.44 39.69 C2.92 42.17 2.59 43.55 1.88 45.94 C1.88 46.6 1.88 47.26 1.88 47.94 C1.22 47.94 0.56 47.94 -0.12 47.94 C0.12 48.47 0.37 49.01 0.62 49.56 C1.01 53.18 -0.97 55.24 -3.12 57.94 C-4.65 59.76 -6.18 61.55 -7.76 63.32 C-10.06 66.04 -11.17 68.1 -12.12 71.56 C-12.45 72.68 -12.79 73.79 -13.12 74.94 C-14.12 75.43 -14.12 75.43 -15.12 75.94 C-15.54 77.09 -15.95 78.25 -16.38 79.44 C-17.24 81.17 -17.24 81.17 -18.12 82.94 C-20.88 83.81 -20.88 83.81 -24.12 83.94 C-25.98 84.25 -25.98 84.25 -27.88 84.56 C-31.12 84.94 -31.12 84.94 -33.12 83.94 C-32.25 79.07 -31.13 74.67 -29 70.19 C-27.45 66.92 -26.78 64.61 -27.12 60.94 C-26.63 60.44 -26.63 60.44 -26.12 59.94 C-25.69 56.56 -25.63 53.31 -26.12 49.94 C-27.75 48.23 -29.42 46.56 -31.12 44.94 C-33.11 39.84 -32.24 35.51 -30.25 30.56 C-29.52 28.99 -28.79 27.42 -28.04 25.87 C-26.96 23.59 -25.94 21.29 -24.93 18.98 C-24.14 17.24 -23.35 15.49 -22.56 13.75 C-22.19 12.9 -21.81 12.05 -21.42 11.17 C-21.06 10.38 -20.69 9.59 -20.31 8.77 C-19.98 8.06 -19.66 7.34 -19.33 6.6 C-18.12 4.94 -18.12 4.94 -16.17 4.22 C-14.51 3.99 -12.85 3.77 -11.19 3.56 C-8.07 3.12 -8.07 3.12 -5.62 1.31 C-3.12 -0.06 -3.12 -0.06 0 0 Z \",fill:\"#3A164B\",transform:\"translate(504.125,549.0625)\"})),_path204||(_path204=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.02 8.93 0.08 15.86 0.15 22.78 C0.18 25.36 0.19 27.94 0.2 30.52 C0.2 34.25 0.25 37.97 0.29 41.7 C0.29 42.84 0.29 43.97 0.28 45.14 C0.43 53.64 2.61 60.26 6 68 C6.53 69.36 7.06 70.72 7.57 72.09 C8.24 73.83 8.24 73.83 8.91 75.6 C12.05 83.96 14.88 92.41 17.63 100.91 C18.45 103.42 19.28 105.94 20.12 108.45 C20.64 110.06 21.16 111.67 21.68 113.27 C21.93 114.02 22.18 114.77 22.44 115.54 C24.11 120.77 24.11 120.77 23 123 C19.38 124.39 15.82 124.45 12 124 C3.94 119.31 0.49 110.31 -3 102 C-3 101.01 -3 100.02 -3 99 C-3.66 99 -4.32 99 -5 99 C-6.47 97.14 -6.47 97.14 -8.06 94.69 C-8.59 93.89 -9.12 93.09 -9.66 92.26 C-12.29 87.83 -12.63 83.2 -13.25 78.19 C-13.42 77 -13.42 77 -13.6 75.78 C-14.26 70.36 -13.49 67.92 -11 63 C-10.75 59.72 -10.96 56.47 -11.12 53.19 C-11.33 46.36 -11.38 41.27 -7 35.66 C-5.79 34.03 -5.79 34.03 -6.22 31.95 C-7.31 29.22 -9.16 27.26 -11 25 C-11 24.34 -11 23.68 -11 23 C-16.54 26.41 -21.21 30.61 -26 35 C-26.66 34.67 -27.32 34.34 -28 34 C-27.2 33.24 -26.39 32.47 -25.56 31.69 C-22.4 28.37 -21.99 26.98 -22.04 22.42 C-22.11 20.3 -22.19 18.18 -22.3 16.07 C-22.44 10.83 -21.34 8.01 -18 4 C-14.62 1.74 -12.43 1.44 -8.44 0.88 C-6.7 0.62 -6.7 0.62 -4.93 0.37 C-2 0 -2 0 0 0 Z \",fill:\"#775879\",transform:\"translate(860,509)\"})),_path205||(_path205=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.7 6.58 14.65 18.09 18.03 28.21 C20.91 36.76 20.91 36.76 26 44 C25.78 47.39 25.48 49.41 23.31 52.06 C22.88 52.7 22.45 53.34 22 54 C22.71 56.73 22.71 56.73 24 59 C15.43 60.43 15.43 60.43 12 58 C12 57.34 12 56.68 12 56 C10.02 56 8.04 56 6 56 C6 55.01 6 54.02 6 53 C5.12 53.43 4.24 53.87 3.33 54.31 C2.17 54.87 1.01 55.43 -0.19 56 C-1.34 56.56 -2.48 57.11 -3.67 57.69 C-6.86 58.94 -8.65 59.56 -12 59 C-17.98 55.13 -24.16 49.01 -26 42 C-26 38.5 -26 38.5 -25 35 C-23 33.33 -21 31.67 -19 30 C-17.49 25.47 -18.05 22.55 -19.56 18.19 C-21.34 12.84 -21.29 8.21 -19 3 C-16.38 1.38 -16.38 1.38 -14 1 C-13.34 1.66 -12.68 2.32 -12 3 C-10.7 2.26 -10.7 2.26 -9.38 1.5 C-5.77 -0.1 -3.89 -0.43 0 0 Z \",fill:\"#482859\",transform:\"translate(987,471)\"})),_path206||(_path206=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.23 0.62 0.45 1.24 0.69 1.88 C1.82 4.2 1.82 4.2 4.25 4.81 C10.53 7.52 14 14.04 16.85 20 C18.23 23.6 19.13 27.25 20 31 C22.42 41.37 25.34 48.55 34 55 C34.7 54.01 35.4 53.02 36.12 52 C38.19 49.55 38.74 49.06 42 48.31 C45.98 49.23 47.34 50.94 50 54 C50.87 54.83 51.73 55.65 52.62 56.5 C55 59 55 59 56.5 61.62 C57.83 64.2 57.83 64.2 60.56 65.18 C63 67 63 67 63.6 70.32 C63.62 71.71 63.6 73.11 63.57 74.5 C63.57 75.26 63.57 76.02 63.57 76.81 C63.57 79.32 63.53 81.84 63.49 84.36 C63.48 86.1 63.47 87.84 63.47 89.59 C63.45 94.18 63.4 98.77 63.34 103.36 C63.29 108.05 63.27 112.73 63.24 117.42 C63.19 126.61 63.11 135.81 63 145 C62.67 144.01 62.34 143.02 62 142 C61.01 142.33 60.02 142.66 59 143 C57.9 139.71 58.2 138.29 59 135 C58.01 134.34 57.02 133.68 56 133 C56.38 131.06 56.38 131.06 57 129 C57.66 128.67 58.32 128.34 59 128 C58.67 127.01 58.34 126.02 58 125 C57.01 125.99 56.02 126.98 55 128 C54.75 127.26 54.49 126.53 54.23 125.77 C53.89 124.79 53.54 123.82 53.19 122.81 C52.85 121.85 52.51 120.89 52.17 119.89 C51.08 116.98 51.08 116.98 49.43 114.4 C48.05 112.08 47.48 110.38 47 107.75 C46.67 106.51 46.34 105.27 46 104 C45.01 103.67 44.02 103.34 43 103 C42.88 102.3 42.75 101.6 42.62 100.88 C41.96 97.8 41.13 94.93 40 92 C39.01 91.5 39.01 91.5 38 91 C36.79 88.43 35.68 85.88 34.62 83.25 C34.31 82.48 34 81.71 33.68 80.92 C31.85 76.36 30.25 71.79 28.88 67.06 C27 60.66 24.61 54.37 20.49 49.05 C18.78 46.69 17.78 44.4 16.69 41.69 C16.26 40.63 15.83 39.58 15.39 38.49 C14.7 36.76 14.7 36.76 14 35 C13.5 33.74 12.99 32.49 12.48 31.23 C8.59 21.52 8.59 21.52 6.87 17.07 C5.38 13.23 3.86 9.61 1.75 6.06 C0 3 0 3 0 0 Z \",fill:\"#230D38\",transform:\"translate(1217,909)\"})),_path207||(_path207=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.21 10.95 3.02 20.45 1.51 30.3 C0.78 35.57 0.52 40.84 0.25 46.15 C0 49 0 49 -1 50 C-1.11 51.69 -1.18 53.37 -1.25 55.06 C-1.72 60.94 -3.59 64.32 -7 69 C-7.41 69.87 -7.82 70.73 -8.25 71.62 C-10.64 74.86 -13.64 76.58 -17.04 78.67 C-19.13 79.86 -19.13 79.86 -20 82 C-24.63 84.67 -29.11 87 -34.5 87 C-37.89 85.64 -39.38 84.24 -41 81 C-42.32 81 -43.64 81 -45 81 C-45 81.66 -45 82.32 -45 83 C-46.32 82.67 -47.64 82.34 -49 82 C-49 82.66 -49 83.32 -49 84 C-50.71 84.05 -52.42 84.09 -54.12 84.12 C-55.08 84.15 -56.03 84.17 -57.01 84.2 C-60.43 83.97 -62.88 83.44 -66 82 C-68.12 79.5 -68.12 79.5 -70 76.56 C-72.85 72.1 -75.09 70.06 -80 68 C-78.55 61.87 -75.03 56.76 -71 52 C-69.51 51.51 -69.51 51.51 -68 51 C-66.97 48.86 -66.97 48.86 -66 46 C-65.36 44.59 -64.71 43.19 -64.05 41.79 C-63.7 41.04 -63.35 40.29 -62.98 39.52 C-62.62 38.75 -62.25 37.98 -61.88 37.19 C-61.5 36.4 -61.13 35.61 -60.75 34.8 C-59.83 32.87 -58.92 30.93 -58 29 C-57.34 29 -56.68 29 -56 29 C-55.91 27.9 -55.83 26.8 -55.74 25.67 C-54.91 16.59 -53.57 9.07 -49 1 C-46.03 1.33 -43.06 1.66 -40 2 C-40.66 3.98 -41.32 5.96 -42 8 C-40.02 7.34 -38.04 6.68 -36 6 C-35.5 6.99 -35.5 6.99 -35 8 C-35.91 9.8 -35.91 9.8 -37.29 11.98 C-40.18 16.97 -41.29 21.7 -42.38 27.31 C-44.29 36.27 -46.73 44.86 -53.51 51.48 C-57.78 55.84 -60.63 61.94 -61.69 67.88 C-60.74 72.2 -59.74 73.58 -56 76 C-51.07 76.63 -45.73 76.7 -41 75 C-39.97 74.03 -38.98 73.02 -38 72 C-32.82 68.57 -28.45 66.69 -22.19 67 C-17.76 67.24 -17.76 67.24 -13.94 64.81 C-10.98 60.52 -9.82 56.63 -9.12 51.5 C-8.42 46.97 -7.39 42.74 -6 38.38 C-3.16 29.44 -1.78 21.07 -1.34 11.71 C-1.15 7.74 -0.73 3.91 0 0 Z \",fill:\"#45245A\",transform:\"translate(360,1046)\"})),_path208||(_path208=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 1 4 1 6 4 C6.85 4.49 7.69 4.99 8.56 5.5 C11 7 11 7 12 10 C13.32 10 14.64 10 16 10 C16.66 11.32 17.32 12.64 18 14 C18.66 13.53 19.32 13.05 20 12.56 C23.79 10.59 26.76 10.36 31 10 C31 10.66 31 11.32 31 12 C31.74 12.12 32.49 12.25 33.25 12.38 C37.46 13.33 39.32 14.07 41.94 17.62 C42.96 19.3 42.96 19.3 44 21 C44.78 22.23 45.55 23.46 46.33 24.69 C60.07 46.69 60.07 46.69 59 56 C58.63 57.24 58.26 58.47 57.88 59.75 C56.61 63 56.61 63 58.41 65.76 C60.67 70.37 60.46 74.6 60.59 79.66 C60.77 83 60.77 83 62.51 85.47 C69.02 96.5 62.84 120.86 59.9 132.68 C59.45 134.33 59.45 134.33 59 136 C58.34 136 57.68 136 57 136 C56.77 137.26 56.55 138.52 56.31 139.81 C55.24 145.2 53.89 150.5 52.5 155.81 C52.18 157.05 52.18 157.05 51.85 158.31 C50.79 162.32 49.67 166.19 48 170 C47.34 170 46.68 170 46 170 C45.82 170.87 45.82 170.87 45.63 171.76 C45.47 172.54 45.3 173.32 45.12 174.12 C44.96 174.89 44.8 175.66 44.63 176.45 C43.12 182.57 40.93 187.01 37.25 192.06 C36.83 192.66 36.41 193.26 35.98 193.88 C32.62 198.56 28.95 202.71 23.56 205.06 C19.72 204.97 17.07 203.22 14 201 C13.5 200.42 13.01 199.85 12.5 199.25 C9.96 197.13 7.15 197.82 4 198 C4.33 197.01 4.66 196.02 5 195 C8.88 193.61 11.86 193 16 193 C16.43 193.8 16.87 194.61 17.31 195.44 C18.84 198.34 18.84 198.34 22.38 199.06 C26.84 198.99 27.76 197.97 31 195 C36.31 188.82 39.93 182.88 42 175 C42.66 175 43.32 175 44 175 C44.1 173.85 44.21 172.69 44.31 171.5 C44.95 166.3 46.65 161.69 49 157 C49.12 156.01 49.25 155.02 49.38 154 C50.39 146.42 53.15 139.32 56.13 132.32 C58.31 126.49 58.4 120.78 57.75 114.62 C56.7 112.34 55.28 111.88 53 111 C53 110.01 53 109.02 53 108 C53.99 107.67 54.98 107.34 56 107 C56.33 104.03 56.66 101.06 57 98 C56.34 98 55.68 98 55 98 C54.67 97.34 54.34 96.68 54 96 C51.98 95.35 51.98 95.35 50 95 C50.43 92.08 51.05 90.94 53.06 88.69 C55.58 85.2 55.45 83.22 55 79 C54.38 76.04 53.8 74.57 51.31 72.8 C49.58 71.8 47.79 70.9 46 70 C46 69.34 46 68.68 46 68 C47.98 67.51 47.98 67.51 50 67 C49.05 66.63 48.1 66.26 47.12 65.88 C43.24 63.54 43.15 62.27 42 58 C41.01 56.27 40.02 54.55 38.99 52.84 C37.98 50.96 37.38 49.16 36.75 47.12 C35.15 42.57 32.21 39.59 28.94 36.12 C26.6 33.57 24.81 30.94 23 28 C23 30.88 23.12 33.42 23.5 36.25 C23.75 38.11 23.75 38.11 24 40 C21.37 36.7 19.38 33.21 17.38 29.5 C16.76 28.38 16.15 27.25 15.52 26.09 C14 23 14 23 13.45 20.73 C12.7 17.84 10.34 16.68 8 15 C8.33 14.01 8.66 13.02 9 12 C8.01 12 7.02 12 6 12 C4.02 8.04 2.04 4.08 0 0 Z \",fill:\"#351547\",transform:\"translate(549,1054)\"})),_path209||(_path209=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.79 0.17 1.59 0.33 2.4 0.5 C3.16 0.67 3.91 0.84 4.68 1.02 C5.36 1.17 6.03 1.32 6.73 1.48 C9.01 2.36 10.08 3.23 11.56 5.19 C12.13 7.41 12.13 7.41 12.41 9.97 C12.57 11.36 12.57 11.36 12.75 12.77 C12.96 14.71 13.17 16.66 13.38 18.61 C13.55 19.99 13.55 19.99 13.72 21.41 C13.86 22.67 13.86 22.67 13.99 23.97 C14.38 26.27 14.38 26.27 16.12 27.74 C17.56 29.19 17.56 29.19 17.56 33.19 C12.38 34.71 7.11 34.37 1.75 34.38 C0.15 34.39 0.15 34.39 -1.49 34.41 C-7.17 34.42 -12.12 34.29 -17.44 32.19 C-22.03 26.67 -21.58 19.63 -21.5 12.81 C-21.5 12.08 -21.49 11.34 -21.49 10.58 C-21.47 8.78 -21.46 6.99 -21.44 5.19 C-24.03 7.45 -24.99 9.27 -25.94 12.56 C-26.98 16.18 -28.15 19.17 -30.44 22.19 C-33.4 23.67 -33.4 23.67 -36.81 24.94 C-42.63 27.43 -44.87 29.39 -47.42 35.09 C-50.08 40.56 -56.51 43.65 -61.48 46.86 C-63.55 48.17 -63.55 48.17 -65.44 50.19 C-65.25 44.4 -65.04 38.62 -64.8 32.84 C-64.73 30.87 -64.66 28.9 -64.59 26.93 C-64.5 24.1 -64.39 21.28 -64.27 18.45 C-64.24 17.57 -64.22 16.69 -64.2 15.78 C-63.9 9.7 -63.9 9.7 -61.55 7.1 C-58.76 5.89 -57.28 6.21 -54.44 7.19 C-52.44 9.19 -52.44 9.19 -51.44 12.75 C-51.11 13.88 -50.78 15.02 -50.44 16.19 C-47.21 17.8 -43.93 17.77 -40.44 17.19 C-37.11 14.69 -35.56 12.42 -33.62 8.75 C-31.08 4.01 -26.59 0.21 -21.45 -1.46 C-14.1 -2.76 -7.2 -1.55 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(1178.4375,1146.8125)\"})),_path210||(_path210=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.37 0.49 0.75 0.99 1.13 1.5 C3.77 3.62 5.55 3.23 8.88 3.06 C14.5 2.79 14.5 2.79 17.42 4.03 C21.95 5.73 26.58 4.59 31.31 4.09 C35.13 4 37.56 4.35 41 6 C42.21 7.7 42.21 7.7 42.81 9.69 C43.03 10.4 43.26 11.11 43.48 11.84 C44.21 14.86 44.59 17.92 45 21 C46.22 24.21 46.22 24.21 49 26 C49 26.66 49 27.32 49 28 C49.66 28 50.32 28 51 28 C51 28.66 51 29.32 51 30 C51.99 29.67 52.98 29.34 54 29 C55 30.67 56 32.33 57 34 C57.49 34.75 57.98 35.51 58.48 36.28 C60.14 39.25 61.02 42.04 61.94 45.31 C63.09 49.24 64.27 52.79 66.25 56.38 C68.66 60.97 68.64 64.52 67.34 69.57 C65.2 76.23 62.14 82.14 57 87 C52.64 89.21 49.77 89.08 45 88 C44.01 87.01 44.01 87.01 43 86 C37.06 84.99 32.76 87.77 28 91 C25.73 93.07 23.72 95.18 21.69 97.48 C19.57 99.38 17.37 100.46 14.81 101.69 C13.91 102.12 13.01 102.56 12.08 103.01 C11.39 103.34 10.71 103.66 10 104 C11.41 100.52 12.82 99.26 16.06 97.44 C22.01 93.66 25.74 88.52 30 83 C30.73 82.17 31.45 81.34 32.2 80.49 C38.64 73.09 42.56 64.99 42 55 C40.13 50.44 36.63 47.74 32.94 44.65 C32.3 44.1 31.66 43.56 31 43 C30.42 42.58 29.85 42.16 29.25 41.73 C27.14 38.81 27.55 36.47 28 33 C29.97 30.26 29.97 30.26 32.5 27.69 C35.77 23.96 37.65 21.66 37.69 16.62 C37.33 13.18 36.91 9.95 35 7 C31.27 5.41 28.3 6.51 24.5 7.5 C18.56 8.87 13.72 9.01 7.71 8.26 C3.97 7.9 0.69 8.36 -3 9 C-3.12 8.36 -3.25 7.72 -3.38 7.06 C-3.68 6.04 -3.68 6.04 -4 5 C-4.66 4.67 -5.32 4.34 -6 4 C-4.02 2.68 -2.04 1.36 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(1100,1042)\"})),_path211||(_path211=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0 3 0 4.56 1.44 C8.32 8.14 8.5 16.47 9.34 23.96 C10.04 27.18 10.34 28.17 13 30 C14.86 30.79 16.73 31.54 18.62 32.25 C21.6 33.54 21.6 33.54 24 35 C25.06 38.69 25.06 38.69 25 42 C25.66 42.66 26.32 43.32 27 44 C28.06 46.47 28.97 48.97 29.9 51.49 C31 53.99 32.36 55.84 34 58 C34 58.66 34 59.32 34 60 C34.59 60.23 35.19 60.45 35.8 60.69 C38.63 62.37 39.59 64.17 41.25 67 C44.28 71.99 47.65 76.44 51.4 80.91 C53 83 53 83 54 86 C53.34 86 52.68 86 52 86 C50.56 84.29 50.56 84.29 49 82.06 C46.95 79.01 46.95 79.01 44 77 C39.78 78.56 36.56 80.23 33 83 C32.34 83 31.68 83 31 83 C30.15 85.3 30.15 85.3 30 88 C31.53 90.12 31.53 90.12 33.88 91.88 C34.7 92.56 35.53 93.24 36.38 93.94 C37.24 94.62 38.11 95.3 39 96 C39.81 96.66 40.63 97.32 41.46 98 C45.55 101.33 45.55 101.33 50.07 104.01 C52 105 52 105 53.43 106.49 C55.48 108.46 57.54 109.19 60.19 110.19 C61.09 110.53 61.99 110.88 62.92 111.23 C63.61 111.48 64.29 111.74 65 112 C65 112.99 65 113.98 65 115 C48.63 110.21 33.12 99.81 22 87 C21.67 86.01 21.34 85.02 21 84 C19.52 83.51 19.52 83.51 18 83 C17.3 81.69 16.64 80.35 16 79 C15.42 78.3 14.84 77.6 14.25 76.88 C9.02 70.2 5.23 62.81 2 55 C1.38 53.64 1.38 53.64 0.75 52.25 C-0.1 49.71 0 47.66 0 45 C-0.63 43.65 -1.3 42.32 -2 41 C-2.9 37.64 -3.12 36.36 -2 33 C-2 32.34 -2 31.68 -2 31 C-2.66 31 -3.32 31 -4 31 C-4.94 26.61 -4.93 23.32 -4 18.95 C-3.78 17.84 -3.55 16.73 -3.31 15.59 C-3.06 14.44 -2.82 13.3 -2.56 12.12 C-2.32 10.96 -2.08 9.79 -1.83 8.59 C-1.23 5.73 -0.62 2.86 0 0 Z \",fill:\"#38154A\",transform:\"translate(108,1149)\"})),_path212||(_path212=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.7 0.71 1.4 1.43 2.12 2.16 C4.02 4.06 5.97 5.89 7.97 7.68 C8.48 8.14 8.99 8.59 9.51 9.06 C10.55 9.98 11.58 10.89 12.63 11.81 C16.07 14.9 18.51 18.11 21 22 C26.37 27 32.56 30.86 38.78 34.73 C46.98 39.84 46.98 39.84 50.56 43.06 C57.75 49.51 66.64 53.39 75.44 57.12 C76.4 57.54 77.36 57.96 78.35 58.39 C84.82 61.17 91.36 63.66 98 66 C96 68 96 68 93.56 68.25 C91 68 91 68 88 66 C86 65.77 86 65.77 83.83 65.91 C83.02 65.93 82.21 65.95 81.37 65.97 C79.69 66.03 78 66.1 76.31 66.17 C69.69 66.32 64.75 65.16 58.94 61.81 C55.74 60.47 53.42 60.52 50 61 C45.89 64.83 43.98 68.8 42 74 C36.58 73.53 32.75 72.83 28 70 C27.17 69.51 27.17 69.51 26.32 69.01 C21.72 66.05 18.7 62.37 15.48 57.99 C14.01 55.91 14.01 55.91 12 54 C11.86 51 12.01 48.05 12.12 45.04 C11.92 40.01 10.31 37.02 6.81 33.5 C4.02 30.33 4.02 30.33 3.88 27.44 C5 25 5 25 7 22.06 C9.08 18.88 9.64 16.74 10 13 C9.34 13 8.68 13 8 13 C8 12.01 8 11.02 8 10 C7.34 10 6.68 10 6 10 C4.49 8.32 4.49 8.32 2.88 6.12 C2.34 5.41 1.8 4.69 1.24 3.95 C0 2 0 2 0 0 Z \",fill:\"#3A164A\",transform:\"translate(1038,545)\"})),_path213||(_path213=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 -0.99 1.98 -1.98 3 -3 C4.98 -2.34 6.96 -1.68 9 -1 C8.34 -0.67 7.68 -0.34 7 0 C7.19 1.97 7.19 1.97 8 4 C9.99 4.98 11.95 5.44 14.09 6 C16 7 16 7 17.25 9.27 C20.52 21.17 14.39 34.91 10.87 46.16 C10.3 48.01 9.75 49.87 9.22 51.73 C6.41 61.56 1.88 72.13 -6 79 C-7.98 80.05 -9.97 81.05 -12 82 C-14.56 84.38 -16.89 86.88 -19.25 89.46 C-22.17 92.16 -24.78 93.66 -28.38 95.31 C-29.46 95.82 -30.54 96.34 -31.65 96.86 C-35.29 98.1 -38.18 98.21 -42 98 C-42 97.34 -42 96.68 -42 96 C-43.05 95.91 -43.05 95.91 -44.12 95.81 C-48.03 94.71 -50 92.72 -53 90 C-51.12 85.25 -51.12 85.25 -50 83 C-49.54 83.41 -49.08 83.82 -48.61 84.24 C-48 84.78 -47.38 85.32 -46.75 85.88 C-46.15 86.41 -45.54 86.94 -44.92 87.49 C-43.01 89 -41.25 90.06 -39 91 C-35.94 90.63 -34.65 89.77 -32 88 C-30 88.33 -28 88.66 -26 89 C-25.01 88.01 -25.01 88.01 -24 87 C-24.29 84.19 -24.29 84.19 -25 81 C-26.12 74.25 -26.12 74.25 -25 72 C-24.34 72 -23.68 72 -23 72 C-21.49 68.61 -21.49 68.61 -21 65 C-20.35 60.86 -18.22 57.41 -16.19 53.81 C-15.67 52.85 -15.67 52.85 -15.15 51.87 C-12.49 47.15 -12.49 47.15 -9.88 46.34 C-9.26 46.23 -8.64 46.11 -8 46 C-4.8 41.18 -2.33 34.63 -3.39 28.86 C-3.87 26.89 -4.43 24.94 -5 23 C-4.34 23 -3.68 23 -3 23 C-3.99 21.02 -4.98 19.04 -6 17 C-5.48 16.63 -4.97 16.26 -4.44 15.88 C-3.96 15.26 -3.49 14.64 -3 14 C-3.31 12 -3.64 10 -4 8 C-3.06 5.12 -3.06 5.12 -2 3 C-2.76 2.86 -3.53 2.71 -4.31 2.56 C-7 2 -7 2 -10 1 C-12.06 0.93 -14.13 0.92 -16.19 0.94 C-17.27 0.95 -18.36 0.96 -19.48 0.96 C-20.31 0.98 -21.14 0.99 -22 1 C-22 1.66 -22 2.32 -22 3 C-22.66 2.67 -23.32 2.34 -24 2 C-16.53 -5.72 -9.47 -2.88 0 0 Z \",fill:\"#4B295A\",transform:\"translate(419,1109)\"})),_path214||(_path214=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 0 2.88 0 6 1 C7.49 3.28 8.14 5.38 9 8 C9.66 7.67 10.32 7.34 11 7 C13.6 15.94 13.67 26.08 11.48 35.17 C10.81 39.1 10.92 42.94 10.97 46.91 C10.99 48.66 11 50.41 11.01 52.16 C11.03 54.9 11.06 57.64 11.1 60.39 C11.13 63.04 11.14 65.7 11.16 68.35 C11.17 69.17 11.19 70 11.2 70.84 C11.22 74.76 11.22 76.66 9 80 C8.34 80 7.68 80 7 80 C6.67 82.97 6.34 85.94 6 89 C4.68 88.34 3.36 87.68 2 87 C-2.66 87.4 -2.66 87.4 -7 89 C-8.88 89.13 -8.88 89.13 -11 89.12 C-12.05 89.13 -12.05 89.13 -13.12 89.13 C-15 89 -15 89 -17 88 C-16.79 87.38 -16.59 86.76 -16.38 86.12 C-16.25 85.42 -16.13 84.72 -16 84 C-16.66 83.34 -17.32 82.68 -18 82 C-19.25 68.46 -16.58 55.37 -10.95 43.09 C-9.89 40.76 -8.93 38.39 -8 36 C-9.49 36.5 -9.49 36.5 -11 37 C-10.94 36.4 -10.89 35.79 -10.83 35.17 C-9.36 19.09 -9.36 19.09 -8 3 C-7.67 3 -7.34 3 -7 3 C-6.67 4.98 -6.34 6.96 -6 9 C-5.38 8.17 -4.76 7.35 -4.12 6.5 C-3.42 5.67 -2.72 4.85 -2 4 C-1.34 4 -0.68 4 0 4 C-0.33 3.01 -0.66 2.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#39154A\",transform:\"translate(545,610)\"})),_path215||(_path215=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.26 0.35 6.33 0.56 9.62 0.56 C9.62 2.21 9.62 3.86 9.62 5.56 C8.67 6 8.67 6 7.69 6.44 C5.47 7.39 5.47 7.39 4.62 9.56 C4.67 15.22 5.83 20.66 7.19 26.12 C9.64 36.43 9.64 36.43 8.62 41.56 C6.62 44.62 6.62 44.62 4.62 46.56 C6.7 46.71 6.7 46.71 8.62 45.56 C9.15 49.79 8.58 51.87 6.11 55.18 C3.03 59.91 3.19 63.7 3.62 69.19 C4.34 78.29 4.34 78.29 1.32 82.04 C-3.99 87.01 -9.61 87.96 -16.59 89.08 C-19.96 89.66 -23.21 90.54 -26.5 91.49 C-28.38 91.56 -28.38 91.56 -30.12 90.23 C-31.38 88.56 -31.38 88.56 -31.38 86.56 C-33.02 86.56 -34.67 86.56 -36.38 86.56 C-36.71 85.57 -37.03 84.58 -37.38 83.56 C-38.03 83.23 -38.7 82.9 -39.38 82.56 C-41.38 81.56 -41.38 81.56 -42.38 78.56 C-43.98 67.36 -40.4 60.54 -34.38 51.56 C-33.9 51.86 -33.43 52.16 -32.94 52.47 C-27.26 55.74 -23.68 55.87 -17.38 54.56 C-16.09 54.31 -14.8 54.07 -13.47 53.81 C-9.76 53.09 -6.07 52.34 -2.38 51.56 C-2.39 50.9 -2.4 50.23 -2.41 49.54 C-2.46 44.83 -2.39 40.25 -1.81 35.56 C-1.3 30.25 -1.33 25.01 -1.5 19.69 C-1.51 18.87 -1.52 18.05 -1.53 17.2 C-1.72 12.9 -1.97 11.07 -4.74 7.62 C-7.39 5.5 -7.39 5.5 -10.38 3.56 C-5.62 2.56 -5.62 2.56 -3.38 2.56 C-4.7 1.9 -6.01 1.24 -7.38 0.56 C-4.7 -0.78 -2.96 -0.32 0 0 Z \",fill:\"#7D6282\",transform:\"translate(566.375,351.4375)\"})),_path216||(_path216=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C0.67 2.66 0.34 3.32 0 4 C0.06 5.91 0.06 5.91 0.38 8.06 C0.52 9.27 0.52 9.27 0.66 10.5 C0.88 12.12 1.14 13.74 1.43 15.35 C1.56 16.1 1.68 16.85 1.81 17.62 C1.94 18.3 2.07 18.97 2.21 19.66 C1.6 26.53 -4.25 31.71 -8.81 36.38 C-12.77 40.5 -16.57 44.55 -19.94 49.19 C-23.13 53.47 -26.69 56.42 -32.12 57.38 C-34.86 58.29 -35.87 60.36 -37.58 62.56 C-40.01 65.02 -42.67 65.46 -46 66 C-46.95 65.69 -46.95 65.69 -47.92 65.38 C-50.88 64.84 -52.21 65.91 -54.75 67.44 C-55.55 67.91 -56.35 68.38 -57.17 68.87 C-57.78 69.24 -58.38 69.62 -59 70 C-59 70.33 -59 70.66 -59 71 C-66.98 72.65 -74.87 73.51 -83 74 C-83 74.66 -83 75.32 -83 76 C-85.31 76 -87.62 76 -90 76 C-90 76.66 -90 77.32 -90 78 C-90.79 78.2 -91.58 78.39 -92.4 78.6 C-95.29 79.78 -95.29 79.78 -96.04 82.93 C-96.23 84.09 -96.43 85.25 -96.62 86.44 C-97.68 92.55 -97.68 92.55 -99.34 94.86 C-102.22 96.84 -105.6 96.93 -109 97 C-109.87 96.79 -110.73 96.59 -111.62 96.38 C-115.07 95.83 -117.02 97.35 -120 99 C-120.66 99 -121.32 99 -122 99 C-122 99.99 -122 100.98 -122 102 C-122.99 102 -123.98 102 -125 102 C-124.59 97.18 -122.62 95.09 -119 92 C-118.34 92 -117.68 92 -117 92 C-116.67 91.01 -116.34 90.02 -116 89 C-114.99 88.32 -113.98 87.64 -112.94 86.94 C-108.68 84.07 -105.88 80.36 -102.8 76.3 C-99.33 71.86 -96.55 70.18 -91.25 68 C-90.06 67.51 -88.87 67.01 -87.64 66.5 C-86.44 66.01 -85.24 65.51 -84 65 C-83.39 64.72 -82.77 64.44 -82.14 64.15 C-78.81 62.63 -76.22 61.74 -72.56 61.81 C-56.84 60.61 -40.96 47.18 -31 36 C-29.33 33.85 -27.73 31.68 -26.19 29.43 C-25.8 28.96 -25.41 28.49 -25 28 C-24.34 28 -23.68 28 -23 28 C-22.58 27.16 -22.58 27.16 -22.15 26.29 C-20.98 23.95 -19.79 21.63 -18.56 19.31 C-17.95 18.13 -17.95 18.13 -17.32 16.93 C-16 15 -16 15 -13 14 C-11.29 12.38 -9.63 10.7 -8 9 C-7.13 8.15 -6.27 7.31 -5.38 6.44 C-3.37 4.38 -1.65 2.35 0 0 Z \",fill:\"#3A1949\",transform:\"translate(458,1178)\"})),_path217||(_path217=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56 1.06 3.1 2.21 4.4 4.63 C6.92 8.93 9.37 12.07 14.34 13.5 C17.09 13.88 17.09 13.88 20.4 13.88 C25 15.09 26.26 17.11 28.9 20.91 C29.96 22.82 29.96 22.82 29.96 24.82 C33.95 25.64 33.95 25.64 37.96 25.82 C38.79 25.14 39.61 24.46 40.46 23.75 C42.96 21.82 42.96 21.82 45.05 21.99 C47.05 22.51 49.01 23.15 50.96 23.82 C53.13 18.87 55.1 13.89 56.96 8.82 C57.95 8.82 58.94 8.82 59.96 8.82 C61.47 10.32 61.08 11.72 61.15 13.82 C61.85 19.64 63.43 23.93 67.96 27.82 C71.4 29.44 75 30.53 78.62 31.64 C84.45 33.47 89.26 35.74 92.96 40.82 C93.9 43.44 94.14 44.36 93.15 47 C91.96 48.82 91.96 48.82 89.96 49.82 C88.03 49.95 86.09 50.02 84.14 50.06 C82.97 50.1 81.79 50.13 80.58 50.16 C78.11 50.22 75.64 50.28 73.17 50.33 C66.82 50.52 61 50.77 54.96 52.82 C52.57 55.95 52.95 57.72 53.4 61.63 C55.18 67.68 59.45 72.18 64.65 75.57 C67.73 76.73 70.83 77.74 73.96 78.75 C78.62 80.26 82.11 81.83 85.96 84.82 C86.75 85.35 87.53 85.89 88.34 86.44 C88.88 86.9 89.41 87.35 89.96 87.82 C89.96 88.48 89.96 89.14 89.96 89.82 C91.94 90.81 91.94 90.81 93.96 91.82 C93.96 92.48 93.96 93.14 93.96 93.82 C94.95 93.49 95.94 93.16 96.96 92.82 C97.29 94.47 97.62 96.12 97.96 97.82 C95.28 98.13 95.28 98.13 91.96 97.82 C90.27 96.17 88.61 94.5 86.96 92.82 C81.74 89.45 76.54 87.6 70.46 86.38 C62.65 84.73 56.7 81.87 51.34 75.88 C49.02 71.1 49.73 65.42 49.92 60.24 C50.12 56.97 50.12 56.97 49.36 54.52 C49.23 53.96 49.1 53.4 48.96 52.82 C52.33 48.1 55.73 47.05 61.17 46.08 C61.76 45.99 62.36 45.91 62.96 45.82 C62.96 45.16 62.96 44.5 62.96 43.82 C63.62 43.49 64.28 43.16 64.96 42.82 C64.96 41.5 64.96 40.18 64.96 38.82 C64.4 38.73 63.85 38.65 63.27 38.56 C60.73 38.17 58.19 37.77 55.65 37.38 C54.77 37.24 53.89 37.11 52.98 36.97 C52.13 36.84 51.29 36.71 50.41 36.57 C49.63 36.45 48.85 36.33 48.05 36.21 C45.96 35.82 45.96 35.82 42.96 34.82 C42.96 34.16 42.96 33.5 42.96 32.82 C42.04 32.94 41.11 33.06 40.15 33.19 C34.38 33.21 29.74 29.73 24.96 26.82 C24.29 26.44 23.62 26.06 22.93 25.67 C21.28 24.69 21.28 24.69 18.96 22.82 C18.96 21.5 18.96 20.18 18.96 18.82 C15.55 18.65 15.55 18.65 11.96 18.82 C11.3 19.48 10.64 20.14 9.96 20.82 C8.64 21.5 7.31 22.17 5.96 22.82 C4.47 24.31 4.63 25.8 4.4 27.88 C4.26 29.18 4.11 30.48 3.96 31.82 C1.65 31.82 -0.66 31.82 -3.04 31.82 C-3.38 29.48 -3.72 27.15 -4.04 24.82 C-4.14 24.04 -4.25 23.26 -4.36 22.45 C-4.46 21.67 -4.56 20.88 -4.66 20.07 C-4.76 19.33 -4.85 18.59 -4.95 17.83 C-5.04 15.82 -5.04 15.82 -4.04 12.82 C-4.37 12.16 -4.7 11.5 -5.04 10.82 C-6.03 10.51 -7.02 10.2 -8.04 9.88 C-9.52 9.35 -9.52 9.35 -11.04 8.82 C-11.37 7.83 -11.7 6.84 -12.04 5.82 C-4.35 -0.39 -4.35 -0.39 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(720.03515625,1182.18359375)\"})),_path218||(_path218=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.34 3.5 2.43 4.88 2 9 C0.64 11.39 0.64 11.39 -1.19 13.69 C-8.17 23.13 -11.46 33.94 -15 45 C-15.68 47.11 -16.37 49.21 -17.06 51.31 C-17.34 52.17 -17.62 53.04 -17.91 53.93 C-18.51 55.61 -19.13 57.3 -19.85 58.94 C-23.17 66.65 -25.07 74.64 -27.06 82.77 C-31.19 99.56 -35.86 116.06 -41.22 132.5 C-41.48 133.33 -41.73 134.15 -42 135 C-42.35 136.06 -42.35 136.06 -42.7 137.14 C-43.23 139.28 -43.23 139.28 -41.5 142.06 C-39.21 145.24 -39.21 145.24 -35.56 146.25 C-30.89 148.54 -30.23 151.08 -28.18 155.68 C-26.64 158.71 -25.2 159.88 -22 161 C-21.13 161 -20.27 161 -19.38 161 C-17 161 -17 161 -15.19 162.5 C-14.6 163.24 -14.6 163.24 -14 164 C-17.47 164.99 -17.47 164.99 -21 166 C-21.5 165.01 -21.5 165.01 -22 164 C-23.32 164.33 -24.64 164.66 -26 165 C-25.34 166.32 -24.68 167.64 -24 169 C-27 169 -27 169 -29.38 166.81 C-30.24 165.88 -31.11 164.96 -32 164 C-32.89 163.15 -33.77 162.31 -34.69 161.44 C-36.71 159.3 -37.9 157.69 -39 155 C-38.34 155 -37.68 155 -37 155 C-39.06 149.19 -39.06 149.19 -44 146 C-45.75 142.88 -45.75 142.88 -47 140 C-48.65 140 -50.3 140 -52 140 C-51.73 130.81 -49.44 122.39 -46.93 113.61 C-46.26 111.27 -45.6 108.93 -44.95 106.58 C-43.1 100.01 -41.21 93.49 -38.95 87.05 C-36.77 80.79 -35.31 74.83 -34.45 68.26 C-32.96 57.42 -30.32 46.69 -28 36 C-27.82 35.14 -27.63 34.29 -27.44 33.4 C-24.69 20.8 -19.52 9.04 -9 1 C-3.51 -1.57 -3.51 -1.57 0 0 Z \",fill:\"#5E3D64\",transform:\"translate(560,153)\"})),_path219||(_path219=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.12 0.44 3.12 0.44 5.56 2.62 C7.12 5.44 7.12 5.44 6.88 7.89 C6.11 10.49 5.17 11.91 3.56 14.06 C0.23 19.66 0.8 25.4 1.13 31.7 C1.35 36.48 1.41 39.63 -1.88 43.44 C-6.02 46.77 -10.2 47.14 -15.31 47.62 C-16.42 47.75 -16.42 47.75 -17.55 47.87 C-21.65 48.31 -25.75 48.74 -29.88 48.44 C-31.83 45.99 -32.76 43.77 -33.75 40.81 C-35.26 37.62 -36.67 36.9 -39.88 35.44 C-41.13 35.19 -42.39 34.94 -43.69 34.69 C-48.91 33.55 -52.18 30.11 -55.88 26.44 C-55.18 19.4 -49.61 15.24 -44.88 10.44 C-44.13 9.68 -43.38 8.92 -42.61 8.13 C-38.78 4.5 -38.78 4.5 -36.88 3.44 C-33.39 3.73 -30.62 4.91 -27.5 6.44 C-22.48 8.72 -18.28 9.92 -12.75 8.81 C-9.37 7.2 -7.37 5.21 -4.88 2.44 C-2.88 0.44 -2.88 0.44 0 0 Z \",fill:\"#8079AC\",transform:\"translate(787.875,657.5625)\"})),_path220||(_path220=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.86 0.09 10.27 1.21 15.3 4.32 C16.12 4.72 16.95 5.11 17.8 5.51 C19.65 7.75 19.63 9.07 19.89 11.94 C19.97 12.76 20.05 13.57 20.13 14.42 C20.21 15.36 20.21 15.36 20.3 16.32 C22.11 17.07 23.92 17.81 25.73 18.56 C27.28 19.2 28.83 19.84 30.38 20.48 C33.9 21.93 37.42 23.37 40.96 24.76 C42 25.17 43.04 25.59 44.11 26.01 C45.02 26.37 45.94 26.72 46.88 27.09 C49.59 28.47 51.18 30.16 53.3 32.32 C55.62 33.74 55.62 33.74 58.11 34.89 C59.42 35.51 59.42 35.51 60.75 36.15 C63.91 37.6 67.08 39 70.3 40.32 C70.3 40.65 70.3 40.98 70.3 41.32 C65.14 41.95 61.54 39.76 57.11 37.45 C56.02 36.9 56.02 36.9 54.92 36.34 C49.59 33.62 49.59 33.62 47.3 31.32 C44.94 30.63 42.63 30.04 40.24 29.51 C39.14 29.26 39.14 29.26 38.02 29.01 C35.45 28.44 32.87 27.88 30.3 27.32 C29.27 27.1 28.24 26.87 27.18 26.64 C23.87 25.91 20.55 25.21 17.24 24.51 C16.18 24.28 15.12 24.05 14.03 23.81 C8.02 22.58 3.34 22.3 -2.7 23.32 C-3.36 22.99 -4.02 22.66 -4.7 22.32 C-5.36 23.97 -6.02 25.62 -6.7 27.32 C-8.02 26.99 -9.34 26.66 -10.7 26.32 C-11.03 27.97 -11.36 29.62 -11.7 31.32 C-10.77 31.63 -9.85 31.94 -8.89 32.26 C1.4 36.68 11.42 46.84 18.8 55.14 C21.35 57.37 23.08 58.08 26.24 59.2 C30.83 60.87 32.8 62.73 35.65 66.59 C38.31 69.39 41.68 70.58 45.22 71.99 C47.3 73.32 47.3 73.32 48.15 75.91 C48.22 77.1 48.22 77.1 48.3 78.32 C47.3 79.32 47.3 79.32 43.42 79.57 C39.56 79.53 39.56 79.53 37.61 78.01 C37.18 77.45 36.74 76.9 36.3 76.32 C35.53 75.91 34.77 75.5 33.99 75.07 C31.48 73.44 30.35 72.25 28.55 69.95 C26.2 67.06 24.04 65.46 20.74 63.76 C15.78 61.21 13.08 57.94 9.95 53.34 C5.12 46.47 -0.49 42.42 -8.7 40.32 C-10.41 40.05 -12.12 39.78 -13.83 39.51 C-21.99 38.05 -30.19 35.99 -35.39 29.14 C-38.3 24.64 -39.09 21.8 -38.7 16.32 C-36.89 13.45 -35.44 13.26 -32.08 12.48 C-30.67 12.25 -29.25 12.03 -27.83 11.82 C-22.91 11.1 -18.76 10.37 -14.7 7.32 C-12.46 4.29 -12.46 4.29 -10.7 1.32 C-8.48 -0.9 -3.08 0.02 0 0 Z \",fill:\"#4B295A\",transform:\"translate(1052.7021484375,646.676513671875)\"})),_path221||(_path221=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.66 5.38 1.19 8.89 -1.55 13.51 C-5.9 20.99 -9.16 28.71 -12 36.88 C-14.12 42.87 -16.26 48.8 -18.81 54.62 C-20.86 59.37 -22.09 64.1 -23.26 69.13 C-24.41 73.6 -26.22 77.75 -28 82 C-28.79 83.93 -29.56 85.87 -30.31 87.81 C-30.66 88.69 -31.01 89.56 -31.36 90.46 C-32.1 93.38 -31.93 95.15 -31 98 C-30.34 98.33 -29.68 98.66 -29 99 C-28.35 100.29 -27.75 101.61 -27.19 102.94 C-25.8 105.83 -25.32 106.81 -22.5 108.5 C-19.77 109.13 -19.77 109.13 -16 109 C-16.17 109.95 -16.33 110.9 -16.5 111.88 C-17.17 116.56 -17.02 121.16 -16.94 125.88 C-16.76 144.27 -18 162.64 -19 181 C-19.33 180.34 -19.66 179.68 -20 179 C-20.66 179 -21.32 179 -22 179 C-22 178.34 -22 177.68 -22 177 C-22.66 177 -23.32 177 -24 177 C-26.61 160.16 -29.04 143.29 -23 127 C-24.32 126.67 -25.64 126.34 -27 126 C-27 125.34 -27 124.68 -27 124 C-27.66 124 -28.32 124 -29 124 C-30.28 121.44 -30.06 119.67 -30 116.81 C-29.96 109.86 -30.34 104.64 -34.02 98.69 C-35.44 96.25 -36.2 93.7 -37 91 C-38.22 87.28 -39.51 83.62 -41 80 C-41.66 80 -42.32 80 -43 80 C-43.58 78.43 -43.58 78.43 -44.17 76.82 C-44.7 75.45 -45.22 74.07 -45.75 72.69 C-46 72 -46.26 71.31 -46.52 70.6 C-48.1 66.51 -49.46 64.48 -53 62 C-53.64 59.88 -53.64 59.88 -53.81 57.56 C-53.91 56.42 -53.91 56.42 -54.02 55.25 C-54 53 -53.64 51.15 -53 49 C-53.66 49 -54.32 49 -55 49 C-55.66 44.38 -56.32 39.76 -57 35 C-57.66 35 -58.32 35 -59 35 C-59.66 31.7 -60.32 28.4 -61 25 C-58 25 -58 25 -56.39 26.33 C-52.14 31.13 -49.34 35.99 -46.61 41.77 C-44.31 46.38 -41.59 50.65 -38.83 54.99 C-34 62.93 -34 62.93 -34 66 C-30.15 63.66 -29.33 61.75 -28.25 57.44 C-25.72 48.55 -21.9 40.36 -18 32 C-17.57 31.07 -17.14 30.15 -16.69 29.19 C-15.34 26.31 -13.99 23.44 -12.62 20.56 C-12.2 19.66 -11.77 18.75 -11.33 17.82 C-10.72 16.55 -10.72 16.55 -10.1 15.25 C-9.74 14.5 -9.39 13.75 -9.02 12.98 C-8 11 -8 11 -6 8 C-5.34 8 -4.68 8 -4 8 C-3.71 7.24 -3.42 6.47 -3.12 5.69 C-2 3 -2 3 0 0 Z \",fill:\"#080D30\",transform:\"translate(1029,1013)\"})),_path222||(_path222=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.45 1.63 10.45 1.63 15.31 3.62 C18.87 4.95 21.25 5.28 25 5 C24.34 5.66 23.68 6.32 23 7 C20.08 6.98 17.28 6.86 14.38 6.62 C13.57 6.57 12.77 6.51 11.95 6.45 C9.96 6.31 7.98 6.16 6 6 C5.81 8.4 5.81 8.4 6 11 C10.13 15.47 14.91 17.36 20.44 19.74 C23.78 21.38 25.62 23.16 28 26 C28.99 26.99 28.99 26.99 30 28 C30.35 31.74 30.44 35.45 30.56 39.2 C31.03 43.26 31.75 45.61 34 49 C36.73 51.17 36.73 51.17 39.88 52.94 C49.19 58.93 49.19 58.93 51 64 C53.24 75.31 48.1 88.06 42.5 97.81 C40.14 101.14 37.77 103.3 34 105 C30.48 105.2 27.23 104.92 24.32 102.74 C22.64 100.53 22.44 98.94 22.12 96.18 C22 95.25 21.89 94.33 21.77 93.37 C21.66 92.4 21.55 91.43 21.44 90.44 C21.21 88.52 20.98 86.6 20.75 84.68 C20.65 83.83 20.55 82.98 20.45 82.11 C20.15 79.79 20.15 79.79 18 78 C15.16 77.2 12.38 76.5 9.5 75.88 C8.68 75.7 7.87 75.52 7.03 75.34 C-3.33 73.2 -10.45 72.95 -19.62 78.62 C-22.43 81.43 -23.96 84.33 -25.69 87.88 C-27.2 90.32 -28.54 91.54 -31 93 C-33.74 93.59 -36.25 93.5 -39 93 C-42.8 90.4 -43.81 87.36 -45 83 C-47.35 82.31 -47.35 82.31 -50 82 C-51.48 82.99 -51.48 82.99 -53 84 C-53.38 86.86 -53.58 89.53 -53.66 92.4 C-53.7 93.24 -53.73 94.07 -53.77 94.93 C-53.88 97.6 -53.97 100.27 -54.06 102.94 C-54.16 105.6 -54.26 108.27 -54.37 110.94 C-54.44 112.6 -54.5 114.26 -54.55 115.92 C-54.7 119.75 -54.83 121.74 -57 125 C-57.71 113.8 -58.2 102.65 -57.75 91.44 C-57.72 90.56 -57.7 89.69 -57.67 88.79 C-57.25 80.31 -57.25 80.31 -54 77 C-51.2 76.32 -48.89 75.94 -46.06 75.75 C-40.81 75.35 -40.81 75.35 -35.64 74.39 C-34 74 -34 74 -31.69 75 C-27.65 76.5 -24.09 75.83 -20.09 74.24 C-18.13 73.31 -16.22 72.3 -14.31 71.25 C-13.66 70.91 -13.01 70.58 -12.34 70.23 C-8.27 68.04 -5.69 65.87 -3 62 C-2.42 61.24 -1.85 60.47 -1.25 59.69 C-0.84 59.13 -0.42 58.57 0 58 C1.32 58.66 2.64 59.32 4 60 C4 62.64 4 65.28 4 68 C7.79 69.71 11.12 70.33 15.25 70.75 C21.65 71.66 26.19 73.67 31 78 C33.43 81.64 33.16 83.71 33 88 C33.33 87.67 33.66 87.34 34 87 C34.47 86.63 34.95 86.26 35.44 85.88 C37.28 83.93 37.28 83.93 38 80.5 C39.33 75.85 39.33 75.85 42 74 C43.33 73.65 44.66 73.31 46 73 C47.55 69.9 47.29 67.42 47 64 C44.39 58.9 39.6 56.98 34.66 54.53 C31.86 52.92 29.99 51.54 28 49 C27.5 46.34 27.5 46.34 27.44 43.5 C27.34 39.29 26.94 37.1 24 34 C22.28 33.06 20.55 32.12 18.82 31.19 C16.2 29.48 14.53 27.28 12.61 24.84 C10.84 22.82 8.93 21.33 6.81 19.69 C2.29 15.85 0.94 11.75 0 6 C-0.19 2.38 -0.19 2.38 0 0 Z \",fill:\"#7C5C7B\",transform:\"translate(1169,1072)\"})),_path223||(_path223=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.42 1.9 5.26 4.52 7.49 7.64 C12.83 14.78 18.89 20.91 25.26 27.13 C27.66 29.48 29.95 31.87 32.12 34.45 C40.06 43.81 49.85 55.32 60.62 61.45 C63.3 61.71 63.3 61.71 65.62 61.45 C64.83 60.69 64.05 59.92 63.24 59.14 C59.73 54.96 58.76 49.83 58.62 44.45 C59.28 43.46 59.94 42.47 60.62 41.45 C66.64 41.75 70.26 44.58 74.62 48.45 C77.12 51.32 77.12 51.32 78.62 53.45 C76.97 53.12 75.32 52.79 73.62 52.45 C81.43 62.88 92.93 71.58 104.02 78.3 C105.62 79.45 105.62 79.45 107.62 82.45 C104.62 83.45 104.62 83.45 102.49 82.7 C92.72 77.68 84.38 71.42 76.06 64.27 C73.78 62.57 72.39 61.85 69.62 61.45 C75.46 74.53 89.97 81.22 102.52 86.52 C107.33 88.64 112.03 91 116.74 93.32 C117.81 93.84 118.88 94.36 119.99 94.89 C125.34 97.53 129.78 99.83 133.62 104.45 C132.63 106.43 132.63 106.43 131.62 108.45 C124.29 108.9 118.61 107.89 111.8 105.2 C110.99 104.9 110.17 104.6 109.32 104.29 C104.75 102.55 101.38 100.64 97.62 97.45 C95.38 96.4 95.38 96.4 93.12 95.76 C92.38 95.53 91.65 95.3 90.9 95.06 C88.63 94.38 88.63 94.38 86.29 94.27 C82.09 92.98 79.52 90.04 76.43 87.01 C75.77 86.38 75.11 85.75 74.43 85.11 C69.73 80.6 65.11 76.01 60.57 71.34 C58.56 69.28 58.56 69.28 55.62 67.45 C55.62 66.79 55.62 66.13 55.62 65.45 C54.63 65.12 53.64 64.79 52.62 64.45 C50.97 62.78 50.97 62.78 49.24 60.7 C45.66 56.49 42.06 52.61 37.74 49.14 C33.23 45.44 28.48 41.04 26.62 35.45 C25.96 35.45 25.3 35.45 24.62 35.45 C23.24 34.05 23.24 34.05 21.62 32.07 C17.95 27.75 14.01 23.8 9.95 19.84 C7.66 17.49 5.65 15.02 3.62 12.45 C2.63 11.44 1.63 10.44 0.62 9.45 C-0.46 8.27 -1.52 7.09 -2.57 5.89 C-3.1 5.29 -3.63 4.69 -4.18 4.07 C-5.38 2.45 -5.38 2.45 -5.38 0.45 C-2.38 -0.55 -2.38 -0.55 0 0 Z \",fill:\"#371943\",transform:\"translate(714.3828125,192.55078125)\"})),_path224||(_path224=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.13 0.89 11.34 4.26 16.62 7.38 C21.18 9.2 24.93 8 29.44 6.5 C29.18 11.21 28.64 14.53 26.21 18.59 C23.75 22.86 21.65 27.23 19.59 31.71 C15.81 39.93 11.91 47.91 6.88 55.44 C6.46 56.06 6.04 56.69 5.61 57.33 C4.61 58.77 3.53 60.14 2.44 61.5 C1.78 61.5 1.12 61.5 0.44 61.5 C0.18 62.08 -0.08 62.65 -0.35 63.25 C-1.66 65.68 -3.16 67.51 -5 69.56 C-5.6 70.23 -6.19 70.91 -6.81 71.6 C-8.36 73.28 -9.93 74.9 -11.56 76.5 C-17.44 67.05 -17.44 67.05 -16.56 61.5 C-16.21 60.7 -15.86 59.89 -15.5 59.06 C-13.91 54.72 -15.35 50.61 -16.2 46.17 C-16.59 42.27 -16.14 39.81 -15.02 36.08 C-14.66 34.89 -14.31 33.7 -13.95 32.47 C-13.58 31.24 -13.2 30.01 -12.81 28.75 C-12.09 26.32 -11.36 23.89 -10.64 21.45 C-10.29 20.28 -9.93 19.11 -9.56 17.91 C-8.38 13.87 -7.34 9.79 -6.36 5.7 C-5.09 2.2 -3.66 0.72 0 0 Z \",fill:\"#7C5B7A\",transform:\"translate(804.5625,470.5)\"})),_path225||(_path225=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56 2.06 2.56 2.06 5 5 C6.14 6.09 7.29 7.17 8.44 8.25 C13.99 13.91 18.3 18.8 18.75 27 C18.38 33.44 16.14 37.2 12 42 C10.75 43.45 10.75 43.45 9.48 44.93 C2.91 52.39 2.91 52.39 -1 55 C-3.08 54.85 -3.08 54.85 -5 54 C-5.56 52.82 -6.11 51.65 -6.69 50.44 C-9.79 44.93 -15.15 43.22 -20.77 40.97 C-26 38.8 -28.9 36.81 -32 32 C-32.74 28.93 -32.74 28.93 -32.88 25.88 C-32.96 24.36 -32.96 24.36 -33.05 22.8 C-33.01 20.33 -32.73 18.35 -32 16 C-30.89 15.71 -29.77 15.42 -28.62 15.12 C-25 14.31 -25 14.31 -23 12 C-22.2 9.98 -21.54 7.94 -20.88 5.88 C-20 4 -20 4 -17 2 C-11.44 0.22 -5.8 -0.68 0 0 Z \",fill:\"#8079AC\",transform:\"translate(799,336)\"})),_path226||(_path226=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.81 2.94 3.81 2.94 4 5 C3.34 5.66 2.68 6.32 2 7 C0.97 6.61 -0.06 6.22 -1.12 5.81 C-4.88 4.72 -4.88 4.72 -8.06 5.81 C-11.44 8.33 -13.12 10.81 -15.31 14.36 C-17.17 17.27 -19.24 19.92 -21.38 22.62 C-29.38 33.2 -36.61 45.64 -38 59 C-37.01 59.33 -36.02 59.66 -35 60 C-33.89 57.79 -32.79 55.56 -31.7 53.34 C-24.66 38.98 -24.66 38.98 -21 34 C-20.34 34 -19.68 34 -19 34 C-18.67 34.99 -18.34 35.98 -18 37 C-12.44 35.27 -9.98 31.79 -6.38 27.41 C-2.77 23.76 0.3 22.15 5.43 21.71 C6.57 21.74 7.7 21.78 8.88 21.81 C10.03 21.84 11.18 21.87 12.37 21.89 C13.24 21.93 14.1 21.96 15 22 C13.95 13.16 13.95 13.16 9 6 C10.32 4.68 11.64 3.36 13 2 C15.81 2.44 15.81 2.44 19 4 C20.1 6.2 20.74 8.33 21.36 10.71 C22 13 22.91 14.89 24 17 C24.4 18.27 24.4 18.27 24.81 19.56 C26.31 22.63 28 23.5 31 25 C30.69 27.38 30.69 27.38 30 30 C26.94 32.04 25.65 32.34 22.12 32.81 C10.09 34.89 1.25 38.58 -5.83 48.59 C-10.77 56.34 -13.05 64.14 -15 73 C-15.99 73 -16.98 73 -18 73 C-20.09 66.72 -18.97 62.04 -16.22 56.27 C-14.65 53.34 -12.85 50.58 -11.04 47.8 C-9.76 45.59 -9.24 43.54 -9 41 C-11.94 41.18 -11.94 41.18 -15 42 C-16.07 43.83 -16.07 43.83 -17 46 C-17.93 47.38 -18.88 48.73 -19.88 50.06 C-20.37 50.73 -20.86 51.41 -21.37 52.1 C-23.09 54.11 -24.78 55.56 -27 57 C-27.66 57 -28.32 57 -29 57 C-29.07 57.55 -29.15 58.1 -29.23 58.67 C-30.29 61.87 -32.12 63.76 -34.38 66.25 C-35.17 67.14 -35.96 68.03 -36.77 68.95 C-39 71 -39 71 -42 71 C-43.44 68.12 -43.7 65.24 -44.19 62.06 C-44.39 60.82 -44.59 59.57 -44.79 58.29 C-45 55 -45 55 -43 52 C-42.43 50.16 -41.91 48.3 -41.44 46.44 C-40.09 41.18 -40.09 41.18 -39 39 C-38.34 39 -37.68 39 -37 39 C-36.75 38.32 -36.5 37.64 -36.25 36.94 C-35.26 34.62 -34.24 32.69 -32.94 30.56 C-31.09 27.43 -30.36 24.66 -30 21 C-30.99 20.67 -31.98 20.34 -33 20 C-33.99 20.66 -34.98 21.32 -36 22 C-34.84 19.67 -33.66 17.39 -32.38 15.12 C-30.78 12.1 -30.78 12.1 -31.06 8.94 C-30.98 5.06 -29.65 3.73 -27 1 C-19.82 -3.79 -7.77 -3.39 0 0 Z \",fill:\"#290E3D\",transform:\"translate(548,116)\"})),_path227||(_path227=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.38 -0.45 3.93 -2.44 6.5 C-6.24 11.44 -6.57 15.92 -6 22 C-5.3 24.54 -4.49 26.98 -3.56 29.45 C-2.21 35.59 -4.49 40.65 -7.25 46.06 C-7.83 47.23 -8.42 48.4 -9.02 49.6 C-11 53 -11 53 -13.5 55.93 C-16.37 59.45 -17.98 62.95 -19.81 67.06 C-22.5 72.84 -24.42 75.92 -30.24 78.8 C-34.3 81.57 -35.03 86.45 -36 91 C-37.96 102.27 -38.11 113.59 -38.06 125 C-38.06 126.2 -38.05 127.39 -38.05 128.63 C-38.03 135.28 -38.03 135.28 -37.96 141.93 C-37.84 154.51 -40.22 163.12 -46.09 174.2 C-52.77 187.38 -50.33 203.02 -48 217 C-56.25 217 -64.5 217 -73 217 C-73.63 210.02 -74.18 203.28 -74.19 196.31 C-74.2 195.52 -74.21 194.73 -74.22 193.92 C-74.24 188.62 -73.47 184.09 -72 179 C-69.15 179.95 -68.17 180.65 -66.81 183.38 C-65.85 187.66 -65.66 191.81 -65.54 196.2 C-64.88 199.61 -63.63 200.81 -61 203 C-58.53 202.01 -58.53 202.01 -56 201 C-56.2 199.99 -56.2 199.99 -56.39 198.96 C-58.59 183.04 -53.85 166.57 -45.87 152.86 C-39.78 141.18 -40.52 128.17 -40.44 115.38 C-40.25 93.64 -40.25 93.64 -39.16 83.1 C-39.06 82.04 -39.06 82.04 -38.95 80.96 C-38.36 75.88 -37.07 71.65 -35 67 C-32.13 65.13 -29.67 64.18 -26.38 63.31 C-22.64 61.25 -21.63 57.82 -20 54 C-18.39 50.43 -17.19 48.19 -14.38 45.44 C-11.68 42.67 -11.43 41.75 -11 38 C-11.3 28.39 -11.3 28.39 -15.69 20.19 C-19.56 17.63 -21.35 16.77 -26 17 C-30.95 18.86 -35.42 21.05 -39 25 C-39.66 24.67 -40.32 24.34 -41 24 C-35.69 18.95 -30.29 14.68 -24.04 10.88 C-21.78 9.48 -19.61 8.06 -17.43 6.56 C-16.52 5.94 -16.52 5.94 -15.58 5.31 C-14.39 4.5 -13.21 3.68 -12.03 2.84 C-7.89 0.07 -4.93 -0.41 0 0 Z \",fill:\"#54325B\",transform:\"translate(1091,1063)\"})),_path228||(_path228=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.36 3.07 2.8 5.59 3.46 9.39 C4.34 15.2 4.34 15.2 6.84 20.39 C8.77 21.3 8.77 21.3 11.03 21.76 C15.38 23.03 17.83 24.84 21.09 27.92 C22.95 29.48 24.68 30.35 26.9 31.32 C32.46 33.89 35.52 38.4 38.84 43.39 C42.84 45.75 46.28 46.71 50.84 47.39 C55.44 64.05 55.44 64.05 51.84 72.39 C50.87 73.42 49.87 74.42 48.84 75.39 C48.75 74.62 48.67 73.86 48.58 73.08 C47.03 61.69 42.91 55.13 35.12 46.82 C32.45 43.97 29.94 40.99 27.45 37.98 C25.71 36.25 24.08 35.36 21.84 34.39 C22.83 36.04 23.82 37.69 24.84 39.39 C22.6 38.31 20.62 37.23 18.59 35.76 C12.56 32.75 5.51 34.35 -0.74 36.13 C-4.4 38.03 -5.13 40.53 -6.43 44.3 C-7.16 46.39 -7.16 46.39 -8.85 48.32 C-11.83 49.7 -14.81 50.29 -18.04 50.86 C-20.44 51.33 -20.44 51.33 -23.16 53.39 C-24.41 47.56 -25.43 42.09 -24.72 36.14 C-23.84 28.69 -24.47 21.29 -25.02 13.84 C-25.35 8.22 -25.55 4.19 -22.16 -0.61 C-16.17 -3.61 -5.46 -4.08 0 0 Z \",fill:\"#7F709E\",transform:\"translate(783.16015625,302.61328125)\"})),_path229||(_path229=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.34 3.36 2.34 3.36 2.5 6.31 C2.7 10.03 2.92 12.85 5 16 C6.99 17.02 8.99 18.02 11 19 C14.72 22.28 17.36 25.81 20 30 C20.66 30.99 21.32 31.98 22 33 C22 33.66 22 34.32 22 35 C23.36 36.05 23.36 36.05 24.75 37.12 C29.37 40.83 31.31 45.53 32.88 51.12 C33.03 54.7 32.52 56.75 31 60 C28.71 61.48 26.78 62.52 24.31 63.56 C18.58 66.14 18.58 66.14 13.5 69.81 C8.7 73.61 1.87 73.45 -4 74 C-4.15 73.41 -4.29 72.81 -4.45 72.2 C-5.76 67.34 -7.33 63.25 -9.94 58.94 C-15.05 50.03 -16.9 39.14 -18 29 C-17.67 28.67 -17.34 28.34 -17 28 C-13.87 28.22 -10.75 28.5 -7.63 28.86 C-4.49 29.14 -2.38 29.18 0.49 27.79 C2.17 26.13 2.17 26.13 2.24 23.98 C2.12 23.25 2 22.51 1.88 21.75 C1.75 20.95 1.62 20.16 1.5 19.34 C1.07 17.33 0.52 15.35 -0.06 13.38 C-1.37 8.65 -1.55 4.66 0 0 Z \",fill:\"#0A113B\",transform:\"translate(632,884)\"})),_path230||(_path230=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 3.46 0.5 3.46 1 7 C-0.11 7.43 -1.23 7.87 -2.38 8.31 C-6.18 9.7 -6.18 9.7 -8 13 C-9.33 13.62 -9.33 13.62 -10.69 14.25 C-13.71 15.85 -14.83 16.79 -17 19.25 C-21.53 24 -27.3 26.42 -33.17 29.14 C-36.1 30.52 -38.99 31.98 -41.88 33.44 C-43.58 34.29 -45.29 35.15 -47 36 C-47.72 35.15 -48.44 34.31 -49.19 33.44 C-51.69 30.74 -51.69 30.74 -54.5 30.94 C-60.53 33.5 -62.76 36.93 -65.2 42.78 C-71.06 59.1 -67.73 77.61 -61 93 C-60.52 94.23 -60.52 94.23 -60.03 95.49 C-57.92 100.75 -55.03 104.82 -51.39 109.15 C-50 111 -50 111 -50 113 C-49.34 113 -48.68 113 -48 113 C-47.75 113.62 -47.5 114.24 -47.25 114.88 C-45.79 117.35 -44.62 117.95 -42 119 C-42 119.66 -42 120.32 -42 121 C-40.79 121.37 -40.79 121.37 -39.56 121.75 C-36 123 -36 123 -34.27 123.95 C-23.19 129.89 -8.95 130.11 2.97 127 C6.5 125.83 9.82 124.42 13.16 122.79 C15.5 121.79 17.48 121.67 20 122 C19 125 19 125 15.68 126.75 C14.27 127.37 12.86 127.97 11.44 128.56 C10.75 128.87 10.05 129.17 9.34 129.48 C-3.59 135.01 -19.38 137.14 -32.73 131.8 C-39.04 128.92 -45.81 125.65 -51 121 C-51 120.34 -51 119.68 -51 119 C-51.88 118.63 -51.88 118.63 -52.79 118.26 C-55.38 116.78 -56.65 115.25 -58.44 112.88 C-59.27 111.79 -59.27 111.79 -60.12 110.68 C-64.7 104.15 -68.06 97.92 -70.69 90.38 C-70.98 89.56 -71.28 88.74 -71.58 87.89 C-73.11 83.61 -74.58 79.32 -76 75 C-76.33 74.01 -76.66 73.02 -77 72 C-76.34 72 -75.68 72 -75 72 C-75 71.67 -75 71.34 -75 71 C-75 69.68 -75 68.36 -75 67 C-75.66 66.34 -76.32 65.68 -77 65 C-76.34 65 -75.68 65 -75 65 C-75.01 64.14 -75.02 63.29 -75.04 62.4 C-75.12 51.59 -74.55 40.02 -70 30 C-67.12 28.19 -67.12 28.19 -64 27 C-63.17 26.13 -62.35 25.27 -61.5 24.38 C-58.55 21.57 -56.94 21.5 -53 21 C-52.38 20.53 -51.77 20.05 -51.13 19.57 C-48.75 17.81 -46.86 17.26 -44 16.56 C-39.98 15.47 -39.98 15.47 -36.81 12.81 C-35 11 -35 11 -31.44 10.88 C-30.3 10.92 -29.17 10.96 -28 11 C-27.01 10.34 -26.02 9.68 -25 9 C-22.67 9 -20.33 9 -18 9 C-17.01 8.34 -16.02 7.68 -15 7 C-13.68 7 -12.36 7 -11 7 C-11 6.34 -11 5.68 -11 5 C-10.01 4.67 -9.02 4.34 -8 4 C-7.3 2.68 -6.63 1.35 -6 0 C-3.51 -1.25 -2.59 -0.78 0 0 Z \",fill:\"#150E18\",transform:\"translate(643,253)\"})),_path231||(_path231=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.78 3.74 7.71 10.27 9.17 16.75 C9.52 18.5 9.86 20.25 10.19 22 C10.45 23.38 10.45 23.38 10.71 24.78 C12.09 32.54 12.71 40.13 12 48 C11.67 48.33 11.34 48.66 11 49 C10.72 51.25 10.55 53.51 10.38 55.77 C10 58 10 58 8 61 C7.27 60.94 6.55 60.88 5.8 60.82 C4.79 60.73 3.79 60.65 2.75 60.56 C-0.66 60.28 -4.06 59.99 -7.47 59.71 C-9.09 59.58 -9.09 59.58 -10.75 59.44 C-12.5 59.29 -14.25 59.15 -16 59 C-16 58.01 -16 57.02 -16 56 C-17.32 55.67 -18.64 55.34 -20 55 C-22.48 47.32 -22.23 39.99 -22 32 C-21.98 31.08 -21.95 30.17 -21.93 29.23 C-21.84 26.3 -21.74 23.37 -21.62 20.44 C-21.59 19.51 -21.56 18.58 -21.53 17.63 C-21.31 12.46 -21.01 7.8 -19 3 C-13.71 -1.61 -6.59 -0.83 0 0 Z \",fill:\"#50356A\",transform:\"translate(646,1104)\"})),_path232||(_path232=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93 0.54 1.86 1.07 2.81 1.62 C3.6 1.89 4.38 2.16 5.19 2.44 C9.94 4.59 14.13 7.95 17.81 11.62 C19.75 12.66 21.71 13.66 23.69 14.62 C24.74 15.14 25.79 15.66 26.87 16.19 C29.67 17.62 29.67 17.62 32.14 18.45 C33.81 19.62 33.81 19.62 34.49 22.27 C34.56 23.31 34.62 24.36 34.69 25.44 C34.77 26.48 34.85 27.51 34.93 28.58 C34.81 31.74 34 33.74 32.81 36.62 C33.14 37.62 33.47 38.61 33.81 39.62 C34.78 40.1 35.75 40.57 36.75 41.06 C40.14 42.79 40.26 43.42 41.81 46.62 C42.55 46.89 43.3 47.16 44.06 47.44 C48.11 49.19 50.44 51.94 52.81 55.62 C53.32 57.15 53.78 58.69 54.19 60.25 C55.26 64.06 56.53 65.57 59.88 67.69 C62.69 69.26 62.69 69.26 65.81 69.62 C65.81 70.28 65.81 70.94 65.81 71.62 C64.33 72.12 64.33 72.12 62.81 72.62 C63.36 73.02 63.9 73.42 64.46 73.83 C65.53 74.63 65.53 74.63 66.62 75.44 C67.33 75.96 68.04 76.48 68.77 77.02 C70.6 78.46 72.21 79.94 73.81 81.62 C72.49 81.96 71.17 82.28 69.81 82.62 C69.26 81.82 68.7 81.02 68.12 80.19 C65.44 77.22 64.65 77.15 60.81 76.62 C59.47 76.1 58.14 75.56 56.81 75 C53.4 73.7 51.32 73.2 47.81 74.62 C46.58 75.68 46.58 75.68 45.31 76.75 C42.81 78.62 42.81 78.62 40.56 78.45 C37.2 77.44 34.38 75.95 31.31 74.25 C30.21 73.64 29.11 73.04 27.97 72.41 C26.41 71.53 26.41 71.53 24.81 70.62 C23.4 69.86 23.4 69.86 21.96 69.08 C19.81 67.62 19.81 67.62 18.88 64.75 C18.81 61.44 19.31 59.54 20.81 56.62 C21.14 56.29 21.47 55.97 21.81 55.62 C21.15 53.98 20.49 52.33 19.81 50.62 C15.36 51.12 15.36 51.12 10.81 51.62 C11.14 50.97 11.47 50.3 11.81 49.62 C12.47 49.62 13.13 49.62 13.81 49.62 C14.06 49.01 14.31 48.39 14.56 47.75 C16.04 45.23 17.06 44.54 19.81 43.62 C20.8 43.96 21.79 44.28 22.81 44.62 C23.47 42.64 24.13 40.66 24.81 38.62 C28.55 39.87 30.04 41.85 32.81 44.62 C34.76 46.06 36.76 47.34 38.81 48.62 C37.9 46.3 37.9 46.3 34.88 45.19 C31.81 43.62 31.81 43.62 29.81 40.62 C28.84 36.57 28.39 34.48 30.25 30.69 C31.02 29.67 31.02 29.67 31.81 28.62 C30.82 28.29 29.83 27.97 28.81 27.62 C29.09 26.79 29.09 26.79 29.38 25.94 C29.89 23.23 29.48 21.28 28.81 18.62 C27.72 18.65 26.63 18.67 25.5 18.69 C21.81 18.62 21.81 18.62 18.81 17.62 C18.81 16.63 18.81 15.64 18.81 14.62 C16.83 15.62 16.83 15.62 14.81 16.62 C13.16 14.98 11.51 13.33 9.81 11.62 C9.48 11.96 9.15 12.28 8.81 12.62 C10.13 13.28 11.45 13.95 12.81 14.62 C11.82 15.12 11.82 15.12 10.81 15.62 C9.4 19.87 11.12 22.78 12.69 26.75 C12.97 27.49 13.25 28.23 13.54 29 C14.73 32.58 14.73 32.58 16.81 35.62 C19.15 35.67 21.48 35.67 23.81 35.62 C22.56 38.12 22.56 38.12 20.81 40.62 C19.49 40.62 18.17 40.62 16.81 40.62 C15.82 41.12 15.82 41.12 14.81 41.62 C14.67 42.41 14.52 43.19 14.38 44 C13.75 46.9 13.18 47.89 10.81 49.62 C9.82 49.62 8.83 49.62 7.81 49.62 C7.48 50.28 7.15 50.95 6.81 51.62 C7.19 49.69 7.19 49.69 7.81 47.62 C8.8 47.13 8.8 47.13 9.81 46.62 C11.83 39.12 9.76 32.66 6.81 25.62 C5.3 23.33 3.74 21.6 1.81 19.62 C1.81 18.97 1.81 18.3 1.81 17.62 C-2.15 16.63 -6.11 15.64 -10.19 14.62 C-9.53 14.29 -8.87 13.97 -8.19 13.62 C-8.52 12.3 -8.85 10.99 -9.19 9.62 C-10.16 9.5 -11.13 9.38 -12.12 9.25 C-13.14 9.04 -14.15 8.84 -15.19 8.62 C-15.52 7.97 -15.85 7.3 -16.19 6.62 C-17.18 6.29 -18.17 5.97 -19.19 5.62 C-19.52 4.63 -19.85 3.64 -20.19 2.62 C-13.23 -0.98 -7.61 -3.28 0 0 Z \",fill:\"#090F36\",transform:\"translate(938.1875,699.375)\"})),_path233||(_path233=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.41 0.04 6.9 1.48 10.31 4.31 C12.17 8.03 11.26 12.89 11.1 17.02 C11.03 20.48 11 22.72 12.62 25.84 C14.34 27.63 14.34 27.63 17.5 27.56 C18.89 27.44 18.89 27.44 20.31 27.31 C20.51 26.72 20.7 26.13 20.9 25.52 C22.26 21.4 23.63 17.32 25.31 13.31 C25.64 13.31 25.97 13.31 26.31 13.31 C25.7 20.19 24.41 26.68 22.75 33.38 C22.52 34.34 22.28 35.3 22.04 36.29 C21.47 38.63 20.89 40.97 20.31 43.31 C16.81 42.66 14.05 41.8 10.88 40.19 C6.9 38.38 4.58 37.89 0.31 39.31 C-0.62 39.79 -1.54 40.26 -2.5 40.75 C-5.32 42.13 -7.22 42.66 -10.25 43.19 C-15.45 44.26 -17.88 46.63 -20.84 51.02 C-22.89 54.37 -24.21 57.41 -24.69 61.31 C-26.17 60.82 -26.17 60.82 -27.69 60.31 C-27.81 59.24 -27.93 58.17 -28.06 57.06 C-28.39 55.06 -28.39 55.06 -29.69 53.31 C-33.01 51.79 -36.3 50.74 -39.82 49.75 C-40.76 49.27 -41.71 48.8 -42.69 48.31 C-44.09 44.06 -43.8 41.1 -41.82 37.04 C-37.54 30.53 -29.34 25.59 -22.12 23.06 C-14.54 19.2 -10.43 10.54 -6.07 3.5 C-4.08 0.35 -4.08 0.35 0 0 Z \",fill:\"#846A89\",transform:\"translate(819.6875,416.6875)\"})),_path234||(_path234=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.21 0.08 4.62 0.63 6.94 2.88 C9.33 6.5 11.37 10.24 13.41 14.07 C17.09 21.46 17.09 21.46 22 28 C22.25 31.03 22.19 34.08 22.19 37.12 C22.2 37.97 22.21 38.81 22.22 39.68 C22.24 44.84 21.8 49.14 20 54 C18 56 18 56 15.68 56.25 C12.77 55.98 10.78 55.22 8.12 54 C2.78 51.76 -1.33 51.09 -6.94 53 C-7.96 53.49 -7.96 53.49 -9 54 C-9 53.01 -9 52.02 -9 51 C-9.99 50.67 -10.98 50.34 -12 50 C-12.5 48.52 -12.5 48.52 -13 47 C-13.99 47.49 -13.99 47.49 -15 48 C-15.56 44.23 -16.06 40.48 -16.44 36.69 C-17.09 30.68 -18 24.67 -20.12 19 C-21.72 13.54 -22.23 8.26 -19.45 3.17 C-17 1 -17 1 -13.4 0.8 C-12.05 0.94 -10.71 1.12 -9.38 1.31 C-6.9 1.63 -4.49 1.85 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#4F3469\",transform:\"translate(548,1124)\"})),_path235||(_path235=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.01 0.34 8.01 0.34 11.44 2.62 C15.04 8.1 15.39 14.2 15.38 20.56 C15.38 21.34 15.38 22.12 15.38 22.92 C15.24 30.4 13.54 36.95 11 44 C10.34 44 9.68 44 9 44 C8.9 45.3 8.79 46.6 8.69 47.94 C8.13 52.93 6.71 57.29 5 62 C4.29 64.08 3.58 66.16 2.88 68.25 C2.54 69.22 2.21 70.2 1.87 71.2 C1.06 73.79 0.48 76.33 0 79 C-0.66 79 -1.32 79 -2 79 C-3.64 85.67 -4.51 92.15 -5 99 C-5.33 99 -5.66 99 -6 99 C-6.05 98.29 -6.1 97.58 -6.15 96.85 C-6.22 95.93 -6.3 95.01 -6.38 94.06 C-6.44 93.15 -6.51 92.23 -6.59 91.29 C-6.79 90.15 -6.79 90.15 -7 89 C-7.99 88.5 -7.99 88.5 -9 88 C-8.7 87.08 -8.4 86.16 -8.1 85.21 C0.5 59.67 0.5 59.67 2 33 C0.18 30.78 0.18 30.78 -2.41 30.63 C-5.08 30.77 -5.08 30.77 -6.81 32.62 C-8.57 35.06 -10.31 37.5 -12 40 C-12.48 40.69 -12.97 41.38 -13.46 42.09 C-17.86 48.82 -20.77 56.25 -23.75 63.69 C-27.23 72.17 -27.23 72.17 -31 75 C-33.44 75.69 -33.44 75.69 -36 76 C-38.65 76.31 -38.65 76.31 -41 77 C-43.02 79.79 -43.02 79.79 -43.89 82.36 C-45.15 85.35 -46.74 87.6 -48.69 90.19 C-52.56 95.39 -56.3 100.67 -60 106 C-61.17 102.62 -60.87 100.93 -59.42 97.7 C-59.06 96.89 -58.71 96.07 -58.34 95.24 C-57.96 94.4 -57.58 93.55 -57.19 92.69 C-54.73 87.18 -52.52 81.86 -51 76 C-49.35 70.34 -47.53 65.75 -44 61 C-43.67 61.99 -43.34 62.98 -43 64 C-42.34 64 -41.68 64 -41 64 C-40.94 63.05 -40.88 62.1 -40.81 61.12 C-40.09 56.02 -37.84 51.28 -35 47 C-33.51 46.5 -33.51 46.5 -32 46 C-31.34 46.66 -30.68 47.32 -30 48 C-25.99 48.35 -23.48 47.99 -20 46 C-19.34 46 -18.68 46 -18 46 C-17.63 44.85 -17.26 43.69 -16.88 42.5 C-15.14 37.29 -13.21 32.16 -11.27 27.02 C-9.77 23.07 -8.33 19.11 -6.94 15.12 C-5.05 9.86 -2.61 4.94 0 0 Z \",fill:\"#401F54\",transform:\"translate(439,469)\"})),_path236||(_path236=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.34 1.32 6.96 3.58 10.16 6.66 C11.97 8.18 11.97 8.18 14.5 8.44 C19.26 9.51 21.45 14.12 24 18 C25 19.82 25.98 21.65 26.94 23.5 C30.58 30.43 35.42 36.02 41.5 40.94 C42.33 41.62 43.15 42.3 44 43 C44 43.66 44 44.32 44 45 C43.34 45 42.68 45 42 45 C42 44.34 42 43.68 42 43 C41.01 43.5 41.01 43.5 40 44 C40.06 45.2 40.12 46.39 40.19 47.62 C40.17 56.23 38.99 66.43 33 73 C32.34 73 31.68 73 31 73 C30.67 74.65 30.34 76.3 30 78 C24.1 75.77 18.34 73.29 12.62 70.62 C11.98 70.32 11.33 70.02 10.66 69.71 C7.75 68.35 4.92 66.95 2.11 65.39 C-7.33 60.16 -17.53 58.19 -28 56 C-28 55.34 -28 54.68 -28 54 C-28.73 53.9 -29.45 53.8 -30.2 53.7 C-33.34 52.92 -35.2 51.76 -37.81 49.88 C-38.68 49.25 -39.55 48.63 -40.45 47.98 C-42.82 46.14 -45 44.19 -47.19 42.12 C-50.77 38.86 -53.19 38.1 -58 38 C-58.33 36.35 -58.66 34.7 -59 33 C-55.96 32.04 -54.54 31.73 -51.63 33.17 C-47.78 35.85 -44.8 39.21 -41.6 42.62 C-36.2 47.56 -31.57 48.41 -24.56 48.5 C-18.56 48.57 -14.44 49.39 -9 52 C-6.68 52.8 -4.36 53.53 -2.02 54.25 C0 55 0 55 3 57 C5.78 57.75 5.78 57.75 9 57 C11.92 54.93 14.42 52.48 17 50 C18.16 49.01 19.32 48.03 20.5 47.06 C21.74 46.04 21.74 46.04 23 45 C18.05 44.01 13.1 43.02 8 42 C10.41 39.59 11.14 39.77 14.44 39.62 C18.09 39.32 18.09 39.32 21.06 37.25 C22.19 34.54 22.44 32.91 22 30 C20.6 27.72 20.6 27.72 19 26 C18.63 27.33 18.63 27.33 18.25 28.69 C16.94 32.17 15.59 34.34 13 37 C10.75 37.81 10.75 37.81 9 38 C8.67 37.34 8.34 36.68 8 36 C9.18 33.83 9.18 33.83 10.88 31.25 C14.29 26.02 14.29 26.02 15 20 C11.35 12.35 3.74 7.71 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#452354\",transform:\"translate(1130,684)\"})),_path237||(_path237=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.33 0.08 6.33 0.33 9.44 3.44 C11 6 11 6 11 8 C12.32 8 13.64 8 15 8 C15.81 10.69 15.81 10.69 16 14 C13.69 16.5 13.69 16.5 11 19 C8.55 24.01 9.02 27.68 10 33 C10.33 33.66 10.66 34.32 11 35 C10.86 37.95 10.66 40.87 10.44 43.81 C9.79 54.01 10.28 63.39 14.28 72.91 C15.53 76.52 15.96 80.27 16.53 84.04 C17.05 87.34 17.79 90.54 18.63 93.77 C19.13 96.81 19 99.92 19 103 C6.46 103 -6.08 103 -19 103 C-17.77 93.16 -17.77 93.16 -13 89 C-10.34 88.22 -7.76 88.08 -5 88 C-1.76 87.86 -1.76 87.86 1 87 C4.04 83.41 5.67 78.68 6 74 C5.49 71.91 4.74 70.1 3.85 68.14 C2.88 65.7 2.55 63.41 2.19 60.81 C1.26 55.73 -0.79 54.03 -5 51 C-6.4 49.05 -7.73 47.04 -9 45 C-9.44 44.47 -9.87 43.93 -10.32 43.38 C-14.05 38.77 -14.85 34.88 -15 29 C-14.29 28.52 -13.58 28.04 -12.85 27.54 C-11.93 26.91 -11.01 26.28 -10.06 25.62 C-9.15 25 -8.23 24.37 -7.29 23.73 C-4.92 22.2 -4.92 22.2 -4 20 C-3.34 20 -2.68 20 -2 20 C-1.19 14.32 -0.97 9.51 -1.94 3.85 C-1.97 2.93 -1.97 2.93 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#3C194D\",transform:\"translate(239,1177)\"})),_path238||(_path238=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6 0.07 5.16 0.19 7.75 0.38 C8.47 0.42 9.18 0.46 9.92 0.51 C13.69 0.76 17.32 1.15 21 2 C21 2.66 21 3.32 21 4 C22.65 4 24.3 4 26 4 C23.9 6.1 22.6 6.69 19.87 7.73 C19.06 8.04 18.26 8.35 17.43 8.66 C16.58 8.98 15.74 9.3 14.88 9.62 C14.03 9.95 13.18 10.27 12.3 10.61 C10.2 11.41 8.1 12.21 6 13 C6 13.66 6 14.32 6 15 C9.86 15 13.48 12.65 16.96 11.09 C19.9 10.04 21.91 9.77 25 10 C25.69 11.81 25.69 11.81 26 14 C23.86 16.73 21.58 17.75 18.38 18.94 C17.49 19.28 16.61 19.62 15.7 19.96 C14.37 20.48 14.37 20.48 13 21 C11.37 21.65 9.74 22.32 8.12 23 C7.08 23.43 7.08 23.43 6.01 23.88 C3.85 24.91 3.85 24.91 2.41 27.09 C-2.06 30.63 -8.09 29.51 -13.58 29.49 C-21.69 29.61 -27.77 31.24 -34 36.56 C-37.28 39.23 -39.94 40.2 -43.95 41.32 C-46.27 41.99 -46.27 41.99 -49 44 C-47.14 49.18 -46.11 51.51 -41 54 C-40.4 54.47 -39.8 54.94 -39.18 55.43 C-32.15 60.51 -22.99 62.73 -14.71 64.91 C-11.69 66.13 -10.66 67.24 -9 70 C-21.98 74.24 -35.7 71.38 -47.58 65.39 C-49.06 64.61 -50.53 63.81 -52 63 C-52 62.34 -52 61.68 -52 61 C-52.8 60.75 -53.61 60.5 -54.44 60.25 C-57 59 -57 59 -57.81 56.88 C-57.91 55.95 -57.91 55.95 -58 55 C-58.66 55 -59.32 55 -60 55 C-62.68 50.08 -62.02 45.45 -61.62 40.06 C-61.51 38.3 -61.4 36.54 -61.29 34.79 C-61.24 33.96 -61.18 33.14 -61.13 32.29 C-60.97 29.52 -60.95 26.77 -61 24 C-59.44 23.49 -57.88 22.99 -56.31 22.5 C-55.44 22.22 -54.57 21.94 -53.68 21.66 C-51.01 21 -48.74 20.88 -46 21 C-46 22.98 -46 24.96 -46 27 C-42.52 29.14 -40.06 29.53 -36 29 C-33.48 27.84 -31.05 26.55 -28.59 25.25 C-23.39 22.74 -17.78 21.63 -12 22 C-12.33 20.35 -12.66 18.7 -13 17 C-11.36 16.54 -11.36 16.54 -9.69 16.06 C-7.45 15.42 -5.21 14.74 -3 14 C-2.87 13.07 -2.73 12.15 -2.6 11.19 C-2.42 9.99 -2.24 8.8 -2.06 7.56 C-1.89 6.37 -1.71 5.17 -1.54 3.94 C-1 1 -1 1 0 0 Z \",fill:\"#7B648B\",transform:\"translate(653,311)\"})),_path239||(_path239=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.53 4.19 -4.19 5.76 -7.86 8.15 C-8.44 8.53 -9.02 8.92 -9.61 9.31 C-11.47 10.53 -13.33 11.73 -15.19 12.94 C-17.03 14.14 -18.86 15.34 -20.7 16.55 C-21.88 17.32 -23.06 18.09 -24.25 18.86 C-27.24 20.82 -30.18 22.82 -33.05 24.95 C-35.72 26.81 -37.84 27.91 -40.94 28.81 C-41.71 29.05 -42.48 29.28 -43.28 29.52 C-44.13 29.76 -44.13 29.76 -45 30 C-45 29.34 -45 28.68 -45 28 C-48.96 28.5 -48.96 28.5 -53 29 C-53 28.34 -53 27.68 -53 27 C-60.78 26.81 -60.78 26.81 -68.5 27.62 C-71.61 28.09 -72.39 27.73 -75 26 C-83.84 14.8 -83.84 14.8 -83.19 8.44 C-81.4 3.26 -81.4 3.26 -79 1 C-76.32 0.75 -74.03 0.71 -71.38 0.88 C-66.01 1.15 -61.46 0.77 -56.24 -0.51 C-52.64 -1.3 -49.05 -1.52 -45.38 -1.69 C-44.57 -1.73 -43.77 -1.77 -42.95 -1.81 C-28.66 -2.38 -14.22 -1.44 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(631,516)\"})),_path240||(_path240=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.79 0.37 7.9 1.86 12.07 4.11 C12.76 4.47 13.45 4.83 14.16 5.19 C17.04 6.7 19.83 8.23 22.57 9.99 C25.35 11.52 27.69 12.01 30.82 12.49 C31.87 12.65 32.92 12.81 34.01 12.97 C37.09 13.38 37.09 13.38 40.82 13.24 C44.55 13.31 46.76 14.44 49.95 16.3 C47.95 19.3 47.95 19.3 44.57 20.14 C43.22 20.38 41.87 20.59 40.51 20.8 C35.46 21.46 35.46 21.46 31.04 23.77 C28.71 27.03 28.56 29.32 28.95 33.3 C30.77 36.5 32.86 39.2 35.2 42.05 C36.95 44.3 36.95 44.3 36.95 46.3 C37.61 47.13 38.27 47.95 38.95 48.8 C40.95 51.3 40.95 51.3 40.95 53.3 C41.94 53.3 42.93 53.3 43.95 53.3 C44.44 55.28 44.44 55.28 44.95 57.3 C45.61 57.3 46.27 57.3 46.95 57.3 C48.55 59.08 50.08 60.93 51.57 62.8 C52.39 63.82 53.2 64.84 54.05 65.89 C54.67 66.69 55.3 67.48 55.95 68.3 C55.62 68.96 55.29 69.62 54.95 70.3 C54.41 69.83 53.87 69.35 53.32 68.87 C40.45 58.01 23.48 48.7 7.45 43.43 C1.48 41.1 -1.99 36.8 -5.05 31.3 C-8.9 20.37 -9.03 11.73 -4.05 1.3 C-3.05 0.3 -3.05 0.3 0 0 Z \",fill:\"#4B295A\",transform:\"translate(1154.0546875,625.69921875)\"})),_path241||(_path241=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75 1.06 5.55 1.59 8.44 2.14 C14.89 3.49 20.44 6.07 26.31 8.98 C35.22 13.35 42.83 15.8 52.82 14.7 C55.08 13.77 57.02 12.73 59.06 11.38 C60.82 10.7 60.82 10.7 63.04 11.58 C63.62 11.95 64.21 12.32 64.82 12.7 C61.27 20.11 61.27 20.11 57.98 21.45 C56.58 21.91 55.18 22.36 53.79 22.82 C51.61 23.79 50.39 24.93 48.82 26.7 C48.82 25.05 48.82 23.4 48.82 21.7 C48.23 21.88 47.65 22.06 47.05 22.25 C43.47 22.97 40.2 21.72 36.75 20.76 C31.37 19.23 31.37 19.23 25.82 18.7 C24.83 22.17 24.83 22.17 23.82 25.7 C26.13 25.7 28.44 25.7 30.82 25.7 C31.31 27.19 31.31 27.19 31.82 28.7 C33.92 28.87 36.02 29.03 38.13 29.2 C39.3 29.29 40.47 29.39 41.68 29.48 C43.72 29.62 45.77 29.7 47.82 29.7 C49.16 30.01 50.49 30.33 51.82 30.7 C51.82 31.36 51.82 32.02 51.82 32.7 C52.73 32.6 53.65 32.51 54.59 32.41 C55.78 32.3 56.97 32.19 58.19 32.08 C59.37 31.96 60.56 31.84 61.78 31.72 C62.78 31.72 63.78 31.71 64.82 31.7 C65.48 32.36 66.14 33.02 66.82 33.7 C64.76 33.93 62.71 34.16 60.66 34.38 C58.8 34.52 58.8 34.52 57.82 35.7 C55.29 35.94 52.78 36.12 50.25 36.26 C49.54 36.31 48.83 36.35 48.1 36.39 C46.34 36.5 44.58 36.6 42.82 36.7 C42.49 35.71 42.16 34.72 41.82 33.7 C40.64 33.93 39.46 34.15 38.25 34.39 C28.17 35.52 16.31 32.11 6.82 28.7 C4.82 26.7 4.82 26.7 4.44 24.39 C4.93 20.88 6.56 19.37 8.82 16.7 C9.59 14.52 9.59 14.52 9.82 12.7 C9.16 12.7 8.5 12.7 7.82 12.7 C7.32 11.71 7.32 11.71 6.82 10.7 C-4.65 9.75 -15.21 13.26 -25.18 18.7 C-29.78 20.7 -29.78 20.7 -32.18 20.7 C-43.79 32.49 -52.31 47.82 -53.43 64.39 C-53.39 69.05 -52.15 73.39 -50.94 77.87 C-50.25 80.47 -49.68 83.06 -49.18 85.7 C-49.84 85.7 -50.5 85.7 -51.18 85.7 C-55.18 78.95 -55.18 78.95 -55.18 76.7 C-56.17 76.7 -57.16 76.7 -58.18 76.7 C-59.51 61.58 -59.45 49.98 -51.18 36.7 C-50.67 35.81 -50.15 34.91 -49.62 33.99 C-39.48 16.98 -26.87 8.12 -7.77 3.06 C-7.24 2.94 -6.72 2.82 -6.18 2.7 C-7.4 2.23 -8.62 1.75 -9.87 1.26 C-10.9 0.86 -10.9 0.86 -11.95 0.45 C-17.85 -1.53 -23.59 -1.49 -29.75 -1.49 C-30.73 -1.49 -31.71 -1.49 -32.72 -1.49 C-39.73 -1.44 -46.34 -0.92 -53.18 0.7 C-51.81 -2.05 -50.54 -2.29 -47.68 -3.42 C-31.85 -8.42 -14.99 -6.39 0 0 Z \",fill:\"#301243\",transform:\"translate(225.1845703125,1139.2998046875)\"})),_path242||(_path242=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 1.4 8 4.65 11 9 C12.41 11.62 13.7 14.25 14.92 16.96 C15.83 19.16 15.83 19.16 18 20 C17.5 21.48 17.5 21.48 17 23 C18.28 26.19 20.21 29.07 22 32 C22.33 31.34 22.66 30.68 23 30 C27.95 35.2 27.95 35.2 28.19 39.25 C28.09 40.61 28.09 40.61 28 42 C28.66 42.66 29.32 43.32 30 44 C32.11 43.68 32.11 43.68 34 43 C34.1 42.37 34.2 41.74 34.3 41.09 C35.22 35.82 36.47 31.46 39.1 26.79 C40.06 24.88 40.55 23.08 41 21 C41.66 21 42.32 21 43 21 C42.88 20.28 42.75 19.56 42.62 18.81 C43.06 15.55 43.56 15.2 46 13.19 C46.99 12.47 47.98 11.74 49 11 C50.27 14.48 49.99 16.52 48.49 19.79 C47.77 21.22 47.05 22.64 46.31 24.06 C42.92 30.91 40.29 37.7 38 45 C35.74 51.58 35.74 51.58 32.91 53.18 C32.28 53.45 31.65 53.72 31 54 C30.53 53.09 30.05 52.18 29.57 51.25 C24.69 41.96 19.47 32.95 14 24 C13.47 23.1 12.95 22.2 12.41 21.28 C11.16 19.25 9.86 17.49 8.31 15.69 C7.55 14.8 6.79 13.91 6 13 C4.77 16.69 5.36 19.21 6 23 C6.66 23 7.32 23 8 23 C9.96 27.73 10.32 31.02 9 36 C6.94 37.94 6.94 37.94 5 39 C5 38.34 5 37.68 5 37 C4.01 37 3.02 37 2 37 C1.9 37.61 1.8 38.23 1.7 38.86 C0.49 45.42 0.49 45.42 -1.69 48 C-4.1 49.04 -6.22 49.3 -8.82 49.55 C-11.72 50.15 -14.18 51.34 -16.88 52.56 C-22 54.79 -26.43 56.07 -32 55 C-33.02 54.46 -33.02 54.46 -34.06 53.91 C-36.14 52.66 -36.14 52.66 -39 54 C-39.49 51.98 -39.98 49.96 -40.46 47.95 C-40.95 45.94 -40.95 45.94 -42 44 C-42.37 38.51 -42.42 34.56 -39 30 C-34.66 27.31 -30.19 25.33 -25 26 C-25 25.34 -25 24.68 -25 24 C-24.01 23.67 -23.02 23.34 -22 23 C-22 23.66 -22 24.32 -22 25 C-21.34 24.67 -20.68 24.34 -20 24 C-18 23.96 -16 23.96 -14 24 C-14 23.34 -14 22.68 -14 22 C-7.03 21.87 -3.16 22.78 3 26 C2.69 25.43 2.38 24.86 2.07 24.28 C0.38 20.67 -0.2 16.88 -1 13 C-1.23 12.13 -1.45 11.27 -1.69 10.38 C-2.12 7.11 -1.62 4.22 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#090F36\",transform:\"translate(964,1025)\"})),_path243||(_path243=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.16 1.06 3.16 1.06 6.99 0.88 C13.78 0.88 19.25 7.6 23.93 12 C24.62 12.63 25.31 13.27 26.02 13.92 C26.67 14.53 27.32 15.13 27.98 15.76 C28.57 16.31 29.16 16.86 29.77 17.43 C31.05 18.88 31.05 18.88 31.05 20.88 C31.64 21.12 32.22 21.36 32.82 21.62 C35.42 23.08 36.89 24.72 38.8 27 C39.42 27.72 40.03 28.45 40.66 29.2 C41.35 30.03 41.35 30.03 42.05 30.88 C42.05 30.55 42.05 30.22 42.05 29.88 C42.38 28.88 42.71 27.9 43.05 26.88 C44.43 28.16 45.76 29.5 47.05 30.88 C47.05 31.53 47.05 32.19 47.05 32.88 C47.63 33.12 48.21 33.37 48.8 33.62 C51.38 35.06 53.12 36.66 55.05 38.88 C55.05 39.53 55.05 40.19 55.05 40.88 C55.69 41.14 56.33 41.41 56.99 41.69 C59.05 42.88 59.05 42.88 60.05 45.88 C60.63 46.14 61.21 46.41 61.8 46.69 C64.43 48.07 65.78 49.9 67.6 52.2 C69.14 53.97 70.76 55.42 72.55 56.94 C76.45 60.25 80.03 63.81 83.62 67.44 C91.75 76.26 91.75 76.26 102.05 81.88 C101.72 82.53 101.39 83.19 101.05 83.88 C100.49 83.7 99.92 83.53 99.33 83.36 C96.72 82.57 94.1 81.79 91.49 81 C90.6 80.73 89.7 80.46 88.78 80.18 C87.9 79.92 87.02 79.66 86.11 79.38 C85.25 79.12 84.39 78.86 83.5 78.59 C81.97 78.14 80.43 77.72 78.88 77.33 C77.25 76.92 75.65 76.41 74.05 75.88 C72.8 73.06 72.8 73.06 72.05 69.88 C71.07 68.2 70.07 66.53 69.05 64.88 C69.05 64.22 69.05 63.56 69.05 62.88 C68.39 62.55 67.73 62.22 67.05 61.88 C66.35 60.84 65.65 59.81 64.93 58.75 C61.51 53.83 57.09 49.53 51.8 46.65 C47.74 44.02 44.52 40.67 41.12 37.25 C40.43 36.58 39.74 35.9 39.03 35.21 C34.87 31.06 31.57 26.84 28.42 21.89 C26.6 19.21 24.49 17.13 22.05 15 C21.25 14.28 20.45 13.56 19.62 12.82 C15.96 10.04 12.9 7.88 8.2 7.87 C7.29 8.02 6.37 8.16 5.43 8.31 C1.42 8.94 -0.4 8.8 -3.95 6.88 C-4.61 7.21 -5.27 7.53 -5.95 7.88 C-6.32 7.4 -6.69 6.93 -7.07 6.44 C-11.09 3.09 -16.95 3.59 -21.95 3.88 C-25.04 5.48 -25.04 5.48 -25.49 7.72 C-26.28 15.87 -26.28 15.87 -24.95 23.88 C-22.52 25.87 -22.52 25.87 -19.95 26.88 C-19.95 27.53 -19.95 28.19 -19.95 28.88 C-18.96 29.37 -18.96 29.37 -17.95 29.88 C-19.72 29.93 -21.49 29.97 -23.26 30 C-24.74 30.03 -24.74 30.03 -26.25 30.07 C-28.95 29.88 -28.95 29.88 -31.95 27.88 C-31.95 27.22 -31.95 26.56 -31.95 25.88 C-32.66 26.03 -33.37 26.19 -34.11 26.36 C-41.14 27.64 -47.78 27.88 -53.95 23.88 C-53.95 24.87 -53.95 25.85 -53.95 26.88 C-54.94 26.55 -55.93 26.22 -56.95 25.88 C-56.74 25.1 -56.54 24.33 -56.32 23.53 C-54.49 16.53 -54.49 16.53 -53.57 9.38 C-52.95 5.88 -52.95 5.88 -51.01 3.56 C-47.48 1.62 -44.03 0.53 -40.15 -0.51 C-37.93 -1.05 -37.93 -1.05 -35.95 -2.12 C-32.7 -2.2 -29.46 -2.12 -26.21 -2.06 C-7.29 -2.42 -7.29 -2.42 0 0 Z \",fill:\"#7D668F\",transform:\"translate(701.9453125,206.125)\"})),_path244||(_path244=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06 0.72 1.12 1.45 1.18 2.2 C1.36 4.19 1.54 6.18 1.73 8.17 C1.93 10.25 2.07 12.35 2.19 14.44 C2.8 17.34 2.8 17.34 6.06 18.88 C7.03 19.58 8 20.28 9 21 C9.28 23.1 9.13 24.99 8.96 27.09 C8.83 29.24 8.83 29.24 10.69 31.5 C13.38 33.25 14.85 33.35 18 33 C18 32.34 18 31.68 18 31 C18.96 30.57 18.96 30.57 19.94 30.12 C22.15 29.17 22.15 29.17 23 27 C23.66 27 24.32 27 25 27 C25 24.69 25 22.38 25 20 C25.33 20 25.66 20 26 20 C26.03 21.46 26.05 22.92 26.06 24.38 C26.07 25.19 26.09 26 26.1 26.84 C26 29 26 29 25 31 C24.51 34.73 24.1 38.46 23.7 42.2 C23 46 21.75 48.59 20 52 C19.51 54.79 19.51 54.79 19.44 57.56 C19.3 60.47 19.16 62.63 18 65.31 C16.89 68.31 16.74 70.58 16.73 73.78 C16.72 74.92 16.71 76.06 16.7 77.23 C16.7 78.45 16.69 79.67 16.69 80.93 C16.67 83.52 16.64 86.12 16.62 88.71 C16.58 92.8 16.56 96.88 16.54 100.97 C16.52 104.91 16.48 108.86 16.44 112.8 C16.44 114.02 16.44 115.24 16.44 116.49 C16.37 122.76 16.04 127.47 13 133 C8.89 132.76 6.67 132.63 3.62 129.75 C1.14 125.54 0.87 121.61 0.87 116.79 C0.87 115.77 0.86 114.76 0.86 113.71 C0.86 112.62 0.87 111.53 0.87 110.41 C0.87 109.27 0.87 108.14 0.86 106.97 C0.86 104.56 0.87 102.15 0.87 99.75 C0.87 96.11 0.87 92.47 0.86 88.83 C0.85 55.81 0.85 55.81 6.14 45.91 C8.27 38.72 3.2 30.22 0.39 23.62 C-2.31 16.99 -2.54 11.6 -1 4.56 C-0.81 3.7 -0.63 2.83 -0.44 1.94 C-0.29 1.3 -0.15 0.66 0 0 Z \",fill:\"#401F54\",transform:\"translate(465,288)\"})),_path245||(_path245=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56 2.4 3.4 3.59 3.69 7.12 C3.75 7.92 3.82 8.71 3.89 9.52 C4.03 12.64 3.98 15.74 3.84 18.86 C3.89 21.07 3.89 21.07 4.96 23.22 C6.39 27.04 6.47 30.64 6.62 34.69 C6.66 35.52 6.7 36.36 6.74 37.22 C6.98 42.86 7.04 48.48 7 54.12 C6.97 60.15 7.01 66.17 7.25 72.19 C7.26 72.87 7.28 73.55 7.29 74.26 C7.55 79.54 9.19 82.67 12 87 C17.27 86.55 20.54 86.01 25 83 C25.66 83 26.32 83 27 83 C26.98 81.91 26.96 80.81 26.94 79.69 C27 76 27 76 28 73 C28.66 73 29.32 73 30 73 C29.66 72.13 29.66 72.13 29.31 71.25 C29 69 29 69 30.44 66.75 C30.95 66.17 31.47 65.6 32 65 C33.88 65.28 33.88 65.28 36 66 C37.45 68.64 38.63 71.1 39.75 73.88 C40.07 74.61 40.38 75.34 40.71 76.1 C43 81.55 43 81.55 43 85 C41.06 83.88 41.06 83.88 39 82 C38.25 78.81 38.25 78.81 38 76 C37.34 76 36.68 76 36 76 C36.5 80.95 36.5 80.95 37 86 C37.99 86.33 38.98 86.66 40 87 C39.76 87.64 39.52 88.29 39.27 88.95 C36.57 96.22 34.22 103.57 32 111 C31.01 110.5 31.01 110.5 30 110 C29.01 110.99 29.01 110.99 28 112 C28 112.33 28 112.66 28 113 C25.75 113.17 23.5 113.33 21.25 113.5 C20 113.59 18.74 113.69 17.45 113.78 C14.97 113.94 12.49 114 10 114 C9.34 113.34 8.68 112.68 8 112 C5.18 117.55 3.47 121.74 4 128 C3.01 128.33 2.02 128.66 1 129 C0.5 126.03 0.5 126.03 0 123 C0.66 123 1.32 123 2 123 C1.81 122.2 1.63 121.39 1.44 120.56 C1.29 119.72 1.15 118.87 1 118 C1.5 117.5 1.5 117.5 2 117 C1.34 116.67 0.68 116.34 0 116 C-0.5 116.99 -0.5 116.99 -1 118 C-3.7 109.9 -1.79 101.76 1.12 94 C2.45 89.47 2.22 85.43 1.51 80.8 C0.96 76.73 0.78 72.71 0.68 68.61 C0.66 67.81 0.64 67.01 0.62 66.18 C0.55 63.56 0.5 60.93 0.44 58.31 C0.42 57.42 0.4 56.52 0.37 55.6 C-0.06 37.07 -0.11 18.54 0 0 Z \",fill:\"#290E3D\",transform:\"translate(483,404)\"})),_path246||(_path246=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.05 1.33 3.93 1.9 5.81 4.81 C9.9 15.81 4.56 30.9 0.03 41.21 C-1.89 45.27 -3.97 49.23 -6.08 53.2 C-7.54 56.07 -8.77 59.02 -10 62 C-10.66 62 -11.32 62 -12 62 C-12.92 67.27 -13.27 70.1 -11 75 C-9.56 76.69 -9.56 76.69 -8 78 C-6 80 -6 80 -5.77 82.09 C-5.78 82.89 -5.8 83.68 -5.81 84.5 C-5.82 85.29 -5.83 86.09 -5.83 86.91 C-6 89 -6 89 -7 91 C-9.48 96.44 -9.48 96.44 -12 102 C-27.84 102 -43.68 102 -60 102 C-53.34 94.23 -53.34 94.23 -50.38 91.81 C-45.08 87.32 -40.27 82.35 -35.39 77.41 C-34.06 76.06 -32.71 74.71 -31.37 73.37 C-23.05 65.04 -16.88 56.14 -11 46 C-10.64 45.39 -10.29 44.79 -9.92 44.17 C-1.85 30.17 -0.61 15.82 0 0 Z \",fill:\"#060929\",transform:\"translate(665,1178)\"})),_path247||(_path247=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06 1.22 1.12 2.43 1.19 3.69 C1.73 8.21 3.58 9.99 7 13 C8.35 15.25 9 16.39 9 19 C9.99 19.33 10.98 19.66 12 20 C11.67 20.66 11.34 21.32 11 22 C11.66 22.66 12.32 23.32 13 24 C8.86 37.21 8.86 37.21 5.1 40.83 C-1.28 47.42 -3.45 55.37 -3.73 64.29 C-4.13 69.74 -5.35 74.96 -6.54 80.29 C-9.77 92.21 -9.77 92.21 -8.02 103.86 C-6.69 106.64 -6.66 108.93 -6.54 112 C-6.46 113.78 -6.46 113.78 -6.37 115.6 C-6.28 117.5 -6.28 117.5 -6.19 119.44 C-5.61 129.85 -4.4 139.6 -1.59 149.65 C-1.26 150.83 -1.26 150.83 -0.93 152.04 C-0.62 153.05 -0.62 153.05 -0.31 154.08 C0.05 156.32 -0.32 157.85 -1 160 C-5.33 148.73 -7.13 137.52 -8.57 125.56 C-9.51 117.84 -10.96 110.5 -13 103 C-13.78 99.84 -13.78 99.84 -14.56 96.69 C-15.04 94.79 -15.52 92.9 -16 91 C-16.19 90.25 -16.37 89.5 -16.56 88.73 C-16.98 87.13 -17.48 85.56 -18 84 C-18.66 83.67 -19.32 83.34 -20 83 C-25.34 69.09 -25.49 54.93 -19.64 41.39 C-18.22 38.46 -16.86 35.67 -15 33 C-14.34 33 -13.68 33 -13 33 C-11.65 30.82 -10.32 28.64 -9 26.44 C-8.62 25.83 -8.24 25.22 -7.84 24.59 C-5.25 20.22 -4.63 17.2 -5 12 C-4.33 7.22 -2.66 3.99 0 0 Z \",fill:\"#39154A\",transform:\"translate(580,779)\"})),_path248||(_path248=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.02 0.51 1.02 0.51 2.05 1.02 C22.28 10.71 45.44 7.09 67.07 4.37 C71 4 71 4 74 5 C74 5.66 74 6.32 74 7 C73.34 7 72.68 7 72 7 C72.23 7.52 72.45 8.03 72.69 8.56 C73.18 12.37 71.83 14.7 70 18 C67.38 19.31 67.38 19.31 65 20 C64.67 20.66 64.34 21.32 64 22 C61.37 23.17 58.73 24.09 56 25 C52.75 26.08 52.75 26.08 50 28 C48.31 28.07 46.62 28.08 44.94 28.06 C44.02 28.05 43.1 28.04 42.15 28.04 C41.44 28.02 40.73 28.01 40 28 C40 28.33 40 28.66 40 29 C38.23 29.25 36.46 29.47 34.69 29.69 C33.7 29.82 32.72 29.94 31.7 30.07 C29 30 29 30 27.21 28.81 C25.77 26.65 25.37 24.93 24.94 22.38 C24.58 20.02 24.58 20.02 24 18 C23.34 17.67 22.68 17.34 22 17 C21.59 14.68 21.26 12.34 21 10 C20.05 10.03 19.09 10.07 18.11 10.11 C16.86 10.13 15.6 10.16 14.31 10.19 C12.45 10.24 12.45 10.24 10.55 10.29 C6.77 9.98 5.1 9.07 2 7 C1.01 7 0.02 7 -1 7 C-3.97 10.71 -4.92 14.97 -6.18 19.46 C-6.94 21.81 -7.84 23.82 -9 26 C-10.96 29.68 -12.11 33.39 -13.19 37.41 C-14 40 -14 40 -15.45 43.19 C-17.06 46.91 -17.87 50.58 -18.61 54.58 C-18.8 55.62 -18.8 55.62 -19 56.68 C-19.26 58.13 -19.53 59.58 -19.79 61.04 C-20.19 63.26 -20.6 65.48 -21.01 67.7 C-22.44 74.81 -22.44 74.81 -23 82 C-25 83.69 -25 83.69 -27 85 C-30 83 -30 83 -31 80 C-31.32 73.56 -30.4 67.63 -29.19 61.31 C-28.92 59.87 -28.92 59.87 -28.64 58.39 C-27.28 51.21 -25.77 44.09 -24 37 C-23.34 37 -22.68 37 -22 37 C-21.86 36.41 -21.73 35.81 -21.59 35.2 C-19.68 27.85 -16.29 22.22 -12 16 C-11.25 14.88 -10.5 13.75 -9.75 12.62 C-9.17 11.76 -8.6 10.89 -8 10 C-7.48 9.11 -6.97 8.23 -6.44 7.31 C-5.11 5.18 -3.93 3.59 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#080D30\",transform:\"translate(601,801)\"})),_path249||(_path249=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.97 0.63 7.71 3.27 11.44 6.44 C12.16 6.94 12.87 7.44 13.61 7.95 C15.44 9.44 15.44 9.44 16.44 12.44 C17.08 13.08 17.72 13.72 18.38 14.38 C20.37 16.37 21.23 17.94 22.44 20.44 C22.93 20.87 23.43 21.3 23.94 21.75 C26.2 24.3 26.64 27.18 27.44 30.44 C26.57 30.51 26.57 30.51 25.68 30.59 C20.98 31.04 16.9 31.81 12.44 33.44 C11.78 33.44 11.12 33.44 10.44 33.44 C8.81 34.9 8.81 34.9 7.44 36.44 C5.95 35.94 5.95 35.94 4.44 35.44 C1.47 42.18 1.24 46.48 3.44 53.44 C4.03 55.35 4.62 57.27 5.19 59.19 C5.47 60.07 5.75 60.95 6.05 61.86 C6.52 64.99 5.83 66.64 4.44 69.44 C0.97 69.93 0.97 69.93 -2.56 70.44 C-2.59 71.85 -2.61 73.27 -2.62 74.69 C-2.64 75.48 -2.65 76.27 -2.66 77.08 C-2.57 79.34 -2.19 81.27 -1.56 83.44 C-5.1 80.37 -6.56 78.02 -7.56 73.44 C-7.71 69.76 -7.68 66.11 -7.56 62.44 C-8.22 62.44 -8.88 62.44 -9.56 62.44 C-12.6 54.86 -13.03 48.12 -13.12 40 C-13.23 32.65 -13.53 25.77 -15.15 18.59 C-15.71 15.65 -15.61 12.97 -15.31 10 C-15.22 9.01 -15.14 8.02 -15.05 7 C-14.56 4.44 -14.56 4.44 -12.56 1.44 C-8.52 0.36 -4.15 0.51 0 0 Z \",fill:\"#3D1D4A\",transform:\"translate(958.5625,428.5625)\"})),_path250||(_path250=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.99 2.66 1.98 3 3 C1.6 5.09 1.6 5.09 -0.38 7.38 C-4.98 12.72 -5.26 17.04 -5 24 C-4.67 24.99 -4.34 25.98 -4 27 C-2.58 26.88 -2.58 26.88 -1.12 26.75 C3.96 26.74 8.54 28.67 13 31 C13.51 31.52 14.02 32.04 14.55 32.57 C15.89 34.15 15.89 34.15 17.82 34.36 C21.22 35.36 23.42 37.8 25.94 40.19 C26.45 40.66 26.96 41.13 27.49 41.61 C30.09 44.03 32.45 46.5 34.67 49.28 C37.3 52.35 39.12 53.1 43 54 C43.99 53.01 43.99 53.01 45 52 C45.98 53.27 46.96 54.54 47.94 55.81 C48.48 56.52 49.03 57.23 49.59 57.96 C51 60 51 60 52 63 C54 63.92 54 63.92 56.38 64.5 C59.86 65.45 61.5 66.43 64 69 C67.95 69.93 71.23 70.04 75.19 69.38 C79 69 79 69 81.5 70.44 C81.99 70.95 82.49 71.47 83 72 C81.35 72 79.7 72 78 72 C77.96 73.93 77.96 73.93 79 76 C82.49 77.79 82.49 77.79 86 79 C86 77.35 86 75.7 86 74 C89.38 75.19 91.65 76.28 94 79 C92.68 79 91.36 79 90 79 C90.56 81.05 90.56 81.05 92 83 C92.92 83.12 93.84 83.24 94.79 83.37 C98.67 84.13 99.98 85.41 102.75 88.19 C107.45 92.65 112.32 95.92 118 99 C115 100 115 100 112.77 99.21 C108.47 97.03 104.82 95.02 101.38 91.62 C99.38 89.76 98.54 89.04 95.79 88.84 C93.32 89.11 93.32 89.11 90 90 C90 89.01 90 88.02 90 87 C89.36 87.02 88.72 87.05 88.06 87.07 C82.59 87.18 78.17 86.8 73 85 C72.51 86.49 72.51 86.49 72 88 C58.31 80.25 58.31 80.25 54.12 77.56 C50.89 75.49 47.56 73.65 44.2 71.8 C25.96 61.75 25.96 61.75 23.94 55.94 C23.98 53.96 24.09 51.98 24.25 50 C23.91 45.9 21.99 43.63 19 41 C16.05 39.27 16.05 39.27 13 38 C12.15 37.46 11.31 36.93 10.44 36.38 C7.86 34.92 5.88 34.57 3 34 C-2.71 32.1 -7.44 30.01 -12 26 C-12.99 25.67 -13.98 25.34 -15 25 C-15 24.34 -15 23.68 -15 23 C-16.11 22.63 -17.23 22.26 -18.38 21.88 C-21.36 20.58 -21.91 20.16 -23.62 17.19 C-24.1 13.16 -23.15 11.38 -21 8 C-20.34 7.34 -19.68 6.68 -19 6 C-18.1 6.01 -17.2 6.02 -16.27 6.03 C-12.5 6 -10.12 5.07 -6.69 3.56 C-5.64 3.11 -4.59 2.66 -3.51 2.19 C-1.11 1.23 -1.11 1.23 0 0 Z \",fill:\"#3F1D4E\",transform:\"translate(981,638)\"})),_path251||(_path251=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.49 0.39 3.72 0.71 5.48 2.56 C5.9 3.18 6.32 3.8 6.75 4.44 C7.18 5.05 7.61 5.67 8.05 6.31 C9 8 9 8 9 10 C9.66 10 10.32 10 11 10 C12.29 11.53 12.29 11.53 13.62 13.5 C14.29 14.47 14.29 14.47 14.98 15.47 C15.48 16.23 15.48 16.23 16 17 C16.99 16.34 17.98 15.68 19 15 C18.5 9.55 18.5 9.55 18 4 C18.99 4 19.98 4 21 4 C23.24 9.18 25.44 14.38 27.59 19.6 C28.6 22.04 29.62 24.47 30.66 26.9 C31.21 28.22 31.76 29.55 32.31 30.88 C32.82 32.09 33.34 33.3 33.86 34.55 C34.98 37.95 35.23 40.46 35 44 C33.51 44.5 33.51 44.5 32 45 C18 30.15 18 30.15 18 24 C17.34 24 16.68 24 16 24 C15.5 22.02 15.5 22.02 15 20 C14.25 20.05 13.5 20.09 12.73 20.14 C5.98 20.38 1.31 19.6 -4.82 16.84 C-7.91 15.65 -9.9 15.92 -13 17 C-14.67 17.99 -16.34 18.99 -18 20 C-19.32 20 -20.64 20 -22 20 C-22.99 20.5 -22.99 20.5 -24 21 C-24 21.66 -24 22.32 -24 23 C-24.63 22.94 -25.26 22.88 -25.91 22.82 C-32.8 22.46 -36.57 23.86 -42 28 C-45.22 30.15 -46.26 30.56 -50 30 C-51.5 28.31 -51.5 28.31 -53 26 C-53.89 25.13 -54.77 24.27 -55.69 23.38 C-58 21 -58 21 -58 19 C-60.65 17.92 -63.28 16.91 -66 16 C-65.67 16.46 -65.35 16.93 -65.01 17.4 C-64.04 18.78 -63.06 20.16 -62.09 21.54 C-60.98 23.1 -59.88 24.67 -58.77 26.24 C-55.89 30.31 -53.03 34.4 -50.19 38.5 C-47.52 42.31 -44.71 45.98 -41.83 49.64 C-31.92 62.42 -31.92 62.42 -29 68 C-29.33 68.66 -29.66 69.32 -30 70 C-34.04 67.08 -36.28 64.13 -39 60 C-40.69 57.82 -42.4 55.65 -44.12 53.5 C-51.88 43.73 -58.98 33.52 -66.06 23.25 C-66.54 22.56 -67.02 21.87 -67.51 21.15 C-70.88 16.25 -70.88 16.25 -72 14 C-72.66 13.34 -73.32 12.68 -74 12 C-74 10.68 -74 9.36 -74 8 C-74.66 8 -75.32 8 -76 8 C-75 5 -75 5 -72 3 C-71.55 3.89 -71.09 4.77 -70.62 5.69 C-67.61 10.18 -63.08 12.44 -58 14 C-54.4 13.48 -52.09 12.6 -48.94 10.88 C-46.26 9.66 -43.9 9.87 -41 10 C-41 9.34 -41 8.68 -41 8 C-38.52 8.5 -38.52 8.5 -36 9 C-36 8.34 -36 7.68 -36 7 C-28.57 6.04 -21.34 5.98 -13.88 6.38 C-12.61 6.44 -12.61 6.44 -11.32 6.51 C-5.27 6.87 -5.27 6.87 -3 8 C-2.67 6.02 -2.34 4.04 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3D1D49\",transform:\"translate(295,925)\"})),_path252||(_path252=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31 3.94 0.35 5.81 -0.88 9.75 C-2.36 14.54 -3.4 19.04 -4 24 C-3.34 24.33 -2.68 24.66 -2 25 C-2.13 25.71 -2.27 26.41 -2.4 27.14 C-4.17 37.4 -4.61 47.62 -5 58 C-5.33 58 -5.66 58 -6 58 C-6.11 64.41 -6.17 70.68 -5 77 C-4.34 77.33 -3.68 77.66 -3 78 C-2.58 79.86 -2.58 79.86 -2.25 82.31 C0.1 94.94 8.11 104.81 16.07 114.52 C18 117 19.68 119.51 21.31 122.19 C21.84 123.05 22.38 123.91 22.93 124.79 C23.46 125.89 23.46 125.89 24 127 C23.67 127.66 23.34 128.32 23 129 C21 127.62 21 127.62 19 126 C19 125.34 19 124.68 19 124 C18.34 124 17.68 124 17 124 C15.08 121.33 13.35 118.57 11.62 115.77 C8.32 110.6 8.32 110.6 3.88 106.44 C0.3 103.41 -1.21 100.25 -3 96 C-5.46 96 -6.85 96.85 -9 98 C-10.11 95.33 -11.21 92.67 -12.31 90 C-12.62 89.26 -12.93 88.51 -13.25 87.75 C-14.18 85.5 -15.09 83.25 -16 81 C-16.29 80.29 -16.59 79.58 -16.89 78.85 C-18.46 74.94 -19.36 71.71 -19.19 67.5 C-19.16 66.64 -19.13 65.79 -19.11 64.91 C-19.07 64.28 -19.04 63.65 -19 63 C-21.31 63 -23.62 63 -26 63 C-27.72 56.31 -28.28 50.26 -28.19 43.38 C-28.19 42.47 -28.19 41.57 -28.19 40.64 C-28.15 35.66 -27.84 30.91 -27 26 C-26.01 25.67 -25.02 25.34 -24 25 C-23.27 22.98 -23.27 22.98 -23 21 C-22.24 21.02 -21.47 21.04 -20.69 21.06 C-17.9 21.13 -17.9 21.13 -15 20 C-14.3 18.01 -13.65 16.01 -13 14 C-8.94 5.63 -8.94 5.63 -5 3 C-4.67 3.33 -4.34 3.66 -4 4 C-2.68 2.68 -1.36 1.36 0 0 Z M-5 24 C-4 27 -4 27 -4 27 Z M-6 29 C-5 31 -5 31 -5 31 Z M-7 34 C-7 37.3 -7 40.6 -7 44 C-6.67 44 -6.34 44 -6 44 C-6 40.7 -6 37.4 -6 34 C-6.33 34 -6.66 34 -7 34 Z M-8 44 C-8 47.96 -8 51.92 -8 56 C-7.67 56 -7.34 56 -7 56 C-7 52.04 -7 48.08 -7 44 C-7.33 44 -7.66 44 -8 44 Z M-4 86 C-3 90 -3 90 -3 90 Z M-3 90 C-2 92 -2 92 -2 92 Z M-2 92 C-1 94 -1 94 -1 94 Z M-1 94 C0 96 0 96 0 96 Z M0 96 C1 98 1 98 1 98 Z \",fill:\"#301243\",transform:\"translate(287,811)\"})),_path253||(_path253=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C2.29 2.86 4.58 2.71 6.88 2.56 C8.15 2.48 9.43 2.4 10.74 2.32 C13.88 2.21 13.88 2.21 16 1 C18.35 0.88 20.71 0.82 23.06 0.81 C24.33 0.8 25.6 0.78 26.91 0.77 C29.87 0.84 32.54 1.29 35.42 1.99 C40.04 3.1 44.45 3.28 49.19 3.38 C57.67 3.66 65 5.19 73 8 C73 8.66 73 9.32 73 10 C74.18 10.4 74.18 10.4 75.38 10.81 C78 12 78 12 80 15 C79.01 15 78.02 15 77 15 C77.21 15.53 77.42 16.07 77.64 16.62 C78.15 19.97 77.08 21.98 75.75 25.06 C75.09 26.63 75.09 26.63 74.42 28.22 C73.14 30.73 72.28 32.37 70 34 C68.11 33.83 66.21 33.65 64.34 33.33 C60.26 32.75 56.11 32.73 52 33 C51.67 33.33 51.34 33.66 51 34 C51.01 35.73 51.11 37.46 51.25 39.19 C51.35 40.6 51.35 40.6 51.45 42.04 C52.65 48.54 55.75 52.04 60.69 56.25 C62.49 57.79 64.27 59.37 66 61 C66 61.66 66 62.32 66 63 C65.01 63 64.02 63 63 63 C65.52 65.61 68.05 67.89 71 70 C70.67 70.66 70.34 71.32 70 72 C69.34 71.67 68.68 71.34 68 71 C65.7 70.73 63.4 70.56 61.09 70.38 C59 70 59 70 57 68 C56.92 66.74 56.84 65.48 56.75 64.19 C56.27 58.58 53.95 54.1 51.47 49.11 C50 46 50 46 49.02 42.89 C47.95 39.87 46.7 37.97 44.69 35.5 C44.07 34.74 43.46 33.98 42.82 33.19 C42.22 32.47 41.62 31.75 41 31 C40.22 30.05 40.22 30.05 39.43 29.09 C38.3 27.72 37.15 26.36 36 25 C35.34 25.66 34.68 26.32 34 27 C31.44 23.16 30.96 19.5 30.07 15.01 C28.68 11.12 27.37 9.42 24 7 C20.93 6.46 17.98 6.62 14.88 6.81 C13.27 6.89 11.66 6.96 10.05 7.02 C9.35 7.06 8.64 7.1 7.91 7.15 C6 7 6 7 3 5 C-0.33 5.14 -3.57 5.58 -6.87 6 C-10 6 -10 6 -12.41 4.65 C-14 3 -14 3 -14 1 C-12.23 0.64 -10.46 0.28 -8.69 -0.06 C-7.7 -0.26 -6.72 -0.46 -5.7 -0.66 C-3 -1 -3 -1 0 0 Z \",fill:\"#755B7D\",transform:\"translate(1119,1038)\"})),_path254||(_path254=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.3 2.12 2.6 2.25 3.94 2.38 C8.65 2.91 13.5 3.46 18 5 C18.5 5.99 18.5 5.99 19 7 C21.11 7.91 21.11 7.91 23.56 8.62 C24.39 8.89 25.22 9.15 26.07 9.41 C26.7 9.61 27.34 9.8 28 10 C28 11.32 28 12.64 28 14 C28.99 14.33 29.98 14.66 31 15 C32.69 16.56 32.69 16.56 34 18 C33.01 17.98 32.02 17.97 30.99 17.95 C27.25 17.9 23.51 17.86 19.76 17.84 C18.15 17.82 16.54 17.8 14.93 17.77 C4.8 17.61 -4.2 18.11 -14 21 C-14 21.66 -14 22.32 -14 23 C-14.99 23 -15.98 23 -17 23 C-17 23.66 -17 24.32 -17 25 C-18.65 25 -20.3 25 -22 25 C-21.01 26.98 -20.02 28.96 -19 31 C-20.56 31.34 -22.12 31.67 -23.69 32 C-24.56 32.19 -25.43 32.37 -26.32 32.56 C-28.94 32.99 -31.36 33.08 -34 33 C-33.38 31.06 -33.38 31.06 -32 29 C-28.88 28.25 -28.88 28.25 -26 28 C-26.66 25.69 -27.32 23.38 -28 21 C-29.65 21 -31.3 21 -33 21 C-33.66 22.65 -34.32 24.3 -35 26 C-35.99 26 -36.98 26 -38 26 C-38 26.66 -38 27.32 -38 28 C-42.81 29.76 -46.83 31.15 -52 31 C-52.62 31.33 -53.24 31.66 -53.88 32 C-56 33 -56 33 -59.44 32.81 C-63.14 32.6 -63.14 32.6 -65.31 35.38 C-69.08 39.06 -72.9 39.34 -78 40 C-78 39.01 -78 38.02 -78 37 C-77.24 36.86 -76.47 36.71 -75.69 36.56 C-71.99 34.41 -71.6 32.05 -70.38 28.09 C-69.77 25.95 -69.77 25.95 -71 24 C-69.44 22 -69.44 22 -67 20 C-63.25 19.75 -63.25 19.75 -60 20 C-59.67 19.34 -59.34 18.68 -59 18 C-57.78 17.9 -56.57 17.79 -55.31 17.69 C-51.67 17.35 -51.04 17.03 -48.06 14.5 C-44.44 11.54 -42.53 11.5 -38.03 11.24 C-35.33 10.92 -34.06 9.72 -32 8 C-29.69 7.26 -27.35 6.6 -25 6 C-21.42 5.06 -18.29 4.15 -15 2.44 C-10.17 0.12 -5.3 -0.16 0 0 Z \",fill:\"#1C1420\",transform:\"translate(670,232)\"})),_path255||(_path255=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.33 -1.32 0.66 -2 1 C-2.81 3.26 -3.41 5.55 -4.02 7.87 C-5 10 -5 10 -6.91 11.29 C-9 12 -9 12 -12 11.88 C-15.67 11.73 -18.56 12.77 -22 14 C-30.44 16.93 -30.44 16.93 -35 16 C-37.09 14.15 -38.4 12.33 -40 10 C-44.43 11.18 -46.51 12.14 -49 16 C-49.66 16.33 -50.32 16.66 -51 17 C-51.71 24.67 -49.45 30.69 -44.62 36.73 C-42.58 38.33 -40.98 38.63 -38.44 39.06 C-34.21 39.79 -34.21 39.79 -32 42 C-32.1 46.76 -33.33 49.79 -35.62 53.94 C-37.68 57.87 -38.33 60.21 -37.42 64.68 C-35.79 73.71 -36.44 81.53 -40.81 89.6 C-42.78 93.57 -43.41 96.76 -42 101 C-43.32 101 -44.64 101 -46 101 C-46.12 100.05 -46.24 99.09 -46.37 98.11 C-46.53 96.86 -46.7 95.6 -46.88 94.31 C-47.04 93.07 -47.2 91.83 -47.37 90.55 C-47.93 87.39 -48.8 84.95 -50 82 C-50.36 79.9 -50.67 77.8 -50.94 75.69 C-51.48 71.87 -52.03 68.47 -53.56 64.94 C-56.97 56.61 -56.12 47.29 -55.23 38.52 C-54.87 34.38 -55.31 31.76 -57 28 C-56.81 22.12 -55.55 16.81 -52 12 C-50.68 11.31 -49.35 10.64 -48 10 C-47.28 9.05 -46.56 8.1 -45.81 7.12 C-41.01 1.14 -33.33 -0.53 -26.04 -1.69 C-17.08 -2.6 -8.7 -2.25 0 0 Z \",fill:\"#401D4F\",transform:\"translate(304,1179)\"})),_path256||(_path256=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C6.69 6.48 10.44 13.37 13.21 20.87 C15.12 26.04 17.98 30.76 20.67 35.55 C22.51 38.93 24.2 42.38 25.89 45.84 C27.05 48.2 27.05 48.2 29 51 C29.33 50.34 29.66 49.68 30 49 C30.99 49 31.98 49 33 49 C33.66 52.3 34.32 55.6 35 59 C36.32 58.34 37.64 57.68 39 57 C40.21 53.38 40.09 49.79 40 46 C40.66 46 41.32 46 42 46 C42 42.04 42 38.08 42 34 C43.32 34 44.64 34 46 34 C48.7 40.51 50.52 46.99 51.94 53.88 C53.32 60.5 55.17 66.55 57.82 72.79 C59.12 76.34 59.74 79.79 60.44 83.5 C62.5 91.81 67.27 95.62 73.64 100.99 C77.32 104.14 79.58 107.58 81.84 111.84 C84.13 116.09 86.97 119.31 91 122 C91 123.32 91 124.64 91 126 C86.41 124.39 84.11 122.87 81.62 118.69 C79.42 115.03 76.89 110.95 73 109 C70.09 108.42 70.09 108.42 67 109 C64.58 111.89 64.58 111.89 63 115 C56.65 112.22 52.47 106.73 49.81 100.44 C48.27 96.22 47.21 91.92 46.12 87.56 C43.56 77.71 40.55 70.27 31.9 64.61 C28.34 61.6 26.61 57.3 25 53 C25 52.34 25 51.68 25 51 C23.52 50.5 23.52 50.5 22 50 C20.65 47.64 19.46 45.33 18.31 42.88 C17.61 41.41 16.9 39.95 16.2 38.49 C15.65 37.37 15.65 37.37 15.1 36.23 C13.72 33.43 12.23 30.7 10.73 27.97 C7.52 22.12 4.77 16.45 3 10 C2.44 8.15 1.88 6.29 1.31 4.44 C0.87 2.96 0.44 1.48 0 0 Z \",fill:\"#2E153C\",transform:\"translate(1189,850)\"})),_path257||(_path257=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.84 6.68 -4.55 11.77 -8.56 17.38 C-13.01 23.8 -17 30.32 -20.62 37.25 C-21.24 38.43 -21.24 38.43 -21.88 39.63 C-23.96 43.68 -25.7 47.62 -27 52 C-27.66 52 -28.32 52 -29 52 C-29.05 52.54 -29.1 53.07 -29.16 53.62 C-29.99 59.39 -31.93 64.07 -34.67 69.17 C-38.95 77.45 -42.06 85.95 -44.99 94.78 C-45.82 97.27 -46.66 99.74 -47.51 102.22 C-50.39 110.73 -53.04 119.22 -55 128 C-55.66 128 -56.32 128 -57 128 C-56.89 128.99 -56.79 129.99 -56.68 131.01 C-55.9 139.36 -56.24 146.15 -58.29 154.36 C-60.11 163.73 -59.26 173.59 -58.22 183.02 C-57.73 189.66 -57.93 196.35 -58 203 C-58.62 203.1 -59.24 203.21 -59.88 203.31 C-62.37 203.88 -62.37 203.88 -64 207 C-65.58 196.84 -66.36 186.99 -66.31 176.69 C-66.31 175.67 -66.31 175.67 -66.3 174.63 C-66.24 163.75 -65.47 153.59 -63 143 C-62.59 141.18 -62.59 141.18 -62.17 139.32 C-60.03 129.85 -57.79 120.4 -55.48 110.97 C-55.04 109.16 -54.6 107.35 -54.16 105.53 C-51.38 94.16 -48.22 83.08 -44.1 72.11 C-43.35 70.09 -42.67 68.05 -42 66 C-42.33 65.34 -42.66 64.68 -43 64 C-44.25 65.08 -45.5 66.17 -46.75 67.25 C-47.45 67.85 -48.14 68.46 -48.86 69.08 C-53.36 73.12 -56.59 77.13 -59.75 82.25 C-60.19 82.95 -60.62 83.66 -61.07 84.39 C-66.43 93.16 -70.86 102.35 -75.17 111.68 C-75.53 112.45 -75.89 113.23 -76.26 114.02 C-76.94 115.51 -77.63 117.01 -78.3 118.51 C-79.86 121.9 -81.28 124.46 -84 127 C-85.08 128.08 -85.08 128.08 -86.19 129.19 C-86.79 129.79 -87.38 130.38 -88 131 C-87.61 127.72 -86.99 125.98 -85.06 123.25 C-82.53 119.27 -81.78 115.6 -81 111 C-80.34 111 -79.68 111 -79 111 C-78.86 109.51 -78.86 109.51 -78.73 107.99 C-78.09 103.6 -76.4 100.03 -74.38 96.12 C-74.02 95.42 -73.66 94.72 -73.29 94 C-69.25 86.27 -64.23 80.08 -58 74 C-56.7 72.53 -55.41 71.05 -54.12 69.56 C-45.42 59.74 -45.42 59.74 -39.75 58 C-36.79 57.23 -36.79 57.23 -35.31 54.44 C-34.64 52.69 -33.98 50.93 -33.44 49.13 C-30.2 38.41 -24.39 28.47 -17.79 19.48 C-15.72 16.61 -13.84 13.66 -11.94 10.69 C-4.85 0 -4.85 0 0 0 Z \",fill:\"#301838\",transform:\"translate(370,686)\"})),_path258||(_path258=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 0.31 2.38 0.31 4.44 2.19 C7.7 4.55 9.45 4.78 13.38 5.31 C21.21 6.46 21.21 6.46 24.38 10.31 C25.51 12.48 26.48 14.66 27.39 16.93 C28.62 19.92 30.12 22.74 31.64 25.59 C32.38 27.31 32.38 27.31 32.38 30.31 C8.94 30.31 -14.49 30.31 -38.62 30.31 C-36.45 24.86 -36.45 24.86 -33.19 22.19 C-29.97 19.18 -29 16.85 -28.06 12.56 C-26.9 7.53 -26.9 7.53 -24.12 5.31 C-22.97 4.98 -21.81 4.65 -20.62 4.31 C-19.77 4.05 -18.92 3.79 -18.04 3.52 C-12.05 1.77 -6.19 0.74 0 0 Z \",fill:\"#421F4F\",transform:\"translate(413.625,1249.6875)\"})),_path259||(_path259=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86 0.07 4.38 0.54 6.66 2.25 C8.5 4.65 8.19 5.98 7.81 8.94 C7.72 9.79 7.62 10.65 7.52 11.53 C7 14 7 14 5.8 16 C4.71 18.07 4.71 18.07 5.9 20.45 C6.63 21.77 6.63 21.77 7.38 23.12 C10.11 28.63 10.59 32.94 10 39 C11.13 39.56 12.27 40.11 13.44 40.69 C25.94 46.94 25.94 46.94 28 49 C28.02 50.93 28.02 50.93 27.81 53.31 C27.76 54.09 27.7 54.87 27.64 55.68 C26.78 58.8 25.52 59.98 23 62 C20.09 63.38 20.09 63.38 16.94 64.56 C11.85 66.39 11.85 66.39 8 70 C6.57 76.02 6.76 80.62 10 86 C13.43 89.95 17.7 92.46 22.19 95.06 C26.73 97.71 30.07 100.13 31.75 105.31 C31.83 105.87 31.91 106.43 32 107 C29 107 29 107 27.62 105.69 C27.09 105.13 26.55 104.57 26 104 C25.28 103.59 24.55 103.17 23.81 102.75 C16.37 98.12 7.43 90.92 4.52 82.43 C2.29 72.02 2.29 72.02 3 67 C6.71 63.15 10.82 61.82 15.79 60.22 C18.21 59.15 18.21 59.15 19.3 56.53 C20.16 53.44 20.22 51.98 19 49 C16.25 46.75 13.76 45.32 10.48 43.96 C3.53 40.98 3.53 40.98 1.8 37.79 C1.06 35.38 1.06 35.38 0.6 33.09 C-0.1 30.65 -1.1 29.63 -3 28 C-4.65 28.66 -6.3 29.32 -8 30 C-8 29.34 -8 28.68 -8 28 C-12.84 30.61 -16.87 33.37 -21 37 C-20.01 37.66 -19.02 38.32 -18 39 C-18.64 39.31 -19.28 39.62 -19.94 39.94 C-21.94 40.83 -21.94 40.83 -23 42 C-22.34 42.33 -21.68 42.66 -21 43 C-21.33 43.66 -21.66 44.32 -22 45 C-40.97 40.54 -40.97 40.54 -44 36 C-44 34.68 -44 33.36 -44 32 C-44.66 31.67 -45.32 31.34 -46 31 C-45.24 30.65 -44.48 30.3 -43.69 29.93 C-42.66 29.44 -41.63 28.95 -40.56 28.44 C-39.55 27.96 -38.54 27.49 -37.5 27 C-33.81 25.05 -30.7 22.48 -27.45 19.89 C-22.32 15.93 -16.81 12.51 -11.38 8.99 C-10.48 8.4 -9.59 7.81 -8.67 7.21 C-7.87 6.69 -7.06 6.16 -6.24 5.63 C-3.91 4.03 -3.91 4.03 -1.87 1.8 C-1.25 1.2 -0.64 0.61 0 0 Z \",fill:\"#846F90\",transform:\"translate(634,514)\"})),_path260||(_path260=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 6.44 0.5 6.44 1 13 C2.32 13 3.64 13 5 13 C5.09 11.84 5.09 11.84 5.18 10.66 C5.27 9.66 5.35 8.66 5.44 7.62 C5.52 6.63 5.6 5.63 5.68 4.6 C6 2 6 2 7 0 C9.48 0.99 9.48 0.99 12 2 C10.3 14.4 6.96 25.58 1.46 36.8 C0.07 39.64 -1.11 42.35 -2.05 45.38 C-2.37 46.24 -2.68 47.11 -3 48 C-4.65 48.7 -6.32 49.37 -8 50 C-9.54 52.84 -10.15 55.6 -10.94 58.75 C-11.29 59.82 -11.64 60.89 -12 62 C-15 63 -15 63 -17.19 62.06 C-17.79 61.71 -18.38 61.36 -19 61 C-17.54 57.76 -15.67 55.31 -13.44 52.56 C-9.39 47.08 -6.6 41.29 -3.88 35.06 C-3.25 33.68 -3.25 33.68 -2.62 32.26 C-2.25 31.38 -1.88 30.5 -1.49 29.6 C-1.16 28.81 -0.82 28.02 -0.47 27.21 C0.12 24.44 -0.51 23.34 -2 21 C-2.53 22.11 -2.53 22.11 -3.07 23.24 C-8.1 33.59 -12.9 42.76 -21.88 50.16 C-23.88 51.9 -25.43 53.66 -27.06 55.75 C-29.69 58.99 -32.41 60.46 -36.27 61.98 C-38.19 62.88 -38.19 62.88 -38.88 65.07 C-39.25 65.7 -39.62 66.34 -40 67 C-42.6 67.61 -42.6 67.61 -45.62 67.75 C-46.63 67.81 -47.63 67.86 -48.66 67.92 C-49.43 67.95 -50.21 67.97 -51 68 C-52.55 63.34 -50.98 58.87 -50.03 54.16 C-49.1 49.55 -49.1 49.55 -50 45 C-49.67 44.34 -49.34 43.68 -49 43 C-49.66 42.67 -50.32 42.34 -51 42 C-49.36 40.31 -47.69 38.65 -46 37 C-45.24 36.24 -44.47 35.47 -43.69 34.69 C-38.42 31.38 -31.89 33.03 -25.98 33.88 C-23.79 34.14 -23.79 34.14 -21 33 C-20.34 32.01 -19.68 31.02 -19 30 C-18.01 29.67 -17.02 29.34 -16 29 C-10.74 23.02 -9.76 16.16 -8.71 8.54 C-8.31 6.21 -7.94 4.17 -7 2 C-4.42 0.68 -2.9 0 0 0 Z \",fill:\"#836D8E\",transform:\"translate(909,363)\"})),_path261||(_path261=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.22 1.41 1.43 2.83 1.62 4.25 C1.8 5.43 1.8 5.43 1.98 6.64 C2 9.36 1.24 10.62 0 13 C-0.17 15.07 -0.17 15.07 0 17.12 C0 18.4 0 19.68 0 21 C-0.66 21.66 -1.32 22.32 -2 23 C-1.67 23.99 -1.34 24.98 -1 26 C-0.34 26.33 0.32 26.66 1 27 C5.23 36.2 5.18 49.47 2 59 C2.01 60.63 2.05 62.25 2.12 63.88 C2.2 70.54 0.7 76.6 -1 83 C-1.34 84.33 -1.67 85.67 -2 87 C-2.16 87.61 -2.32 88.22 -2.48 88.85 C-3 91 -3.39 93.14 -3.75 95.33 C-3.89 96.13 -4.02 96.93 -4.15 97.75 C-4.36 98.99 -4.36 98.99 -4.56 100.25 C-4.7 101.09 -4.84 101.93 -4.98 102.8 C-5.32 104.86 -5.66 106.93 -6 109 C-5.34 109.33 -4.68 109.66 -4 110 C-4.52 110.74 -5.03 111.49 -5.56 112.25 C-7.25 114.83 -7.25 114.83 -6.69 117.31 C-6.46 117.87 -6.23 118.43 -6 119 C-7.65 119.99 -9.3 120.98 -11 122 C-16.81 117.04 -17.28 110.23 -18 103 C-19.37 82.68 -16.91 62.21 -15 42 C-14.34 42 -13.68 42 -13 42 C-12.96 41.32 -12.93 40.64 -12.89 39.95 C-11.72 23.45 -11.72 23.45 -7.07 19.26 C-4.08 16 -3.36 12.46 -2.25 8.25 C-2.03 7.46 -1.81 6.66 -1.58 5.85 C-1.04 3.9 -0.52 1.95 0 0 Z \",fill:\"#1A0A31\",transform:\"translate(425,764)\"})),_path262||(_path262=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.31 5.56 6.8 11.77 7.09 19.36 C7.38 26.1 10.2 29.4 15 34 C11.32 35.15 11.32 35.15 8.44 33.81 C2.47 29.38 2.08 24.26 0.84 17.21 C0.01 14.05 -0.33 12.79 -3 11 C-8.54 9.44 -15.46 9.44 -21 11 C-22.91 12.55 -23.87 13.53 -24.53 15.93 C-25.03 21.55 -24.88 26.94 -24.44 32.56 C-23.76 43.36 -23.2 55.45 -29 65 C-32.76 67.24 -35.18 68.01 -39.56 67.94 C-44.27 66.65 -47.45 64.21 -51.25 61.25 C-52.91 59.81 -52.91 59.81 -55 60 C-54.62 64.02 -54.23 68.04 -53.83 72.06 C-53.69 73.43 -53.56 74.79 -53.43 76.16 C-53.25 78.13 -53.05 80.1 -52.85 82.07 C-52.68 83.85 -52.68 83.85 -52.5 85.66 C-52 88.97 -51.13 91.86 -50 95 C-49.25 98.53 -49.14 101.48 -50 105 C-52.01 107.83 -54.24 110.17 -56.7 112.62 C-58.74 114.74 -60.12 116.59 -61.56 119.12 C-63.85 123.06 -66.8 125.87 -70.09 128.97 C-72.02 131.02 -73.23 132.97 -74.56 135.44 C-75.73 137.47 -75.73 137.47 -77 139 C-78.09 139.12 -79.19 139.25 -80.31 139.38 C-85.56 140.26 -87.07 143.08 -90.14 147.23 C-92.26 150.39 -94.16 153.6 -95.89 156.99 C-97.09 159.16 -98.51 161.03 -100 163 C-101.16 165.39 -101.16 165.39 -101 168 C-99.39 169.72 -97.71 171.38 -96 173 C-95.2 173.81 -94.4 174.63 -93.57 175.46 C-88.08 181.03 -88.08 181.03 -82.12 186.06 C-76.28 190.94 -74.4 198.78 -73 206 C-72.87 208.36 -72.9 210.63 -73 213 C-73.66 213 -74.32 213 -75 213 C-75.16 212.11 -75.32 211.21 -75.48 210.29 C-77.5 199.84 -79.66 190.95 -88.39 184.29 C-90 183 -90 183 -91.81 180.5 C-94.67 177.24 -97.96 175.56 -101.76 173.53 C-104.28 171.81 -105.13 170.91 -106 168 C-105.71 160.81 -103.33 155.76 -98.19 150.81 C-97.29 150.01 -96.4 149.2 -95.48 148.37 C-93.14 146.13 -91.68 144.15 -90.06 141.38 C-87.14 136.67 -83.33 134.07 -78.81 130.95 C-71.31 125.74 -66.47 120.83 -62.42 112.61 C-61.04 110.08 -59.61 108.31 -57.62 106.25 C-55.24 103.65 -55.02 103.13 -54.56 99.38 C-54.93 96.16 -54.93 96.16 -55.5 93.66 C-56.04 90.81 -56.29 88.03 -56.5 85.14 C-56.58 84.02 -56.66 82.91 -56.75 81.76 C-56.83 80.6 -56.91 79.44 -57 78.25 C-57.17 75.96 -57.33 73.68 -57.5 71.39 C-57.58 70.3 -57.65 69.21 -57.73 68.09 C-57.97 65.32 -58.34 62.61 -58.75 59.86 C-59 56 -59 56 -57.63 54.33 C-53.79 51.19 -49.83 49 -44.81 49 C-42 50 -42 50 -39.44 52.06 C-37.16 54.18 -37.16 54.18 -34.38 54.5 C-31.89 54.21 -31.89 54.21 -30.38 52.27 C-28.82 49.7 -28.58 48.21 -28.49 45.23 C-28.44 43.9 -28.44 43.9 -28.38 42.54 C-28.36 41.62 -28.34 40.7 -28.31 39.75 C-28.28 38.81 -28.24 37.88 -28.21 36.91 C-28.13 34.61 -28.06 32.31 -28 30 C-28.66 30 -29.32 30 -30 30 C-30.11 27.12 -30.19 24.25 -30.25 21.38 C-30.28 20.57 -30.32 19.76 -30.35 18.93 C-30.44 13.47 -29.77 10.25 -26 6 C-24.03 4.86 -24.03 4.86 -21.94 4.31 C-21.16 4.1 -20.38 3.88 -19.57 3.66 C-18.72 3.44 -17.87 3.22 -17 3 C-16.07 2.72 -15.14 2.44 -14.18 2.16 C-3.79 -0.9 -3.79 -0.9 0 0 Z \",fill:\"#846F90\",transform:\"translate(784,291)\"})),_path263||(_path263=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.36 0.89 8.68 1.91 13 3 C13.34 4.42 13.34 4.42 13.69 5.88 C15.59 12.48 18.11 19.14 24 23 C23 26 23 26 21 27 C20.36 32.84 20.36 32.84 22.5 38 C26.01 39.4 29.23 39.69 33 40 C33 40.33 33 40.66 33 41 C31.58 41.05 30.17 41.09 28.75 41.12 C27.96 41.15 27.17 41.17 26.36 41.2 C23.77 40.98 22.27 40.19 20 39 C19.01 39 18.02 39 17 39 C16.38 38.67 15.76 38.33 15.12 37.99 C11.22 36.17 7.11 37.19 3 38 C-1.15 39.85 -3.89 42.72 -7 46 C-7 44.68 -7 43.36 -7 42 C-10.46 42.49 -10.46 42.49 -14 43 C-14.46 47.03 -14.46 47.03 -11.88 49.25 C-10 52 -10 52 -10.44 55.44 C-10.92 56.97 -11.45 58.49 -12 60 C-12.42 61.2 -12.83 62.4 -13.26 63.63 C-14.48 67.1 -15.73 70.55 -17 74 C-17.33 74 -17.66 74 -18 74 C-18.13 72.01 -18.26 70.03 -18.39 68.04 C-18.83 65.8 -18.83 65.8 -21.05 64.54 C-21.7 64.03 -22.34 63.52 -23 63 C-23.24 60.7 -23.24 60.7 -22.88 58.12 C-22.69 56.8 -22.69 56.8 -22.5 55.45 C-21.96 52.8 -21.21 50.43 -20 48 C-19.34 48 -18.68 48 -18 48 C-17.67 45.69 -17.34 43.38 -17 41 C-17.66 41 -18.32 41 -19 41 C-19.33 41.99 -19.66 42.98 -20 44 C-20.47 36.41 -19.2 30.92 -15.48 24.3 C-13.41 19.68 -12.91 15.09 -12.27 10.1 C-11.73 6.51 -11.34 4.44 -9.09 1.5 C-6.03 -0.7 -3.58 -0.53 0 0 Z \",fill:\"#401F54\",transform:\"translate(401,1052)\"})),_path264||(_path264=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.02 1.32 0.02 2.66 0.04 C4.82 0.08 6.97 0.13 9.12 0.19 C9.62 3.16 9.62 3.16 10.12 6.19 C8.98 6.87 8.98 6.87 7.81 7.56 C5.89 8.73 4 9.94 2.12 11.19 C-0.81 11.35 -0.81 11.35 -4.31 11.25 C-16.54 10.58 -16.54 10.58 -27.88 14.19 C-28.21 14.85 -28.53 15.51 -28.88 16.19 C-29.53 16.19 -30.2 16.19 -30.88 16.19 C-31.01 16.99 -31.01 16.99 -31.14 17.81 C-32.12 20.99 -33.74 23.41 -35.56 26.19 C-36.23 27.22 -36.89 28.25 -37.57 29.31 C-41.07 33.68 -44.9 36.2 -50.31 37.5 C-54.77 38.86 -57.21 41.02 -60.27 44.47 C-61.88 46.19 -61.88 46.19 -63.87 47.52 C-66.22 49.48 -66.72 50.73 -67.58 53.64 C-67.84 54.48 -68.09 55.33 -68.36 56.21 C-68.61 57.09 -68.86 57.97 -69.12 58.88 C-69.39 59.77 -69.66 60.66 -69.94 61.58 C-70.6 63.78 -71.24 65.98 -71.88 68.19 C-73.52 68.19 -75.17 68.19 -76.88 68.19 C-76.88 69.18 -76.88 70.17 -76.88 71.19 C-77.87 71.19 -78.86 71.19 -79.88 71.19 C-79.88 70.53 -79.88 69.87 -79.88 69.19 C-80.64 69.27 -81.4 69.35 -82.19 69.44 C-84.88 69.19 -84.88 69.19 -86.5 67.51 C-88.99 63.31 -88.85 58.89 -87.88 54.19 C-85.89 51.61 -83.53 50.03 -80.88 48.19 C-79.86 46.86 -78.86 45.53 -77.88 44.19 C-77.22 44.19 -76.55 44.19 -75.88 44.19 C-75.85 43.03 -75.83 41.88 -75.81 40.69 C-74.82 32.71 -67.67 28 -61.88 23.19 C-60.25 21.38 -58.7 19.53 -57.17 17.64 C-55.88 16.19 -55.88 16.19 -53.88 15.19 C-52.33 15.27 -50.79 15.43 -49.25 15.62 C-48.43 15.73 -47.62 15.83 -46.77 15.93 C-46.15 16.02 -45.52 16.1 -44.88 16.19 C-44.88 17.18 -44.88 18.17 -44.88 19.19 C-38.73 18.05 -35.44 16.07 -31.5 11.19 C-27.57 6.44 -24.58 4.85 -18.55 3.79 C-15.76 3.3 -15.76 3.3 -13.16 1.63 C-8.69 -0.34 -4.82 -0.14 0 0 Z \",fill:\"#857295\",transform:\"translate(842.875,399.8125)\"})),_path265||(_path265=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.36 1.09 3.95 2.36 6 4 C6.99 4 7.98 4 9 4 C9.91 4.19 10.82 4.37 11.75 4.56 C15.04 5.2 15.04 5.2 18.38 4.25 C25.63 3.75 30.41 9.22 35.62 13.75 C41.45 19.16 45.54 24.88 49 32 C44.86 28.62 41.19 25.33 38 21 C37.6 21.74 37.19 22.48 36.78 23.24 C34.95 26.08 33.1 27.98 30.56 30.19 C29.8 30.86 29.04 31.54 28.25 32.23 C24.56 35.13 22.78 36 18 36 C17.67 37.65 17.34 39.3 17 41 C13 41 13 41 10 39 C7.03 38.54 7.03 38.54 3.81 38.38 C2.73 38.3 1.64 38.23 0.52 38.15 C-0.31 38.1 -1.14 38.05 -2 38 C-2 37.67 -2 37.34 -2 37 C2.46 36.5 2.46 36.5 7 36 C7 35.34 7 34.68 7 34 C5.86 33.62 5.86 33.62 4.7 33.23 C3.71 32.89 2.71 32.54 1.69 32.19 C0.7 31.85 -0.28 31.51 -1.3 31.17 C-3.91 30.04 -5.15 29.08 -7 27 C-7.66 26.67 -8.32 26.34 -9 26 C-9 25.34 -9 24.68 -9 24 C-9.8 23.69 -10.61 23.38 -11.44 23.06 C-14 22 -14 22 -15 21 C-15.29 18.76 -15.51 16.5 -15.69 14.25 C-15.79 13.02 -15.9 11.79 -16.01 10.52 C-16 7.02 -15.69 5.03 -14 2 C-9.55 -0.97 -5.22 -0.64 0 0 Z \",fill:\"#7B6D9D\",transform:\"translate(691,209)\"})),_path266||(_path266=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.12 1.62 1.12 1.62 2.12 4.62 C1.13 4.95 0.14 5.28 -0.88 5.62 C0.89 12.87 3.91 17.37 9.12 22.62 C10.01 23.53 10.9 24.44 11.81 25.38 C13.32 26.84 14.86 28.28 16.44 29.69 C18.12 31.62 18.12 31.62 18.12 35.62 C15.92 36.76 15.92 36.76 13.12 37.62 C10.77 36.83 10.77 36.83 8.38 35.44 C0.36 31.1 -5.78 28.67 -14.88 30.62 C-16.41 31.14 -17.95 31.66 -19.48 32.19 C-25.06 33.89 -30.04 33.84 -35.81 33.44 C-36.74 33.39 -37.68 33.35 -38.63 33.3 C-45.46 32.9 -45.46 32.9 -48.88 30.62 C-47.62 21.66 -39.38 16.13 -32.82 10.61 C-30.52 8.73 -30.52 8.73 -30.88 5.62 C-31.87 5.3 -32.86 4.97 -33.88 4.62 C-33.88 3.97 -33.88 3.31 -33.88 2.62 C-6.51 -4.77 -6.51 -4.77 0 0 Z \",fill:\"#634369\",transform:\"translate(639.875,118.375)\"})),_path267||(_path267=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C1.66 4 2.32 4 3 4 C3.2 5.1 3.2 5.1 3.4 6.23 C3.58 7.21 3.76 8.18 3.94 9.19 C4.11 10.15 4.29 11.11 4.46 12.11 C4.64 13.06 4.82 14.02 5 15 C5.1 15.9 5.21 16.81 5.32 17.74 C5.77 20.11 5.77 20.11 7.74 21.16 C8.48 21.43 9.23 21.71 10 22 C11.73 22.83 13.46 23.66 15.19 24.5 C16.51 25.13 16.51 25.13 17.86 25.78 C20 27 20 27 21 29 C21.4 34.44 20.34 38.65 18.31 43.62 C18.04 44.32 17.77 45.01 17.49 45.72 C16.94 47.14 16.38 48.55 15.81 49.97 C12.25 58.89 8.81 67.83 6.11 77.05 C3.08 87.28 -0.58 96.17 -6.71 104.92 C-8.54 107.87 -9.28 110.62 -10 114 C-11.65 114 -13.3 114 -15 114 C-14.34 111.36 -13.68 108.72 -13 106 C-12.34 106 -11.68 106 -11 106 C-11 104.02 -11 102.04 -11 100 C-10.67 100 -10.34 100 -10 100 C-9.76 97.14 -9.56 94.81 -10 92 C-12.35 89.23 -12.35 89.23 -15 87 C-15.69 84.81 -15.69 84.81 -16 83 C-16.66 82.34 -17.32 81.68 -18 81 C-15.25 74.12 -15.25 74.12 -13 73 C-12.18 71.28 -11.45 69.52 -10.75 67.75 C-8.96 63.29 -7.04 58.95 -4.94 54.62 C0.34 43.22 5.12 29.37 2.26 16.72 C1.24 13.89 1.24 13.89 -1.12 12.62 C-1.74 12.42 -2.36 12.21 -3 12 C-2.69 10.19 -2.38 8.37 -2.06 6.56 C-1.8 5.05 -1.8 5.05 -1.54 3.5 C-1 1 -1 1 0 0 Z \",fill:\"#070C30\",transform:\"translate(668,1166)\"})),_path268||(_path268=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.29 0.31 4.58 0.62 6.88 0.94 C8.15 1.11 9.43 1.29 10.74 1.46 C14 2 14 2 16 3 C20.35 9.86 19.22 16.35 18 24 C18 24.66 18 25.32 18 26 C18.8 26.31 19.61 26.62 20.44 26.94 C23 28 23 28 24 29 C24.98 32.93 25.71 36.91 26.5 40.88 C26.73 41.97 26.95 43.07 27.18 44.2 C31.47 65.62 31.47 65.62 27 73 C24.81 75.82 22.48 78.44 20 81 C18.35 80.67 16.7 80.34 15 80 C15.37 76.75 15.7 75.3 18.05 72.94 C20.89 68.67 20.37 65.17 20 60.19 C19.94 59.26 19.89 58.32 19.83 57.36 C19.2 48.89 17.34 41.15 15 33 C14.4 30.59 13.81 28.17 13.25 25.75 C13.01 24.73 12.77 23.72 12.52 22.67 C12 20 12 20 12 16 C8.44 22.44 8.8 27.91 9.25 35.12 C9.33 36.84 9.33 36.84 9.41 38.58 C9.68 44.09 10.04 49.59 10.48 55.09 C10.54 56.03 10.61 56.97 10.68 57.93 C10.81 59.67 10.96 61.41 11.13 63.15 C11.67 70.64 8.58 74.75 4.06 80.44 C1.35 82.49 -0.63 82.79 -4 83 C-6.88 82.56 -6.88 82.56 -9 82 C-7.91 78.72 -7.17 78.08 -4.56 76 C-0.58 72.81 1.32 70.12 2 65 C1.96 57.41 0.8 50.24 -1.28 42.95 C-3.16 35.23 -3.12 27.65 -3.06 19.75 C-3.06 18.67 -3.05 17.6 -3.05 16.49 C-3.04 14.5 -3.03 12.52 -3.02 10.53 C-3 8.35 -3 6.18 -3 4 C-1.5 1.75 -1.5 1.75 0 0 Z \",fill:\"#321641\",transform:\"translate(834,304)\"})),_path269||(_path269=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.27 1.01 0.54 2.02 0.81 3.06 C2.41 6.84 4.5 8.13 8.02 10.13 C14.22 13.93 18.95 18.56 23.94 23.81 C25.57 25.51 27.2 27.21 28.84 28.89 C29.54 29.64 30.25 30.38 30.98 31.14 C32.95 32.96 34.49 34.06 37 35 C41.82 34.76 41.82 34.76 45.94 32.5 C49.29 30.06 51.84 30 56 30 C58.5 32.44 58.5 32.44 60 35 C59.36 35 58.72 35.01 58.06 35.01 C51.2 35.31 47.65 36.96 43 42 C43.48 42.41 43.96 42.82 44.45 43.24 C46.29 45.33 46.42 46.46 46.75 49.19 C47.89 54.92 51 57.92 55 62 C56.51 63.66 58.01 65.33 59.5 67 C60.26 67.84 61.02 68.69 61.81 69.56 C64.32 72.35 66.79 75.17 69.25 78.01 C70.48 79.41 71.75 80.79 73.04 82.14 C77.32 86.72 80.2 91.03 82.87 96.7 C84.57 100.17 86.11 102.38 89 105 C93.11 106.3 96.88 106.18 101 105 C101 104.37 101.01 103.74 101.01 103.09 C101.33 96.06 103.28 92.16 108 87 C108.44 87.48 108.88 87.96 109.33 88.46 C111.45 90.42 113.18 90.62 116 91 C116 91.66 116 92.32 116 93 C113.52 93.5 113.52 93.5 111 94 C111 94.66 111 95.32 111 96 C109.02 96.99 109.02 96.99 107 98 C106.43 107.71 112.42 116.16 118.13 123.53 C119.95 125.93 121.46 128.41 123 131 C123.56 131.54 124.11 132.07 124.69 132.62 C126 134 126 134 126 137 C126.66 137 127.32 137 128 137 C129.77 138.62 131.38 140.24 133 142 C133.93 143.01 133.93 143.01 134.88 144.04 C140 149.73 140 149.73 140 152 C137.82 152.74 137.82 152.74 135 153 C132.48 151.5 132.48 151.5 129.86 149.22 C128.9 148.39 127.94 147.56 126.95 146.7 C122.25 142.4 117.72 137.97 113.25 133.44 C112.36 132.54 111.46 131.65 110.54 130.73 C106.04 126.2 101.7 121.59 97.54 116.74 C95.34 114.25 92.96 111.98 90.56 109.69 C86.09 105.27 82.33 100.68 78.75 95.51 C76.09 91.69 73.59 88.47 69.94 85.56 C66.82 82.84 65.77 80.68 64 77 C61.56 74.31 61.56 74.31 59 72 C56.65 69.82 56.05 69.16 55 66 C53.86 64.83 52.72 63.66 51.54 62.53 C49.68 60.69 47.93 58.77 46.19 56.81 C45.58 56.14 44.98 55.46 44.36 54.77 C43 53 43 53 43 51 C42.01 50.67 41.02 50.34 40 50 C38.42 48.4 38.42 48.4 36.75 46.38 C34.35 43.51 31.89 40.95 29.12 38.44 C25.68 35.09 25.1 32.75 25 28 C24.28 27.92 23.55 27.85 22.8 27.77 C19.28 26.8 17.73 25.23 15.12 22.69 C5.95 14.15 -3.6 11 -16 10 C-15.83 5.66 -15.62 3.62 -12.5 0.5 C-7.97 -1.44 -4.74 -0.97 0 0 Z \",fill:\"#44214E\",transform:\"translate(640,102)\"})),_path270||(_path270=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.35 1.3 10.67 5.41 15 10 C16.27 12.26 16.27 12.26 17 14 C22.37 13.58 25 12.56 29 9 C32.84 6.35 36.48 6.78 41 7 C41.66 7.33 42.32 7.66 43 8 C42.5 6.51 42.5 6.51 42 5 C47.62 3 47.62 3 51 3 C51.74 2.48 52.49 1.97 53.25 1.44 C56.98 -0.51 58.94 0.02 63 1 C64.11 1.52 65.23 2.03 66.38 2.56 C70.27 4.11 72.88 4.22 76.98 4.01 C79 4 79 4 82 5 C82.69 7.06 82.69 7.06 83 9 C83.66 9 84.32 9 85 9 C86.64 11.24 88.15 13.47 89.62 15.81 C90.05 16.46 90.47 17.1 90.9 17.76 C94 22.62 94 22.62 94 26 C92 24.62 92 24.62 90 23 C90 22.34 90 21.68 90 21 C89.34 21 88.68 21 88 21 C86.17 18.77 84.53 16.42 82.85 14.07 C80.83 11.81 79.94 11.37 77 11 C74.31 10.56 74.31 10.56 72 10 C71.5 9.01 71.5 9.01 71 8 C69.4 7.95 67.79 7.91 66.19 7.88 C65.29 7.85 64.4 7.83 63.48 7.8 C60.75 7.82 60.75 7.82 58 10 C57.01 10 56.02 10 55 10 C55.35 10.66 55.7 11.32 56.06 12 C57.33 16.05 56.71 18.83 56 23 C55.46 22.48 54.93 21.97 54.38 21.44 C52.05 19.75 52.05 19.75 49.12 20 C45.04 21.31 43.07 23 40 26 C38.04 31.89 37.73 38.83 40.06 44.64 C42.57 48.64 45.2 51.28 49.12 53.88 C53.55 56.9 54.47 60.26 56.01 65.25 C57.97 70.7 61.66 74.69 65.75 78.69 C68.06 81.06 69.02 82.87 70 86 C67.69 86 65.38 86 63 86 C62.67 84.68 62.34 83.36 62 82 C61.01 82 60.02 82 59 82 C58.6 80.83 58.21 79.65 57.8 78.44 C56.17 74.1 53.95 70.63 51.19 66.94 C50.74 66.33 50.3 65.72 49.84 65.1 C45.61 59.36 41.14 53.97 36 49 C25.05 38.34 16.71 24.97 8.06 12.44 C7.6 11.77 7.14 11.1 6.67 10.42 C4.33 7.01 2.08 3.58 0 0 Z \",fill:\"#44214E\",transform:\"translate(228,940)\"})),_path271||(_path271=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16 16 16 16 16 26 C16.99 26.33 17.98 26.66 19 27 C20 30 20 30 19.06 32.31 C17.79 35 17.79 35 18.12 38.12 C18 41 18 41 16.38 42.75 C14 44 14 44 11.12 44.88 C7.22 46.28 5.07 48.23 2 51 C-2.29 49.35 -6.58 47.7 -11 46 C-11 45.34 -11 44.68 -11 44 C-12.3 43.79 -13.6 43.59 -14.94 43.38 C-20.58 42.09 -24.43 39.47 -29 36 C-29.86 35.35 -29.86 35.35 -30.74 34.69 C-32.67 33.24 -34.59 31.78 -36.5 30.31 C-37.12 29.84 -37.75 29.36 -38.39 28.87 C-42.88 25.35 -42.88 25.35 -44 22 C-41.69 22.66 -39.38 23.32 -37 24 C-36.67 23.01 -36.34 22.02 -36 21 C-35.1 21.14 -35.1 21.14 -34.17 21.29 C-33.37 21.4 -32.57 21.51 -31.75 21.62 C-30.96 21.74 -30.17 21.86 -29.36 21.98 C-26.59 22 -25.4 21.33 -23 20 C-20.99 19.28 -18.97 18.6 -16.94 17.94 C-15.89 17.6 -14.85 17.25 -13.78 16.9 C-12.86 16.6 -11.94 16.31 -11 16 C-8.7 15.23 -6.53 14.4 -4.31 13.44 C-3.22 12.96 -2.13 12.49 -1 12 C-0.67 8.04 -0.34 4.08 0 0 Z \",fill:\"#311243\",transform:\"translate(836,222)\"})),_path272||(_path272=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.91 0.54 12.99 2.01 19.56 4.19 C20.51 4.5 21.47 4.81 22.45 5.13 C25.3 6.07 28.15 7.03 31 8 C32.27 8.43 32.27 8.43 33.56 8.87 C35.82 9.64 38.07 10.44 40.31 11.25 C40.98 11.48 41.65 11.72 42.34 11.96 C44.18 12.64 44.18 12.64 47 14 C47.5 15.49 47.5 15.49 48 17 C46.68 17.99 45.36 18.98 44 20 C44.25 21.09 44.25 21.09 44.5 22.2 C44.97 24.83 45.1 27.15 45.06 29.81 C45.05 31.17 45.05 31.17 45.04 32.55 C45.02 33.98 45.02 33.98 45 35.44 C44.94 44.02 45.18 52.45 46 61 C40.44 61.33 37.25 59.43 33 56 C31.6 54.04 30.26 52.05 29 50 C28.23 49.42 27.46 48.83 26.67 48.23 C23.58 45.65 21.55 42.76 19.44 39.38 C19.05 38.76 18.66 38.14 18.26 37.51 C14.47 31.37 11 25.34 11 18 C10.34 18 9.68 18 9 18 C7.21 15.31 6.49 13.59 5.62 10.56 C4.42 6.75 3.07 4.65 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(787,289)\"})),_path273||(_path273=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.49 0.58 7.96 2.42 11.81 4.69 C12.43 5.05 13.06 5.41 13.7 5.78 C17.7 8.13 21.38 10.71 25.03 13.57 C32.24 18.81 40.7 22.4 48.8 26.02 C50.44 26.75 52.08 27.49 53.71 28.22 C67.31 34.35 80.92 40.08 95 45 C95 45.33 95 45.66 95 46 C87.63 45.42 81.01 43.26 74 41 C71.67 40.29 69.33 39.58 67 38.88 C64.06 37.98 61.21 37.09 58.38 35.9 C54.22 34.33 50.12 34.48 45.79 35.54 C43.61 36.99 43.61 36.99 43.46 40.44 C43.41 41.81 43.39 43.19 43.38 44.56 C43.33 47.06 43.21 49.5 43 52 C40.39 53.31 38.92 53.28 36 53 C32.77 51.61 32.77 51.61 29.38 49.75 C28.25 49.15 27.12 48.54 25.96 47.92 C21.6 45.09 19.97 42.6 18.75 37.62 C17.37 33.18 15.42 31.11 11.76 28.34 C10 27 10 27 7.44 24.31 C5.08 21.82 5.08 21.82 1.75 20.5 C-1 19 -1 19 -2 16.62 C-2 14 -2 14 -1.06 11.75 C0.45 7.84 0.16 4.15 0 0 Z \",fill:\"#080D31\",transform:\"translate(972,720)\"})),_path274||(_path274=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11 3.31 0.89 5.23 -0.25 8.5 C-0.63 9.63 -0.63 9.63 -1.02 10.78 C-2 13 -2 13 -3.52 14.96 C-5.25 17.34 -5.73 19.27 -6.38 22.12 C-7.61 26.99 -9.38 31.13 -11.73 35.56 C-13.67 39.29 -15.33 43.14 -17 47 C-17.66 47 -18.32 47 -19 47 C-19.18 47.57 -19.36 48.14 -19.55 48.72 C-19.8 49.49 -20.05 50.27 -20.31 51.06 C-20.56 51.82 -20.8 52.57 -21.05 53.35 C-22 56 -22 56 -23.47 59.1 C-25.58 63.98 -26.31 69.09 -27.12 74.31 C-27.38 75.94 -27.38 75.94 -27.64 77.6 C-28.83 85.66 -29.49 93.67 -29.81 101.81 C-29.85 102.85 -29.89 103.9 -29.94 104.97 C-30.21 114.88 -30.13 123.88 -26 133 C-25.64 135.3 -25.44 137.59 -25.25 139.91 C-24.94 142.5 -24.13 144.66 -23 147 C-24.98 147.33 -26.96 147.66 -29 148 C-41.58 124.84 -47.07 103.07 -40.61 77.03 C-37.39 66.24 -31.89 56.11 -27 46 C-26.68 45.33 -26.35 44.66 -26.02 43.96 C-22.04 35.75 -17.72 27.81 -13 20 C-12.33 18.88 -11.65 17.76 -10.96 16.61 C-7.5 10.92 -3.98 5.34 0 0 Z \",fill:\"#301839\",transform:\"translate(240,767)\"})),_path275||(_path275=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 0.02 2.27 0.04 3.44 0.06 C3.44 0.72 3.44 1.38 3.44 2.06 C4.65 2.33 5.87 2.6 7.12 2.88 C12.23 4.01 17.33 5.19 22.42 6.38 C24.34 6.81 26.26 7.22 28.18 7.59 C30.53 8.08 32.35 8.9 34.44 10.06 C34.44 10.72 34.44 11.38 34.44 12.06 C35.76 12.06 37.08 12.06 38.44 12.06 C38.44 13.05 38.44 14.04 38.44 15.06 C34.34 15.32 31.37 15.2 27.56 13.62 C22.35 11.48 16.87 10.25 11.44 12.06 C10.1 12.71 8.76 13.38 7.44 14.06 C7.44 14.72 7.44 15.38 7.44 16.06 C6.78 16.06 6.12 16.06 5.44 16.06 C5.93 17.55 5.93 17.55 6.44 19.06 C5.52 21.54 4.54 23.77 3.38 26.12 C3.09 26.76 2.8 27.4 2.5 28.06 C0.86 31.4 -0.21 32.9 -3.63 34.49 C-6.37 35.02 -8.78 35.23 -11.56 35.06 C-11.8 35.98 -11.8 35.98 -12.04 36.93 C-13.95 43.54 -13.95 43.54 -16.81 46 C-21.05 47.64 -24.98 49.06 -29.56 49.06 C-33.27 46.43 -36.4 43.32 -39.56 40.06 C-39.23 39.4 -38.9 38.74 -38.56 38.06 C-38.56 37.4 -38.56 36.74 -38.56 36.06 C-40.81 34.11 -42.9 32.39 -45.56 31.06 C-47.25 28.19 -47.25 28.19 -48.56 25.06 C-47.56 22.06 -47.56 22.06 -45.62 20.5 C-36.42 16.18 -26.66 16.19 -16.98 18.62 C-12.54 19.43 -8.06 19.21 -3.56 19.06 C-2.42 14.39 -3.19 11.67 -4.56 7.06 C-4.75 3.69 -4.75 3.69 -4.56 1.06 C-3.56 0.06 -3.56 0.06 0 0 Z \",fill:\"#311243\",transform:\"translate(753.5625,57.9375)\"})),_path276||(_path276=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.98 1.05 4.96 1.9 7.19 4.12 C7.19 4.78 7.19 5.44 7.19 6.12 C7.85 6.12 8.51 6.12 9.19 6.12 C9.19 6.78 9.19 7.44 9.19 8.12 C9.91 8.35 10.63 8.58 11.38 8.81 C14.75 10.39 16.75 12.33 19.19 15.12 C19.19 15.78 19.19 16.44 19.19 17.12 C19.91 17.39 20.63 17.66 21.38 17.94 C26.92 20.28 31.27 23.69 35.81 27.56 C36.38 28.04 36.96 28.52 37.55 29.01 C40.49 31.51 43.03 33.89 45.19 37.12 C43.61 36.85 43.61 36.85 42 36.56 C37.43 35.91 37.43 35.91 33.19 37.12 C31.25 39.65 29.69 42.32 28.19 45.12 C25.31 42.25 25.32 40.14 25.19 36.12 C27.12 32.69 27.12 32.69 29.19 30.12 C26.43 30.62 26.43 30.62 24.19 32.12 C23.79 34.31 23.44 36.49 23.12 38.69 C22.95 39.89 22.77 41.08 22.59 42.32 C22.46 43.24 22.32 44.17 22.19 45.12 C22.85 45.12 23.51 45.12 24.19 45.12 C24.69 46.89 25.19 48.67 25.69 50.44 C25.97 51.42 26.24 52.41 26.53 53.43 C27.19 56.12 27.19 56.12 27.19 59.12 C28.18 59.45 29.17 59.78 30.19 60.12 C30.62 61.03 31.05 61.94 31.5 62.88 C33.18 66.11 34.74 67.46 37.57 69.65 C42.72 74.34 45.76 80.4 47.19 87.12 C42.21 86.97 39.87 84.24 36.54 80.91 C35.19 79.12 35.19 79.12 35.19 76.12 C36.18 76.12 37.17 76.12 38.19 76.12 C34.63 70.27 30.09 65.93 25.14 61.25 C21.83 58.03 19.61 55.62 18.19 51.12 C15.88 48.08 13.67 45.51 10.69 43.12 C5.81 39.22 3.3 35.59 1 29.88 C-1.44 24.11 -4.99 20.65 -9.7 16.61 C-12.36 13.49 -12.56 11.15 -12.81 7.12 C-5.16 0.17 -5.16 0.17 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(685.8125,80.875)\"})),_path277||(_path277=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.6 1.45 2.2 1.9 1.79 2.36 C-2.56 7.28 -6.71 12.33 -10.79 17.48 C-15.1 22.39 -19.76 25.06 -25.62 27.69 C-26.29 27.99 -26.96 28.3 -27.65 28.62 C-38.95 33.79 -47.78 32.54 -59.12 28.31 C-61.99 27.21 -64.74 26.14 -67.44 24.68 C-75.42 22.56 -83.87 28.1 -90.75 31.56 C-92.76 32.57 -94.78 33.57 -96.8 34.57 C-97.68 35.01 -98.56 35.45 -99.46 35.91 C-104.69 38.16 -108.43 37.86 -114 37 C-115.16 38.05 -115.16 38.05 -116 40 C-117.01 39.05 -118 38.09 -119 37.12 C-119.56 36.59 -120.11 36.06 -120.69 35.51 C-122 34 -122 34 -122 32 C-122.58 31.74 -123.16 31.48 -123.75 31.21 C-126.17 29.91 -127.92 28.42 -129.94 26.56 C-132.81 23.99 -135.58 21.82 -139 20 C-139.33 20.99 -139.66 21.98 -140 23 C-142.88 23.12 -142.88 23.12 -146 23 C-146.66 22.34 -147.32 21.68 -148 21 C-147.79 18.52 -147.33 17.33 -145.57 15.55 C-140.36 12.13 -136.2 11.57 -130.03 11.31 C-126.08 10.91 -122.93 9.61 -119.35 7.94 C-114.23 5.89 -109.99 5.92 -104.62 6.94 C-103.57 7.13 -102.51 7.33 -101.41 7.53 C-100.62 7.68 -99.82 7.84 -99 8 C-103.21 10.27 -107.68 11.56 -112.22 13 C-115.16 13.93 -115.16 13.93 -118 16 C-118.84 18.32 -118.84 18.32 -118 21 C-116.36 22.71 -114.61 24.12 -112.73 25.57 C-111 27 -111 27 -109.44 29.38 C-108.07 31.28 -108.07 31.28 -105.43 31.34 C-100.95 30.9 -97.67 29.26 -93.69 27.25 C-92.17 26.52 -90.66 25.78 -89.14 25.05 C-86.81 23.9 -84.47 22.74 -82.14 21.58 C-77.45 19.34 -74.28 18.81 -69 19 C-67.33 18.68 -65.66 18.32 -64 17.94 C-59.58 16.97 -56.41 17.17 -52 18 C-51.01 17.51 -51.01 17.51 -50 17 C-49.01 17.66 -48.02 18.32 -47 19 C-37.47 21.1 -26.9 21.72 -18.27 16.69 C-14.07 13.56 -10.59 9.8 -7 6 C-4.74 3.81 -2.52 1.92 0 0 Z \",fill:\"#462453\",transform:\"translate(410,1188)\"})),_path278||(_path278=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C4.87 3.29 5.73 3.58 6.62 3.88 C9.75 4.92 12.88 5.96 16 7 C16 7.66 16 8.32 16 9 C16.68 9.22 17.35 9.44 18.05 9.66 C21.88 11.4 24.91 13.77 28.19 16.38 C29.13 17.1 29.13 17.1 30.09 17.84 C36.01 22.5 36.01 22.5 37 26 C36.63 26.74 36.26 27.49 35.88 28.25 C34.91 31.28 34.98 32.04 36.06 34.94 C39.28 40.88 46 42.71 52 45 C52 45.66 52 46.32 52 47 C52.64 47.11 53.27 47.21 53.93 47.32 C58.1 48.24 62.12 49.52 66.19 50.81 C67.03 51.08 67.88 51.35 68.75 51.63 C84.77 56.77 84.77 56.77 88 60 C89.93 60.75 89.93 60.75 92.12 61.38 C95.21 62.34 97.93 63.43 100.75 65 C105.34 67.42 110.19 68.34 115.24 69.39 C118 70 118 70 120 71 C120 71.66 120 72.32 120 73 C120.62 73.14 121.24 73.29 121.88 73.44 C124 74 124 74 126 75 C126 75.66 126 76.32 126 77 C126.54 77.08 127.07 77.16 127.62 77.25 C130.84 78.26 133.26 80.07 136 82 C135.01 83.98 135.01 83.98 134 86 C129.07 85.58 127.4 83.4 124 80 C121.69 78.95 119.36 77.94 117 77 C116.36 76.44 115.72 75.89 115.06 75.31 C111.91 73.3 108.64 73.45 105 74 C103.02 74.99 103.02 74.99 101 76 C103.64 77.65 106.28 79.3 109 81 C108.34 81.99 107.68 82.98 107 84 C106.45 83.66 105.91 83.32 105.35 82.98 C104.22 82.31 104.22 82.31 103.06 81.62 C101.97 80.96 101.97 80.96 100.85 80.29 C98.35 79.16 96.48 78.66 93.82 78.17 C88.24 77.02 83.67 74.48 78.75 71.69 C77.88 71.21 77.01 70.74 76.11 70.25 C71.44 67.65 67.29 65.27 64 61 C64 59.33 64 57.67 64 56 C56.38 49.45 45.21 45.82 36 42 C35.14 41.61 34.28 41.23 33.39 40.83 C29.75 39.56 26.15 39.55 22.33 39.34 C21.56 39.23 20.79 39.12 20 39 C19.67 38.34 19.34 37.68 19 37 C19.66 36.34 20.32 35.68 21 35 C18.78 32.44 17.25 31.76 14 31 C13.67 30.34 13.34 29.68 13 29 C11.13 28.1 11.13 28.1 8.84 27.34 C7.99 27.04 7.13 26.74 6.24 26.43 C5.34 26.13 4.43 25.82 3.5 25.5 C2.63 25.19 1.75 24.88 0.85 24.57 C-4.72 22.64 -10.23 21.17 -16 20 C-16 19.67 -16 19.34 -16 19 C-8.03 17.46 -2.31 18.99 5.31 21.5 C7.43 22.19 9.55 22.86 11.68 23.53 C12.6 23.84 13.53 24.14 14.49 24.46 C17.1 25.02 18.51 24.89 21 24 C21.33 21.69 21.66 19.38 22 17 C16.5 13.25 10.93 9.72 5.16 6.39 C3.12 5.08 1.55 3.86 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#44214E\",transform:\"translate(1022,602)\"})),_path279||(_path279=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.6 0.23 1.2 0.45 1.81 0.69 C1.13 1.53 0.45 2.38 -0.25 3.25 C-2.57 7.36 -2.27 9.2 -1.19 13.69 C-0.61 12.92 -0.03 12.16 0.56 11.38 C3.62 7.72 5.23 5.97 10 5.12 C15.32 5.91 18.6 8.48 22.81 11.69 C23.82 12.43 24.83 13.17 25.88 13.94 C26.83 14.8 26.83 14.8 27.81 15.69 C27.81 16.35 27.81 17.01 27.81 17.69 C28.58 17.96 29.34 18.22 30.12 18.5 C32.74 19.66 33.92 20.62 35.81 22.69 C36.8 23.35 37.79 24.01 38.81 24.69 C38.81 25.35 38.81 26.01 38.81 26.69 C39.47 26.69 40.13 26.69 40.81 26.69 C40.81 27.35 40.81 28.01 40.81 28.69 C43.29 29.68 43.29 29.68 45.81 30.69 C45.81 31.35 45.81 32.01 45.81 32.69 C46.49 32.89 47.16 33.09 47.85 33.3 C51.89 35.19 54.87 37.88 58.19 40.81 C58.85 41.4 59.52 41.99 60.21 42.59 C70.38 51.65 77.84 60.51 79.06 74.56 C78.81 76.69 78.81 76.69 76.81 78.69 C76.16 81.26 76.16 81.26 75.81 83.69 C76.53 83.46 77.26 83.23 78 83 C80.81 82.69 80.81 82.69 83.31 83.62 C86.71 86.43 88.85 89.76 90.81 93.69 C90.81 94.35 90.81 95.01 90.81 95.69 C88.92 95.74 87.02 95.78 85.12 95.81 C84.07 95.84 83.01 95.86 81.93 95.88 C78.76 95.68 76.7 94.92 73.81 93.69 C70.29 93.24 66.92 93.13 63.69 94.75 C60.68 96.25 59 95.67 55.81 94.69 C52.95 92.91 50.25 91.02 47.81 88.69 C47.81 88.03 47.81 87.37 47.81 86.69 C46.84 86.4 45.87 86.11 44.88 85.81 C41.81 84.69 41.81 84.69 40.81 82.69 C39.16 82.69 37.51 82.69 35.81 82.69 C35.48 81.04 35.15 79.39 34.81 77.69 C38.44 78.68 42.07 79.67 45.81 80.69 C45.81 81.35 45.81 82.01 45.81 82.69 C46.47 82.69 47.13 82.69 47.81 82.69 C47.81 83.35 47.81 84.01 47.81 84.69 C51.79 85.7 55.24 86.43 59.05 84.63 C63.3 81.55 66.15 78.23 68.81 73.69 C69.8 72.35 70.8 71.01 71.81 69.69 C70.49 70.02 69.17 70.35 67.81 70.69 C68.8 69.2 68.8 69.2 69.81 67.69 C70.03 62.14 68.63 57.46 65.81 52.69 C64.82 53.18 64.82 53.18 63.81 53.69 C63.42 52.8 63.03 51.91 62.62 51 C60.72 47.51 58.72 45.38 55.81 42.69 C54.97 41.78 54.12 40.87 53.25 39.94 C50.69 37.58 50 37.46 46.81 36.69 C39.78 33.43 33.04 29.5 27.81 23.69 C27.81 23.03 27.81 22.37 27.81 21.69 C24.98 21.35 24.98 21.35 21.81 21.69 C19.6 23.56 19.6 23.56 17.81 25.69 C14.34 26.85 11.45 26.76 7.81 26.69 C8.14 25.7 8.47 24.71 8.81 23.69 C6.83 24.35 4.85 25.01 2.81 25.69 C2.48 25.36 2.15 25.03 1.81 24.69 C1.48 26.34 1.15 27.99 0.81 29.69 C0.15 29.69 -0.51 29.69 -1.19 29.69 C-1.69 27.92 -2.19 26.15 -2.69 24.38 C-2.97 23.39 -3.24 22.4 -3.53 21.39 C-4.19 18.69 -4.19 18.69 -4.19 15.69 C-4.85 15.69 -5.51 15.69 -6.19 15.69 C-6.1 13.58 -5.99 11.48 -5.88 9.38 C-5.82 8.2 -5.76 7.03 -5.7 5.82 C-5.19 2.69 -5.19 2.69 -3.78 0.75 C-2.19 -0.31 -2.19 -0.31 0 0 Z \",fill:\"#462453\",transform:\"translate(714.1875,110.3125)\"})),_path280||(_path280=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.29 3.28 5.94 6.4 6.12 11.12 C5 14 5 14 2.93 16.56 C0.33 21.19 0.66 24.74 0.94 29.94 C1.27 36.67 0.72 40.72 -2 47 C-2.2 49.85 -1.9 52.55 -1.5 55.38 C-1.36 56.49 -1.36 56.49 -1.21 57.64 C-0.33 63.59 1.64 68.01 5 73 C5.33 73.99 5.66 74.98 6 76 C6.66 76 7.32 76 8 76 C8.36 76.82 8.36 76.82 8.73 77.66 C9.85 80.18 10.99 82.68 12.12 85.19 C12.5 86.05 12.88 86.92 13.27 87.81 C15.77 93.23 17.96 96.7 23 100 C27.2 100.44 30.9 99.99 35 99 C35.33 100.32 35.66 101.64 36 103 C32.08 104.86 29.13 105.17 24.81 105 C21.73 104.83 21.73 104.83 19 105 C18.34 105.66 17.68 106.32 17 107 C14.17 106.64 11.71 105.9 9 105 C8.87 103.86 8.73 102.71 8.6 101.54 C8.42 100.04 8.24 98.55 8.06 97.06 C7.98 96.31 7.89 95.55 7.8 94.78 C7.66 91.08 7.66 91.08 6 88 C4.89 87.9 3.77 87.79 2.62 87.69 C-1 87 -1 87 -2.67 85.42 C-4.48 82.13 -4.59 79.38 -4.84 75.64 C-4.88 74.93 -4.93 74.22 -4.98 73.48 C-5.07 71.98 -5.16 70.48 -5.25 68.98 C-5.37 66.7 -5.54 64.43 -5.7 62.15 C-5.79 60.69 -5.88 59.22 -5.96 57.76 C-6.04 56.75 -6.04 56.75 -6.11 55.72 C-6.4 49.62 -4.42 45.84 -1.75 40.5 C-0.72 37.08 -1.43 34.53 -2 31 C-2.44 24.44 -2.39 19.8 1 14 C1 12.68 1 11.36 1 10 C-2.73 11.52 -4.81 13.74 -7.44 16.75 C-8.55 18.01 -8.55 18.01 -9.68 19.3 C-11.26 21.14 -12.79 23.03 -14.27 24.95 C-17.39 28.7 -21.24 31.28 -25.25 34 C-25.96 34.5 -26.68 34.99 -27.41 35.5 C-30.33 37.52 -33.25 39.53 -36.26 41.42 C-42.07 45.09 -46.55 49.38 -51.25 54.38 C-59.39 62.73 -67.13 68.31 -77.78 73.22 C-78.62 73.61 -79.46 74 -80.33 74.4 C-81.98 75.15 -83.63 75.88 -85.29 76.59 C-90.31 78.83 -93.71 81.36 -97.45 85.38 C-99.41 87.43 -101.56 88.95 -103.94 90.5 C-110.84 95.18 -116.77 100.62 -122.55 106.62 C-125.31 109.25 -127.44 109.11 -131.12 109.06 C-132.49 109.05 -132.49 109.05 -133.88 109.04 C-134.93 109.02 -134.93 109.02 -136 109 C-136 109.66 -136 110.32 -136 111 C-136.66 110.67 -137.32 110.34 -138 110 C-137.5 109.01 -137.5 109.01 -137 108 C-135.23 107.7 -133.46 107.43 -131.69 107.19 C-124.73 105.61 -121.72 102.05 -117.29 96.83 C-113.94 92.9 -111 90.45 -106.29 88.24 C-102.3 86.08 -99.03 82.99 -95.59 80.08 C-92.53 77.62 -89.44 75.86 -86 74 C-85.48 73.44 -84.97 72.89 -84.44 72.31 C-82.24 70.31 -79.88 70.32 -77 70 C-76.5 68.51 -76.5 68.51 -76 67 C-73.46 65.44 -70.95 64.01 -68.31 62.62 C-63.02 59.83 -58.46 57.01 -54 53 C-53.41 52.49 -52.82 51.98 -52.21 51.46 C-50.67 49.6 -50.24 47.95 -49.62 45.62 C-48.27 41.31 -46.68 38.8 -43 36 C-40.26 35.06 -38.73 34.8 -35.94 35.56 C-33.96 36.18 -33.96 36.18 -31.94 35.31 C-29.63 33.75 -28.39 32.43 -27 30 C-27.03 29.21 -27.06 28.42 -27.1 27.61 C-26.98 24.44 -26.19 23.41 -24.19 21 C-22.37 18.75 -20.91 16.83 -19.56 14.25 C-17.73 11.62 -15.72 10.63 -12.91 9.18 C-9.99 7.38 -7.81 4.98 -5.48 2.49 C-3.64 0.64 -2.62 0 0 0 Z \",fill:\"#7C5B7B\",transform:\"translate(849,532)\"})),_path281||(_path281=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.4 6.9 1.76 12.07 -0.25 17.62 C-0.72 18.94 -0.72 18.94 -1.19 20.27 C-3.68 27.23 -6.28 34.13 -9 41 C-7.35 41.33 -5.7 41.66 -4 42 C-3.81 44.44 -3.62 46.87 -3.44 49.31 C-3.35 50.35 -3.35 50.35 -3.27 51.4 C-2.89 56.66 -4.02 60.12 -5.94 64.94 C-6.45 66.22 -6.45 66.22 -6.96 67.53 C-7.89 69.74 -8.9 71.87 -10 74 C-10.66 74 -11.32 74 -12 74 C-12.08 74.68 -12.17 75.36 -12.25 76.06 C-13.86 82.38 -18.05 87.9 -22 93 C-22.66 93 -23.32 93 -24 93 C-24 93.99 -24 94.98 -24 96 C-24.66 96 -25.32 96 -26 96 C-26.25 96.71 -26.5 97.42 -26.76 98.15 C-28.13 101.31 -29.83 103.79 -31.88 106.56 C-32.55 107.49 -33.23 108.42 -33.93 109.38 C-37.24 113.57 -39.78 116.46 -45 118 C-48.02 118.32 -51.02 118.44 -54.06 118.56 C-58.78 119.27 -61.32 121.23 -64.44 124.75 C-67 127 -67 127 -70.12 127 C-74.58 125.45 -74.58 125.45 -76 123 C-76.63 116.83 -75.43 112.66 -73 107 C-72.34 107 -71.68 107 -71 107 C-70.92 106.24 -70.83 105.47 -70.75 104.69 C-70.1 101.51 -69.24 98.94 -68.06 95.94 C-66.04 90.62 -65.2 85.49 -64.59 79.85 C-63.96 76.81 -63.04 75.29 -61 73 C-62 78 -62 78 -62.56 80.19 C-62.97 82.79 -62.9 84.83 -62.75 87.44 C-62.65 93.41 -64.66 98.39 -66.81 103.9 C-67.72 106.28 -68.47 108.51 -69 111 C-67.02 112.65 -65.04 114.3 -63 116 C-62.32 115.5 -61.64 115 -60.93 114.49 C-57.32 112.65 -55.08 112.85 -51.06 113.12 C-45.1 113.37 -45.1 113.37 -40.12 110.5 C-39.42 109.67 -38.72 108.85 -38 108 C-37.01 108.5 -37.01 108.5 -36 109 C-35.74 108.27 -35.49 107.54 -35.22 106.79 C-33.58 103.04 -31.16 100.3 -28.56 97.18 C-27.03 95.05 -26.42 93.56 -26 91 C-25.34 91 -24.68 91 -24 91 C-23.76 90.33 -23.52 89.67 -23.28 88.98 C-21.66 85.22 -19.63 81.79 -17.56 78.25 C-11.8 68.36 -11.8 68.36 -10.06 57.25 C-10.77 53.92 -10.77 53.92 -13.06 51.69 C-15.64 48.11 -15.08 45.73 -14.88 41.45 C-15.07 37.66 -16.6 35.85 -19 33 C-26.57 34.71 -30.21 37.76 -35.46 43.4 C-37.88 45.87 -40.32 47.8 -43.12 49.81 C-49.16 54.45 -52.4 60.4 -56 67 C-56.7 65.34 -56.7 65.34 -57 63 C-55.71 60.41 -55.71 60.41 -53.81 57.62 C-53.16 56.66 -52.51 55.69 -51.84 54.69 C-51.23 53.8 -50.62 52.91 -50 52 C-49.32 50.89 -48.64 49.77 -47.94 48.62 C-46.26 46.36 -44.92 45.03 -42.75 43.31 C-41.84 42.55 -40.94 41.79 -40 41 C-40 40.01 -40 39.02 -40 38 C-38.17 36.2 -36.37 34.6 -34.38 33 C-33.85 32.56 -33.33 32.12 -32.79 31.67 C-29.39 28.88 -25.97 26.87 -22 25 C-21.01 24.34 -20.02 23.68 -19 23 C-19 23.66 -19 24.32 -19 25 C-15.08 22.21 -15.08 22.21 -13 18 C-11.86 16.88 -11.86 16.88 -10.71 15.74 C-7.77 12.76 -5.79 9.77 -3.69 6.19 C-3.33 5.59 -2.97 4.99 -2.6 4.38 C-1.73 2.92 -0.86 1.46 0 0 Z \",fill:\"#472758\",transform:\"translate(423,539)\"})),_path282||(_path282=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-8.89 12.41 -21.65 20.61 -36.25 28.22 C-42.06 31.27 -47.45 34.57 -52.77 38.41 C-55.66 40.47 -58.64 42.26 -61.69 44.06 C-73.48 51.35 -80.32 59.97 -85.64 72.85 C-87.39 76.9 -88.27 77.7 -92.38 79.38 C-99.17 82.42 -101.67 87.57 -105.06 93.88 C-105.5 94.67 -105.93 95.46 -106.38 96.27 C-108.67 100.47 -110.89 104.7 -113 109 C-113.33 109 -113.66 109 -114 109 C-114.39 104.34 -114.71 99.67 -115 95 C-115.08 93.81 -115.16 92.62 -115.24 91.39 C-115.29 90.27 -115.33 89.15 -115.38 88 C-115.42 86.99 -115.47 85.98 -115.52 84.94 C-114.81 80.95 -112.96 78.61 -110 76 C-107.48 74.29 -104.84 72.89 -102.12 71.5 C-92.39 66.35 -92.39 66.35 -85.25 58.12 C-81.75 53.26 -76.91 50.36 -72 47 C-61.61 40.62 -61.61 40.62 -55 31 C-55.75 30.97 -56.5 30.95 -57.27 30.92 C-65.41 30.45 -65.41 30.45 -68.69 27.94 C-69.12 27.3 -69.55 26.66 -70 26 C-67.08 24.05 -65.37 23.55 -62 23 C-62 22.34 -62 21.68 -62 21 C-61.43 20.71 -60.86 20.42 -60.28 20.12 C-54.89 17.26 -50.5 14.12 -46 10 C-45.01 10.5 -45.01 10.5 -44 11 C-44 11.66 -44 12.32 -44 13 C-43.24 12.95 -42.48 12.91 -41.7 12.86 C-40.21 12.81 -40.21 12.81 -38.69 12.75 C-37.21 12.68 -37.21 12.68 -35.7 12.61 C-33 13 -33 13 -31.14 15.02 C-30.77 15.67 -30.39 16.33 -30 17 C-19.7 16.77 -11.56 8.87 -4 2.6 C-2 1 -2 1 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(798,567)\"})),_path283||(_path283=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.78 2.27 1.78 2.27 1.56 3.56 C0.99 7.04 0.49 10.51 0 14 C-0.66 14 -1.32 14 -2 14 C0.61 17.45 0.61 17.45 3.81 20.31 C5.56 22.8 4.87 24.88 4.4 27.75 C4.27 28.49 4.14 29.23 4 30 C2.77 37.19 2.77 37.19 5 44 C4.34 44 3.68 44 3 44 C2.95 44.68 2.9 45.36 2.85 46.05 C2.33 52.49 1.41 58.7 0 65 C0.66 65.33 1.32 65.66 2 66 C3.98 58.68 5.62 52.5 4 45 C4.66 45 5.32 45 6 45 C8.69 50.73 7.58 54.79 6 60.62 C5.77 61.52 5.53 62.41 5.29 63.33 C3.35 70.41 0.59 76.6 -3 83 C-4.23 85.43 -5.43 87.87 -6.62 90.31 C-8.34 93.77 -10.06 97.2 -12.06 100.5 C-16.61 108.31 -20.61 116.67 -20.8 125.82 C-21 128 -21 128 -21.92 130.29 C-23.28 133.7 -23.91 137.16 -24.56 140.75 C-25.87 147.87 -25.87 147.87 -27 149 C-27.04 150.67 -27.04 152.33 -27 154 C-27.66 154.33 -28.32 154.66 -29 155 C-29.07 150.72 -29.1 147.13 -28 143 C-26.07 132.28 -26.07 132.28 -28 122 C-29.27 113.51 -26.37 105.83 -23.65 97.94 C-23.06 96.17 -22.54 94.38 -22.02 92.59 C-19.97 85.54 -17.17 81.16 -12 76 C-5.2 68.09 -2.35 56.27 -3 45.88 C-3.69 41.66 -5.98 39.94 -9 37 C-9.72 34.27 -9.86 31.84 -10 29 C-15.22 31.11 -17.23 33.26 -19.88 38.19 C-20.47 39.27 -21.07 40.36 -21.68 41.48 C-22.12 42.31 -22.55 43.14 -23 44 C-23.66 43.01 -24.32 42.02 -25 41 C-24.22 39.66 -23.42 38.33 -22.62 37 C-22.18 36.26 -21.74 35.51 -21.29 34.75 C-20.86 34.17 -20.44 33.6 -20 33 C-19.34 33 -18.68 33 -18 33 C-17.75 32.33 -17.5 31.66 -17.25 30.97 C-15.72 27.34 -13.92 23.91 -12.06 20.44 C-11.72 19.78 -11.37 19.12 -11.01 18.44 C-9.21 15.07 -7.34 12.03 -5 9 C-4.08 7.43 -3.18 5.85 -2.31 4.25 C-1.88 3.45 -1.44 2.65 -0.99 1.83 C-0.66 1.22 -0.34 0.62 0 0 Z \",fill:\"#311144\",transform:\"translate(469,668)\"})),_path284||(_path284=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.81 2.44 0.81 5 2 C6.11 5.34 5.84 6.52 5.06 9.88 C4.26 13.34 3.89 16.44 4 20 C4.96 20.31 4.96 20.31 5.94 20.62 C8 22 8 22 8.56 24.56 C8.78 26.26 8.78 26.26 9 28 C9.44 29.61 9.92 31.22 10.44 32.81 C10.68 33.58 10.93 34.35 11.18 35.14 C11.85 37.19 11.85 37.19 14 38 C14 38.66 14 39.32 14 40 C14.66 40 15.32 40 16 40 C15.31 45.42 14.24 50.68 13 56 C12.36 55.8 11.72 55.59 11.06 55.38 C6.03 53.81 1.24 52.57 -4 52 C-4.7 53.58 -5.39 55.16 -6.06 56.75 C-6.45 57.63 -6.83 58.51 -7.22 59.42 C-8.21 61.9 -8.21 61.9 -7.47 64 C-6.47 68.25 -10.03 72.55 -12.02 76.2 C-13.02 78.04 -14 79.89 -14.98 81.75 C-22.58 95.87 -31.52 108.88 -42.61 120.48 C-44.57 122.55 -46.36 124.64 -48.12 126.88 C-51.41 130.81 -55.65 133.36 -60 136 C-60.66 135.67 -61.32 135.34 -62 135 C-60.68 131.45 -58.59 129.8 -55.66 127.5 C-53.1 125.18 -51.25 122.41 -49.3 119.57 C-48.87 119.05 -48.44 118.54 -48 118 C-47.34 118 -46.68 118 -46 118 C-45.69 117.38 -45.38 116.76 -45.06 116.12 C-44.38 114.75 -43.69 113.38 -43 112 C-42.34 112 -41.68 112 -41 112 C-40.74 111.27 -40.48 110.54 -40.2 109.79 C-38.98 106.96 -37.56 104.85 -35.72 102.4 C-31.92 97.08 -29.15 91.55 -26.44 85.62 C-25.48 83.57 -24.53 81.52 -23.57 79.47 C-23.13 78.51 -22.68 77.55 -22.22 76.55 C-20.85 73.68 -19.31 70.91 -17.75 68.12 C-7.56 47.96 -3.86 22.18 0 0 Z \",fill:\"#322437\",transform:\"translate(848,420)\"})),_path285||(_path285=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.91 1.46 3.38 3.86 4.73 6.69 C6.1 9.19 7.69 11.24 9.5 13.44 C12.93 17.7 15 21.94 17 27 C19.7 33.45 19.7 33.45 23.25 39.44 C25 42 25 42 25 44 C25.66 44 26.32 44 27 44 C28.3 45.72 28.3 45.72 29.75 48.06 C34.56 55.52 40.3 62.07 47.25 67.62 C50 70 50 70 51 73 C52.72 74.82 52.72 74.82 54.81 76.56 C55.5 77.16 56.19 77.76 56.89 78.38 C58.87 79.9 60.77 80.91 63 82 C63.83 82.74 64.65 83.49 65.5 84.25 C69.26 87.5 73.63 89.45 78.1 91.57 C85.76 95.34 85.76 95.34 86.81 98.19 C86.87 98.79 86.94 99.38 87 100 C87.66 100 88.32 100 89 100 C89.35 100.9 89.7 101.8 90.06 102.73 C92.39 106.66 95.07 108.27 99 110.31 C99.63 110.66 100.26 111 100.91 111.36 C103.57 112.81 106.12 114.04 109 115 C109.66 115.66 110.32 116.32 111 117 C111.99 116.67 112.98 116.34 114 116 C123.28 119.75 129.76 124.89 134 134 C134.66 134.33 135.32 134.66 136 135 C135.34 133.02 134.68 131.04 134 129 C136.54 131.47 138.91 133.88 141.06 136.69 C143.01 139.02 144.3 139.78 147 141 C148 142 149 143 150 144 C150.99 144.33 151.98 144.66 153 145 C153 145.99 153 146.98 153 148 C146.31 146.51 140.17 143.16 134.12 140.03 C132.33 139.16 130.5 138.38 128.67 137.63 C125.03 136.08 121.77 134.12 118.44 132 C111.86 127.83 105.3 124.16 97.75 122.12 C96.39 121.57 96.39 121.57 95 121 C94.38 119.06 94.38 119.06 94 117 C92.02 115.25 92.02 115.25 90 114 C90.99 113.34 91.98 112.68 93 112 C89.97 109.77 88.68 108.9 84.88 109.44 C83.45 109.72 83.45 109.72 82 110 C80.51 109.01 80.51 109.01 79 108 C80.32 109.65 81.64 111.3 83 113 C80.53 111.85 78.95 110.95 77 109 C77 108.01 77 107.02 77 106 C76.34 106 75.68 106 75 106 C74.68 105.22 74.68 105.22 74.36 104.42 C70.76 96.77 65 92.36 58.53 87.22 C47.28 78.26 38.47 67.57 30 56 C28.72 54.29 27.43 52.58 26.12 50.88 C25.32 49.82 25.32 49.82 24.51 48.74 C22.93 46.76 22.93 46.76 20 45 C18.98 43.01 17.98 41.01 17 39 C16.34 38.28 15.68 37.56 15 36.81 C12.5 33.3 11.81 30 10.77 25.86 C9.32 20.5 7.92 15.38 3.31 12.06 C0.47 9.53 0.55 8.45 0.19 4.75 C0.1 3.17 0.03 1.58 0 0 Z \",fill:\"#301243\",transform:\"translate(870,575)\"})),_path286||(_path286=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.34 3.22 -4.86 5.81 -7.88 8.38 C-13.49 13.19 -19.21 18.37 -20.5 25.94 C-19.79 30.3 -17.46 31.44 -14 34 C-11.21 38.19 -11.89 41.36 -12.19 46.25 C-12.22 47.08 -12.25 47.92 -12.28 48.78 C-12.58 54.23 -13.74 58.06 -16 63 C-16.39 67.89 -14.92 72.1 -12 76 C-11.26 76.68 -10.51 77.36 -9.75 78.06 C-8.88 79.02 -8.88 79.02 -8 80 C-8.39 82.12 -8.39 82.12 -9 84 C-13.04 84.29 -16.97 84.44 -21 84 C-22.71 82.38 -24.37 80.71 -26 79 C-29.05 78.27 -32.04 77.88 -35.16 77.55 C-38.3 76.94 -39.8 76.31 -42 74 C-43.09 69.4 -42.64 64.51 -40.44 60.31 C-39.18 58.34 -38.06 57.05 -36.21 55.61 C-33.45 53.45 -31.33 51.71 -30.64 48.13 C-30.35 45.15 -30.25 42.21 -30.26 39.22 C-30.27 34.3 -29.43 31.4 -27 27 C-26.46 25.01 -25.98 23.01 -25.56 21 C-23.63 12.96 -19.84 7.61 -13 3 C-4.26 -1.42 -4.26 -1.42 0 0 Z \",fill:\"#816786\",transform:\"translate(594,176)\"})),_path287||(_path287=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 0.38 1.05 0.38 2.12 0.77 C5.82 2.08 9.53 3.28 13.28 4.41 C30.62 9.64 47.13 15.16 63.23 23.52 C65.36 24.62 67.51 25.69 69.66 26.76 C70.38 27.12 71.1 27.47 71.85 27.84 C73.22 28.52 74.59 29.2 75.96 29.87 C85.86 34.8 85.86 34.8 87.65 38.14 C88.28 40.58 88.28 40.58 87.28 42.58 C86.62 42.58 85.96 42.58 85.28 42.58 C84.72 42.02 84.17 41.46 83.59 40.89 C76.6 33.91 67.42 28.49 58.04 25.58 C53.52 23.94 49.47 21.47 45.32 19.06 C42.22 17.55 39.67 17.05 36.28 16.58 C35.54 16.1 34.79 15.63 34.03 15.14 C30.02 12.86 25.79 12.32 21.28 11.58 C22.13 12.11 22.97 12.64 23.85 13.19 C36.59 21.26 48.74 29.83 60.28 39.58 C60.98 40.15 61.68 40.73 62.41 41.33 C65.48 43.89 67.95 46.3 70.28 49.58 C71.94 51.24 73.61 52.91 75.28 54.58 C77.08 56.5 78.87 58.44 80.65 60.39 C81.13 60.91 81.61 61.44 82.11 61.98 C87.96 68.4 93.64 74.97 99.28 81.58 C100.27 79.6 100.27 79.6 101.28 77.58 C102.27 77.58 103.26 77.58 104.28 77.58 C104.74 78.86 105.2 80.16 105.65 81.45 C105.91 82.17 106.16 82.89 106.43 83.63 C108.93 92.3 109.93 101.19 110.9 110.14 C111.1 111.89 111.1 111.89 111.31 113.68 C112.72 126.41 112.72 126.41 112.28 132.58 C110.76 134.32 110.76 134.32 109.28 135.58 C106.16 131.21 104.01 126.95 102.09 121.95 C101.83 121.3 101.57 120.64 101.3 119.97 C98.41 112.59 97.8 106.84 98.9 98.95 C99.51 93.75 98.4 91.09 95.28 86.89 C93.33 84.58 93.33 84.58 91.28 82.58 C90.36 81.26 89.47 79.92 88.59 78.58 C81.72 68.19 74.96 58.48 65.4 50.38 C62.26 47.71 59.22 44.94 56.16 42.18 C54.36 40.52 54.36 40.52 52.28 39.58 C52.28 38.92 52.28 38.26 52.28 37.58 C51.44 37.19 51.44 37.19 50.59 36.8 C47.03 34.92 43.88 32.49 40.62 30.13 C38.28 28.43 38.28 28.43 35.28 27.58 C35.28 26.92 35.28 26.26 35.28 25.58 C33.3 24.92 31.32 24.26 29.28 23.58 C29.28 22.92 29.28 22.26 29.28 21.58 C28.77 21.34 28.26 21.1 27.73 20.85 C23.71 18.76 19.88 16.33 16.03 13.94 C11.89 11.42 7.77 9.38 3.28 7.58 C3.28 6.92 3.28 6.26 3.28 5.58 C1.82 5.17 1.82 5.17 0.34 4.76 C-0.67 4.37 -1.68 3.98 -2.72 3.58 C-3.05 2.59 -3.38 1.6 -3.72 0.58 C-1.72 -0.42 -1.72 -0.42 0 0 Z \",fill:\"#291236\",transform:\"translate(1112.722412109375,651.424560546875)\"})),_path288||(_path288=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.81 2.41 -1.62 2.83 -2.46 3.25 C-15.73 9.82 -15.73 9.82 -26 20 C-26.31 22.49 -26.31 22.49 -25 25 C-21.92 27.36 -18.47 29.17 -15.1 31.07 C-13.44 32.19 -13.44 32.19 -11 35 C-10.88 37.69 -11.17 40.05 -11.67 42.7 C-12.2 45.15 -12.2 45.15 -11 48 C-8.77 49.15 -6.48 49.97 -4.13 50.84 C-1.61 52.21 -1.01 53.36 0 56 C-1.09 55.96 -2.19 55.92 -3.31 55.88 C-6.77 55.86 -9.92 56.31 -13.31 57 C-18.79 58.06 -24.45 58.87 -30 58 C-33.85 55.32 -34.56 50.86 -35.94 46.59 C-37.01 43.97 -37.75 42.69 -40 41 C-42.03 40.22 -42.03 40.22 -44.19 39.81 C-45.45 39.54 -46.7 39.28 -48 39 C-48 36.69 -48 34.38 -48 32 C-49.65 31.67 -51.3 31.34 -53 31 C-53.99 27.41 -54.32 23.92 -54.62 20.22 C-55.03 17.83 -55.9 16.14 -57 14 C-57.12 11.25 -57.12 11.25 -57 9 C-56.75 9.56 -56.51 10.11 -56.25 10.69 C-53.54 15.74 -53.54 15.74 -48.9 18.8 C-44.69 19.09 -41.32 17.82 -37.38 16.44 C-36.17 16.02 -36.17 16.02 -34.95 15.6 C-28.57 13.35 -22.76 10.55 -17 7 C-15.17 5.9 -13.33 4.79 -11.5 3.69 C-10.71 3.2 -9.91 2.71 -9.09 2.2 C-5.82 0.33 -3.82 0 0 0 Z \",fill:\"#0B133D\",transform:\"translate(1121,850)\"})),_path289||(_path289=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C3.66 2.33 4.32 2.66 5 3 C1.87 11.51 1.87 11.51 -1.75 13.56 C-2.49 13.71 -3.24 13.85 -4 14 C-3.5 15.98 -3.5 15.98 -3 18 C-8.6 20.93 -8.6 20.93 -11.06 21.38 C-13.32 21.94 -13.32 21.94 -15.5 24.5 C-18 27 -18 27 -20.05 27.36 C-21.02 27.68 -21.02 27.68 -22 28 C-23.11 30.14 -23.11 30.14 -23.69 32.75 C-23.92 33.61 -24.15 34.47 -24.39 35.36 C-25.58 40.48 -26.39 45.6 -27.06 50.81 C-27.15 51.51 -27.24 52.2 -27.34 52.91 C-27.56 54.61 -27.78 56.3 -28 58 C-32.82 58.59 -36.79 58.74 -40.81 55.75 C-45.08 51.56 -47.15 45.85 -48 40 C-47.12 36.41 -46.06 34.08 -44 31 C-43.72 29.05 -43.72 29.05 -43.81 27 C-43.82 26.32 -43.83 25.64 -43.83 24.94 C-43.94 22.78 -43.94 22.78 -45 20 C-45.39 16.94 -45.5 14.05 -45 11 C-42.31 8.01 -39.94 6.61 -36 6 C-34.12 6.74 -32.24 7.49 -30.36 8.25 C-25.86 9.68 -21.19 9.58 -16.5 9.69 C-15.49 9.72 -14.47 9.76 -13.43 9.79 C-10.95 9.87 -8.48 9.94 -6 10 C-5.6 9.28 -5.2 8.56 -4.79 7.81 C-4.26 6.88 -3.73 5.96 -3.19 5 C-2.4 3.61 -2.4 3.61 -1.61 2.19 C-1.08 1.47 -0.55 0.74 0 0 Z \",fill:\"#6B4D71\",transform:\"translate(596,255)\"})),_path290||(_path290=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.83 1.66 3.1 3.16 4.36 5.3 C6.03 8.05 7.86 10.49 9.88 13 C10.57 13.88 11.27 14.76 12 15.66 C14.01 18.16 14.01 18.16 16.94 20.38 C19.85 24.08 19.65 27.44 19.76 32.06 C20.29 38.56 23.91 44.07 28 49 C30.83 51.33 33.82 53.19 37 55 C37.63 55.37 38.27 55.73 38.92 56.11 C41.64 57.67 44.37 59.2 47.12 60.69 C51.48 64.19 54.26 68.46 55.41 73.99 C55.52 76.4 55.31 78.6 55 81 C54.92 81.65 54.83 82.29 54.75 82.96 C54.44 85.21 54.1 87.45 53.75 89.69 C53.59 90.78 53.59 90.78 53.42 91.88 C52.55 96.83 51.04 100.01 48 104 C47.01 103.5 47.01 103.5 46 103 C46.22 102.23 46.43 101.45 46.66 100.66 C49.91 88.82 49.91 88.82 46.41 77.34 C45.94 76.57 45.48 75.8 45 75 C44.37 73.95 43.74 72.9 43.09 71.82 C40.41 67.39 37.68 63 34.75 58.73 C33 56 33 56 33 54 C32.17 54.22 31.33 54.43 30.47 54.66 C20.15 57.21 20.15 57.21 14.88 57 C11.17 56.62 11.17 56.62 9.26 58.25 C7.61 60.18 7.61 60.18 8 64 C12.29 64 16.58 64 21 64 C13.91 67.55 7.99 70.42 0 71 C-1.61 64.39 0.02 59.39 2 53 C4.55 43.49 6.73 34.6 2.56 25.38 C-1.12 17.06 -1.73 8.89 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(576,353)\"})),_path291||(_path291=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.79 0.28 3.82 0.8 5.75 2.88 C7 5 7 5 7 8 C7.35 8.62 7.7 9.24 8.06 9.88 C9.28 12.64 8.83 14.14 8 17 C7.67 17.66 7.34 18.32 7 19 C6.34 19 5.68 19 5 19 C4.69 19.78 4.38 20.57 4.06 21.38 C3 24 3 24 2 26 C2.06 27.11 2.12 28.23 2.19 29.38 C1.96 33.77 1.02 34.07 -2 37 C-3.54 42.56 -2.63 45.05 0 50 C0.51 53.65 0.51 55.25 -1.56 58.31 C-4.81 60.56 -7.05 60.93 -11 61 C-17.17 59.16 -21.24 54.02 -25 49 C-25 48.34 -25 47.68 -25 47 C-25.66 47 -26.32 47 -27 47 C-25.79 36.11 -24.53 25.44 -17 17 C-13.41 11.97 -13.41 11.97 -11.5 6.19 C-11 4 -11 4 -8.75 2.19 C-5.88 0.95 -4.08 0.83 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(1038,827)\"})),_path292||(_path292=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.23 0.15 1.23 0.15 2.48 0.31 C3.42 0.43 3.42 0.43 4.38 0.56 C6.13 5.05 6.75 8.74 6.38 13.56 C5.71 14.22 5.06 14.88 4.38 15.56 C4.1 17.87 3.92 20.18 3.81 22.5 C3.47 29.28 3.47 29.28 2.38 32.56 C1.97 39.56 2.07 45.89 4.38 52.56 C4.63 54.12 4.88 55.69 5.12 57.25 C5.91 61.05 6.18 61.41 9.5 63.94 C10.45 64.47 11.4 65.01 12.38 65.56 C12.38 66.55 12.38 67.54 12.38 68.56 C8.41 68.27 5.93 67.38 2.75 65.12 C-1.59 62.21 -5.76 61.62 -10.89 61.02 C-13.57 60.57 -15.35 60.02 -17.62 58.56 C-22 51.59 -22.12 43.58 -21.62 35.56 C-21.29 34.9 -20.97 34.24 -20.62 33.56 C-19.97 33.56 -19.31 33.56 -18.62 33.56 C-18.35 32.44 -18.08 31.32 -17.8 30.16 C-16.6 25.37 -15.21 20.65 -13.75 15.94 C-13.51 15.12 -13.26 14.3 -13.01 13.45 C-11.49 8.54 -9.8 4.63 -6.62 0.56 C-4.1 -0.7 -2.77 -0.36 0 0 Z \",fill:\"#280F3B\",transform:\"translate(254.625,817.4375)\"})),_path293||(_path293=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89 0.02 1.78 0.04 2.7 0.07 C8.7 0.66 11.26 2.89 15.12 7.5 C19 12.6 19 12.6 19 15 C19.62 15.08 20.24 15.17 20.88 15.25 C23 16 23 16 23.94 17.75 C24.29 18.49 24.64 19.24 25 20 C26.63 21.71 28.29 23.38 30 25 C31 26 31 26 31.11 28.13 C31.11 29.05 31.1 29.97 31.1 30.91 C31.09 31.9 31.09 32.89 31.09 33.91 C31.08 35.47 31.08 35.47 31.06 37.06 C31.06 38.11 31.05 39.15 31.05 40.23 C31.04 42.82 31.02 45.41 31 48 C27.53 49.98 27.53 49.98 24 52 C23.18 50.15 22.37 48.3 21.56 46.44 C21.11 45.4 20.66 44.37 20.19 43.31 C19 40 19 40 18.66 36.48 C17.84 32.17 15.86 29.9 12.88 26.88 C12.38 26.35 11.89 25.83 11.38 25.3 C7.86 21.66 4.19 18.79 0 16 C0 15.34 0 14.68 0 14 C-5.4 12.65 -10.67 11.83 -15.75 14.38 C-21.94 21.6 -23.7 31.71 -24 41 C-23.52 43.06 -23.52 43.06 -22.62 44.81 C-21.33 47.75 -20.79 50.06 -20.79 53.26 C-20.79 54.04 -20.79 54.81 -20.78 55.61 C-20.83 59.08 -20.89 62.54 -21 66 C-21.99 66.5 -21.99 66.5 -23 67 C-23 66.34 -23 65.68 -23 65 C-23.66 65 -24.32 65 -25 65 C-25.18 64.25 -25.36 63.5 -25.55 62.73 C-26.79 57.69 -28.06 52.73 -29.69 47.81 C-32.82 37.46 -30.57 26.49 -26.47 16.66 C-20.03 5 -13.46 -0.67 0 0 Z \",fill:\"#806685\",transform:\"translate(892,296)\"})),_path294||(_path294=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.58 3.61 9.34 9.07 13.36 14.27 C14.95 16.46 14.95 16.46 17.12 17.38 C17.46 16.72 17.78 16.05 18.12 15.38 C18.46 16.03 18.78 16.7 19.12 17.38 C19.66 17.15 20.2 16.92 20.75 16.69 C24.31 16.22 26.1 17.53 29.12 19.38 C30.83 21 32.5 22.67 34.12 24.38 C35.14 25.14 36.15 25.9 37.19 26.69 C39.86 29.13 40.56 29.98 41.88 33.08 C44.14 37.78 47.29 41.08 50.94 44.75 C64.42 58.73 64.42 58.73 65.54 64.52 C65.95 66.55 65.95 66.55 67.98 67.46 C68.69 67.76 69.4 68.06 70.12 68.38 C71.24 69.23 72.32 70.13 73.38 71.06 C73.97 71.59 74.57 72.11 75.18 72.65 C75.82 73.22 76.46 73.79 77.12 74.38 C78.21 75.31 78.21 75.31 79.32 76.25 C80.4 77.18 80.4 77.18 81.5 78.12 C82.17 78.7 82.84 79.27 83.52 79.86 C85.12 81.38 85.12 81.38 86.12 83.38 C84.81 83.38 83.48 83.38 82.12 83.38 C81.79 84.03 81.47 84.69 81.12 85.38 C72.12 82.11 65.41 76.42 58.12 70.38 C57.37 69.76 56.62 69.14 55.85 68.5 C52.42 65.62 49.28 62.54 46.12 59.38 C45.03 58.3 43.94 57.22 42.85 56.15 C39.59 52.94 36.34 49.73 33.1 46.51 C31.7 45.13 30.3 43.75 28.89 42.37 C26.86 40.37 24.83 38.36 22.8 36.35 C21.87 35.43 21.87 35.43 20.91 34.5 C17.43 31.02 15.21 27.9 13.12 23.38 C12.47 23.04 11.8 22.72 11.12 22.38 C10.55 21.28 9.97 20.19 9.38 19.06 C7.33 15.29 4.78 13.62 1.12 11.38 C1.12 10.72 1.12 10.05 1.12 9.38 C0.47 9.04 -0.2 8.72 -0.88 8.38 C-0.54 7.72 -0.22 7.05 0.12 6.38 C-0.51 6.13 -1.15 5.88 -1.81 5.62 C-3.88 4.38 -3.88 4.38 -4.62 2.25 C-4.71 1.63 -4.79 1.01 -4.88 0.38 C-1.88 -0.62 -1.88 -0.62 0 0 Z \",fill:\"#311244\",transform:\"translate(940.875,514.625)\"})),_path295||(_path295=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.03 2.38 6.62 5.16 9 10 C9 10.66 9 11.32 9 12 C9.73 12.14 10.46 12.27 11.22 12.41 C14.54 13.03 17.86 13.67 21.19 14.31 C22.91 14.63 22.91 14.63 24.67 14.96 C26.34 15.28 26.34 15.28 28.04 15.61 C29.57 15.9 29.57 15.9 31.14 16.2 C35.13 17.31 38.05 18.84 40.69 22.06 C42.23 25.52 42.95 28.8 43.57 32.53 C43.98 35.18 43.98 35.18 45.06 38.38 C44.94 45.33 40.72 51.3 35.88 56.11 C31.36 59.5 27.41 60.81 21.77 60.48 C16.35 59.55 11.18 57.82 6 56 C3.76 58.74 3.76 58.74 4.06 61.44 C5.53 65.44 8.5 67.01 11.97 69.3 C17.24 72.95 19.54 76.07 22 82 C21.01 82.99 21.01 82.99 20 84 C19.4 82.82 18.8 81.65 18.19 80.44 C15.22 75.61 11.27 73.31 6.43 70.54 C4 69 4 69 2 66 C1.45 62.61 1.47 59.39 2 56 C4.34 52.79 6.01 51.39 9.69 49.94 C12.11 49.22 12.11 49.22 13.13 47.2 C14.03 44.92 14.27 43.29 14.31 40.85 C14.33 40.07 14.36 39.29 14.38 38.49 C14.42 36.88 14.45 35.26 14.48 33.64 C14.64 28.94 15.05 25.89 18 22 C18.72 22.14 19.44 22.29 20.19 22.44 C21.12 22.62 22.04 22.81 23 23 C24.67 23.33 26.33 23.67 28 24 C28 22.68 28 21.36 28 20 C27.05 19.82 26.09 19.64 25.11 19.45 C23.86 19.2 22.6 18.95 21.31 18.69 C20.07 18.44 18.83 18.2 17.55 17.95 C12.31 16.55 8.9 14.61 6 10 C5.51 8.97 5.01 7.94 4.5 6.88 C3.17 3.77 3.17 3.77 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#816786\",transform:\"translate(1200,1049)\"})),_path296||(_path296=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.94 0.9 2.88 1.79 2.82 2.72 C2.52 11.02 3.37 17.72 6.22 25.54 C7.66 29.52 8.26 32.77 8 37 C8.99 37.33 9.98 37.66 11 38 C11.33 32.72 11.66 27.44 12 22 C12.33 22.66 12.66 23.32 13 24 C13.72 23.92 14.44 23.83 15.19 23.75 C18 24 18 24 20.56 26.06 C21.37 26.7 22.17 27.34 23 28 C25.13 27.68 25.13 27.68 27 27 C27.29 27.59 27.58 28.18 27.88 28.79 C30.67 34.17 33.25 37.31 38 41 C39.38 43.31 39.38 43.31 40 45 C36.85 44.3 33.98 43.22 31 42 C30.01 41.67 29.02 41.34 28 41 C27.63 43.19 27.28 45.37 26.94 47.56 C26.74 48.78 26.54 50 26.34 51.25 C25.84 56.71 26.01 60.59 29.19 65.12 C30.08 66.55 30.08 66.55 31 68 C30.25 70.88 30.25 70.88 29 73 C21.17 74.17 21.17 74.17 17 73 C10.67 72.5 8.95 72.96 4 77 C0.81 77.06 0.81 77.06 -2 76 C-3.56 73.75 -3.56 73.75 -4 71 C-3.19 68.44 -3.19 68.44 -1 66 C0.46 65.3 1.94 64.66 3.44 64.06 C7.9 62.26 9.84 60.42 12 56 C12.78 53.27 12.78 53.27 13 51 C11.68 50.67 10.36 50.34 9 50 C8.83 50.64 8.66 51.28 8.48 51.93 C8.24 52.76 8 53.59 7.75 54.44 C7.52 55.26 7.29 56.08 7.05 56.93 C6 59 6 59 4.08 59.91 C2 60 2 60 -1 58 C-0.73 57.34 -0.46 56.68 -0.19 56 C0.2 55.01 0.6 54.02 1 53 C1.58 51.89 2.15 50.77 2.75 49.62 C5.84 41.33 2.34 31.31 0.31 23.06 C-1.48 15.24 -0.85 7.9 0 0 Z \",fill:\"#593960\",transform:\"translate(859,324)\"})),_path297||(_path297=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.99 2.33 1.98 2.66 3 3 C-2.94 2.67 -8.88 2.34 -15 2 C-15.33 3.65 -15.66 5.3 -16 7 C-14.95 7.29 -13.9 7.58 -12.81 7.88 C-8.13 9.81 -6.82 13.48 -4.85 17.92 C-4.57 18.61 -4.29 19.29 -4 20 C-0.34 19.39 2.68 18.31 6.06 16.81 C13.24 14.15 19.39 15.23 26.43 17.93 C29.81 19.52 32.59 21.1 35 24 C35.69 26.19 35.69 26.19 36 28 C34.42 28.03 32.83 28.05 31.25 28.06 C29.93 28.08 29.93 28.08 28.58 28.1 C25.56 28.02 22.62 27.79 19.61 27.51 C12.75 26.92 5.91 26.78 -0.97 26.76 C-3.06 26.75 -5.15 26.72 -7.24 26.69 C-14.45 26.63 -20.83 27.15 -27.72 29.33 C-30.59 30.17 -33.2 30.3 -36.19 30.19 C-37.57 30.15 -37.57 30.15 -38.98 30.11 C-39.65 30.07 -40.31 30.04 -41 30 C-41 29.34 -41 28.68 -41 28 C-41.99 28 -42.98 28 -44 28 C-46.91 21.2 -48.66 16.31 -47 9 C-46.67 9.66 -46.34 10.32 -46 11 C-45.34 11 -44.68 11 -44 11 C-43.71 10.36 -43.42 9.72 -43.12 9.06 C-42 7 -42 7 -40 6 C-38.67 6.71 -38.67 6.71 -37.31 7.44 C-33.47 9.25 -31.2 9.62 -27 9 C-24.53 6.64 -24.53 6.64 -23 4 C-23.66 4 -24.32 4 -25 4 C-25 3.34 -25 2.68 -25 2 C-16.16 -2.62 -9.55 -2.68 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(590,485)\"})),_path298||(_path298=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7.33 0.66 7.66 1.32 8 2 C9.92 2.54 9.92 2.54 12.19 2.88 C16.99 3.83 20.48 5.48 24 9 C25.37 22.44 20.99 31.26 13 41.57 C10.33 45.03 8.33 48.08 6.88 52.25 C5.88 54.82 5.38 55.76 3.02 57.24 C-1.94 59.12 -5.88 59.2 -11 58 C-11 55.03 -11 52.06 -11 49 C-11.99 48.67 -12.98 48.34 -14 48 C-13.05 41.53 -10.38 37.3 -6 32.56 C-2.57 28.83 -0.65 25.76 1 21 C1.33 20.34 1.66 19.68 2 19 C2.65 13.41 0.92 10.57 -2 6 C-1.34 6 -0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#7F709E\",transform:\"translate(766,468)\"})),_path299||(_path299=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11 0.56 1.11 0.56 2.25 1.12 C1.89 3.91 1.43 4.96 -0.68 6.88 C-1.46 7.48 -2.25 8.07 -3.06 8.69 C-8.36 13.27 -10.05 17.43 -11.75 24.12 C-11.93 24.78 -12.11 25.44 -12.29 26.12 C-14.9 35.8 -15.99 44.56 -15.7 54.56 C-15.76 58.75 -16.62 62.1 -18.02 66.02 C-19.35 69.86 -19.63 73.88 -20.03 77.9 C-20.89 81.76 -22.59 84.71 -24.69 88 C-25.23 88.89 -25.23 88.89 -25.78 89.8 C-26.71 91.28 -27.72 92.71 -28.75 94.12 C-29.41 94.12 -30.07 94.12 -30.75 94.12 C-32.4 97.75 -34.05 101.38 -35.75 105.12 C-36.41 103.81 -37.07 102.49 -37.75 101.12 C-37.12 99.78 -36.45 98.44 -35.75 97.12 C-35.98 96.57 -36.21 96.01 -36.45 95.44 C-36.94 91.66 -34.56 89.11 -32.5 86.12 C-32.09 85.51 -31.68 84.89 -31.26 84.26 C-29.59 81.75 -27.88 79.3 -26.05 76.89 C-22.6 72.21 -21.07 66.88 -20.75 61.12 C-21.63 57.63 -22.38 56.39 -25.36 54.29 C-26.4 53.78 -27.43 53.27 -28.5 52.75 C-29.53 52.23 -30.55 51.7 -31.61 51.16 C-35.19 49.98 -37.15 50.1 -40.75 51.12 C-42.85 52.98 -42.85 52.98 -44.75 55.12 C-46.39 56.17 -48.05 57.18 -49.75 58.12 C-47.71 50.7 -46.23 46.56 -40.75 41.12 C-32.82 32.02 -26.35 22.47 -20.55 11.91 C-17.26 5.98 -17.26 5.98 -14.75 4.12 C-12.08 3.46 -9.51 3.35 -6.75 3.12 C-6.75 2.47 -6.75 1.8 -6.75 1.12 C-4.02 -0.69 -3.21 -1.02 0 0 Z \",fill:\"#39154B\",transform:\"translate(595.75,718.875)\"})),_path300||(_path300=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.67 0.04 3.83 0.06 6.12 1.5 C7.12 3.25 7.12 3.25 7.12 7.25 C6.47 7.25 5.8 7.25 5.12 7.25 C4 10.61 4.36 12.83 5.12 16.25 C5.12 17.57 5.12 18.89 5.12 20.25 C7.76 20.91 10.4 21.57 13.12 22.25 C14.1 28.58 15.06 35.3 12.12 41.25 C9.12 42.56 9.12 42.56 6.12 43.25 C5.82 43.89 5.51 44.53 5.19 45.19 C4.12 47.25 4.12 47.25 0.62 48.69 C-2.98 49.85 -2.98 49.85 -3.99 52.53 C-4.29 53.43 -4.58 54.33 -4.88 55.25 C-5.14 56.07 -5.41 56.88 -5.68 57.72 C-6.07 59 -6.07 59 -6.46 60.31 C-6.75 61.27 -7.04 62.22 -7.34 63.21 C-7.64 64.21 -7.94 65.22 -8.25 66.25 C-8.88 68.33 -9.5 70.41 -10.13 72.49 C-10.43 73.49 -10.73 74.48 -11.04 75.51 C-12.05 78.83 -13.09 82.13 -14.12 85.44 C-15.32 89.27 -16.28 93.07 -17.12 97 C-18.39 102.35 -20.53 106.97 -22.94 111.88 C-28.53 123.27 -28.53 123.27 -27.56 135.62 C-27.01 137.17 -26.44 138.71 -25.88 140.25 C-24.6 143.89 -25.14 146.62 -25.88 150.38 C-26.9 154.44 -26.9 154.44 -25.88 158.25 C-26.37 159.24 -26.37 159.24 -26.88 160.25 C-28.94 160.88 -28.94 160.88 -30.88 161.25 C-30.37 158.22 -29.87 155.24 -29.12 152.25 C-28.6 149.17 -28.6 149.17 -30.34 146.49 C-32.07 142.83 -32.25 140.46 -32.19 136.44 C-32.18 135.3 -32.18 134.16 -32.18 132.98 C-31.51 124.72 -28.97 117.57 -25.88 109.94 C-22.23 100.64 -19.61 92.2 -20.06 82.12 C-20.17 77.29 -18.63 74.45 -16.32 70.29 C-14.45 66.36 -13.28 62.37 -12.12 58.19 C-11.91 57.44 -11.7 56.7 -11.49 55.93 C-10.25 51.33 -9.51 46.85 -9.11 42.1 C-8.88 40.25 -8.88 40.25 -7.88 38.25 C-7.22 38.25 -6.55 38.25 -5.88 38.25 C-6.09 37.19 -6.31 36.13 -6.53 35.03 C-6.81 33.6 -7.09 32.18 -7.38 30.75 C-7.52 30.05 -7.66 29.36 -7.81 28.64 C-10.33 15.69 -10.33 15.69 -6.88 10.06 C-5.12 6.93 -4.54 4.9 -4.88 1.25 C-3.88 0.25 -3.88 0.25 0 0 Z \",fill:\"#230C38\",transform:\"translate(632.875,632.75)\"})),_path301||(_path301=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.7 0.23 1.4 0.45 2.12 0.69 C2.15 2.17 2.17 3.65 2.19 5.12 C2.2 5.95 2.21 6.77 2.22 7.62 C2.12 9.69 2.12 9.69 1.12 10.69 C1.11 12.59 1.1 14.48 1.13 16.38 C1.12 31.99 -2.56 46.79 -6.88 61.69 C-7.2 61.69 -7.53 61.69 -7.88 61.69 C-7.81 61.03 -7.75 60.38 -7.69 59.7 C-7.42 56.7 -7.14 53.69 -6.88 50.69 C-6.78 49.62 -6.68 48.56 -6.59 47.46 C-6.45 45.9 -6.45 45.9 -6.31 44.31 C-6.23 43.36 -6.14 42.4 -6.06 41.41 C-5.52 35.73 -5.52 35.73 -7.88 30.69 C-11.09 29.1 -14.32 28.13 -17.88 27.69 C-20.78 29.29 -22.2 30.89 -24.31 33.38 C-26.59 35.29 -28.99 35.25 -31.88 35.69 C-32.2 36.35 -32.54 37.01 -32.88 37.69 C-34.52 37.69 -36.18 37.69 -37.88 37.69 C-38 38.21 -38.13 38.74 -38.25 39.29 C-39.02 42.26 -39.91 45.19 -40.81 48.12 C-41.15 49.24 -41.49 50.35 -41.84 51.5 C-42.74 54.29 -43.75 56.98 -44.88 59.69 C-45.2 59.69 -45.54 59.69 -45.88 59.69 C-46.17 55.29 -45.74 51.91 -44.44 47.69 C-42.69 41.85 -42.47 36.24 -42.38 30.17 C-41.79 26.09 -40.31 23.96 -37.88 20.69 C-37.18 18.5 -37.18 18.5 -36.88 16.69 C-36.55 16.36 -36.21 16.03 -35.88 15.69 C-36.54 15.03 -37.19 14.37 -37.88 13.69 C-36.56 13.36 -35.24 13.03 -33.88 12.69 C-33.88 12.03 -33.88 11.37 -33.88 10.69 C-28.58 7.31 -23.96 5.77 -17.81 4.62 C-12.16 3.55 -5.28 -0.57 0 0 Z \",fill:\"#3C194D\",transform:\"translate(516.875,203.3125)\"})),_path302||(_path302=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.25 0.58 0.5 1.15 0.75 1.75 C2.81 5.46 5.5 7.67 9 10 C8.34 11.65 7.68 13.3 7 15 C6.01 15 5.02 15 4 15 C4.28 15.52 4.55 16.04 4.84 16.57 C6.81 20.36 8.46 23.71 9 28 C9.25 27.44 9.5 26.89 9.75 26.31 C11 24 11 24 13.19 21.56 C15.33 19.15 15.33 19.15 14.61 16.34 C14.41 15.57 14.21 14.8 14 14 C14.89 13.82 15.78 13.64 16.7 13.45 C18.46 13.07 18.46 13.07 20.25 12.69 C21.99 12.32 21.99 12.32 23.77 11.95 C26.9 11.03 28.52 10.03 31 8 C33.75 7.31 33.75 7.31 36 7 C35.5 5.51 35.5 5.51 35 4 C34.34 3.67 33.68 3.34 33 3 C36.47 1.84 39.36 1.93 43 2 C43 2.66 43 3.32 43 4 C42.01 4.33 41.02 4.66 40 5 C40.64 5.25 41.28 5.5 41.94 5.75 C44 7 44 7 44.88 8.81 C45.04 11.63 44.19 13.48 43 16 C42.34 16 41.68 16 41 16 C40.81 16.63 40.61 17.25 40.41 17.9 C40.15 18.72 39.89 19.53 39.62 20.38 C39.37 21.19 39.11 22 38.85 22.84 C38 25 38 25 36 27 C34.75 30.08 35.21 32.47 35.73 35.68 C36.09 38.81 36.19 41.91 36.25 45.06 C36.28 46.23 36.3 47.4 36.33 48.6 C35.96 52.4 35.03 54.78 33 58 C30.31 58.88 30.31 58.88 28 59 C24.03 54.42 24.1 49.87 24 44 C24.19 41.6 24.46 39.25 24.84 36.88 C25.14 34.77 25.14 34.77 24 32 C24.02 32.85 24.04 33.69 24.06 34.56 C24 38.12 23.56 41.49 23 45 C19.57 46.19 17.62 45.8 14.25 44.56 C13.45 44.28 12.65 43.99 11.83 43.69 C10.92 43.35 10.92 43.35 10 43 C10.31 42.36 10.62 41.72 10.94 41.06 C12.32 37.08 12.65 33.18 13 29 C11.02 29.99 11.02 29.99 9 31 C5.48 28.78 4.36 27.12 3.31 23.12 C3.08 22.28 2.85 21.44 2.61 20.57 C2.01 18.06 1.49 15.54 1 13 C-0.32 12.67 -1.64 12.34 -3 12 C-3.27 13.09 -3.54 14.19 -3.81 15.31 C-4.93 18.79 -5.44 19.72 -8 22 C-7.9 21.3 -7.81 20.6 -7.71 19.88 C-7.6 18.97 -7.49 18.06 -7.38 17.12 C-7.2 15.77 -7.2 15.77 -7.02 14.38 C-7.02 13.6 -7.01 12.81 -7 12 C-7.66 11.34 -8.32 10.68 -9 10 C-8.01 9.01 -7.02 8.02 -6 7 C-6 7.66 -6 8.32 -6 9 C-5.01 9 -4.02 9 -3 9 C-3.25 8.44 -3.5 7.89 -3.75 7.31 C-4 5 -4 5 -2.06 2.25 C-1.38 1.51 -0.7 0.76 0 0 Z \",fill:\"#2C113E\",transform:\"translate(580,626)\"})),_path303||(_path303=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 1.62 2.31 1.62 3.31 4.62 C2.44 4.79 2.44 4.79 1.55 4.96 C-2.23 5.72 -5.37 6.46 -8.81 8.25 C-12.29 9.91 -14.88 9.85 -18.69 9.62 C-18.69 9.95 -18.69 10.28 -18.69 10.62 C-19.76 10.91 -20.83 11.2 -21.94 11.5 C-26 12.68 -26 12.68 -29.69 14.62 C-30.18 16.11 -30.18 16.11 -30.69 17.62 C-32.62 19.02 -32.62 19.02 -35.12 20.44 C-36.02 20.96 -36.91 21.48 -37.84 22.01 C-39.73 23.08 -41.63 24.15 -43.54 25.21 C-44.43 25.72 -45.33 26.23 -46.25 26.75 C-47.08 27.21 -47.9 27.66 -48.75 28.13 C-50.83 29.47 -50.83 29.47 -51.53 31.68 C-51.86 33.71 -51.86 33.71 -50.69 35.62 C-45.91 35.85 -42.09 35.96 -37.62 34.19 C-32.09 32.12 -26.42 32.07 -20.58 31.82 C-17.34 31.66 -14.21 31.36 -11 30.94 C-7.36 30.56 -4.88 30.59 -1.69 32.62 C0.19 34.5 0.19 34.5 1.31 36.62 C0.88 38.76 0.88 38.76 0.31 40.62 C-0.47 40.66 -1.26 40.7 -2.07 40.74 C-9.02 41.08 -9.02 41.08 -15.56 43.19 C-18.94 44.74 -21.02 45.14 -24.69 44.62 C-25.35 43.63 -26.01 42.65 -26.69 41.62 C-32.39 40.73 -37.77 41.57 -43.25 43.17 C-46.76 43.83 -50.25 43.86 -53.81 43.88 C-54.49 43.88 -55.18 43.89 -55.88 43.9 C-60.18 43.88 -63.69 43.2 -67.69 41.62 C-68.41 39.39 -68.41 39.39 -68.69 36.62 C-64.34 29.81 -56.71 25.5 -50.02 21.24 C-45.36 18.22 -41.95 15.17 -38.69 10.62 C-39.02 9.97 -39.35 9.3 -39.69 8.62 C-37.69 7.28 -35.69 5.95 -33.69 4.62 C-32.86 4.07 -32.04 3.51 -31.19 2.94 C-28.31 1.43 -25.91 0.91 -22.69 0.62 C-22.03 0.95 -21.37 1.28 -20.69 1.62 C-20.36 0.97 -20.03 0.3 -19.69 -0.38 C-14.01 -4.18 -6 -2.24 0 0 Z \",fill:\"#301143\",transform:\"translate(660.6875,52.375)\"})),_path304||(_path304=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.56 1.62 1.56 1.62 3 4 C2.88 7.12 2.88 7.12 2 10 C1.01 10.66 0.02 11.32 -1 12 C-1.5 14.5 -1.5 14.5 -1 17 C-0.01 17.66 0.98 18.32 2 19 C2.17 21.84 2.19 24.48 2.06 27.31 C1.86 32.44 1.78 36.25 4 41 C6.02 49.95 1.53 57.76 -2.88 65.26 C-4.84 68.31 -7.21 70.68 -9.92 73.06 C-13.31 76.22 -16 79.93 -18.82 83.58 C-21.15 86.17 -22.8 87.63 -26 89 C-28.75 89.13 -31.16 89.11 -33.88 88.88 C-34.56 88.84 -35.24 88.8 -35.94 88.77 C-43.51 88.22 -48.81 85.76 -53.88 80.12 C-54.39 79.52 -54.91 78.93 -55.44 78.31 C-55.98 77.71 -56.52 77.1 -57.08 76.47 C-58.39 74.99 -59.7 73.5 -61 72 C-59.35 69.69 -57.7 67.38 -56 65 C-50.36 67.48 -45.73 70.91 -41.94 75.75 C-40 78.07 -39.07 78.97 -36.25 80.25 C-30.25 79.79 -25.24 76.43 -20.25 73.25 C-18 72 -18 72 -14.81 71.56 C-13.88 71.38 -12.96 71.19 -12 71 C-10.73 69.2 -10.73 69.2 -10 67 C-9.46 66.32 -8.93 65.64 -8.38 64.94 C-6.71 62.99 -6.71 62.99 -7 60 C-6.19 58.21 -5.33 56.44 -4.44 54.69 C-2.88 51.33 -2.01 49.36 -1.94 45.62 C-3.49 41.79 -5.46 39.12 -8.81 36.69 C-12.99 35.37 -16.89 35.63 -21 37 C-22.32 35.35 -23.64 33.7 -25 32 C-23.54 28.59 -21.68 26.51 -18.97 23.99 C-18.18 23.23 -17.39 22.47 -16.57 21.69 C-14.91 20.12 -13.24 18.55 -11.56 16.99 C-6.94 12.53 -4.02 9.07 -2.53 2.74 C-2.36 2.17 -2.18 1.59 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#7C5B7A\",transform:\"translate(674,710)\"})),_path305||(_path305=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 1.56 2.92 2.83 3.94 4.94 C5.24 7.46 6.97 9.03 9 11 C11 14 11 14 11 17 C11.66 17 12.32 17 13 17 C16.6 21.32 19.26 26.09 21.88 31.06 C22.49 32.23 23.11 33.4 23.74 34.6 C25.14 38.37 25.18 40.19 24 44 C21.93 46.35 19.77 48.34 17.39 50.37 C15.67 52.39 15.45 53.82 15.06 56.44 C14.46 59.41 13.98 61.03 12.31 63.62 C9.69 65.18 8.03 65.44 5.04 64.79 C-8.01 59.77 -16.84 46.71 -24.54 35.66 C-29 29.45 -34.3 25.14 -41.25 21.94 C-44.81 20.28 -46.79 18.31 -49 15 C-48.16 15.43 -48.16 15.43 -47.31 15.88 C-43.06 17.95 -39.19 19.25 -34.5 19.94 C-30.46 20.64 -27.19 21.25 -24 24 C-24 24.99 -24 25.98 -24 27 C-22.37 29.18 -22.37 29.18 -20.25 31.38 C-17.94 33.87 -15.79 36.28 -13.75 39 C-11.75 41.29 -10.97 41.68 -8 42 C-5.9 41.15 -5.9 41.15 -3.94 39.75 C-3.27 39.31 -2.59 38.87 -1.9 38.42 C0.02 37.08 0.02 37.08 1.46 35.42 C3.92 33.16 6.86 32.76 10.04 31.94 C12.21 31.18 12.21 31.18 12.77 28.9 C12.85 28.27 12.92 27.65 13 27 C12.01 26.34 11.02 25.68 10 25 C9.3 22.34 9.22 19.76 9 17 C7.82 17.09 7.82 17.09 6.62 17.19 C5.76 17.13 4.89 17.06 4 17 C1.76 13.63 1.95 12 2.06 8.07 C1.97 5.15 1.08 2.69 0 0 Z \",fill:\"#401D4E\",transform:\"translate(1018,517)\"})),_path306||(_path306=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 1.49 0.5 1.49 1 3 C1.66 3 2.32 3 3 3 C4.25 10.79 4.77 16.82 0.06 23.44 C-0.49 24.19 -1.04 24.95 -1.6 25.72 C-3.05 28.09 -3.45 29.65 -3.81 32.38 C-4.73 37.92 -8.21 41.29 -11.82 45.42 C-13.63 47.56 -14.97 49.46 -16.25 51.94 C-18 55 -18 55 -20.69 57.06 C-23.25 58.85 -23.25 58.85 -23.88 61.94 C-23.99 64.85 -23.74 67.19 -23 70 C-25 68.69 -25 68.69 -27 67 C-27 66.01 -27 65.02 -27 64 C-27.33 63.18 -27.66 62.35 -28 61.5 C-29 59 -29 59 -29 56 C-32.19 53.28 -32.19 53.28 -36 52 C-36.08 53.11 -36.16 54.23 -36.25 55.38 C-36.5 56.57 -36.75 57.77 -37 59 C-38.79 60.13 -38.79 60.13 -41 61 C-41.67 61.27 -42.35 61.54 -43.04 61.82 C-53.62 65.5 -53.62 65.5 -59 65 C-60.62 63.58 -60.62 63.58 -62 62 C-64.1 60.82 -64.1 60.82 -66 60 C-66.33 61.98 -66.66 63.96 -67 66 C-67.99 66 -68.98 66 -70 66 C-70.37 59.42 -70.37 59.42 -68.62 57.44 C-68.09 56.96 -67.55 56.49 -67 56 C-66.77 55.05 -66.55 54.1 -66.31 53.12 C-64.43 48.64 -61.19 47.2 -57 45 C-55.5 46.25 -55.5 46.25 -54 48 C-54 49.32 -54 50.64 -54 52 C-53.34 52 -52.68 52 -52 52 C-51.67 52.99 -51.34 53.98 -51 55 C-49 56.21 -49 56.21 -47 57 C-46.01 55.35 -45.02 53.7 -44 52 C-42.51 52.5 -42.51 52.5 -41 53 C-41.31 51.1 -41.62 49.21 -41.94 47.31 C-42.11 46.26 -42.29 45.2 -42.46 44.11 C-42.8 42.14 -43.2 40.17 -43.68 38.23 C-43.79 37.49 -43.89 36.76 -44 36 C-42.69 34.64 -41.35 33.31 -40 32 C-39.62 30.01 -39.29 28.01 -39 26 C-37.24 22.31 -35.85 20.46 -32 19 C-27.08 23.52 -23.39 30.5 -22 37 C-22.66 37.99 -23.32 38.98 -24 40 C-23.67 40.99 -23.34 41.98 -23 43 C-22.32 42.8 -21.65 42.59 -20.95 42.38 C-20.06 42.11 -19.17 41.84 -18.25 41.56 C-17.37 41.3 -16.49 41.03 -15.58 40.75 C-13.39 40.12 -11.21 39.53 -9 39 C-7.38 33.36 -7.38 33.36 -7.31 27.56 C-6.95 23.43 -6.23 22.92 -3.5 20 C1.08 14.71 0.56 9.57 0.25 2.96 C0.16 1.99 0.08 1.01 0 0 Z \",fill:\"#2C113E\",transform:\"translate(937,392)\"})),_path307||(_path307=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95 0.52 3.68 1.11 5.5 3.44 C5.83 5.44 5.83 5.44 5.75 7.73 C5.72 8.58 5.69 9.43 5.66 10.31 C5.61 11.22 5.56 12.13 5.5 13.06 C5.43 14.46 5.43 14.46 5.35 15.89 C4.59 26.72 2.19 37.12 -3.5 46.44 C-4.2 48.31 -4.84 50.21 -5.44 52.12 C-6.7 56.05 -8.04 59.88 -9.62 63.69 C-12.54 70.85 -13.82 77.75 -14.5 85.44 C-15.16 84.78 -15.82 84.12 -16.5 83.44 C-17.32 83.46 -18.15 83.48 -19 83.5 C-19.82 83.48 -20.65 83.46 -21.5 83.44 C-22.16 82.45 -22.82 81.46 -23.5 80.44 C-22.63 77.82 -22.63 77.82 -21.06 74.56 C-18.17 68.27 -15.82 61.88 -13.62 55.31 C-13.32 54.4 -13.01 53.49 -12.69 52.55 C-12.4 51.68 -12.11 50.82 -11.82 49.93 C-11.57 49.16 -11.31 48.39 -11.05 47.6 C-10.34 45.16 -10.34 45.16 -10.5 41.44 C-11.49 41.44 -12.48 41.44 -13.5 41.44 C-14.04 42.41 -14.59 43.39 -15.14 44.39 C-15.87 45.68 -16.59 46.96 -17.31 48.25 C-17.67 48.89 -18.03 49.54 -18.39 50.2 C-21.93 56.45 -21.93 56.45 -24.5 58.44 C-25.16 58.44 -25.82 58.44 -26.5 58.44 C-26.6 59.04 -26.71 59.63 -26.81 60.25 C-27.6 62.75 -28.47 63.81 -30.5 65.44 C-31.16 65.44 -31.82 65.44 -32.5 65.44 C-32.24 59.47 -30.16 55.81 -26.88 50.87 C-25.42 48.3 -25 46.32 -24.5 43.44 C-23.54 40.65 -22.49 37.91 -21.44 35.16 C-20.45 32.53 -20.45 32.53 -20.11 30.09 C-19.24 26.29 -17.56 23.03 -15.81 19.56 C-15.28 18.49 -15.28 18.49 -14.73 17.4 C-12.17 12.43 -9.42 8.45 -5.5 4.44 C-4.98 3.63 -4.47 2.83 -3.94 2 C-2.5 0.44 -2.5 0.44 0 0 Z \",fill:\"#45235A\",transform:\"translate(436.5,498.5625)\"})),_path308||(_path308=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C1.63 2.28 2.26 2.56 2.91 2.85 C5.56 4.31 6.14 5.68 7.44 8.38 C9.44 12.25 11.41 14.44 15 17 C15 17.66 15 18.32 15 19 C14.01 19.5 14.01 19.5 13 20 C12.27 22.31 11.6 24.65 11 27 C8.71 27.25 8.71 27.25 6 27 C4.05 25.04 2.61 22.92 1.04 20.65 C-0.99 18.64 -0.99 18.64 -4.28 19.12 C-7.99 20 -11.57 20.97 -15.19 22.19 C-16.97 22.77 -16.97 22.77 -18.79 23.36 C-22.61 25.31 -23.82 27.38 -26 31 C-29.09 32.26 -30.91 32.39 -34.06 31.26 C-37.64 29.56 -40.22 27.81 -43 25 C-43.85 24.59 -44.69 24.18 -45.56 23.75 C-48.92 21.34 -49.18 18.94 -50 15 C-49.35 14.75 -48.7 14.49 -48.02 14.23 C-39.38 11.23 -39.38 11.23 -32.12 6 C-26.17 0.4 -18.21 0.49 -10.5 0.31 C-9.49 0.28 -8.47 0.24 -7.43 0.21 C-4.95 0.13 -2.48 0.06 0 0 Z \",fill:\"#634369\",transform:\"translate(653,339)\"})),_path309||(_path309=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.33 3.76 2.33 3.76 1.64 4.54 C0.39 5.97 -0.87 7.4 -2.12 8.84 C-3.24 10.13 -4.37 11.41 -5.51 12.69 C-10.56 18.48 -11.39 23.57 -12 31 C-11.11 31.25 -10.23 31.5 -9.31 31.75 C-5.78 33.08 -3.63 34.29 -1 37 C-0.12 40.23 0.02 43.29 0.25 46.62 C0.8 51.57 2.95 55.8 5.04 60.27 C6.04 63.12 6.09 64.24 5 67 C4.08 67.07 4.08 67.07 3.13 67.14 C0.73 67.83 0.73 67.83 -0.2 70.52 C-0.5 71.61 -0.81 72.69 -1.12 73.81 C-1.44 74.87 -1.75 75.93 -2.07 77.02 C-4.57 87.19 -5.3 97.09 -5.21 107.52 C-5.19 109.72 -5.19 111.92 -5.19 114.12 C-5.82 120.55 -5.82 120.55 -4 126 C-3.62 129.6 -3.68 131.48 -5.6 134.6 C-6.95 136.24 -8.31 137.89 -9.66 139.54 C-11.3 141.91 -11.3 141.91 -10.47 144.46 C-6.31 151.64 -1.25 157.77 6.07 161.74 C9.72 164.12 12.31 167.62 15 171 C13.75 174.65 13.33 175.78 10 178 C9.8 177.13 9.8 177.13 9.59 176.24 C7.49 168.63 3.81 165.24 -2.88 161.31 C-5 160 -5 160 -6 157 C-6.66 156.53 -7.32 156.05 -8 155.56 C-10.37 153.71 -10.38 152.84 -11 150 C-12.29 148.54 -12.29 148.54 -14 147 C-19 141.46 -19 141.46 -19 139 C-17.22 137.56 -15.37 136.19 -13.5 134.88 C-11.97 133.79 -11.97 133.79 -10.41 132.68 C-9.61 132.13 -8.82 131.57 -8 131 C-8.33 130.01 -8.66 129.02 -9 128 C-13.15 130.38 -13.15 130.38 -16 134 C-16.99 133.67 -17.98 133.34 -19 133 C-17.44 129.55 -15.88 126.85 -13.44 123.94 C-9.33 118.98 -8.58 115.4 -9 109 C-9.36 107.31 -9.74 105.62 -10.12 103.94 C-11.05 99.69 -10.95 97.01 -9 93 C-8.67 92.67 -8.34 92.34 -8 92 C-7.79 90.67 -7.63 89.34 -7.5 88 C-7.42 87.2 -7.34 86.39 -7.25 85.57 C-7.17 84.72 -7.09 83.87 -7 83 C-6.81 81.31 -6.63 79.62 -6.44 77.94 C-6.29 76.64 -6.15 75.34 -6 74 C-5.34 74 -4.68 74 -4 74 C-3.96 72.72 -3.92 71.44 -3.88 70.12 C-3.85 69.41 -3.83 68.69 -3.8 67.95 C-3.82 65.76 -3.82 65.76 -6 64 C-5.48 63.63 -4.97 63.26 -4.44 62.88 C-2.72 61.05 -2.72 61.05 -3.12 58.44 C-3.41 57.3 -3.7 56.17 -4 55 C-4.25 53.85 -4.25 53.85 -4.5 52.67 C-6.15 45.96 -9.1 41.81 -14 37 C-17.65 37.53 -18.74 37.72 -21.38 40.5 C-24.63 43.6 -26.64 43.38 -31 44 C-33.79 46.46 -33.79 46.46 -36 49 C-36.66 49 -37.32 49 -38 49 C-37.75 45.67 -36.82 44.83 -34.31 42.5 C-32.16 40.79 -30.29 39.65 -27.79 38.42 C-24.86 36.38 -24.86 36.38 -24.61 33.99 C-24.63 31.54 -24.84 29.18 -25.12 26.75 C-25.2 25.91 -25.27 25.07 -25.35 24.2 C-25.54 22.13 -25.77 20.07 -26 18 C-27.98 17.01 -29.96 16.02 -32 15 C-32 14.01 -32 13.02 -32 12 C-33.32 12.33 -34.64 12.66 -36 13 C-35 11 -35 11 -32 9 C-31.01 9 -30.02 9 -29 9 C-28.67 9.66 -28.34 10.32 -28 11 C-27.1 11.43 -27.1 11.43 -26.19 11.88 C-23.37 13.33 -21.87 14.4 -20 17 C-19.67 20.03 -19.77 22.97 -20 26 C-19.01 25.67 -18.02 25.34 -17 25 C-16.05 22.93 -16.05 22.93 -15.44 20.5 C-14.75 18.03 -14.75 18.03 -14 16 C-13.34 15.67 -12.68 15.34 -12 15 C-11.34 14.34 -10.68 13.68 -10 13 C-9.16 12.34 -9.16 12.34 -8.31 11.67 C-4.31 8.64 -4.31 8.64 -2.19 4.25 C-2.09 3.14 -2.09 3.14 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(1065,773)\"})),_path310||(_path310=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67 -0.04 3.33 -0.04 5 0 C5.5 0.5 5.5 0.5 6 1 C9.55 1.24 13.1 1.4 16.65 1.52 C23.74 1.84 23.74 1.84 27 4 C27 4.66 27 5.32 27 6 C22.38 6 17.76 6 13 6 C15.17 6.93 15.17 6.93 17.38 7.88 C20.15 9.07 21.85 9.85 24 12 C19.67 13.56 15.65 14.92 11.06 15.5 C10.05 15.67 9.04 15.83 8 16 C7.34 16.99 6.68 17.98 6 19 C6.5 19.87 6.5 19.87 7 20.75 C8 23 8 23 8 27 C5.75 28.81 5.75 28.81 3 30 C0.62 29.73 -0.86 29.07 -3 28 C-2.12 21.25 -2.12 21.25 -1 19 C-3.44 19.19 -3.44 19.19 -6 20 C-8 22.47 -8.04 24.37 -8.38 27.56 C-8.32 30.95 -8.32 30.95 -6.5 32.88 C-4.09 33.96 -2.41 34.28 0.19 34.56 C1.45 34.71 2.7 34.85 4 35 C4.33 35.66 4.66 36.32 5 37 C4.18 37.34 3.36 37.68 2.52 38.02 C1.44 38.47 0.36 38.92 -0.75 39.38 C-1.82 39.82 -2.88 40.26 -3.98 40.71 C-5.75 41.47 -7.5 42.26 -9.21 43.14 C-11.92 44.44 -14.03 44.3 -17 44 C-19.88 42.81 -19.88 42.81 -22 41 C-22.31 38.31 -22.31 38.31 -22 36 C-24.64 36.33 -27.28 36.66 -30 37 C-30 36.01 -30 35.02 -30 34 C-29.01 34.33 -28.02 34.66 -27 35 C-26.67 34.34 -26.34 33.68 -26 33 C-24.69 31.65 -23.36 30.31 -22 29 C-22.64 28.95 -23.28 28.9 -23.93 28.85 C-24.76 28.78 -25.59 28.7 -26.44 28.62 C-27.26 28.56 -28.08 28.49 -28.93 28.41 C-29.62 28.28 -30.3 28.14 -31 28 C-31.33 27.34 -31.66 26.68 -32 26 C-30.68 26 -29.36 26 -28 26 C-27.58 23.13 -27.58 23.13 -28 20 C-30.41 18.14 -30.41 18.14 -33 17 C-33 16.67 -33 16.34 -33 16 C-27.55 15.5 -27.55 15.5 -22 15 C-22.33 13.02 -22.66 11.04 -23 9 C-21.91 8.94 -20.81 8.88 -19.69 8.81 C-18.47 8.54 -17.25 8.28 -16 8 C-14.99 6.34 -13.99 4.67 -13 3 C-10.12 2.44 -10.12 2.44 -7 3 C-4.25 5 -4.25 5 -2 7 C-1.34 7 -0.68 7 0 7 C-0.5 5.51 -0.5 5.51 -1 4 C-0.56 1.81 -0.56 1.81 0 0 Z \",fill:\"#000002\",transform:\"translate(628,297)\"})),_path311||(_path311=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.76 7.35 7.76 7.35 8.36 11.45 C7.91 14.65 6.88 15.72 4.62 18 C0.82 22.11 -0.8 24.78 -1.31 30.44 C-0.73 37.13 2.4 40.55 7.01 45.02 C16.89 54.88 16.89 54.88 17.19 60.75 C16 63.99 14.69 66.99 13 70 C12.01 69.51 12.01 69.51 11 69 C11.1 68.26 11.21 67.52 11.31 66.75 C11.27 63.79 11.27 63.79 8.69 61.75 C6.07 59.88 6.07 59.88 3 59 C4.02 59.87 4.02 59.87 5.06 60.75 C5.7 61.49 6.34 62.23 7 63 C6.62 65.14 6.62 65.14 6 67 C3.94 67.08 1.88 67.14 -0.19 67.19 C-1.91 67.24 -1.91 67.24 -3.67 67.29 C-7.5 66.96 -9.06 66.47 -12 64 C-13.82 61.45 -15.29 58.77 -16.75 56 C-17.15 55.28 -17.55 54.55 -17.96 53.8 C-20.89 48.41 -22.71 44.31 -22 38 C-19.46 33.08 -16.15 28.67 -12 25 C-12 25.66 -12 26.32 -12 27 C-11.01 27.33 -10.02 27.66 -9 28 C-8.67 28.66 -8.34 29.32 -8 30 C-5.69 26.37 -3.38 22.74 -1 19 C-2.65 19.33 -4.3 19.66 -6 20 C-7.06 15.59 -7.34 13.65 -5.19 9.56 C-4.1 8.29 -4.1 8.29 -3 7 C-2.34 7 -1.68 7 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#0B123F\",transform:\"translate(1055,990)\"})),_path312||(_path312=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 4.64 4 7.28 4 10 C6.31 10.66 8.62 11.32 11 12 C10.67 9.69 10.34 7.38 10 5 C10.99 4.67 11.98 4.34 13 4 C14.81 5.81 14.38 8.61 14.56 11.06 C14.69 12.72 14.69 12.72 14.82 14.41 C14.88 15.26 14.94 16.12 15 17 C16.32 16.67 17.64 16.34 19 16 C17.01 30.78 14.37 45.62 6.12 58.31 C2.29 64.38 1.9 69.97 3 77 C4.23 80.2 4.23 80.2 7 82 C7 83.32 7 84.64 7 86 C7.84 86.28 7.84 86.28 8.69 86.56 C11.57 88.35 12.83 90.47 14.7 93.25 C16.46 95.61 18.68 97.21 21 99 C21 99.66 21 100.32 21 101 C22.18 101.46 22.18 101.46 23.38 101.94 C26 103 26 103 28 104 C28 104.99 28 105.98 28 107 C28.99 107.5 28.99 107.5 30 108 C29.01 108.33 28.02 108.66 27 109 C25.66 108.01 24.33 107.01 23 106 C20.92 105.24 18.83 104.57 16.71 103.94 C15 103 15 103 14.26 100.9 C14.18 100.27 14.09 99.65 14 99 C13.34 99 12.68 99 12 99 C11.77 98.05 11.55 97.1 11.31 96.12 C10.31 92.81 10.31 92.81 7.38 91.62 C6.59 91.42 5.81 91.21 5 91 C5 90.34 5 89.68 5 89 C4.34 89 3.68 89 3 89 C3 88.34 3 87.68 3 87 C2.34 87 1.68 87 1 87 C0.88 86.24 0.75 85.47 0.62 84.69 C0.12 81.8 0.12 81.8 -2 79 C-2.6 76.47 -3.01 73.94 -3.44 71.38 C-3.91 68.75 -3.91 68.75 -6 66 C-8.16 53.91 -6.48 42.86 -4 31 C-3.67 29.35 -3.34 27.7 -3 26 C0.96 25.67 4.92 25.34 9 25 C9 23.68 9 22.36 9 21 C8.34 21 7.68 21 7 21 C7 20.34 7 19.68 7 19 C6.01 18.67 5.02 18.34 4 18 C4 17.34 4 16.68 4 16 C3.34 16 2.68 16 2 16 C1.73 15.05 1.46 14.1 1.19 13.12 C0.25 9.75 0.25 9.75 -3 8 C-3.38 5.56 -3.38 5.56 -3 3 C-1.5 1.19 -1.5 1.19 0 0 Z \",fill:\"#221925\",transform:\"translate(522,353)\"})),_path313||(_path313=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.52 0.33 1.04 0.65 1.57 0.99 C2.27 1.43 2.97 1.86 3.69 2.31 C4.42 2.77 5.15 3.23 5.9 3.71 C7.49 4.69 9.11 5.61 10.75 6.5 C13.68 8.46 15.23 9.91 17 13 C17.08 15.55 16.94 17.97 16.65 20.5 C17.18 24.28 19.13 25.57 22 28 C24.15 29.54 26.27 30.98 28.5 32.38 C29.11 32.76 29.72 33.15 30.34 33.55 C35.42 36.73 40.65 39.58 45.95 42.37 C50.4 44.75 54.7 47.36 59 50 C60.67 51 62.33 52 64 53 C64.49 52.01 64.49 52.01 65 51 C67.81 51.28 70.63 51.57 73.44 51.88 C74.24 51.95 75.04 52.03 75.87 52.11 C77.92 52.34 79.96 52.66 82 53 C82.33 53.66 82.66 54.32 83 55 C83.95 54.67 84.9 54.34 85.88 54 C88.83 53.55 89.81 53.88 92.34 55.57 C94.02 57.01 95.69 58.46 97.36 59.92 C101.21 62.95 105.37 64.5 110 66 C110 66.66 110 67.32 110 68 C111.65 68.66 113.3 69.32 115 70 C115 70.66 115 71.32 115 72 C115.91 72.27 116.82 72.54 117.75 72.81 C120.71 73.9 122.62 74.98 125 77 C121.22 76.34 117.78 75.28 114.19 73.94 C113.21 73.58 112.24 73.21 111.23 72.84 C110.13 72.42 110.13 72.42 109 72 C108.88 72.62 108.75 73.24 108.62 73.88 C108 76 108 76 106 78 C102.5 77.74 99.87 75.8 96.98 73.94 C94.37 72.7 91.84 72.45 89 72 C79.11 69.04 70.1 64.8 61 60 C61 59.34 61 58.68 61 58 C60.18 57.76 60.18 57.76 59.35 57.52 C54.19 55.92 49.65 53.91 45 51.17 C42.92 49.91 42.92 49.91 40.25 48.75 C37.2 46.38 35.95 43.52 34.31 40.06 C32.75 37.61 31.62 37.14 29 36 C27.44 34.94 25.9 33.85 24.38 32.75 C20.92 30.29 17.43 28.05 13.75 25.94 C9.38 23.32 6.07 21.12 3 17 C2.66 14.63 2.67 12.53 2.89 10.15 C3.01 7.84 2.78 6.17 2 4 C0.02 2.72 0.02 2.72 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#3D1D4A\",transform:\"translate(989,672)\"})),_path314||(_path314=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 1.52 6.72 3.21 10 5 C9.37 10.81 8.46 16.66 6 22 C2.66 24.66 0.97 25.07 -3.26 24.77 C-7.97 23.8 -11.71 21.76 -15.84 19.44 C-19.71 17.36 -22.61 16.26 -27 17 C-29.84 20.01 -30.74 22.98 -31.72 26.95 C-32.01 28.11 -32.3 29.27 -32.61 30.46 C-32.9 31.67 -33.2 32.88 -33.5 34.12 C-34.09 36.5 -34.69 38.88 -35.28 41.26 C-35.57 42.4 -35.85 43.54 -36.14 44.72 C-37.13 48.51 -38.27 52.23 -39.49 55.94 C-40.28 59.15 -39.72 61.81 -39 65 C-38.06 69.95 -38.01 72.43 -40 77 C-40.53 81.06 -40.01 83.25 -37.88 86.62 C-36 90 -36 90 -36.56 92.31 C-38 94 -38 94 -41 96 C-45.08 90.54 -47.77 85.59 -49.46 78.97 C-49.82 77.01 -49.82 77.01 -51 76 C-51.56 69.73 -51.65 64.35 -48 59 C-47.55 58.55 -47.1 58.11 -46.64 57.65 C-39.29 50.26 -36.64 38.21 -36.14 28.02 C-35.56 19.71 -31.65 11.99 -26 6 C-23.67 4.65 -21.71 4.17 -19.12 3.56 C-18.44 3.39 -17.76 3.23 -17.06 3.06 C-16.03 2.82 -16.03 2.82 -14.98 2.58 C-12.74 2 -12.74 2 -9.94 0.31 C-6 -1.44 -4.16 -1.11 0 0 Z \",fill:\"#7D6281\",transform:\"translate(829,455)\"})),_path315||(_path315=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.65 0.91 4.81 2.29 7.19 3.75 C8.18 4.08 9.17 4.41 10.19 4.75 C10.52 3.1 10.85 1.45 11.19 -0.25 C13.17 2.73 13.56 3.98 14.04 7.4 C14.18 8.34 14.31 9.28 14.46 10.25 C14.6 11.27 14.74 12.29 14.88 13.33 C15.03 14.38 15.18 15.43 15.33 16.5 C15.81 19.86 16.28 23.21 16.75 26.56 C17.22 29.9 17.7 33.25 18.18 36.59 C18.47 38.67 18.77 40.75 19.06 42.83 C19.71 47.48 20.38 52.12 21.19 56.75 C14.76 58.49 8.84 59 2.19 58.75 C1.69 57.26 1.69 57.26 1.19 55.75 C0.53 55.75 -0.13 55.75 -0.81 55.75 C-0.84 55.1 -0.86 54.45 -0.89 53.78 C-1 50.83 -1.13 47.88 -1.25 44.94 C-1.29 43.91 -1.33 42.89 -1.37 41.83 C-1.43 40.36 -1.43 40.36 -1.5 38.86 C-1.53 37.95 -1.57 37.04 -1.61 36.11 C-1.73 33.6 -1.73 33.6 -2.81 30.75 C-3.43 30.44 -4.05 30.13 -4.69 29.81 C-7.32 28.5 -8.36 27.3 -9.81 24.75 C-10 22 -10 22 -9.81 19.75 C-8.16 19.42 -6.51 19.09 -4.81 18.75 C-4.91 17.87 -5 16.99 -5.1 16.08 C-5.21 14.92 -5.32 13.76 -5.44 12.56 C-5.55 11.41 -5.67 10.27 -5.79 9.08 C-5.81 5.69 -5.41 3.72 -3.81 0.75 C-1.81 -0.25 -1.81 -0.25 0 0 Z \",fill:\"#241037\",transform:\"translate(923.8125,288.25)\"})),_path316||(_path316=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.69 -0.31 2.69 -0.31 5 0 C9.64 8.13 11.29 16.76 13.36 25.82 C14.87 32.21 16.31 37.54 20 43 C22 46 22 46 21.88 48.81 C22.03 52.89 23.71 54.7 26 58 C26 59.32 26 60.64 26 62 C23.03 63.32 20.06 64.64 17 66 C9.44 58.44 6.89 47.8 4.87 37.56 C3.83 34.49 2.41 33.12 0 31 C-0.66 30.34 -1.32 29.68 -2 29 C-2.65 28.88 -3.31 28.76 -3.98 28.64 C-6 28 -6 28 -7.27 26.11 C-10.55 18.24 -10.55 18.24 -10 14 C-10.66 14 -11.32 14 -12 14 C-12.33 15.32 -12.66 16.64 -13 18 C-13.33 16.02 -13.66 14.04 -14 12 C-13.38 18.44 -12.36 24.68 -11 31 C-11.99 31 -12.98 31 -14 31 C-19.94 24.67 -23.24 14.26 -23.25 5.75 C-23.17 4.51 -23.09 3.27 -23 2 C-22.67 2.99 -22.34 3.98 -22 5 C-20.68 4.67 -19.36 4.34 -18 4 C-17.01 5.65 -16.02 7.3 -15 9 C-14.67 7.02 -14.34 5.04 -14 3 C-13.01 4.32 -12.02 5.64 -11 7 C-10.34 6.01 -9.68 5.02 -9 4 C-6.03 4.5 -6.03 4.5 -3 5 C-2.61 4.17 -2.22 3.35 -1.81 2.5 C-1.21 1.67 -0.62 0.85 0 0 Z \",fill:\"#38144A\",transform:\"translate(883,552)\"})),_path317||(_path317=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.89 4.61 4.38 9.83 6 15 C5.01 15.49 5.01 15.49 4 16 C4.56 20.45 5.7 23.9 7.69 27.91 C8.22 29 8.75 30.1 9.3 31.22 C9.86 32.34 10.42 33.47 11 34.62 C12.11 36.87 13.21 39.11 14.31 41.35 C15.05 42.83 15.05 42.83 15.8 44.35 C16.82 46.59 17.52 48.6 18 51 C13.53 46.95 10.28 42.29 6.87 37.33 C4.69 34.62 3.2 34.25 -0.12 33.56 C-0.74 33.38 -1.36 33.19 -2 33 C-2.33 32.34 -2.66 31.68 -3 31 C-4.26 31 -5.53 31 -6.83 31 C-12.55 31 -18.28 31 -24 31 C-25.04 26.37 -25.52 21.71 -26 17 C-26.66 17 -27.32 17 -28 17 C-28.66 13.7 -29.32 10.4 -30 7 C-29.34 7.33 -28.68 7.66 -28 8 C-27.67 7.01 -27.34 6.02 -27 5 C-28.32 5 -29.64 5 -31 5 C-31 3.02 -31 1.04 -31 -1 C-27.8 -2.6 -25.33 -3.1 -21.81 -3 C-20.55 -3 -19.3 -3 -18 -3 C-17.34 -3.66 -16.68 -4.32 -16 -5 C-9.61 -7.07 -5.02 -3.93 0 0 Z \",fill:\"#4B295B\",transform:\"translate(633,1046)\"})),_path318||(_path318=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.44 1.25 3.44 1.25 7 3 C7.72 3.32 8.44 3.65 9.18 3.98 C9.91 4.32 10.63 4.65 11.38 5 C12.04 5.31 12.71 5.62 13.4 5.94 C15 7 15 7 16 10 C17.32 10.69 18.66 11.35 20 12 C24.19 15.17 27.47 18.62 30.87 22.61 C35.34 27.63 40.22 32.28 45 37 C46 38 47 39 48 40 C43.5 38.59 41.26 36.34 38 33 C36.74 32.08 35.47 31.19 34.19 30.31 C33.14 29.55 32.08 28.79 31 28 C31 27.34 31 26.68 31 26 C30.34 26 29.68 26 29 26 C28.44 25.36 27.89 24.72 27.31 24.06 C24.1 21.2 22.29 20.86 18 21 C15.05 22.7 12.53 24.73 10 27 C10.23 31.27 10.53 33.45 13.36 36.74 C14.34 37.59 15.31 38.44 16.31 39.31 C21.34 43.93 24.37 48.32 26 55 C26 55.66 26 56.32 26 57 C26.56 57.23 27.11 57.45 27.69 57.69 C30.7 59.39 32.63 61.47 35 64 C35.63 64.66 36.26 65.32 36.91 66 C37.56 66.7 38.21 67.4 38.88 68.12 C39.49 68.79 40.11 69.45 40.74 70.13 C41.16 70.75 41.57 71.37 42 72 C41.5 73.49 41.5 73.49 41 75 C34.76 68.86 28.67 62.68 23 56 C22.44 55.38 21.89 54.77 21.31 54.13 C17.2 49.54 17.2 49.54 16 46.38 C14.55 42.92 11.87 41.34 9 39 C7.38 36.5 7.38 36.5 6 34 C5.32 33.2 4.64 32.39 3.94 31.56 C2 29 2 29 1 25.81 C0.31 22.92 0.31 22.92 -1.8 21.95 C-2.53 21.64 -3.25 21.32 -4 21 C-4.67 20.66 -5.35 20.32 -6.04 19.96 C-11.18 17.5 -16.22 15.67 -22 16 C-23.34 16.66 -24.67 17.33 -26 18 C-29.25 17.62 -29.25 17.62 -32 17 C-32.66 15.02 -33.32 13.04 -34 11 C-30.85 6.89 -27.79 6.25 -22.93 5.39 C-21 5.18 -21 5.18 -20 4 C-17.49 3.47 -14.97 3.04 -12.45 2.6 C-1.35 -0.11 -1.35 -0.11 0 0 Z \",fill:\"#3A174A\",transform:\"translate(664,61)\"})),_path319||(_path319=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 3.32 4 4.64 4 6 C4.99 6 5.98 6 7 6 C7 6.66 7 7.32 7 8 C9.54 7.72 12.08 7.42 14.62 7.12 C15.34 7.05 16.05 6.97 16.79 6.89 C17.49 6.8 18.19 6.72 18.91 6.63 C19.55 6.56 20.19 6.49 20.85 6.41 C23.14 6.03 23.14 6.03 25.78 4.97 C29.47 3.86 32.85 3.73 36.67 3.77 C37.76 3.77 37.76 3.77 38.86 3.77 C40.38 3.77 41.91 3.78 43.43 3.79 C45.73 3.81 48.03 3.81 50.33 3.81 C57.21 3.83 64.02 3.96 70.86 4.76 C74.33 5.15 77.76 5.25 81.25 5.31 C81.92 5.34 82.59 5.37 83.27 5.4 C88.38 5.47 90.95 3.95 95 1 C97.88 1.25 97.88 1.25 100 2 C100 2.99 100 3.98 100 5 C96.07 8.93 90.23 9.11 84.9 9.23 C83.06 9.23 81.22 9.21 79.38 9.19 C78.4 9.18 77.43 9.18 76.42 9.17 C71.19 9.12 66.02 8.91 60.81 8.44 C55.23 7.97 49.78 8.04 44.19 8.31 C43.02 8.36 43.02 8.36 41.83 8.42 C37.92 8.64 34.27 9.11 30.46 10.04 C26.06 11.09 21.95 11.23 17.44 11.12 C16.71 11.12 15.99 11.11 15.25 11.1 C13.5 11.07 11.75 11.04 10 11 C6.99 17.33 6.99 17.33 8 24 C9.49 26.42 11.06 28.74 12.72 31.05 C14 33 14 33 14 35 C19.05 35.94 19.05 35.94 24 35 C28.17 34.85 31.94 35.02 36 36 C36 36.66 36 37.32 36 38 C38.64 37.67 41.28 37.34 44 37 C44 37.66 44 38.32 44 39 C31.62 39.99 31.62 39.99 19 41 C21.18 45.36 23.08 48.68 25.94 52.5 C26.64 53.45 27.35 54.41 28.07 55.39 C29.03 56.68 29.03 56.68 30 58 C32.56 61.6 34.46 64.99 36.17 69.06 C36.99 70.98 37.85 72.87 38.72 74.77 C42.09 82.34 44.48 89.32 45.56 97.56 C46.49 104.39 47.66 109.24 53 114 C53.74 114.71 53.74 114.71 54.49 115.43 C59.75 119.84 66.5 121.25 73 123 C73 123.66 73 124.32 73 125 C64.26 125.48 56.92 123.57 50 118 C42.68 110.79 39.93 103.78 38.06 93.88 C35.07 78.65 35.07 78.65 28 65 C27.36 64.03 26.73 63.07 26.07 62.07 C23.07 57.53 20.09 53.04 16.75 48.75 C14.34 45.62 12.66 42.43 11 38.86 C9.92 36.69 9.92 36.69 7.44 34.06 C2.73 28.14 1.79 22.39 2.09 14.99 C1.96 12.14 0.5 10.38 -1 8 C-1.25 4.25 -1.25 4.25 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#19121D\",transform:\"translate(542,507)\"})),_path320||(_path320=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.36 0.91 6.21 2.11 9.32 3.68 C10.33 4.18 11.35 4.68 12.39 5.2 C15.15 6.84 17.12 8.42 19.2 10.86 C19.2 11.52 19.2 12.18 19.2 12.86 C21.18 11.54 23.16 10.22 25.2 8.86 C27.33 13.13 29.04 17.09 28.88 21.94 C27.4 26.11 22.96 27.98 19.2 29.86 C18.31 30.15 17.43 30.44 16.52 30.73 C14.03 31.67 14.03 31.67 12.97 34.04 C12.56 35.31 12.56 35.31 12.13 36.61 C10.57 40.93 9.17 44.35 6.2 47.86 C3.45 48.74 3.45 48.74 1.2 48.86 C-0.83 45.82 -1.53 43.61 -2.49 40.11 C-4.27 34.13 -6.6 28.65 -9.34 23.07 C-11.14 19.4 -12.6 15.77 -13.8 11.86 C-13.14 11.86 -12.48 11.86 -11.8 11.86 C-10.32 9.94 -10.32 9.94 -8.87 7.55 C-3.99 -0.19 -3.99 -0.19 0 0 Z \",fill:\"#775979\",transform:\"translate(586.8046875,554.13671875)\"})),_path321||(_path321=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.06 1.98 7.95 4.03 11.4 6.98 C11.4 7.64 11.4 8.3 11.4 8.98 C12.04 9.06 12.68 9.15 13.34 9.23 C19.06 10.63 23.9 12.37 27.96 16.73 C30.07 21.48 29.66 25.02 29.21 30.17 C27.93 33.04 25.66 34.84 23.4 36.98 C22.74 37.97 22.08 38.96 21.4 39.98 C17.19 40.72 14.83 40.83 11.12 38.62 C8.8 36.82 6.59 34.94 4.4 32.98 C3.15 31.94 1.9 30.9 0.65 29.86 C-2.23 27.35 -4.9 24.68 -7.6 21.98 C-8.63 21.28 -8.63 21.28 -9.68 20.57 C-13.37 17.94 -15.32 16.29 -16.29 11.75 C-16.41 8.25 -16.5 5.37 -15.6 1.98 C-10.71 -1.94 -5.69 -2.23 0 0 Z \",fill:\"#4A2E63\",transform:\"translate(848.59765625,112.01953125)\"})),_path322||(_path322=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43 3.85 0.56 6.77 -0.38 10.69 C-1.34 14.89 -2.19 18.95 -2.56 23.25 C-3 27 -3 27 -5 29 C-5.28 31.53 -5.47 33.97 -5.56 36.5 C-5.88 43.76 -5.88 43.76 -7 46 C-7.55 52.12 -5.96 56.44 -3.62 61.94 C2.59 76.83 2.59 76.83 1.14 82.17 C0.66 83.16 0.18 84.16 -0.31 85.19 C-6.74 98.63 -4.32 116.46 -4.41 131.07 C-4.42 133.82 -4.46 136.57 -4.51 139.32 C-4.58 143.34 -4.6 147.34 -4.62 151.36 C-4.65 152.58 -4.68 153.8 -4.71 155.05 C-4.69 162.39 -3.65 166.89 0.81 172.8 C2 175 2 175 1.78 177.61 C1 180 1 180 -0.58 182.75 C-2.47 187.07 -2.15 190.44 -1.75 195.06 C-1.7 195.85 -1.64 196.64 -1.59 197.46 C-1.31 201.39 -0.8 205.14 0 209 C0.55 216.02 0.23 222.62 -3 229 C-4.61 230.75 -4.61 230.75 -6 232 C-6.99 231.67 -7.98 231.34 -9 231 C-9 230.34 -9 229.68 -9 229 C-9.63 228.8 -10.26 228.59 -10.91 228.38 C-13 227 -13 227 -13.91 224.24 C-14.2 222.58 -14.2 222.58 -14.5 220.88 C-15.67 215.25 -16.78 210.79 -20 206 C-23.04 204.94 -23.04 204.94 -26 205 C-26.66 204.67 -27.32 204.34 -28 204 C-25.54 202.39 -24.03 202 -21.06 201.94 C-17.33 203.23 -16.07 204.64 -13.96 207.89 C-12.6 210.87 -12.35 213.64 -12.24 216.89 C-11.97 219.29 -11.18 220.91 -10 223 C-9.01 222.01 -9.01 222.01 -8 221 C-7.34 222.32 -6.68 223.64 -6 225 C-3.74 220.47 -3.84 216.96 -4 212 C-4 207.67 -4 203.33 -4 199 C-4.99 199 -5.98 199 -7 199 C-6.67 198.01 -6.34 197.02 -6 196 C-5.63 192.91 -5.49 189.8 -5.31 186.69 C-5.25 185.85 -5.19 185 -5.13 184.13 C-4.85 179.2 -5.21 175.68 -7 171 C-7.85 166.09 -8.15 161.33 -8.22 156.36 C-8.23 155.63 -8.24 154.9 -8.26 154.15 C-8.29 151.75 -8.32 149.36 -8.35 146.97 C-8.37 145.3 -8.4 143.62 -8.42 141.95 C-8.47 138.45 -8.51 134.94 -8.56 131.44 C-8.61 126.97 -8.68 122.49 -8.74 118.02 C-8.79 114.57 -8.84 111.11 -8.88 107.65 C-8.9 106 -8.93 104.36 -8.95 102.71 C-8.99 100.4 -9.01 98.08 -9.04 95.77 C-9.05 94.46 -9.07 93.15 -9.09 91.8 C-8.99 87.78 -8.56 83.98 -8 80 C-8.97 79.65 -9.94 79.3 -10.94 78.94 C-14 77 -14 77 -14.71 73.87 C-15.49 63.55 -14.44 53.74 -11 44 C-9.18 38.23 -8.18 32.46 -7.19 26.5 C-5.6 17.29 -3.32 8.74 0 0 Z \",fill:\"#3B184B\",transform:\"translate(471,252)\"})),_path323||(_path323=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 2.66 4 3.32 4 4 C4.58 4.26 5.16 4.53 5.76 4.8 C9.68 6.9 12.73 10.02 16 13 C16.85 13.71 16.85 13.71 17.71 14.44 C22.68 18.87 25.62 24.31 26.16 31.02 C26.33 35.69 26.21 40.33 26 45 C26.66 45.33 27.32 45.66 28 46 C27.9 48.91 27.81 51.23 27 54 C24.12 56.62 24.12 56.62 21 59 C18.4 63.07 17.36 66.17 18 71 C20.23 73.9 22.38 74.58 25.88 75.44 C30.82 76.85 34.31 78.21 37.09 82.8 C37.9 84.29 38.69 85.79 39.46 87.29 C40.67 89.43 41.91 91.33 43.35 93.3 C43.77 93.87 44.18 94.44 44.61 95.03 C45.44 96.16 46.28 97.28 47.14 98.39 C50.07 102.4 50.07 102.4 49.67 105.65 C49.45 106.43 49.23 107.2 49 108 C49.49 110.03 49.49 110.03 50.44 111.81 C50.95 112.86 51.47 113.92 52 115 C52 114.34 52 113.68 52 113 C52.66 113 53.32 113 54 113 C54 114.98 54 116.96 54 119 C48.61 117.56 48.61 117.56 46.31 115.44 C43.73 110.65 41.86 105.98 42.25 100.5 C41.86 95.04 38.69 91.87 35 88 C30.91 84.52 28.31 83.87 23.03 83.47 C18.08 82.33 14.7 78.04 12 74 C11.8 71.74 11.8 71.74 11.88 69.31 C11.89 68.5 11.91 67.7 11.93 66.86 C11.95 66.25 11.98 65.63 12 65 C12.66 65 13.32 65 14 65 C14.37 63.7 14.37 63.7 14.75 62.38 C16 59 16 59 18.12 56.06 C20.45 52.26 20.61 50.4 20 46 C18.12 38.86 13.83 36.44 7.7 32.85 C2.14 29.04 -1.73 22.61 -3 16 C-2.98 11.1 -2.03 7.86 1 4 C0.78 1.79 0.78 1.79 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(1161,687)\"})),_path324||(_path324=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.36 2.04 2.71 4.08 4.06 6.12 C5.72 8.79 5.72 8.79 7 10 C8.06 10.08 9.11 10.16 10.2 10.25 C14.8 11.16 16.46 12.73 19.75 16 C23.4 19.76 23.4 19.76 28 22 C28 22.99 28 23.98 28 25 C28.66 25 29.32 25 30 25 C30.25 25.78 30.5 26.57 30.75 27.38 C31.7 30.09 31.7 30.09 33.75 30.82 C36.92 32.48 38.86 34.85 41.25 37.5 C41.71 38 42.17 38.5 42.64 39.01 C46 42.74 46 42.74 46 45 C46.66 45 47.32 45 48 45 C54.59 51.07 59.15 58.22 63.85 65.76 C68.36 73.02 68.36 73.02 75.12 78 C77.77 79.41 78.51 81.43 80 84 C80.87 84.87 81.73 85.73 82.62 86.62 C85 89 85 89 86 92 C84.23 91.52 82.46 91.04 80.69 90.56 C79.7 90.3 78.72 90.03 77.7 89.75 C75.78 89.22 73.89 88.63 72 88 C72 87.34 72 86.68 72 86 C71.44 85.77 70.89 85.55 70.31 85.31 C66.8 83.32 63.66 80.75 62.21 76.91 C61.13 74.72 61.13 74.72 58.43 74.3 C57.4 74.16 56.37 74.02 55.31 73.88 C50.26 72.77 47.95 71.55 44.94 67.31 C43.08 64.26 41.73 61.43 40.75 58 C38.76 51.82 32.82 48 28 44 C26.98 43.14 26.98 43.14 25.95 42.25 C24.64 41.15 23.32 40.07 22 39 C23.49 38.5 23.49 38.5 25 38 C25.65 38.69 26.3 39.37 26.98 40.08 C28.29 41.43 28.29 41.43 29.62 42.81 C30.48 43.71 31.34 44.6 32.23 45.52 C35.02 48.01 37.59 49.5 41 51 C40.35 49.33 39.68 47.66 39 46 C38.71 45.28 38.42 44.56 38.12 43.81 C36.7 41.52 35.42 41.18 33 40 C31.27 38.93 29.56 37.82 27.88 36.69 C26.57 35.83 26.57 35.83 25.24 34.95 C22.69 32.73 22.23 31.09 21 28 C15.37 22.38 9.17 18.33 2 15 C0.28 13.52 0.28 13.52 -1 12 C-1 11.34 -1 10.68 -1 10 C-2.98 9.34 -4.96 8.68 -7 8 C-7 6.68 -7 5.36 -7 4 C-5.02 4.66 -3.04 5.32 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#3D1D49\",transform:\"translate(754,116)\"})),_path325||(_path325=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.71 3.34 1.36 4.67 1 6 C0.78 9.39 0.61 12.77 0.48 16.16 C0.3 19.91 0.02 22.8 -2 26 C-2.45 26.87 -2.91 27.73 -3.38 28.62 C-7.04 31.94 -10.49 31.87 -15.32 32.25 C-18.13 32.72 -18.13 32.72 -19.35 35.02 C-20.21 38.95 -20.29 42.67 -20.25 46.69 C-20.26 47.46 -20.27 48.23 -20.27 49.03 C-20.43 53.49 -20.43 53.49 -18 57 C-17.93 57.63 -17.85 58.26 -17.77 58.91 C-16.23 63.08 -10.9 64.31 -7.1 66.12 C-3.71 68.18 -2.49 69.36 -1 73 C-0.67 76.23 -0.67 76.23 -0.75 79.62 C-0.77 81.31 -0.77 81.31 -0.8 83.04 C-1 86 -1 86 -2 89 C-2 89.99 -2 90.98 -2 92 C-9.59 92 -17.18 92 -25 92 C-24.75 88.48 -24.75 88.48 -24.49 84.88 C-24.05 77.97 -23.94 71.1 -24.01 64.18 C-24.02 63.26 -24.02 62.33 -24.03 61.38 C-24.07 57.58 -24.11 53.77 -24.17 49.97 C-24.21 47.14 -24.24 44.32 -24.26 41.49 C-24.28 40.64 -24.3 39.79 -24.31 38.91 C-24.34 33.5 -23.55 29.8 -21 25 C-20.34 24.34 -19.68 23.68 -19 23 C-18.75 21.57 -18.54 20.13 -18.38 18.69 C-17.8 15.83 -17.45 14.41 -15.27 12.44 C-13.22 11.2 -11.13 10.1 -9 9 C-5.36 6.36 -2.7 3.6 0 0 Z \",fill:\"#806685\",transform:\"translate(1133,1188)\"})),_path326||(_path326=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.93 24.89 2.93 49.13 0 74 C-10.89 74 -21.78 74 -33 74 C-33 64.94 -33 64.94 -31.19 61.12 C-30.85 60.39 -30.51 59.65 -30.17 58.88 C-28.46 56.14 -26.55 55.15 -23.48 54.32 C-22.54 54.11 -21.59 53.9 -20.62 53.69 C-15.6 52.38 -13.15 51.1 -10 47 C-8.63 44.26 -9.05 41.83 -9.17 38.83 C-9.46 29.89 -8.68 21.66 -6.69 12.94 C-6.47 11.99 -6.26 11.05 -6.04 10.07 C-3.57 0 -3.57 0 0 0 Z \",fill:\"#131847\",transform:\"translate(1009,1206)\"})),_path327||(_path327=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 2.23 1.09 4.46 1.12 6.69 C1.15 7.93 1.17 9.17 1.2 10.45 C1.01 13.88 0.34 15.89 -1 19 C-1.73 23.63 -1.83 28.32 -2 33 C-2.04 33.93 -2.08 34.85 -2.12 35.81 C-2.75 52.38 -2.38 69.93 4.04 85.52 C4.97 87.91 5.39 89.91 5.68 92.44 C5.78 93.27 5.88 94.09 5.99 94.94 C6.1 95.81 6.2 96.67 6.31 97.56 C7.41 105.75 9.2 112.61 13 120 C15.35 120 17.79 118.75 20 118 C20.06 117.4 20.12 116.79 20.18 116.17 C20.31 114.97 20.31 114.97 20.44 113.75 C20.52 112.96 20.6 112.17 20.68 111.36 C21 109 21 109 21.59 106.98 C22.1 104.52 21.68 102.93 21.06 100.5 C18.86 90.27 19.48 79.13 22 69 C23.55 67.32 23.55 67.32 25 66 C24.93 66.59 24.87 67.18 24.8 67.78 C23.51 79.6 22.26 91.17 24 103 C24.14 103.95 24.28 104.91 24.42 105.89 C27.06 124.07 27.06 124.07 37 139 C38.07 140.31 39.13 141.62 40.19 142.94 C42.56 145.64 45.18 147.77 48 150 C52 154.43 52 154.43 52 158 C52.66 158 53.32 158 54 158 C54.5 160.48 54.5 160.48 55 163 C49.04 163.39 49.04 163.39 47 163 C45.42 161.23 45.42 161.23 44 159 C40.59 154.31 37.17 150.06 33 146 C31.02 143.62 29.15 141.22 27.38 138.69 C26.92 138.13 26.47 137.57 26 137 C25.34 137 24.68 137 24 137 C24.56 141.3 26.09 144.05 28.5 147.62 C30.41 150.48 31.91 152.74 33 156 C32.67 156.66 32.34 157.32 32 158 C24.19 154.73 19.52 145.33 16 138 C15.23 136.05 14.51 134.11 13.87 132.12 C12.97 129.78 12.97 129.78 11.13 126.97 C8.33 122.15 6.95 116.96 5.44 111.62 C5.13 110.57 4.83 109.52 4.52 108.43 C-1 88.75 -1 88.75 -1 79 C-1.66 79 -2.32 79 -3 79 C-4.82 69.3 -5.32 59.84 -5.25 50 C-5.25 49.28 -5.24 48.56 -5.24 47.82 C-5.17 31.71 -4.82 15.51 0 0 Z \",fill:\"#28103B\",transform:\"translate(408,809)\"})),_path328||(_path328=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.38 0.5 6.8 1.98 10 5 C10 5.66 10 6.32 10 7 C11.03 7.08 12.06 7.16 13.12 7.25 C20.55 8.69 24.5 13.32 29 19 C27.63 22.16 27.01 22.99 24 25 C21.31 25.12 21.31 25.12 19 25 C19.29 26.01 19.58 27.02 19.88 28.06 C20.01 32.31 19.86 32.74 17.25 35.75 C16.19 36.85 15.1 37.94 14 39 C13.25 39.83 13.25 39.83 12.48 40.68 C11 42 11 42 8.06 42.44 C4.36 41.91 3.24 40.93 1 38 C1 37.34 1 36.68 1 36 C-0.49 35.5 -0.49 35.5 -2 35 C-3.18 33.07 -3.18 33.07 -4.31 30.56 C-7.32 24.23 -10.87 18.28 -14.69 12.4 C-16.44 9.19 -15.98 7.46 -15 4 C-14.34 3.01 -13.68 2.02 -13 1 C-10.94 0.64 -10.94 0.64 -8.56 0.69 C-7.78 0.69 -7 0.7 -6.19 0.7 C-4 1 -4 1 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(744,140)\"})),_path329||(_path329=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.91 -0.12 4.38 -0.15 7 1 C9.02 3.43 10.62 5.93 12.23 8.65 C14.28 11.38 15.83 11.91 19 13 C20.48 15.96 20.06 18.74 20 22 C19.01 22.33 18.02 22.66 17 23 C11.8 30.19 11.29 40.48 10 49 C9.34 49 8.68 49 8 49 C7.47 50.83 7.47 50.83 6.94 52.69 C3.98 61.54 -0.23 69.54 -7 76 C-7.95 77.16 -8.88 78.34 -9.75 79.56 C-10.36 80.4 -10.36 80.4 -10.98 81.25 C-12.11 83.19 -12.68 84.78 -13 87 C-11.65 88.77 -11.65 88.77 -10 90 C-12.33 90.04 -14.67 90.04 -17 90 C-17.33 89.67 -17.66 89.34 -18 89 C-17.87 82.46 -15.15 78.89 -11 74 C-12.49 74.99 -12.49 74.99 -14 76 C-12.94 73.8 -11.83 71.74 -10.5 69.69 C-8.75 66.55 -7.88 63.47 -7 60 C-7.6 59.73 -8.2 59.46 -8.81 59.19 C-11.08 57.96 -12.52 57.11 -14 55 C-13.61 50.84 -12.1 48.37 -9.62 45.06 C-5.17 38.88 -2.77 33.43 -0.9 26.09 C0.43 21.53 2.26 17.21 4.11 12.85 C5.03 9.89 5.18 8.8 4 6 C2.71 3.97 1.38 1.96 0 0 Z \",fill:\"#442255\",transform:\"translate(294,1026)\"})),_path330||(_path330=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.8 2.81 9.85 5.24 12.42 11.41 C13.31 14.03 14.11 16.68 14.9 19.32 C18.45 31.19 24.99 42.29 33.46 51.32 C37.24 55.44 38.8 58.25 39 64 C38 66.94 38 66.94 36 69 C29.93 69.44 24.31 68.25 18.4 67.07 C14.74 66.37 11.37 65.94 7.64 66.04 C4 66 4 66 1.25 63.88 C-1 61 -1 61 -2.88 58.12 C-7.42 51.45 -12.72 47.25 -19.77 43.36 C-22 42 -22 42 -23.55 40.33 C-25.16 38.55 -25.16 38.55 -29 39 C-29 38.34 -29 37.68 -29 37 C-24.59 35.97 -22.07 35.96 -18 38 C-18 38.66 -18 39.32 -18 40 C-17.48 40.25 -16.97 40.5 -16.44 40.75 C-14 42 -14 42 -12.35 43.06 C-8.56 45.46 -8.56 45.46 -4.19 45.81 C-2 45.04 -2 45.04 0 44 C7.14 43.65 7.14 43.65 10.37 44.97 C13.42 46.16 16.05 46.41 19.31 46.62 C20.38 46.7 21.45 46.77 22.55 46.85 C23.36 46.9 24.17 46.95 25 47 C21.62 40.05 21.62 40.05 15.81 35.38 C12.98 34.93 12.98 34.93 10 35 C9.88 32.62 9.88 32.62 10 30 C10.66 29.34 11.32 28.68 12 28 C11.72 19.12 9.73 10.27 3.25 3.88 C2.33 3.07 2.33 3.07 1.39 2.24 C0.93 1.83 0.47 1.42 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#411E4E\",transform:\"translate(780,159)\"})),_path331||(_path331=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.37 1.11 0.74 1.69 1.12 C0.64 1.74 0.64 1.74 -0.44 2.38 C-10.09 7.7 -10.09 7.7 -16.31 16.12 C-21.25 18.34 -25.86 19.81 -31.31 20.12 C-31.93 19.8 -32.56 19.47 -33.2 19.14 C-35.8 17.89 -37.58 17.99 -40.44 18.12 C-43.07 18.25 -43.07 18.25 -45.31 18.12 C-46.3 17.13 -46.3 17.13 -47.31 16.12 C-46.22 16.15 -45.13 16.17 -44 16.19 C-40.37 16.31 -40.37 16.31 -37.31 15.12 C-38.92 15.04 -40.52 14.99 -42.12 14.94 C-43.02 14.9 -43.91 14.87 -44.83 14.83 C-47.35 14.92 -47.35 14.92 -49.12 16.47 C-50.75 18.73 -50.53 20.41 -50.31 23.12 C-49.32 23.12 -48.33 23.12 -47.31 23.12 C-47.31 23.78 -47.31 24.45 -47.31 25.12 C-52.71 28.87 -56.8 29.37 -63.31 29.12 C-63.97 28.79 -64.63 28.47 -65.31 28.12 C-71.59 26.84 -71.59 26.84 -77.31 29.12 C-77.97 29.12 -78.63 29.12 -79.31 29.12 C-80.69 29.7 -82.04 30.34 -83.38 31 C-84.09 31.35 -84.8 31.7 -85.54 32.05 C-87.48 33.01 -87.48 33.01 -88.31 35.12 C-90.62 35.12 -92.93 35.12 -95.31 35.12 C-94.32 35.78 -93.33 36.45 -92.31 37.12 C-99.91 40.4 -108.01 42.12 -116.31 42.12 C-115.51 41.65 -114.7 41.18 -113.88 40.69 C-111.46 39.36 -111.46 39.36 -110.31 38.12 C-115.26 38.62 -115.26 38.62 -120.31 39.12 C-120.97 37.48 -121.63 35.83 -122.31 34.12 C-121.32 34.78 -120.33 35.45 -119.31 36.12 C-115.67 35.81 -115.67 35.81 -112.31 35.12 C-112.31 34.79 -112.31 34.47 -112.31 34.12 C-109.01 34.12 -105.71 34.12 -102.31 34.12 C-102.31 33.79 -102.31 33.47 -102.31 33.12 C-101.4 33.17 -100.5 33.21 -99.56 33.25 C-96.29 33.12 -95.08 32.68 -92.31 31.12 C-91.4 30.86 -90.5 30.59 -89.56 30.31 C-85.4 28.79 -81.67 27.07 -78.31 24.12 C-76.83 20.53 -76.31 17.99 -76.31 14.12 C-75.65 14.12 -74.99 14.12 -74.31 14.12 C-74.31 13.47 -74.31 12.8 -74.31 12.12 C-75.3 11.79 -76.29 11.47 -77.31 11.12 C-76.44 11.04 -76.44 11.04 -75.54 10.96 C-72.88 10.7 -70.22 10.45 -67.56 10.19 C-66.64 10.1 -65.72 10.01 -64.77 9.92 C-63.88 9.84 -62.99 9.75 -62.08 9.66 C-60.85 9.54 -60.85 9.54 -59.6 9.42 C-57.35 9.18 -57.35 9.18 -55.37 8.61 C-52.79 8 -50.33 7.89 -47.68 7.77 C-32.81 6.94 -18.32 5.78 -4.45 -0.09 C-2.31 -0.88 -2.31 -0.88 0 0 Z \",fill:\"#090E36\",transform:\"translate(749.3125,793.875)\"})),_path332||(_path332=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.95 6.77 6.95 6.77 7.08 10.05 C6.64 13.73 6.26 16.51 4.5 19.81 C2.93 23.15 2.81 25 2.69 28.62 C2.21 36.49 -0.66 43.84 -6.45 49.31 C-11.21 52.46 -15.52 51.44 -20.93 50.48 C-29.76 48.2 -33.96 43.39 -39 36 C-36.14 33.6 -33.19 32.12 -29.77 30.65 C-15.26 24.42 -7.76 15.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#775878\",transform:\"translate(688,348)\"})),_path333||(_path333=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.48 1.83 8.39 7.04 11 12 C15.62 22.94 20.66 36.2 20 48.25 C19.92 51.38 20.04 53.1 21.06 56.12 C22.42 60.28 22.05 62.74 21 67 C18.81 69.12 18.81 69.12 16 70 C11.84 69.39 10.26 68.27 7.38 65.19 C5.92 63.23 4.51 61.24 3.19 59.19 C0.07 56.07 -2.75 56.23 -7 56 C-10.3 55.46 -11.89 54.64 -14 52 C-14 51.34 -14 50.68 -14 50 C-14.66 50 -15.32 50 -16 50 C-17.03 48.05 -18.05 46.09 -19.06 44.12 C-19.92 42.49 -19.92 42.49 -20.79 40.82 C-21.39 39.42 -21.39 39.42 -22 38 C-21.67 37.34 -21.34 36.68 -21 36 C-20.6 36.96 -20.6 36.96 -20.19 37.94 C-19.11 40.33 -19.11 40.33 -16 41 C-9.71 41.62 -5.69 39.84 -0.25 37.06 C1.24 36.32 2.74 35.58 4.23 34.85 C4.89 34.52 5.54 34.19 6.21 33.85 C8 33 8 33 11 32 C10.73 23.47 7.83 18.48 2.35 12.07 C0.7 9.54 0.51 7.74 0.31 4.75 C0.21 3.41 0.21 3.41 0.11 2.05 C0.08 1.37 0.04 0.7 0 0 Z \",fill:\"#4B295A\",transform:\"translate(1236,665)\"})),_path334||(_path334=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 3.98 4 5.96 4 8 C4.98 7.95 4.98 7.95 5.98 7.89 C11.49 7.72 15.19 7.96 20 11 C19.78 11.98 19.78 11.98 19.56 12.98 C18.3 19.18 17.83 24.95 18.03 31.27 C18 33.98 17.62 36.37 17 39 C17.66 39 18.32 39 19 39 C19.2 41.92 19.38 44.83 19.56 47.75 C19.62 48.57 19.67 49.4 19.73 50.25 C19.78 51.05 19.83 51.85 19.88 52.67 C19.93 53.41 19.97 54.14 20.02 54.89 C20 57.08 19.61 58.9 19 61 C16 60 16 60 14.38 57.06 C12.87 53.26 12.62 49.61 12.3 45.56 C11.57 39.31 9.93 34.11 5 30 C4.67 29.34 4.34 28.68 4 28 C3.01 28 2.02 28 1 28 C-5.71 43.53 -5.71 43.53 -6 60 C-5.65 65.73 -5.74 70.63 -8 76 C-8.66 76 -9.32 76 -10 76 C-10.05 68.97 -10.09 61.95 -10.11 54.92 C-10.12 52.54 -10.13 50.16 -10.15 47.77 C-10.18 44.32 -10.19 40.87 -10.2 37.43 C-10.21 35.85 -10.21 35.85 -10.23 34.25 C-10.23 27.62 -9.58 21.33 -8.43 14.8 C-7.9 11.81 -7.9 11.81 -8 8 C-7.34 7.67 -6.68 7.34 -6 7 C-6 6.34 -6 5.68 -6 5 C-6.66 4.67 -7.32 4.34 -8 4 C-6.02 3.01 -4.04 2.02 -2 1 C-1.67 1.66 -1.34 2.32 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#1B0A31\",transform:\"translate(870,455)\"})),_path335||(_path335=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.4 34.57 1.4 34.57 -1 50 C-11.56 50 -22.12 50 -33 50 C-33 38.64 -33 38.64 -28.47 33.14 C-26.82 30.74 -26.39 28.89 -25.81 26.06 C-24.7 22.06 -23.7 20.28 -20.12 18.12 C-18.75 17.41 -17.38 16.71 -16 16 C-15.11 15.28 -14.23 14.56 -13.31 13.81 C-9.96 11.19 -7.26 10 -3 10 C-2.67 10.66 -2.34 11.32 -2 12 C-1.34 8.04 -0.68 4.08 0 0 Z \",fill:\"#705376\",transform:\"translate(1109,1230)\"})),_path336||(_path336=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.58 4.14 2.15 8.28 2.71 12.42 C2.9 13.82 3.09 15.22 3.29 16.62 C4.68 26.49 5.26 36.03 5 46 C1.75 47.33 -1.3 48.37 -4.75 49.06 C-7.66 49.48 -7.66 49.48 -10 51 C-10.23 53.18 -10.41 55.37 -10.56 57.56 C-10.69 59.36 -10.69 59.36 -10.82 61.19 C-10.88 62.12 -10.94 63.05 -11 64 C-11.66 64 -12.32 64 -13 64 C-13.5 65.98 -13.5 65.98 -14 68 C-18.79 67.29 -21.87 64.5 -24.71 60.71 C-27.51 57.4 -30.63 54.93 -34.06 52.31 C-34.69 51.83 -35.31 51.34 -35.96 50.84 C-38.59 48.8 -41.22 46.85 -44 45 C-44.19 43.86 -44.19 43.86 -44.38 42.69 C-45.41 38.24 -48.71 35.97 -52.25 33.31 C-54 32 -54 32 -55 30 C-55.74 29.73 -56.49 29.46 -57.25 29.19 C-60.68 27.71 -62.47 25.72 -65 23 C-68.11 19.81 -71.3 16.72 -74.56 13.69 C-75.31 12.99 -76.05 12.29 -76.82 11.57 C-79.09 9.61 -79.09 9.61 -83 10 C-83.33 10.66 -83.66 11.32 -84 12 C-84.84 10.9 -85.67 9.8 -86.5 8.69 C-86.96 8.07 -87.43 7.46 -87.91 6.82 C-89 5 -89 5 -89 2 C-83.15 2.45 -78.92 5.04 -74 8 C-74 8.99 -74 9.98 -74 11 C-73.22 11.31 -72.43 11.62 -71.62 11.94 C-67.15 13.75 -67.15 13.75 -65.56 16.44 C-64.1 19.24 -64.1 19.24 -61 21 C-61 21.99 -61 22.98 -61 24 C-59.92 24.41 -59.92 24.41 -58.82 24.82 C-56.04 25.98 -53.53 27.29 -50.94 28.81 C-49.68 29.53 -49.68 29.53 -48.4 30.27 C-45.69 32.22 -44.04 34.37 -42 37 C-37.79 40.98 -33.82 44.42 -28.25 46.19 C-23.43 45.91 -20.54 44.69 -17.25 41.09 C-16.05 39.67 -14.86 38.24 -13.68 36.81 C-11.68 34.65 -9.85 33.69 -7 33 C-7 32.67 -7 32.34 -7 32 C-6.03 31.73 -5.06 31.46 -4.06 31.19 C-3.05 30.8 -2.04 30.4 -1 30 C0.1 26.7 0.11 24.27 0.1 20.8 C0.09 19.59 0.09 18.38 0.09 17.14 C0.08 15.88 0.07 14.61 0.06 13.31 C0.06 12.04 0.05 10.76 0.05 9.45 C0.04 6.3 0.02 3.15 0 0 Z \",fill:\"#301243\",transform:\"translate(919,210)\"})),_path337||(_path337=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.37 0.47 6.04 2.09 9.25 5.04 C10.71 6.35 10.71 6.35 12.21 7.68 C14.31 10.36 14.31 10.36 14.01 12.96 C13.78 13.75 13.55 14.54 13.31 15.36 C14.57 17.83 15.82 20.04 17.31 22.36 C17.99 23.68 18.66 25.01 19.31 26.36 C18.98 26.69 18.65 27.02 18.31 27.36 C18.13 29.43 18.04 31.52 18 33.61 C17.96 34.75 17.92 35.88 17.88 37.06 C18.39 40.99 19.56 42.56 22.31 45.36 C22.97 45.69 23.63 46.02 24.31 46.36 C24.31 47.02 24.31 47.68 24.31 48.36 C24.97 48.36 25.63 48.36 26.31 48.36 C25.98 50.01 25.65 51.66 25.31 53.36 C22.83 53.85 22.83 53.85 20.31 54.36 C20.09 55.62 19.87 56.89 19.64 58.2 C16.44 75.55 16.44 75.55 10.31 82.36 C7.84 81.97 6.58 81.62 4.79 79.82 C1.1 74.2 1.05 70.81 2.31 64.36 C2.51 62.5 2.7 60.65 2.87 58.79 C2.95 57.95 3.04 57.1 3.12 56.23 C3.19 55.61 3.25 54.99 3.31 54.36 C7.64 54.36 9.58 55.32 13.31 57.36 C13.64 57.03 13.97 56.7 14.31 56.36 C14.31 55.7 14.31 55.04 14.31 54.36 C12.82 53.86 12.82 53.86 11.31 53.36 C7.06 49.87 5.36 46.44 3.35 41.5 C1.9 38.53 -0.31 36.61 -2.69 34.36 C-3.34 32.22 -3.34 32.22 -3.69 30.36 C-2.66 29.58 -2.66 29.58 -1.61 28.78 C-0.71 28.08 0.19 27.39 1.12 26.67 C2.01 25.98 2.91 25.3 3.83 24.59 C6.42 22.25 7.9 20.55 9.31 17.36 C9.31 15.05 9.31 12.74 9.31 10.36 C4.69 9.37 0.07 8.38 -4.69 7.36 C-3.54 0.47 -3.54 0.47 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(882.69140625,310.64453125)\"})),_path338||(_path338=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.19 2.31 0.19 5 1 C6.69 3.5 6.69 3.5 8 6 C8.66 6.33 9.32 6.66 10 7 C18.17 23.27 20.38 39.1 20 57 C19.34 57 18.68 57 18 57 C18.02 58 18.02 58 18.03 59.01 C18.35 82.37 18.35 82.37 16 93 C16 93.66 16 94.32 16 95 C15.34 95 14.68 95 14 95 C14.06 95.8 14.12 96.61 14.19 97.44 C13.98 101.3 13.02 104.21 11.73 107.82 C10.83 110.52 10.39 113.19 10 116 C9.68 117.34 9.36 118.67 9 120 C8.34 120 7.68 120 7 120 C6.69 120.99 6.69 120.99 6.38 122 C4.48 126.14 1.8 129.43 -1 133 C-1.88 134.16 -1.88 134.16 -2.77 135.34 C-7.57 141.64 -12.27 146.78 -19 151 C-19.75 149.32 -19.75 149.32 -20 147 C-18.34 144.52 -18.34 144.52 -15.94 141.81 C-8.51 133.11 -3.58 124.5 1 114 C1.66 114 2.32 114 3 114 C2.95 113.17 2.9 112.33 2.85 111.47 C3.02 107.5 4.08 104.16 5.38 100.44 C7.74 93.33 9.14 86.46 10 79 C10.66 79 11.32 79 12 79 C12.08 74.33 12.13 69.65 12.16 64.98 C12.18 63.4 12.2 61.82 12.23 60.24 C12.47 45.15 11.12 30.82 5.44 16.69 C5.13 15.89 4.83 15.1 4.52 14.28 C2.9 10.05 2.9 10.05 0.9 6 C0 4 0 4 0 0 Z \",fill:\"#2F163C\",transform:\"translate(575,1096)\"})),_path339||(_path339=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.4 3.47 10.15 7.46 15 11.66 C17.89 14.09 17.89 14.09 21.19 15.5 C24.48 17.26 25.19 18.81 27 22 C29.15 23.65 29.15 23.65 31.62 24.94 C32.5 25.44 33.38 25.94 34.29 26.46 C35.18 26.97 36.08 27.48 37 28 C38.7 29 40.39 30.02 42.06 31.06 C42.8 31.51 43.53 31.95 44.29 32.41 C46.54 34.5 46.8 35.97 47 39 C45.56 41.81 45.56 41.81 44 44 C38.17 43.17 32.67 41.95 27.11 40.02 C20.32 37.68 15.42 36.74 8.2 37.79 C-1.68 38.44 -12.77 35.34 -22 32 C-22.89 31.68 -22.89 31.68 -23.81 31.35 C-25.84 30.6 -27.86 29.84 -29.88 29.06 C-30.52 28.82 -31.16 28.58 -31.82 28.33 C-35.68 26.8 -38.29 25.15 -41 22 C-40.67 21.34 -40.34 20.68 -40 20 C-39.42 20.28 -38.84 20.55 -38.24 20.84 C-33.32 23.15 -33.32 23.15 -28.06 24.44 C-24.04 25.18 -20.87 26.94 -17.27 28.84 C-14.93 30.11 -14.93 30.11 -12 31 C-11.01 31.33 -10.02 31.66 -9 32 C-9 32.66 -9 33.32 -9 34 C-5.7 33.34 -2.4 32.68 1 32 C1.5 30.6 1.99 29.2 2.5 27.75 C2.78 26.96 3.06 26.17 3.34 25.36 C4.18 22.77 4.18 22.77 4 19 C3.34 18.67 2.68 18.34 2 18 C2 16.68 2 15.36 2 14 C2.99 14 3.98 14 5 14 C5 13.34 5 12.68 5 12 C4.34 12 3.68 12 3 12 C2.8 11.08 2.8 11.08 2.6 10.14 C2.42 9.33 2.24 8.52 2.06 7.69 C1.89 6.89 1.71 6.09 1.54 5.26 C1 2.85 1 2.85 0 0 Z \",fill:\"#462453\",transform:\"translate(998,584)\"})),_path340||(_path340=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.96 3.46 4.49 7.29 6.06 11.5 C6.32 12.14 6.57 12.79 6.84 13.45 C10.98 24.44 11.34 35.69 11.31 47.31 C11.33 48.63 11.34 49.95 11.36 51.31 C11.37 63.66 11.37 63.66 8 69 C3.15 72.84 -4.13 72.54 -10 72 C-10.99 71.67 -11.98 71.34 -13 71 C-16.68 70.87 -19.49 70.83 -23 72 C-28.49 72.27 -32.75 71.85 -38 70 C-39.01 69.65 -40.02 69.3 -41.06 68.94 C-47.61 64.62 -50.64 56.85 -54 50 C-54.66 49.34 -55.32 48.68 -56 48 C-58.68 47.98 -58.68 47.98 -61.62 48.38 C-62.63 48.49 -63.63 48.6 -64.66 48.71 C-65.43 48.81 -66.21 48.9 -67 49 C-67.29 48.37 -67.57 47.73 -67.87 47.08 C-69.23 44.58 -70.41 44.04 -73 43 C-73 42.34 -73 41.68 -73 41 C-72.3 41.13 -71.6 41.27 -70.88 41.4 C-69.93 41.58 -68.98 41.76 -68 41.94 C-66.49 42.23 -66.49 42.23 -64.96 42.52 C-62.46 42.93 -60.2 43.03 -57.69 43.06 C-53.49 44.13 -53.07 44.74 -50.75 48.19 C-49.81 49.78 -48.89 51.38 -48 53 C-45.19 57.74 -43.28 60.14 -38 62 C-33.34 62.38 -33.34 62.38 -29 61 C-27.23 61.08 -25.46 61.19 -23.69 61.31 C-20.72 61.43 -20.72 61.43 -18 61 C-15.69 58.41 -15.69 58.41 -14.51 56.46 C-11.14 53.19 -5.47 53.51 -1 53 C0.34 52.69 1.68 52.37 3 52 C3.19 50.79 3.19 50.79 3.38 49.56 C3.58 48.72 3.79 47.87 4 47 C4.66 46.67 5.32 46.34 6 46 C9.36 36.09 5.84 25.71 1.94 16.5 C0.86 13.62 0.31 10.85 -0.19 7.81 C-0.37 6.77 -0.55 5.72 -0.73 4.64 C-1 2 -1 2 0 0 Z \",fill:\"#391948\",transform:\"translate(907,165)\"})),_path341||(_path341=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.45 4.68 0.53 8.78 -1.12 13.19 C-1.8 15.01 -1.8 15.01 -2.48 16.88 C-2.73 17.53 -2.97 18.2 -3.22 18.88 C-4.35 21.96 -5.42 25.06 -6.5 28.16 C-7.69 31.59 -8.89 35.01 -10.1 38.43 C-10.69 40.12 -11.28 41.81 -11.87 43.49 C-15.37 53.53 -19.31 63.02 -24.21 72.45 C-26.13 76.25 -27.7 80.07 -29.11 84.08 C-30.1 86.21 -31.32 87.39 -33 89 C-33.71 91.1 -33.71 91.1 -34 93 C-34.66 93 -35.32 93 -36 93 C-36.27 94.13 -36.54 95.27 -36.81 96.44 C-37.2 97.61 -37.6 98.79 -38 100 C-39.49 100.5 -39.49 100.5 -41 101 C-41.1 101.68 -41.2 102.36 -41.3 103.05 C-42.15 106.64 -43.6 109.82 -45.19 113.12 C-45.5 113.78 -45.81 114.43 -46.12 115.11 C-48.87 120.85 -51.86 126.46 -55 132 C-56.32 132 -57.64 132 -59 132 C-59 131.01 -59 130.02 -59 129 C-59.66 128.67 -60.32 128.34 -61 128 C-60.36 127.3 -60.36 127.3 -59.71 126.59 C-51.73 117.18 -47.74 105.61 -44 94 C-43.34 93.01 -42.68 92.02 -42 91 C-41.51 89.18 -41.08 87.34 -40.69 85.5 C-39.42 80.19 -37.6 75.54 -35.24 70.63 C-34.1 68.22 -33.13 65.81 -32.19 63.31 C-29.59 56.72 -26.31 50.47 -23.1 44.17 C-21.22 40.45 -19.36 36.73 -17.5 33 C-16.82 31.65 -16.15 30.29 -15.47 28.94 C-14.98 27.97 -14.5 27 -14 26 C-13.34 26 -12.68 26 -12 26 C-11.77 25.22 -11.55 24.43 -11.31 23.62 C-9.92 19.77 -8.17 16.25 -6.3 12.61 C-4.68 9.36 -3.23 6.05 -1.8 2.71 C-1 1 -1 1 0 0 Z \",fill:\"#2F1837\",transform:\"translate(394,515)\"})),_path342||(_path342=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.63 2.74 8.38 8.78 11 15 C11.99 15 12.98 15 14 15 C14 11.04 14 7.08 14 3 C14.99 3 15.98 3 17 3 C23.39 19.69 23.38 37.23 23.93 54.87 C24 56.86 24.08 58.86 24.17 60.85 C24.75 74.13 24.62 84.28 18 96 C17.67 96.86 17.35 97.71 17.01 98.59 C15.26 102.77 12.37 106.01 9 109 C5.56 110 5.56 110 3 110 C3.37 106.56 3.87 103.28 5 100 C7.94 98.06 7.94 98.06 11 97 C13.27 95.28 13.89 94.35 14.75 91.62 C15.02 88.83 14.64 86.72 14 84 C14 83.01 14 82.02 14 81 C13.34 81 12.68 81 12 81 C12.19 80.39 12.39 79.78 12.59 79.16 C14.51 72.68 15.6 66.36 16.27 59.66 C16.7 55.52 17.66 51.93 19 48 C19.61 42.64 19.06 38.02 17 33 C14.72 32.33 14.72 32.33 12 33 C7.38 37.22 6.67 42.24 6.31 48.25 C6.29 49.43 6.26 50.61 6.24 51.83 C6.01 54.83 5.57 56.48 4 59 C3.67 59 3.34 59 3 59 C3.14 54.96 3.29 50.92 3.44 46.88 C3.5 45.16 3.5 45.16 3.56 43.41 C3.6 42.31 3.64 41.2 3.68 40.05 C3.72 39.04 3.76 38.02 3.79 36.98 C4 34 4 34 4.58 30.93 C5.02 27.89 4.79 25.95 4.04 23 C3.81 22.09 3.59 21.18 3.36 20.25 C3 18.86 3 18.86 2.62 17.44 C2.16 15.58 1.69 13.73 1.23 11.87 C1.02 11.06 0.81 10.24 0.59 9.4 C-1.15 2.3 -1.15 2.3 0 0 Z \",fill:\"#38154A\",transform:\"translate(446,1066)\"})),_path343||(_path343=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.24 3.58 0.8 6.33 0 10 C-0.33 10.66 -0.66 11.32 -1 12 C-1.99 12.33 -2.98 12.66 -4 13 C-5.45 14.75 -5.45 14.75 -6.69 16.88 C-7.12 17.57 -7.56 18.27 -8.01 18.99 C-9.22 21.08 -9.22 21.08 -9 24 C-8.34 22.68 -7.68 21.36 -7 20 C-6.67 20.54 -6.35 21.09 -6.01 21.64 C-5.57 22.36 -5.14 23.08 -4.69 23.81 C-4.26 24.52 -3.83 25.23 -3.39 25.96 C-2.09 28.03 -2.09 28.03 -0.33 29.57 C1 31 1 31 0.94 34.12 C0.17 37.29 -0.68 39.61 -2.06 42.5 C-3.93 46.59 -5.01 49.46 -4 54 C-2.15 55.87 -0.15 57.44 1.9 59.08 C8.62 65.22 9.85 74.09 11.13 82.68 C12.11 86.41 12.74 87.93 16 90 C19.27 89.99 19.27 89.99 23 89 C23.78 88.83 24.55 88.66 25.35 88.48 C27.99 87.89 30.62 87.26 33.25 86.62 C34.18 86.4 35.11 86.18 36.07 85.94 C38.71 85.3 41.36 84.65 44 84 C45.2 83.71 46.4 83.41 47.64 83.11 C54.25 81.41 58.68 80 62.69 74.25 C65.67 70.08 69.05 67.63 73.31 64.84 C76.11 62.93 78.62 60.83 81.19 58.62 C85.6 54.96 90.17 51.84 95.06 48.88 C95.72 48.47 96.37 48.07 97.05 47.65 C98.66 46.7 100.33 45.84 102 45 C102.66 45.33 103.32 45.66 104 46 C103.05 46.67 103.05 46.67 102.09 47.36 C89.98 56.07 77.94 65.06 67.38 75.62 C66.59 76.41 65.81 77.19 65 78 C64.55 78.48 64.1 78.96 63.64 79.46 C55.62 87.3 43.75 89.34 33.06 91.13 C28.41 92.45 25.82 94.76 23.19 98.75 C22.8 99.49 22.4 100.24 22 101 C14.74 100.29 8.59 94.38 4 89 C-0.46 80.94 -0.48 72.9 1 64 C0.37 63.66 -0.25 63.32 -0.9 62.97 C-7.56 59.02 -7.56 59.02 -9.5 54.5 C-10.27 49.53 -10.36 44.43 -10.65 39.41 C-11.04 35.63 -11.93 32.47 -13.38 28.96 C-14.22 26.31 -14.43 24.8 -14 22 C-12.46 19.19 -10.59 16.64 -8.69 14.06 C-5.39 9.5 -2.36 5.14 0 0 Z \",fill:\"#816786\",transform:\"translate(699,672)\"})),_path344||(_path344=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.27 2.12 2.91 3.41 3.36 6.48 C3.16 17.09 0.96 24.63 -3.76 34.18 C-5.2 36.94 -5.2 36.94 -5 40 C-6.39 41.64 -6.39 41.64 -8.25 43.25 C-8.85 43.79 -9.46 44.33 -10.08 44.89 C-12 46 -12 46 -14.13 46 C-16 45 -16 45 -16.95 42.64 C-17.19 41.66 -17.44 40.69 -17.69 39.69 C-18.99 35.42 -18.99 35.42 -22.22 32.56 C-24.65 31.59 -24.65 31.59 -27.07 30.98 C-27.71 30.65 -28.35 30.33 -29 30 C-30.23 26.14 -29.9 23.76 -28.49 20.02 C-28.14 19.11 -27.8 18.19 -27.44 17.24 C-27.07 16.3 -26.7 15.35 -26.31 14.38 C-25.96 13.42 -25.61 12.47 -25.24 11.48 C-24.89 10.57 -24.54 9.65 -24.18 8.71 C-23.86 7.88 -23.53 7.05 -23.2 6.19 C-21.8 3.64 -20.46 2.51 -18 1 C-15.2 0.23 -15.2 0.23 -12.12 -0.25 C-11.12 -0.42 -10.11 -0.59 -9.07 -0.77 C-5.75 -1.02 -3.2 -0.91 0 0 Z \",fill:\"#4A2E63\",transform:\"translate(501,247)\"})),_path345||(_path345=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.98 0.39 6.04 2.59 8.88 5.25 C13 9.08 13 9.08 17.31 12.69 C20 15 20 15 22.31 18 C24.95 21.39 28.25 22.88 32.11 24.63 C34 26 34 26 34.89 28.4 C35.01 31.34 34.73 32.63 33 35 C26.55 37.22 20.32 37.16 13.59 36.93 C9.8 36.83 7.25 37.01 4 39 C1.25 39.62 1.25 39.62 -2 39 C-5.13 36.7 -7.89 34.27 -10 31 C-9.89 27.92 -9.16 26.25 -7.5 23.66 C-5.58 20.25 -5.37 17.38 -5 13.5 C-4.49 8.19 -3.91 3.91 0 0 Z \",fill:\"#4B295A\",transform:\"translate(962,561)\"})),_path346||(_path346=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.06 1.97 2.06 1.97 2.11 3.98 C2.18 5.72 2.25 7.45 2.31 9.19 C2.34 10.05 2.36 10.92 2.38 11.81 C2.59 16.78 3.08 19.83 6 24 C10.37 35.26 11.52 49.98 9.52 61.88 C8.77 66.42 8.65 70.96 8.48 75.55 C8.31 79.12 7.97 82.1 6.97 85.57 C5.22 92.02 5.79 98.87 5.88 105.5 C5.89 106.91 5.89 108.32 5.9 109.73 C5.93 113.15 5.96 116.58 6 120 C3.03 120 0.06 120 -3 120 C-3.08 115.24 -3.01 110.63 -2.5 105.89 C-1.96 100.08 -1.85 94.33 -1.88 88.5 C-1.88 87.46 -1.88 86.42 -1.88 85.34 C-1.92 78.92 -2.12 72.53 -2.5 66.12 C-3.3 52.76 -3.08 39.5 -2.56 26.12 C-2.52 25.1 -2.48 24.08 -2.44 23.03 C-1.61 3.22 -1.61 3.22 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(1012,1160)\"})),_path347||(_path347=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.82 1.63 3.18 3.37 4.64 5.32 C6.47 7.58 8.25 8.13 11 9 C12.67 9.99 12.67 9.99 14.38 11 C17.82 13.03 21.12 14.05 25 15 C25 15.66 25 16.32 25 17 C27.31 17.33 29.62 17.66 32 18 C32 18.66 32 19.32 32 20 C32.58 19.92 33.16 19.84 33.76 19.75 C40.06 19.24 40.06 19.24 42.93 21.56 C44.41 23.32 45.75 25.08 47 27 C39.37 26.09 39.37 26.09 36.31 25.31 C33.17 24.89 31.75 25.42 29 27 C27.16 28.91 25.61 30.88 24 33 C25.49 37.27 27.65 40.63 30.25 44.31 C30.85 45.17 30.85 45.17 31.46 46.04 C34.2 49.94 37.04 53.77 40 57.51 C41 59 41 59 41 61 C40.34 61 39.68 61 39 61 C37.75 59.52 36.5 58.04 35.32 56.51 C33.88 54.73 33.88 54.73 31 53 C31 52.34 31 51.68 31 51 C30.34 51 29.68 51 29 51 C27.51 49.3 26.08 47.54 24.69 45.75 C21.71 41.93 18.79 39 15 36 C13.69 33.25 13.69 33.25 13 31 C12.34 31 11.68 31 11 31 C11 30.01 11 29.02 11 28 C9.68 28 8.36 28 7 28 C4.31 25.58 1.99 22.99 -0.38 20.25 C-2.87 17.69 -2.87 17.69 -6.5 17.56 C-10 17 -10 17 -12.88 14.38 C-15.16 10.75 -15.75 8.24 -16 4 C-11.12 0.74 -5.96 -1.58 0 0 Z \",fill:\"#421F4F\",transform:\"translate(771,110)\"})),_path348||(_path348=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75 0.06 2.75 0.06 6 1 C10.09 6.72 11.26 12.64 12.69 19.44 C15.18 30.6 18.74 41.03 22.95 51.65 C24.35 55.23 25.68 58.82 26.87 62.47 C27.26 63.65 27.26 63.65 27.65 64.86 C28 67 28 67 26.38 70.5 C24 73 24 73 21 75 C18.48 74.97 18.48 74.97 16 74 C14.5 71.66 14.5 71.66 13.28 68.56 C12.6 66.86 12.6 66.86 11.9 65.12 C11.44 63.91 10.98 62.69 10.5 61.44 C10.01 60.19 9.53 58.94 9.04 57.69 C7.66 54.14 6.32 50.57 5 47 C4.53 45.74 4.53 45.74 4.04 44.45 C-0.7 31.56 -5.18 13.27 0 0 Z \",fill:\"#311244\",transform:\"translate(385,919)\"})),_path349||(_path349=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 5 3 C8.11 2.95 8.11 2.95 11.5 2.5 C17.67 1.78 17.67 1.78 21 4 C22.95 4.21 22.95 4.21 25.05 4.05 C26.22 4.02 26.22 4.02 27.42 3.98 C29.05 3.91 30.68 3.83 32.31 3.75 C36.31 3.63 38.44 3.67 41.96 5.74 C44 8 44.88 9.42 45.69 12.31 C45.92 13.1 46.16 13.89 46.41 14.7 C46.91 16.66 47.31 18.64 47.69 20.62 C49.33 24.84 51.61 26.46 55.04 29.27 C60.57 34.14 61.66 40.18 63.21 47.09 C63.93 49.75 64.8 51.7 66.19 54.06 C69.84 60.92 68.43 68.24 66.44 75.44 C63.29 84.75 58.76 94.77 50 100 C45.54 101.72 41.76 102.23 37 102 C36.67 101.01 36.34 100.02 36 99 C32.25 97.38 29.06 96.58 25 97 C22.26 98.5 22.26 98.5 19.69 100.5 C18.36 101.47 18.36 101.47 17.01 102.47 C16.35 102.97 15.68 103.48 15 104 C14.34 103.67 13.68 103.34 13 103 C27.9 87.7 27.9 87.7 36.19 86.56 C39 87 39 87 40.88 88.56 C43.67 90.45 45.79 90.2 49.04 89.64 C54.28 87.93 57.38 82.55 60 78 C62.74 71.6 64.4 65.64 61.79 58.86 C61.26 57.83 60.73 56.81 60.19 55.75 C58.11 51.52 56.48 47.58 55.38 43 C54.34 38.83 53.22 36.01 50 33 C49.01 32.67 48.02 32.34 47 32 C47 31.34 47 30.68 47 30 C46.34 30 45.68 30 45 30 C45 29.34 45 28.68 45 28 C44.01 27.67 43.02 27.34 42 27 C40.05 24.01 39.51 20.99 38.94 17.5 C38.4 14.29 37.84 11.14 37 8 C31.48 7.32 26.28 6.83 20.75 7.56 C16.33 8.12 13.28 7.3 9 6 C5.66 5.83 2.34 5.88 -1 6 C-1.66 4.68 -2.32 3.36 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(1104,1040)\"})),_path350||(_path350=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 2.49 8.18 5.63 12 9 C12.87 9.77 13.74 10.53 14.63 11.32 C16.28 12.8 17.91 14.29 19.54 15.79 C26.6 22.49 26.6 22.49 35 27 C35.84 29.21 35.84 29.21 36.5 31.94 C37.47 36.27 37.47 36.27 41 39 C41 39.99 41 40.98 41 42 C40.34 42 39.68 42 39 42 C39 41.34 39 40.68 39 40 C35.87 40.67 35.87 40.67 34.79 43.14 C34.4 44.02 34.02 44.91 33.62 45.81 C31.64 49.95 30.15 52.73 26 55 C22.46 56.16 20.19 56.48 16.69 55.08 C12.52 52.86 9.24 50.47 6 47 C5.2 46.55 4.39 46.09 3.56 45.62 C1.23 44.14 0.07 43.04 -1.62 40.94 C-4.8 37.01 -7.13 35.79 -12 35 C-12 34.34 -12 33.68 -12 33 C-13.32 33 -14.64 33 -16 33 C-16 32.34 -16 31.68 -16 31 C-16.72 30.75 -17.44 30.5 -18.19 30.25 C-21.4 28.82 -23.54 27.53 -26 25 C-27.2 20.39 -27.02 16.63 -26 12 C-25.67 12 -25.34 12 -25 12 C-24.73 10.89 -24.46 9.77 -24.19 8.62 C-23 5 -23 5 -20 3 C-19.67 3.66 -19.34 4.32 -19 5 C-18.61 4.55 -18.22 4.09 -17.81 3.62 C-12.9 -0.78 -6.23 -1.3 0 0 Z M-14 13 C-15.33 17.45 -15.09 21.51 -14 26 C-11.14 29.7 -7.73 32.22 -4 35 C-2.33 36.66 -0.66 38.33 1 40 C3.02 41.8 5.1 43.53 7.19 45.25 C7.99 45.92 7.99 45.92 8.8 46.6 C12.95 50.04 15.41 51.51 20.96 51.5 C23.64 50.84 24.34 49.81 25.88 47.56 C26.24 46.92 26.61 46.29 26.99 45.63 C28 44 28 44 30 43 C31.51 39.23 31.52 34.98 31 31 C28.57 25.37 24.72 23.44 19.44 20.88 C16.81 19.77 16.81 19.77 13 20 C12.67 19.01 12.34 18.02 12 17 C9.79 15.35 9.79 15.35 7.12 13.88 C6.24 13.36 5.36 12.84 4.45 12.3 C-1.81 8.97 -8.37 8.43 -14 13 Z \",fill:\"#472960\",transform:\"translate(847,101)\"})),_path351||(_path351=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.51 2.11 2.51 2.11 5 5 C5.27 8.11 5.27 8.11 4.81 11.31 C4.67 12.38 4.54 13.45 4.39 14.55 C4.26 15.36 4.13 16.17 4 17 C4.66 17 5.32 17 6 17 C6.33 16.34 6.66 15.68 7 15 C12.59 19.84 14.49 24.54 15.56 31.81 C15.41 36.63 12.8 40.2 10.39 44.25 C8.68 47.63 8.41 50.4 8.18 54.12 C8 56 8 56 7 58.5 C3.77 60.92 -0.02 61.22 -4 61 C-7.24 58.84 -7.85 57.4 -9.24 53.88 C-9.96 52.11 -10.82 50.39 -11.69 48.69 C-13 46 -13 46 -13 44 C-13.66 43.67 -14.32 43.34 -15 43 C-14.29 41.29 -13.58 39.58 -12.88 37.88 C-12.42 36.77 -11.96 35.67 -11.5 34.54 C-10.52 32.24 -9.52 29.95 -8.47 27.68 C-4.35 18.64 -2 9.71 0 0 Z \",fill:\"#230F37\",transform:\"translate(920,368)\"})),_path352||(_path352=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.58 2.23 1.15 2.45 1.75 2.69 C6.08 5.21 8.72 9.21 10 14 C10.15 17.34 10.12 20.66 10 24 C1.65 23.11 -6.67 22.05 -15 21 C-15 21.66 -15 22.32 -15 23 C-26.06 24.59 -26.06 24.59 -30 22 C-31.12 19.94 -31.12 19.94 -32 18 C-32.99 17.67 -33.98 17.34 -35 17 C-37.24 13.06 -38.25 11.04 -37.19 6.56 C-36.8 5.72 -36.4 4.87 -36 4 C-36.66 3.67 -37.32 3.34 -38 3 C-11.81 -5.11 -11.81 -5.11 0 0 Z \",fill:\"#846E8F\",transform:\"translate(672,263)\"})),_path353||(_path353=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.25 -0.67 11.76 1.42 18 5 C18 5.66 18 6.32 18 7 C19.32 7 20.64 7 22 7 C23.66 4.59 23.66 4.59 25 2 C28.32 0.34 31.17 1.81 34.62 2.8 C40.65 4.94 46.26 7.92 51.92 10.9 C54 12 56.09 13.08 58.18 14.16 C59.52 14.86 60.85 15.55 62.19 16.25 C62.8 16.57 63.41 16.88 64.04 17.21 C72.89 21.91 72.89 21.91 75.06 26 C75 28 75 28 73.25 30.12 C71 32 71 32 68 34 C68.5 36.48 68.5 36.48 69 39 C70.49 39.5 70.49 39.5 72 40 C71.5 40.99 71.5 40.99 71 42 C56.56 33.51 56.56 33.51 50.75 29.25 C45.38 25.39 38.78 21 32 21 C31.23 20.13 31.23 20.13 30.44 19.25 C27.91 16.92 26.24 16.22 23.06 15.06 C18.66 13.41 16.13 11.58 13 8 C8.86 4.08 5.46 3.11 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#220C37\",transform:\"translate(937,699)\"})),_path354||(_path354=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.15 0.02 2.3 0.04 3.49 0.05 C4.36 0.08 5.23 0.1 6.12 0.12 C6.46 1.12 6.78 2.11 7.12 3.12 C7.86 3.02 8.59 2.92 9.35 2.82 C12.12 3.12 12.12 3.12 14.37 5.21 C16.64 8.17 18.91 11.12 21.12 14.12 C22 15.25 22 15.25 22.9 16.4 C31.94 28.72 34.97 47.15 34.12 62.12 C33.13 61.63 33.13 61.63 32.12 61.12 C31.59 59.21 31.59 59.21 31.2 56.71 C30.96 55.35 30.96 55.35 30.72 53.96 C30.41 52.06 30.1 50.15 29.8 48.24 C28.88 42.93 27.66 38.51 25.02 33.78 C24.12 32.12 24.12 32.12 23.12 29.12 C22.13 28.8 21.14 28.46 20.12 28.12 C19.63 27.13 19.63 27.13 19.12 26.12 C17.17 26.27 15.21 26.41 13.25 26.56 C11.61 26.68 11.61 26.68 9.95 26.81 C7.18 26.96 7.18 26.96 5.12 28.12 C0.61 28.66 -2.77 28.99 -6.44 26.12 C-6.91 25.46 -7.39 24.81 -7.88 24.12 C-8.21 24.45 -8.53 24.79 -8.88 25.12 C-8.78 27.32 -8.63 29.5 -8.44 31.69 C-8.28 33.48 -8.28 33.48 -8.13 35.32 C-8.05 36.24 -7.96 37.17 -7.88 38.12 C-11.37 34.63 -11.81 29.83 -12 25.06 C-9.92 19.64 -5.12 16.27 -0.06 13.69 C2.12 13.12 2.12 13.12 5.12 13.12 C5.12 12.13 5.12 11.14 5.12 10.12 C-1.1 12.12 -5.98 14.75 -10.88 19.12 C-12.26 21.89 -11.97 24.17 -11.94 27.25 C-11.92 28.89 -11.92 28.89 -11.91 30.57 C-11.9 31.41 -11.89 32.26 -11.88 33.12 C-15.27 28.04 -15.03 22.68 -15.06 16.69 C-15.08 15.43 -15.09 14.17 -15.11 12.88 C-14.86 8.9 -14.46 5.8 -12.88 2.12 C-8.67 -0.11 -4.69 -0.1 0 0 Z \",fill:\"#4A2E63\",transform:\"translate(624.875,1075.875)\"})),_path355||(_path355=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C2.99 3.33 3.98 3.66 5 4 C10.53 10.89 14.86 17.41 14.97 26.46 C15 29.09 15.37 31.43 15.94 34 C16.09 34.7 16.24 35.4 16.4 36.12 C17 38.3 17 38.3 19 41 C22.31 50.12 23.86 59.82 20 69 C15.37 73.4 12.14 74.16 6 74.62 C5.34 74.75 4.68 74.87 4 75 C3.67 75.66 3.34 76.32 3 77 C1.34 78.02 -0.32 79.02 -2 80 C-2.66 80.66 -3.32 81.32 -4 82 C-6.53 82.16 -6.53 82.16 -9.5 82.06 C-13.4 81.83 -13.4 81.83 -17 83 C-22.4 83.65 -25.69 82.67 -30.07 79.7 C-34 76.24 -37 71.65 -38.84 66.77 C-39.88 64.74 -39.88 64.74 -42.38 64.39 C-43.29 64.34 -44.19 64.3 -45.12 64.25 C-46.49 64.16 -46.49 64.16 -47.88 64.08 C-48.58 64.05 -49.28 64.03 -50 64 C-50 61 -50 61 -49 60 C-43.21 59.43 -40.52 60.41 -36 64 C-35.36 64.61 -34.72 65.23 -34.06 65.86 C-30.08 69.88 -30.08 69.88 -24.81 71.19 C-21.89 70.13 -21.89 70.13 -19.62 67.88 C-16.71 65.79 -16.19 65.78 -12.81 66.19 C-9 67 -9 67 -7 68 C-0.24 68.48 5.13 66.18 11 63 C15.34 58.56 15.74 53.96 16 48 C15.34 48 14.68 48 14 48 C13.94 46.8 13.94 46.8 13.89 45.58 C13.23 34.64 11.59 24.55 6 15 C5.34 14.67 4.68 14.34 4 14 C4 13.34 4 12.68 4 12 C3.34 12 2.68 12 2 12 C1.34 8.04 0.68 4.08 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(893,145)\"})),_path356||(_path356=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.22 4.05 8.92 8.28 12.5 13.81 C13.45 15.24 14.4 16.66 15.35 18.08 C16.03 19.09 16.03 19.09 16.72 20.13 C18.35 22.51 20.09 24.8 21.88 27.06 C22.41 27.74 22.94 28.42 23.5 29.12 C24.49 30.37 25.51 31.6 26.54 32.81 C30.16 37.34 30.58 40.22 30 46 C29.67 46.99 29.34 47.98 29 49 C28.58 54.68 29.67 58.77 31.75 63.94 C32.02 64.64 32.29 65.34 32.57 66.06 C34.46 70.85 36.55 75.47 39 80 C40.98 79.01 40.98 79.01 43 78 C43 80.31 43 82.62 43 85 C40.75 85.75 40.75 85.75 38 86 C35.69 84.19 35.69 84.19 34 82 C34 81.34 34 80.68 34 80 C33.41 79.72 32.82 79.44 32.21 79.15 C23.37 74.54 18.87 66.74 15.84 57.46 C15.19 55.13 14.55 52.8 13.96 50.46 C13.06 47.22 11.98 44.17 10.78 41.05 C6.78 30.53 4.55 22.17 6 10.91 C6.25 8.01 6.25 8.01 4.75 5.87 C2.92 4.04 2.92 4.04 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#311540\",transform:\"translate(1183,706)\"})),_path357||(_path357=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.21 2.56 3.96 3.74 4.67 7.89 C5.24 10.37 5.59 11.64 7.51 13.34 C9.45 14.44 11.39 15.37 13.44 16.25 C21.99 20.17 21.99 20.17 24 24 C23.93 27.36 23.45 29.34 21.56 32.12 C18.33 34.49 14.99 35.72 11.24 37.07 C8.85 37.89 8.85 37.89 7 40 C6.52 48.4 7.91 56.22 13 63 C18.56 69.09 24.4 74.62 32 78 C32 78.66 32 79.32 32 80 C32.99 80.33 33.98 80.66 35 81 C32.75 81.14 30.5 81.23 28.25 81.31 C27 81.37 25.74 81.43 24.45 81.49 C21 81 21 81 18.61 78.65 C17 76 17 76 16 73.25 C15.67 72.51 15.34 71.76 15 71 C14.37 70.85 13.75 70.71 13.1 70.55 C9.86 69.7 8.9 67.66 7.11 64.97 C4.53 60.38 4 56.14 4 51 C3.34 50.01 2.68 49.02 2 48 C-1.94 41.35 -1.94 41.35 -2.12 37.31 C-0.51 34 2.2 32.34 5 30 C6.1 27.17 6.25 25.82 5.36 22.93 C4.11 20.74 4.11 20.74 1.36 20.16 C0.31 19.99 -0.74 19.81 -1.81 19.62 C-8.47 18.21 -8.47 18.21 -10.88 14.81 C-11.58 13.88 -12.28 12.96 -13 12 C-16.21 11.5 -16.21 11.5 -19 12 C-17.53 8.44 -15.63 6.56 -12.62 4.19 C-11.85 3.56 -11.08 2.94 -10.29 2.29 C-8 1 -8 1 -5.85 1.36 C-5.24 1.57 -4.63 1.78 -4 2 C-1.78 1.14 -1.78 1.14 0 0 Z \",fill:\"#846A89\",transform:\"translate(631,541)\"})),_path358||(_path358=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.14 2.09 4.2 3.88 5.96 7.14 C7.09 9.24 7.09 9.24 9.12 11.94 C11.74 16.2 12.6 20.52 13.39 25.38 C14.37 31.12 16.15 35.49 18.89 40.61 C20.51 44.11 20.74 47.16 21 51 C21.19 51.66 21.37 52.32 21.56 53 C22.3 56.37 22.61 59.6 22 63 C19.75 66 19.75 66 17 68 C15.68 68 14.36 68 13 68 C13 67.34 13 66.68 13 66 C11.38 64.77 9.7 63.62 8 62.5 C6.3 61.38 4.62 60.23 3 59 C3 58.34 3 57.68 3 57 C1.68 57.66 0.36 58.32 -1 59 C-1.31 58.19 -1.62 57.37 -1.93 56.54 C-7.09 44.64 -15.58 36.7 -25 28 C-21.28 28 -20.73 28.84 -18.06 31.31 C-14.21 34.88 -14.21 34.88 -10 38 C-6.63 37.76 -5.41 37.41 -3 35 C-1.79 34.07 -1.79 34.07 -0.56 33.12 C2.03 31.15 2.03 31.15 3.62 28.75 C4.08 28.17 4.53 27.59 5 27 C5.99 27 6.98 27 8 27 C8 23.37 8 19.74 8 16 C7.34 16 6.68 16 6 16 C5.88 15.13 5.88 15.13 5.75 14.25 C5.16 11.84 5.16 11.84 3 10.25 C0.09 6.98 0.29 4.32 0 0 Z \",fill:\"#442254\",transform:\"translate(882,128)\"})),_path359||(_path359=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.17 4.63 1.33 9.25 1.48 13.88 C1.54 15.45 1.59 17.03 1.65 18.6 C1.73 20.86 1.81 23.13 1.88 25.39 C1.91 26.09 1.93 26.79 1.96 27.52 C2.15 33.89 2.15 33.89 1 37 C-1.47 39.58 -3.96 40.29 -7.31 41.19 C-12.19 42.68 -14.33 45.3 -17.45 49.19 C-19.47 51.55 -20.93 52.46 -24 53 C-30.32 52.73 -33.29 50.72 -37.75 46.62 C-38.59 45.88 -38.59 45.88 -39.46 45.12 C-46.59 38.82 -46.59 38.82 -48 36 C-49.66 35.32 -51.33 34.65 -53 34 C-55.46 32.79 -57.67 31.48 -60 30 C-60.33 29.01 -60.66 28.02 -61 27 C-61.85 26.34 -62.69 25.68 -63.56 25 C-64.37 24.34 -65.17 23.68 -66 23 C-66 22.01 -66 21.02 -66 20 C-67.18 19.54 -67.18 19.54 -68.38 19.06 C-72.88 17.24 -72.88 17.24 -74.19 14.62 C-75 12 -75 12 -74 9 C-70.81 8.12 -70.81 8.12 -67 8 C-62.71 11.78 -60.63 16.47 -58.31 21.63 C-55.11 27.43 -50.86 29.19 -44.83 31.25 C-39.96 32.54 -35.84 32.61 -31 31 C-27.32 30.87 -24.51 30.83 -21 32 C-14.4 32.61 -8.88 32.15 -3 29 C-0.73 24.17 -0.79 19.71 -0.94 14.5 C-1.06 9.52 -1 4.92 0 0 Z \",fill:\"#341546\",transform:\"translate(918,204)\"})),_path360||(_path360=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.34 3.5 2.43 4.88 2 9 C0.64 11.39 0.64 11.39 -1.19 13.69 C-8.17 23.13 -11.46 33.94 -15 45 C-15.68 47.11 -16.37 49.21 -17.06 51.31 C-17.34 52.17 -17.62 53.04 -17.91 53.93 C-18.51 55.61 -19.13 57.3 -19.85 58.94 C-23.17 66.65 -25.07 74.64 -27.06 82.77 C-31.19 99.56 -35.86 116.06 -41.22 132.5 C-41.48 133.33 -41.73 134.15 -42 135 C-42.35 136.06 -42.35 136.06 -42.7 137.14 C-43.23 139.28 -43.23 139.28 -41.5 142.06 C-39.21 145.24 -39.21 145.24 -35.56 146.25 C-30.89 148.54 -30.23 151.08 -28.18 155.68 C-26.64 158.71 -25.2 159.88 -22 161 C-21.13 161 -20.27 161 -19.38 161 C-17 161 -17 161 -15.19 162.5 C-14.6 163.24 -14.6 163.24 -14 164 C-17.47 164.99 -17.47 164.99 -21 166 C-21.5 165.01 -21.5 165.01 -22 164 C-23.32 164.33 -24.64 164.66 -26 165 C-25.34 166.32 -24.68 167.64 -24 169 C-27 169 -27 169 -29.38 166.81 C-30.24 165.88 -31.11 164.96 -32 164 C-32.89 163.15 -33.77 162.31 -34.69 161.44 C-36.71 159.3 -37.9 157.69 -39 155 C-38.34 155 -37.68 155 -37 155 C-39.06 149.19 -39.06 149.19 -44 146 C-45.75 142.88 -45.75 142.88 -47 140 C-48.65 140 -50.3 140 -52 140 C-51.67 136.37 -51.34 132.74 -51 129 C-50.01 129.33 -49.02 129.66 -48 130 C-47.87 129.41 -47.74 128.82 -47.61 128.21 C-47 126 -47 126 -45.31 122.69 C-39.88 111.87 -36.53 101.58 -34.06 89.75 C-31.84 79.13 -28.96 69.24 -24.89 59.2 C-23.69 56.23 -22.53 53.24 -21.37 50.25 C-20.8 48.76 -20.22 47.28 -19.64 45.8 C-17.41 40.1 -15.25 34.37 -13.12 28.62 C-12.68 27.42 -12.68 27.42 -12.22 26.19 C-11.94 25.44 -11.67 24.69 -11.38 23.91 C-11.14 23.25 -10.9 22.59 -10.65 21.91 C-9.26 17.79 -8.89 14.3 -8.94 9.94 C-8.95 8.89 -8.96 7.85 -8.96 6.78 C-8.98 5.86 -8.99 4.94 -9 4 C-9 3.01 -9 2.02 -9 1 C-5.64 -0.58 -3.5 -1.57 0 0 Z \",fill:\"#624268\",transform:\"translate(560,153)\"})),_path361||(_path361=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 2.91 2.67 4.92 3.56 8.25 C3.81 9.16 4.06 10.08 4.32 11.02 C5.77 17.38 6.19 23.6 6.27 30.1 C6.29 30.96 6.3 31.82 6.31 32.71 C6.63 59.48 6.59 88.65 -13.13 109.58 C-16 112 -16 112 -19.44 112.25 C-23.96 110.66 -26.58 108.26 -30 105 C-31.66 103.66 -33.32 102.32 -35 101 C-35.99 101.49 -35.99 101.49 -37 102 C-37 100.68 -37 99.36 -37 98 C-38.49 98.49 -38.49 98.49 -40 99 C-40 98.01 -40 97.02 -40 96 C-39.34 96 -38.68 96 -38 96 C-38 95.34 -38 94.68 -38 94 C-38.66 94 -39.32 94 -40 94 C-41.53 89.42 -41.92 84.21 -40.06 79.73 C-38.72 76.28 -38.3 72.84 -37.88 69.19 C-37.79 68.49 -37.7 67.8 -37.61 67.09 C-37.4 65.39 -37.2 63.7 -37 62 C-36.67 62 -36.34 62 -36 62 C-35.67 64.31 -35.34 66.62 -35 69 C-34.67 69 -34.34 69 -34 69 C-33.67 71.97 -33.34 74.94 -33 78 C-32.67 76.35 -32.34 74.7 -32 73 C-31.67 73 -31.34 73 -31 73 C-30.89 73.61 -30.78 74.23 -30.67 74.86 C-30.51 75.67 -30.35 76.48 -30.19 77.31 C-30.04 78.11 -29.89 78.91 -29.73 79.74 C-28.89 82.35 -28.16 83.34 -26 85 C-23.61 86.14 -23.61 86.14 -21 87.06 C-17.97 88.19 -15.72 89.19 -13 91 C-10.5 91.48 -10.5 91.48 -8 91 C-2.15 85.62 -0.24 77.41 1.38 69.94 C1.63 68.78 1.88 67.63 2.14 66.43 C3.99 57.01 4.57 47.82 4.56 38.25 C4.56 36.96 4.57 35.66 4.57 34.33 C4.43 26.36 3.42 18.97 1.7 11.23 C0.89 7.49 0.39 3.81 0 0 Z \",fill:\"#482859\",transform:\"translate(654,1104)\"})),_path362||(_path362=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.26 2.7 4.72 5.14 6.06 9.12 C6.39 10.08 6.71 11.04 7.05 12.03 C8.43 16.34 9.76 20.65 11 25 C10.34 25 9.68 25 9 25 C8.62 24.25 8.25 23.5 7.86 22.73 C4.1 15.4 4.1 15.4 -2 10 C-2.5 9.4 -2.99 8.8 -3.5 8.19 C-4 7.8 -4.49 7.4 -5 7 C-8.56 7.46 -11.49 8.6 -14.76 10.03 C-22.29 12.83 -29.91 12.53 -37.81 12.5 C-40.74 12.49 -43.66 12.5 -46.58 12.53 C-47.86 12.53 -49.14 12.52 -50.46 12.52 C-54.63 13.09 -56.79 14.31 -60 17 C-60.78 20.06 -60.95 22.86 -61.09 26 C-61.76 34.91 -64.72 44.47 -71 51 C-72.2 51.62 -73.42 52.22 -74.64 52.8 C-77.95 54.56 -77.96 54.87 -79.23 58.79 C-79.43 60.25 -79.61 61.72 -79.75 63.19 C-79.96 64.73 -80.18 66.28 -80.4 67.82 C-80.5 68.56 -80.6 69.29 -80.7 70.04 C-81.29 73.89 -82.62 77.38 -84 81 C-85.01 83.74 -86.01 86.5 -87 89.25 C-87.4 90.36 -87.4 90.36 -87.81 91.5 C-89.34 95.83 -90.51 100.04 -91.38 104.56 C-93.11 112.73 -97.06 119.72 -101 127 C-101.69 128.3 -102.39 129.6 -103.08 130.91 C-104.7 133.95 -106.34 136.98 -108 140 C-109.2 136.47 -108.8 133.87 -108.06 130.25 C-107.87 129.27 -107.67 128.28 -107.47 127.27 C-107.32 126.52 -107.16 125.77 -107 125 C-106.34 125 -105.68 125 -105 125 C-104.9 124.15 -104.8 123.29 -104.7 122.41 C-103.93 118.66 -102.61 115.85 -100.88 112.44 C-97.39 105.33 -94.86 98.04 -92.49 90.5 C-91.15 86.29 -89.72 82.29 -87.82 78.3 C-86.07 74.48 -85.54 71.36 -85.5 67.12 C-85.19 60.1 -84.18 52.18 -79 47 C-77.51 46.67 -76.01 46.41 -74.5 46.19 C-72.1 45.75 -72.1 45.75 -70 45 C-68.41 42.74 -68.41 42.74 -68 40 C-67.65 39.28 -67.3 38.56 -66.94 37.81 C-65.94 34.82 -66 32.5 -66.23 29.38 C-66.69 22.79 -66.52 18.54 -62.19 13.19 C-60.83 11.75 -59.44 10.35 -58 9 C-57.46 8.41 -56.92 7.83 -56.37 7.22 C-55.92 6.82 -55.47 6.42 -55 6 C-52.86 6.25 -51.54 6.46 -50 8 C-45 8.23 -40 8.1 -35 8 C-33.28 7.97 -33.28 7.97 -31.54 7.95 C-22.7 7.57 -15.62 4.97 -7.85 0.86 C-5.07 -0.43 -3.02 -0.38 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(628,154)\"})),_path363||(_path363=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.72 1.07 3.92 1.88 5.62 4.31 C8.55 7.63 11.53 8.84 15.5 10.68 C17.88 11.94 19.46 13.19 21.38 15.06 C24.34 17.83 27.06 18.8 30.94 19.94 C41.42 23.16 46.54 30.58 52.73 39.25 C54.12 41.16 55.53 43.05 56.95 44.93 C57.94 46.27 58.94 47.6 59.94 48.94 C60.41 49.56 60.88 50.19 61.37 50.84 C63.78 54.09 65.82 57.07 67 61 C66.62 63.31 66.62 63.31 66 65 C62.54 65.99 62.54 65.99 59 67 C57 65 57 65 56.12 63.12 C55.07 60.86 55.07 60.86 52.94 59.06 C50.71 56.69 50.35 55.18 50 52 C49.34 52 48.68 52 48 52 C47.65 51.32 47.3 50.64 46.94 49.94 C44.53 46.29 41.64 44.22 38.16 41.65 C36.26 40.2 34.67 38.68 33 37 C32.01 36.5 32.01 36.5 31 36 C30.67 35.01 30.34 34.02 30 33 C28.38 30.71 28.38 30.71 26 29 C25.03 29 24.06 29 23.06 29 C20 29 20 29 17.31 27.38 C15 25 15 25 13.56 22.06 C10.65 16.35 5.7 13.58 0 11 C0 8 0 5 0 2 C1.48 2.99 1.48 2.99 3 4 C2.01 2.68 1.02 1.36 0 0 Z \",fill:\"#3C194D\",transform:\"translate(1135,779)\"})),_path364||(_path364=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3 2 -3 2 -5.62 2.75 C-10.27 4.47 -13.96 7.17 -18 10 C-18.87 10.59 -19.73 11.17 -20.62 11.77 C-27.08 16.17 -31.97 20.23 -36 27 C-39.52 29.35 -41.89 29.55 -46.06 30.06 C-50.69 30.51 -50.69 30.51 -55 32 C-57.84 32.31 -60.65 32.56 -63.5 32.75 C-64.68 32.85 -64.68 32.85 -65.88 32.96 C-68.16 33.11 -68.16 33.11 -72 33 C-74.01 29.98 -74.2 29.04 -74.56 25.62 C-75.17 22.54 -75.52 21.36 -78.06 19.44 C-80.47 18.17 -80.47 18.17 -82.91 17.17 C-85.39 15.78 -85.99 14.61 -87 12 C-86.19 12.51 -86.19 12.51 -85.37 13.02 C-82.34 14.27 -80.35 14 -77.11 13.64 C-72.46 13.2 -67.87 12.9 -63.2 12.82 C-43.75 12.47 -28.07 10.22 -10.41 1.76 C-9.61 1.38 -8.82 1.01 -8 0.62 C-7.32 0.29 -6.64 -0.05 -5.94 -0.4 C-3.59 -1.13 -2.29 -0.79 0 0 Z \",fill:\"#846E8F\",transform:\"translate(793,723)\"})),_path365||(_path365=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.39 1.2 -0.78 2.39 -1.19 3.62 C-1.99 6.88 -2.04 7.87 -0.94 11.19 C2.55 16.53 2.55 16.53 7.96 19.57 C11.54 20.09 14.56 20.06 18 19 C18.66 19.33 19.32 19.66 20 20 C20 19.34 20 18.68 20 18 C28.52 18.4 36.72 18.78 45 21 C46.85 26.47 47.25 31.19 47.12 36.94 C47.12 37.72 47.11 38.5 47.1 39.3 C47.07 41.2 47.04 43.1 47 45 C38.97 44.16 33.03 41.44 27 36 C27 35.34 27 34.68 27 34 C26.42 33.71 25.85 33.42 25.25 33.12 C23.86 32.43 22.48 31.7 21.12 30.94 C18.79 29.91 17.34 29.79 14.81 29.88 C14.03 29.89 13.25 29.91 12.45 29.92 C11.64 29.95 10.83 29.97 10 30 C8.4 30.05 6.79 30.09 5.19 30.12 C4.48 30.15 3.77 30.17 3.04 30.2 C0.62 29.96 -0.95 29.29 -3 28 C-3.36 26.12 -3.36 26.12 -3.31 23.88 C-3.63 18.73 -5.74 16.38 -9.31 12.82 C-11.02 10.98 -11.99 9.29 -13 7 C-11.79 5.82 -10.55 4.66 -9.31 3.5 C-8.29 2.53 -8.29 2.53 -7.24 1.53 C-4.59 -0.28 -3.14 -0.31 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(637,266)\"})),_path366||(_path366=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.49 2.81 6.98 5.96 9 10 C8.94 12.33 8.85 14.67 8.75 17 C8.57 24.19 10.3 28.93 14 35 C14.33 35.99 14.66 36.98 15 38 C13.35 38.64 13.35 38.64 11.67 39.29 C3.83 42.37 -3.36 45.55 -10.36 50.29 C-14.98 53.28 -19.88 55.96 -25 58 C-25.66 57.67 -26.32 57.34 -27 57 C-26.34 56.01 -25.68 55.02 -25 54 C-25.26 51.97 -25.26 51.97 -26 50 C-27 47 -27 47 -26.31 43.31 C-25.68 39.01 -26.83 36.6 -28.94 32.9 C-30.35 30.38 -31.17 27.75 -32 25 C-29.71 24.76 -29.71 24.76 -27 25 C-25.23 26.62 -25.23 26.62 -23.62 28.88 C-23.04 29.69 -22.45 30.5 -21.85 31.34 C-21.24 32.22 -20.63 33.1 -20 34 C-19.34 34.91 -18.68 35.82 -18 36.75 C-13 43.69 -13 43.69 -13 46 C-11.89 45.34 -10.77 44.68 -9.62 44 C-6.25 42 -6.25 42 -4 42 C-4.35 41.13 -4.7 40.27 -5.06 39.38 C-6.11 35.61 -6.09 33.73 -5 30 C-4.3 29.03 -3.6 28.06 -2.88 27.06 C-0.72 24.11 -0.72 24.11 -0.88 20.56 C-2.12 16.61 -3.72 14.53 -6.53 11.58 C-8 10 -8 10 -10 7 C-9.81 4.44 -9.81 4.44 -9 2 C-5.37 -0.42 -4.27 -0.81 0 0 Z \",fill:\"#7A5E82\",transform:\"translate(805,725)\"})),_path367||(_path367=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.58 0.23 1.15 0.45 1.75 0.69 C-2.61 11.52 -22.18 19.08 -32.25 23.69 C-37.59 25.7 -43.03 27.26 -48.55 28.7 C-52.03 29.3 -52.03 29.3 -53.25 30.69 C-54.02 43.71 -53.79 58.24 -50.79 70.96 C-48.46 82.68 -47.9 94.77 -48.25 106.69 C-54.39 99.67 -55.32 90.03 -56.88 81.19 C-57.09 80 -57.31 78.82 -57.53 77.6 C-58.4 72.77 -59.26 67.96 -59.84 63.09 C-60.15 59.91 -60.15 59.91 -60.75 57.75 C-61.27 55.59 -61.52 53.53 -61.71 51.32 C-61.79 50.49 -61.87 49.67 -61.95 48.83 C-62.11 47.11 -62.26 45.4 -62.41 43.69 C-62.83 39.36 -63.31 35.65 -65.25 31.69 C-66.24 31.7 -67.22 31.71 -68.24 31.72 C-69.52 31.73 -70.8 31.74 -72.12 31.75 C-73.4 31.76 -74.68 31.77 -75.99 31.79 C-79.25 31.69 -79.25 31.69 -81.25 30.69 C-81.25 30.03 -81.25 29.37 -81.25 28.69 C-74.62 26.31 -68.47 25.29 -61.43 25 C-57.85 24.65 -54.7 23.69 -51.25 22.69 C-48.81 22.34 -46.38 22.01 -43.94 21.69 C-33.88 20.05 -25.79 15 -17.25 9.69 C-16.66 9.32 -16.06 8.96 -15.45 8.59 C-11.55 6.2 -7.68 3.83 -4.1 0.98 C-2.25 -0.31 -2.25 -0.31 0 0 Z \",fill:\"#160A1E\",transform:\"translate(720.25,597.3125)\"})),_path368||(_path368=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.13 5.82 -9.13 9.66 -15 13.56 C-23.2 18.97 -23.2 18.97 -30 26 C-30.13 28.87 -30.13 28.87 -29 31 C-19.91 32.1 -11 33.07 -2.12 30.45 C2.18 29.54 6.62 29.86 11 30 C11.99 31.98 11.99 31.98 13 34 C5.85 35.13 -1.14 36.06 -8.38 36.38 C-17.7 36.92 -27.06 38.76 -35.59 42.63 C-39 44 -39 44 -45 44 C-45.99 48.29 -46.98 52.58 -48 57 C-49.32 57 -50.64 57 -52 57 C-52.81 54.44 -52.81 54.44 -53 51 C-51.62 48.42 -49.9 46.22 -48 44 C-50.97 44.5 -50.97 44.5 -54 45 C-54.12 42.62 -54.12 42.62 -54 40 C-53.34 39.34 -52.68 38.68 -52 38 C-51.78 36.21 -51.78 36.21 -51.56 34.38 C-50.59 29.86 -48.14 28.27 -44.44 25.69 C-43.45 25.05 -42.45 24.42 -41.43 23.76 C-38.73 22.17 -38.73 22.17 -38 19 C-36.37 17.88 -36.37 17.88 -34.29 16.84 C-33.16 16.27 -33.16 16.27 -32.02 15.68 C-31.23 15.29 -30.44 14.9 -29.62 14.5 C-28.07 13.72 -26.52 12.94 -24.98 12.16 C-24.29 11.81 -23.6 11.47 -22.89 11.12 C-20.94 10.07 -20.94 10.07 -19.44 8.43 C-18 7 -18 7 -15 6 C-15 5.34 -15 4.68 -15 4 C-13.27 3.27 -11.54 2.54 -9.81 1.8 C-7.9 0.99 -7.9 0.99 -5.81 -0.25 C-3.5 -1.21 -2.36 -0.68 0 0 Z \",fill:\"#271039\",transform:\"translate(623,63)\"})),_path369||(_path369=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.69 4.8 5.09 11.22 6.5 17 C6.71 17.83 6.92 18.65 7.13 19.51 C7.76 22 8.38 24.5 9 27 C9.35 28.41 9.71 29.82 10.07 31.23 C11.42 36.61 12.75 41.99 14.07 47.38 C14.24 48.1 14.42 48.82 14.6 49.56 C14.94 50.94 15.27 52.31 15.61 53.69 C16.49 57.26 17.58 60.6 19 64 C19.49 65.5 19.97 67 20.44 68.5 C21.57 72 23.09 74.85 25 78 C24.67 78.66 24.34 79.32 24 80 C18.15 74.31 15.26 68.93 13.44 61 C13.02 59.32 12.61 57.64 12.2 55.96 C12 55.13 11.8 54.3 11.59 53.44 C10.71 49.8 9.77 46.18 8.81 42.56 C8.51 41.39 8.21 40.21 7.89 39 C7.14 36.46 6.29 34.31 5 32 C3.35 32 1.7 32 0 32 C-0.66 33.98 -1.32 35.96 -2 38 C-2.33 37.34 -2.66 36.68 -3 36 C-3.66 36 -4.32 36 -5 36 C-5.66 37.32 -6.32 38.64 -7 40 C-7 38.35 -7 36.7 -7 35 C-9.33 35.96 -9.33 35.96 -11 39 C-11.66 38.01 -12.32 37.02 -13 36 C-13.5 38.48 -13.5 38.48 -14 41 C-15.71 39.37 -16.93 38.13 -18 36 C-19.32 36 -20.64 36 -22 36 C-22.33 33.69 -22.66 31.38 -23 29 C-22.34 29.66 -21.68 30.32 -21 31 C-19.04 29.04 -18.19 27.46 -17 25 C-16.67 24.67 -16.34 24.34 -16 24 C-15.78 22.65 -15.6 21.29 -15.46 19.92 C-15.35 19.09 -15.25 18.26 -15.14 17.4 C-14.92 15.65 -14.73 13.9 -14.54 12.14 C-13.97 7.8 -13.49 4.89 -10.07 1.95 C-6.39 -0.39 -4.14 -1.66 0 0 Z \",fill:\"#341446\",transform:\"translate(883,521)\"})),_path370||(_path370=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.82 0 11.7 1.57 17 4 C20.52 11.05 17.74 22.14 15.61 29.44 C12.95 35.34 8.74 36.74 3 39 C2.29 39.54 1.57 40.08 0.84 40.64 C-1 42 -1 42 -3.94 41.94 C-7.55 40.83 -9.51 39.87 -12 37 C-11.62 30.3 -9.47 23.81 -7.69 17.38 C-7.39 16.26 -7.1 15.14 -6.79 13.98 C-6.49 12.9 -6.19 11.82 -5.89 10.71 C-5.49 9.25 -5.49 9.25 -5.08 7.75 C-3.83 4.56 -2.4 2.44 0 0 Z \",fill:\"#4A2F63\",transform:\"translate(335,1055)\"})),_path371||(_path371=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 1.07 1.72 1.07 3.5 2.69 C4.38 3.47 4.38 3.47 5.28 4.26 C13.53 12.6 14.42 26 14.56 37.25 C14.45 56.25 11.14 77.51 3.31 94.94 C1.89 97.88 1.89 97.88 1.62 100.81 C0.68 105.63 -1.69 109.69 -4 114 C-4.66 114 -5.32 114 -6 114 C-6.21 114.66 -6.41 115.32 -6.62 116 C-10 123.37 -15.85 129.79 -22 135 C-22.66 135 -23.32 135 -24 135 C-24.66 135.66 -25.32 136.32 -26 137 C-42.77 149 -42.77 149 -47 149 C-47 149.66 -47 150.32 -47 151 C-47.74 151.03 -48.47 151.05 -49.23 151.08 C-52.61 151.19 -55.99 151.32 -59.38 151.44 C-60.53 151.48 -61.69 151.52 -62.88 151.56 C-69.62 151.8 -76.3 152.22 -83 153 C-82.5 152.01 -82.5 152.01 -82 151 C-80.12 150.56 -80.12 150.56 -77.66 150.29 C-76.77 150.18 -75.87 150.07 -74.95 149.96 C-74 149.85 -73.04 149.74 -72.06 149.62 C-65.25 148.76 -59.06 147.86 -52.84 144.77 C-51 144 -51 144 -47 144 C-47 143.34 -47 142.68 -47 142 C-45.8 141.84 -44.61 141.67 -43.38 141.5 C-38.59 140.46 -34.7 138.41 -30.5 136 C-29.88 135.64 -29.25 135.29 -28.61 134.92 C-25.23 133.04 -25.23 133.04 -23 130 C-22.22 129.56 -21.44 129.12 -20.63 128.67 C-17.68 126.79 -16.63 125.28 -14.94 122.25 C-14.47 121.43 -14.01 120.61 -13.53 119.77 C-13.02 118.85 -12.52 117.94 -12 117 C-11.04 115.35 -11.04 115.35 -10.07 113.67 C-7.88 109.85 -5.9 105.94 -3.94 102 C-3.6 101.33 -3.26 100.65 -2.91 99.96 C0.49 93.14 3.32 86.49 5.06 79.06 C5.39 77.72 5.71 76.38 6.04 75.04 C6.19 74.37 6.35 73.7 6.51 73.02 C7 70.99 7.53 68.98 8.05 66.96 C11.94 51.4 12.86 33.63 9 18 C8.01 18 7.02 18 6 18 C5.97 19 5.95 20 5.92 21.02 C5.28 39.05 3.45 58.04 -3 75 C-3.33 75 -3.66 75 -4 75 C-4.05 72.98 -4.09 70.96 -4.12 68.94 C-4.15 67.81 -4.17 66.69 -4.2 65.53 C-3.98 61.72 -3.08 58.65 -2 55 C1.1 39.42 3.33 22.18 -2.38 6.95 C-3 5 -3 5 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#351547\",transform:\"translate(366,1022)\"})),_path372||(_path372=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.35 0.37 8.4 3.43 12.31 6.75 C16.79 10.52 21.22 13.9 26.29 16.83 C28.51 18.35 29.84 20.37 31.44 22.51 C34.86 25.78 39.65 27.28 44 29 C44 29.66 44 30.32 44 31 C44.76 31.23 45.53 31.45 46.31 31.69 C49.41 32.79 52.23 34.03 55.19 35.44 C59.96 37.66 64.66 39.13 69.79 40.32 C72 41 72 41 74 43 C73.84 43.95 73.67 44.9 73.5 45.88 C72.95 49.31 73.34 50.1 75 53 C65.03 53.3 57.72 49.89 49.23 45.23 C45.22 43.02 41.17 40.89 37.12 38.75 C35.91 38.1 35.91 38.1 34.67 37.44 C29.89 34.92 25.11 32.74 20.05 30.84 C11.03 27.15 0.39 19.74 -4 11 C-4 10.34 -4 9.68 -4 9 C0.26 9.53 2.45 10.85 5.69 13.62 C13.39 20 21.52 26.5 31 30 C31.66 29.67 32.32 29.34 33 29 C29.74 26.35 26.43 23.86 23 21.44 C18.53 18.21 14.27 14.81 10.06 11.25 C9.52 10.79 8.98 10.33 8.42 9.86 C5.49 7.35 2.58 4.86 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#241038\",transform:\"translate(788,245)\"})),_path373||(_path373=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.53 2.82 2.53 2.82 2.94 5.12 C4.33 12.44 4.33 12.44 8.56 18.27 C10.79 20.95 10.46 23.4 10.55 26.83 C10.58 27.83 10.58 27.83 10.61 28.85 C10.65 30.26 10.68 31.67 10.71 33.09 C10.75 35.23 10.81 37.37 10.88 39.51 C11.05 45.8 10.99 51.76 10 58 C9.94 59.48 9.91 60.96 9.94 62.44 C9.96 63.61 9.98 64.79 10 66 C10.99 66.5 10.99 66.5 12 67 C10.72 68.71 9.38 70.37 8 72 C7.34 72 6.68 72 6 72 C6.33 68.37 6.66 64.74 7 61 C6.52 61.79 6.04 62.59 5.54 63.41 C4.91 64.43 4.28 65.45 3.62 66.5 C3 67.52 2.37 68.54 1.73 69.59 C1.16 70.39 0.59 71.18 0 72 C-0.66 72 -1.32 72 -2 72 C-2.12 73.67 -2.12 73.67 -2.25 75.38 C-2.5 76.57 -2.75 77.77 -3 79 C-4.33 79.67 -5.67 80.33 -7 81 C-8.08 82.85 -8.08 82.85 -8.7 85.06 C-8.96 85.86 -9.22 86.66 -9.48 87.48 C-9.74 88.31 -9.99 89.14 -10.25 90 C-10.52 90.83 -10.79 91.67 -11.06 92.52 C-12.48 96.68 -12.48 96.68 -13 101 C-11.35 101 -9.7 101 -8 101 C-7.5 99.51 -7.5 99.51 -7 98 C-5.51 98.5 -5.51 98.5 -4 99 C-4.43 99.5 -4.87 99.99 -5.31 100.5 C-7.19 103.05 -7.19 103.05 -8.25 106.56 C-10.47 112.87 -14.27 119.27 -19 124 C-19.99 124 -20.98 124 -22 124 C-22 125.32 -22 126.64 -22 128 C-21.34 128.33 -20.68 128.66 -20 129 C-21.49 129.99 -21.49 129.99 -23 131 C-25.66 125.68 -23.98 117.67 -23 112 C-22.34 111.01 -21.68 110.02 -21 109 C-18.78 104.13 -16.98 99.19 -15.25 94.12 C-10.72 81.15 -5.77 68.88 1.27 57.05 C3.32 53.44 4.74 49.94 6 46 C5.13 46.66 4.27 47.32 3.38 48 C-0.23 50.13 -1.91 50.65 -6 50 C-6.66 49.01 -7.32 48.02 -8 47 C-7.37 46.75 -6.75 46.49 -6.1 46.23 C-5.28 45.89 -4.47 45.54 -3.62 45.19 C-2.81 44.85 -2 44.51 -1.16 44.17 C1.3 43.06 1.3 43.06 3 40 C3.61 36.71 3.47 34.76 1.69 31.9 C0.62 30.49 -0.47 29.1 -1.59 27.73 C-3 26 -3 26 -4 24 C-3.35 23.38 -2.69 22.75 -2.02 22.11 C0.8 17.76 0.45 14.25 0.25 9.19 C0.22 7.86 0.22 7.86 0.2 6.51 C0.15 4.34 0.08 2.17 0 0 Z \",fill:\"#351447\",transform:\"translate(555,668)\"})),_path374||(_path374=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.66 1.64 1.66 1.64 3.5 3.81 C4.11 4.52 4.72 5.23 5.34 5.96 C8.14 9.41 9.25 11.28 9.12 15.69 C9.11 16.5 9.09 17.3 9.07 18.14 C9.05 18.75 9.02 19.37 9 20 C14.43 21.1 19.67 21.02 25.17 20.79 C31.56 20.65 34.88 22.83 39.5 26.94 C42.27 29.37 45.1 31.71 48 34 C36.38 34.24 25.02 34.04 14 30 C16 28 16 28 18.5 27.77 C19.95 27.79 19.95 27.79 21.44 27.81 C22.41 27.82 23.37 27.83 24.37 27.83 C27 28 27 28 30 29 C30 28.34 30 27.68 30 27 C25.19 25.67 20.33 25.66 15.38 25.48 C10.92 25.27 7.21 24.65 3 23 C2.77 27.79 2.77 27.79 5 32 C-0.65 30.37 -0.65 30.37 -2.5 28.44 C-4.72 26.31 -7.02 26.33 -10 26 C-10.12 26.62 -10.25 27.24 -10.38 27.88 C-11 30 -11 30 -13 32 C-15.94 32.81 -15.94 32.81 -19 33 C-20.88 31.56 -20.88 31.56 -22 30 C-20.52 26.3 -19.22 23.3 -16.88 20.06 C-14.51 16.19 -14.31 13.49 -14 9 C-14.66 8.67 -15.32 8.34 -16 8 C-15.24 7.59 -14.48 7.18 -13.7 6.76 C-12.71 6.22 -11.71 5.68 -10.69 5.12 C-9.7 4.59 -8.72 4.06 -7.7 3.51 C-1.42 0 -1.42 0 0 0 Z \",fill:\"#624268\",transform:\"translate(625,274)\"})),_path375||(_path375=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.36 -0.46 5.36 -0.46 8.17 1.57 C8.83 2.3 9.49 3.02 10.17 3.76 C10.92 4.55 11.67 5.34 12.44 6.15 C13.58 7.41 13.58 7.41 14.75 8.69 C22.27 16.9 29.28 22.35 40.38 24.69 C43.92 25.45 46.77 26.38 50 28 C50.99 28 51.98 28 53 28 C53.5 26.51 53.5 26.51 54 25 C53.01 24.34 52.02 23.68 51 23 C51 22.01 51 21.02 51 20 C56.29 18.58 59.21 19.43 64 22 C66.5 23.75 66.5 23.75 68 26 C68 31.43 66.48 34 63 38 C62.27 39.64 61.61 41.31 61 43 C60.3 44.61 59.59 46.21 58.88 47.81 C58.52 48.6 58.17 49.39 57.8 50.21 C57.41 51.09 57.41 51.09 57 52 C56.01 51.4 55.03 50.81 54.01 50.19 C49.44 47.58 44.65 45.93 39.7 44.2 C32.43 41.6 32.43 41.6 30 39 C29.27 36.25 29.27 36.25 28.81 33 C26.52 21.93 18.55 15.11 10.26 7.97 C8 6 8 6 5.85 3.82 C3.99 1.99 2.38 1.02 0 0 Z \",fill:\"#0A113B\",transform:\"translate(936,762)\"})),_path376||(_path376=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.33 -1.98 0.66 -3 1 C-3.21 1.74 -3.41 2.48 -3.62 3.25 C-5.76 7.53 -9.72 9.12 -14 11 C-14.66 11 -15.32 11 -16 11 C-16 11.66 -16 12.32 -16 13 C-17.93 13.84 -19.87 14.67 -21.81 15.5 C-22.89 15.96 -23.97 16.43 -25.08 16.91 C-28 18 -28 18 -31 18 C-32.89 21.55 -34 25.13 -35.12 28.98 C-36 31 -36 31 -39 33 C-38.67 33.66 -38.34 34.32 -38 35 C-40.81 35.31 -43.62 35.62 -46.44 35.94 C-47.61 36.07 -47.61 36.07 -48.81 36.2 C-50.4 36.38 -51.99 36.55 -53.58 36.73 C-55.22 36.91 -56.85 37.11 -58.48 37.32 C-59.67 37.47 -59.67 37.47 -60.88 37.62 C-61.58 37.72 -62.29 37.81 -63.02 37.91 C-65.96 38.04 -68.33 37.16 -71 36 C-71.33 36.33 -71.66 36.66 -72 37 C-74.15 36.96 -76.29 36.84 -78.44 36.69 C-79.61 36.61 -80.79 36.53 -82 36.45 C-85 36 -85 36 -87 34 C-88.32 33.63 -89.66 33.29 -91 33 C-91.66 32.67 -92.32 32.34 -93 32 C-92.67 29.69 -92.34 27.38 -92 25 C-88.91 24.02 -86.88 24.02 -83.74 24.78 C-82.95 24.96 -82.16 25.14 -81.35 25.33 C-80.53 25.53 -79.72 25.73 -78.88 25.94 C-77.25 26.32 -75.62 26.71 -73.99 27.09 C-73.27 27.26 -72.56 27.44 -71.82 27.62 C-69.98 28.07 -69.98 28.07 -68 28 C-67.67 29.32 -67.34 30.64 -67 32 C-66.48 31.4 -65.97 30.8 -65.44 30.19 C-63 28 -63 28 -59.44 26.62 C-55.33 24.68 -54.62 23.14 -53 19 C-51.25 17.25 -48.83 17.46 -46.48 17.1 C-31.06 14.74 -14.18 -0.63 0 0 Z \",fill:\"#2C123E\",transform:\"translate(342,1133)\"})),_path377||(_path377=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.73 4.27 13.03 8.3 16 16 C16 16.66 16 17.32 16 18 C16.66 18 17.32 18 18 18 C19.62 20.5 19.62 20.5 21 23 C21 22.67 21 22.34 21 22 C20.34 21.34 19.68 20.68 19 20 C19.38 17.88 19.38 17.88 20 16 C20.99 17.65 21.98 19.3 23 21 C23.87 20.75 24.73 20.5 25.62 20.25 C29.99 19.93 31.63 21.36 35 24 C34.5 25.49 34.5 25.49 34 27 C34.99 27.99 35.98 28.98 37 30 C36.5 31.49 36.5 31.49 36 33 C37.22 33.1 38.43 33.21 39.69 33.31 C43.45 33.77 45.82 34.88 49 37 C49.7 37.16 50.4 37.33 51.12 37.5 C53 38 53 38 54.24 39.29 C60.32 45.2 68.98 49.3 76.86 52.2 C79.69 53.26 82.32 54.6 85 56 C86.11 56.56 87.23 57.11 88.38 57.69 C89.24 58.12 90.11 58.55 91 59 C88.33 60.33 86.83 59.67 84 59 C84 59.66 84 60.32 84 61 C80.71 59.78 78.02 58.44 75.19 56.38 C69.1 52.21 62.48 49.13 55.85 45.92 C53.41 44.71 51.03 43.41 48.62 42.12 C44.04 39.83 39.16 38.17 34 38 C32.05 39.95 31.15 41.53 30 44 C28.68 43.67 27.36 43.34 26 43 C26 42.34 26 41.68 26 41 C25.28 40.71 24.56 40.42 23.81 40.12 C22.11 39.44 20.41 38.74 18.73 37.99 C14.61 36.5 10.4 36.18 6.06 35.66 C2.92 34.98 1.36 34.12 -1 32 C-0.01 32 0.98 32 2 32 C2 30.68 2 29.36 2 28 C4.97 27.01 7.94 26.02 11 25 C11.57 21.76 11.48 19.71 9.62 16.96 C6.92 13.85 4.4 11.28 1 8.94 C0.34 8.3 -0.32 7.66 -1 7 C-0.81 3.25 -0.81 3.25 0 0 Z \",fill:\"#290F3D\",transform:\"translate(929,663)\"})),_path378||(_path378=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.02 0.77 -0.05 1.54 -0.07 2.34 C-0.09 3.34 -0.11 4.34 -0.12 5.38 C-0.15 6.37 -0.17 7.37 -0.2 8.4 C-0.27 11.16 -0.27 11.16 2 13 C4.69 13.27 7.29 13.09 10 13 C6.13 17.01 3.22 19.7 -2.19 21.19 C-7.07 22.71 -9.87 25.38 -13.54 28.86 C-18.3 33 -24.38 37.59 -30.78 38.31 C-31.51 38.21 -32.25 38.11 -33 38 C-33.41 37.34 -33.83 36.68 -34.25 36 C-35.79 33.77 -35.79 33.77 -38.08 33.84 C-39.67 33.9 -41.26 34.01 -42.84 34.15 C-45 34 -45 34 -46.78 32.5 C-47.18 32.01 -47.59 31.51 -48 31 C-43.83 26.52 -39.18 23.09 -34.19 19.56 C-32.64 18.46 -31.09 17.36 -29.54 16.25 C-28.79 15.72 -28.03 15.19 -27.25 14.64 C-25.74 13.54 -24.26 12.4 -22.82 11.22 C-20.92 9.68 -19.12 8.22 -17 7 C-14.29 7.34 -14.29 7.34 -12 8 C-9.53 6.65 -9.53 6.65 -7.31 4.62 C-1.83 0 -1.83 0 0 0 Z \",fill:\"#67486D\",transform:\"translate(801,547)\"})),_path379||(_path379=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.98 0.66 3.96 1 6 C1.99 6 2.98 6 4 6 C4 7.65 4 9.3 4 11 C4.91 10.9 5.82 10.79 6.75 10.69 C10 11 10 11 12.38 13.06 C15.26 18.28 14.1 23.44 12.58 28.95 C12.29 29.93 12.29 29.93 12 30.94 C11.71 31.96 11.71 31.96 11.42 33.01 C10.96 34.68 10.48 36.34 10 38 C10.66 38.33 11.32 38.66 12 39 C5.9 42.81 0.66 45.13 -6.62 44.88 C-10.41 43.89 -12.82 42.22 -16 40 C-15.69 39.08 -15.37 38.15 -15.05 37.2 C-12.14 28.42 -9.97 19.68 -8.34 10.57 C-8.2 9.75 -8.05 8.94 -7.89 8.11 C-7.77 7.39 -7.64 6.66 -7.51 5.92 C-7 4 -7 4 -5 1 C-5 1.66 -5 2.32 -5 3 C-4.36 2.5 -3.72 2.01 -3.06 1.5 C-1 0 -1 0 0 0 Z \",fill:\"#715376\",transform:\"translate(548,363)\"})),_path380||(_path380=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.88 4.05 1.84 5.93 3.69 C6.36 5.99 6.36 5.99 6.24 8.56 C6.22 9.41 6.19 10.25 6.17 11.12 C5.65 16.74 4.11 22.17 2.68 27.62 C2.49 28.41 2.3 29.2 2.1 30.01 C0.49 36.04 -1.68 40.32 -6.95 44 C-11.44 45.83 -11.44 45.83 -14.12 45.22 C-17.1 42.88 -17.66 39.7 -18.63 36.19 C-20.03 30.61 -20.03 30.61 -24.07 26.69 C-22.97 23.99 -22.02 22.64 -19.76 20.75 C-16.84 18.03 -15.93 14.9 -14.63 11.19 C-11.81 3.45 -8.95 -1.44 0 0 Z \",fill:\"#3C194D\",transform:\"translate(501.0703125,562.3125)\"})),_path381||(_path381=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 -0.03 2.41 -0.06 3.65 -0.09 C7.64 0.45 9.14 1.71 12.06 4.38 C19.14 6.45 27.92 6.03 35.06 4.38 C34.4 5.69 33.74 7.01 33.06 8.38 C29.58 8.29 26.1 8.18 22.62 8.06 C21.65 8.04 20.68 8.02 19.67 7.99 C13.97 7.78 9.25 7.08 3.97 4.89 C1.77 4.1 1.77 4.1 -1.44 5.62 C-3.77 7.15 -3.77 7.15 -4.94 8.38 C-5.04 9.83 -5.07 11.29 -5.06 12.75 C-5.07 13.54 -5.07 14.33 -5.07 15.15 C-5.02 17.55 -5.02 17.55 -3.94 20.38 C-3.35 27.48 -3.35 27.48 -6.12 31.69 C-7.73 34.14 -7.97 35.11 -7.64 38.08 C-6.14 43.79 -4.37 48.75 -0.31 53.12 C3.3 55.03 7.03 55.13 11.06 55.38 C11.06 57.02 11.06 58.68 11.06 60.38 C10.07 60.05 9.08 59.72 8.06 59.38 C2.98 58.07 -2.1 58.24 -7.3 58.36 C-14.58 58.51 -20.22 57.03 -25.94 52.38 C-25.61 51.38 -25.28 50.39 -24.94 49.38 C-24.94 50.03 -24.94 50.69 -24.94 51.38 C-23.62 51.38 -22.3 51.38 -20.94 51.38 C-20.96 50.15 -20.98 48.92 -21.01 47.65 C-21.03 46.02 -21.04 44.38 -21.06 42.75 C-21.08 41.94 -21.1 41.13 -21.11 40.3 C-21.16 34.89 -21.16 29.68 -17.19 25.56 C-14.46 24.12 -11.99 23.72 -8.94 23.38 C-8.94 22.38 -8.94 21.39 -8.94 20.38 C-9.54 20.19 -10.13 20 -10.75 19.81 C-14.04 17.65 -14.7 15.04 -15.94 11.38 C-16.44 8.69 -16.44 8.69 -15.94 6.38 C-10.94 1.52 -6.9 0.07 0 0 Z \",fill:\"#775979\",transform:\"translate(556.9375,257.625)\"})),_path382||(_path382=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.63 9.94 9.78 21.83 13.41 33.09 C14.38 36.09 15.37 39.08 16.36 42.08 C16.97 43.98 17.59 45.88 18.21 47.79 C18.51 48.68 18.8 49.58 19.11 50.5 C19.37 51.32 19.64 52.15 19.91 53 C20.26 54.09 20.26 54.09 20.62 55.2 C21 57 21 57 20 59 C16.7 59 13.4 59 10 59 C9.67 58.01 9.34 57.02 9 56 C7.51 55.5 7.51 55.5 6 55 C6 54.34 6 53.68 6 53 C4.92 51.95 4.92 51.95 3.81 50.88 C-4.27 42.97 -8.37 31.17 -9 20 C-8.78 16.65 -8.44 13.33 -8 10 C-7.34 10.33 -6.68 10.66 -6 11 C-2.9 7.49 -1.26 4.51 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(862,570)\"})),_path383||(_path383=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2.25 2 2.25 4 5 C5.27 6.21 5.27 6.21 6.56 7.44 C9.41 10.44 12 13.7 12 18 C13.22 18.27 14.43 18.54 15.69 18.81 C20.49 20.03 23.76 21.72 27.25 25.31 C31.67 29.63 36.81 33.82 43 35 C43.23 34.42 43.45 33.84 43.69 33.25 C45.37 30.36 47.23 28.85 50 27 C51.32 27 52.64 27 54 27 C54 26.34 54 25.68 54 25 C58.95 24.01 63.9 23.02 69 22 C69 22.66 69 23.32 69 24 C70.01 23.67 71.02 23.34 72.06 23 C76 23 76 23 78.06 24.57 C79.98 26.66 81.64 28.5 83 31 C82.6 34.5 81.2 37.26 79 40 C76.38 40.69 76.38 40.69 73 40 C71.51 39.04 70.06 38.04 68.62 37 C65.58 34.83 63.4 33.51 59.62 33.31 C58.43 33.54 57.23 33.77 56 34 C55.53 34.82 55.05 35.65 54.56 36.5 C54.05 37.32 53.53 38.15 53 39 C49.96 39.59 47.06 39.28 44 39 C43.28 38.99 42.55 38.98 41.81 38.97 C37.75 38.78 36.24 38.25 33.44 35.25 C32.85 34.44 32.85 34.44 32.24 33.61 C27.61 27.62 19.79 24.89 13.11 21.84 C9.76 19.86 8.57 18.52 7 15 C6.78 13.42 6.78 13.42 6.56 11.81 C6.3 8.96 6.3 8.96 4.38 7.62 C1.1 6.76 -1.63 6.7 -5 7 C-5.62 7.54 -6.24 8.07 -6.88 8.62 C-9 10 -9 10 -11.21 9.79 C-17.6 8.4 -17.6 8.4 -19 7 C-23.06 6.76 -27.12 6.77 -31.19 6.76 C-33.23 6.75 -35.26 6.72 -37.3 6.69 C-39.23 6.68 -39.23 6.68 -41.2 6.67 C-42.39 6.66 -43.57 6.65 -44.79 6.64 C-48.33 7.04 -50.2 7.82 -53 10 C-54.14 12.96 -54.14 12.96 -54.62 16.31 C-55.55 21.07 -56.51 24.86 -59 29 C-60.2 25.4 -59.8 23.05 -59.3 19.35 C-59.04 17.3 -58.88 15.24 -58.75 13.19 C-57.81 9.19 -56.4 8.16 -53 6 C-50.02 4.51 -47.29 4.85 -43.97 4.82 C-42.53 4.8 -41.08 4.78 -39.63 4.75 C-37.36 4.72 -35.09 4.69 -32.82 4.67 C-22.83 4.6 -8.33 -2.78 0 0 Z \",fill:\"#785979\",transform:\"translate(625,161)\"})),_path384||(_path384=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 3.46 0.5 3.46 1 7 C-0.11 7.43 -1.23 7.87 -2.38 8.31 C-6.18 9.7 -6.18 9.7 -8 13 C-8.89 13.41 -9.77 13.82 -10.69 14.25 C-13.71 15.85 -14.83 16.79 -17 19.25 C-21.53 24 -27.3 26.42 -33.17 29.14 C-36.1 30.52 -38.99 31.98 -41.88 33.44 C-43.58 34.29 -45.29 35.15 -47 36 C-47.72 35.15 -48.44 34.31 -49.19 33.44 C-51.69 30.74 -51.69 30.74 -54.5 30.94 C-58.73 32.74 -61.86 35.7 -65 39 C-65 37.35 -65 35.7 -65 34 C-66.32 34 -67.64 34 -69 34 C-69 32.35 -69 30.7 -69 29 C-68.28 28.77 -67.56 28.55 -66.81 28.31 C-63.82 27.13 -63.82 27.13 -61.56 24.44 C-58.56 21.59 -57 21.51 -53 21 C-52.38 20.53 -51.77 20.05 -51.13 19.57 C-48.75 17.81 -46.86 17.26 -44 16.56 C-39.98 15.47 -39.98 15.47 -36.81 12.81 C-35 11 -35 11 -31.44 10.88 C-30.3 10.92 -29.17 10.96 -28 11 C-27.01 10.34 -26.02 9.68 -25 9 C-22.67 9 -20.33 9 -18 9 C-17.01 8.34 -16.02 7.68 -15 7 C-13.68 7 -12.36 7 -11 7 C-11 6.34 -11 5.68 -11 5 C-10.01 4.67 -9.02 4.34 -8 4 C-7.3 2.68 -6.63 1.35 -6 0 C-3.51 -1.25 -2.59 -0.78 0 0 Z \",fill:\"#130E17\",transform:\"translate(643,253)\"})),_path385||(_path385=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.3 1.08 12.3 1.08 16.82 5.96 C22.57 13.63 27.7 23.2 27 33 C24.89 35.11 20.84 35.04 17.94 35.56 C17.18 35.7 16.42 35.84 15.64 35.98 C13.76 36.33 11.88 36.66 10 37 C9.34 36.01 8.68 35.02 8 34 C10.94 31.5 13.18 30.53 17 30 C15.68 29.34 14.36 28.68 13 28 C12.67 28.66 12.34 29.32 12 30 C8.39 31.45 5.93 32 2 32 C3.61 34.71 5.25 37.37 7 40 C5.35 40.66 3.7 41.32 2 42 C-5.41 32.92 -3.23 21.45 -2.62 10.19 C-2.52 8.23 -2.52 8.23 -2.41 6.23 C-2 3 -2 3 0 0 Z \",fill:\"#59385F\",transform:\"translate(507,313)\"})),_path386||(_path386=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.85 0.27 5.66 0.71 8.62 3.25 C11 6 11 6 12.75 8.44 C14.89 10.88 16.51 11.99 19.25 13.62 C24.29 16.79 27.13 20.89 30.37 25.8 C30.91 26.53 31.45 27.25 32 28 C32.66 28 33.32 28 34 28 C36.04 34.85 33.71 41.49 30.68 47.71 C29.5 49.84 28.29 51.93 27 54 C26.41 53.68 25.83 53.36 25.22 53.02 C22.86 51.79 22.86 51.79 19.44 51.62 C16 51 16 51 14.06 49.44 C12.82 46.58 13.08 44.41 13.22 41.34 C12.85 37.4 10.98 34.15 9.25 30.63 C7.74 27.46 6.83 24.4 6 21 C5.34 21 4.68 21 4 21 C-0.79 15.59 -5 10.42 -5 3 C-4.67 3.66 -4.34 4.32 -4 5 C-3.34 5 -2.68 5 -2 5 C-0.62 6.25 -0.62 6.25 1 8 C2.08 8.99 2.08 8.99 3.19 10 C5 12 5 12 5 15 C5.66 15 6.32 15 7 15 C7.33 15.99 7.66 16.98 8 18 C9.96 19.17 9.96 19.17 12.31 20.06 C15.27 21.28 18.15 22.54 21 24 C21 22.68 21 21.36 21 20 C20.22 19.69 19.43 19.38 18.62 19.06 C16 18 16 18 14 17 C14 16.34 14 15.68 14 15 C13.01 14.67 12.02 14.34 11 14 C11 13.34 11 12.68 11 12 C10.01 11.67 9.02 11.34 8 11 C6.46 9.19 6.46 9.19 4.94 7 C2.92 3.98 2.92 3.98 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6F5174\",transform:\"translate(529,437)\"})),_path387||(_path387=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.34 3.15 -2.58 4.71 -5.45 6.55 C-6.13 7 -6.81 7.44 -7.51 7.91 C-8.59 8.6 -8.59 8.6 -9.69 9.31 C-24.26 19.12 -32.87 31.19 -37.15 48.43 C-38.03 51.1 -38.75 52.33 -41 54 C-43.97 53.73 -44.85 53.15 -47 51 C-47.52 48.6 -47.8 46.43 -48 44 C-48.11 43.13 -48.22 42.26 -48.34 41.36 C-49.32 28.44 -40.88 18.6 -33.08 9.11 C-31.08 7.08 -29.65 5.97 -27 5 C-26.01 5 -25.02 5 -24 5 C-23.34 4.34 -22.68 3.68 -22 3 C-19.79 2.69 -19.79 2.69 -17.19 2.56 C-13.83 2.31 -12.24 2.14 -9.31 0.38 C-6 -1.6 -3.66 -0.79 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(223,1153)\"})),_path388||(_path388=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.52 2.1 1.52 2.1 3 5 C3.64 6.1 4.28 7.2 4.94 8.34 C5.63 9.54 6.31 10.74 7 11.94 C7.34 12.53 7.69 13.13 8.04 13.74 C14 24.15 14 24.15 14 27 C14.66 27 15.32 27 16 27 C16.45 27.92 16.89 28.84 17.36 29.78 C21.32 37.91 21.32 37.91 25.94 45.69 C28 49 28 49 28 52 C28.66 52 29.32 52 30 52 C36 64.45 36 64.45 34 72 C33 73 33 73 30.25 73.44 C26.74 72.97 26.31 72.71 24.12 70.19 C22 67 22 67 22 64 C23.02 63.07 23.02 63.07 24.06 62.12 C26.29 60.18 26.29 60.18 25.94 57.56 C25.09 54.99 25.09 54.99 23.69 52.81 C20.85 48.08 18.95 42.85 17.21 37.62 C14.2 29.06 8.11 18.81 1 13 C-4.11 12.3 -7.49 13.84 -12 16 C-12.33 15.34 -12.66 14.68 -13 14 C-13.66 14 -14.32 14 -15 14 C-15.99 15.49 -15.99 15.49 -17 17 C-17.33 17.33 -17.66 17.66 -18 18 C-18.73 22.45 -19.22 25.67 -18 30 C-17.91 32.67 -17.96 35.32 -18 38 C-18.66 38 -19.32 38 -20 38 C-20.33 38.99 -20.66 39.98 -21 41 C-23.07 42.17 -23.07 42.17 -25.56 43.19 C-26.39 43.53 -27.22 43.88 -28.07 44.23 C-29.02 44.61 -29.02 44.61 -30 45 C-30 43.35 -30 41.7 -30 40 C-28.58 39.66 -28.58 39.66 -27.12 39.31 C-23.92 38.31 -23.92 38.31 -22.65 35.9 C-21.75 31.89 -23.08 29.01 -24.5 25.31 C-26.75 18.9 -28.05 13.47 -25 7 C-23.41 5.24 -23.41 5.24 -22 4 C-22 4.66 -22 5.32 -22 6 C-19.69 4.35 -17.38 2.7 -15 1 C-15 1.66 -15 2.32 -15 3 C-14.2 2.5 -13.39 2.01 -12.56 1.5 C-8.46 -0.23 -4.38 -1.27 0 0 Z \",fill:\"#462453\",transform:\"translate(986,459)\"})),_path389||(_path389=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.24 5.74 5.02 12.04 7.07 18.28 C7.59 19.85 8.11 21.43 8.62 23 C8.88 23.78 9.14 24.57 9.41 25.37 C11.58 31.88 14.07 38.04 17.38 44.06 C18.82 47.32 19.17 49.36 18.62 52.88 C16.83 55.22 15.36 55.74 12.5 56.26 C10.03 56.44 8.04 56.45 5.62 55.88 C3.06 52.88 3.06 52.88 1.62 49.88 C0.59 50.51 -0.44 51.15 -1.5 51.81 C-5.52 54.1 -9.09 55.3 -13.75 54.44 C-14.55 54.16 -14.55 54.16 -15.38 53.88 C-15.38 53.22 -15.38 52.56 -15.38 51.88 C-14.76 51.84 -14.15 51.8 -13.51 51.76 C-12.3 51.66 -12.3 51.66 -11.06 51.56 C-10.26 51.5 -9.46 51.45 -8.64 51.39 C-5.92 50.77 -4.89 50.22 -3.38 47.88 C-3.62 45.45 -3.62 45.45 -4.38 42.88 C-4.88 37.36 -5.13 32.6 -2.31 27.69 C-0.41 24.34 0.06 21.92 -0.7 18.02 C-3.22 10.04 -7.24 2.06 -14.81 -1.94 C-18.03 -3.01 -21.01 -3.72 -24.38 -4.12 C-15.8 -9.84 -7.2 -6.44 0 0 Z \",fill:\"#775979\",transform:\"translate(637.375,411.125)\"})),_path390||(_path390=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 -0.01 2.28 -0.03 3.45 -0.04 C6.84 0.19 8.85 0.43 11.75 2.19 C13.22 4.41 14.34 6.36 15.44 8.75 C15.74 9.38 16.04 10.02 16.36 10.67 C18.59 15.49 19.9 19.98 20.75 25.19 C21.21 27.46 21.69 29.73 22.19 32 C22.41 33.08 22.64 34.16 22.87 35.27 C23.77 38.24 24.88 39.77 26.75 42.19 C27.7 44.81 27.7 44.81 28.44 47.62 C28.69 48.55 28.94 49.48 29.2 50.43 C29.73 53.1 29.85 55.48 29.75 58.19 C28.76 58.68 28.76 58.68 27.75 59.19 C27.25 56.22 27.25 56.22 26.75 53.19 C26.09 53.19 25.43 53.19 24.75 53.19 C21.55 45.9 18.89 38.7 16.84 31 C15.59 27.78 14.51 26.26 11.75 24.19 C7.5 23.02 3.83 23.17 -0.5 23.81 C-1.54 23.95 -2.57 24.09 -3.64 24.23 C-6.38 24.92 -6.38 24.92 -7.41 27.21 C-8.51 31.11 -8.39 34.77 -8.23 38.77 C-8.2 39.58 -8.18 40.4 -8.15 41.24 C-8.07 43.82 -7.97 46.41 -7.88 49 C-7.82 50.76 -7.76 52.52 -7.7 54.28 C-7.56 58.58 -7.41 62.89 -7.25 67.19 C-7.58 67.19 -7.91 67.19 -8.25 67.19 C-10.06 50.65 -11.75 34.09 -11 17.44 C-10.97 16.72 -10.95 16.01 -10.92 15.27 C-10.41 6.79 -9.35 0.05 0 0 Z \",fill:\"#45245A\",transform:\"translate(540.25,848.8125)\"})),_path391||(_path391=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.01 0.98 4 1.47 5.88 3.94 C6.39 6.64 6.39 6.64 6.56 9.62 C6.66 11.12 6.66 11.12 6.76 12.64 C6.82 13.78 6.82 13.78 6.88 14.94 C7.53 14.94 8.19 14.94 8.88 14.94 C8.55 15.93 8.22 16.92 7.88 17.94 C7.88 17.28 7.88 16.62 7.88 15.94 C7.22 15.94 6.56 15.94 5.88 15.94 C6.53 17.92 7.19 19.9 7.88 21.94 C8.87 21.61 9.86 21.28 10.88 20.94 C11.14 22.15 11.41 23.37 11.69 24.62 C12.56 28.16 13.8 30.91 15.88 33.94 C11.05 32.06 6.96 30.14 2.88 26.94 C1.82 27.62 0.77 28.3 -0.31 29 C-3.02 30.57 -3.78 30.97 -7 30.62 C-7.7 30.4 -8.4 30.17 -9.12 29.94 C-9.45 30.27 -9.79 30.6 -10.12 30.94 C-12.46 30.98 -14.79 30.98 -17.12 30.94 C-19.37 30.73 -19.37 30.73 -21.5 32.81 C-27.45 39.06 -28.77 47.64 -29.12 55.94 C-29.79 55.94 -30.44 55.94 -31.12 55.94 C-31.23 57.01 -31.33 58.08 -31.44 59.19 C-32.1 62.8 -32.7 64.3 -35.12 66.94 C-35.35 62.46 -34.73 58.6 -33.68 54.28 C-33.33 52.79 -33 51.29 -32.72 49.78 C-29.46 32.62 -18.51 13.39 -5.52 1.57 C-3.12 -0.06 -3.12 -0.06 0 0 Z \",fill:\"#442255\",transform:\"translate(363.125,729.0625)\"})),_path392||(_path392=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.48 0.99 1.48 2 3 C0.76 4.42 0.76 4.42 -0.5 5.88 C-7.27 14.86 -11.03 26.36 -15.07 36.77 C-16.5 40.19 -18.21 43.45 -19.91 46.75 C-21.13 49.12 -21.13 49.12 -22 52.31 C-23.3 55.81 -25.32 57.42 -28 60 C-35.68 67.52 -35.68 67.52 -42.88 75.5 C-47.69 81.08 -53.1 82.88 -60 85 C-59.67 85.99 -59.34 86.98 -59 88 C-59.54 88.14 -60.09 88.28 -60.65 88.42 C-72.72 91.02 -72.72 91.02 -82.06 98.25 C-82.74 99.49 -83.39 100.73 -84 102 C-86 104 -86 104 -89.48 104.2 C-90.86 104.18 -92.24 104.16 -93.62 104.12 C-94.68 104.11 -94.68 104.11 -95.77 104.1 C-97.51 104.07 -99.26 104.04 -101 104 C-98.04 100.66 -94.58 99.28 -90.57 97.48 C-87.84 96.07 -87.84 96.07 -85.6 93.51 C-82.63 90.64 -80.17 89.65 -76.31 88.25 C-69.19 85.46 -64.3 81.44 -59 76 C-58.37 75.39 -57.73 74.78 -57.08 74.15 C-54.02 71.18 -51.23 68.09 -48.5 64.81 C-45.29 61.11 -42.51 58.97 -38 57 C-36 56.96 -34 56.96 -32 57 C-28.33 54.86 -26.84 52.29 -24.94 48.56 C-23.17 45.12 -21.34 42.08 -19 39 C-18.29 36.85 -18.29 36.85 -18 35 C-17.34 35 -16.68 35 -16 35 C-15.82 34.23 -15.64 33.45 -15.45 32.66 C-13.15 23.12 -13.15 23.12 -11.19 18.56 C-9.71 15.16 -9.71 15.16 -10.62 12.19 C-11.92 10.13 -13.17 8.58 -15 7 C-14.34 5.68 -13.68 4.36 -13 3 C-10.69 3 -8.38 3 -6 3 C-5.5 4.48 -5.5 4.48 -5 6 C-3.35 4.02 -1.7 2.04 0 0 Z \",fill:\"#442255\",transform:\"translate(400,1091)\"})),_path393||(_path393=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.27 0.01 4.54 0.11 6.81 0.25 C8.06 0.32 9.3 0.38 10.58 0.45 C15.67 1.27 15.67 1.27 18 4 C19 6.74 19.57 9.52 20.12 12.38 C20.44 13.88 20.75 15.39 21.07 16.9 C21.22 17.61 21.37 18.32 21.52 19.05 C22.12 21.47 23.05 23.7 24 26 C24 26.99 24 27.98 24 29 C24.99 29.33 25.98 29.66 27 30 C27.84 32.37 28.46 34.56 29 37 C29.18 37.76 29.35 38.51 29.53 39.29 C30.22 42.3 30.87 45.31 31.43 48.34 C32.12 51.58 33.07 54.7 34 57.88 C36.16 65.57 36.77 73.02 37 81 C36.01 80.67 35.02 80.34 34 80 C33.04 73.53 33.04 73.53 32.85 70.85 C32.41 64.86 30.58 60.37 28 55 C25.65 49.65 24.5 44.48 23.52 38.73 C22.15 31.52 19.59 23.82 15 18 C11.6 16.54 7.9 16.9 4.25 16.94 C2.49 16.95 2.49 16.95 0.7 16.96 C-0.19 16.98 -1.08 16.99 -2 17 C-4.49 23.4 -5.58 29.21 -5.81 36.06 C-5.85 37.02 -5.89 37.98 -5.93 38.96 C-6.32 52.99 -5.08 67.02 -4 81 C-5.8 77.59 -6.51 74.71 -7.06 70.88 C-7.23 69.73 -7.39 68.59 -7.56 67.42 C-8.14 62.95 -8.62 58.49 -9 54 C-9.99 54 -10.98 54 -12 54 C-11.67 53.34 -11.34 52.68 -11 52 C-10.8 49.87 -10.65 47.73 -10.54 45.59 C-10.46 44.29 -10.38 42.99 -10.3 41.65 C-10.18 39.59 -10.06 37.52 -9.95 35.46 C-8.76 14.18 -8.76 14.18 -3.94 5.94 C-3.41 5.02 -2.88 4.1 -2.34 3.15 C-1 1 -1 1 0 0 Z \",fill:\"#401F54\",transform:\"translate(536,833)\"})),_path394||(_path394=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 -0.33 1.32 -0.66 2 -1 C1.74 1.34 1.41 3.68 1 6 C0.01 6.5 0.01 6.5 -1 7 C-0.99 7.56 -0.98 8.11 -0.96 8.69 C-0.79 23.46 -4.65 38.31 -14 50 C-17.96 48.02 -21.92 46.04 -26 44 C-25.12 35.38 -25.12 35.38 -24 32 C-23.69 30.15 -23.4 28.29 -23.12 26.44 C-20.45 10.32 -20.45 10.32 -14 5 C-13.53 4.46 -13.05 3.93 -12.56 3.38 C-8.48 -0.22 -5.23 -1.45 0 0 Z \",fill:\"#45235A\",transform:\"translate(477,510)\"})),_path395||(_path395=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 1 4 1 6 4 C6.85 4.49 7.69 4.99 8.56 5.5 C11 7 11 7 12 10 C13.32 10 14.64 10 16 10 C16.66 11.32 17.32 12.64 18 14 C18.66 13.53 19.32 13.05 20 12.56 C23.79 10.59 26.76 10.36 31 10 C31 10.66 31 11.32 31 12 C31.74 12.12 32.49 12.25 33.25 12.38 C37.46 13.33 39.32 14.07 41.94 17.62 C42.96 19.3 42.96 19.3 44 21 C44.78 22.23 45.55 23.46 46.33 24.69 C60.07 46.69 60.07 46.69 59 56 C58.63 57.24 58.26 58.47 57.88 59.75 C56.61 63 56.61 63 58.43 65.74 C60.28 69.58 60.31 72.15 60.19 76.38 C60.15 78.24 60.15 78.24 60.11 80.15 C60.07 81.09 60.04 82.03 60 83 C59.67 83 59.34 83 59 83 C58.92 81.72 58.84 80.45 58.75 79.13 C58.13 73.59 56.21 68.98 53.94 63.94 C53.54 63.03 53.14 62.12 52.73 61.18 C49.08 52.99 45.11 44.97 41 37 C40.48 35.91 39.95 34.82 39.41 33.7 C37.94 30.89 36.26 29.18 34 27 C34 26.34 34 25.68 34 25 C32.68 24.67 31.36 24.34 30 24 C29.5 21.53 29.5 21.53 29 19 C29.66 19 30.32 19 31 19 C31.33 18.01 31.66 17.02 32 16 C25.64 15.55 25.64 15.55 20 18 C19.67 18.99 19.34 19.98 19 21 C19.43 21.87 19.87 22.73 20.31 23.62 C23 29 24.62 34.12 23 40 C21.51 37.25 20.04 34.5 18.56 31.75 C18.14 30.97 17.72 30.2 17.29 29.39 C16.68 28.26 16.68 28.26 16.07 27.11 C15.69 26.42 15.32 25.73 14.94 25.01 C14 23 14 23 13.53 20.88 C12.69 17.9 10.44 16.75 8 15 C8.33 14.01 8.66 13.02 9 12 C8.01 12 7.02 12 6 12 C4.02 8.04 2.04 4.08 0 0 Z \",fill:\"#3A164A\",transform:\"translate(549,1054)\"})),_path396||(_path396=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.98 2.33 3.96 2.66 6 3 C5.34 4.32 4.68 5.64 4 7 C3.42 6.95 2.84 6.91 2.24 6.86 C-3.59 6.59 -6.48 7.29 -11 11 C-10.5 10.84 -10.01 10.67 -9.5 10.5 C-2.92 9.18 2.66 10.19 9 12 C9 12.66 9 13.32 9 14 C8.05 14.17 7.09 14.34 6.11 14.52 C4.23 14.88 4.23 14.88 2.31 15.25 C1.07 15.48 -0.17 15.71 -1.45 15.95 C-6.96 17.58 -9.97 20.75 -13.5 25.12 C-16.08 28.16 -18.01 30.03 -22 31 C-22.33 29.68 -22.66 28.36 -23 27 C-28.35 31.92 -31.52 38.9 -34.62 45.38 C-36.32 48.87 -37.94 51.51 -41 54 C-43 51 -43 51 -42.62 47.31 C-40.72 39.73 -36.68 32.84 -33 26 C-32.49 25.05 -31.98 24.11 -31.46 23.13 C-28.21 17.45 -24.3 12.51 -20.05 7.54 C-17.95 5.06 -17.95 5.06 -16.4 2.3 C-12.24 -4.52 -6.26 -3.13 0 0 Z \",fill:\"#220C37\",transform:\"translate(552,123)\"})),_path397||(_path397=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 -0.25 5.81 C-1.42 7.94 -2.58 10.06 -3.75 12.19 C-5.38 14.99 -5.38 14.99 -4 18 C-2.56 17.57 -1.12 17.13 0.31 16.69 C1.11 16.44 1.91 16.2 2.74 15.95 C5.1 14.96 6.34 13.92 8 12 C8.66 12.33 9.32 12.66 10 13 C8.85 15.3 7.69 17.53 6.38 19.75 C4.7 22.99 4.7 22.99 5.38 26.75 C5.55 29.96 5.06 30.93 3.08 33.56 C1.48 35.28 -0.16 36.96 -1.84 38.61 C-4.05 41.05 -4.9 42.93 -6 46 C-9.69 50.95 -12.21 52.36 -18.31 53.44 C-21.49 53.87 -21.49 53.87 -24 54 C-25 53 -25 53 -25.25 50.31 C-24.96 46.48 -23.79 44.39 -22 41 C-21.52 39.59 -21.06 38.17 -20.62 36.75 C-19.53 33.3 -18.15 30.25 -16.44 27.06 C-14.64 23.64 -13.69 20.83 -13.19 17 C-12.17 10.76 -8.43 6.35 -4 2 C-1.74 0.72 -1.74 0.72 0 0 Z \",fill:\"#391948\",transform:\"translate(254,751)\"})),_path398||(_path398=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 5 C2.66 5 3.32 5 4 5 C4 5.66 4 6.32 4 7 C5.05 7.15 5.05 7.15 6.12 7.31 C10.96 8.47 14.14 9.8 17.08 13.93 C17.65 15.04 18.22 16.16 18.81 17.31 C19.69 18.98 19.69 18.98 20.58 20.68 C21.98 23.96 22.88 26.44 23 30 C21.67 32.6 21.67 32.6 19.75 35.06 C17.82 37.58 16 40 14.39 42.73 C12.8 45.33 11.78 45.9 9 47 C6 48.35 3.71 49.95 1.25 52.12 C0.64 52.66 0.02 53.2 -0.61 53.76 C-1.07 54.17 -1.53 54.58 -2 55 C-2.33 54.34 -2.66 53.68 -3 53 C-2.67 52.01 -2.34 51.02 -2 50 C-1.85 48.42 -1.75 46.83 -1.68 45.25 C-1.64 44.31 -1.6 43.37 -1.56 42.4 C-1.52 41.43 -1.48 40.45 -1.44 39.44 C-1.39 38.49 -1.35 37.53 -1.31 36.55 C-1.07 31.08 -0.97 25.62 -1.03 20.14 C-0.99 17.36 -0.57 14.72 0 12 C-0.66 11.67 -1.32 11.34 -2 11 C-1.67 10.67 -1.34 10.34 -1 10 C-0.77 8.32 -0.59 6.63 -0.44 4.94 C-0.31 3.56 -0.31 3.56 -0.18 2.15 C-0.12 1.44 -0.06 0.73 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(692,287)\"})),_path399||(_path399=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 2.51 4.76 4.29 6 7.94 C6 11.93 5.3 13.72 3 17 C-0.69 19.92 -4.83 21.94 -9.06 23.94 C-12.53 25.62 -15.09 27.7 -17.94 30.28 C-22.96 34.47 -28.77 38.92 -35 41 C-37.6 37.1 -37.15 33.53 -37 29 C-42.29 31.35 -45.98 33.74 -50 38 C-50.66 38 -51.32 38 -52 38 C-52.66 40.31 -53.32 42.62 -54 45 C-54.66 44.01 -55.32 43.02 -56 42 C-57.07 42.49 -58.14 42.99 -59.25 43.5 C-62.25 44.89 -63.46 45 -67 45 C-66.34 46.32 -65.68 47.64 -65 49 C-67.64 49 -70.28 49 -73 49 C-75 41.38 -75 41.38 -75 38 C-75.66 38 -76.32 38 -77 38 C-79.15 34.14 -80.39 31.45 -80 27 C-79.46 27.25 -78.93 27.49 -78.38 27.75 C-74.76 28.13 -72.91 25.98 -70 24 C-66.26 25.25 -65.81 26.63 -64 30 C-60.04 29.51 -60.04 29.51 -56 29 C-56 28.34 -56 27.68 -56 27 C-55.34 27 -54.68 27 -54 27 C-54.88 31.75 -54.88 31.75 -56 34 C-57.98 34.73 -59.98 35.4 -62 36 C-62 37.98 -62 39.96 -62 42 C-58.35 40.75 -57.22 40.33 -55 37 C-54.34 37 -53.68 37 -53 37 C-52.77 36.46 -52.55 35.93 -52.31 35.38 C-50.13 31.42 -47.64 28 -43.75 25.62 C-39.8 24.73 -36.01 24.2 -32 25 C-29.94 27.5 -29.94 27.5 -29 30 C-22.6 30 -20.01 27.53 -15.49 23.21 C-11.38 19.56 -6.71 16.81 -2 14 C-2.5 10.54 -2.5 10.54 -3 7 C-5.31 7 -7.62 7 -10 7 C-10 6.01 -10 5.02 -10 4 C-6.7 2.68 -3.4 1.36 0 0 Z \",fill:\"#2B123D\",transform:\"translate(370,1223)\"})),_path400||(_path400=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.76 0.43 -1.53 0.87 -2.31 1.31 C-4.66 2.79 -6.25 3.89 -8 6 C-8.49 8 -8.49 8 -8.69 10.19 C-9.65 15.34 -12.27 17.79 -16.12 21.18 C-18.34 23.13 -18.34 23.13 -20 27 C-32.87 27 -45.74 27 -59 27 C-59 26.01 -59 25.02 -59 24 C-53.26 20.49 -50.02 19.58 -43.39 20.93 C-40.02 21.03 -38.57 20.17 -36 18 C-34.93 14.97 -34.93 14.97 -34.5 11.56 C-33.57 5.55 -33.57 5.55 -30.57 2.64 C-27.91 0.94 -26.14 0.25 -23 0 C-22.01 0.33 -21.02 0.66 -20 1 C-20 0.34 -20 -0.32 -20 -1 C-12.93 -2.94 -6.64 -3.98 0 0 Z \",fill:\"#3D1D4A\",transform:\"translate(395,1253)\"})),_path401||(_path401=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-0.94 6.19 -0.94 6.19 -3 9 C-2.67 9 -2.34 9 -2 9 C-2 13.18 -4.06 14.77 -6.69 17.87 C-8.27 20.43 -8.25 22.04 -8 25 C-7.15 24.95 -7.15 24.95 -6.28 24.9 C-2.3 24.96 0.13 25.19 3.12 27.96 C5.66 31.22 7.69 34.06 9 38 C13.16 38.52 17.24 39 21.44 39 C24 39 24 39 26 40 C26 39.34 26 38.68 26 38 C27.32 38.33 28.64 38.66 30 39 C30 38.34 30 37.68 30 37 C35.55 37.5 35.55 37.5 37.94 40.12 C39.96 42.39 39.96 42.39 43.44 41.94 C46.84 41.04 49.07 39.87 52 38 C52.99 38 53.98 38 55 38 C55.37 37.1 55.37 37.1 55.75 36.19 C57.16 33.71 58.65 32.57 61 31 C61.66 31.33 62.32 31.66 63 32 C61.62 34 61.62 34 60 36 C59.34 36 58.68 36 58 36 C57.67 36.99 57.34 37.98 57 39 C55.33 40.54 55.33 40.54 53.25 42.06 C52.57 42.57 51.9 43.08 51.2 43.6 C43.28 48.64 32.24 50.09 23 49 C20.66 48.01 18.33 47 16 46 C10.35 45.18 4.7 44.95 -1 45 C-0.67 44.01 -0.34 43.02 0 42 C-0.66 41.96 -1.32 41.92 -2 41.88 C-7.15 40.37 -11.24 36.76 -15 33 C-14.01 32.34 -13.02 31.68 -12 31 C-12.66 30.48 -13.32 29.97 -14 29.44 C-16 27 -16 27 -16.69 23.81 C-15.69 18.27 -12.67 15.14 -9 11 C-8.36 10.26 -7.71 9.52 -7.05 8.75 C-5.87 7.4 -4.68 6.06 -3.48 4.73 C-1.82 2.86 -1.82 2.86 0 0 Z \",fill:\"#401F54\",transform:\"translate(285,1090)\"})),_path402||(_path402=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.84 1.95 13.48 5.13 19 11 C19.49 11.49 19.99 11.98 20.5 12.48 C30.72 24.28 28.58 49.21 27.69 63.88 C27.45 66.87 27.45 66.87 27 69 C26.01 69.49 26.01 69.49 25 70 C24.97 69.41 24.95 68.82 24.92 68.22 C24.81 65.5 24.68 62.78 24.56 60.06 C24.52 59.14 24.48 58.21 24.44 57.26 C24.15 46.1 24.15 46.1 21.44 35.38 C20.29 32.24 20.01 30.66 20.06 27.19 C20.31 23.98 20.31 23.98 18.39 21.88 C15.47 19.58 13.41 19.23 9.75 18.75 C8.67 18.6 7.59 18.45 6.48 18.3 C5.66 18.2 4.84 18.1 4 18 C4 16.02 4 14.04 4 12 C0.97 13.14 0.97 13.14 -2 15 C-2.89 17.55 -2.89 17.55 -3 20 C-4.97 21.97 -8.35 21.66 -11 22 C-11.15 22.96 -11.15 22.96 -11.31 23.94 C-11.54 24.62 -11.77 25.3 -12 26 C-12.99 26.33 -13.98 26.66 -15 27 C-15.66 27.99 -16.32 28.98 -17 30 C-17.66 29.67 -18.32 29.34 -19 29 C-18.67 28.28 -18.34 27.57 -18 26.83 C-16.94 23.82 -16.88 21.85 -17.06 18.69 C-17.15 12.79 -16.44 8.12 -12.75 3.4 C-8.88 -0.37 -5.09 -0.93 0 0 Z \",fill:\"#4B295A\",transform:\"translate(548,1091)\"})),_path403||(_path403=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.44 0.88 3.44 0.88 5.44 3.88 C5.54 4.49 5.64 5.11 5.75 5.75 C6.32 8.17 6.32 8.17 9 10 C12.09 13.64 11.98 15.57 11.74 20.2 C11.26 24.5 10.42 28.66 9.44 32.88 C9.27 33.68 9.1 34.49 8.93 35.33 C8.09 39.36 7.14 43.1 5.44 46.88 C8.9 46.38 8.9 46.38 12.44 45.88 C12.44 44.88 12.44 43.89 12.44 42.88 C13.76 42.88 15.08 42.88 16.44 42.88 C17.43 39.58 18.42 36.27 19.44 32.88 C21.44 34.88 21.44 34.88 21.5 37.44 C20.2 41.65 18.05 44.2 15.28 47.58 C11.18 52.69 8.11 58.25 5.43 64.21 C4.44 65.88 4.44 65.88 1.44 67.88 C-0.05 67.38 -0.05 67.38 -1.56 66.88 C-1.56 66.22 -1.56 65.56 -1.56 64.88 C-1.64 63.08 -1.64 63.08 -1.71 61.24 C-1.71 56.79 -0.61 53.16 0.88 49 C2.91 42.95 4.27 37.3 4.44 30.88 C5.1 30.88 5.76 30.88 6.44 30.88 C6.77 26.59 7.1 22.29 7.44 17.88 C1.38 18.69 1.38 18.69 -2.25 22.47 C-2.89 23.19 -3.52 23.91 -4.18 24.65 C-4.82 25.41 -5.46 26.16 -6.12 26.94 C-7.4 28.44 -8.7 29.93 -10 31.41 C-10.57 32.07 -11.13 32.74 -11.71 33.42 C-14.1 35.3 -15.6 35.16 -18.56 34.88 C-19.41 28 -19.41 28 -17.07 24.89 C-15.84 23.7 -14.58 22.54 -13.29 21.42 C-11.33 19.8 -11.33 19.8 -9.56 16.88 C-9.59 14.9 -9.63 12.92 -9.68 10.94 C-9.46 6.99 -7.39 4.16 -5.31 0.94 C-3.56 -0.12 -3.56 -0.12 0 0 Z \",fill:\"#351547\",transform:\"translate(267.5625,765.125)\"})),_path404||(_path404=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6 0.07 5.16 0.19 7.75 0.38 C8.47 0.42 9.18 0.46 9.92 0.51 C13.69 0.76 17.32 1.15 21 2 C21 2.66 21 3.32 21 4 C22.65 4 24.3 4 26 4 C23.9 6.1 22.6 6.69 19.87 7.73 C19.06 8.04 18.26 8.35 17.43 8.66 C16.58 8.98 15.74 9.3 14.88 9.62 C14.03 9.95 13.18 10.27 12.3 10.61 C10.2 11.41 8.1 12.21 6 13 C6 13.66 6 14.32 6 15 C9.86 15 13.48 12.65 16.96 11.09 C19.9 10.04 21.91 9.77 25 10 C25.69 11.81 25.69 11.81 26 14 C23.86 16.73 21.58 17.75 18.38 18.94 C17.49 19.28 16.61 19.62 15.7 19.96 C14.81 20.31 13.92 20.65 13 21 C11.37 21.65 9.74 22.32 8.12 23 C7.43 23.29 6.73 23.58 6.01 23.88 C3.85 24.91 3.85 24.91 2.41 27.09 C-2.06 30.63 -8.09 29.51 -13.58 29.49 C-23.25 29.63 -29.93 32.47 -37 39 C-38 37 -38 37 -37.06 33.88 C-36.71 32.93 -36.36 31.98 -36 31 C-36.66 30.67 -37.32 30.34 -38 30 C-29.65 25.51 -21.72 21.37 -12 22 C-12.5 19.52 -12.5 19.52 -13 17 C-11.36 16.54 -11.36 16.54 -9.69 16.06 C-7.45 15.42 -5.21 14.74 -3 14 C-2.87 13.07 -2.73 12.15 -2.6 11.19 C-2.42 9.99 -2.24 8.8 -2.06 7.56 C-1.89 6.37 -1.71 5.17 -1.54 3.94 C-1 1 -1 1 0 0 Z \",fill:\"#7C668E\",transform:\"translate(653,311)\"})),_path405||(_path405=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C15.43 -1.56 27.03 2.75 41 9 C46.93 11.58 52.9 13.86 59 16 C59.7 16.25 60.4 16.5 61.12 16.75 C84.12 25.85 84.12 25.85 108 30 C107.01 29.01 107.01 29.01 106 28 C111.45 29.03 116.12 30.25 121 33 C121 33.66 121 34.32 121 35 C121.53 35.18 122.06 35.35 122.6 35.53 C124.18 36.06 125.76 36.59 127.34 37.11 C129.09 37.7 130.85 38.28 132.6 38.86 C135.24 39.73 137.87 40.61 140.5 41.5 C141.4 41.8 142.31 42.09 143.24 42.39 C144.53 42.83 144.53 42.83 145.84 43.28 C147.01 43.67 147.01 43.67 148.19 44.06 C150 45 150 45 151 48 C144.53 47.52 139.39 46.27 133.44 43.75 C125.07 40.36 116.66 37.54 108 35 C107.09 34.73 106.18 34.46 105.24 34.19 C96.56 31.64 87.87 29.11 79.18 26.62 C77.74 26.2 76.31 25.79 74.88 25.38 C74.2 25.18 73.52 24.99 72.82 24.78 C68.34 23.47 64.04 21.88 59.69 20.19 C55.38 18.6 52.13 17.79 47.56 18.06 C38.29 18.57 29.29 15.11 20.46 12.65 C17.66 11.91 14.87 11.38 12 11 C12 10.34 12 9.68 12 9 C11.34 8.67 10.68 8.34 10 8 C10.33 7.34 10.66 6.68 11 6 C10.01 6.33 9.02 6.66 8 7 C8 6.01 8 5.02 8 4 C7.05 3.86 6.1 3.71 5.12 3.56 C2 3 2 3 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#150F18\",transform:\"translate(694,258)\"})),_path406||(_path406=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2 3.61 0.7 4.54 -0.69 8 C-1.02 8.87 -1.36 9.73 -1.7 10.62 C-3.73 14.34 -6.1 15.66 -10 17.12 C-12.33 17.8 -14.65 18.42 -17 19 C-17.31 20.54 -17.63 22.08 -17.94 23.62 C-18.22 25 -18.22 25 -18.52 26.41 C-19.07 29.06 -19.07 29.06 -19.19 32.06 C-20.1 35.37 -21.38 36.83 -23.56 39.44 C-26.07 42.5 -26.95 43.61 -27.5 47.62 C-27.04 51.05 -27.04 51.05 -26.19 54.56 C-26 58 -26 58 -27.94 61 C-30.78 63.98 -33.95 66.61 -37.08 69.27 C-38.82 70.84 -40.24 72.41 -41.69 74.25 C-47.33 80.96 -56.86 83.43 -65 86 C-64.28 85.3 -63.56 84.6 -62.81 83.88 C-62.36 83.41 -61.91 82.94 -61.44 82.46 C-60.08 81.08 -58.67 79.76 -57.25 78.44 C-54.73 75.44 -54.7 72.91 -54.56 69.06 C-54.32 63.81 -53.51 61.24 -49.78 57.55 C-49.19 57.04 -48.61 56.53 -48 56 C-47.43 55.5 -46.87 55 -46.28 54.48 C-45 53.36 -43.71 52.25 -42.41 51.14 C-29.19 39.75 -29.19 39.75 -21.03 24.77 C-19.93 21.22 -18.92 18.18 -17 15 C-13.94 13.52 -11.06 12.84 -7.76 12.09 C-4.83 11.23 -4.83 11.23 -3.37 8.59 C-2.41 6.08 -1.67 3.6 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#846E8F\",transform:\"translate(776,512)\"})),_path407||(_path407=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.33 1.99 2.66 2.98 3 4 C3.66 4.33 4.32 4.66 5 5 C5.25 5.76 5.5 6.53 5.75 7.31 C7.41 10.88 9.71 11.92 13 14 C14.88 16.25 14.88 16.25 16 18 C15.67 18.66 15.34 19.32 15 20 C14.6 19.51 14.2 19.02 13.78 18.51 C11.52 16.59 10.42 16.68 7.5 16.81 C6.73 16.84 5.95 16.87 5.16 16.89 C4.09 16.95 4.09 16.95 3 17 C2.01 17 1.02 17 0 17 C-3.6 19.88 -3.6 19.88 -5.37 23.95 C-6.49 27.6 -9.95 29.12 -12.97 31.22 C-15.18 33.16 -15.65 34.14 -16 37 C-16.66 37 -17.32 37 -18 37 C-17.67 37.56 -17.34 38.11 -17 38.69 C-15.86 41.33 -16 43.14 -16 46 C-15.71 46.72 -15.42 47.44 -15.12 48.19 C-13.47 52.33 -12.8 56.63 -12 61 C-15.94 56.69 -15.94 56.69 -16.25 53.19 C-16.13 52.1 -16.13 52.1 -16 51 C-16.66 51 -17.32 51 -18 51 C-18.14 50.32 -18.27 49.64 -18.41 48.94 C-20 41.76 -22.39 35.38 -25.57 28.79 C-27.75 24.14 -28.86 20.16 -29 15 C-27.78 13.13 -27.78 13.13 -26 12 C-25.45 11.63 -24.91 11.25 -24.34 10.87 C-20.24 8.66 -17.12 7.82 -12.44 7.69 C-7.97 7.46 -5.97 6.63 -2.81 3.44 C-1.85 2.31 -0.9 1.18 0 0 Z \",fill:\"#351546\",transform:\"translate(936,516)\"})),_path408||(_path408=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.99 1.56 5.11 3.19 7 6 C7 8.71 7 8.71 6.5 11.94 C4.89 24.09 10.36 36.14 14.65 47.35 C15.78 50.41 16.64 53.33 17.38 56.5 C19.86 65.65 23.97 70.46 31.6 76.04 C34 78 34 78 36.06 80.74 C36.7 81.48 37.34 82.23 38 83 C39.32 83 40.64 83 42 83 C42 78.05 42 73.1 42 68 C42.33 68 42.66 68 43 68 C43.2 69.26 43.2 69.26 43.4 70.55 C43.58 71.65 43.76 72.75 43.94 73.88 C44.11 74.97 44.29 76.06 44.46 77.18 C44.86 79.94 44.86 79.94 46 82 C46.12 83.83 46.18 85.67 46.19 87.5 C46.2 88.48 46.22 89.46 46.23 90.47 C46 93 46 93 44 95 C44 94.34 44 93.68 44 93 C41.03 93.5 41.03 93.5 38 94 C35 89.25 35 89.25 35 87 C34.09 86.77 33.18 86.54 32.24 86.3 C28.47 84.79 27.44 83.52 25.24 80.17 C24.59 79.2 23.95 78.24 23.29 77.25 C22.64 76.24 21.98 75.23 21.31 74.19 C20.65 73.19 19.99 72.19 19.3 71.16 C16.92 67.57 14.56 63.98 12.42 60.24 C10.7 57.53 9.68 57.16 6.62 56.38 C2 55.04 -1.55 53.45 -5 50 C-5.85 44.87 -4.1 41.97 -1.39 37.83 C-0.03 36.04 1.3 34.47 3 33 C3.66 33 4.32 33 5 33 C4.84 32.22 4.67 31.43 4.5 30.62 C4 28 4 28 4 26 C3.75 24.55 3.75 24.55 3.5 23.06 C3 19.81 3.03 16.72 3.12 13.44 C3.19 8.84 2.45 5.98 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#391948\",transform:\"translate(1183,708)\"})),_path409||(_path409=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 0.38 2.62 0.38 5 1 C7.48 13.08 7.48 13.08 4.73 18.51 C2.69 21.6 0.62 24.38 -2 27 C-3.59 26.79 -5.17 26.57 -6.75 26.3 C-13.1 25.46 -19.58 25.7 -25.88 26.81 C-28.41 27.15 -29.57 27.22 -31.85 26.02 C-34.04 24.25 -35.73 22.53 -37 20 C-37.13 17.33 -37.04 14.68 -37 12 C-35.87 12.08 -34.73 12.16 -33.56 12.25 C-29.2 12.27 -26.34 10.92 -22.5 9.01 C-19.6 7.84 -16.91 7.42 -13.81 7 C-7.64 6.12 -4.42 4.42 0 0 Z \",fill:\"#080D31\",transform:\"translate(968,1078)\"})),_path410||(_path410=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.58 0.74 1.15 1.49 1.75 2.25 C3.91 4.99 3.91 4.99 6.25 7.19 C8 9 8 9 8 11 C8.55 11.21 9.1 11.43 9.67 11.65 C12.78 13.45 14.91 15.95 17.25 18.62 C21.23 23.08 25.3 27.36 29.64 31.48 C31 33 31 33 31 35 C31.66 35 32.32 35 33 35 C35.77 38 36.86 41.13 38 45 C34.69 43.59 32.85 41.94 30.56 39.19 C25.79 33.46 20.37 28.4 14.94 23.31 C14.02 22.44 14.02 22.44 13.08 21.55 C12.49 21 11.89 20.44 11.28 19.86 C10.48 19.11 10.48 19.11 9.66 18.34 C6.76 16 4.82 14.96 1.06 15.12 C-2.74 15.27 -5.85 14.19 -9.44 13 C-17.51 10.39 -24.03 10.94 -32.4 11.79 C-35 12 -35 12 -38.69 11.88 C-42.93 12.04 -46.14 13.33 -50 15 C-50.67 15.27 -51.34 15.55 -52.03 15.83 C-55.25 17.03 -55.25 17.03 -58 19 C-58.54 22.03 -58.97 25.07 -59.4 28.12 C-60 31 -60 31 -62 34 C-62 32.02 -62 30.04 -62 28 C-62.99 29.98 -63.98 31.96 -65 34 C-65.99 34 -66.98 34 -68 34 C-69.49 34.5 -69.49 34.5 -71 35 C-71 34.34 -71 33.68 -71 33 C-70.36 32.53 -69.72 32.05 -69.06 31.56 C-66.64 28.55 -66.73 27.4 -66.56 23.62 C-66.28 19.44 -65.96 16.29 -62.84 13.14 C-56.59 9.26 -48.2 8.69 -41 8 C-41 7.34 -41 6.68 -41 6 C-40.24 6.06 -39.48 6.12 -38.7 6.18 C-35.73 6.31 -32.95 6.37 -30 6 C-28.28 3.56 -28.28 3.56 -27 1 C-22.07 0.27 -20.03 0.41 -15.69 2.88 C-14.8 3.58 -13.91 4.28 -13 5 C-9.56 7.29 -8.01 7.18 -4 7 C-2.68 4.69 -1.36 2.38 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(708,193)\"})),_path411||(_path411=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.4 5.05 4.47 8.67 4.63 14.77 C5.09 17.53 5.8 18.31 8 20 C10.02 21.05 12.07 21.94 14.16 22.84 C16.47 24.3 17.09 25.45 18 28 C18 29.32 18 30.64 18 32 C7.44 32 -3.12 32 -14 32 C-14.66 27.71 -15.32 23.42 -16 19 C-16.88 15.05 -16.88 15.05 -17.83 11.12 C-18.05 8.4 -17.55 7.24 -16 5 C-10.94 1.08 -6.34 -0.67 0 0 Z \",fill:\"#421F4F\",transform:\"translate(464,1248)\"})),_path412||(_path412=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.47 8.95 -0.22 14.33 -4 20 C-4.66 20 -5.32 20 -6 20 C-6.19 20.89 -6.39 21.78 -6.59 22.7 C-6.85 23.87 -7.11 25.04 -7.38 26.25 C-7.76 27.99 -7.76 27.99 -8.15 29.77 C-9 33 -9 33 -10.16 34.94 C-11.5 38.21 -10.68 41.36 -10.12 44.75 C-10.02 45.45 -9.92 46.14 -9.81 46.86 C-9.55 48.58 -9.28 50.29 -9 52 C-5.45 50.04 -2.88 48.07 -0.25 45 C0.34 44.32 0.94 43.64 1.55 42.94 C3.19 40.96 3.19 40.96 4 38 C6.07 36.39 6.07 36.39 8.56 34.81 C9.39 34.28 10.22 33.75 11.07 33.21 C11.7 32.81 12.34 32.41 13 32 C11.53 35.98 9.98 38.02 7 41 C4.6 43.92 2.32 46.91 0.06 49.94 C-0.96 51.29 -1.98 52.65 -3 54 C-3.44 54.6 -3.87 55.2 -4.32 55.81 C-6.34 58.46 -7.59 59.87 -10.81 60.88 C-11.53 60.92 -12.26 60.96 -13 61 C-15.16 56.69 -14.13 51.51 -13 47 C-12.8 43.15 -12.77 39.7 -14 36 C-13.67 35.34 -13.34 34.68 -13 34 C-14.65 34 -16.3 34 -18 34 C-19.67 39.34 -21.17 44.67 -22.44 50.12 C-23.71 55.25 -25.2 59.51 -28 64 C-30.13 64.71 -30.13 64.71 -32 65 C-31.91 63.37 -31.8 61.75 -31.69 60.12 C-31.63 59.22 -31.57 58.32 -31.51 57.38 C-30.2 48.71 -26.82 40.37 -23.94 32.12 C-23.59 31.11 -23.23 30.09 -22.87 29.04 C-22.53 28.06 -22.19 27.08 -21.84 26.07 C-21.53 25.19 -21.23 24.31 -20.91 23.41 C-20.07 21.18 -19.11 19.1 -18 17 C-17.01 17.33 -16.02 17.66 -15 18 C-10.77 14.27 -8.24 10.24 -5.53 5.3 C-3.93 2.9 -2.39 1.58 0 0 Z \",fill:\"#301143\",transform:\"translate(515,135)\"})),_path413||(_path413=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6.66 1.34 7.32 0.68 8 0 C8.98 1.27 9.96 2.54 10.94 3.81 C11.48 4.52 12.03 5.23 12.59 5.96 C14 8 14 8 15 11 C17 11.92 17 11.92 19.38 12.5 C22.86 13.45 24.5 14.43 27 17 C30.95 17.93 34.23 18.04 38.19 17.38 C42 17 42 17 44.5 18.44 C44.99 18.95 45.49 19.47 46 20 C44.35 20 42.7 20 41 20 C40.96 21.93 40.96 21.93 42 24 C45.49 25.79 45.49 25.79 49 27 C49 25.35 49 23.7 49 22 C52.38 23.19 54.65 24.28 57 27 C55.68 27 54.36 27 53 27 C53.56 29.05 53.56 29.05 55 31 C55.92 31.12 56.84 31.24 57.79 31.37 C61.67 32.13 62.98 33.41 65.75 36.19 C70.45 40.65 75.32 43.92 81 47 C78 48 78 48 75.77 47.21 C71.47 45.03 67.82 43.02 64.38 39.62 C62.38 37.76 61.54 37.04 58.79 36.84 C56.32 37.11 56.32 37.11 53 38 C53 37.01 53 36.02 53 35 C52.04 35.03 52.04 35.03 51.06 35.07 C45.59 35.18 41.17 34.8 36 33 C36 31.68 36 30.36 36 29 C34.8 28.65 33.61 28.3 32.38 27.94 C27.42 26.3 22.87 24.01 18.24 21.62 C14.72 19.82 11.21 18.25 7.5 16.88 C3.13 15.16 0.09 13.6 -3 10 C-3 5.68 -2.4 3.59 0 0 Z \",fill:\"#45224F\",transform:\"translate(1018,690)\"})),_path414||(_path414=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.39 8.67 1.54 15.87 -1.92 23.97 C-3.57 28.61 -4.18 33.35 -4.92 38.21 C-5.95 44.9 -7.36 51.43 -9 58 C-9.33 58 -9.66 58 -10 58 C-9.67 50.41 -9.34 42.82 -9 35 C-8.34 35 -7.68 35 -7 35 C-7.5 30.55 -7.5 30.55 -8 26 C-12.69 26.52 -12.69 26.52 -17.18 27.88 C-21.8 29.71 -26.61 30.86 -31.41 32.14 C-35.38 33.22 -39.21 34.35 -43 36 C-43 36.66 -43 37.32 -43 38 C-43.99 38.5 -43.99 38.5 -45 39 C-45 39.99 -45 40.98 -45 42 C-45.59 43.97 -45.59 43.97 -46.38 46.06 C-46.63 46.75 -46.89 47.45 -47.15 48.16 C-48 50 -48 50 -50 52 C-50.25 54.52 -50.42 56.97 -50.5 59.5 C-50.73 66.73 -50.73 66.73 -53 69 C-53 66.36 -53 63.72 -53 61 C-53.66 61 -54.32 61 -55 61 C-54.29 57.91 -53.57 54.82 -52.86 51.73 C-52.3 49.32 -51.75 46.9 -51.2 44.49 C-47.59 28.63 -47.59 28.63 -45 24 C-44.28 24.25 -43.56 24.5 -42.81 24.75 C-39.83 25.32 -39.83 25.32 -37.31 23.06 C-36.55 22.38 -35.79 21.7 -35 21 C-34.34 21 -33.68 21 -33 21 C-33 20.34 -33 19.68 -33 19 C-32.01 19 -31.02 19 -30 19 C-30 19.66 -30 20.32 -30 21 C-27.36 22.28 -25.45 23.01 -22.5 22.94 C-19.06 21.65 -17.44 19.74 -15 17 C-14.24 16.15 -14.24 16.15 -13.46 15.29 C-11.16 12.69 -9.16 10.28 -7.44 7.25 C-5.69 4.52 -3.8 3.55 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#38154A\",transform:\"translate(526,178)\"})),_path415||(_path415=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.39 -0.16 2.39 -0.16 5 0 C6.81 2.5 6.81 2.5 8 5 C8.93 4.01 8.93 4.01 9.88 3 C12 1 12 1 14 1 C13.85 1.72 13.7 2.44 13.55 3.19 C12.13 10.77 11.88 17.76 12.31 25.44 C12.36 26.56 12.41 27.67 12.46 28.83 C12.71 34.25 13.04 39.66 13.47 45.07 C13.54 46.01 13.61 46.95 13.68 47.92 C13.8 49.67 13.96 51.41 14.13 53.15 C14.67 60.65 11.58 64.75 7.06 70.44 C4.35 72.49 2.37 72.79 -1 73 C-3.88 72.56 -3.88 72.56 -6 72 C-4.91 68.72 -4.17 68.08 -1.56 66 C2.42 62.81 4.32 60.12 5 55 C4.96 47.41 3.8 40.24 1.72 32.95 C-0.1 25.47 -0.13 18.15 -0.06 10.5 C-0.06 9.49 -0.05 8.47 -0.05 7.43 C-0.04 4.95 -0.02 2.48 0 0 Z \",fill:\"#301938\",transform:\"translate(831,314)\"})),_path416||(_path416=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.66 2.25 2.33 3.5 1.98 4.79 C0.75 10.37 0.92 15.64 1.25 21.31 C1.33 22.83 1.33 22.83 1.4 24.38 C1.75 30.59 2.33 36.61 3.6 42.7 C4.03 45.17 4.07 47.49 4 50 C1.07 45.61 -0.52 40.8 -2.38 35.88 C-2.78 34.81 -3.18 33.74 -3.6 32.63 C-6.82 23.88 -9.22 15.15 -11 6 C-16.47 6.65 -18.87 7.35 -23 11 C-24.66 12.13 -26.33 13.26 -28 14.38 C-33.79 18.43 -37.31 22.75 -40.75 28.88 C-47.16 39.64 -57.53 44.87 -68.08 50.9 C-74.5 54.58 -79.58 58.13 -84.2 63.97 C-88.8 69.15 -92.83 71.68 -99.5 73.44 C-116.46 78.21 -116.46 78.21 -129 90 C-129 85.24 -126.26 82.31 -123 79 C-121.1 77.93 -119.34 77.32 -117.25 76.7 C-114.62 75.88 -112.24 74.75 -109.75 73.56 C-105.83 71.72 -102.05 70.44 -97.88 69.31 C-91.94 67.43 -88.88 64.33 -85.04 59.54 C-81.16 54.71 -77.18 51.25 -71.88 48.06 C-71.03 47.55 -71.03 47.55 -70.16 47.03 C-66.54 44.85 -62.86 42.84 -59.12 40.88 C-51.88 36.93 -47.59 33.11 -43.12 26.12 C-37.6 17.59 -30.59 12.25 -22.31 6.56 C-21.68 6.12 -21.05 5.69 -20.4 5.24 C-14.32 1.19 -9.24 1 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#816786\",transform:\"translate(838,568)\"})),_path417||(_path417=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.84 0.4 0.84 0.4 1.7 0.81 C4.23 2.02 6.77 3.23 9.31 4.44 C10.19 4.86 11.07 5.28 11.98 5.71 C12.83 6.12 13.68 6.52 14.55 6.93 C15.33 7.31 16.11 7.68 16.92 8.06 C20.34 9.6 23.1 10.14 26.82 10.25 C27.75 10.28 28.67 10.31 29.63 10.35 C31.59 10.41 33.55 10.46 35.51 10.52 C36.43 10.55 37.36 10.59 38.32 10.62 C39.59 10.66 39.59 10.66 40.89 10.7 C43 11 43 11 45 13 C45 18.23 41.31 22.24 38 26 C34.97 27.52 32.35 27.17 29 27 C28.15 26.65 27.31 26.3 26.44 25.94 C23.21 24.7 21.31 25.09 18 26 C17.32 26.56 16.64 27.11 15.94 27.69 C14 29 14 29 11.56 28.56 C8.22 26.53 6.33 24.13 4 21 C3.44 20.28 2.89 19.56 2.31 18.81 C-0.52 12.74 -1.44 6.52 0 0 Z \",fill:\"#836E8F\",transform:\"translate(595,376)\"})),_path418||(_path418=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.02 3.32 15.17 11.34 19 19 C15.57 23.11 11.86 24.6 6.94 26.31 C6.19 26.58 5.43 26.85 4.66 27.12 C-1.45 29.13 -6.68 29.5 -13 28 C-13.27 27.11 -13.54 26.23 -13.81 25.31 C-14.85 22.02 -14.85 22.02 -16.62 19.5 C-18.4 16.28 -18.5 14.64 -18 11 C-16.16 8.72 -14.55 7.02 -12.38 5.12 C-11.85 4.63 -11.33 4.13 -10.79 3.62 C-7.18 0.37 -4.83 -0.78 0 0 Z \",fill:\"#401F54\",transform:\"translate(534,1051)\"})),_path419||(_path419=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.03 7.79 3.04 15.58 3.05 23.36 C3.06 26.01 3.07 28.65 3.08 31.29 C3.16 56.65 3.16 56.65 2.62 67.54 C2.59 68.24 2.56 68.94 2.53 69.67 C2.3 73.47 1.63 76.55 0 80 C-0.33 79.01 -0.66 78.02 -1 77 C-7.07 79.08 -11.89 81.23 -16.53 85.73 C-18 87 -18 87 -21 88 C-22.11 90.62 -22.11 90.62 -22.94 93.75 C-24.77 99.73 -24.77 99.73 -27.12 102.5 C-30.28 106.7 -30.38 111.88 -31 117 C-32.32 117 -33.64 117 -35 117 C-34.19 109.67 -32.44 104.56 -28.38 98.42 C-26.96 95.92 -26.45 94 -26 91.19 C-25.42 87.82 -24.72 86.3 -22.06 84.12 C-20.55 83.07 -20.55 83.07 -19 82 C-16.58 79.84 -15.21 78.02 -14 75 C-13.8 71.82 -13.8 71.82 -13.94 68.44 C-14.1 62.29 -14.1 62.29 -13 59 C-11.48 57.61 -11.48 57.61 -9.62 56.31 C-9.02 55.88 -8.41 55.44 -7.79 54.99 C-6 54 -6 54 -3 54 C-3.02 52.98 -3.05 51.95 -3.07 50.89 C-3.09 49.53 -3.11 48.17 -3.12 46.81 C-3.14 46.14 -3.16 45.47 -3.18 44.77 C-3.22 40.64 -2.59 37.77 -1 34 C-0.8 31.36 -0.8 31.36 -0.94 28.5 C-1.05 22.21 -0.82 15.97 -0.5 9.69 C-0.43 8.26 -0.43 8.26 -0.36 6.81 C-0.24 4.54 -0.12 2.27 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(1107,1163)\"})),_path420||(_path420=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.18 0.32 4.63 0.62 6.88 2.96 C7.71 4.16 7.71 4.16 8.56 5.38 C10.96 8.78 10.96 8.78 14.09 11.48 C16.5 13.4 17.06 15.04 18.06 17.94 C19.31 21.47 20.65 24.08 23 27 C23.64 27.97 24.28 28.94 24.94 29.94 C26.9 32.97 26.9 32.97 29.06 35.44 C30.93 37.91 31.9 40.19 33.01 43.06 C34.62 46.22 37.07 48.71 39.48 51.3 C43.82 59 42.01 69.81 41.69 78.31 C41.65 79.56 41.62 80.81 41.58 82.1 C41.52 83.9 41.52 83.9 41.45 85.74 C41.41 86.82 41.37 87.9 41.33 89.02 C41 92.01 40.25 94.28 39 97 C37.06 96.19 37.06 96.19 35 95 C34 91.99 33.76 89.63 33.57 86.48 C32.55 70.77 31.49 57.39 24.48 43.09 C22.75 39.47 21.33 35.79 19.96 32.02 C18.92 29.83 17.74 28.65 16 27 C15.07 25.37 14.14 23.73 13.23 22.09 C11.79 19.65 10.2 17.37 8.56 15.06 C0 2.98 0 2.98 0 0 Z \",fill:\"#080E33\",transform:\"translate(632,1033)\"})),_path421||(_path421=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.78 4.51 11.78 4.51 15 7 C16.08 10.32 16.5 13.81 17.06 17.25 C17.24 18.33 17.42 19.41 17.6 20.52 C17.8 21.75 17.8 21.75 18 23 C19.32 23 20.64 23 22 23 C22.27 22.36 22.54 21.72 22.81 21.06 C24 19 24 19 27 18 C27.94 16.65 28.88 15.29 29.75 13.9 C32.26 10.09 35.17 6.57 38 3 C39.28 6.83 38.52 8.45 37.09 12.1 C36 14 36 14 33.06 15.88 C28.62 18.96 27.63 22.99 26 28 C25.34 28 24.68 28 24 28 C24 30.31 24 32.62 24 35 C23.34 35 22.68 35 22 35 C21.34 36.32 20.68 37.64 20 39 C19.01 39 18.02 39 17 39 C17 39.66 17 40.32 17 41 C14.81 41.81 14.81 41.81 12 42 C9.19 40.06 9.19 40.06 7 37 C6.86 34.99 6.86 34.99 7 32.88 C7 31.6 7 30.32 7 29 C4.7 27.1 4.7 27.1 2 26 C-0.17 22.74 -0.11 21.37 0 17.6 C0 13.01 -0.49 8.45 -0.88 3.88 C-0.92 2.93 -0.96 1.98 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#45245A\",transform:\"translate(466,280)\"})),_path422||(_path422=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.62 1.5 1.62 1.5 3 4 C3.35 4.61 3.7 5.21 4.07 5.84 C6.64 10.51 7 12.21 7 18 C-10.49 18 -27.98 18 -46 18 C-44.03 13.07 -42.33 10.77 -38 8 C-35.49 6.95 -33.21 6.11 -30.62 5.38 C-29.94 5.17 -29.25 4.97 -28.54 4.76 C-19.46 2.14 -9.48 -0.6 0 0 Z \",fill:\"#45224F\",transform:\"translate(423,1262)\"})),_path423||(_path423=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.65 3.01 33.37 10.32 48.56 17.62 C49.64 18.14 50.71 18.65 51.81 19.18 C62.73 24.58 72.53 31.39 82 39 C83.36 40.06 83.36 40.06 84.74 41.14 C85.65 41.86 86.56 42.58 87.5 43.31 C88.34 43.97 89.17 44.62 90.03 45.3 C92 47 92 47 93 49 C93.44 49.43 93.89 49.85 94.34 50.29 C96.44 52.46 97.9 54.82 99.5 57.38 C100.38 58.78 100.38 58.78 101.28 60.21 C102.13 61.59 102.13 61.59 103 63 C103.55 63.85 104.11 64.7 104.68 65.58 C106.6 69.09 106.66 72.04 107 76 C107.66 76 108.32 76 109 76 C109.15 76.68 109.29 77.36 109.44 78.05 C112.27 91.12 115.28 103.93 119.9 116.5 C120.19 117.3 120.48 118.1 120.78 118.93 C121.04 119.62 121.3 120.32 121.57 121.03 C122.08 123.34 121.73 124.78 121 127 C120.67 126.31 120.35 125.63 120.01 124.92 C119.57 124.02 119.14 123.12 118.69 122.19 C118.26 121.29 117.83 120.4 117.39 119.48 C116.17 117.03 116.17 117.03 114.52 115.58 C111.84 112.8 110.92 109.2 109.62 105.62 C109.32 104.79 109.01 103.95 108.7 103.09 C106.5 96.91 104.87 90.71 103.44 84.31 C99.37 66.11 99.37 66.11 89 51 C89 50.34 89 49.68 89 49 C88.01 48.72 88.01 48.72 87 48.44 C84.26 47.12 82.91 46.1 80.75 44.06 C69.18 33.62 54.63 26.35 41 19 C41 18.01 41 17.02 41 16 C40.29 15.88 39.58 15.76 38.85 15.63 C35.88 14.97 33.26 14.01 30.44 12.88 C24.46 10.53 18.44 8.36 12.38 6.25 C11.5 5.94 10.62 5.64 9.72 5.32 C6.48 4.2 3.25 3.08 0 2 C0 1.34 0 0.68 0 0 Z M108 84 C109 87 109 87 109 87 Z M109 87 C109 88.65 109 90.3 109 92 C109.33 92 109.66 92 110 92 C110 90.35 110 88.7 110 87 C109.67 87 109.34 87 109 87 Z M110 92 C111 94 111 94 111 94 Z M110 95 C111 97 111 97 111 97 Z M111 97 C112 100 112 100 112 100 Z \",fill:\"#301839\",transform:\"translate(1150,617)\"})),_path424||(_path424=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.81 0.07 1.81 0.07 4 1 C9.63 8.09 16 18.72 16 28 C14.95 28.25 13.9 28.5 12.81 28.75 C9.16 29.76 6.94 31.63 4 34 C2.51 33.5 2.51 33.5 1 33 C1 32.01 1 31.02 1 30 C-0.05 29.75 -1.1 29.5 -2.19 29.25 C-7.46 27.7 -10.6 25.08 -13.31 20.31 C-15.33 15.94 -15.77 11.75 -15 7 C-14.01 4.65 -13.4 3.31 -11.38 1.75 C-7.89 0.65 -4.65 0.94 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(989,480)\"})),_path425||(_path425=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.84 7.16 15.67 16.14 18 28 C18.25 30.88 18.25 30.88 18 33 C17.34 33.66 16.68 34.32 16 35 C15.35 37.57 15.35 37.57 15 40 C15.72 39.77 16.44 39.55 17.19 39.31 C20 39 20 39 22.5 39.94 C25.9 42.74 28.04 46.07 30 50 C30 50.66 30 51.32 30 52 C28.1 52.05 26.21 52.09 24.31 52.12 C23.26 52.15 22.2 52.17 21.11 52.2 C17.95 52 15.89 51.23 13 50 C9.48 49.55 6.11 49.45 2.88 51.06 C-0.13 52.57 -1.82 51.98 -5 51 C-7.86 49.23 -10.56 47.33 -13 45 C-13 44.34 -13 43.68 -13 43 C-13.97 42.71 -14.94 42.42 -15.94 42.12 C-19 41 -19 41 -20 39 C-21.65 39 -23.3 39 -25 39 C-25.33 37.35 -25.66 35.7 -26 34 C-22.37 34.99 -18.74 35.98 -15 37 C-15 37.66 -15 38.32 -15 39 C-14.34 39 -13.68 39 -13 39 C-13 39.66 -13 40.32 -13 41 C-9.03 42.01 -5.57 42.74 -1.76 40.94 C2.48 37.86 5.33 34.54 8 30 C8.99 28.66 9.98 27.32 11 26 C9.68 26.33 8.36 26.66 7 27 C7.66 26.01 8.32 25.02 9 24 C9 16.01 6.01 10.76 2 4 C1.32 2.67 0.65 1.34 0 0 Z \",fill:\"#452254\",transform:\"translate(775,154)\"})),_path426||(_path426=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86 0.07 4.38 0.53 6.65 2.26 C8.46 4.59 8.29 5.84 8 8.75 C7.29 14.1 5.63 17.03 2 21 C0.68 21.37 -0.66 21.7 -2 22 C-4.28 23.21 -6.47 24.52 -8.68 25.84 C-11.14 27.07 -13.31 27.49 -16 28 C-17.85 28.86 -17.85 28.86 -19.5 29.94 C-22.26 31.59 -24.95 32.93 -28 34 C-28.66 34.25 -29.32 34.5 -30 34.75 C-32.87 35.11 -34.47 34.36 -37 33 C-38.04 31.69 -39.04 30.36 -40 29 C-30.57 21.91 -20.95 15.2 -11.06 8.77 C-10.2 8.21 -9.34 7.65 -8.46 7.07 C-7.69 6.57 -6.93 6.08 -6.14 5.56 C-3.9 4.02 -3.9 4.02 -1.88 1.8 C-1.26 1.21 -0.64 0.61 0 0 Z \",fill:\"#7C6E9E\",transform:\"translate(634,514)\"})),_path427||(_path427=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.65 0.38 3.81 0.8 5.7 2.74 C6.21 3.45 6.72 4.15 7.25 4.88 C7.77 5.57 8.29 6.27 8.83 6.99 C10 9 10 9 10 12 C11.31 11.72 12.63 11.42 13.94 11.12 C15.03 10.88 15.03 10.88 16.15 10.63 C18.21 10.17 18.21 10.17 19 8 C20.98 8 22.96 8 25 8 C25 7.01 25 6.02 25 5 C26.98 4.67 28.96 4.34 31 4 C35.72 9.67 37.55 13.3 37.38 20.71 C37 23 37 23 34.94 25.12 C31.33 26.2 28.76 26.41 25 26 C22.81 24.17 21.3 22.68 19.56 20.5 C19.12 19.98 18.67 19.45 18.21 18.91 C17.12 17.62 16.06 16.31 15 15 C12.24 15.5 12.24 15.5 10 17 C9.51 19.25 9.1 21.51 8.7 23.77 C7.9 26.31 7.12 27.42 5 29 C2.31 28.69 2.31 28.69 0 28 C0 27.34 0 26.68 0 26 C-0.64 25.73 -1.28 25.46 -1.94 25.19 C-4 24 -4 24 -5 21 C-5.73 13.4 -5.74 7.55 -1.09 1.29 C-0.73 0.87 -0.37 0.44 0 0 Z \",fill:\"#7F709D\",transform:\"translate(529,409)\"})),_path428||(_path428=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.07 3.07 4.57 7.06 6.43 10.95 C7.76 13.66 8.85 15.85 11 18 C13.97 16.02 16.94 14.04 20 12 C25.81 15.05 28.26 19.17 31 25 C32.15 28.74 32.47 31.75 31.06 35.5 C28.31 37.5 26.27 37.4 22.94 37.34 C21 37 21 37 18 35 C17.01 35 16.02 35 15 35 C15.05 35.87 15.05 35.87 15.11 36.76 C15.29 41.95 15.16 45.65 12 50 C5.53 55 5.53 55 2 55 C2 55.66 2 56.32 2 57 C1.29 57.3 0.58 57.61 -0.15 57.92 C-1.07 58.34 -1.99 58.76 -2.94 59.19 C-3.85 59.59 -4.77 60 -5.71 60.42 C-8.22 61.8 -8.22 61.8 -8.75 64.49 C-8.84 65.32 -8.92 66.15 -9 67 C-9.33 67.99 -9.66 68.98 -10 70 C-20.31 54.39 -20.31 54.39 -19.69 49.56 C-19.46 49.05 -19.23 48.53 -19 48 C-16 49 -16 49 -14.97 50.59 C-14.37 51.86 -13.76 53.13 -13.16 54.41 C-12.1 56.13 -12.1 56.13 -10.17 56.85 C-4.46 57.25 1.62 52.54 5.94 49.12 C9.19 46.1 10.84 43.36 12 39 C12.05 33.1 10.82 27.58 9 22 C9 22.99 9 23.98 9 25 C8.69 26.34 8.37 27.68 8 29 C7.18 26.96 6.37 24.92 5.56 22.88 C4.88 21.17 4.88 21.17 4.19 19.43 C3.09 16.25 2.5 13.31 2 10 C1.65 9.34 1.3 8.68 0.94 8 C-0.33 5.29 -0.13 2.96 0 0 Z \",fill:\"#2B113E\",transform:\"translate(912,463)\"})),_path429||(_path429=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.15 1.76 8.7 4.17 11.88 8.62 C12.25 9.41 12.62 10.19 13 11 C12.67 11.66 12.34 12.32 12 13 C10.68 13 9.36 13 8 13 C8.31 13.9 8.31 13.9 8.62 14.81 C9 17 9 17 7 20 C6.34 19.67 5.68 19.34 5 19 C1.64 18.63 -1.75 18.53 -5.12 18.38 C-6.05 18.32 -6.98 18.27 -7.93 18.22 C-12.22 18.01 -16.3 17.94 -20.55 18.54 C-24 19 -24 19 -26 18 C-26 18.66 -26 19.32 -26 20 C-27.65 19.67 -29.3 19.34 -31 19 C-31 19.66 -31 20.32 -31 21 C-32.24 21.29 -33.47 21.58 -34.75 21.88 C-37.75 22.62 -40.25 23.58 -43 25 C-46.17 26.01 -47.63 26.14 -50.79 24.96 C-51.72 24.44 -52.66 23.91 -53.62 23.38 C-54.57 22.87 -55.51 22.36 -56.48 21.84 C-59.23 19.83 -60.47 18.01 -62 15 C-62.99 15.33 -63.98 15.66 -65 16 C-65.41 15.13 -65.82 14.27 -66.25 13.38 C-67.98 10.04 -69.87 7.08 -72 4 C-67.08 4.43 -64.55 6.69 -61 10 C-60.01 11.49 -60.01 11.49 -59 13 C-58.01 13.33 -57.02 13.66 -56 14 C-56 14.66 -56 15.32 -56 16 C-49.4 17.02 -44.43 17.24 -38.19 14.75 C-35.85 13.95 -33.83 13.72 -31.38 13.56 C-27.44 13.26 -25.33 11.95 -22.02 9.78 C-18.36 8.37 -14.66 9.25 -10.87 9.84 C-7.59 10.02 -5.84 9.64 -3 8 C-1.77 6.09 -1.77 6.09 -1.19 3.88 C-0.95 3.15 -0.72 2.43 -0.48 1.68 C-0.24 0.85 -0.24 0.85 0 0 Z \",fill:\"#391A48\",transform:\"translate(285,914)\"})),_path430||(_path430=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.21 1.53 0.41 2.31 0.62 C2.17 2.23 2.02 3.83 1.88 5.44 C1.79 6.33 1.71 7.22 1.63 8.14 C1.31 10.62 1.31 10.62 0.31 13.62 C-0.35 13.62 -1.01 13.62 -1.69 13.62 C-1.63 14.25 -1.57 14.87 -1.51 15.5 C-1.16 22.37 -2.57 27.88 -4.9 34.26 C-6.59 39.02 -7.28 42.62 -6.69 47.62 C-6.36 48.28 -6.03 48.95 -5.69 49.62 C-7.01 49.62 -8.33 49.62 -9.69 49.62 C-9.69 51.93 -9.69 54.25 -9.69 56.62 C-11.76 53.51 -11.94 52.84 -11.88 49.31 C-11.87 48.52 -11.86 47.72 -11.85 46.9 C-11.69 44.62 -11.69 44.62 -10.81 41.38 C-10.35 38.33 -10.35 38.33 -13.25 35.75 C-16.44 33.44 -18.74 33.11 -22.69 33.62 C-24.95 34.06 -24.95 34.06 -26.69 34.62 C-26.36 33.3 -26.03 31.99 -25.69 30.62 C-31.7 34.36 -31.7 34.36 -34.69 40.62 C-35.35 40.62 -36.01 40.62 -36.69 40.62 C-34.5 32.59 -29.14 29.33 -22.69 24.62 C-23.68 24.29 -24.67 23.97 -25.69 23.62 C-22.12 19.36 -18.46 15.35 -14.49 11.46 C-11.94 8.87 -9.6 6.11 -7.27 3.32 C-4.87 0.75 -3.58 -0.5 0 0 Z \",fill:\"#311243\",transform:\"translate(273.6875,782.375)\"})),_path431||(_path431=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.03 1.55 7.91 3.34 11.81 5.19 C15.95 7.15 20.1 9.06 24.33 10.84 C25.04 11.14 25.74 11.44 26.47 11.75 C27.83 12.32 29.18 12.88 30.54 13.43 C35.14 15.37 38.42 17.59 42 21 C42.49 22.49 42.49 22.49 43 24 C43.78 24.54 44.57 25.07 45.38 25.62 C48.19 28.17 48.42 28.94 49.31 32.44 C50.4 36.16 51.47 37.83 54.75 39.94 C58.36 41.89 62.06 42.88 66 44 C68.6 45.82 70.71 47.69 72.88 50 C75.08 52.08 77.39 53.37 80.02 54.84 C83.45 56.84 86.68 59.11 89.94 61.38 C90.64 61.86 91.34 62.34 92.06 62.84 C102.07 69.8 102.07 69.8 106 73 C106 73.66 106 74.32 106 75 C106.71 75.22 107.42 75.45 108.15 75.68 C115.64 79.16 122.71 87.48 126 95 C126 95.99 126 96.98 126 98 C125.34 98 124.68 98 124 98 C123.44 96.95 122.89 95.9 122.31 94.81 C120.34 91.32 117.88 88.8 115 86 C115 85.34 115 84.68 115 84 C114.46 83.77 113.93 83.55 113.38 83.31 C110.84 81.91 108.78 80.19 106.59 78.3 C105 77 103.36 75.91 101.62 74.81 C100.76 74.21 99.89 73.62 99 73 C99 72.34 99 71.68 99 71 C98.27 70.72 97.54 70.45 96.78 70.16 C89.21 67 82.52 62.04 75.84 57.33 C71.63 54.38 67.3 51.72 62.83 49.19 C61 48 61 48 60 46 C57.83 44.97 57.83 44.97 55.25 44.06 C51.61 42.66 48.17 41.33 45 39 C45 38.34 45 37.68 45 37 C43.35 36.34 41.7 35.68 40 35 C40 34.34 40 33.68 40 33 C39.32 32.92 38.64 32.84 37.94 32.75 C34.13 31.78 31.36 30.04 28 28 C28.31 27.26 28.62 26.51 28.94 25.75 C29.81 23.49 30.44 21.35 31 19 C25.2 15.13 19.18 12.02 12.9 9.03 C8.22 6.76 4.12 4.18 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#311540\",transform:\"translate(1056,739)\"})),_path432||(_path432=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.8 5.65 5.8 5.65 8 9 C8 9.66 8 10.32 8 11 C8.57 11.07 9.14 11.14 9.73 11.22 C12.81 12.28 14.15 14.08 16.31 16.5 C20.26 20.61 22.29 21.48 28 22 C30.86 23.77 33.44 25.82 36 28 C36.66 27.01 37.32 26.02 38 25 C38.5 26.48 38.5 26.48 39 28 C39.66 28.31 40.32 28.62 41 28.94 C43 30 43 30 43.81 32 C44 34 44 34 43 36 C40.75 36.31 40.75 36.31 38 36 C36 33.81 36 33.81 34 31 C30.04 25.84 26.4 25.15 20.23 24.26 C19.49 24.18 18.76 24.09 18 24 C17.7 24.61 17.4 25.23 17.09 25.86 C15.54 28.9 14.1 31.45 11 33 C5.29 29.42 -0.08 25.47 -5.38 21.31 C-5.98 20.84 -6.59 20.36 -7.21 19.87 C-9.96 17.7 -12.56 15.5 -15 13 C-13.68 8.85 -12.28 7.04 -8.62 4.69 C-7.85 4.18 -7.08 3.66 -6.29 3.14 C-4 2 -4 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A174A\",transform:\"translate(152,1224)\"})),_path433||(_path433=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 4.29 0.66 8.58 1 13 C2.32 13 3.64 13 5 13 C5.09 11.84 5.09 11.84 5.18 10.66 C5.27 9.66 5.35 8.66 5.44 7.62 C5.52 6.63 5.6 5.63 5.68 4.6 C6 2 6 2 7 0 C8.65 0.66 10.3 1.32 12 2 C10.3 14.4 6.96 25.58 1.46 36.8 C0.07 39.64 -1.11 42.35 -2.05 45.38 C-2.37 46.24 -2.68 47.11 -3 48 C-4.65 48.7 -6.32 49.37 -8 50 C-9.54 52.84 -10.15 55.6 -10.94 58.75 C-11.29 59.82 -11.64 60.89 -12 62 C-15 63 -15 63 -17.19 62.06 C-18.08 61.54 -18.08 61.54 -19 61 C-17.54 57.76 -15.67 55.31 -13.44 52.56 C-9.39 47.08 -6.6 41.29 -3.88 35.06 C-3.46 34.14 -3.05 33.21 -2.62 32.26 C-2.06 30.94 -2.06 30.94 -1.49 29.6 C-1.16 28.81 -0.82 28.02 -0.47 27.21 C0.12 24.44 -0.51 23.34 -2 21 C-2.38 21.84 -2.75 22.69 -3.14 23.55 C-3.9 25.2 -3.9 25.2 -4.69 26.88 C-5.19 27.97 -5.69 29.06 -6.2 30.18 C-8.23 33.37 -9.38 34.11 -13 35 C-15.25 34.75 -15.25 34.75 -17 34 C-17.67 32.67 -18.33 31.33 -19 30 C-18.01 29.67 -17.02 29.34 -16 29 C-10.74 23.02 -9.76 16.16 -8.71 8.54 C-8.31 6.21 -7.94 4.17 -7 2 C-4.42 0.68 -2.9 0 0 0 Z \",fill:\"#857295\",transform:\"translate(909,363)\"})),_path434||(_path434=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.38 0.69 3.38 0.69 7 2 C9.49 5.78 9.17 9.58 9 14 C8.34 14 7.68 14 7 14 C6.34 12.35 5.68 10.7 5 9 C4.01 9 3.02 9 2 9 C2.02 9.77 2.05 10.54 2.07 11.34 C2.1 12.84 2.1 12.84 2.12 14.38 C2.15 15.37 2.17 16.37 2.2 17.4 C2 20 2 20 0 22 C-0.66 21.01 -1.32 20.02 -2 19 C-4.4 21.4 -4.34 22.33 -4.62 25.62 C-4.7 26.44 -4.77 27.26 -4.85 28.1 C-4.9 28.73 -4.95 29.35 -5 30 C-5.33 30 -5.66 30 -6 30 C-6 28.02 -6 26.04 -6 24 C-6.66 24 -7.32 24 -8 24 C-9.52 31.5 -10.42 38.87 -10.94 46.5 C-11.49 54 -12.29 61.35 -13.62 68.75 C-15.36 78.51 -15.28 88.12 -15 98 C-18 98 -18 98 -19.67 96.4 C-23.81 88.94 -20.72 77.61 -19.43 69.59 C-18.99 65.89 -18.97 62.41 -19.06 58.69 C-19.17 51.41 -18.5 44.35 -17.62 37.12 C-17.5 36.08 -17.37 35.03 -17.24 33.96 C-16.43 27.57 -15.36 21.29 -14 15 C-13.34 15.66 -12.68 16.32 -12 17 C-9.5 17.81 -7.66 18 -5 18 C-4.84 16.43 -4.84 16.43 -4.67 14.82 C-4.51 13.45 -4.35 12.07 -4.19 10.69 C-4.12 10 -4.05 9.31 -3.97 8.6 C-3.61 5.57 -3.35 3.44 -1.43 1.02 C-0.96 0.68 -0.48 0.35 0 0 Z \",fill:\"#160A1F\",transform:\"translate(505,294)\"})),_path435||(_path435=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.32 1.98 2.64 3 4 C4.32 3.34 5.64 2.68 7 2 C7.52 2.62 8.03 3.24 8.56 3.88 C11.54 6.47 14.18 7.12 18 8 C18.33 9.65 18.66 11.3 19 13 C18.01 13.33 17.02 13.66 16 14 C16 14.99 16 15.98 16 17 C16.82 16.86 17.65 16.71 18.5 16.56 C23.75 17.22 26.34 20.37 30 24 C30.93 24.89 31.86 25.77 32.81 26.69 C38 32.17 38 32.17 38 37 C38.99 37.33 39.98 37.66 41 38 C40.53 38.85 40.05 39.69 39.56 40.56 C35.67 49.13 36.68 59.34 36.48 68.57 C36.45 69.75 36.41 70.93 36.38 72.14 C36.34 73.76 36.34 73.76 36.3 75.41 C36 78 36 78 34 80 C34.01 78.74 34.02 77.48 34.04 76.19 C34.1 65.41 33.84 54.75 33 44 C33.66 44 34.32 44 35 44 C35.33 41.03 35.66 38.06 36 35 C35.34 36.32 34.68 37.64 34 39 C32 41 32 41 29.81 41.06 C24.31 38.98 20.71 34.2 17.56 29.38 C15.22 25.89 12.46 24.31 8.87 22.25 C5.11 19.74 3.36 16.39 2.25 12.12 C2.17 11.42 2.08 10.72 2 10 C1.01 10 0.02 10 -1 10 C-2 9 -2 9 -2.06 6.44 C-2.04 5.63 -2.02 4.83 -2 4 C-1.34 3.67 -0.68 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#401F55\",transform:\"translate(371,741)\"})),_path436||(_path436=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.81 2.05 1.81 2.05 3.44 4.88 C4.03 5.88 4.62 6.88 5.23 7.92 C5.82 8.94 6.4 9.95 7 11 C8.06 12.73 9.12 14.46 10.19 16.19 C11.13 17.79 12.07 19.39 13 21 C13.62 22.03 13.62 22.03 14.26 23.09 C17.78 29.33 17.55 34.56 16.44 41.5 C14.44 46.37 11.93 50.45 8 54 C5.09 55.03 3.14 55.06 0 55 C-0.33 54.01 -0.66 53.02 -1 52 C-0.26 51.77 0.49 51.55 1.25 51.31 C5.26 49.4 7.17 46.68 9.12 42.74 C10.18 39.45 10.16 36.89 9.94 33.44 C9.88 32.32 9.83 31.21 9.78 30.06 C8.79 26.17 7.33 25.13 4 23 C3.07 22.57 2.14 22.13 1.19 21.69 C-2.49 19.74 -5.22 17.32 -8.27 14.52 C-9.94 12.93 -9.94 12.93 -12 12 C-12 11.34 -12 10.68 -12 10 C-12.66 10.17 -13.32 10.33 -14 10.5 C-17.73 11.12 -21.22 11.06 -25 11 C-25.75 8.75 -25.75 8.75 -26 6 C-24.75 3.69 -24.75 3.69 -22 2 C-19.21 1.8 -16.49 1.88 -13.69 1.99 C-8.77 2.01 -4.95 -0.71 0 0 Z \",fill:\"#634369\",transform:\"translate(609,407)\"})),_path437||(_path437=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.01 5.67 0.18 12 -0.68 17.8 C-0.89 19.22 -1.08 20.64 -1.26 22.07 C-3.96 43.01 -16.45 60.13 -32 74 C-35.63 76.42 -36.71 76.63 -41 76 C-43.44 74.6 -45.68 73.07 -47.95 71.41 C-50.04 69.83 -50.04 69.83 -53 69 C-55 69.68 -55 69.68 -57 70.81 C-57.68 71.17 -58.36 71.53 -59.06 71.89 C-60.75 72.86 -62.38 73.92 -64 75 C-65.32 74.01 -66.64 73.02 -68 72 C-66.68 68.16 -65.07 65.65 -62.31 62.69 C-61.6 61.91 -60.89 61.14 -60.16 60.34 C-59.44 59.57 -58.73 58.79 -58 58 C-56.77 56.61 -55.54 55.21 -54.31 53.81 C-53.75 53.17 -53.18 52.52 -52.59 51.86 C-51.11 50.13 -49.71 48.36 -48.31 46.56 C-45.93 43.93 -45.29 43.6 -42 43 C-44 45.67 -46 48.33 -48 51 C-48.52 51.75 -49.04 52.5 -49.57 53.27 C-50.04 53.84 -50.52 54.41 -51 55 C-51.66 55 -52.32 55 -53 55 C-53 56.65 -53 58.3 -53 60 C-51.48 60.06 -51.48 60.06 -49.94 60.12 C-45.72 60.69 -43.66 62.81 -40.62 65.62 C-38.39 67.52 -36.93 68.08 -34 68 C-29.09 66.01 -26.39 63.57 -23.12 59.44 C-22.34 58.47 -21.56 57.5 -20.76 56.5 C-18.81 54.24 -18.81 54.24 -19 52 C-18.34 51.34 -17.68 50.68 -17 50 C-15.14 46.75 -14.03 43.3 -12.88 39.75 C-12.52 38.67 -12.17 37.59 -11.8 36.48 C-11.41 35.25 -11.41 35.25 -11 34 C-10.34 34 -9.68 34 -9 34 C-8.88 33.36 -8.77 32.73 -8.65 32.07 C-7.78 27.95 -6.7 23.89 -5.62 19.81 C-5.4 18.97 -5.18 18.12 -4.95 17.25 C-3.41 11.47 -1.78 5.72 0 0 Z \",fill:\"#3C194D\",transform:\"translate(606,1190)\"})),_path438||(_path438=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.56 1.19 1.56 1.19 3 3 C3.06 5.31 3.06 5.31 2 8 C1.01 8.99 -0.02 9.94 -1.06 10.88 C-3.81 13.4 -3.98 13.68 -4.25 17.69 C-4.17 18.78 -4.09 19.87 -4 21 C-4.66 21.99 -5.32 22.98 -6 24 C-12.12 24.44 -12.12 24.44 -15 23 C-15 22.34 -15 21.68 -15 21 C-15.8 21.4 -15.8 21.4 -16.61 21.8 C-19.8 23.4 -19.8 23.4 -23 25 C-23.71 25.39 -24.41 25.79 -25.14 26.2 C-25.75 26.46 -26.37 26.73 -27 27 C-29 26 -29 26 -30 23 C-31.24 19.36 -31.24 19.36 -33 16 C-35.07 14.96 -35.07 14.96 -37 15 C-38.74 18.05 -39.25 20.53 -39.62 24 C-40.1 26.69 -40.1 26.69 -41 29 C-43.01 30.28 -44.99 30.97 -47.22 31.8 C-49.25 32.9 -49.25 32.9 -49.75 35.45 C-49.98 37.99 -50.08 40.45 -50 43 C-51.78 42.86 -51.78 42.86 -54 42 C-55.82 39.49 -55.82 39.49 -57.56 36.31 C-58.14 35.28 -58.72 34.24 -59.32 33.18 C-59.87 32.13 -60.43 31.08 -61 30 C-61.57 28.93 -62.14 27.86 -62.73 26.75 C-64 24 -64 24 -63.69 21.62 C-63.46 21.09 -63.23 20.55 -63 20 C-61.02 22.97 -61.02 22.97 -59 26 C-58.34 25.67 -57.68 25.34 -57 25 C-56.34 27.64 -55.68 30.28 -55 33 C-54.67 33 -54.34 33 -54 33 C-53.67 31.35 -53.34 29.7 -53 28 C-52.01 28.33 -51.02 28.66 -50 29 C-50 28.34 -50 27.68 -50 27 C-46.54 26.5 -46.54 26.5 -43 26 C-42.78 24.04 -42.57 22.08 -42.38 20.12 C-42.26 19.03 -42.14 17.94 -42.02 16.82 C-42.02 15.89 -42.01 14.96 -42 14 C-42.66 13.34 -43.32 12.68 -44 12 C-39.36 7.6 -35.15 5.68 -29 4 C-29 4.66 -29 5.32 -29 6 C-28.34 6 -27.68 6 -27 6 C-26.67 5.01 -26.34 4.02 -26 3 C-25.34 3.33 -24.68 3.66 -24 4 C-24.99 7.3 -25.98 10.6 -27 14 C-24.1 14.25 -24.1 14.25 -22.25 13 C-20 12 -20 12 -16.75 12.06 C-10.99 11.97 -6.68 10.68 -2.56 6.56 C-1.17 4.28 -0.39 2.62 0 0 Z \",fill:\"#371943\",transform:\"translate(1266,849)\"})),_path439||(_path439=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.95 0.56 6.79 1.6 10 4 C10.81 6.19 10.81 6.19 11 8 C11.66 8 12.32 8 13 8 C13.35 8.9 13.7 9.8 14.06 10.73 C16.39 14.66 19.07 16.27 23 18.31 C23.63 18.66 24.26 19 24.91 19.36 C27.57 20.81 30.12 22.04 33 23 C33.66 23.66 34.32 24.32 35 25 C35.99 24.67 36.98 24.34 38 24 C47.28 27.75 53.76 32.89 58 42 C58.66 42.33 59.32 42.66 60 43 C59.34 41.02 58.68 39.04 58 37 C60.54 39.47 62.91 41.88 65.06 44.69 C67.01 47.02 68.3 47.78 71 49 C72 50 73 51 74 52 C75.49 52.5 75.49 52.5 77 53 C77 53.99 77 54.98 77 56 C70.31 54.51 64.17 51.16 58.12 48.03 C56.33 47.16 54.5 46.38 52.67 45.63 C49.03 44.08 45.77 42.12 42.44 40 C35.86 35.83 29.3 32.16 21.75 30.12 C20.84 29.75 19.93 29.38 19 29 C18.38 27.06 18.38 27.06 18 25 C16.02 23.25 16.02 23.25 14 22 C14.99 21.34 15.98 20.68 17 20 C16.09 19.44 15.18 18.89 14.25 18.31 C10.53 15.67 7.84 13.09 6.12 8.81 C4.43 6.07 2 5.96 -1 5 C-3.38 2.88 -3.38 2.88 -5 1 C-3 1.65 -1 2.32 1 3 C1.87 3.25 2.73 3.5 3.62 3.75 C6.9 5.47 8.16 7.86 10 11 C9.59 8.09 9.59 8.09 8 5 C5.48 3.3 2.82 2.12 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#321541\",transform:\"translate(946,667)\"})),_path440||(_path440=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.3 3.77 5.91 9.1 8.12 14.25 C8.81 15.79 8.81 15.79 9.5 17.36 C13.99 27.69 13.99 27.69 14 33 C12 36.4 8.18 37.33 4.62 38.69 C3.5 39.12 2.38 39.56 1.23 40.01 C-1.82 40.94 -3.86 41.51 -7 41 C-11.46 36.95 -15.33 30.47 -16.47 24.59 C-16 22 -16 22 -13.23 19.83 C-12.04 19.14 -10.84 18.47 -9.62 17.81 C-5.03 15.3 -5.03 15.3 -1 12 C-0.24 7.97 0.12 4.1 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(588,983)\"})),_path441||(_path441=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.83 1.66 3.1 3.16 4.36 5.3 C6.03 8.05 7.86 10.49 9.88 13 C10.57 13.88 11.27 14.76 12 15.66 C14.01 18.16 14.01 18.16 16.94 20.38 C19.85 24.08 19.65 27.44 19.76 32.06 C20.16 37.02 22.19 40.56 24.94 44.62 C25.44 45.38 25.95 46.14 26.46 46.91 C27.86 48.8 29.29 50.4 31 52 C29.39 51.74 27.79 51.47 26.19 51.19 C25.29 51.04 24.4 50.89 23.48 50.73 C21 50 21 50 19.45 48.39 C18.08 46.76 18.08 46.76 15.88 46.97 C10.58 48.18 8.11 49.28 5 54 C4.34 54 3.68 54 3 54 C2.67 54.66 2.34 55.32 2 56 C2.31 53.94 2.62 51.87 2.94 49.81 C3.11 48.66 3.29 47.52 3.46 46.33 C3.91 43.54 4.44 40.77 5 38 C5.61 33.01 4.6 29.84 2.56 25.38 C-1.12 17.06 -1.73 8.89 0 0 Z \",fill:\"#715376\",transform:\"translate(576,353)\"})),_path442||(_path442=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 0.71 3.73 1.51 5.56 2.33 C5.28 3.66 5.28 3.66 5 5.02 C4.58 8.2 4.88 10.24 5.56 13.33 C5.23 13.99 4.9 14.65 4.56 15.33 C3.9 15.33 3.24 15.33 2.56 15.33 C1.96 14.54 1.37 13.76 0.75 12.95 C-1.63 10.09 -2.85 9.18 -6.44 8.33 C-9.46 8.01 -9.46 8.01 -12.44 9.33 C-17.9 14.39 -20.96 21.86 -24.36 28.38 C-29.09 37.44 -34.3 46.2 -39.83 54.79 C-44.81 62.66 -49 69.71 -47.44 79.33 C-46.01 81.78 -44.49 83.32 -42.44 85.33 C-43.43 86.32 -44.42 87.31 -45.44 88.33 C-52.12 82.07 -52.12 82.07 -52.9 77.79 C-52.88 75.6 -52.75 73.5 -52.44 71.33 C-52.93 72.32 -52.93 72.32 -53.44 73.33 C-54.43 73.82 -54.43 73.82 -55.44 74.33 C-55.15 68.85 -52.75 65.28 -49.91 60.77 C-48.29 58.23 -48.29 58.23 -47 54.83 C-45.22 50.83 -42.9 47.63 -40.34 44.09 C-37.64 40.17 -35.34 36.05 -33.02 31.89 C-31.44 29.33 -31.44 29.33 -29.96 27.89 C-28.37 26.26 -27.5 24.82 -26.5 22.78 C-25.99 21.76 -25.99 21.76 -25.48 20.72 C-25.13 20.01 -24.79 19.31 -24.44 18.58 C-24.09 17.89 -23.75 17.2 -23.4 16.48 C-21.76 13.15 -20.23 9.83 -18.88 6.38 C-18.4 5.37 -17.93 4.36 -17.44 3.33 C-16.45 3 -15.46 2.67 -14.44 2.33 C-14.44 1.67 -14.44 1.01 -14.44 0.33 C-10.18 -1.8 -4.49 -1.24 0 0 Z \",fill:\"#472860\",transform:\"translate(411.4375,1109.671875)\"})),_path443||(_path443=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.15 3.18 C5.07 6.23 5.41 8.95 5.62 12.12 C5.7 13.16 5.77 14.19 5.85 15.26 C6.21 24.2 5.92 32.3 3.94 41.06 C3.72 42.05 3.5 43.04 3.27 44.06 C1.75 50.52 -0.09 56.79 -2.44 63 C-2.83 64.07 -2.83 64.07 -3.24 65.15 C-5.75 71.38 -9.73 75.79 -14.5 80.44 C-17.2 83.2 -19.31 86.14 -21.47 89.33 C-23.26 91.28 -24.42 91.62 -27 92 C-26.12 87.49 -24.73 85.65 -21.12 83.06 C-16.02 78.92 -15.21 73.75 -13.86 67.65 C-12.97 63.87 -11.67 60.71 -10 57.24 C-6.5 49.38 -5.13 40.95 -3.88 32.5 C-3.7 31.37 -3.53 30.24 -3.35 29.07 C-2.13 20.76 -1.44 12.52 -1.18 4.12 C-1 1 -1 1 0 0 Z \",fill:\"#2A1138\",transform:\"translate(372,1039)\"})),_path444||(_path444=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.2 1.25 5.61 2.89 8.56 6.06 C9.77 6.72 11.01 7.34 12.25 7.94 C15.56 10.06 15.56 10.06 17.06 13.5 C17.52 16.79 17.52 18.91 16.56 22.06 C17.22 22.06 17.88 22.06 18.56 22.06 C17.57 25.03 16.58 28 15.56 31.06 C16.18 30.71 16.8 30.36 17.44 30 C21.93 28.65 25.97 29.4 30.56 30.06 C32.86 35.27 32.86 35.27 31.5 38.88 C29.14 41.54 28.06 41.8 24.56 42.06 C12.96 37.06 -1.05 21.76 -7.44 11.06 C-8.26 6.79 -8.16 5.21 -5.88 1.56 C-3.44 0.06 -3.44 0.06 0 0 Z \",fill:\"#472758\",transform:\"translate(706.4375,149.9375)\"})),_path445||(_path445=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 0.2 1.72 0.2 3.48 0.39 C5.13 0.6 5.13 0.6 6.81 0.81 C8.12 0.91 8.12 0.91 9.45 1.01 C14.2 1.38 17.63 2.35 21.81 4.81 C21.81 5.47 21.81 6.13 21.81 6.81 C23.13 6.81 24.45 6.81 25.81 6.81 C25.81 7.8 25.81 8.79 25.81 9.81 C21.71 10.07 18.75 9.95 14.94 8.38 C9.72 6.23 4.24 5 -1.19 6.81 C-2.53 7.46 -3.86 8.13 -5.19 8.81 C-5.19 9.47 -5.19 10.13 -5.19 10.81 C-5.85 10.81 -6.51 10.81 -7.19 10.81 C-6.69 12.3 -6.69 12.3 -6.19 13.81 C-7.11 16.29 -8.08 18.52 -9.25 20.88 C-9.54 21.51 -9.83 22.15 -10.12 22.81 C-11.77 26.15 -12.84 27.65 -16.25 29.24 C-19 29.77 -21.4 29.98 -24.19 29.81 C-24.43 30.73 -24.43 30.73 -24.67 31.68 C-26.56 38.22 -26.56 38.22 -29.31 40.81 C-33.23 42.17 -37.07 42.55 -41.19 42.81 C-41.85 41.49 -42.51 40.17 -43.19 38.81 C-40.62 36.25 -38.71 36.27 -35.19 35.81 C-34.57 31.85 -35.63 29.92 -37.81 26.75 C-38.3 26.1 -38.79 25.45 -39.29 24.78 C-40.19 22.81 -40.19 22.81 -39.71 20.63 C-38.19 18.81 -38.19 18.81 -35.57 18.03 C-31.67 17.78 -27.89 17.98 -24 18.31 C-18.54 18.85 -18.54 18.85 -13.19 17.81 C-10.74 14.14 -10.87 10.53 -10.73 6.25 C-9.37 0.13 -5.67 -0.68 0 0 Z \",fill:\"#341546\",transform:\"translate(766.1875,63.1875)\"})),_path446||(_path446=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.62 0.78 1.24 1.57 1.88 2.38 C3.9 4.97 3.9 4.97 6 7 C6.31 7.64 6.62 8.28 6.94 8.94 C7.87 11.02 7.87 11.02 9.42 12.38 C11.14 14.15 12.19 15.86 13.38 18.02 C13.8 18.79 14.23 19.57 14.67 20.37 C15.11 21.18 15.55 21.98 16 22.81 C16.44 23.61 16.88 24.4 17.33 25.22 C18.57 27.47 19.78 29.74 21 32 C21.6 33.08 22.2 34.15 22.81 35.26 C24.07 38.17 24.01 39.89 24 43 C25.2 45.73 25.2 45.73 26.88 48.31 C27.41 49.2 27.94 50.08 28.49 50.99 C28.99 51.65 29.49 52.32 30 53 C30.66 53 31.32 53 32 53 C34 57.75 34 57.75 34 60 C34.31 61.34 34.65 62.67 35 64 C35.99 63.67 36.98 63.34 38 63 C38.15 64.08 38.15 64.08 38.31 65.18 C39.08 68.34 40.27 70.36 42.06 73.06 C42.69 74.02 43.33 74.98 43.98 75.97 C44.64 76.97 45.31 77.97 46 79 C46.65 80 47.29 81 47.96 82.03 C52.29 88.67 56.96 94.89 62 101 C62.71 101.89 63.42 102.78 64.14 103.69 C65.69 105.61 67.23 107.3 69 109 C69.8 109.85 70.61 110.69 71.44 111.56 C73.76 114.02 73.76 114.02 76.19 115.06 C78 116 78 116 78.94 118 C80.41 120.76 82.13 120.95 85 122 C86.84 123.5 87.84 124.68 88.88 126.81 C91.24 131.42 94.7 135.14 99 138 C98.67 138.66 98.34 139.32 98 140 C97.53 139.64 97.05 139.27 96.57 138.9 C92.92 136.12 89.25 133.51 85.38 131.06 C80.19 127.65 76.81 123.41 73.12 118.5 C70.63 115.56 67.83 113.2 64.89 110.71 C62.64 108.67 60.85 106.4 59 104 C58.01 103.34 57.02 102.68 56 102 C54.87 100.38 54.87 100.38 53.88 98.56 C53.54 97.97 53.21 97.37 52.87 96.75 C52 95 52 95 51 92 C50.34 92 49.68 92 49 92 C45 85.25 45 85.25 45 83 C44.01 82.67 43.02 82.34 42 82 C40.39 79.82 40.39 79.82 38.81 77.12 C38.28 76.24 37.75 75.36 37.21 74.45 C36 72 36 72 36 69 C35.34 69 34.68 69 34 69 C32.58 66.39 31.15 63.78 29.73 61.17 C28.59 59.08 27.44 57 26.27 54.93 C25.72 53.96 25.18 52.99 24.62 52 C24.12 51.11 23.62 50.23 23.1 49.31 C22 47 22 47 22 44 C21.34 44 20.68 44 20 44 C19.72 43.42 19.44 42.83 19.15 42.23 C16.85 37.54 14.43 33.02 11.69 28.56 C8.51 23.2 5.99 17.68 3.56 11.94 C3.21 11.1 2.85 10.27 2.49 9.41 C0 3.39 0 3.39 0 0 Z M10 17 C11 19 11 19 11 19 Z M11 19 C12 21 12 21 12 21 Z M13 23 C14 25 14 25 14 25 Z M14 25 C14.33 25.99 14.66 26.98 15 28 C15 27.01 15 26.02 15 25 C14.67 25 14.34 25 14 25 Z M17 30 C18 32 18 32 18 32 Z M18 32 C19 34 19 34 19 34 Z M19 34 C19.66 35.32 20.32 36.64 21 38 C20.67 36.68 20.34 35.36 20 34 C19.67 34 19.34 34 19 34 Z M22 39 C23 41 23 41 23 41 Z \",fill:\"#2E1737\",transform:\"translate(980,442)\"})),_path447||(_path447=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-0.58 2.44 -2.17 2.88 -3.75 3.31 C-4.75 3.59 -5.75 3.87 -6.79 4.15 C-8.89 4.71 -11 5.22 -13.12 5.69 C-28.37 9.09 -37.42 18.65 -45.86 31.53 C-53.23 43.23 -59.39 55.86 -56.36 69.99 C-55.84 72.05 -55.31 74.11 -54.75 76.17 C-54.06 78.77 -53.5 81.36 -53 84 C-53.66 84 -54.32 84 -55 84 C-59 77.25 -59 77.25 -59 75 C-59.99 75 -60.98 75 -62 75 C-63.33 59.88 -63.27 48.28 -55 35 C-54.48 34.11 -53.97 33.21 -53.44 32.29 C-43.3 15.28 -30.69 6.42 -11.58 1.36 C-11.06 1.24 -10.54 1.12 -10 1 C-11.22 0.53 -12.43 0.05 -13.69 -0.44 C-14.71 -0.84 -14.71 -0.84 -15.76 -1.25 C-21.66 -3.23 -27.4 -3.19 -33.56 -3.19 C-34.54 -3.19 -35.52 -3.19 -36.53 -3.19 C-43.55 -3.14 -50.15 -2.62 -57 -1 C-55.63 -3.75 -54.35 -3.99 -51.5 -5.12 C-34.43 -10.48 -15.74 -8.05 0 0 Z \",fill:\"#000002\",transform:\"translate(229,1141)\"})),_path448||(_path448=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.49 1.28 16.06 4.22 24 11 C25.19 11.92 26.37 12.83 27.56 13.75 C30.16 16.15 30.29 16.76 31 20 C33.27 22.52 33.27 22.52 36 25 C37.67 26.67 39.33 28.33 41 30 C41.61 30.57 42.22 31.15 42.85 31.74 C55.21 43.6 55.21 43.6 56.43 50.41 C56.44 52.63 56.44 52.63 56 56 C53.88 56 53.88 56 51 55 C45 48.61 45 48.61 45 45 C44.01 44.67 43.02 44.34 42 44 C41.33 42.67 40.67 41.33 40 40 C36.33 36.17 32.45 32.55 28.56 28.94 C28.02 28.42 27.47 27.9 26.9 27.37 C23.47 24.18 19.95 21.54 16 19 C13.62 16.88 13.62 16.88 12 15 C12 14.34 12 13.68 12 13 C11.26 12.77 10.53 12.53 9.77 12.29 C6.54 10.79 4.97 9.09 2.69 6.38 C1.99 5.56 1.29 4.74 0.57 3.9 C0.05 3.27 -0.46 2.65 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(818,132)\"})),_path449||(_path449=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3.66 1.34 4.32 0.68 5 0 C9.12 -0.36 11.39 0.18 15 2 C16.45 2.38 17.91 2.71 19.38 3 C23.03 3.77 26.47 4.75 30 6 C31.5 6.5 33 7 34.5 7.5 C35.26 7.76 36.03 8.02 36.82 8.29 C38.67 8.89 40.55 9.42 42.44 9.94 C45 11 45 11 46.38 13.12 C46.58 13.74 46.79 14.36 47 15 C46.17 14.78 46.17 14.78 45.32 14.56 C44.6 14.38 43.87 14.19 43.12 14 C42.41 13.81 41.69 13.63 40.95 13.44 C39.01 12.93 39.01 12.93 37 13 C39.13 15.34 41.12 16.71 44 18 C44 18.66 44 19.32 44 20 C45.22 20.33 46.43 20.66 47.69 21 C54.34 23.2 60.29 27 66 31 C66.49 31.99 66.49 31.99 67 33 C59.05 32.18 52.8 30.3 45.79 26.44 C42.92 24.96 40.07 23.99 37 23 C35.89 22.4 34.77 21.8 33.62 21.19 C28.99 18.79 24.07 17.37 19.09 15.87 C13.31 14.12 7.65 12.14 2 10 C2 9.34 2 8.68 2 8 C1.01 8 0.02 8 -1 8 C-1.33 5.69 -1.66 3.38 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#3D1D49\",transform:\"translate(1072,639)\"})),_path450||(_path450=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.72 2.73 5.72 2.73 7.88 4.81 C10.18 6.39 10.18 6.39 13.94 5.31 C16.25 4.63 18.26 3.87 20.44 2.81 C24.76 1.44 29.92 1.96 34 4 C34 4.99 34 5.98 34 7 C34.66 7 35.32 7 36 7 C38.34 12.88 40.26 18.64 39 25 C35.99 29.93 32.5 32.46 27 34 C24.28 34.58 21.55 35.07 18.8 35.53 C14.83 36.2 10.93 37.1 7 38 C5.68 36.35 4.36 34.7 3 33 C3.71 31.98 3.71 31.98 4.44 30.94 C6.21 28.01 6.21 28.01 6.5 24.38 C7 21 7 21 8.31 19 C10 18 10 18 11.84 18.12 C14.93 19.38 16.25 21.46 18.31 24.06 C21.77 28.19 21.77 28.19 26.81 29.75 C29.57 29.1 31.53 28.31 34 27 C34.59 20.56 34.29 15.82 30.51 10.43 C28.94 8.67 28.94 8.67 25.69 8.5 C24.8 8.67 23.91 8.83 23 9 C23 9.99 23 10.98 23 12 C21.02 12 19.04 12 17 12 C16.67 12.99 16.34 13.98 16 15 C13.36 15.33 10.72 15.66 8 16 C4.13 9.3 4.13 9.3 2.94 6.62 C2.03 4.64 2.03 4.64 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#7D6790\",transform:\"translate(531,405)\"})),_path451||(_path451=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.43 0.45 -0.87 0.89 -1.31 1.36 C-4.82 5.07 -4.82 5.07 -6.56 9.75 C-5.9 12.39 -5.01 13.23 -3 15 C-2.5 16.48 -2.5 16.48 -2 18 C-0.57 17.78 -0.57 17.78 0.89 17.56 C2.14 17.38 3.4 17.19 4.69 17 C5.93 16.81 7.17 16.63 8.45 16.44 C11.36 16.08 14.08 15.91 17 16 C17 16.66 17 17.32 17 18 C13.69 18.65 10.38 19.3 7.06 19.94 C6.14 20.12 5.21 20.3 4.26 20.49 C-0.83 21.47 -5.86 22.29 -11.02 22.75 C-14.14 23.14 -17.01 24.05 -20 25 C-20.33 24.67 -20.66 24.34 -21 24 C-22.86 24.25 -22.86 24.25 -24.75 24.5 C-30.83 25.31 -30.83 25.31 -34 24 C-35.92 21.04 -36 19.03 -36 15.5 C-34.75 11.11 -32.82 9.24 -29 7 C-20.15 2.55 -9.92 -0.3 0 0 Z \",fill:\"#311243\",transform:\"translate(613,99)\"})),_path452||(_path452=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.63 -0.42 10.63 -0.42 15 2.25 C15.72 2.67 16.44 3.09 17.19 3.52 C19.37 5.3 20.1 6.31 21 9 C21.31 12.48 21.46 15.93 21.57 19.42 C21.65 21.28 21.82 23.14 22 25 C22.66 25.33 23.32 25.66 24 26 C23.67 28.64 23.34 31.28 23 34 C22.1 33.47 22.1 33.47 21.19 32.94 C18.89 31.67 18.89 31.67 16 33 C14 32.35 12 31.68 10 31 C7.34 30.56 4.69 30.28 2 30 C1.86 29.22 1.71 28.43 1.56 27.62 C1.12 25.04 1.12 25.04 0 23 C-0.08 21.26 -0.11 19.52 -0.1 17.77 C-0.09 16.74 -0.09 15.71 -0.09 14.65 C-0.08 13.57 -0.07 12.49 -0.06 11.38 C-0.06 10.29 -0.05 9.2 -0.05 8.08 C-0.04 5.39 -0.02 2.69 0 0 Z \",fill:\"#090F36\",transform:\"translate(677,1138)\"})),_path453||(_path453=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.2 3.83 4.35 7.4 5.71 12.14 C5.97 12.99 6.22 13.84 6.49 14.71 C8.26 20.76 9.63 26.77 10.52 33.02 C11.77 41.06 13.73 48.82 15.93 56.64 C16.15 57.44 16.37 58.23 16.6 59.05 C16.8 59.77 17 60.48 17.21 61.22 C17.52 63.02 17.52 63.02 16.52 65.02 C14.24 59.27 12.46 53.47 10.77 47.52 C6.29 28.49 6.29 28.49 -3.48 12.02 C-7.52 11.62 -10.55 11.87 -14.21 13.54 C-15.29 14.02 -16.37 14.51 -17.48 15.02 C-17.82 18.52 -18.15 22.02 -18.48 25.52 C-18.62 26.99 -18.62 26.99 -18.77 28.49 C-19.51 36.44 -19.64 44.05 -18.98 52.02 C-18.88 53.15 -18.79 54.28 -18.7 55.45 C-18.62 56.3 -18.55 57.14 -18.48 58.02 C-18.81 58.02 -19.14 58.02 -19.48 58.02 C-21.46 49.98 -22.03 41.94 -22.48 33.71 C-22.6 31.52 -22.73 29.33 -22.86 27.14 C-24.21 4.18 -24.21 4.18 -21.48 0.02 C-15.32 -3.61 -5.73 -4.59 0 0 Z \",fill:\"#462860\",transform:\"translate(554.4765625,873.984375)\"})),_path454||(_path454=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.12 1.94 0.12 4 1 C4.7 2.65 5.37 4.32 6 6 C6.99 6.33 7.98 6.66 9 7 C11.22 11.42 12.3 16.06 12 21 C12.33 21.66 12.66 22.32 13 23 C12.34 23.99 11.68 24.98 11 26 C10.42 25.05 9.85 24.1 9.25 23.12 C7.17 20.24 6.25 19.16 3 18 C3.33 18.66 3.66 19.32 4 20 C3.01 20 2.02 20 1 20 C1 20.66 1 21.32 1 22 C1.78 22.29 2.57 22.58 3.38 22.88 C6 24 6 24 8 26 C5.24 25.48 2.67 24.89 0 24 C-0.13 26.43 -0.13 26.43 1 29 C3.56 30.38 6.21 31.22 9 32 C9 32.33 9 32.66 9 33 C8.23 33.08 7.46 33.17 6.66 33.25 C3.94 33.75 3.94 33.75 2.52 35.71 C-2.39 45.23 -4.34 54.16 -5.28 64.78 C-6 68 -6 68 -8.07 69.94 C-8.7 70.29 -9.34 70.64 -10 71 C-10.94 68.18 -11.12 66.47 -11.1 63.55 C-11.09 62.7 -11.09 61.86 -11.09 60.98 C-11.08 60.1 -11.07 59.22 -11.06 58.31 C-11.06 57.42 -11.05 56.53 -11.05 55.61 C-11.04 53.4 -11.02 51.2 -11 49 C-10.34 49 -9.68 49 -9 49 C-7.57 42.22 -7.53 35.49 -8.75 28.69 C-9.57 22.45 -7.01 16.81 -5 11 C-4.65 9.67 -4.31 8.34 -4 7 C-3.34 7 -2.68 7 -2 7 C-1.86 6.03 -1.71 5.06 -1.56 4.06 C-1 1 -1 1 0 0 Z \",fill:\"#28103A\",transform:\"translate(871,482)\"})),_path455||(_path455=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.87 1.32 1.87 1.32 3.87 4.32 C3.73 9.12 1.06 11.97 -2.07 15.32 C-2.81 16.12 -2.81 16.12 -3.56 16.93 C-9.8 23.37 -16.47 26.25 -25.21 27.85 C-27.68 28.46 -29.31 29.58 -31.13 31.32 C-32.81 26.93 -33.4 23.27 -33.38 18.57 C-33.39 16.88 -33.39 16.88 -33.4 15.15 C-33.13 12.32 -33.13 12.32 -31.13 10.32 C-29.21 9.62 -29.21 9.62 -26.88 8.99 C-26.02 8.75 -25.17 8.51 -24.29 8.26 C-22.5 7.77 -20.72 7.28 -18.93 6.8 C-13.43 5.23 -8.91 3.27 -4.12 0.11 C-2.13 -0.68 -2.13 -0.68 0 0 Z \",fill:\"#5E3E64\",transform:\"translate(699.131103515625,615.676513671875)\"})),_path456||(_path456=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C6.96 2.34 9.6 2.09 13 0 C13.5 0.99 13.5 0.99 14 2 C12.89 4.71 12.89 4.71 11.25 7.94 C10.72 9 10.19 10.06 9.64 11.15 C8 14 8 14 6.3 15.69 C4.65 17.05 4.65 17.05 5 20 C2.37 23.21 -0.09 24.7 -4 26 C-2.35 26.33 -0.7 26.66 1 27 C0.67 27.99 0.34 28.98 0 30 C-1.36 29.88 -1.36 29.88 -2.75 29.75 C-6.03 29.71 -6.03 29.71 -8.25 31.69 C-10.08 33.88 -10.08 33.88 -10.88 36.32 C-12.14 39.32 -13.73 41.59 -15.69 44.19 C-19.56 49.39 -23.3 54.67 -27 60 C-28.17 56.62 -27.87 54.93 -26.42 51.7 C-26.06 50.89 -25.71 50.07 -25.34 49.24 C-24.96 48.4 -24.58 47.55 -24.19 46.69 C-21.73 41.18 -19.52 35.86 -18 30 C-16.35 24.34 -14.53 19.75 -11 15 C-10.67 15.99 -10.34 16.98 -10 18 C-9.34 18 -8.68 18 -8 18 C-7.94 17.05 -7.88 16.1 -7.81 15.12 C-7.1 9.98 -4.7 5.39 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#411E4E\",transform:\"translate(406,515)\"})),_path457||(_path457=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6 0.67 3.21 1.33 4.81 2 C5.6 2.32 6.38 2.65 7.19 2.98 C10.24 4.19 13.35 5.14 16.5 6.06 C21.7 7.59 26.56 9.51 31.44 11.88 C31.44 12.87 31.44 13.86 31.44 14.88 C33.42 15.53 35.4 16.2 37.44 16.88 C37.44 17.53 37.44 18.2 37.44 18.88 C26.3 18.42 18.79 17.16 9.51 11.15 C3.56 7.49 -1.53 5.28 -8.56 5.88 C-13.32 16.43 -13.5 24.83 -9.56 35.88 C-7.53 38.91 -5.27 41.42 -2.56 43.88 C-5.78 44.89 -6.67 44.85 -10.12 43.88 C-14.44 41.36 -15.21 39.63 -16.56 34.88 C-16.56 32.54 -16.56 30.21 -16.56 27.88 C-17.96 24.58 -19.58 21.85 -21.56 18.88 C-22.29 11.85 -20.66 5.9 -16.3 0.24 C-10.41 -4.39 -6.21 -2.75 0 0 Z \",fill:\"#462453\",transform:\"translate(1159.5625,621.125)\"})),_path458||(_path458=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C3.66 2.34 4.32 1.68 5 1 C5 1.66 5 2.32 5 3 C7.31 3 9.62 3 12 3 C10.32 10.43 6.65 14.21 1.26 19.56 C-0.19 21 -1.6 22.48 -3.02 23.96 C-4.39 25.34 -4.39 25.34 -5.79 26.75 C-6.62 27.59 -7.45 28.43 -8.31 29.3 C-11 31 -11 31 -14.83 30.77 C-15.87 30.51 -16.92 30.26 -18 30 C-18.33 31.32 -18.66 32.64 -19 34 C-19.99 34 -20.98 34 -22 34 C-22.27 34.64 -22.54 35.28 -22.81 35.94 C-24 38 -24 38 -27 39 C-27 39.66 -27 40.32 -27 41 C-29.65 42.46 -30.89 43 -34 43 C-35.1 39.68 -35.18 38.38 -33.64 35.17 C-32.99 34.18 -32.35 33.2 -31.69 32.19 C-28.72 27.4 -26.96 23.53 -26 18 C-23.03 17.34 -20.06 16.68 -17 16 C-17 16.66 -17 17.32 -17 18 C-16.26 17.53 -15.51 17.05 -14.75 16.56 C-12 15 -12 15 -10.05 14.56 C-7.7 13.92 -6.3 12.93 -4.38 11.44 C-1.21 9 -1.21 9 1 9 C0.5 8.01 0.5 8.01 0 7 C-1.32 7 -2.64 7 -4 7 C-3.44 3.73 -2.5 2.17 0 0 Z \",fill:\"#1F0D31\",transform:\"translate(660,710)\"})),_path459||(_path459=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.12 4.62 C2.08 5.41 2.04 6.19 2 7 C2.68 7.31 3.35 7.63 4.05 7.95 C13.73 12.6 13.73 12.6 16 16 C16.73 20.8 15.53 23.93 13 28 C9.91 31.44 6.57 31.4 2.2 31.75 C-0.44 32.05 -2.62 32.85 -5 34 C-5.5 32.51 -5.5 32.51 -6 31 C-5.68 30.38 -5.37 29.75 -5.04 29.11 C-3.76 26.51 -3.96 25.08 -4.38 22.25 C-4.54 21.05 -4.54 21.05 -4.71 19.83 C-4.81 19.22 -4.9 18.62 -5 18 C-5.94 17.76 -5.94 17.76 -6.9 17.52 C-13.59 15.61 -13.59 15.61 -15.56 12.69 C-16.06 9.62 -16.4 7.1 -16 4 C-11.54 -0.62 -6.02 -0.29 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(580,436)\"})),_path460||(_path460=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.81 2.44 0.81 5 2 C6.11 5.34 5.84 6.52 5.06 9.88 C4.26 13.34 3.89 16.44 4 20 C4.64 20.21 5.28 20.41 5.94 20.62 C8 22 8 22 8.56 24.56 C8.71 25.7 8.85 26.83 9 28 C9.44 29.61 9.92 31.22 10.44 32.81 C10.68 33.58 10.93 34.35 11.18 35.14 C11.85 37.19 11.85 37.19 14 38 C14 38.66 14 39.32 14 40 C14.66 40 15.32 40 16 40 C15.31 45.42 14.24 50.68 13 56 C12.36 55.8 11.72 55.59 11.06 55.38 C6.03 53.81 1.24 52.57 -4 52 C-3.32 45.92 -2.26 39.99 -1 34 C-2.32 34 -3.64 34 -5 34 C-5.33 34.99 -5.66 35.98 -6 37 C-7.16 32.11 -6.69 28.91 -5.25 24.12 C-2.94 16.17 -1.41 8.15 0 0 Z \",fill:\"#54325B\",transform:\"translate(848,420)\"})),_path461||(_path461=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.78 6.06 3.39 11.84 3.75 18.14 C3.89 21.07 3.89 21.07 5 24 C4.78 26.38 4.52 28.75 4.25 31.12 C3.47 39.8 5.5 46.96 8.35 55.09 C9.35 58.03 10.17 61.01 11 64 C11.66 64 12.32 64 13 64 C13 64.66 13 65.32 13 66 C13.66 66 14.32 66 15 66 C15.04 66.92 15.08 67.84 15.12 68.79 C16.02 79.67 19.57 86.34 26 95 C27.34 96.87 28.67 98.75 30 100.62 C30.56 101.38 31.11 102.14 31.69 102.91 C33 105 33 105 34 109 C31.03 108.01 28.06 107.02 25 106 C24.67 106.66 24.34 107.32 24 108 C19.62 106.64 17.72 104.84 15 101.19 C11.77 96.95 11.77 96.95 8.12 93.06 C6 91 6 91 4 88 C6.51 82.34 6.51 82.34 9.12 80.5 C11.22 79.09 11.22 79.09 11.94 76.44 C12.14 65.26 5.13 51.2 -1 42 C-1.33 36.81 -0.92 33.8 1 29 C1.44 24.7 1.47 21.71 -1 18 C-1.14 16.01 -1.14 16.01 -0.98 13.77 C-0.92 12.97 -0.87 12.16 -0.82 11.34 C-0.76 10.5 -0.69 9.67 -0.62 8.81 C-0.57 7.97 -0.51 7.12 -0.45 6.25 C-0.31 4.17 -0.16 2.08 0 0 Z \",fill:\"#351547\",transform:\"translate(936,425)\"})),_path462||(_path462=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.53 2.07 1.05 3.14 0.56 4.25 C-3.77 16.15 -1.46 28.75 0 41 C0.66 39.02 1.32 37.04 2 35 C2.99 35.66 3.98 36.32 5 37 C4.86 38.13 4.71 39.25 4.56 40.41 C3.98 45.06 3.48 49.72 3 54.38 C2.91 55.21 2.83 56.04 2.74 56.89 C2.14 62.59 1.56 68.3 1 74 C0.34 74 -0.32 74 -1 74 C-4 89.12 -2.01 101.09 1.83 115.8 C3.56 122.54 4.6 129.05 5 136 C4.34 136 3.68 136 3 136 C1.67 132.02 1.93 128.15 2 124 C1.26 124.35 0.51 124.7 -0.25 125.06 C-3.13 126.05 -4.21 126.03 -7 125 C-6.95 126.88 -6.95 126.88 -6 129 C-4.51 129.96 -4.51 129.96 -3 130.94 C0 133 0 133 0.88 135.75 C0.94 136.86 0.94 136.86 1 138 C-3.98 136.18 -7.32 134.83 -10 130 C-10.57 127.03 -10.39 125.11 -10 122 C-8 119.69 -8 119.69 -6 118 C-6 117.01 -6 116.02 -6 115 C-7.98 115 -9.96 115 -12 115 C-12.33 114.34 -12.66 113.68 -13 113 C-12.58 112.53 -12.16 112.06 -11.72 111.57 C-10.9 110.64 -10.9 110.64 -10.06 109.69 C-9.52 109.07 -8.97 108.46 -8.41 107.82 C-5.86 104.53 -5.95 101.68 -6.06 97.66 C-6.3 89.12 -5.61 80.91 -4.5 72.44 C-3.35 63.43 -2.7 54.58 -2.69 45.5 C-2.68 44.49 -2.68 43.49 -2.67 42.45 C-2.72 36.84 -3.33 31.67 -4.54 26.19 C-6.29 17.82 -5.23 8.89 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#3A1949\",transform:\"translate(456,785)\"})),_path463||(_path463=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.97 3.58 -1.94 4.15 -2.94 4.75 C-6.25 6.76 -6.25 6.76 -7.25 10.31 C-6.9 15.44 -4.67 17.6 -1 21 C0.63 22.38 2.28 23.74 4 25 C3.58 27.97 3.15 29.79 1.38 32.25 C-1.11 37.22 0.58 42.22 1.81 47.44 C3.2 50.42 4.09 50.73 7 52 C6.25 52.24 5.5 52.48 4.73 52.73 C3.75 53.07 2.76 53.4 1.75 53.75 C0.29 54.24 0.29 54.24 -1.2 54.73 C-4.18 56.08 -5.75 57.67 -8 60 C-10.25 59.75 -10.25 59.75 -12 59 C-10.97 56.31 -9.88 53.79 -8.5 51.25 C-6.27 46.42 -4.94 41.59 -5.06 36.25 C-6.38 33.08 -8.52 31.37 -11 29 C-11.93 27.7 -12.85 26.38 -13.75 25.06 C-16.61 21.1 -19.85 18.85 -24.05 16.42 C-26.24 14.82 -27 13.49 -28 11 C-22.8 8.68 -17.9 6.85 -12.25 6 C-7.1 5.19 -3.73 3.73 0 0 Z \",fill:\"#755A7C\",transform:\"translate(568,432)\"})),_path464||(_path464=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 3 3 C2.64 5.16 2.19 7.31 1.69 9.44 C1.42 10.59 1.16 11.74 0.89 12.93 C0 16 0 16 -2 19 C-2.38 20.98 -2.38 20.98 -2.5 23.06 C-3 27 -3 27 -5 29 C-5.49 30.8 -5.92 32.62 -6.31 34.44 C-7.66 39.72 -7.66 39.72 -10.62 42.12 C-11.41 42.41 -12.19 42.7 -13 43 C-13.33 43.33 -13.66 43.66 -14 44 C-17.76 44.25 -21.54 44.19 -25.31 44.19 C-26.37 44.2 -27.43 44.21 -28.52 44.22 C-29.54 44.23 -30.56 44.23 -31.61 44.23 C-32.55 44.23 -33.49 44.24 -34.45 44.24 C-37.13 43.99 -38.66 43.25 -41 42 C-44.17 41.83 -44.17 41.83 -47 42 C-47.03 44.27 -47.05 46.54 -47.06 48.81 C-47.07 50.08 -47.09 51.34 -47.1 52.64 C-47.16 56 -47.16 56 -46 59 C-45.24 65.29 -46.34 68.89 -50.1 74.01 C-54.29 78.39 -59.05 79.65 -64.88 80.69 C-71.68 80.36 -78.54 74.87 -83 70 C-83.56 69.32 -84.11 68.64 -84.69 67.94 C-87.99 65.17 -90.77 64.75 -95 64 C-95.99 64.49 -95.99 64.49 -97 65 C-99.31 65.38 -99.31 65.38 -102 65 C-104.5 62.75 -104.5 62.75 -107 60 C-107.86 59.44 -108.72 58.88 -109.61 58.3 C-112 56 -112 56 -112.67 52.47 C-112.7 51.16 -112.72 49.85 -112.75 48.5 C-112.86 44.47 -113.01 40.89 -114 37 C-113.67 36.34 -113.34 35.68 -113 35 C-112.34 35 -111.68 35 -111 35 C-110.97 35.91 -110.95 36.81 -110.92 37.75 C-110.47 48.46 -110.47 48.46 -106 58 C-103.23 60.35 -103.23 60.35 -100 61 C-97.17 60.54 -97.17 60.54 -95 59 C-94.67 58.01 -94.34 57.02 -94 56 C-84.8 60.33 -77.12 67.88 -70 75 C-67.55 76.22 -66.32 75.99 -63.62 75.69 C-62.85 75.61 -62.08 75.53 -61.29 75.45 C-57.87 74.78 -55.76 73.92 -53.52 71.21 C-48.5 61.72 -49.6 51.61 -50.03 41.16 C-50 39 -50 39 -49 37 C-42.48 37.77 -42.48 37.77 -39.89 39.02 C-35.61 40.47 -31.49 40.29 -27 40.25 C-26.11 40.26 -25.22 40.27 -24.3 40.27 C-17.83 40.38 -17.83 40.38 -12 38 C-8.57 33.07 -6.89 28.08 -5.38 22.31 C-5.06 21.14 -5.06 21.14 -4.73 19.94 C-3.26 14.37 -2.14 8.8 -1.36 3.09 C-1 1 -1 1 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(897,1144)\"})),_path465||(_path465=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.06 2.65 2.12 2.99 3.22 C3.43 4.65 3.87 6.07 4.31 7.5 C4.53 8.2 4.74 8.89 4.96 9.61 C5.4 11.03 5.85 12.45 6.31 13.86 C6.76 15.27 7.2 16.69 7.62 18.11 C9.35 23.53 11.96 26.32 16.31 29.88 C21.2 34.11 24.72 38.05 27.8 43.8 C30.13 48.06 32.94 51.3 37 54 C37 55.32 37 56.64 37 58 C32.41 56.39 30.11 54.87 27.62 50.69 C25.42 47.03 22.89 42.95 19 41 C16.09 40.42 16.09 40.42 13 41 C10.58 43.89 10.58 43.89 9 47 C5.67 45.58 3.72 43.87 1.38 41.12 C0.78 40.45 0.19 39.77 -0.41 39.07 C-3.84 34.59 -4.37 30.82 -4.62 25.25 C-4.66 24.55 -4.7 23.86 -4.74 23.14 C-4.84 21.42 -4.92 19.71 -5 18 C-3.35 17.67 -1.7 17.34 0 17 C0.2 15.11 0.38 13.21 0.56 11.31 C0.67 10.26 0.77 9.2 0.88 8.11 C0.99 5.19 0.71 2.83 0 0 Z \",fill:\"#2B113D\",transform:\"translate(1243,918)\"})),_path466||(_path466=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28 3.2 0.93 5.78 -0.07 9.05 C-1.19 11.41 -2.69 13 -4.44 14.94 C-11.14 23.14 -11.01 35.51 -12.16 45.65 C-12.83 51.31 -13.93 56.85 -15.06 62.44 C-16.56 69.84 -17.5 77.03 -17.67 84.58 C-17.78 88.47 -18.09 91.58 -20 95 C-21.84 96.38 -21.84 96.38 -23.94 97.56 C-28.81 100.93 -29.17 104.59 -30.23 110.18 C-31.22 113.79 -32.72 115.13 -35.54 117.43 C-37.47 119.51 -37.97 121.55 -38.81 124.25 C-39.73 126.86 -39.73 126.86 -41 129 C-43.4 130.08 -45.36 130.42 -47.98 130.62 C-48.64 130.75 -49.31 130.87 -50 131 C-50.66 131.99 -51.32 132.98 -52 134 C-53.32 134 -54.64 134 -56 134 C-55.74 128.92 -55.39 125.33 -51.79 121.43 C-49.51 119.61 -47.09 118.35 -44.5 117 C-39.67 114.48 -36.84 112.68 -34 108 C-33.64 106.49 -33.33 104.97 -33.06 103.44 C-32.46 100.03 -31.84 98.38 -29.12 96.19 C-27.58 95.1 -27.58 95.1 -26 94 C-23.58 91.94 -22.19 90.7 -21.35 87.61 C-21.28 86.71 -21.2 85.82 -21.13 84.9 C-21.03 83.87 -20.94 82.84 -20.84 81.77 C-20.7 80.09 -20.7 80.09 -20.56 78.38 C-20.33 75.94 -20.09 73.51 -19.85 71.08 C-19.65 69.13 -19.65 69.13 -19.45 67.14 C-18.75 60.5 -17.8 53.89 -16.83 47.28 C-16.61 45.82 -16.4 44.36 -16.19 42.9 C-12.09 14.13 -12.09 14.13 -2.27 3.45 C-0.9 2.01 -0.9 2.01 0 0 Z \",fill:\"#67486D\",transform:\"translate(1109,1146)\"})),_path467||(_path467=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C0.02 4.01 -0.98 6.01 -2 8 C-2 8.99 -2 9.98 -2 11 C-3.66 12.33 -3.66 12.33 -6.06 13.81 C-13.16 18.56 -19.15 24.43 -25.28 30.34 C-26.78 31.79 -28.3 33.23 -29.82 34.66 C-37.08 41.64 -40.32 48.05 -42.99 57.67 C-44.39 62.34 -46.17 64.15 -50 67 C-51.63 69.54 -51.63 69.54 -52.81 72.25 C-53.23 73.14 -53.65 74.03 -54.08 74.95 C-54.38 75.63 -54.69 76.3 -55 77 C-55.66 77 -56.32 77 -57 77 C-55.18 70.53 -51.79 64.95 -48.46 59.16 C-45.5 53.78 -44.27 50.15 -45 44 C-45.8 41.84 -45.8 41.84 -47.06 40.25 C-49 37 -49 37 -49 34.81 C-46.3 29.91 -42.07 27.83 -37.29 25.29 C-35.23 24.13 -33.43 22.88 -31.56 21.44 C-28.87 19.44 -26.27 18.23 -23.12 17.06 C-18.61 15.37 -14.9 13.15 -10.97 10.37 C-9 9 -9 9 -6.19 7.5 C-3.26 5.5 -1.81 3.01 0 0 Z \",fill:\"#857396\",transform:\"translate(756,643)\"})),_path468||(_path468=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.05 2.25 7.84 4.3 10.75 9.02 C12.11 11 13.55 11.81 15.82 12.57 C15.16 10.92 14.5 9.27 13.82 7.57 C15.47 7.24 17.12 6.91 18.82 6.57 C19.15 7.56 19.48 8.55 19.82 9.57 C20.49 9.28 21.17 8.99 21.87 8.69 C30.5 5.25 38 3.86 46.82 7.57 C46.82 8.23 46.82 8.89 46.82 9.57 C47.81 9.9 48.8 10.23 49.82 10.57 C50.31 14.03 50.31 14.03 50.82 17.57 C50.16 17.57 49.5 17.57 48.82 17.57 C48.82 16.91 48.82 16.25 48.82 15.57 C47.83 15.57 46.84 15.57 45.82 15.57 C45.32 14.58 45.32 14.58 44.82 13.57 C38.81 10.72 31.1 10.47 24.82 12.57 C25.15 15.21 25.48 17.85 25.82 20.57 C26.48 20.57 27.14 20.57 27.82 20.57 C29.13 27.13 28.34 31.4 25.82 37.57 C25.16 37.57 24.5 37.57 23.82 37.57 C23.16 38.89 22.5 40.21 21.82 41.57 C21.82 40.91 21.82 40.25 21.82 39.57 C21.16 39.57 20.5 39.57 19.82 39.57 C18.82 36.57 18.82 36.57 19.38 34.82 C20.04 31.44 18.87 28.78 17.82 25.57 C16.92 25.91 16.92 25.91 16 26.25 C15.28 26.36 14.56 26.46 13.82 26.57 C11.23 24.5 10.14 22.36 8.94 19.32 C5.77 11.71 5.77 11.71 -0.28 6.47 C-2.21 5.74 -4.2 5.14 -6.18 4.57 C-6.18 3.58 -6.18 2.59 -6.18 1.57 C-3.87 0.1 -2.74 -0.54 0 0 Z \",fill:\"#100C15\",transform:\"translate(519.18359375,309.43359375)\"})),_path469||(_path469=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.37 0.49 0.75 0.99 1.13 1.5 C3.77 3.62 5.55 3.23 8.88 3.06 C14.5 2.79 14.5 2.79 17.41 4.04 C21.97 5.74 26.67 4.48 31.41 3.9 C35.71 4.02 37.06 4.94 40 8 C42.13 12.47 42.77 17.1 42 22 C40.9 24.81 39.48 27.38 38 30 C36.35 33.54 35.48 36.09 36 40 C38.11 42.42 38.11 42.42 40.88 44.56 C45.22 48.14 47.62 50.36 48.44 56 C48 69.45 37.62 79.68 28.58 88.35 C26.13 90.72 24.17 92.71 22.46 95.69 C20.55 98.72 18.48 99.71 15.31 101.31 C14.32 101.82 13.32 102.34 12.3 102.86 C11.54 103.24 10.78 103.61 10 104 C11.41 100.52 12.82 99.26 16.06 97.44 C22.01 93.66 25.74 88.52 30 83 C30.73 82.17 31.45 81.34 32.2 80.49 C38.64 73.09 42.56 64.99 42 55 C40.13 50.44 36.63 47.74 32.94 44.65 C32.3 44.1 31.66 43.56 31 43 C30.42 42.58 29.85 42.16 29.25 41.73 C27.14 38.81 27.55 36.47 28 33 C29.97 30.26 29.97 30.26 32.5 27.69 C35.77 23.96 37.65 21.66 37.69 16.62 C37.33 13.18 36.91 9.95 35 7 C31.27 5.41 28.3 6.51 24.5 7.5 C18.56 8.87 13.72 9.01 7.71 8.26 C3.97 7.9 0.69 8.36 -3 9 C-3.12 8.36 -3.25 7.72 -3.38 7.06 C-3.68 6.04 -3.68 6.04 -4 5 C-4.66 4.67 -5.32 4.34 -6 4 C-4.02 2.68 -2.04 1.36 0 0 Z \",fill:\"#67486D\",transform:\"translate(1100,1042)\"})),_path470||(_path470=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.99 2.99 4.33 4.58 5 8 C5.33 8.6 5.65 9.21 5.99 9.83 C7.18 12.4 7.41 14.5 7.62 17.31 C7.74 18.75 7.74 18.75 7.85 20.23 C8.03 23.5 8.07 26.73 8 30 C7.34 30 6.68 30 6 30 C6.76 31.44 7.54 32.88 8.31 34.31 C8.74 35.11 9.17 35.91 9.61 36.74 C10.84 38.99 10.84 38.99 12.5 40.32 C14.87 42.97 15.64 46.3 16.75 49.62 C18.84 55.59 21.15 60.32 25.39 65.11 C27 67 27 67 28.22 69.33 C30.79 73.18 34.19 75.67 37.81 78.5 C39.22 79.61 40.62 80.73 42.02 81.84 C43.03 82.64 43.03 82.64 44.06 83.45 C45.85 84.88 47.59 86.35 49.32 87.84 C51.87 90.15 51.87 90.15 55 91 C55.67 91.71 55.67 91.71 56.36 92.43 C58.45 94.43 60.49 95.17 63.19 96.19 C64.09 96.53 64.99 96.88 65.92 97.23 C66.61 97.48 67.29 97.74 68 98 C68 98.99 68 99.98 68 101 C51.63 96.21 36.12 85.81 25 73 C24.67 72.01 24.34 71.02 24 70 C22.52 69.51 22.52 69.51 21 69 C20.3 67.69 19.64 66.35 19 65 C18.42 64.3 17.84 63.6 17.25 62.88 C12.02 56.2 8.23 48.81 5 41 C4.38 39.64 4.38 39.64 3.75 38.25 C2.9 35.71 3 33.66 3 31 C2.37 29.65 1.7 28.32 1 27 C0.1 23.64 -0.12 22.36 1 19 C1 18.34 1 17.68 1 17 C0.34 17 -0.32 17 -1 17 C-2.6 11.09 -1.26 5.85 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(105,1163)\"})),_path471||(_path471=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.99 3.33 3.98 3.66 5 4 C6.13 6.4 6.13 6.4 7.12 9.38 C7.46 10.35 7.79 11.33 8.13 12.34 C8.42 13.22 8.71 14.09 9 15 C9.5 16.49 9.5 16.49 10 18 C8.98 18.01 7.95 18.03 6.89 18.04 C5.53 18.09 4.17 18.14 2.81 18.19 C2.14 18.19 1.47 18.2 0.77 18.21 C-3.08 18.37 -4.82 18.85 -7.79 21.36 C-8.52 22.23 -9.25 23.1 -10 24 C-10.56 24.54 -11.12 25.07 -11.7 25.62 C-14.71 28.52 -17.02 31.27 -19 35 C-28.16 33.01 -36.34 27.43 -43 21 C-43.33 20.01 -43.66 19.02 -44 18 C-41.69 18.66 -39.38 19.32 -37 20 C-36.67 19.01 -36.34 18.02 -36 17 C-35.1 17.14 -35.1 17.14 -34.17 17.29 C-33.37 17.4 -32.57 17.51 -31.75 17.62 C-30.96 17.74 -30.17 17.86 -29.36 17.98 C-26.59 18 -25.4 17.33 -23 16 C-20.99 15.28 -18.97 14.6 -16.94 13.94 C-15.37 13.43 -15.37 13.43 -13.78 12.9 C-12.86 12.6 -11.94 12.31 -11 12 C-10.01 11.67 -9.02 11.34 -8 11 C-6.8 10.65 -5.61 10.3 -4.38 9.94 C-0.91 8.44 -0.91 8.44 -0.32 6.02 C0.01 3.55 0.01 3.55 0 0 Z \",fill:\"#341546\",transform:\"translate(836,226)\"})),_path472||(_path472=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.61 5.66 -0.32 8.78 -2 12 C-2.66 12 -3.32 12 -4 12 C-5.26 14.42 -6.34 16.84 -7.38 19.38 C-9.46 24.02 -11.74 27.77 -15.39 31.33 C-17.95 33.95 -19.86 36.52 -21.88 39.56 C-25.96 45.6 -30.26 51.47 -34.62 57.31 C-35.25 58.15 -35.87 58.98 -36.51 59.84 C-41.69 66.74 -47.18 73.3 -53.25 79.44 C-53.89 80.1 -54.54 80.75 -55.2 81.43 C-57 83 -57 83 -60 84 C-59.56 79.05 -57.15 76.69 -54 73 C-53.72 72.27 -53.44 71.54 -53.15 70.78 C-51.58 67 -49.34 63.85 -47 60.5 C-46.51 59.8 -46.03 59.1 -45.52 58.38 C-32.76 40.15 -32.76 40.15 -25.47 33.56 C-23.6 31.57 -22.4 29.34 -21 27 C-19.78 25.57 -18.53 24.18 -17.25 22.81 C-13.54 18.75 -10.45 14.47 -7.45 9.87 C-6.73 8.94 -6.73 8.94 -6 8 C-5.34 8 -4.68 8 -4 8 C-3.9 7.42 -3.79 6.85 -3.69 6.25 C-2.9 3.68 -1.69 2.06 0 0 Z \",fill:\"#30173A\",transform:\"translate(317,663)\"})),_path473||(_path473=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.18 4.18 5.78 6.9 6 13 C5.77 14.09 5.77 14.09 5.53 15.2 C4.97 18.15 4.85 21.03 4.76 24.03 C4.45 33.79 2.74 42.64 0 52 C-0.33 52 -0.66 52 -1 52 C-0.94 51.35 -0.88 50.69 -0.82 50.02 C-0.54 47.01 -0.27 44.01 0 41 C0.1 39.94 0.19 38.87 0.29 37.77 C0.42 36.21 0.42 36.21 0.56 34.62 C0.65 33.67 0.73 32.71 0.82 31.73 C1.36 26.04 1.36 26.04 -1 21 C-4.22 19.41 -7.44 18.44 -11 18 C-13.9 19.61 -15.32 21.21 -17.44 23.69 C-19.72 25.6 -22.11 25.56 -25 26 C-25.33 26.66 -25.66 27.32 -26 28 C-27.65 28 -29.3 28 -31 28 C-31.13 28.53 -31.25 29.05 -31.38 29.6 C-32.15 32.57 -33.04 35.5 -33.94 38.44 C-34.28 39.55 -34.62 40.66 -34.96 41.81 C-35.87 44.6 -36.87 47.29 -38 50 C-38.33 50 -38.66 50 -39 50 C-39.33 43.96 -38.13 38.86 -36.5 33.06 C-36.26 32.19 -36.02 31.31 -35.78 30.41 C-35.19 28.27 -34.6 26.14 -34 24 C-33.34 24 -32.68 24 -32 24 C-31.67 23.01 -31.34 22.02 -31 21 C-29.35 20.67 -27.7 20.34 -26 20 C-26 19.34 -26 18.68 -26 18 C-24.58 18.06 -24.58 18.06 -23.12 18.12 C-19.9 18.35 -19.9 18.35 -18 16 C-18.33 15.34 -18.66 14.68 -19 14 C-17.68 13.01 -16.36 12.02 -15 11 C-15.66 10.34 -16.32 9.68 -17 9 C-16.26 8.59 -15.51 8.18 -14.75 7.75 C-11.97 6.14 -11.97 6.14 -10.06 3.94 C-7.18 1.23 -3.97 0 0 0 Z \",fill:\"#442253\",transform:\"translate(510,213)\"})),_path474||(_path474=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.7 0.71 1.4 1.43 2.12 2.16 C4.02 4.06 5.97 5.89 7.97 7.68 C8.48 8.14 8.99 8.59 9.51 9.06 C10.55 9.98 11.58 10.89 12.63 11.81 C16.07 14.9 18.51 18.11 21 22 C26.37 27 32.56 30.86 38.78 34.73 C46.98 39.84 46.98 39.84 50.56 43.06 C57.75 49.51 66.64 53.39 75.44 57.12 C76.4 57.54 77.36 57.96 78.35 58.39 C84.82 61.17 91.36 63.66 98 66 C96 68 96 68 93.56 68.25 C91 68 91 68 88 66 C85.61 65.39 83.22 64.84 80.81 64.31 C74.74 62.89 69.08 61.01 63.38 58.5 C62.73 58.22 62.08 57.93 61.41 57.64 C50.63 52.73 41.65 44.72 33.11 36.66 C30.79 34.83 28.83 33.83 26 33 C24.52 33.5 24.52 33.5 23 34 C18.39 34.4 15.66 33.92 12 31 C11.06 29.12 11.06 29.12 11 27 C11.33 26.24 11.66 25.47 12 24.69 C13.35 21.07 12.98 18.7 12 15 C10.06 13.49 10.06 13.49 8 13 C8 12.01 8 11.02 8 10 C7.34 10 6.68 10 6 10 C4.49 8.32 4.49 8.32 2.88 6.12 C2.34 5.41 1.8 4.69 1.24 3.95 C0 2 0 2 0 0 Z \",fill:\"#38154A\",transform:\"translate(1038,545)\"})),_path475||(_path475=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.91 1.27 5.79 2.51 8 6 C7.67 6.66 7.34 7.32 7 8 C6.01 8 5.02 8 4 8 C5.37 12.94 7.68 14.43 12 17 C13.05 17.74 14.1 18.49 15.19 19.25 C17.87 21.26 17.87 21.26 21 21 C22.69 19.56 22.69 19.56 24 18 C27.88 20.62 27.88 20.62 29 24 C29.8 28.69 27.76 31.45 25.29 35.23 C24 37 24 37 22 39 C19.74 38.65 18.05 38.02 16 37 C14.51 37.49 14.51 37.49 13 38 C12.59 36.87 12.17 35.73 11.75 34.56 C10.43 30.9 10.43 30.9 7.81 30.06 C7.21 30.04 6.62 30.02 6 30 C6 29.34 6 28.68 6 28 C5.24 27.92 4.47 27.84 3.69 27.75 C0.37 26.82 -0.23 25.89 -2 23 C-2.54 22.15 -3.07 21.31 -3.62 20.44 C-5.84 16.52 -6.37 13.46 -6 9 C-4.69 7.5 -4.69 7.5 -3 6 C-1.95 4.02 -0.95 2.03 0 0 Z \",fill:\"#090F36\",transform:\"translate(979,1004)\"})),_path476||(_path476=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.22 5.96 12.22 5.96 15 11 C15 11.66 15 12.32 15 13 C16.37 14.28 16.37 14.28 18.18 15.54 C18.86 16.03 19.54 16.53 20.23 17.04 C20.96 17.56 21.69 18.09 22.44 18.62 C42.98 33.73 42.98 33.73 44.49 40.05 C44.81 42.25 44.81 42.25 45 46 C44 47 44 47 41.12 47.06 C30.93 45.37 22.07 34.82 16 27 C16 26.34 16 25.68 16 25 C15.42 24.77 14.85 24.54 14.25 24.3 C11.43 22.67 9.98 20.76 8 18.19 C7.01 16.91 7.01 16.91 6 15.61 C5.34 14.75 4.68 13.89 4 13 C3.27 12.13 2.55 11.25 1.8 10.35 C-0.13 7.83 -0.64 6.12 -1 3 C1.48 4.49 1.48 4.49 4 6 C2.68 4.02 1.36 2.04 0 0 Z \",fill:\"#270F3A\",transform:\"translate(856,238)\"})),_path477||(_path477=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.52 1.61 3.52 1.61 5.25 3.75 C9.24 8.4 12.87 11.82 19.06 12.94 C23.27 13 24.65 12.36 28 10 C28.66 10.33 29.32 10.66 30 11 C28.39 20.22 25.75 29.06 23 38 C22.71 38.96 22.41 39.93 22.11 40.92 C20.84 44.95 19.38 48.49 17 52 C15.68 51.67 14.36 51.34 13 51 C13.43 49.35 13.43 49.35 13.88 47.68 C14.25 46.22 14.63 44.77 15 43.31 C15.29 42.23 15.29 42.23 15.58 41.13 C16.55 37.33 17.25 33.95 17 30 C17.66 29.67 18.32 29.34 19 29 C16.81 27.58 14.63 26.16 12.44 24.75 C11.83 24.35 11.22 23.96 10.59 23.55 C6.47 20.89 2.28 18.4 -2 16 C-2 15.34 -2 14.68 -2 14 C-4.48 15.49 -4.48 15.49 -7 17 C-6.71 16.43 -6.43 15.87 -6.13 15.28 C-5.02 13.04 -3.96 10.78 -2.94 8.5 C-2.43 7.37 -2.43 7.37 -1.9 6.22 C-1.06 4.16 -0.48 2.17 0 0 Z \",fill:\"#0A123C\",transform:\"translate(957,816)\"})),_path478||(_path478=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.14 2.09 7.12 4.12 9.69 9 C11.56 12.51 13.17 15.24 16 18 C28.12 37.44 32 60.5 31 83 C30.67 83.33 30.34 83.66 30 84 C29.5 87.26 29.1 90.53 28.7 93.8 C27.99 97.04 27.36 98.69 25 101 C24.01 101 23.02 101 22 101 C21.81 98.38 21.62 95.75 21.44 93.12 C21.38 92.38 21.33 91.63 21.27 90.86 C20.89 85.23 20.89 85.23 22 83 C20.68 82.67 19.36 82.34 18 82 C18.32 77.45 18.78 74.07 21 70.06 C23.28 65.87 24.05 61.77 24 57 C23.67 56.34 23.34 55.68 23 55 C22.76 53.68 22.56 52.36 22.39 51.04 C19.82 32.69 14.6 19.01 1 6 C0 5 0 5 -0.06 2.44 C-0.04 1.63 -0.02 0.83 0 0 Z \",fill:\"#44214E\",transform:\"translate(557,1076)\"})),_path479||(_path479=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.58 3.23 -1.16 3.46 -1.76 3.7 C-6.93 5.86 -11.11 7.91 -15 12 C-16.1 15.68 -16.22 17.35 -15 21 C-15.06 20.07 -15.12 19.14 -15.19 18.19 C-15 15 -15 15 -13.5 13.12 C-13 12.75 -12.51 12.38 -12 12 C-11.69 12.83 -11.38 13.65 -11.06 14.5 C-9.33 17.13 -9.33 17.13 -7.15 17.4 C-2.06 17.48 2.72 16.57 7.64 15.34 C10.34 14.95 12.38 15.33 15 16 C15 16.66 15 17.32 15 18 C14.11 18.05 13.22 18.1 12.3 18.15 C10.54 18.26 10.54 18.26 8.75 18.38 C7.01 18.48 7.01 18.48 5.23 18.59 C1.27 19.01 1.27 19.01 -2 21 C-4.22 26.5 -4.42 31.99 -4.62 37.88 C-4.66 38.81 -4.7 39.75 -4.74 40.72 C-5.07 49.5 -5.04 58.27 -4.88 67.05 C-4.86 68.06 -4.85 69.07 -4.84 70.11 C-4.82 71.01 -4.81 71.9 -4.79 72.83 C-5 75 -5 75 -7 77 C-10 75 -10 75 -10.66 72.7 C-10.99 70.08 -11.27 67.47 -11.46 64.83 C-11.54 63.86 -11.62 62.88 -11.7 61.87 C-11.86 59.85 -12.01 57.83 -12.16 55.81 C-12.62 50.16 -13.34 44.77 -14.7 39.26 C-15.05 36.62 -14.64 34.57 -14 32 C-14.66 32 -15.32 32 -16 32 C-18.67 16.36 -18.67 16.36 -18 11 C-15.81 8.25 -15.81 8.25 -13 6 C-12.15 5.28 -11.31 4.56 -10.44 3.81 C-6.61 0.97 -4.86 0 0 0 Z \",fill:\"#472F6A\",transform:\"translate(630,1086)\"})),_path480||(_path480=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.76 5.91 1.7 8.25 4.25 C8.25 4.91 8.25 5.57 8.25 6.25 C12.25 7.14 12.25 7.14 16.25 6.75 C19.08 6.04 21.43 6.67 24.25 7.25 C24.25 7.91 24.25 8.57 24.25 9.25 C23.45 9.56 22.66 9.88 21.84 10.2 C16.21 12.47 11.24 14.77 6.25 18.25 C3.95 19.35 1.62 20.3 -0.75 21.25 C-0.51 27.03 0.95 29.63 4.97 33.77 C6.25 35.25 6.25 35.25 6.25 37.25 C6.89 37.54 7.53 37.83 8.19 38.12 C10.25 39.25 10.25 39.25 11.25 41.25 C13.6 42.21 15.91 43.07 18.31 43.88 C18.98 44.1 19.64 44.33 20.32 44.57 C21.96 45.14 23.61 45.69 25.25 46.25 C21.56 47.48 19.04 46.89 15.25 46.25 C15.58 47.57 15.91 48.89 16.25 50.25 C15.85 49.83 15.45 49.41 15.04 48.97 C10.34 44.45 6.73 43.28 0.25 43.25 C0.25 42.59 0.25 41.93 0.25 41.25 C2.23 40.75 2.23 40.75 4.25 40.25 C3.21 34.3 -0.17 31.95 -4.55 28.27 C-8.4 24.74 -10.91 20.46 -11.75 15.25 C-12.28 13.92 -12.28 13.92 -12.81 12.56 C-12.72 7.71 -10.43 5.41 -7.15 1.99 C-4.44 0.03 -3.29 -0.29 0 0 Z \",fill:\"#411E4F\",transform:\"translate(802.75,86.75)\"})),_path481||(_path481=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.45 0.48 0.9 0.96 1.36 1.46 C3.23 3.21 4.51 3.57 7 4 C7.5 6.48 7.5 6.48 8 9 C7.42 8.81 6.85 8.63 6.25 8.44 C4.04 7.83 4.04 7.83 2.09 8.54 C0 9 0 9 -3.62 8 C-9.84 6.3 -16.06 7.07 -22.06 9.31 C-25 10.72 -25 10.72 -26.25 12.81 C-25.85 16.34 -23.41 18.56 -21 21 C-18.29 23.1 -15.38 24.87 -12.46 26.65 C-9.67 28.46 -8.17 29.52 -7.05 32.71 C-7.03 33.47 -7.02 34.22 -7 35 C-7.33 35.33 -7.66 35.66 -8 36 C-15.26 35.75 -21.36 33.58 -28.06 30.96 C-30.89 29.65 -30.89 29.65 -33 31 C-34.95 30.07 -34.95 30.07 -37.12 28.69 C-37.85 28.24 -38.57 27.79 -39.32 27.32 C-39.87 26.89 -40.43 26.45 -41 26 C-41 25.34 -41 24.68 -41 24 C-39.37 24.31 -37.75 24.62 -36.12 24.94 C-34.77 25.2 -34.77 25.2 -33.38 25.46 C-31 26 -31 26 -29 27 C-30.71 23.67 -32.13 21.9 -35.12 19.56 C-38.48 16.57 -38.51 15.31 -39 11 C-29.81 5.16 -23.46 2.23 -12.41 2.92 C-7.67 3.03 -4.33 1.82 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(640,463)\"})),_path482||(_path482=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.72 1.96 5.2 3.28 7 7 C8.85 8.05 8.85 8.05 11 9 C18.5 14.49 18.5 14.49 19.45 19.27 C19.48 20.09 19.51 20.9 19.55 21.75 C19.59 22.66 19.63 23.57 19.67 24.52 C19.7 25.48 19.72 26.44 19.75 27.44 C19.79 28.42 19.82 29.41 19.86 30.43 C20.07 37.68 19.95 44.79 19 52 C18.86 53.07 18.72 54.15 18.57 55.25 C18 58 18 58 16.19 59.44 C13.71 60.07 12.38 59.85 10 59 C10.99 58.34 11.98 57.68 13 57 C12.5 56.5 12.5 56.5 12 56 C12.35 51.92 12.89 48.37 14.06 44.44 C15.31 39.88 15.94 35.99 13.88 31.62 C11.37 29.45 9.25 29.29 6 29 C5.85 28.04 5.85 28.04 5.69 27.06 C5.46 26.38 5.23 25.7 5 25 C4.01 24.67 3.02 24.34 2 24 C1.67 22.35 1.34 20.7 1 19 C-0.98 19.99 -0.98 19.99 -3 21 C-4.5 18 -4.27 14.92 -4.31 11.62 C-4.34 10.95 -4.37 10.28 -4.4 9.59 C-4.45 6.02 -4.27 4.33 -1.98 1.52 C-1.33 1.02 -0.67 0.52 0 0 Z \",fill:\"#785979\",transform:\"translate(546,345)\"})),_path483||(_path483=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.92 0.45 3.83 0.91 5.75 1.38 C6.82 1.63 7.88 1.89 8.98 2.15 C11.56 2.88 13.68 3.7 16 5 C16.31 8.9 16.27 11.44 14.56 15 C11.16 18.98 7.23 21.94 3 25 C4.21 29.43 5.52 31.98 9 35 C7.68 35.66 6.36 36.32 5 37 C4.28 36.36 3.56 35.72 2.81 35.06 C0.23 32.82 0.23 32.82 -2.56 32.69 C-5 32 -5 32 -7.25 28.81 C-10.44 23.01 -10.06 17.6 -8.69 11.31 C-8.56 10.65 -8.43 9.99 -8.29 9.3 C-7.6 5.99 -6.9 3.85 -5 1 C-4.34 1.33 -3.68 1.66 -3 2 C-3 2.66 -3 3.32 -3 4 C-2.34 4 -1.68 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#624268\",transform:\"translate(877,316)\"})),_path484||(_path484=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.34 1.74 0.68 2.47 -0 3.23 C-0.85 4.21 -1.69 5.18 -2.56 6.19 C-3.41 7.15 -4.26 8.11 -5.13 9.11 C-7.26 11.8 -7.26 11.8 -6.91 14.68 C-6.03 17.22 -6.03 17.22 -3.88 19.88 C-2 23 -2 23 -2 26.5 C-3.41 31.43 -5.96 35.77 -10 39 C-12.52 39.41 -12.52 39.41 -15.38 39.5 C-21.21 39.87 -21.21 39.87 -26 43 C-31.65 51.81 -32.68 61.84 -34 72 C-34.66 72 -35.32 72 -36 72 C-36.5 72.99 -36.5 72.99 -37 74 C-37 63.11 -37 52.22 -37 41 C-36.34 41 -35.68 41 -35 41 C-34.67 42.32 -34.34 43.64 -34 45 C-33.34 45 -32.68 45 -32 45 C-31.78 44.11 -31.78 44.11 -31.55 43.21 C-29.86 37.24 -28.27 34.35 -23 31 C-20.66 30.11 -18.46 29.54 -16 29 C-15.02 25.55 -14.66 22.12 -14.25 18.56 C-13.4 13.04 -12.62 10.42 -8 7 C-6.56 5.74 -5.12 4.47 -3.69 3.19 C-2.46 2.12 -1.23 1.06 0 0 Z \",fill:\"#54325B\",transform:\"translate(1048,1088)\"})),_path485||(_path485=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.35 0.22 1.35 0.22 2.73 0.45 C13.99 2.36 13.99 2.36 18.38 5.94 C20.94 8.23 20.94 8.23 24.5 8.94 C27.35 10.07 27.99 10.98 29.49 13.73 C31.86 19.7 33.58 25.61 34.45 31.98 C35.11 34.41 36.16 35.33 38 37 C39.59 41.77 39.09 47.02 39 52 C35.68 49.11 34.68 47.31 34 43 C33.17 42.82 32.34 42.64 31.48 42.45 C29.85 42.07 29.85 42.07 28.19 41.69 C27.11 41.44 26.03 41.2 24.92 40.95 C22 40 20.71 39.51 19 37 C18.38 33.96 18.48 31.06 19 28 C21 25.44 21 25.44 23 24 C22.4 23.75 21.8 23.51 21.19 23.25 C16.53 20.59 13.74 14.96 12 10 C11.89 6.74 11.89 6.74 12 4 C0.87 1.38 0.87 1.38 -10 3 C-9.67 2.01 -9.34 1.02 -9 0 C-5.98 -1.51 -3.21 -0.56 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(402,1051)\"})),_path486||(_path486=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.76 0.52 5.33 1.11 8 2 C8 2.66 8 3.32 8 4 C8.64 4.22 9.28 4.44 9.93 4.66 C12 6 12 6 12.79 8.4 C13.55 16.63 12.26 22.86 8 30 C5.05 33.37 1.85 35.83 -2.69 36.25 C-6.75 35.94 -9.35 34.75 -13 33 C-12 35.68 -11.43 36.78 -8.83 38.09 C-7.98 38.37 -7.13 38.65 -6.25 38.94 C0.49 41.45 5.25 44.77 8.39 51.46 C9.7 56.89 8.71 62.53 8 68 C7.67 68 7.34 68 7 68 C6.99 66.98 6.97 65.95 6.96 64.89 C6.91 63.53 6.86 62.17 6.81 60.81 C6.81 60.14 6.8 59.47 6.79 58.77 C6.62 54.86 6.12 53.14 3.59 50.11 C0.41 47.52 -2.71 45.62 -6.4 43.85 C-15.68 39.37 -15.68 39.37 -18 36 C-18.31 33.31 -18.31 33.31 -18 31 C-17 30 -17 30 -13.25 29.88 C-10.05 29.91 -7.11 30.22 -4 31 C-9.61 28.76 -15.07 27.17 -21 26 C-21 25.01 -21 24.02 -21 23 C-14.89 22.89 -9.05 23.1 -3 24 C-0.72 21.16 0.86 18.43 2.25 15.06 C2.61 14.23 2.96 13.39 3.33 12.54 C4.1 9.64 3.8 7.86 3 5 C3.99 5 4.98 5 6 5 C5.01 4.36 4.02 3.72 3 3.06 C2.01 2.38 1.02 1.7 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(1192,1047)\"})),_path487||(_path487=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.72 3.45 4.6 7.41 4.9 12.34 C4.92 14.77 4.87 17.18 4.73 19.61 C0.34 21.99 -3.38 22.86 -8.27 21.61 C-15.78 17.66 -22.07 12.27 -27.27 5.61 C-26.7 3.29 -26.7 3.29 -25.27 0.61 C-16.91 -3.81 -8.13 -5.62 0 0 Z \",fill:\"#7D678F\",transform:\"translate(640.265625,472.39453125)\"})),_path488||(_path488=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.06 1.64 5.45 3.6 7.94 7.19 C7.94 7.85 7.94 8.51 7.94 9.19 C7.28 9.19 6.62 9.19 5.94 9.19 C5.96 9.8 5.98 10.42 6.01 11.05 C6.03 11.86 6.04 12.67 6.06 13.5 C6.09 14.3 6.11 15.1 6.13 15.93 C5.94 18.19 5.94 18.19 3.94 21.19 C3.84 20.43 3.74 19.67 3.64 18.89 C3.49 17.89 3.34 16.9 3.19 15.88 C3.05 14.89 2.91 13.9 2.77 12.89 C1.78 9.68 0.84 8.79 -2.06 7.19 C-5.31 6.97 -7.18 7.44 -9.69 9.55 C-22.77 23.66 -33.07 42.73 -35.54 61.71 C-36.37 67.23 -37.46 72.79 -40.6 77.48 C-42.45 80.91 -42.75 84.13 -43.06 87.94 C-43.66 93.94 -44.48 99.82 -45.62 105.75 C-46.97 112.81 -47.52 119.72 -47.75 126.89 C-48.04 129.92 -48.47 131.65 -50.06 134.19 C-50.03 133.17 -50.03 133.17 -49.99 132.12 C-49.83 123.33 -50.83 114.87 -52.06 106.19 C-51.4 106.19 -50.74 106.19 -50.06 106.19 C-50 105.38 -49.94 104.57 -49.88 103.73 C-49.7 101.4 -49.52 99.07 -49.33 96.75 C-49.17 94.66 -49.04 92.57 -48.98 90.47 C-48.66 82.86 -46.18 76.35 -43.55 69.28 C-42.31 65.96 -41.31 62.63 -40.44 59.19 C-39.38 55.09 -37.96 51.39 -36.16 47.57 C-34.89 44.81 -33.76 42 -32.62 39.19 C-27.33 26.45 -27.33 26.45 -23.17 22.3 C-19.92 19.04 -17.49 15.23 -14.87 11.45 C-14.27 10.71 -13.68 9.96 -13.06 9.19 C-12.4 9.19 -11.74 9.19 -11.06 9.19 C-10.86 8.63 -10.65 8.07 -10.44 7.5 C-7.93 3.28 -5.02 0.31 0 0 Z \",fill:\"#411F4F\",transform:\"translate(366.0625,722.8125)\"})),_path489||(_path489=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.73 0.5 5.81 0.87 9 3 C9 3.66 9 4.32 9 5 C10.09 4.98 11.19 4.96 12.31 4.94 C16 5 16 5 19 6 C20.86 9.12 21.98 11.9 22.81 15.44 C24.12 19.35 25.75 21.26 28.47 24.25 C31.79 28.04 34.19 31.94 34.69 37.06 C33.9 41.6 32.99 43.17 29.38 45.89 C25.47 47.71 21.56 47.6 17.3 47.72 C13.08 48.08 9.81 49.43 6.02 51.26 C4 52 4 52 1 51 C2.29 48.12 3.53 45.99 6 44 C7.32 43.63 8.66 43.29 10 43 C13.06 40.96 13.53 40.35 14.94 37.19 C16.24 34.37 17.19 32.8 19.38 30.5 C21.38 27.99 21.38 27.99 20.62 24.38 C20.14 22.9 19.59 21.44 19 20 C18.44 18.6 18.44 18.6 17.87 17.18 C15.32 11.72 13.34 8.59 7.62 6.31 C6.09 5.84 4.56 5.38 3 5 C3 4.34 3 3.68 3 3 C2.34 3 1.68 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#785979\",transform:\"translate(693,289)\"})),_path490||(_path490=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.71 2.66 12.08 6.17 15 12 C15.55 17.74 14.58 20.52 11 25 C10.38 25.8 9.76 26.61 9.12 27.44 C7 29 7 29 4.31 29.25 C-2.67 26.62 -7.59 21.39 -11.06 14.88 C-12.71 11.13 -13.98 8.1 -13 4 C-9.41 -0.26 -5.32 -1.24 0 0 Z \",fill:\"#4B2E62\",transform:\"translate(825,151)\"})),_path491||(_path491=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C5.88 6.84 7.6 13.53 6.06 19.88 C5.54 21.42 5.54 21.42 5 23 C4.03 23.02 3.06 23.04 2.06 23.06 C-1.66 23.55 -3.7 25.12 -6.56 27.5 C-10.01 30.35 -12.34 32.21 -17 32 C-20.05 30.75 -21.54 29.72 -23.31 26.94 C-24.57 21.58 -25.3 16.15 -22.38 11.31 C-19.13 9.52 -17.57 10.18 -14 11 C-11.19 11.3 -8.86 11.23 -6 11 C-2.82 8.26 -1.55 3.84 0 0 Z \",fill:\"#856B8A\",transform:\"translate(872,644)\"})),_path492||(_path492=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-2.32 3.67 -3.64 3.34 -5 3 C-5 3.99 -5 4.98 -5 6 C-5.99 6.66 -6.98 7.32 -8 8 C-7.86 8.58 -7.71 9.15 -7.56 9.75 C-7.38 10.49 -7.19 11.23 -7 12 C-6.75 12.62 -6.5 13.24 -6.25 13.88 C-5.83 17.42 -7.03 19.04 -9 22 C-12.64 25.33 -16.67 28.1 -20.74 30.86 C-21.63 31.46 -22.52 32.07 -23.44 32.69 C-24.26 33.23 -25.08 33.77 -25.93 34.32 C-28.11 35.82 -28.11 35.82 -28.85 38.02 C-30.34 40.59 -32.18 41.43 -34.91 42.48 C-39.55 43.64 -44.34 43.06 -49.06 42.79 C-54.69 42.61 -57.41 43.44 -62 47 C-64.88 47.25 -64.88 47.25 -67 47 C-66.12 44.12 -66.12 44.12 -64 41 C-58.5 38.6 -52.56 39 -46.69 39.19 C-41.35 39.38 -41.35 39.38 -36.88 36.62 C-36.26 35.76 -35.64 34.89 -35 34 C-33.68 33.3 -32.35 32.63 -31 32 C-28.63 30.39 -26.31 28.7 -24 27 C-24.41 23.34 -24.41 23.34 -26.62 20.56 C-28 19 -28 19 -28.06 16.06 C-26.65 11.99 -24.73 11.01 -21 9 C-20.01 8.67 -19.02 8.34 -18 8 C-18 7.34 -18 6.68 -18 6 C-17.01 5.65 -16.03 5.3 -15.01 4.94 C-13.71 4.48 -12.42 4.02 -11.12 3.56 C-10.47 3.33 -9.82 3.1 -9.15 2.87 C-1.1 0 -1.1 0 0 0 Z \",fill:\"#3A164A\",transform:\"translate(256,1087)\"})),_path493||(_path493=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.58 1.18 1.15 2.35 1.75 3.56 C2.31 4.66 2.31 4.66 2.88 5.79 C3.84 7.68 4.77 9.59 5.69 11.5 C7.49 14.66 9.8 16.71 12.56 19.06 C16.09 22.07 18.58 24.45 20 29 C19.88 31.75 19.88 31.75 19 34 C16 36 16 36 13.11 35.79 C1.84 32.93 -5.24 22.44 -11 13 C-12.33 10.17 -12.99 8.49 -13.06 5.38 C-12 3 -12 3 -8.75 1.19 C-5.51 0.16 -3.34 -0.3 0 0 Z \",fill:\"#311244\",transform:\"translate(438,1028)\"})),_path494||(_path494=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 3.62 1.11 6.93 1.06 10.69 C1.06 11.39 1.05 12.09 1.05 12.81 C1.04 14.54 1.02 16.27 1 18 C1.99 18 2.98 18 4 18 C6.63 13.57 6.81 8.83 7.44 3.8 C7.72 2.41 7.72 2.41 8 1 C8.66 0.67 9.32 0.34 10 0 C10.11 5.46 9.92 10.62 9 16 C8.34 16 7.68 16 7 16 C7.05 17.12 7.1 18.25 7.15 19.41 C7.15 24.36 5.98 28.76 4.62 33.5 C4.18 35.11 3.73 36.73 3.29 38.34 C2.96 39.5 2.96 39.5 2.63 40.69 C1.7 44.11 0.85 47.55 0 51 C-0.66 51 -1.32 51 -2 51 C-2.12 51.99 -2.12 51.99 -2.25 53 C-3.25 56.99 -5.07 60.39 -7 64 C-8.32 64 -9.64 64 -11 64 C-11 64.66 -11 65.32 -11 66 C-14 67 -14 67 -16 66.38 C-16.99 66.19 -16.99 66.19 -18 66 C-19.65 67.23 -19.65 67.23 -21 69 C-22.44 70.75 -22.44 70.75 -24 72 C-26.19 71.69 -26.19 71.69 -28 71 C-27.53 70.48 -27.06 69.96 -26.57 69.43 C-25.95 68.73 -25.33 68.03 -24.69 67.31 C-23.77 66.29 -23.77 66.29 -22.82 65.24 C-20.94 63.04 -20.94 63.04 -19.55 60.5 C-17.33 56.92 -14.34 54.4 -11.25 51.57 C-5.61 45.13 -4.2 38.35 -3.25 30 C-3.06 28.49 -3.06 28.49 -2.87 26.96 C-2.02 19.55 -1.79 12.33 -2.09 4.89 C-2 2 -2 2 0 0 Z \",fill:\"#411E4E\",transform:\"translate(578,1159)\"})),_path495||(_path495=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 0.21 2.38 0.21 5 1 C6.19 3 6.19 3 7 5.56 C8.52 9.9 10.38 13.44 12.91 17.25 C14 19 14 19 15 21.75 C16.42 24.94 18.06 26.12 21 28 C23.76 28.29 26.08 28.39 28.81 28.25 C29.51 28.23 30.2 28.21 30.91 28.2 C32.61 28.15 34.3 28.08 36 28 C36.2 29.25 36.41 30.51 36.62 31.8 C36.89 33.45 37.17 35.1 37.44 36.75 C37.57 37.57 37.71 38.4 37.85 39.25 C37.98 40.05 38.11 40.85 38.25 41.67 C38.37 42.41 38.49 43.14 38.61 43.89 C38.99 45.96 39.47 47.97 40 50 C40.66 50 41.32 50 42 50 C42 51.98 42 53.96 42 56 C37.38 56.72 34.57 54.96 30.85 52.5 C28.25 50.39 26.75 47.83 25 45 C24.23 44.42 23.46 43.83 22.67 43.23 C19.58 40.65 17.55 37.76 15.44 34.38 C15.05 33.76 14.66 33.14 14.26 32.51 C10.47 26.37 7 20.34 7 13 C6.34 13 5.68 13 5 13 C3.1 10.14 2.31 8.07 1.38 4.81 C0.98 3.46 0.98 3.46 0.59 2.08 C0.39 1.39 0.2 0.71 0 0 Z \",fill:\"#70577D\",transform:\"translate(791,294)\"})),_path496||(_path496=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4 2 4 2 4.23 3.91 C5.77 8.08 11.1 9.31 14.9 11.12 C18.29 13.18 19.51 14.36 21 18 C21.33 21.23 21.33 21.23 21.25 24.62 C21.23 26.31 21.23 26.31 21.2 28.04 C21 31 21 31 20 34 C20 34.99 20 35.98 20 37 C13.4 37 6.8 37 0 37 C0 24.79 0 12.58 0 0 Z \",fill:\"#816786\",transform:\"translate(1111,1243)\"})),_path497||(_path497=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 2.23 1.09 4.46 1.12 6.69 C1.15 7.93 1.17 9.17 1.2 10.45 C1.01 13.88 0.34 15.89 -1 19 C-1.73 23.63 -1.83 28.32 -2 33 C-2.04 33.93 -2.08 34.85 -2.12 35.81 C-2.75 52.38 -2.38 69.93 4.04 85.52 C4.97 87.91 5.39 89.91 5.68 92.44 C5.78 93.27 5.88 94.09 5.99 94.94 C6.1 95.81 6.2 96.67 6.31 97.56 C7.97 110.63 7.97 110.63 14.65 121.62 C16 123 16 123 16.06 126.06 C16.04 127.03 16.02 128 16 129 C16.66 129.66 17.32 130.32 18 131 C18 131.99 18 132.98 18 134 C18.99 132.02 18.99 132.02 20 130 C25.01 131.47 27.52 134.28 31 138 C30.67 138.99 30.34 139.98 30 141 C29.38 140.34 28.76 139.68 28.12 139 C26.24 136.77 26.24 136.77 24 137 C24.56 141.3 26.09 144.05 28.5 147.62 C30.41 150.48 31.91 152.74 33 156 C32.67 156.66 32.34 157.32 32 158 C24.19 154.73 19.52 145.33 16 138 C15.23 136.05 14.51 134.11 13.87 132.12 C12.97 129.78 12.97 129.78 11.13 126.97 C8.33 122.15 6.95 116.96 5.44 111.62 C5.13 110.57 4.83 109.52 4.52 108.43 C-1 88.75 -1 88.75 -1 79 C-1.66 79 -2.32 79 -3 79 C-4.82 69.3 -5.32 59.84 -5.25 50 C-5.25 49.28 -5.24 48.56 -5.24 47.82 C-5.17 31.71 -4.82 15.51 0 0 Z \",fill:\"#291138\",transform:\"translate(408,809)\"})),_path498||(_path498=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.1 55.52 2.1 55.52 2.12 82.25 C2.13 83.13 2.13 84 2.13 84.9 C2.14 87.36 2.14 89.81 2.13 92.27 C2.13 92.97 2.14 93.67 2.14 94.4 C2.12 98.37 1.76 102.11 1 106 C0.67 106 0.34 106 0 106 C0.01 105.02 0.02 104.03 0.03 103.02 C0.07 99.34 0.09 95.65 0.11 91.97 C0.12 90.38 0.13 88.79 0.15 87.21 C0.34 74.97 0.34 74.97 -2 63 C-2.33 62.67 -2.66 62.34 -3 62 C-3.16 60.66 -3.25 59.31 -3.32 57.96 C-3.36 57.16 -3.4 56.35 -3.44 55.51 C-3.48 54.66 -3.52 53.81 -3.56 52.94 C-3.61 52.08 -3.65 51.23 -3.69 50.35 C-3.8 48.23 -3.9 46.12 -4 44 C-4.66 44 -5.32 44 -6 44 C-5.84 44.7 -5.68 45.4 -5.51 46.12 C-4.97 49.17 -4.83 52.03 -4.81 55.12 C-4.8 56.16 -4.78 57.19 -4.77 58.26 C-5 61 -5 61 -7 64 C-7.45 66.38 -7.82 68.78 -8.12 71.19 C-8.38 73.1 -8.38 73.1 -8.63 75.04 C-8.75 76.02 -8.88 76.99 -9 78 C-9.66 77.67 -10.32 77.34 -11 77 C-10.99 76.25 -10.98 75.5 -10.96 74.73 C-10.96 73.75 -10.95 72.76 -10.94 71.75 C-10.93 70.78 -10.91 69.8 -10.9 68.8 C-10.9 66.12 -10.9 66.12 -11.48 64.08 C-12.38 60.48 -12.51 56.82 -12.75 53.12 C-12.85 51.94 -12.85 51.94 -12.96 50.73 C-13.29 45.55 -12.65 42.6 -10 38 C-9.02 35.5 -9.02 35.5 -9 33 C-10.18 30.49 -10.18 30.49 -11.94 28.12 C-14.81 23.7 -15.68 21.2 -15 16 C-14.67 16 -14.34 16 -14 16 C-13.75 17.09 -13.5 18.19 -13.25 19.31 C-12.3 22.94 -12.3 22.94 -10.19 24.94 C-7.62 26.19 -5.83 26.24 -3 26 C-0.77 20.55 -0.57 15.42 -0.38 9.62 C-0.32 8.23 -0.32 8.23 -0.26 6.82 C-0.16 4.54 -0.08 2.27 0 0 Z \",fill:\"#3C194D\",transform:\"translate(481,394)\"})),_path499||(_path499=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.33 -1.32 0.66 -2 1 C-2.81 3.26 -3.41 5.55 -4.02 7.87 C-5 10 -5 10 -6.91 11.29 C-9 12 -9 12 -12 11.88 C-15.67 11.73 -18.56 12.77 -22 14 C-30.44 16.93 -30.44 16.93 -35 16 C-37.09 14.15 -38.4 12.33 -40 10 C-41.65 10.33 -43.3 10.66 -45 11 C-45.33 10.01 -45.66 9.02 -46 8 C-41.01 1.81 -34.25 -0.04 -26.69 -1.75 C-17.5 -2.37 -8.92 -2.31 0 0 Z \",fill:\"#3E1D4A\",transform:\"translate(304,1179)\"})),_path500||(_path500=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.46 2.45 3.46 2.45 3.94 3.94 C4.69 7.03 4.69 7.03 6.81 8.38 C9.3 9.09 11.42 9.14 14 9 C14.66 10.32 15.32 11.64 16 13 C15.53 13.43 15.05 13.87 14.56 14.31 C12.76 16.02 12.76 16.02 12 19 C10 20 8 21 6 22 C3.27 24.48 3.27 24.48 1 27 C-1 29 -1 29 -4.19 29.44 C-8.21 28.98 -10.58 28.37 -13.74 25.88 C-16.05 22.43 -15.3 18.97 -14.72 15.02 C-13.7 10.74 -12.44 7.69 -10 4 C-7.86 3.29 -7.86 3.29 -6 3 C-6 3.66 -6 4.32 -6 5 C-5.07 4.15 -4.14 3.31 -3.19 2.44 C-1.61 1 -1.61 1 0 0 Z \",fill:\"#44214F\",transform:\"translate(499,1216)\"})),_path501||(_path501=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.79 0.05 1.57 0.1 2.38 0.16 C3.66 0.24 3.66 0.24 4.96 0.31 C5.85 0.38 6.74 0.44 7.65 0.51 C9 0.6 9 0.6 10.37 0.68 C12.59 0.82 14.81 0.98 17.03 1.14 C17.45 2.11 17.87 3.08 18.3 4.08 C18.87 5.09 19.44 6.1 20.03 7.14 C23.62 8.11 23.62 8.11 27.03 8.14 C27.03 8.47 27.03 8.8 27.03 9.14 C27.72 9.19 28.41 9.24 29.13 9.29 C38.57 10.39 49.15 14.26 56.03 21.14 C57.35 21.83 58.68 22.5 60.03 23.14 C57.2 25.24 54.86 26.94 51.4 27.76 C49.03 27.14 49.03 27.14 47.22 24.39 C43.32 18.59 37.85 17.12 31.22 15.64 C25.57 14.8 21.67 15.81 16.5 18.09 C14.01 19.14 11.69 19.69 9.03 20.14 C7.23 17.36 6.04 15.19 5.28 11.95 C4.87 11.02 4.45 10.09 4.03 9.14 C0.5 7.68 0.5 7.68 -2.97 7.14 C-3.6 4.76 -3.6 4.76 -3.97 2.14 C-1.97 0.14 -1.97 0.14 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(576.97119140625,485.86474609375)\"})),_path502||(_path502=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.2 3.6 1.38 7.21 1.56 10.81 C1.65 12.32 1.65 12.32 1.73 13.86 C2.66 33.17 2.66 33.17 -2 39 C-3 40 -3 40 -6.1 40.03 C-7.41 40 -8.71 39.97 -10.06 39.94 C-16.19 39.83 -16.19 39.83 -22.19 40.94 C-26.56 42.16 -30.7 42.46 -35.21 42.78 C-38.18 43.01 -41.08 43.43 -44 44 C-44.86 42.71 -45.72 41.42 -46.56 40.12 C-47.04 39.41 -47.51 38.69 -48 37.95 C-48.33 37.3 -48.66 36.66 -49 36 C-48.67 35.34 -48.34 34.68 -48 34 C-47.34 34.66 -46.68 35.32 -46 36 C-43.67 36.28 -43.67 36.28 -40.99 36.2 C-39.51 36.19 -39.51 36.19 -38 36.18 C-36.97 36.16 -35.94 36.14 -34.88 36.12 C-33.83 36.12 -32.79 36.11 -31.72 36.1 C-29.15 36.07 -26.57 36.04 -24 36 C-24.08 35.37 -24.17 34.75 -24.25 34.1 C-24.36 33.28 -24.46 32.47 -24.56 31.62 C-24.67 30.81 -24.77 30 -24.88 29.16 C-25 27 -25 27 -24 25 C-22.86 25.02 -22.86 25.02 -21.69 25.04 C-15.37 25.09 -9.26 24.92 -3 24 C-1.32 22.32 -1.65 20.17 -1.46 17.87 C-1.38 16.84 -1.29 15.8 -1.2 14.74 C-1.11 13.65 -1.03 12.56 -0.94 11.44 C-0.85 10.35 -0.76 9.25 -0.66 8.13 C-0.44 5.42 -0.22 2.71 0 0 Z \",fill:\"#401D4F\",transform:\"translate(377,915)\"})),_path503||(_path503=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.73 3.1 2.46 3.2 3.22 3.3 C10 5.01 16.22 11.27 20 17 C20.44 20.25 20.44 20.25 20 23 C16.99 26.01 14.18 25.6 10 26 C10 27.32 10 28.64 10 30 C1.86 28.41 -5.03 22.45 -11 17 C-10.36 16.88 -9.72 16.75 -9.06 16.62 C-8.38 16.42 -7.7 16.21 -7 16 C-6.67 15.34 -6.34 14.68 -6 14 C-3.52 14.99 -3.52 14.99 -1 16 C-2.51 13.29 -3.85 11.14 -6.12 9 C-8.35 6.62 -8.92 5.25 -9 2 C-6.74 -2 -4.01 -0.98 0 0 Z \",fill:\"#230C37\",transform:\"translate(921,665)\"})),_path504||(_path504=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.74 -0.48 15.34 -0.52 22 4 C22.77 6.14 22.77 6.14 23 8 C22.07 8.23 21.14 8.45 20.19 8.69 C16.4 10.25 15.7 11.35 14 15 C13.61 15.76 13.22 16.53 12.81 17.31 C11.72 20.92 11.38 24.29 12 28 C13.83 31.29 13.83 31.29 16 34 C17.05 37.16 16.96 39.7 16.9 42.99 C17.03 45.61 17.83 47.67 19 50 C11.56 48.49 4.11 46.71 -3 44 C-3.33 43.34 -3.66 42.68 -4 42 C-2.84 41.6 -2.84 41.6 -1.66 41.2 C-0.66 40.84 0.34 40.49 1.38 40.12 C2.37 39.78 3.37 39.43 4.4 39.07 C7.1 38.15 7.1 38.15 9 36 C8.89 32.21 7.91 30.89 5.38 28 C2.61 24.42 2.87 21.8 3.31 17.38 C3.47 16.29 3.63 15.2 3.8 14.09 C4.02 10.72 3.55 8.96 2 6 C1.34 5.34 0.68 4.68 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#41204B\",transform:\"translate(1127,612)\"})),_path505||(_path505=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.52 0.58 13.59 3.28 19.88 9.19 C20.37 9.65 20.87 10.11 21.38 10.59 C22.59 11.72 23.8 12.86 25 14 C22 14 22 14 18.62 13.69 C14.88 13.67 14.88 13.67 12.25 16.25 C10.44 18.46 8.65 20.66 7 23 C4.48 15.33 4.48 15.33 5.76 12.07 C6.88 10.44 6.88 10.44 9 8 C6.24 8.5 6.24 8.5 4 10 C3.6 12.18 3.26 14.37 2.94 16.56 C2.76 17.76 2.58 18.96 2.4 20.19 C2.27 21.12 2.14 22.05 2 23 C2.66 23 3.32 23 4 23 C4.5 24.77 5 26.54 5.5 28.31 C5.78 29.3 6.06 30.28 6.34 31.3 C7 34 7 34 7 37 C7.99 37.33 8.98 37.66 10 38 C10.43 38.91 10.87 39.81 11.31 40.75 C12.99 43.98 14.56 45.34 17.38 47.53 C22.54 52.21 25.57 58.28 27 65 C22.02 64.85 19.68 62.12 16.36 58.79 C15 57 15 57 15 54 C15.99 54 16.98 54 18 54 C14.85 48.9 11.1 45.02 6.63 41.06 C5.17 39.68 5.17 39.68 3 37 C3.18 34.16 3.18 34.16 4 32 C3.34 31.67 2.68 31.34 2 31 C-2.59 24.21 -6.07 17.78 -5.51 9.39 C-4.66 5.39 -2.89 2.89 0 0 Z \",fill:\"#411E4E\",transform:\"translate(706,103)\"})),_path506||(_path506=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.22 3.34 -3.57 4.03 -7 6 C-17.14 11.98 -24.92 19.33 -28 31 C-31.06 46.41 -25.72 63.01 -18.21 76.46 C-16.98 78.31 -16.98 78.31 -14 79 C-14 80.32 -14 81.64 -14 83 C-13.01 83 -12.02 83 -11 83 C-9.39 84.69 -9.39 84.69 -7.69 87 C-7.08 87.82 -6.47 88.63 -5.84 89.48 C-5.23 90.31 -4.63 91.14 -4 92 C-2.92 93.46 -1.84 94.92 -0.75 96.38 C-0.29 97 0.17 97.63 0.64 98.27 C2.55 100.69 4.23 102.61 7 104 C7 104.66 7 105.32 7 106 C7.99 106.49 7.99 106.49 9 107 C7.23 107.68 7.23 107.68 5 108 C-9.85 99.08 -24.84 77.11 -30 61 C-30.3 60.14 -30.6 59.27 -30.9 58.38 C-32.81 52.02 -33.31 45.91 -33.38 39.31 C-33.39 38.53 -33.4 37.75 -33.42 36.94 C-33.35 28.63 -31.05 21.64 -26 15 C-25.6 14.45 -25.21 13.89 -24.8 13.32 C-19.51 6.47 -8.99 -2.5 0 0 Z \",fill:\"#28103B\",transform:\"translate(170,1139)\"})),_path507||(_path507=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 6.61 1.34 12.22 1 18 C0.01 18.33 -0.98 18.66 -2 19 C-1.68 20.23 -1.36 21.47 -1.03 22.74 C0.7 31.41 0.4 40.32 0.5 49.12 C0.77 72.46 2.95 94.25 12 116 C12.54 117.35 13.08 118.71 13.62 120.07 C16.12 126.61 16.12 126.61 19 133 C19.07 134.71 19.08 136.42 19.06 138.12 C19.05 139.04 19.04 139.95 19.04 140.88 C19.02 141.58 19.01 142.28 19 143 C14.69 142.52 12.83 141.25 10 138 C10.33 137.34 10.66 136.68 11 136 C11.62 136.5 12.24 136.99 12.88 137.5 C14.84 139.19 14.84 139.19 17 139 C15.35 130.54 12.49 123.22 8.72 115.54 C6.1 110.14 3.82 104.73 2 99 C1.5 99.5 1.5 99.5 1 100 C1.09 102.02 1.25 104.05 1.44 106.06 C1.54 107.17 1.64 108.27 1.75 109.41 C1.83 110.26 1.91 111.12 2 112 C1.67 111.34 1.34 110.68 1 110 C0.34 110 -0.32 110 -1 110 C-1.06 109.4 -1.12 108.79 -1.18 108.17 C-1.27 107.37 -1.35 106.57 -1.44 105.75 C-1.52 104.96 -1.6 104.17 -1.68 103.36 C-1.98 101.17 -2.46 99.14 -3 97 C-3.22 95.08 -3.22 95.08 -3.44 93.12 C-3.74 90.47 -4.19 88.45 -5.06 85.88 C-6.08 82.76 -6.15 80.25 -6 77 C-6.33 77 -6.66 77 -7 77 C-7.05 74.75 -7.09 72.5 -7.12 70.25 C-7.15 69 -7.17 67.74 -7.2 66.45 C-7.02 63.27 -6.69 61.63 -5 59 C-3.68 59 -2.36 59 -1 59 C-1.06 58.24 -1.12 57.48 -1.18 56.7 C-4.36 16.37 -4.36 16.37 0 0 Z \",fill:\"#3A1A48\",transform:\"translate(313,830)\"})),_path508||(_path508=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 0.28 1.14 0.28 2.31 0.56 C5.09 1.23 5.09 1.23 8 0 C18.25 5.81 24.96 15.99 31.33 25.6 C31.99 26.59 31.99 26.59 32.65 27.59 C33.03 28.18 33.42 28.76 33.81 29.37 C34.98 31.07 34.98 31.07 36.65 32.59 C38 34 38 34 38 36 C38.66 36 39.32 36 40 36 C40.66 37.65 41.32 39.3 42 41 C41.01 41 40.02 41 39 41 C38.05 41.29 37.1 41.58 36.12 41.88 C35.09 41.92 34.06 41.96 33 42 C30.62 39.5 30.62 39.5 29.42 37.82 C27.78 35.72 25.96 34.11 23.94 32.38 C16.61 26.09 16.61 26.09 14.74 22.73 C12.69 19.51 10.18 17 7.44 14.38 C0.05 7.25 0.05 7.25 -0.12 2.81 C-0.08 1.88 -0.04 0.96 0 0 Z \",fill:\"#2A1238\",transform:\"translate(963,541)\"})),_path509||(_path509=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02 1.74 2.96 2.89 3.88 5.44 C5.34 8.78 6.94 10.03 10 12 C12.33 12.85 14.58 13.43 17 14 C17.33 15.65 17.66 17.3 18 19 C13.25 18.12 13.25 18.12 11 17 C11.53 18.18 11.53 18.18 12.06 19.38 C12.53 20.67 12.53 20.67 13 22 C12.67 22.66 12.34 23.32 12 24 C13.32 24.33 14.64 24.66 16 25 C11.51 28.59 7.19 31.43 1.62 32.88 C-4.3 31.44 -7.54 26.83 -11 22 C-12.67 18.46 -13.22 15.91 -13 12 C-12.01 12 -11.02 12 -10 12 C-6.16 9.47 -4.35 7.4 -3 3 C-2.01 3.33 -1.02 3.66 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#472860\",transform:\"translate(974,496)\"})),_path510||(_path510=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 1.67 2.98 1.34 4 1 C4.99 1.33 5.98 1.66 7 2 C7.33 1.67 7.66 1.34 8 1 C11.72 0.57 13.7 0.85 17.06 2.56 C19.65 4.71 20.57 5.82 22.19 8.56 C24.46 12.03 26.59 12.78 30.56 13.81 C31.49 14 32.42 14.2 33.38 14.39 C37.63 15.38 39.98 16.98 43 20 C44.85 21.05 44.85 21.05 47 22 C49 23 51 24 53 25 C52.67 25.66 52.34 26.32 52 27 C50.67 27.33 49.33 27.67 48 28 C47.67 28.66 47.34 29.32 47 30 C32.06 29.14 13.6 19.56 3.38 8.62 C0.51 5.25 0 4.58 0 0 Z \",fill:\"#241037\",transform:\"translate(917,612)\"})),_path511||(_path511=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.18 0.54 4.35 1.08 4.54 1.64 C6.39 7.25 8.34 12.83 10.38 18.38 C10.68 19.2 10.98 20.03 11.29 20.89 C13.27 26.23 15.44 31.41 18.05 36.48 C21.02 44.4 19.63 51.98 18.38 60.12 C18.19 61.33 18.01 62.53 17.82 63.76 C16.02 74.94 13.55 84.6 7 94 C7 90.47 7.96 88.38 9.31 85.12 C12.52 76.97 15.04 68.81 15 60 C15.3 58.66 15.63 57.32 16 56 C17.69 46 16.55 39.62 11.8 30.65 C7.77 22.89 4.99 14.52 3 6 C1.68 5.67 0.36 5.34 -1 5 C-9.17 12.98 -9.17 12.98 -12.48 23.43 C-12.44 24.92 -12.36 26.4 -12.25 27.88 C-11.61 36.79 -11.61 36.79 -14.81 40.62 C-18.65 44.13 -23.14 46.8 -27.64 49.36 C-30.09 50.78 -30.09 50.78 -30.98 52.98 C-32.47 55.94 -34.68 56.94 -37.5 58.62 C-41.49 61 -41.49 61 -45 64 C-47.62 64.12 -47.62 64.12 -50 64 C-49.01 62.68 -48.02 61.36 -47 60 C-49.97 59.67 -52.94 59.34 -56 59 C-56 58.67 -56 58.34 -56 58 C-55.4 57.98 -54.81 57.97 -54.19 57.95 C-44.56 56.99 -37.64 51.82 -29.96 46.37 C-28.25 45.17 -26.47 44.05 -24.69 42.95 C-21.94 41.13 -19.94 39.67 -18 37 C-17.53 33.62 -17.69 30.56 -17.94 27.16 C-18.13 17.41 -8.11 8.86 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#867396\",transform:\"translate(822,580)\"})),_path512||(_path512=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C7.09 8.55 8.58 16.1 9.81 23.82 C10.7 29.39 11.78 34.91 12.94 40.44 C14.62 48.5 15.85 56.59 17 64.75 C18.65 76.35 20.5 87.77 24.75 98.75 C26 102 26 102 26 106 C24.06 105.27 24.06 105.27 22 104 C21.35 102.01 21.35 102.01 21.06 99.69 C20.42 96.02 20.2 95.2 17.44 92.44 C14.04 89.04 14.39 86.7 14 82 C13.34 81.67 12.68 81.34 12 81 C11.59 79.23 11.59 79.23 11.37 76.96 C11.28 76.16 11.2 75.35 11.11 74.51 C11.03 73.66 10.96 72.81 10.88 71.94 C10.79 71.08 10.7 70.23 10.61 69.35 C10.4 67.23 10.2 65.12 10 63 C11.49 62.5 11.49 62.5 13 62 C12.01 61.34 11.02 60.68 10 60 C9.19 57.18 9.19 57.18 8.56 53.31 C8.38 52.24 8.38 52.24 8.2 51.14 C7.37 45.9 6.69 40.65 6.03 35.4 C5.94 34.73 5.86 34.06 5.77 33.36 C5.34 29.98 4.93 26.6 4.53 23.22 C3.57 15.29 2.16 7.69 0 0 Z \",fill:\"#000002\",transform:\"translate(934,282)\"})),_path513||(_path513=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.93 1.66 6.25 4.09 8.12 7.9 C9.02 12.29 8.67 15.7 6.81 19.77 C2.87 24.73 2.87 24.73 0.21 25.33 C-6.09 25.34 -11.28 23.8 -16.88 20.9 C-18.88 18.9 -18.88 18.9 -19.25 16.15 C-18.51 9.7 -13.91 5.23 -9.09 1.21 C-5.88 -0.69 -3.61 -0.76 0 0 Z \",fill:\"#856B8A\",transform:\"translate(715.87890625,529.1015625)\"})),_path514||(_path514=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C4 5 4 5 0.63 5.84 C-0.72 6.07 -2.08 6.29 -3.44 6.5 C-8.48 7.16 -8.48 7.16 -12.91 9.47 C-15.23 12.73 -15.38 15.02 -15 19 C-13.17 22.2 -11.08 24.9 -8.75 27.75 C-7 30 -7 30 -7 32 C-6.34 32.83 -5.68 33.65 -5 34.5 C-3 37 -3 37 -3 39 C-2.01 39 -1.02 39 0 39 C0.33 40.32 0.66 41.64 1 43 C1.66 43 2.32 43 3 43 C4.6 44.78 6.13 46.63 7.62 48.5 C8.44 49.52 9.26 50.54 10.1 51.59 C10.73 52.39 11.35 53.18 12 54 C11.51 54.99 11.51 54.99 11 56 C10.44 55.52 9.88 55.03 9.3 54.53 C3.24 49.46 -2.91 45.67 -9.9 42.05 C-13.36 39.76 -14.84 37.49 -17 34 C-18.3 33.38 -18.3 33.38 -19.62 32.75 C-22.48 30.65 -22.58 29.76 -23.31 26.38 C-25.13 14.26 -25.13 14.26 -22.31 8.62 C-19.01 4.87 -16.51 3.19 -11.48 2.56 C-10.25 2.52 -9.02 2.48 -7.75 2.44 C-5.5 2.36 -3.24 2.23 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#4B2E62\",transform:\"translate(1198,640)\"})),_path515||(_path515=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.79 2.91 3.59 3.82 3.38 4.75 C2.97 8.24 3.34 9.07 5 12 C5 13.32 5 14.64 5 16 C3.11 16.96 1.21 17.92 -0.69 18.88 C-2.27 19.68 -2.27 19.68 -3.89 20.49 C-7 22 -7 22 -9.71 22.93 C-12.53 24.25 -13.36 25.53 -14.94 28.19 C-21.9 39.3 -21.9 39.3 -27 41 C-27.48 41.64 -27.95 42.27 -28.44 42.93 C-30.16 45.21 -31.39 45.92 -33.94 47.12 C-38.84 49.67 -42.77 53 -46.84 56.7 C-49.93 59.42 -50.69 60 -55 60 C-56.61 56.79 -56.06 53.56 -56 50 C-55.34 50.66 -54.68 51.32 -54 52 C-53.59 51.52 -53.18 51.05 -52.75 50.55 C-50.72 48.75 -49.6 48.52 -46.94 48.12 C-36.33 46 -28.85 40.37 -22.5 31.81 C-20.81 29.23 -20.81 29.23 -21.12 26.94 C-21.41 26.3 -21.7 25.66 -22 25 C-22.67 23.33 -23.34 21.67 -24 20 C-22.91 19.41 -21.83 18.82 -20.71 18.21 C-19.27 17.41 -17.82 16.61 -16.38 15.81 C-15.66 15.43 -14.95 15.04 -14.21 14.64 C-9.7 12.14 -5.86 9.43 -2 6 C-2.5 4.02 -2.5 4.02 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#624368\",transform:\"translate(723,594)\"})),_path516||(_path516=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.27 1.01 0.54 2.02 0.81 3.06 C2.41 6.84 4.5 8.13 8.02 10.13 C14.22 13.93 18.95 18.56 23.94 23.81 C25.57 25.51 27.2 27.21 28.84 28.89 C29.54 29.64 30.25 30.38 30.98 31.14 C32.95 32.96 34.49 34.06 37 35 C41.82 34.76 41.82 34.76 45.94 32.5 C49.29 30.06 51.84 30 56 30 C58.5 32.44 58.5 32.44 60 35 C59.35 35.01 58.7 35.03 58.02 35.04 C51.86 35.31 51.86 35.31 46.81 38.5 C42.85 42.02 39.58 42.06 34.44 41.94 C30.73 40.51 28.26 38.25 26 35 C25.12 31.12 25.12 31.12 25 28 C24.28 27.92 23.55 27.85 22.8 27.77 C19.28 26.8 17.73 25.23 15.12 22.69 C5.95 14.15 -3.6 11 -16 10 C-15.83 5.66 -15.62 3.62 -12.5 0.5 C-7.97 -1.44 -4.74 -0.97 0 0 Z \",fill:\"#411E4E\",transform:\"translate(640,102)\"})),_path517||(_path517=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -0.5 6.25 C-1.16 9.92 -1.16 9.92 -0.56 13.25 C-1.42 20.62 -7.21 26.69 -12.69 31.44 C-13.78 32.3 -14.89 33.16 -16 34 C-16.93 34.78 -17.86 35.57 -18.81 36.38 C-21 38 -21 38 -23 38 C-23 38.66 -23 39.32 -23 40 C-24.47 41.22 -24.47 41.22 -26.5 42.5 C-27.47 43.13 -27.47 43.13 -28.47 43.78 C-31.22 45.1 -33.94 45.74 -36.9 46.43 C-40.32 47.36 -43.43 48.87 -46.62 50.38 C-57.68 55.39 -69.04 58.93 -81.25 59.28 C-82.44 59.32 -83.62 59.36 -84.85 59.39 C-86.07 59.43 -87.3 59.46 -88.56 59.5 C-96.85 59.74 -105.06 60.1 -113.3 60.96 C-116.04 61 -117.37 60.78 -119.69 59.38 C-122.09 56.91 -122.88 55.2 -124 52 C-124.72 51.34 -125.44 50.68 -126.19 50 C-126.79 49.34 -127.38 48.68 -128 48 C-127.75 45.25 -127.75 45.25 -127 43 C-126.67 43 -126.34 43 -126 43 C-125.81 43.83 -125.63 44.65 -125.44 45.5 C-123.5 50.22 -121.09 53.87 -117 57 C-113.86 57.78 -111.18 57.48 -108 57 C-103 56.31 -98.1 55.88 -93.05 55.71 C-67.26 54.83 -42 48.13 -21.05 32.52 C-19 31 -19 31 -15.62 29 C-12.17 26.37 -11 23.86 -9 20 C-8.46 19.38 -7.93 18.76 -7.38 18.12 C-5.58 15.36 -5.88 13.8 -6.19 10.56 C-6.37 5.51 -6.37 5.51 -4.68 3.17 C-3 1.81 -3 1.81 0 0 Z \",fill:\"#857295\",transform:\"translate(826,677)\"})),_path518||(_path518=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.44 1.25 3.44 1.25 7 3 C7.72 3.32 8.44 3.65 9.18 3.98 C9.91 4.32 10.63 4.65 11.38 5 C12.04 5.31 12.71 5.62 13.4 5.94 C15 7 15 7 16 10 C17.32 10.7 18.65 11.37 20 12 C20.5 12.99 20.5 12.99 21 14 C19.02 13.69 17.04 13.38 15.06 13.06 C13.41 12.8 13.41 12.8 11.72 12.54 C9 12 9 12 8 11 C6.02 11.66 4.04 12.32 2 13 C2 13.33 2 13.66 2 14 C1.16 14.06 0.31 14.12 -0.55 14.18 C-1.65 14.27 -2.75 14.35 -3.88 14.44 C-5.51 14.56 -5.51 14.56 -7.18 14.68 C-9.95 14.83 -9.95 14.83 -12 16 C-14.5 16.03 -16.99 15.93 -19.49 15.84 C-22.19 16.01 -23.63 16.78 -26 18 C-29.25 17.62 -29.25 17.62 -32 17 C-32.66 15.02 -33.32 13.04 -34 11 C-30.85 6.89 -27.79 6.25 -22.93 5.39 C-21 5.18 -21 5.18 -20 4 C-17.49 3.47 -14.97 3.04 -12.45 2.6 C-1.35 -0.11 -1.35 -0.11 0 0 Z \",fill:\"#38144A\",transform:\"translate(664,61)\"})),_path519||(_path519=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.97 1.54 0.97 1.54 0.93 3.11 C0.91 4.47 0.89 5.83 0.88 7.19 C0.86 7.86 0.84 8.53 0.82 9.23 C0.78 13.29 1.2 16.35 3 20 C3.66 20 4.32 20 5 20 C5.17 20.77 5.34 21.54 5.52 22.34 C5.76 23.34 6 24.34 6.25 25.38 C6.48 26.37 6.71 27.37 6.95 28.4 C7.75 31.11 7.75 31.11 9.98 32.23 C10.65 32.48 11.31 32.74 12 33 C12.66 33.66 13.32 34.32 14 35 C14.84 34.47 14.84 34.47 15.69 33.94 C18.64 32.74 20.04 32.83 23 34 C23.66 35.65 24.32 37.3 25 39 C14.44 39 3.88 39 -7 39 C-12.11 20.11 -12.11 20.11 -8.49 12.48 C-5.89 8.15 -3.22 3.9 0 0 Z \",fill:\"#311541\",transform:\"translate(290,1241)\"})),_path520||(_path520=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.45 2.98 2.91 4 3.38 C7 5 7 5 7.69 7.1 C7.84 8.04 7.84 8.04 8 9 C7.13 9.07 7.13 9.07 6.24 9.15 C1.55 9.6 -2.54 10.37 -7 12 C-7.66 12 -8.32 12 -9 12 C-10.63 13.46 -10.63 13.46 -12 15 C-12.99 14.67 -13.98 14.34 -15 14 C-17.96 20.74 -18.2 25.04 -16 32 C-15.4 33.91 -14.82 35.83 -14.25 37.75 C-13.97 38.63 -13.68 39.51 -13.39 40.42 C-12.92 43.55 -13.61 45.2 -15 48 C-18.47 48.5 -18.47 48.5 -22 49 C-22.03 50.42 -22.05 51.83 -22.06 53.25 C-22.07 54.04 -22.09 54.83 -22.1 55.64 C-22 57.91 -21.63 59.83 -21 62 C-24.96 58.96 -25.98 55.86 -26.89 51.13 C-27 49 -27 49 -25.62 46.44 C-25.09 45.96 -24.55 45.49 -24 45 C-23.34 45.33 -22.68 45.66 -22 46 C-18.48 43.45 -18.48 43.45 -16 40 C-18.64 40 -21.28 40 -24 40 C-26.71 35.23 -28.57 31.66 -28 26 C-25.38 26 -23.49 26.31 -21 27 C-20.95 25.23 -20.91 23.46 -20.88 21.69 C-20.85 20.7 -20.83 19.72 -20.8 18.7 C-20.79 15.78 -20.79 15.78 -23 13 C-22.78 10.5 -22.36 9.36 -20.58 7.59 C-16.81 5 -13.44 3.28 -9 2 C-8.32 1.63 -7.64 1.26 -6.94 0.88 C-4.53 -0.21 -2.62 -0.15 0 0 Z \",fill:\"#421F4F\",transform:\"translate(978,450)\"})),_path521||(_path521=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.35 1.64 15.24 0.06 22.57 -0.98 C26.41 -1.5 30.24 -2.02 34.07 -2.54 C34.95 -2.66 35.82 -2.77 36.73 -2.89 C42.84 -3.66 42.84 -3.66 45.07 -2.54 C45.07 -1.88 45.07 -1.22 45.07 -0.54 C44.22 -0.37 44.22 -0.37 43.35 -0.2 C40.74 0.31 38.12 0.82 35.51 1.34 C34.62 1.51 33.72 1.69 32.8 1.86 C28.98 2.62 25.31 3.39 21.6 4.59 C16.75 5.79 12.12 5.68 7.14 5.59 C6.17 5.58 5.2 5.57 4.2 5.56 C1.82 5.54 -0.55 5.5 -2.93 5.46 C-2.43 6.45 -2.43 6.45 -1.93 7.46 C-3.25 8.45 -4.57 9.44 -5.93 10.46 C-5.93 9.8 -5.93 9.14 -5.93 8.46 C-7.41 8.56 -7.41 8.56 -8.93 8.65 C-13.36 8.65 -16.85 7.21 -20.86 5.46 C-21.55 5.18 -22.23 4.89 -22.94 4.6 C-24.6 3.9 -26.27 3.18 -27.93 2.46 C-27.6 1.47 -27.27 0.48 -26.93 -0.54 C-32.85 -1.18 -36.34 0.38 -41.5 3.27 C-43.99 4.49 -46.19 5.04 -48.93 5.46 C-48.93 6.12 -48.93 6.78 -48.93 7.46 C-52.78 9.62 -55.48 10.85 -59.93 10.46 C-58.26 8.8 -56.59 7.13 -54.93 5.46 C-54.24 4.7 -54.24 4.7 -53.55 3.92 C-40.1 -8.19 -15.62 -4.36 0 0 Z \",fill:\"#331046\",transform:\"translate(191.926513671875,1094.53759765625)\"})),_path522||(_path522=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.85 0.01 1.71 0.01 2.59 0.02 C8.81 0.09 8.81 0.09 11.12 1.25 C10.9 6.86 9.51 9.59 5.79 13.77 C1.97 17.16 -2.25 17.92 -7.19 18.94 C-8.46 19.21 -9.74 19.48 -11.05 19.76 C-14.96 20.26 -18.03 20.05 -21.88 19.25 C-22.88 18.25 -22.88 18.25 -23 15.31 C-22.88 12.25 -22.88 12.25 -21.88 10.25 C-22.87 10.58 -23.86 10.91 -24.88 11.25 C-24.88 9.25 -24.88 9.25 -23.62 7.85 C-23.05 7.34 -22.47 6.83 -21.88 6.31 C-21.32 5.81 -20.76 5.3 -20.19 4.79 C-13.74 0.51 -7.6 -0.19 0 0 Z \",fill:\"#58385F\",transform:\"translate(640.875,339.75)\"})),_path523||(_path523=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95 1.36 5.94 2.62 8.93 3.89 C8.93 4.55 8.93 5.21 8.93 5.89 C9.84 6.16 10.74 6.42 11.68 6.7 C14.71 7.81 16.7 8.57 18.93 10.89 C18.84 12.03 18.84 12.03 18.74 13.2 C18.66 15.86 18.66 15.86 20.15 17.28 C24.87 21.29 29.81 24.29 35.3 27.14 C36.1 27.57 36.9 28 37.73 28.45 C42.4 30.9 46.69 32.53 51.9 33.41 C55.33 34.22 57.98 36 60.93 37.89 C60.6 38.88 60.27 39.87 59.93 40.89 C50.77 37.25 41.81 33.4 33.05 28.89 C26.93 25.74 20.74 23.15 14.24 20.88 C10.53 19.57 7.06 18.32 3.93 15.89 C3.38 13.55 3.49 11.54 3.56 9.14 C3.08 6.61 3.08 6.61 0.39 4.74 C-3.37 2.73 -6.82 1.61 -10.95 0.64 C-11.63 0.46 -12.32 0.29 -13.03 0.11 C-14.71 -0.31 -16.39 -0.71 -18.07 -1.11 C-18.07 -1.44 -18.07 -1.77 -18.07 -2.11 C-24.05 -3.39 -27.95 -3.29 -33.34 -0.32 C-35.11 0.83 -35.11 0.83 -36.5 2.39 C-38.43 4.23 -40.31 5.05 -42.76 6.08 C-43.57 6.42 -44.37 6.76 -45.21 7.12 C-45.82 7.37 -46.44 7.63 -47.07 7.89 C-47.07 7.23 -47.07 6.57 -47.07 5.89 C-46.41 5.56 -45.75 5.23 -45.07 4.89 C-43.94 2.87 -43.94 2.87 -43.07 0.89 C-42.41 0.89 -41.75 0.89 -41.07 0.89 C-40.82 0.27 -40.58 -0.35 -40.32 -0.99 C-38.86 -3.46 -37.69 -4.06 -35.07 -5.11 C-35.07 -5.44 -35.07 -5.77 -35.07 -6.11 C-22.34 -9.17 -11.39 -5.28 0 0 Z \",fill:\"#462454\",transform:\"translate(1068.0703125,647.1123046875)\"})),_path524||(_path524=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.78 2.15 11.19 7.85 16 14 C24.11 23.57 36.37 33.54 49 35 C49 35.66 49 36.32 49 37 C42.76 41.54 37.56 41.45 30 41 C30.33 40.01 30.66 39.02 31 38 C33.06 37.31 33.06 37.31 35 37 C33.7 36.38 33.7 36.38 32.38 35.75 C29.07 34.04 26.07 32.1 23 30 C22.34 29.67 21.68 29.34 21 29 C21 28.34 21 27.68 21 27 C20.3 26.81 19.6 26.61 18.88 26.41 C17.52 26.02 17.52 26.02 16.12 25.62 C14.77 25.24 14.77 25.24 13.38 24.85 C11 24 11 24 9 22 C9 20.68 9 19.36 9 18 C8.4 17.75 7.8 17.5 7.19 17.25 C5 16 5 16 3.69 14 C1.52 11.43 0.08 11.26 -3.19 10.75 C-4.09 10.6 -4.99 10.45 -5.92 10.3 C-6.61 10.2 -7.29 10.1 -8 10 C-8.66 8.02 -9.32 6.04 -10 4 C-7.36 4.66 -4.72 5.32 -2 6 C-1.86 5.2 -1.71 4.39 -1.56 3.56 C-1 1 -1 1 0 0 Z \",fill:\"#1F0E30\",transform:\"translate(934,601)\"})),_path525||(_path525=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.25 1.52 0.5 2.31 0.76 C6.49 2.27 9.35 3.73 12.25 7.25 C8.51 6.66 5.66 5.55 2.31 3.81 C-14.9 -4.01 -35.21 -0.07 -52.75 5.25 C-52.09 6.24 -51.43 7.23 -50.75 8.25 C-48.17 8.5 -48.17 8.5 -45.75 8.25 C-46.32 11.12 -46.61 12.11 -48.75 14.25 C-49.58 14.35 -50.4 14.46 -51.25 14.56 C-52.08 14.79 -52.9 15.02 -53.75 15.25 C-54.47 16.9 -55.13 18.56 -55.75 20.25 C-57.81 21.41 -57.81 21.41 -59.75 22.25 C-61.99 20.72 -64.21 19.18 -66.44 17.62 C-67.06 17.2 -67.69 16.77 -68.33 16.33 C-71.46 14.14 -74.04 12.06 -76.39 9.04 C-80.2 4.54 -84.05 3.98 -89.75 3.44 C-90.76 3.33 -91.77 3.22 -92.81 3.11 C-96.28 3.28 -97.86 4.41 -100.75 6.25 C-103.5 6.61 -105.96 6.39 -108.75 6.25 C-104.19 1.69 -96.88 1.03 -90.69 0.81 C-85.71 0.91 -82.17 1.97 -77.88 4.47 C-74.89 5.56 -72.89 4.83 -69.75 4.25 C-68.32 4.03 -66.89 3.81 -65.46 3.6 C-64.67 3.48 -63.89 3.37 -63.07 3.25 C-62.24 3.12 -61.41 3 -60.55 2.88 C-58.77 2.61 -56.98 2.34 -55.2 2.08 C-52.4 1.66 -49.61 1.25 -46.81 0.83 C-44.1 0.43 -41.39 0.03 -38.68 -0.38 C-37.84 -0.5 -37.01 -0.62 -36.15 -0.75 C-35.37 -0.86 -34.59 -0.98 -33.78 -1.1 C-32.76 -1.25 -32.76 -1.25 -31.71 -1.41 C-29.72 -1.73 -29.72 -1.73 -27.7 -2.27 C-18.41 -4.55 -8.89 -2.97 0 0 Z \",fill:\"#1B0A31\",transform:\"translate(740.75,47.75)\"})),_path526||(_path526=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.92 1.13 0.84 2.27 0.75 3.44 C0.74 12.06 3.46 20.81 5.9 29.03 C7.8 35.59 8.53 42.08 9 48.88 C9.08 49.78 9.16 50.68 9.24 51.62 C9.47 56.03 9.54 58.96 6.62 62.45 C5.33 63.71 5.33 63.71 4 65 C3.34 65.99 2.68 66.98 2 68 C0.68 67.34 -0.64 66.68 -2 66 C-3.65 67.65 -5.3 69.3 -7 71 C-6.73 70.5 -6.46 70.01 -6.19 69.5 C-2.79 62.35 -1.6 57.45 -2.25 49.62 C-2.37 47.78 -2.48 45.94 -2.59 44.09 C-2.69 42.63 -2.69 42.63 -2.79 41.13 C-3.17 35.47 -3.47 29.8 -3.75 24.12 C-3.82 23.03 -3.89 21.93 -3.96 20.8 C-4.26 14.58 -3.93 10.51 -1 5 C-0.31 2.22 -0.31 2.22 0 0 Z \",fill:\"#897795\",transform:\"translate(846,315)\"})),_path527||(_path527=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.42 1.9 5.26 4.52 7.49 7.64 C12.83 14.78 18.89 20.91 25.26 27.13 C27.66 29.48 29.95 31.87 32.12 34.45 C40.25 44.03 49.41 52.95 59.45 60.52 C61.8 62.61 63.14 64.68 64.62 67.45 C63.63 68.44 62.64 69.43 61.62 70.45 C59.64 69.46 57.66 68.47 55.62 67.45 C55.62 66.79 55.62 66.13 55.62 65.45 C54.63 65.12 53.64 64.79 52.62 64.45 C50.97 62.78 50.97 62.78 49.24 60.7 C45.66 56.49 42.06 52.61 37.74 49.14 C33.23 45.44 28.48 41.04 26.62 35.45 C25.96 35.45 25.3 35.45 24.62 35.45 C23.24 34.05 23.24 34.05 21.62 32.07 C17.95 27.75 14.01 23.8 9.95 19.84 C7.66 17.49 5.65 15.02 3.62 12.45 C2.63 11.44 1.63 10.44 0.62 9.45 C-0.46 8.27 -1.52 7.09 -2.57 5.89 C-3.1 5.29 -3.63 4.69 -4.18 4.07 C-5.38 2.45 -5.38 2.45 -5.38 0.45 C-2.38 -0.55 -2.38 -0.55 0 0 Z \",fill:\"#1B0E28\",transform:\"translate(714.3828125,192.55078125)\"})),_path528||(_path528=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C7.39 9.38 4.87 17.21 1.64 26.24 C0.16 30.57 -0.3 33.59 1 38 C2.57 40.81 4.49 42.98 7 45 C10.52 45.9 13.39 46 17 46 C15.78 51.91 14.39 56.61 10 61 C6.94 61.56 6.94 61.56 3 61 C-2.25 57.22 -6.47 52.35 -8 46 C-7.58 38.92 -4.82 32.42 -2 26 C-1.62 25.13 -1.24 24.26 -0.85 23.37 C0.09 21.24 1.04 19.12 2 17 C1.34 17 0.68 17 0 17 C-1.22 13.33 -0.88 10.66 -0.56 6.81 C-0.46 5.54 -0.36 4.27 -0.25 2.96 C-0.17 1.98 -0.09 1.01 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(700,1168)\"})),_path529||(_path529=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.21 3.06 0.42 5.13 -0.38 7.19 C-0.82 8.34 -1.26 9.48 -1.71 10.67 C-2.35 12.32 -2.35 12.32 -3 14 C-3.31 14.83 -3.63 15.66 -3.95 16.51 C-5.27 19.65 -6.83 22.62 -8.44 25.62 C-9.03 26.75 -9.63 27.88 -10.25 29.04 C-12.73 33.23 -14.19 34.62 -18.62 36.69 C-23.12 38.81 -26.37 41.85 -29.92 45.29 C-32 47 -32 47 -34.04 47.45 C-36.97 48.27 -37.89 50.13 -39.62 52.56 C-40.71 54.07 -41.82 55.56 -43 57 C-43.66 57 -44.32 57 -45 57 C-45.5 59.48 -45.5 59.48 -46 62 C-46.66 62 -47.32 62 -48 62 C-46.56 55.53 -43.9 49.39 -40 44 C-39.36 43.85 -38.73 43.7 -38.07 43.55 C-34.73 42.66 -33.47 39.83 -31.69 37.06 C-30.9 35.88 -30.11 34.69 -29.32 33.51 C-28.94 32.92 -28.55 32.33 -28.15 31.72 C-25.96 28.45 -23.62 25.29 -21.31 22.12 C-20.02 20.03 -19.54 18.37 -19 16 C-16.6 13.51 -15.43 13.02 -11.94 12.88 C-10.97 12.92 -10 12.96 -9 13 C-5.77 12.29 -5.77 12.29 -4.39 9.28 C-3.87 8.18 -3.35 7.07 -2.81 5.94 C-2.28 4.83 -1.75 3.73 -1.21 2.59 C-0.81 1.74 -0.41 0.88 0 0 Z \",fill:\"#452354\",transform:\"translate(415,531)\"})),_path530||(_path530=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 2.64 -0.66 5.28 -1 8 C1.97 9.65 4.94 11.3 8 13 C8 13.33 8 13.66 8 14 C0.38 13.12 0.38 13.12 -3 12 C-4.14 10.06 -4.96 8.07 -5.84 6.01 C-7.59 2.99 -9.45 1.49 -12.8 0.43 C-14.96 -0.12 -17.13 -0.6 -19.31 -1.06 C-20.79 -1.39 -22.26 -1.71 -23.74 -2.04 C-24.46 -2.19 -25.18 -2.35 -25.93 -2.51 C-27.79 -2.95 -29.63 -3.51 -31.46 -4.09 C-35.8 -5.21 -39.91 -5.38 -44.38 -5.5 C-50.09 -5.66 -55.28 -6.21 -60.83 -7.56 C-64.25 -8.25 -67.45 -8.23 -70.94 -8.19 C-72.23 -8.18 -73.51 -8.17 -74.84 -8.17 C-77.9 -8.22 -77.9 -8.22 -80 -7 C-82.37 -6.93 -84.75 -6.92 -87.12 -6.94 C-88.41 -6.95 -89.69 -6.96 -91.01 -6.96 C-92.49 -6.98 -92.49 -6.98 -94 -7 C-94 -7.99 -94 -8.98 -94 -10 C-94.66 -10.33 -95.32 -10.66 -96 -11 C-61.23 -16.41 -32.92 -11.18 0 0 Z \",fill:\"#857294\",transform:\"translate(1213,1048)\"})),_path531||(_path531=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.55 3.72 2.09 4.44 1.62 5.19 C-0.04 7.89 -0.04 7.89 -0.94 10.56 C-2 13 -2 13 -3.87 14.81 C-10.28 21.39 -12.45 29.36 -12.73 38.29 C-13.13 43.74 -14.35 48.96 -15.54 54.29 C-18.82 67.36 -18.82 67.36 -16 80 C-15.88 83.25 -15.88 83.25 -16 86 C-20.25 79.62 -21.24 73.53 -21 66 C-21.19 64.76 -21.37 63.52 -21.56 62.25 C-21.97 59.21 -21.76 57.85 -21 55 C-21.39 52.32 -21.39 52.32 -22 50 C-22.93 49.91 -22.93 49.91 -23.88 49.81 C-26 49 -26 49 -27.25 46.94 C-28.21 43.16 -28.13 39.9 -28 36 C-26.68 35.34 -25.36 34.68 -24 34 C-24.33 32.68 -24.66 31.36 -25 30 C-24.34 30 -23.68 30 -23 30 C-21.68 27.36 -20.36 24.72 -19 22 C-18.67 23.32 -18.34 24.64 -18 26 C-17.34 26 -16.68 26 -16 26 C-15.77 25.11 -15.55 24.23 -15.31 23.31 C-13.82 19.54 -11.96 17.73 -9 15 C-8.34 14.01 -7.68 13.02 -7 12 C-6.01 12 -5.02 12 -4 12 C-3.88 11.39 -3.76 10.77 -3.63 10.14 C-3.47 9.33 -3.3 8.52 -3.12 7.69 C-2.96 6.89 -2.8 6.09 -2.63 5.26 C-2 3 -2 3 0 0 Z \",fill:\"#351048\",transform:\"translate(589,805)\"})),_path532||(_path532=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.4 7.25 -1.09 13.99 -3 21 C-3.2 21.8 -3.41 22.6 -3.62 23.43 C-5.85 31.63 -9.46 39.3 -13 47 C-13.48 48.05 -13.96 49.1 -14.46 50.18 C-17.59 56.73 -17.59 56.73 -21 59 C-22.32 58.01 -23.64 57.02 -25 56 C-27.02 56.72 -27.02 56.72 -29 58 C-29.75 59.93 -29.75 59.93 -30 62 C-30.33 62.99 -30.66 63.98 -31 65 C-32.99 64.48 -34.97 63.96 -36.96 63.44 C-40.51 62.68 -43.5 63.24 -47 64 C-45.02 62.45 -43.26 61.11 -40.94 60.12 C-38.31 58.6 -37.39 56.64 -36 54 C-36.66 53.34 -37.32 52.68 -38 52 C-36.79 51.07 -36.79 51.07 -35.56 50.12 C-32.96 48.26 -32.96 48.26 -32 46 C-31.34 46 -30.68 46 -30 46 C-29.75 45.44 -29.5 44.89 -29.25 44.31 C-28 42 -28 42 -26.19 39.81 C-23.74 36.67 -21.98 33.41 -20.15 29.89 C-19 28 -19 28 -17 27 C-17.69 36.49 -17.69 36.49 -20.84 40.11 C-22.26 41.27 -23.7 42.4 -25.16 43.5 C-27.44 45.36 -28.31 47.15 -29 50 C-28.01 50 -27.02 50 -26 50 C-25.74 49.43 -25.48 48.87 -25.21 48.28 C-22.53 43.22 -18.86 38.42 -14.31 34.94 C-5.48 27.54 -2.38 10.74 0 0 Z \",fill:\"#311541\",transform:\"translate(375,1080)\"})),_path533||(_path533=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06 1.28 1.12 2.55 1.18 3.87 C1.27 5.54 1.35 7.21 1.44 8.88 C1.48 9.72 1.52 10.56 1.56 11.43 C1.6 12.23 1.64 13.04 1.68 13.87 C1.72 14.61 1.76 15.35 1.79 16.12 C1.9 18.09 1.9 18.09 3 20 C6.08 17.78 8.01 15.99 10.06 12.75 C10.7 11.84 11.34 10.93 12 10 C13.32 10 14.64 10 16 10 C16.33 9.01 16.66 8.02 17 7 C21.77 4.46 26.54 3 31.94 3 C35.36 4.12 36.73 5.25 39 8 C41.59 10.94 44.46 12.35 48 14 C48 15.32 48 16.64 48 18 C47.36 18.25 46.72 18.5 46.06 18.75 C43.81 19.82 43.81 19.82 43.25 22.12 C43.17 22.74 43.09 23.36 43 24 C41.35 24 39.7 24 38 24 C37.6 22.95 37.6 22.95 37.2 21.88 C36.84 20.97 36.49 20.06 36.12 19.12 C35.78 18.22 35.43 17.32 35.07 16.38 C34.11 13.88 34.11 13.88 32 12 C29.17 11.41 29.17 11.41 26 12 C25.03 12.85 24.06 13.69 23.06 14.56 C21.55 15.77 21.55 15.77 20 17 C17.67 16.67 15.33 16.34 13 16 C7.93 19.42 5.57 25.06 2.75 30.36 C0.96 33.06 0.02 33.99 -3 35 C-3.66 35 -4.32 35 -5 35 C-4.78 34.09 -4.57 33.19 -4.34 32.25 C-2.95 26.17 -1.71 20.49 -1.96 14.24 C-2.04 9.82 -1.63 5.37 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#351547\",transform:\"translate(477,527)\"})),_path534||(_path534=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.54 2.3 4.07 4.67 5.69 7.69 C6.12 8.5 6.56 9.3 7.01 10.14 C7.5 11.06 7.5 11.06 8 12 C8.66 12 9.32 12 10 12 C15.54 17.87 15.15 23.36 15 31 C14.44 30.48 13.89 29.97 13.31 29.44 C11.08 27.74 11.08 27.74 8.38 28.19 C5.85 28.86 5.85 28.86 4 31 C1.69 31.01 1.69 31.01 -1 30.69 C-1.89 30.59 -2.77 30.49 -3.69 30.39 C-6 30 -6 30 -8 29 C-7.34 27.68 -6.68 26.36 -6 25 C-6.58 25.15 -7.17 25.31 -7.77 25.46 C-17.88 27.89 -24.67 23.63 -33.31 18.92 C-35.19 17.9 -37.08 16.94 -39 16 C-35.23 14.74 -33.63 15.63 -30 17 C-30 17.66 -30 18.32 -30 19 C-29.15 19.1 -28.31 19.21 -27.44 19.31 C-24.7 19.86 -22.75 20.45 -20.25 21.56 C-17.29 23.13 -17.29 23.13 -15 23 C-14.67 22.01 -14.34 21.02 -14 20 C-10.78 16.9 -7.25 16.12 -3 15 C-2.67 14.67 -2.34 14.34 -2 14 C-2.02 12.93 -2.04 11.86 -2.06 10.75 C-2 7.16 -1.46 5.2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2B123D\",transform:\"translate(855,249)\"})),_path535||(_path535=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 3.31 3.34 5.62 3 8 C2.34 8 1.68 8 1 8 C-0.98 15.42 -0.98 15.42 -1 23 C-0.34 23.45 0.32 23.91 1 24.38 C3 26 3 26 3.37 27.85 C3.54 33.42 3.54 33.42 1.63 35.47 C1.09 35.98 0.55 36.48 0 37 C-0.88 38.45 -1.71 39.94 -2.5 41.44 C-4.12 44.51 -5.85 47.26 -8 50 C-9.22 49.79 -10.43 49.59 -11.69 49.38 C-16.55 48.77 -19.31 49.81 -23.31 52.62 C-24.15 53.31 -24.15 53.31 -25 54 C-23.67 50.41 -22.17 47.16 -20 44 C-19.34 44 -18.68 44 -18 44 C-17.73 43.15 -17.46 42.31 -17.19 41.44 C-13.7 31.35 -13.7 31.35 -11 30 C-10.19 28 -10.19 28 -9.56 25.56 C-9.18 24.22 -9.18 24.22 -8.79 22.85 C-8.4 21.44 -8.4 21.44 -8 20 C-7.49 18.14 -6.97 16.29 -6.44 14.44 C-6.21 13.61 -5.98 12.78 -5.75 11.93 C-5 10 -5 10 -3 9 C-3 6.36 -3 3.72 -3 1 C-2.67 1.66 -2.34 2.32 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(380,1092)\"})),_path536||(_path536=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31 0.98 2.63 1.96 3.94 2.94 C4.67 3.48 5.4 4.03 6.15 4.59 C8.96 6.73 8.96 6.73 9.43 9.77 C9.65 11.56 9.65 11.56 9.88 13.38 C11.13 22.47 13.17 30.68 17.09 38.99 C18 41 18 41 19.12 44.5 C19.73 47.15 19.73 47.15 22 48 C22.81 50.52 23.41 53.07 24.02 55.65 C24.76 58.14 24.76 58.14 26.89 58.94 C30.05 60.53 30.8 62.87 32.31 66 C32.84 67.07 33.38 68.14 33.93 69.25 C34.28 70.16 34.63 71.07 35 72 C34.67 72.66 34.34 73.32 34 74 C33.01 74 32.02 74 31 74 C31.31 74.74 31.62 75.49 31.94 76.25 C33.22 79.57 34.04 82.06 33.88 85.62 C33.92 86.41 33.96 87.19 34 88 C34.99 88.66 35.98 89.32 37 90 C37 90.66 37 91.32 37 92 C37.99 92.33 38.98 92.66 40 93 C40 93.99 40 94.98 40 96 C37.38 94.95 36.21 94.35 34.75 91.88 C34.5 91.26 34.25 90.64 34 90 C33.34 90 32.68 90 32 90 C26.14 78.99 21.59 67.96 17.69 56.12 C17.14 54.48 16.58 52.84 16.03 51.2 C14.34 46.14 12.67 41.07 11 36 C10.45 34.32 9.89 32.64 9.34 30.97 C7.78 26.23 6.23 21.49 4.69 16.75 C4.45 16.01 4.21 15.27 3.96 14.51 C3.28 12.44 2.62 10.37 1.95 8.3 C1.57 7.12 1.19 5.95 0.8 4.75 C0 2 0 2 0 0 Z \",fill:\"#2A1238\",transform:\"translate(868,582)\"})),_path537||(_path537=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.01 -0 2.02 -0 3.06 -0 C12.25 0.06 21.23 0.92 30.31 2.19 C30.31 2.85 30.31 3.51 30.31 4.19 C30.88 4.31 31.44 4.43 32.03 4.55 C32.76 4.72 33.49 4.89 34.25 5.06 C34.98 5.22 35.71 5.39 36.46 5.55 C38.31 6.19 38.31 6.19 39.31 8.19 C39.97 8.19 40.63 8.19 41.31 8.19 C41.31 8.85 41.31 9.51 41.31 10.19 C37.68 10.85 34.05 11.51 30.31 12.19 C29.14 16.17 28.06 20.1 27.31 24.19 C26.65 23.86 25.99 23.53 25.31 23.19 C24.69 21.12 24.69 21.12 24.31 19.19 C22 18.86 19.69 18.53 17.31 18.19 C17.31 17.53 17.31 16.87 17.31 16.19 C16.32 15.86 15.33 15.53 14.31 15.19 C12.95 13.54 11.62 11.87 10.31 10.19 C9.65 9.86 8.99 9.53 8.31 9.19 C8.31 8.53 8.31 7.87 8.31 7.19 C2.76 6.06 -2.49 6.15 -8.12 6.31 C-9.97 6.34 -11.83 6.27 -13.69 6.19 C-14.35 5.53 -15.01 4.87 -15.69 4.19 C-15.69 3.2 -15.69 2.21 -15.69 1.19 C-10.42 0.01 -5.38 -0 0 0 Z \",fill:\"#1D1521\",transform:\"translate(663.6875,255.8125)\"})),_path538||(_path538=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.61 1.69 0.61 1.69 1.23 3.42 C2.58 7.04 2.58 7.04 5.05 8.05 C6.17 8.18 6.17 8.18 7.31 8.31 C8.1 8.43 8.89 8.55 9.7 8.67 C10.46 8.78 11.22 8.89 12 9 C14.01 9.63 16.02 10.29 18 11 C18 11.66 18 12.32 18 13 C18.6 13.06 19.2 13.12 19.81 13.19 C22.91 14.34 23.64 16.07 25 19 C24.67 19.66 24.34 20.32 24 21 C23.01 20.01 22.02 19.02 21 18 C20.55 18.5 20.09 18.99 19.62 19.5 C18 21 18 21 16 21 C15.94 20.38 15.88 19.76 15.81 19.12 C15.54 18.42 15.28 17.72 15 17 C13.35 16.29 11.68 15.63 10 15 C6.97 13.41 3.95 11.78 0.94 10.14 C-2.36 8.86 -3.72 8.7 -7 10 C-8.77 11.71 -8.77 11.71 -10.12 13.88 C-11.92 16.51 -13.67 18.81 -16 21 C-20.44 17.85 -23.03 14.41 -25.88 9.88 C-26.29 9.24 -26.71 8.61 -27.13 7.96 C-28.16 6.35 -29.09 4.68 -30 3 C-29.67 2.34 -29.34 1.68 -29 1 C-19.55 -0.65 -9.57 -0.11 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(590,546)\"})),_path539||(_path539=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.79 2.2 3 4.01 4 6.69 C4.33 7.45 4.66 8.21 5 9 C5.99 9.33 6.98 9.66 8 10 C9.46 12.51 10.75 14.95 12 17.56 C12.34 18.25 12.69 18.95 13.04 19.66 C19.53 32.95 19.53 32.95 19 40 C19.66 40.33 20.32 40.66 21 41 C28.39 52.39 34.14 65.79 38.99 78.44 C40.35 81.87 41.83 85.25 43.31 88.62 C43.76 89.64 43.76 89.64 44.21 90.68 C45.77 94.21 47.33 97.74 48.9 101.27 C57.6 120.83 57.6 120.83 57 127 C56.01 127.49 56.01 127.49 55 128 C54.75 127.26 54.49 126.53 54.23 125.77 C53.89 124.79 53.54 123.82 53.19 122.81 C52.85 121.85 52.51 120.89 52.17 119.89 C51.08 116.98 51.08 116.98 49.43 114.4 C48.05 112.08 47.48 110.38 47 107.75 C46.67 106.51 46.34 105.27 46 104 C45.01 103.67 44.02 103.34 43 103 C42.88 102.3 42.75 101.6 42.62 100.88 C41.96 97.8 41.13 94.93 40 92 C39.01 91.5 39.01 91.5 38 91 C36.79 88.43 35.68 85.88 34.62 83.25 C34.31 82.48 34 81.71 33.68 80.92 C31.85 76.36 30.25 71.79 28.88 67.06 C27 60.66 24.61 54.37 20.49 49.05 C18.78 46.69 17.78 44.4 16.69 41.69 C16.26 40.63 15.83 39.58 15.39 38.49 C14.7 36.76 14.7 36.76 14 35 C13.5 33.74 12.99 32.49 12.48 31.23 C8.59 21.52 8.59 21.52 6.87 17.07 C5.38 13.23 3.86 9.61 1.75 6.06 C0 3 0 3 0 0 Z \",fill:\"#1E0D31\",transform:\"translate(1217,909)\"})),_path540||(_path540=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.44 2.5 1.44 4.38 3.81 C7.46 7.62 10.9 9.97 15.71 10.84 C17.23 10.99 18.75 11.12 20.28 11.22 C23.51 11.54 26.41 12.45 29.5 13.44 C29.99 17.4 29.99 17.4 30.5 21.44 C31.16 21.44 31.82 21.44 32.5 21.44 C32.99 24.9 32.99 24.9 33.5 28.44 C27.75 26.69 27.75 26.69 25.5 24.44 C26.16 24.44 26.82 24.44 27.5 24.44 C27.5 23.78 27.5 23.12 27.5 22.44 C24.6 22.41 21.71 22.39 18.81 22.38 C18 22.37 17.18 22.36 16.34 22.35 C12.26 22.33 8.48 22.41 4.5 23.44 C-0.35 17.65 -5 11.65 -7.5 4.44 C-6.5 1.44 -6.5 1.44 -4.75 0.12 C-2.5 -0.56 -2.5 -0.56 0 0 Z \",fill:\"#442254\",transform:\"translate(1195.5,802.5625)\"})),_path541||(_path541=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.87 1.88 6.39 4.72 8.38 8.5 C9.1 11.13 9.13 13.28 9.06 16 C9.37 17.34 9.71 18.67 10.06 20 C11.35 26.72 10.82 32.41 9.06 39 C8.92 40.33 8.92 40.33 8.78 41.69 C7.93 45.6 6.25 48.55 4.12 51.88 C3.76 52.47 3.4 53.06 3.03 53.67 C2.11 55.16 1.09 56.58 0.06 58 C-0.6 58 -1.26 58 -1.94 58 C-3.59 61.63 -5.24 65.26 -6.94 69 C-7.6 67.68 -8.26 66.36 -8.94 65 C-8.3 63.65 -7.64 62.32 -6.94 61 C-7.17 60.44 -7.4 59.89 -7.64 59.31 C-8.13 55.53 -5.74 52.99 -3.69 50 C-3.28 49.38 -2.87 48.77 -2.45 48.13 C-0.78 45.62 0.93 43.17 2.76 40.77 C6.21 36.08 7.74 30.75 8.06 25 C7.18 21.5 6.44 20.26 3.45 18.16 C2.42 17.66 1.38 17.15 0.31 16.62 C-0.71 16.1 -1.74 15.58 -2.8 15.04 C-6.38 13.85 -8.33 13.96 -11.94 15 C-14.29 16.94 -14.29 16.94 -15.94 19 C-16.75 17.31 -16.75 17.31 -16.94 15 C-14.88 12.69 -14.88 12.69 -11.94 10 C-10.9 8.8 -9.88 7.6 -8.88 6.38 C-3.43 0 -3.43 0 0 0 Z \",fill:\"#3B174B\",transform:\"translate(566.9375,755)\"})),_path542||(_path542=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.62 0.33 1.24 0.66 1.88 1 C3.91 2.14 3.91 2.14 6 2 C6.75 2.32 7.5 2.64 8.27 2.98 C12.03 4.39 15.59 4.34 19.57 4.46 C22 5 22 5 23.27 6.91 C23.63 7.94 23.63 7.94 24 9 C24.35 9.7 24.7 10.4 25.06 11.12 C32.42 25.84 23.37 49.27 18.81 63.94 C18.56 64.74 18.31 65.55 18.06 66.38 C17.44 68.27 16.73 70.14 16 72 C15.01 72.49 15.01 72.49 14 73 C15.1 67.75 16.37 62.61 17.9 57.47 C22.07 44.02 22.07 44.02 21.25 30.25 C19.75 27.56 18.91 27.15 16 26.31 C13.18 25.47 12.14 25.14 10 23 C10.66 23 11.32 23 12 23 C11.71 22.44 11.42 21.89 11.12 21.31 C10 19 10 19 9 16.44 C8.02 13.81 8.02 13.81 6 11 C6 10.34 6 9.68 6 9 C5.57 8.59 5.13 8.17 4.69 7.75 C2.47 5.45 1.34 2.88 0 0 Z \",fill:\"#442255\",transform:\"translate(414,1088)\"})),_path543||(_path543=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1.44 4.5 C-1.95 5 -2.47 5.49 -3 6 C-3.33 6.99 -3.66 7.98 -4 9 C-5.36 9.96 -5.36 9.96 -6.75 10.94 C-10.74 14.1 -11.89 18.21 -13.68 22.84 C-15.83 27.99 -18.9 32.39 -22 37 C-22.99 38.54 -23.99 40.08 -24.98 41.62 C-26.05 43.27 -27.12 44.92 -28.19 46.56 C-28.95 47.76 -28.95 47.76 -29.74 48.98 C-30.23 49.73 -30.72 50.48 -31.23 51.25 C-31.89 52.26 -31.89 52.26 -32.56 53.3 C-34.19 55.23 -35.68 56.03 -38 57 C-38 57.66 -38 58.32 -38 59 C-38.54 59.08 -39.07 59.16 -39.62 59.25 C-42.24 59.94 -42.24 59.94 -44.94 62.12 C-48 64 -48 64 -50.56 64 C-53.56 62.77 -55.65 61.22 -58 59 C-58 58.34 -58 57.68 -58 57 C-57.34 57 -56.68 57 -56 57 C-58.49 54.44 -60.95 52.04 -63.75 49.81 C-66 48 -66 48 -67 46 C-67.55 40.75 -65.94 37.14 -63.5 32.62 C-63.17 31.98 -62.83 31.34 -62.49 30.68 C-61.67 29.12 -60.84 27.56 -60 26 C-58.57 30.28 -60.35 32.48 -62.19 36.43 C-63.14 39.43 -62.97 41.03 -62 44 C-59.89 46.08 -59.89 46.08 -57 48 C-56.04 48.77 -56.04 48.77 -55.07 49.55 C-50.11 53.66 -50.11 53.66 -44 55 C-41.04 54.22 -39.39 53.38 -37.19 51.25 C-35.76 48.97 -35.76 48.97 -36 45.94 C-36 43 -36 43 -34.81 41.19 C-33 40 -33 40 -30.56 39.62 C-26.94 38.74 -26.14 37.03 -24 34 C-22.6 31.47 -21.36 28.86 -20.12 26.25 C-14.82 15.43 -9.35 7.82 0 0 Z \",fill:\"#411E4E\",transform:\"translate(383,657)\"})),_path544||(_path544=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.59 2.59 3.52 5.36 4.9 8.71 C5.92 11.03 5.92 11.03 7.48 12.96 C12.63 19.87 14.82 29.2 17.21 37.39 C18.14 40.53 19.18 43.36 20.65 46.29 C22 49 22 49 22 52 C23.48 52.5 23.48 52.5 25 53 C25.95 55 25.95 55 26.69 57.44 C26.94 58.24 27.19 59.04 27.45 59.87 C28 62 28 62 28 64 C28.46 64.44 28.93 64.89 29.41 65.35 C31.3 67.31 31.76 68.83 32.5 71.44 C33.57 74.9 34.78 77.13 37 80 C38.12 82.63 39.05 85.3 40 88 C40.66 86.68 41.32 85.36 42 84 C42.66 85.98 43.32 87.96 44 90 C43.01 90 42.02 90 41 90 C41.33 90.99 41.66 91.98 42 93 C41.67 93.33 41.34 93.66 41 94 C41.99 94.99 42.98 95.98 44 97 C43.67 97.66 43.34 98.32 43 99 C37.15 96.5 35.76 90.86 33.47 85.3 C30.26 77.58 26.9 71.18 21.73 64.53 C17.94 59 16.47 52.67 17 46 C16.34 46 15.68 46 15 46 C0 10.91 0 10.91 0 0 Z \",fill:\"#0A113B\",transform:\"translate(1233,948)\"})),_path545||(_path545=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.28 0.62 0.57 1.24 0.86 1.88 C1.94 4.16 1.94 4.16 4.19 6 C5.08 6.99 5.08 6.99 6 8 C5.7 9.85 5.7 9.85 5 12 C4.66 13.08 4.66 13.08 4.32 14.18 C3.94 15.3 3.94 15.3 3.56 16.44 C3.32 17.18 3.07 17.92 2.82 18.68 C2.25 20.28 1.63 21.86 0.95 23.41 C-0.12 26.32 -0.52 28.92 -0.81 32 C-0.98 33.52 -0.98 33.52 -1.14 35.06 C-0.97 38.57 0.18 40.05 2 43 C6.52 63.95 6.52 63.95 3 71 C2.34 71 1.68 71 1 71 C0.04 68.4 -0.91 65.8 -1.85 63.2 C-2.59 61.14 -3.34 59.09 -4.12 57.05 C-10.93 38.36 -7.72 17.94 0 0 Z \",fill:\"#2D1735\",transform:\"translate(204,832)\"})),_path546||(_path546=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.74 2.46 2.49 1.93 3.25 1.38 C6 0 6 0 8.11 0.64 C10 2 10 2 10.69 4 C10.79 4.8 10.89 5.61 11 6.44 C11.63 10.41 12.62 13.83 14.12 17.56 C16.77 24.55 17.05 30.14 14 37 C13.67 39.63 13.67 39.63 14 42 C14.66 42.66 15.32 43.32 16 44 C16.4 46.32 16.74 48.66 17 51 C15.51 50.5 15.51 50.5 14 50 C14 49.34 14 48.68 14 48 C13.01 47.67 12.02 47.34 11 47 C9.97 45 9.97 45 9.06 42.44 C7.85 39.17 6.58 36.07 4.94 33 C-0.23 22.8 -2.23 11.27 0 0 Z \",fill:\"#5E3E64\",transform:\"translate(575,310)\"})),_path547||(_path547=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.72 -0.61 9.72 -0.61 14 1.44 C17.51 5.93 18.64 11.09 19.69 16.62 C21.33 20.84 23.61 22.46 27.04 25.27 C32.57 30.14 33.66 36.18 35.21 43.09 C35.93 45.75 36.8 47.7 38.19 50.06 C41.84 56.92 40.43 64.24 38.44 71.44 C35.29 80.75 30.76 90.77 22 96 C17.54 97.72 13.76 98.23 9 98 C8.67 97.01 8.34 96.02 8 95 C4.25 93.38 1.06 92.58 -3 93 C-5.74 94.5 -5.74 94.5 -8.31 96.5 C-9.64 97.47 -9.64 97.47 -10.99 98.47 C-11.65 98.97 -12.32 99.48 -13 100 C-13.66 99.67 -14.32 99.34 -15 99 C-10.17 93.63 -5.3 88.88 2.07 87.66 C6.87 87.44 9.84 88.88 14 91 C17.53 91.65 19.77 91.65 22.98 89.96 C31.79 83.34 35.93 71.48 37.44 60.94 C36.88 55.96 34.86 52.58 32.52 48.2 C31.01 45.02 30.14 42.11 29.38 38.69 C28.24 33.69 27.09 30.12 24 26 C22.23 24.91 22.23 24.91 20.31 24 C19.22 23.34 18.13 22.68 17 22 C16.19 18.69 16.19 18.69 16 15 C14.21 7.85 14.21 7.85 10 2 C7.57 1.54 7.57 1.54 4.88 1.38 C3.96 1.3 3.05 1.23 2.12 1.15 C1.07 1.07 1.07 1.07 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#705376\",transform:\"translate(1132,1044)\"})),_path548||(_path548=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.71 0.69 6.76 1.26 9.5 4 C9.9 8.24 9.86 11.93 8.5 16 C9.49 16.33 10.48 16.66 11.5 17 C11.17 18.32 10.84 19.64 10.5 21 C11.82 21.33 13.14 21.66 14.5 22 C14.17 20.68 13.84 19.36 13.5 18 C15.15 18.33 16.8 18.66 18.5 19 C14.93 25.29 14.93 25.29 12.5 27 C9.31 27.19 9.31 27.19 6.5 27 C8.25 27.79 8.25 27.79 10.5 28 C13.11 26.74 13.11 26.74 15.5 25 C16.49 24.34 17.48 23.68 18.5 23 C17.3 25.49 16.05 27.68 14.5 30 C10.23 30.75 7.9 30.8 4.11 28.64 C-0.39 25.27 -3.68 21.91 -6.5 17 C-7.26 16.01 -8.03 15.02 -8.81 14 C-10.5 11 -10.5 11 -10.56 7.94 C-8.57 2.43 -6 -0.49 0 0 Z \",fill:\"#472F6A\",transform:\"translate(855.5,122)\"})),_path549||(_path549=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.56 1.94 0.56 4 2 C4.75 5.62 4.75 5.62 5 9 C8.09 10.03 9.97 10.01 13.19 9.88 C18.59 9.84 22.17 10.54 27 13 C31 17.1 31 17.1 31 20 C29.74 20.1 28.48 20.21 27.19 20.31 C23.5 20.7 20.17 21.48 16.62 22.56 C11.01 24.2 5.81 24.3 0 24 C0 23.34 0 22.68 0 22 C-0.99 22 -1.98 22 -3 22 C-5.91 15.2 -7.66 10.31 -6 3 C-5.67 3.66 -5.34 4.32 -5 5 C-4.34 5 -3.68 5 -3 5 C-2.69 4.36 -2.38 3.72 -2.06 3.06 C-1 1 -1 1 0 0 Z \",fill:\"#634369\",transform:\"translate(549,491)\"})),_path550||(_path550=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56 0.56 4.56 0.56 6 2 C7.73 10.34 8.8 17.11 5 25 C4.66 27.33 4.33 29.67 4 32 C1.15 34.85 -0.9 34.3 -4.88 34.31 C-6.11 34.33 -7.34 34.35 -8.62 34.36 C-12.16 33.98 -13.58 33.57 -16 31 C-16.56 27.62 -16.56 27.62 -16 24 C-13.9 21.37 -11.64 19.46 -8.92 17.49 C-4.55 14.22 -4.55 14.22 -2.34 9.4 C-2.09 6.72 -2.09 6.72 -2.13 4.14 C-2 2 -2 2 0 0 Z \",fill:\"#846A89\",transform:\"translate(570,215)\"})),_path551||(_path551=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.32 2.66 2.64 3 4 C3.84 4.06 3.84 4.06 4.69 4.12 C8.22 5.46 10.44 7.61 12 11 C12.03 16.59 9.35 21.63 6.98 26.57 C5.89 29.28 5.37 31.88 4.81 34.75 C3.31 41.37 0.02 45.79 -4.04 51.09 C-5.93 53.9 -6.65 55.68 -7 59 C-5.02 60.65 -3.04 62.3 -1 64 C-1.33 65.32 -1.66 66.64 -2 68 C-5 68 -5 68 -7 67 C-7.1 67.6 -7.21 68.2 -7.31 68.81 C-8.12 71.39 -8.84 72.38 -11 74 C-13.38 74.94 -13.38 74.94 -16 75 C-19.04 73.2 -20.65 72 -21.83 68.62 C-22.05 65.2 -21.18 64.22 -19 61.62 C-18.04 60.46 -18.04 60.46 -17.05 59.28 C-14.62 56.58 -12.12 54 -9.48 51.51 C-7.77 49.86 -7.77 49.86 -6 47 C-5.34 47 -4.68 47 -4 47 C-0.92 39.34 1.85 32.21 3 24 C3.52 23.15 4.03 22.31 4.56 21.44 C6.37 18.37 6.46 16.5 6 13 C4.71 11.21 4.71 11.21 3 10 C0.31 7.31 -0.06 4.62 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#411E4F\",transform:\"translate(288,1022)\"})),_path552||(_path552=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.27 3.48 C4.68 4.56 5.1 5.65 5.52 6.77 C5.99 7.97 6.45 9.17 6.93 10.41 C7.41 11.69 7.89 12.97 8.38 14.25 C9.08 16.08 9.08 16.08 9.8 17.95 C11.66 22.81 13.51 27.67 15.32 32.55 C17.57 38.56 19.93 44.16 23.19 49.69 C23.7 50.58 23.7 50.58 24.22 51.48 C25.66 53.93 26.99 55.99 29 58 C29 58.99 29 59.98 29 61 C29.66 61 30.32 61 31 61 C31.29 61.56 31.58 62.11 31.88 62.69 C36.92 72.26 36.92 72.26 44.49 79.75 C47.48 82.44 47.94 84.01 48.77 87.9 C49.02 89.04 49.27 90.18 49.52 91.35 C49.76 92.53 50 93.72 50.25 94.94 C50.51 96.12 50.76 97.3 51.02 98.51 C52.06 103.33 53.04 108.16 54 113 C49.2 111.4 47.36 107.32 45 103 C44.53 101.11 44.05 99.21 43.69 97.29 C42.41 93.03 39.98 89.28 37.75 85.44 C36.39 82.76 35.49 80.53 34.63 77.69 C32.96 72.43 30.24 68.08 27.31 63.44 C19.23 50.23 12.84 36.96 7.12 22.56 C6.65 21.36 6.17 20.17 5.68 18.93 C3.24 12.66 1.23 6.62 0 0 Z \",fill:\"#38154A\",transform:\"translate(400,932)\"})),_path553||(_path553=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 3.41 4.77 6.35 5.1 11.17 C4.87 17.57 3.38 23.78 2 30 C1.86 30.67 1.72 31.34 1.57 32.03 C-1.2 45.16 -4.9 60.49 -16 69 C-16.74 69.64 -17.49 70.28 -18.25 70.95 C-21.42 73.31 -24.73 74.99 -28.31 76.62 C-28.94 76.92 -29.56 77.22 -30.21 77.53 C-34.72 79.62 -39.14 80.91 -44 82 C-44 81.34 -44 80.68 -44 80 C-44.66 79.67 -45.32 79.34 -46 79 C-45.25 78.78 -44.5 78.56 -43.73 78.34 C-30.14 74.13 -22.93 68.89 -15 57 C-14.02 55.58 -14.02 55.58 -13.02 54.13 C-4.26 40.99 0.46 24.24 -2.5 8.31 C-2.75 7.17 -2.75 7.17 -3 6 C-3 4.68 -3 3.36 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z M-2 26 C-1 29 -1 29 -1 29 Z \",fill:\"#2F153C\",transform:\"translate(281,1012)\"})),_path554||(_path554=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.14 3.92 -4.71 7.07 -7.7 10.35 C-10.64 14.07 -10.36 18.48 -10 23 C-9.12 26.15 -9.12 26.15 -8 29 C-7.65 30.66 -7.32 32.33 -7 34 C-6.36 36.67 -5.68 39.34 -5 42 C-5.99 42.5 -5.99 42.5 -7 43 C-9.03 42.07 -11.04 41.07 -13 40 C-13 39.34 -13 38.68 -13 38 C-13.72 37.73 -14.44 37.46 -15.19 37.19 C-18.32 35.87 -21.57 34.43 -24 32 C-24.39 30.49 -24.74 28.97 -25.06 27.44 C-25.24 26.61 -25.42 25.78 -25.6 24.93 C-25.8 23.98 -25.8 23.98 -26 23 C-27.32 23 -28.64 23 -30 23 C-30.33 22.01 -30.66 21.02 -31 20 C-29.61 19.88 -29.61 19.88 -28.19 19.75 C-24.96 19.28 -24.96 19.28 -23.12 17.12 C-21.77 14.96 -21.77 14.96 -22 12 C-21.01 11.67 -20.02 11.34 -19 11 C-19 11.66 -19 12.32 -19 13 C-18.01 13.33 -17.02 13.66 -16 14 C-15.77 13.4 -15.54 12.79 -15.3 12.17 C-12.83 6.12 -10.48 3.15 -4.88 -0.31 C-3 -1 -3 -1 0 0 Z \",fill:\"#090F36\",transform:\"translate(633,837)\"})),_path555||(_path555=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.67 4.64 3.34 7.28 3 10 C2.01 10.33 1.02 10.66 0 11 C0.33 11.99 0.66 12.98 1 14 C1.66 13.34 2.32 12.68 3 12 C2.67 13.32 2.34 14.64 2 16 C1.01 16 0.02 16 -1 16 C-0.67 16.99 -0.34 17.98 0 19 C0.86 28.02 -1.36 34.99 -4.6 43.28 C-6.84 49.37 -7.15 53.65 -6 60 C-5.66 65.74 -5.73 70.61 -8 76 C-8.66 76 -9.32 76 -10 76 C-10.05 68.97 -10.09 61.95 -10.11 54.92 C-10.12 52.54 -10.13 50.16 -10.15 47.77 C-10.18 44.32 -10.19 40.87 -10.2 37.43 C-10.21 35.85 -10.21 35.85 -10.23 34.25 C-10.23 27.62 -9.58 21.33 -8.43 14.8 C-7.9 11.81 -7.9 11.81 -8 8 C-7.34 7.67 -6.68 7.34 -6 7 C-6 6.34 -6 5.68 -6 5 C-6.66 4.67 -7.32 4.34 -8 4 C-6.02 3.01 -4.04 2.02 -2 1 C-1.67 1.66 -1.34 2.32 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#1E0D31\",transform:\"translate(870,455)\"})),_path556||(_path556=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.94 0.9 2.88 1.79 2.82 2.72 C2.52 11.02 3.37 17.72 6.22 25.54 C7.66 29.52 8.26 32.77 8 37 C8.89 37.21 9.77 37.41 10.69 37.62 C15.92 39.8 18.03 42.79 20.23 47.82 C22.35 53.61 23.64 57.98 22 64 C19.36 64.33 16.72 64.66 14 65 C14.33 62.03 14.66 59.06 15 56 C14.5 56.5 14.5 56.5 14 57 C13.67 57 13.34 57 13 57 C13 55.02 13 53.04 13 51 C11.68 50.67 10.36 50.34 9 50 C8.83 50.64 8.66 51.28 8.48 51.93 C8.24 52.76 8 53.59 7.75 54.44 C7.52 55.26 7.29 56.08 7.05 56.93 C6 59 6 59 4.08 59.91 C2 60 2 60 -1 58 C-0.73 57.34 -0.46 56.68 -0.19 56 C0.2 55.01 0.6 54.02 1 53 C1.58 51.89 2.15 50.77 2.75 49.62 C5.84 41.33 2.34 31.31 0.31 23.06 C-1.48 15.24 -0.85 7.9 0 0 Z \",fill:\"#53315A\",transform:\"translate(859,324)\"})),_path557||(_path557=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.31 1.94 0.31 4 1 C4.33 1.99 4.66 2.98 5 4 C5.66 4 6.32 4 7 4 C8.62 5.9 8.62 5.9 10.44 8.38 C12.57 11.27 13.97 12.98 17 15 C17.33 13.68 17.66 12.36 18 11 C19.61 13.39 21.21 15.79 22.81 18.19 C23.49 19.2 23.49 19.2 24.18 20.23 C25.46 22.15 26.73 24.07 28 26 C28.62 26.94 29.25 27.89 29.89 28.86 C30.25 29.57 30.62 30.27 31 31 C30.67 31.66 30.34 32.32 30 33 C28.68 32.67 27.36 32.34 26 32 C25.34 33.98 24.68 35.96 24 38 C22.51 37.5 22.51 37.5 21 37 C21 36.34 21 35.68 21 35 C20.44 34.73 19.89 34.46 19.31 34.19 C18.17 33.6 18.17 33.6 17 33 C16.22 32.63 15.43 32.26 14.62 31.88 C6.84 26.31 0.75 15.28 -1 6 C-0.62 2.56 -0.62 2.56 0 0 Z \",fill:\"#241038\",transform:\"translate(908,570)\"})),_path558||(_path558=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.49 0.97 9.53 2.77 14.38 5.56 C19.44 8.41 23.12 9.54 28.86 9.79 C34.38 10.33 37.4 14.41 40.75 18.38 C44.34 22.59 48.03 25.13 52.9 27.71 C55 29 55 29 57 32 C52.95 30.77 49.56 29.3 46 27 C46.49 28.49 46.49 28.49 47 30 C46.67 30.66 46.34 31.32 46 32 C42.62 31.31 42.62 31.31 39 30 C37.56 27.38 37.56 27.38 37 25 C38.32 24.67 39.64 24.34 41 24 C37.87 23.15 35.86 23.02 32.62 23.56 C28.49 24.06 25.86 23.54 22 22 C21.67 21.01 21.34 20.02 21 19 C19.14 18.68 19.14 18.68 16.94 18.62 C13.17 17.95 12.16 17.21 9.77 14.12 C8.35 11.85 7.1 9.53 5.82 7.16 C4.14 4.24 2.5 2.24 0 0 Z \",fill:\"#462454\",transform:\"translate(1021,685)\"})),_path559||(_path559=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.73 0.89 10.61 2.49 16 8 C17.22 9.07 18.44 10.14 19.68 11.19 C23.92 14.89 27.96 18.77 31.94 22.75 C32.63 23.45 33.33 24.14 34.04 24.86 C40.22 31.1 45.71 37.7 51.05 44.68 C52.97 47.18 52.97 47.18 56 49 C56.45 49.76 56.91 50.53 57.38 51.31 C58.9 54.1 58.9 54.1 61.31 56.25 C63.63 58.62 65.13 60.67 66.88 63.44 C69.72 67.86 72.87 70.78 77 74 C76.01 74 75.02 74 74 74 C72.59 74.18 72.59 74.18 71.15 74.37 C67.43 73.93 66.29 72.73 63.97 69.89 C63.52 69.3 63.08 68.72 62.62 68.12 C62.15 67.53 61.68 66.94 61.19 66.33 C59.78 64.57 58.39 62.78 57 61 C55.61 59.27 54.21 57.54 52.81 55.81 C51.54 54.21 50.27 52.61 49 51 C41.99 42.13 34.64 33.68 27.05 25.31 C25.51 23.57 24.05 21.77 22.62 19.94 C17.8 14.54 11.92 10.21 6.16 5.85 C5.44 5.24 4.73 4.63 4 4 C4 3.34 4 2.68 4 2 C2.68 1.67 1.36 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#31193A\",transform:\"translate(640,119)\"})),_path560||(_path560=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C24.98 0.99 24.98 0.99 35 2 C33.47 6.19 30.81 7.76 27.14 10.15 C26.56 10.53 25.98 10.92 25.39 11.31 C23.53 12.53 21.67 13.73 19.81 14.94 C17.97 16.14 16.14 17.34 14.3 18.55 C13.12 19.32 11.94 20.09 10.75 20.86 C7.76 22.82 4.82 24.82 1.95 26.95 C-0.72 28.81 -2.84 29.91 -5.94 30.81 C-6.71 31.05 -7.48 31.28 -8.28 31.52 C-8.85 31.68 -9.41 31.84 -10 32 C-10 31.34 -10 30.68 -10 30 C-10.99 29.67 -11.98 29.34 -13 29 C-11.02 28.67 -9.04 28.34 -7 28 C-6.93 27.41 -6.86 26.82 -6.79 26.22 C-5.69 23.14 -4.02 22.28 -1.31 20.5 C-0.41 19.9 0.48 19.3 1.41 18.68 C2.94 17.69 4.46 16.71 6 15.73 C7.36 14.86 8.68 13.94 10 13 C10 12.34 10 11.68 10 11 C8.28 9.64 6.47 8.5 4.63 7.32 C3 6 3 6 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5D3D64\",transform:\"translate(596,514)\"})),_path561||(_path561=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.63 2.8 1.01 5.29 1.25 8.12 C1.33 8.88 1.4 9.63 1.48 10.41 C1.67 12.27 1.84 14.14 2 16 C-7.04 19.78 -13.85 18.92 -23 16 C-23.33 16.66 -23.66 17.32 -24 18 C-26.07 15.08 -27.16 13.05 -26.6 9.45 C-24.6 2.6 -24.6 2.6 -22 0 C-19.09 -0.71 -16.1 -0.93 -13.12 -1.25 C-12.31 -1.35 -11.49 -1.46 -10.65 -1.56 C-9.86 -1.65 -9.07 -1.74 -8.26 -1.83 C-7.54 -1.91 -6.82 -1.99 -6.07 -2.08 C-3.52 -1.98 -2.1 -1.46 0 0 Z \",fill:\"#6C5C4E\",transform:\"translate(945,347)\"})),_path562||(_path562=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.79 0.54 5.55 2.12 8 5 C8 5.66 8 6.32 8 7 C8.64 7.27 9.28 7.54 9.94 7.81 C12 9 12 9 13 12 C13.58 12.27 14.15 12.54 14.75 12.81 C17.38 14.2 18.72 16.02 20.55 18.32 C22.08 20.1 23.71 21.55 25.5 23.06 C29.39 26.37 32.97 29.93 36.56 33.56 C44.69 42.38 44.69 42.38 55 48 C54.5 48.99 54.5 48.99 54 50 C53.43 49.83 52.86 49.66 52.28 49.48 C49.66 48.7 47.05 47.91 44.44 47.12 C43.54 46.86 42.65 46.59 41.72 46.31 C40.84 46.04 39.97 45.78 39.06 45.51 C37.77 45.12 37.77 45.12 36.45 44.72 C34.92 44.27 33.38 43.84 31.83 43.46 C30.2 43.05 28.59 42.53 27 42 C25.75 39.19 25.75 39.19 25 36 C24.01 34.33 23.01 32.66 22 31 C22 30.34 22 29.68 22 29 C21.34 28.67 20.68 28.34 20 28 C19.3 26.97 18.6 25.94 17.88 24.88 C15.32 21.17 12.28 18.51 8.86 15.62 C4.74 12.03 2.17 7.99 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#755A7C\",transform:\"translate(749,240)\"})),_path563||(_path563=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.22 14.78 0.22 14.78 -2 21 C2.14 18.93 3.3 14.35 4.69 10.19 C5.13 8.79 5.57 7.4 6 6 C7.02 9.13 6.98 10.89 5.89 13.98 C5.63 14.75 5.37 15.51 5.11 16.3 C4.82 17.11 4.54 17.92 4.25 18.75 C1.71 26.32 -0.06 33.69 -1.26 41.58 C-2.24 46.12 -3.7 49.7 -7 53 C-8.32 52.67 -9.64 52.34 -11 52 C-11.99 54.64 -12.98 57.28 -14 60 C-14.96 56.16 -14.92 54.68 -14 51 C-14.66 51 -15.32 51 -16 51 C-16.05 49.25 -16.09 47.5 -16.12 45.75 C-16.16 44.29 -16.16 44.29 -16.2 42.8 C-16 39.98 -15.45 38.39 -14 36 C-13.67 36.99 -13.34 37.98 -13 39 C-11.51 32.07 -11.51 32.07 -10 25 C-9.01 25.33 -8.02 25.66 -7 26 C-6.91 24.17 -6.91 24.17 -6.81 22.31 C-6.23 16.8 -4.25 12.02 -2.16 6.92 C-1.24 4.6 -0.52 2.43 0 0 Z \",fill:\"#401D4F\",transform:\"translate(446,522)\"})),_path564||(_path564=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.67 13.85 -12 27.79 -22 37 C-22.99 37.33 -23.98 37.66 -25 38 C-25.69 39.32 -26.35 40.66 -27 42 C-35.7 51.12 -46.21 55.99 -58.88 56.31 C-62.51 56.19 -65.62 55.39 -69 54 C-69 53.67 -69 53.34 -69 53 C-68.2 52.99 -67.4 52.97 -66.58 52.96 C-58.09 52.59 -51.59 50.75 -44 47 C-42.8 46.46 -42.8 46.46 -41.57 45.91 C-34.9 42.66 -30.63 37.68 -26 32 C-25.42 31.29 -24.83 30.58 -24.23 29.84 C-20.59 25.28 -17.17 20.54 -13.75 15.81 C-13.11 14.94 -13.11 14.94 -12.46 14.05 C-9.92 10.5 -7.94 6.92 -6 3 C-2.7 0 -2.7 0 0 0 Z \",fill:\"#281231\",transform:\"translate(430,1167)\"})),_path565||(_path565=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.75 5.02 13.29 10.86 15.38 20.06 C15.58 21.36 15.79 22.66 16 24 C15.01 23.67 14.02 23.34 13 23 C12.46 23.76 11.93 24.53 11.38 25.31 C8.8 28.23 6.54 29.47 3 31 C3.28 32.94 3.28 32.94 4 35 C4.99 35.66 5.98 36.32 7 37 C7 37.99 7 38.98 7 40 C1.06 40.5 1.06 40.5 -5 41 C-5.33 39.02 -5.66 37.04 -6 35 C-6.66 35 -7.32 35 -8 35 C-8 34.34 -8 33.68 -8 33 C-8.87 32.75 -9.73 32.5 -10.62 32.25 C-18.83 29.21 -23.4 23.52 -29 17 C-28.67 16.34 -28.34 15.68 -28 15 C-27.36 15.69 -27.36 15.69 -26.71 16.39 C-19.93 23.56 -19.93 23.56 -10.69 26.12 C-4.47 24.23 0.63 20.58 6 17 C6.81 12.75 5.8 10.34 3.56 6.81 C3.11 6.16 2.66 5.51 2.19 4.83 C1 3 1 3 0 0 Z \",fill:\"#472554\",transform:\"translate(845,160)\"})),_path566||(_path566=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.03 0.51 4.04 1.13 6.04 1.75 C6.16 2.68 6.28 3.61 6.41 4.56 C6.85 7.89 6.85 7.89 9.04 10.75 C11.43 14.89 12.87 17.94 12.04 22.75 C9.94 25.24 8.33 26.49 5.1 27.13 C1.67 27.33 -0.48 27.01 -3.53 25.38 C-13.16 15.01 -13.16 15.01 -13.96 8.75 C-12.7 6.22 -11.32 5.29 -8.96 3.75 C-8.28 3.59 -7.6 3.42 -6.9 3.25 C-4.82 2.93 -4.82 2.93 -3.71 1.06 C-1.96 -0.25 -1.96 -0.25 0 0 Z \",fill:\"#39154B\",transform:\"translate(220.96484375,1233.25)\"})),_path567||(_path567=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.58 5.78 3.76 10.61 1.19 15.94 C-3.66 26.36 -5.4 38.13 -6.87 49.44 C-7.57 54.4 -8.87 58.42 -11 63 C-11.87 65.33 -12.73 67.66 -13.56 70 C-13.98 71.15 -14.39 72.31 -14.82 73.5 C-15.99 76.97 -17.01 80.47 -18 84 C-18.65 86 -19.32 88 -20 90 C-20.52 91.56 -21.04 93.12 -21.56 94.69 C-22.38 97.12 -23.19 99.56 -24 102 C-24.66 102 -25.32 102 -26 102 C-25.54 93.53 -23.46 85.78 -21.11 77.69 C-19.95 73.7 -18.82 69.7 -17.7 65.7 C-17.47 64.88 -17.24 64.07 -17 63.23 C-14.77 55.28 -12.77 47.27 -10.81 39.25 C-7.58 26.05 -3.95 13 0 0 Z \",fill:\"#1F0D2A\",transform:\"translate(470,239)\"})),_path568||(_path568=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.86 3.72 0.93 8.05 0 12 C-2.5 15.06 -2.5 15.06 -5 17 C-5.33 17.33 -5.66 17.66 -6 18 C-8 18.04 -10 18.04 -12 18 C-11.67 19.65 -11.34 21.3 -11 23 C-12.26 23.19 -13.52 23.37 -14.81 23.56 C-15.52 23.67 -16.23 23.77 -16.96 23.88 C-19 24 -19 24 -22 23 C-23.33 22.7 -24.67 22.41 -26 22.12 C-28.29 21.54 -29.96 21.02 -32 19.81 C-33.66 16.81 -33.35 14.35 -33 11 C-31.81 8.06 -31.81 8.06 -30 6 C-27.31 5.69 -27.31 5.69 -25 6 C-25.66 8.97 -26.32 11.94 -27 15 C-22.59 16.03 -20.07 16.04 -16 14 C-17.49 9.05 -17.49 9.05 -19 4 C-13.3 0.2 -6.72 -0.29 0 0 Z \",fill:\"#3A2C3E\",transform:\"translate(652,310)\"})),_path569||(_path569=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.8 2.22 3.07 4.16 4.19 6.81 C7.66 12.91 13.89 18.09 20.62 20.06 C24.47 20.98 28.28 21.39 32.21 21.66 C32.8 21.77 33.39 21.88 34 22 C34.5 22.99 34.5 22.99 35 24 C34.09 24.1 33.18 24.21 32.25 24.31 C29.05 24.73 29.05 24.73 27.22 26.47 C24.28 28.5 21.77 28.73 18.25 29.19 C17.08 29.35 15.91 29.5 14.7 29.67 C13.81 29.78 12.92 29.89 12 30 C12.66 31.65 13.32 33.3 14 35 C13.36 35.72 12.72 36.44 12.06 37.19 C10.01 39.98 9.39 41.62 9 45 C8.01 44.67 7.02 44.34 6 44 C4.94 40.81 4.94 40.81 4 37 C3.34 35 2.68 33 2 31 C2.99 31 3.98 31 5 31 C5.33 29.35 5.66 27.7 6 26 C5.48 25.68 4.97 25.37 4.43 25.04 C2.24 23.49 0.61 22.16 -1 20 C-1.32 16.51 -0.8 13.39 0 10 C0.33 10 0.66 10 1 10 C1.1 6.51 0.78 3.41 0 0 Z \",fill:\"#311540\",transform:\"translate(582,610)\"})),_path570||(_path570=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 4.06 0.26 6.96 -1.19 10.94 C-1.61 12.14 -2.04 13.35 -2.48 14.59 C-3.98 17.95 -5.65 20.2 -8 23 C-9.13 24.91 -10.21 26.85 -11.25 28.81 C-11.77 29.79 -12.29 30.76 -12.83 31.77 C-13.21 32.51 -13.6 33.24 -14 34 C-14.66 34 -15.32 34 -16 34 C-16.1 34.6 -16.21 35.2 -16.31 35.81 C-17 38 -17 38 -18.42 39.35 C-20.3 41.31 -21.03 43.04 -22 45.56 C-22.31 46.35 -22.62 47.13 -22.94 47.94 C-23.54 49.67 -24.11 51.41 -24.59 53.18 C-26.46 60.01 -29.34 65.82 -32.75 72 C-39.52 84.61 -44.54 97.43 -49 111 C-49.67 113.02 -50.33 115.04 -51 117.06 C-51.34 118.09 -51.67 119.11 -52.02 120.16 C-52.82 122.48 -53.72 124.69 -54.69 126.94 C-56.79 132.38 -56.67 138.24 -57 144 C-57.37 147.8 -57.79 151.36 -59 155 C-59.66 155 -60.32 155 -61 155 C-62 151.69 -62.1 148.7 -62.06 145.25 C-62.05 144.27 -62.04 143.28 -62.04 142.27 C-62.02 141.52 -62.01 140.77 -62 140 C-61.34 140 -60.68 140 -60 140 C-59.93 139.37 -59.86 138.74 -59.8 138.09 C-58.5 128.48 -55.46 119.59 -52.31 110.46 C-51.38 107.77 -50.48 105.09 -49.58 102.39 C-46.51 93.35 -43.18 84.67 -38.65 76.25 C-36.48 72.2 -35.12 68.42 -34 64 C-33.34 64 -32.68 64 -32 64 C-31.75 62.85 -31.5 61.69 -31.25 60.5 C-30.1 55.94 -28.24 52.05 -26 47.94 C-25.61 47.21 -25.22 46.47 -24.81 45.72 C-21.71 40.03 -18.22 34.68 -14.54 29.35 C-10.77 23.82 -7.79 18.09 -5 12 C-6.98 12.99 -8.96 13.98 -11 15 C-9.25 9.9 -6.67 3.53 -1.84 0.76 C-0.93 0.38 -0.93 0.38 0 0 Z \",fill:\"#381A44\",transform:\"translate(375,674)\"})),_path571||(_path571=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.81 0.6 2.63 1.2 2.44 1.81 C1.78 4.16 1.78 4.16 3 7 C3.99 7 4.98 7 6 7 C6 7.66 6 8.32 6 9 C6.66 9.33 7.32 9.66 8 10 C7.65 10.54 7.3 11.07 6.94 11.62 C5.75 13.99 5.75 13.99 6.53 16.6 C7.13 20.92 6.42 24.51 5.56 28.75 C4.45 33.84 4.45 33.84 4 39 C8.95 38.5 8.95 38.5 14 38 C14.33 38.99 14.66 39.98 15 41 C11.92 41.29 11.92 41.29 8.85 41.59 C7.93 41.79 7.93 41.79 7 42 C5.22 45.56 5.99 49.72 6.06 53.64 C6 56.87 5.61 59.84 5 63 C2.8 59.07 1 54.55 1 50 C-0.32 49.34 -1.64 48.68 -3 48 C-2.46 42.31 -1.86 36.65 -1 31 C-1.99 30.34 -2.98 29.68 -4 29 C-4.33 29.66 -4.66 30.32 -5 31 C-6.09 24.67 -6.03 20.64 -2.81 14.88 C-1.78 13.03 -1.78 13.03 -2.5 11.14 C-3.35 7.49 -2.05 4.56 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#5A4861\",transform:\"translate(854,392)\"})),_path572||(_path572=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.33 2.19 5.65 3.38 5.99 4.61 C6.43 6.18 6.87 7.75 7.31 9.31 C7.53 10.1 7.74 10.88 7.96 11.69 C8.17 12.45 8.39 13.21 8.61 13.99 C8.81 14.68 9 15.38 9.2 16.1 C10.13 18.31 11.13 19.51 13 21 C16.83 20.69 20.39 19.26 24 18 C26.27 22.22 27.86 26.39 29.25 30.95 C30 33.26 30 33.26 32 36 C34 35.35 34 35.35 36 34 C37.06 31.7 37.06 31.7 37.62 29.06 C38.45 25.76 39.07 23.89 41 21 C45.69 21.63 45.69 21.63 47.38 23.62 C47.91 24.08 48.45 24.53 49 25 C52.65 24.77 52.65 24.77 56 24 C55.28 29.31 53.95 32.58 51 37 C48.62 36.69 48.62 36.69 46 36 C44 33 44 33 44 30 C43.01 30 42.02 30 41 30 C40.71 31.09 40.42 32.19 40.12 33.31 C39.16 36.47 38.36 38.64 36 41 C33.66 40.71 31.33 40.38 29 40 C28.75 39.15 28.5 38.31 28.25 37.44 C26.86 33.62 25.09 30.48 23 27 C21.99 27.05 21.99 27.05 20.95 27.11 C20.06 27.13 19.17 27.16 18.25 27.19 C16.93 27.24 16.93 27.24 15.58 27.29 C12.5 26.94 11.25 26.09 9 24 C7.38 21.5 7.38 21.5 6 19 C5.34 18.01 4.68 17.02 4 16 C3.32 14.67 2.65 13.34 2 12 C2.66 12 3.32 12 4 12 C3.63 11.3 3.25 10.6 2.87 9.88 C2.4 8.97 1.92 8.06 1.44 7.12 C0.72 5.77 0.72 5.77 -0 4.38 C-0.33 3.6 -0.66 2.81 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(720,1158)\"})),_path573||(_path573=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.5 1.49 4.5 1.49 5 3 C5.99 3.33 6.98 3.66 8 4 C8 4.66 8 5.32 8 6 C7.01 6.66 6.02 7.32 5 8 C6.07 7.92 7.14 7.83 8.25 7.75 C12 8 12 8 14.44 9.81 C16 12 16 12 16 15 C16.99 15.33 17.98 15.66 19 16 C19 16.66 19 17.32 19 18 C18.3 17.85 17.6 17.69 16.88 17.54 C11.03 16.51 11.03 16.51 5.59 18.39 C3.59 20.17 1.78 22 0 24 C-0.54 24.52 -1.09 25.03 -1.64 25.57 C-3.46 27.48 -4.13 29.54 -5 32 C-5.66 32 -6.32 32 -7 32 C-7.05 34.9 -7.09 37.79 -7.12 40.69 C-7.14 41.5 -7.16 42.32 -7.18 43.16 C-7.21 47.57 -7.08 50.99 -5 55 C-5.99 55.5 -5.99 55.5 -7 56 C-10.62 50.84 -11.4 47.95 -10.36 41.72 C-10.24 41.15 -10.12 40.59 -10 40 C-13.46 43.81 -14.8 47.02 -16 52 C-17 55 -17 55 -19 56 C-19.66 56.99 -20.32 57.98 -21 59 C-22.66 59.69 -24.32 60.36 -26 61 C-26.33 61.66 -26.66 62.32 -27 63 C-27.66 63 -28.32 63 -29 63 C-28.67 59.94 -28.4 58.4 -26.19 56.19 C-24 55 -24 55 -20 55 C-19.93 54.35 -19.85 53.7 -19.77 53.02 C-18.57 45.01 -18.57 45.01 -15 42.12 C-11.05 38.77 -11.21 34.96 -10.63 30.03 C-9.78 25.93 -7.8 23.4 -5.33 20.1 C-2.73 16 -3 11.75 -3 7 C-2.01 7.33 -1.02 7.66 0 8 C1.02 3.9 1.02 3.9 0 0 Z \",fill:\"#321541\",transform:\"translate(943,393)\"})),_path574||(_path574=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.57 3.13 0.09 5.35 -0.94 8.62 C-2.58 14.21 -3.17 19 -2.94 24.88 C-2.51 37.04 -7.05 47.98 -11.5 59.12 C-11.77 59.81 -12.04 60.5 -12.32 61.2 C-14.05 65.34 -16.14 68.79 -18.82 72.37 C-20.47 74.65 -21.76 77.07 -23.06 79.56 C-25.19 83.54 -27.27 87.4 -30 91 C-30.66 91 -31.32 91 -32 91 C-32.27 91.74 -32.55 92.47 -32.83 93.23 C-34.65 97.54 -37.28 101.25 -39.88 105.12 C-40.67 106.34 -40.67 106.34 -41.48 107.58 C-42 108.36 -42.52 109.14 -43.05 109.95 C-43.52 110.65 -43.99 111.36 -44.48 112.09 C-46.11 114.14 -47.84 115.52 -50 117 C-49.73 116.46 -49.46 115.92 -49.18 115.36 C-48.33 113.66 -47.49 111.95 -46.67 110.23 C-43.85 104.44 -41.09 99 -37 94 C-36.34 94 -35.68 94 -35 94 C-35 93.01 -35 92.02 -35 91 C-33.89 89.92 -33.89 89.92 -32.75 88.81 C-29.49 85.48 -27.91 82.19 -26 78 C-25 76 -24 74 -23 72 C-22.34 72 -21.68 72 -21 72 C-20.73 71.2 -20.46 70.39 -20.19 69.56 C-19.56 67.67 -18.92 65.78 -18.23 63.91 C-15.38 55.94 -14.85 48.41 -15 40 C-14.01 40.5 -14.01 40.5 -13 41 C-12.83 40.03 -12.66 39.07 -12.48 38.07 C-11.25 31.31 -9.88 25.01 -7.11 18.69 C-5.39 14.51 -4.04 10.21 -2.66 5.91 C-1.1 1.1 -1.1 1.1 0 0 Z \",fill:\"#452354\",transform:\"translate(434,541)\"})),_path575||(_path575=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.3 2.12 2.6 2.25 3.94 2.38 C8.65 2.91 13.5 3.46 18 5 C18.5 5.99 18.5 5.99 19 7 C21.11 7.91 21.11 7.91 23.56 8.62 C24.39 8.89 25.22 9.15 26.07 9.41 C26.7 9.61 27.34 9.8 28 10 C28 11.32 28 12.64 28 14 C28.99 14.33 29.98 14.66 31 15 C31.99 15.99 32.98 16.98 34 18 C16.67 17.5 16.67 17.5 -1 17 C1.22 14.78 3.08 14.07 6 13 C2.32 11.64 0.53 12.55 -3 14 C-3.99 13.67 -4.98 13.34 -6 13 C-5.34 12.01 -4.68 11.02 -4 10 C-7.63 10.33 -11.26 10.66 -15 11 C-12.12 5.12 -12.12 5.12 -11 4 C-11.66 3.34 -12.32 2.68 -13 2 C-10.21 -0.79 -3.78 -0.11 0 0 Z \",fill:\"#241B27\",transform:\"translate(670,232)\"})),_path576||(_path576=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.1 -2.13 5.74 -4.81 8.56 C-5.55 9.35 -5.55 9.35 -6.3 10.16 C-20.46 25.12 -20.46 25.12 -30.19 28.62 C-30.88 28.89 -31.58 29.15 -32.29 29.41 C-35.35 30.08 -38.23 30.04 -41.34 29.99 C-46.66 30.01 -51.95 30.48 -57.25 30.88 C-58.39 30.95 -59.53 31.03 -60.7 31.11 C-78.91 31.73 -78.91 31.73 -94.66 39.59 C-96.22 41.38 -96.22 41.38 -98 44 C-98.99 43.67 -99.98 43.34 -101 43 C-100.67 41.68 -100.34 40.36 -100 39 C-101.32 39 -102.64 39 -104 39 C-104.33 37.35 -104.66 35.7 -105 34 C-102.03 34 -99.06 34 -96 34 C-95.34 32.68 -94.68 31.36 -94 30 C-91.24 29.43 -88.8 29.17 -86 29 C-83.97 28.82 -81.93 28.64 -79.9 28.46 C-64.9 27.3 -50.04 26.71 -35 27 C-35 26.34 -35 25.68 -35 25 C-34.28 24.61 -33.55 24.23 -32.8 23.83 C-26.48 20.46 -26.48 20.46 -20.44 16.62 C-18 15 -18 15 -16 15 C-15.67 14.01 -15.34 13.02 -15 12 C-13.76 11.44 -13.76 11.44 -12.5 10.88 C-7.44 8.16 -3.91 4.15 0 0 Z \",fill:\"#391A48\",transform:\"translate(354,1146)\"})),_path577||(_path577=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.99 1.03 1.98 2.05 1.96 3.11 C1.6 16.26 1.6 16.26 3.6 29.17 C4 31 4 31 3 33 C4.18 33.19 4.18 33.19 5.38 33.38 C8 34 8 34 10 36 C11.21 39.62 10.37 40.7 8.84 44.04 C6.8 48.81 5.67 53.79 6 59 C4.51 59.49 4.51 59.49 3 60 C2.67 60.99 2.34 61.98 2 63 C-4.15 62.07 -4.15 62.07 -6.24 59.44 C-8.63 54.21 -7.67 50.6 -5.77 45.34 C-4.83 42.49 -4.76 39.98 -5 37 C-4.01 37.33 -3.02 37.66 -2 38 C-2.31 37.04 -2.31 37.04 -2.62 36.06 C-2.98 33.13 -2.8 31.86 -2.06 29.09 C-0.69 23.24 -0.55 17.43 -0.38 11.44 C-0.32 9.78 -0.32 9.78 -0.26 8.09 C-0.16 5.39 -0.08 2.7 0 0 Z \",fill:\"#311541\",transform:\"translate(593,1153)\"})),_path578||(_path578=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.32 1.72 2.93 2.55 3.38 5.44 C2.93 8.47 1.95 9.68 0 12 C-0.46 13.02 -0.46 13.02 -0.94 14.06 C-2.25 16.46 -3.7 17.56 -6 19 C-6.66 19 -7.32 19 -8 19 C-8.66 21.31 -9.32 23.62 -10 26 C-10.66 26 -11.32 26 -12 26 C-12.12 27.28 -12.25 28.56 -12.38 29.88 C-12.75 33.75 -12.75 33.75 -15 36 C-17.5 35.81 -17.5 35.81 -20 35 C-22.52 31.22 -21.82 30.33 -21 26 C-20.97 22.34 -21.06 18.7 -21.16 15.05 C-21 12 -21 12 -19 10 C-16.31 9.73 -13.71 9.91 -11 10 C-11.33 9.01 -11.66 8.02 -12 7 C-10.52 3.52 -9.23 2.14 -6 0.12 C-3 -1 -3 -1 0 0 Z \",fill:\"#6D5D4E\",transform:\"translate(880,423)\"})),_path579||(_path579=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.53 6 -0.01 8.6 -3.74 13.27 C-5.76 16.04 -6.49 18.65 -7 22 C-5.63 24.19 -5.63 24.19 -4 26 C-4.4 28.11 -4.4 28.11 -5 30 C-7.29 30.05 -9.58 30.09 -11.88 30.12 C-13.15 30.15 -14.43 30.17 -15.74 30.2 C-19 30 -19 30 -21 28 C-21.64 21.74 -21.4 15.86 -19 10 C-19 9.01 -19 8.02 -19 7 C-18.34 7 -17.68 7 -17 7 C-16.67 6.01 -16.34 5.02 -16 4 C-15.01 4 -14.02 4 -13 4 C-10.4 2.76 -7.9 1.38 -5.38 -0 C-3 -1 -3 -1 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(611,283)\"})),_path580||(_path580=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 1.07 1.72 1.07 3.5 2.69 C4.09 3.21 4.68 3.73 5.28 4.26 C13.75 12.83 14.39 26.44 14.44 37.94 C14.36 47.82 13 57.34 11 67 C10.34 67 9.68 67 9 67 C9.14 64.42 9.29 61.83 9.44 59.25 C9.48 58.52 9.52 57.79 9.56 57.04 C9.89 51.44 9.89 51.44 10.51 49 C11.36 45.54 11.19 41.99 11.19 38.44 C11.19 37.64 11.19 36.84 11.19 36.02 C11.13 29.85 10.48 24 9 18 C8.01 18 7.02 18 6 18 C5.97 19 5.95 20 5.92 21.02 C5.28 39.05 3.45 58.04 -3 75 C-3.33 75 -3.66 75 -4 75 C-4.05 72.98 -4.09 70.96 -4.12 68.94 C-4.15 67.81 -4.17 66.69 -4.2 65.53 C-3.98 61.72 -3.08 58.65 -2 55 C1.1 39.42 3.33 22.18 -2.38 6.95 C-3 5 -3 5 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#331544\",transform:\"translate(366,1022)\"})),_path581||(_path581=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.43 4.23 6.04 8.72 8 14.41 C8.96 17.18 8.96 17.18 11 20 C11 20.99 11 21.98 11 23 C12.65 22.34 14.3 21.68 16 21 C16.49 22.37 16.96 23.75 17.44 25.12 C17.7 25.89 17.97 26.66 18.25 27.45 C19 30 19 30 19.41 32.94 C20.08 36.39 21.27 38.76 23 41.81 C23.62 42.93 24.25 44.05 24.89 45.21 C25.23 45.81 25.57 46.42 25.92 47.04 C28.31 51.38 30.59 55.78 32.89 60.18 C34.45 63.13 36.02 66.03 37.77 68.88 C39 71 39 71 39 73 C39.66 73 40.32 73 41 73 C42.67 75.11 44.22 77.22 45.75 79.44 C46.19 80.07 46.64 80.71 47.1 81.37 C47.99 82.65 48.88 83.93 49.76 85.21 C50.84 86.76 51.93 88.3 53.03 89.83 C53.58 90.61 54.12 91.39 54.69 92.19 C55.17 92.86 55.64 93.54 56.14 94.23 C57 96 57 96 56 99 C55.32 98.07 54.64 97.14 53.94 96.19 C51.79 93.56 51 93 47.62 91.81 C42.88 90.11 41.09 85.97 38.68 81.79 C36.98 78.97 35.11 76.52 33 74 C32.51 73.41 32.02 72.81 31.52 72.2 C31.1 71.7 30.68 71.2 30.25 70.69 C29.14 69.36 29.14 69.36 28 68 C29.98 67.5 29.98 67.5 32 67 C29.84 59.94 27.13 54.21 22.68 48.29 C18 41.92 18 41.92 18 39 C17.34 38.67 16.68 38.34 16 38 C14.99 36.24 14.99 36.24 13.88 33.88 C12 29.98 10.02 26.18 7.94 22.39 C0 7.87 0 7.87 0 0 Z \",fill:\"#0B0F37\",transform:\"translate(586,942)\"})),_path582||(_path582=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.06 0.83 0.12 1.67 0.18 2.53 C0.27 3.65 0.35 4.78 0.44 5.94 C0.52 7.12 0.61 8.31 0.7 9.53 C0.95 12.38 1.31 15.17 1.75 18 C2.1 21 2.03 21.92 0.81 24.81 C-1 27 -1 27 -3.05 28.76 C-6.76 33.02 -6.26 38.58 -6 44 C-5.08 47.88 -3.61 51.36 -2 55 C-1.71 55.88 -1.42 56.76 -1.12 57.66 C0.88 63.6 3.39 66.83 8.39 70.62 C8.92 71.08 9.45 71.53 10 72 C10 72.66 10 73.32 10 74 C11.92 76.17 13.38 76.95 16.27 77.19 C18.52 77.19 20.75 77.13 23 77 C23.33 77.99 23.66 78.98 24 80 C19.84 82.02 16.6 82.63 12 82 C5.92 78.33 3.11 73.15 0.38 66.81 C-0.39 65.1 -1.15 63.4 -1.91 61.69 C-2.27 60.87 -2.63 60.06 -3 59.22 C-3.82 57.41 -4.72 55.63 -5.65 53.88 C-9.5 46.57 -11.62 36.3 -9.51 28.08 C-8.93 25.72 -8.86 23.59 -8.82 21.16 C-8.8 20.24 -8.78 19.32 -8.75 18.38 C-8.71 16.46 -8.68 14.54 -8.66 12.62 C-8.45 5.62 -8.45 5.62 -6.14 2.41 C-4.19 1.12 -2.44 0 0 0 Z \",fill:\"#705275\",transform:\"translate(860,551)\"})),_path583||(_path583=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.75 2.75 5.75 2.75 8 5 C9.95 5.1 9.95 5.1 12.12 4.75 C12.92 4.65 13.72 4.54 14.54 4.43 C16.89 4.02 19.14 3.46 21.44 2.81 C22.61 2.54 23.79 2.28 25 2 C25.66 2.66 26.32 3.32 27 4 C25.68 4 24.36 4 23 4 C23.41 6.87 23.92 8.87 25.44 11.38 C27.81 15.36 29 19.36 29 24 C29.66 24.99 30.32 25.98 31 27 C29.02 28.65 27.04 30.3 25 32 C24.67 31.34 24.34 30.68 24 30 C21.98 33.02 21.74 33.72 21.66 37.12 C21.61 38.31 21.61 38.31 21.57 39.52 C21.54 40.34 21.52 41.16 21.5 42 C21.46 43.63 21.4 45.25 21.34 46.88 C21.33 47.59 21.31 48.31 21.29 49.05 C21 51 21 51 19 54 C18.81 52.54 18.62 51.08 18.44 49.62 C18.33 48.81 18.23 48 18.12 47.16 C18 45 18 45 19 43 C18.34 43 17.68 43 17 43 C16.8 33.44 16.74 24.36 19 15 C15.23 13.25 12.33 12.78 8.19 12.88 C7.21 12.89 6.24 12.91 5.23 12.93 C4.49 12.95 3.76 12.98 3 13 C3.09 11.36 3.09 11.36 3.19 9.69 C3.38 6.08 3.38 6.08 1.5 4.25 C1 3.84 0.51 3.43 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#230C38\",transform:\"translate(870,451)\"})),_path584||(_path584=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.02 0.3 9.64 3.13 14 7 C16.5 9.88 16.5 9.88 18 12 C15.52 11.5 15.52 11.5 13 11 C20.81 21.43 32.31 30.13 43.4 36.85 C45 38 45 38 47 41 C44 42 44 42 41.87 41.25 C32.09 36.22 23.77 30 15.54 22.72 C12.62 20.74 11.43 20.89 8 21 C3.72 18.74 0.64 15.76 -1.03 11.19 C-1.6 8.39 -2.05 5.86 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#2F163C\",transform:\"translate(775,234)\"})),_path585||(_path585=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5.31 C0.74 9.95 -1.38 10.98 -5 14 C-6.21 17.91 -6.32 20.07 -5 23.94 C-1.7 28.99 1.95 33.63 7 37 C12.29 36.79 16.4 35.11 21.08 32.84 C23 32 23 32 25 32 C25 32.99 25 33.98 25 35 C26.98 35 28.96 35 31 35 C31 35.66 31 36.32 31 37 C33.31 37.66 35.62 38.32 38 39 C38 39.99 38 40.98 38 42 C9.36 46.55 9.36 46.55 2.55 41.66 C-1.26 37.57 -4.08 32.74 -7 28 C-7.71 26.95 -8.43 25.9 -9.16 24.81 C-11.97 20.52 -13 17.12 -13 12 C-12.29 11.66 -11.58 11.32 -10.85 10.98 C-9.47 10.31 -9.47 10.31 -8.06 9.62 C-7.15 9.18 -6.23 8.74 -5.29 8.29 C-2.87 7.21 -2.87 7.21 -2 5 C-1.34 5 -0.68 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#44235A\",transform:\"translate(968,492)\"})),_path586||(_path586=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.44 0.91 11.95 3.17 17.94 5.62 C19.11 6.1 20.28 6.58 21.48 7.08 C30.92 10.99 40.17 15.26 49.38 19.69 C50.33 20.15 50.33 20.15 51.31 20.61 C60.23 24.89 68.67 29.67 77 35 C78.08 35.69 79.17 36.37 80.28 37.08 C87.14 41.46 93.19 46.31 99 52 C99.7 52.67 100.41 53.33 101.13 54.02 C108.95 62.01 114.53 71.8 120.33 81.29 C121.47 83.14 122.63 84.98 123.8 86.81 C124.35 87.7 124.91 88.58 125.49 89.5 C126 90.29 126.5 91.09 127.02 91.91 C128 94 128 94 127 97 C123.58 93.16 120.63 89.43 118 85 C117.38 84.4 116.76 83.8 116.12 83.18 C113.87 80.87 112.31 78.56 110.62 75.81 C110.02 74.84 109.42 73.87 108.79 72.88 C108.2 71.93 107.61 70.98 107 70 C105.04 66.97 103.04 63.98 101 61 C100.56 60.35 100.13 59.69 99.68 59.02 C91.58 47.44 80.44 40.38 68.45 33.42 C65.94 31.97 63.45 30.49 60.97 29 C59.31 28.02 57.66 27.04 56 26.06 C55.25 25.61 54.5 25.17 53.72 24.7 C48.33 21.57 42.83 19.2 37 17 C29.97 14.24 23.02 11.3 16.1 8.27 C13.71 7.29 11.52 6.52 9 6 C9 5.34 9 4.68 9 4 C8.44 3.88 7.89 3.75 7.31 3.62 C4.78 2.94 2.42 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#000002\",transform:\"translate(779,64)\"})),_path587||(_path587=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89 0.1 1.79 0.19 2.71 0.29 C3.63 0.41 4.56 0.52 5.52 0.63 C6.46 0.74 7.4 0.84 8.37 0.95 C10.69 1.21 13.01 1.48 15.33 1.76 C15.33 5.76 15.33 5.76 13.94 7.21 C13.41 7.72 12.88 8.23 12.33 8.76 C11.34 11.02 11.34 11.02 10.64 13.45 C10.39 14.25 10.14 15.06 9.88 15.89 C9.7 16.51 9.52 17.12 9.33 17.76 C6.04 18.1 2.75 18.43 -0.54 18.76 C-1.46 18.85 -2.38 18.95 -3.32 19.05 C-9.46 19.65 -15.5 19.88 -21.67 19.76 C-20.93 19.18 -20.18 18.6 -19.42 18.01 C-18.51 17.27 -17.6 16.52 -16.67 15.76 C-16.01 15.22 -15.35 14.69 -14.67 14.13 C-12.06 11.04 -10.57 7.67 -8.91 4 C-6.63 -0.1 -4.33 -0.5 0 0 Z \",fill:\"#816786\",transform:\"translate(674.66796875,787.2421875)\"})),_path588||(_path588=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 3.42 0.52 4.63 -0.54 7.94 C-1.06 10.26 -0.96 12.19 -0.81 14.56 C-0.65 20.5 -2.69 25.46 -4.81 30.9 C-5.72 33.28 -6.47 35.51 -7 38 C-5.02 39.65 -3.04 41.3 -1 43 C-0.32 42.5 0.36 42 1.07 41.49 C4.68 39.65 6.92 39.85 10.94 40.12 C16.9 40.37 16.9 40.37 21.88 37.5 C22.58 36.67 23.28 35.85 24 35 C24.99 35.5 24.99 35.5 26 36 C26.26 35.27 26.52 34.54 26.79 33.79 C28.04 30.91 29.49 28.78 31.44 26.31 C32.03 25.55 32.63 24.78 33.25 23.99 C35 22 35 22 38 20 C38 20.99 38 21.98 38 23 C37.34 23 36.68 23 36 23 C35.62 24.07 35.62 24.07 35.24 25.15 C33.87 28.31 32.17 30.79 30.12 33.56 C29.45 34.49 28.77 35.42 28.07 36.38 C24.76 40.57 22.22 43.46 17 45 C13.98 45.32 10.98 45.44 7.94 45.56 C3.22 46.27 0.68 48.23 -2.44 51.75 C-5 54 -5 54 -8.12 54 C-12.58 52.45 -12.58 52.45 -14 50 C-14.63 43.83 -13.43 39.66 -11 34 C-10.34 34 -9.68 34 -9 34 C-8.92 33.24 -8.83 32.47 -8.75 31.69 C-8.1 28.51 -7.24 25.94 -6.06 22.94 C-4.05 17.62 -3.16 12.48 -2.49 6.85 C-2.03 4.17 -1.36 2.33 0 0 Z \",fill:\"#482859\",transform:\"translate(361,612)\"})),_path589||(_path589=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.44 0.43 2.88 0.87 4.31 1.31 C5.11 1.56 5.91 1.8 6.74 2.05 C9.14 3.06 10.19 4.19 12 6 C12.6 6.12 13.2 6.24 13.81 6.36 C17.24 7.36 19.46 9.84 22 12.25 C22.78 12.97 22.78 12.97 23.58 13.7 C31.91 21.46 31.91 21.46 32.17 25.89 C32.03 26.86 31.89 27.82 31.75 28.81 C31.62 29.79 31.49 30.76 31.36 31.77 C31.24 32.51 31.12 33.24 31 34 C36.81 38.37 42.54 41.1 49.36 43.57 C56.13 46.23 62.54 49.66 69 53 C69 55.31 69 57.62 69 60 C54.01 52.14 54.01 52.14 48.28 48.4 C45.64 46.78 42.92 45.29 40.2 43.8 C21.96 33.76 21.96 33.76 19.94 27.94 C19.98 26.01 20.08 24.08 20.25 22.16 C19.77 16.16 15.07 12.14 11 8 C7.52 5.27 4.19 3.4 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#411E4E\",transform:\"translate(985,666)\"})),_path590||(_path590=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 2.91 2.67 4.92 3.56 8.25 C3.81 9.16 4.06 10.08 4.32 11.02 C5.77 17.38 6.19 23.6 6.27 30.1 C6.29 31.39 6.29 31.39 6.31 32.72 C6.34 35.5 6.36 38.28 6.38 41.06 C6.38 42.48 6.38 42.48 6.39 43.92 C6.42 60.21 5.96 76.35 -2 91 C-2.99 91 -3.98 91 -5 91 C-5.07 91.71 -5.14 92.41 -5.21 93.14 C-6.23 96.84 -8.07 98.9 -10.56 101.81 C-11.39 102.79 -12.22 103.76 -13.07 104.77 C-13.7 105.51 -14.34 106.24 -15 107 C-16.65 106.67 -18.3 106.34 -20 106 C-20 102 -20 102 -18 99 C-17.34 99 -16.68 99 -16 99 C-18.53 95.92 -20.95 94.48 -24.56 93 C-30.51 90.45 -30.51 90.45 -32 87 C-32.97 82.2 -33.38 77.76 -32 73 C-31.67 73 -31.34 73 -31 73 C-30.89 73.61 -30.78 74.23 -30.67 74.86 C-30.51 75.67 -30.35 76.48 -30.19 77.31 C-30.04 78.11 -29.89 78.91 -29.73 79.74 C-28.89 82.35 -28.16 83.34 -26 85 C-23.61 86.14 -23.61 86.14 -21 87.06 C-17.97 88.19 -15.72 89.19 -13 91 C-10.5 91.48 -10.5 91.48 -8 91 C-2.15 85.62 -0.24 77.41 1.38 69.94 C1.63 68.78 1.88 67.63 2.14 66.43 C3.99 57.01 4.57 47.82 4.56 38.25 C4.56 36.96 4.57 35.66 4.57 34.33 C4.43 26.36 3.42 18.97 1.7 11.23 C0.89 7.49 0.39 3.81 0 0 Z \",fill:\"#4B295A\",transform:\"translate(654,1104)\"})),_path591||(_path591=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.84 6.68 -4.55 11.77 -8.56 17.38 C-13.01 23.8 -17 30.32 -20.62 37.25 C-21.04 38.04 -21.45 38.82 -21.88 39.63 C-23.96 43.68 -25.7 47.62 -27 52 C-27.66 52 -28.32 52 -29 52 C-29.09 52.61 -29.17 53.21 -29.26 53.84 C-30.39 60.59 -32.67 66.03 -36 72 C-36.66 71.67 -37.32 71.34 -38 71 C-37.91 69.25 -37.8 67.5 -37.69 65.75 C-37.63 64.78 -37.57 63.8 -37.51 62.8 C-36.95 59.75 -36.04 58.29 -34 56 C-34.33 55.34 -34.66 54.68 -35 54 C-33.35 41.86 -24.89 29.06 -17.75 19.41 C-15.69 16.57 -13.83 13.64 -11.94 10.69 C-4.85 0 -4.85 0 0 0 Z \",fill:\"#30163D\",transform:\"translate(370,686)\"})),_path592||(_path592=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 1.16 5.47 3.19 8.04 5.7 C7.49 9.35 6.32 12.32 4.78 15.67 C3.91 18.04 3.59 20.32 3.23 22.82 C2.58 26.46 1.88 28.4 -0.96 30.82 C-3.96 32.7 -3.96 32.7 -5.96 32.7 C-7.09 30.13 -8.21 27.57 -9.34 25.01 C-9.65 24.29 -9.97 23.57 -10.3 22.82 C-11.91 19.14 -13.5 15.45 -14.96 11.7 C-13.29 11.7 -11.63 11.7 -9.96 11.7 C-10.04 10.46 -10.13 9.22 -10.21 7.95 C-10.19 4.92 -10.04 3.82 -8.46 1.13 C-5.47 -0.58 -3.37 -0.59 0 0 Z \",fill:\"#6F5274\",transform:\"translate(589.9609375,559.3046875)\"})),_path593||(_path593=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.07 0.5 12.73 1.79 17.92 6.88 C23.01 12.95 27.09 20.22 26.94 28.31 C26 31 26 31 24.44 33.69 C22.1 39.07 22.32 45.01 23.62 50.7 C23.81 51.84 23.81 51.84 24 53 C22.06 55.68 20.65 56.79 17.5 57.81 C15.04 58 13.33 57.78 11 57 C11 57.66 11 58.32 11 59 C9.02 59 7.04 59 5 59 C6.32 54.38 8.21 50.9 11 47 C11.66 47.33 12.32 47.66 13 48 C13 48.66 13 49.32 13 50 C16.01 45.72 16.88 41.8 17.69 36.75 C17.81 35.99 17.93 35.23 18.06 34.45 C19.87 22.86 19.87 22.86 15.83 12.07 C12.95 8.81 9.44 7.18 5.52 5.39 C2.84 3.91 1.63 2.56 0 0 Z \",fill:\"#705376\",transform:\"translate(611,406)\"})),_path594||(_path594=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 2.49 8.18 5.63 12 9 C12.87 9.77 13.74 10.53 14.63 11.32 C16.28 12.8 17.91 14.29 19.54 15.79 C26.6 22.49 26.6 22.49 35 27 C35.84 29.21 35.84 29.21 36.5 31.94 C37.47 36.27 37.47 36.27 41 39 C41 39.99 41 40.98 41 42 C40.34 42 39.68 42 39 42 C39 41.34 39 40.68 39 40 C37.51 40.5 37.51 40.5 36 41 C34.28 44.5 34.28 44.5 33 48 C32.01 47.5 32.01 47.5 31 47 C31.53 46.04 31.53 46.04 32.06 45.06 C33.53 40.28 32.99 35.49 31.14 30.85 C29.99 28.69 29.99 28.69 27 27 C27 26.34 27 25.68 27 25 C26.01 25 25.02 25 24 25 C22.63 23.71 21.3 22.36 20 21 C17.76 19.08 15.44 17.26 13.12 15.44 C12.53 14.96 11.93 14.47 11.31 13.98 C7.69 11.13 4.15 9.04 0 7 C-0.53 6.45 -1.06 5.9 -1.61 5.34 C-3.5 3.52 -4.72 3.57 -7.31 3.56 C-11.87 3.72 -14.52 4.95 -18 8 C-19.78 10.4 -20.06 11.41 -19.75 14.38 C-19.02 17.06 -19.02 17.06 -17.94 19.88 C-16.89 23.38 -16.85 26.36 -17 30 C-14.52 30.99 -14.52 30.99 -12 32 C-13.98 32.5 -13.98 32.5 -16 33 C-16 32.34 -16 31.68 -16 31 C-16.72 30.75 -17.44 30.5 -18.19 30.25 C-21.4 28.82 -23.54 27.53 -26 25 C-27.2 20.39 -27.02 16.63 -26 12 C-25.67 12 -25.34 12 -25 12 C-24.73 10.89 -24.46 9.77 -24.19 8.62 C-23 5 -23 5 -20 3 C-19.67 3.66 -19.34 4.32 -19 5 C-18.61 4.55 -18.22 4.09 -17.81 3.62 C-12.9 -0.78 -6.23 -1.3 0 0 Z \",fill:\"#482859\",transform:\"translate(847,101)\"})),_path595||(_path595=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 1.49 0.5 1.49 1 3 C-0.07 5.13 -0.07 5.13 -1.69 7.56 C-6.07 14.59 -8.71 21.34 -10.44 29.44 C-11.61 34.91 -13.46 39.57 -15.87 44.6 C-17.82 48.74 -18.86 52.67 -19.35 57.22 C-20.12 64.26 -21.04 69.08 -25.36 74.72 C-27.27 77.38 -28.64 80.11 -30.06 83.06 C-32.43 87.94 -35.03 92.46 -38 97 C-37.2 97.29 -36.39 97.58 -35.56 97.88 C-33 99 -33 99 -32 101 C-38.75 99.25 -38.75 99.25 -41 97 C-40.64 92.92 -38.22 89.28 -36.38 85.69 C-35.65 84.24 -34.92 82.8 -34.2 81.35 C-33.14 79.25 -32.08 77.15 -31 75.06 C-27 67.24 -24.26 59.88 -22.49 51.26 C-21.48 46.55 -20.02 42.5 -17.94 38.12 C-14.96 31.69 -13.85 25.5 -13.03 18.48 C-12.47 14 -11.89 10.65 -9 7 C-7.25 5.74 -7.25 5.74 -5.44 4.88 C-1.83 3.26 -1.83 3.26 0 0 Z \",fill:\"#775878\",transform:\"translate(560,200)\"})),_path596||(_path596=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.73 3.73 4.9 8.52 5.25 13.69 C5.03 16.55 4.68 19.21 4 22 C4.66 22 5.32 22 6 22 C6.49 26.46 6.49 26.46 7 31 C5.57 31.53 4.13 32.05 2.69 32.56 C1.49 33 1.49 33 0.26 33.44 C-2 34 -2 34 -5 33 C-6.68 31.04 -6.68 31.04 -8.44 28.62 C-10.71 25.5 -12.8 23.18 -16 21 C-16.66 21.33 -17.32 21.66 -18 22 C-20.09 21.8 -20.09 21.8 -22.5 21.31 C-23.29 21.16 -24.09 21.02 -24.91 20.86 C-27 20 -27 20 -28.28 18.11 C-29 16 -29 16 -29 13 C-30.48 11.11 -32.12 9.44 -33.79 7.72 C-34.19 7.15 -34.59 6.58 -35 6 C-34.67 5.01 -34.34 4.02 -34 3 C-33.51 3.83 -33.01 4.65 -32.5 5.5 C-30.12 8.45 -30.12 8.45 -26.06 8.12 C-25.01 8.07 -25.01 8.07 -23.95 8.01 C-20.76 7.99 -19.42 8.95 -17 11 C-15.84 12.51 -14.69 14.03 -13.56 15.56 C-11.33 18.55 -10.17 19.91 -6.81 21.69 C-4.08 22.12 -4.08 22.12 -1.69 21.62 C0.57 19.45 0.8 17.36 1.05 14.3 C0.98 11.05 0.26 8.1 -0.62 4.98 C-1 3 -1 3 0 0 Z \",fill:\"#472758\",transform:\"translate(1256,712)\"})),_path597||(_path597=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5 1.21 7.17 4.34 10.32 8.11 C12.32 10.36 14.35 11.58 17 13 C18.27 14.04 19.54 15.08 20.81 16.12 C25.01 19.28 27.73 20.17 33 20 C39.66 17.33 42.02 11.12 45 5 C45.99 5 46.98 5 48 5 C48 5.66 48 6.32 48 7 C49.32 7.33 50.64 7.66 52 8 C52.19 9.46 52.38 10.92 52.56 12.38 C52.72 13.59 52.72 13.59 52.88 14.84 C53 17 53 17 52 19 C51.01 19.33 50.02 19.66 49 20 C48.42 20.72 47.85 21.44 47.25 22.19 C45.43 24.46 43.68 26.4 41.56 28.38 C40.73 29.16 40.73 29.16 39.88 29.96 C38 31 38 31 35.57 30.89 C32.55 29.84 30.74 28.45 28.31 26.38 C24.98 23.6 21.65 21 18.06 18.56 C14.3 15.95 10.62 13.26 7 10.44 C6.09 9.73 5.18 9.03 4.25 8.31 C1.68 5.67 0.89 3.54 0 0 Z \",fill:\"#45245A\",transform:\"translate(838,136)\"})),_path598||(_path598=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.37 0.55 5.08 1.05 8 3 C11.63 3.1 15.22 2.93 18.85 2.78 C20.41 2.89 20.41 2.89 22 3 C24.04 6.07 24.24 6.59 24.16 10.02 C24.15 10.79 24.14 11.57 24.13 12.37 C24.11 13.18 24.08 13.98 24.06 14.81 C23.95 20.02 23.93 24.87 25 30 C23.38 31.62 23.38 31.62 21 33 C16.54 32.22 14.09 30.29 10.79 27.31 C7.27 24.74 3.08 23.44 -1 22 C-0.34 21.01 0.32 20.02 1 19 C3.31 19.33 5.62 19.66 8 20 C8 19.34 8 18.68 8 18 C6.35 18 4.7 18 3 18 C3 15 3 15 4 14 C5.77 14.01 7.55 14.11 9.31 14.25 C10.28 14.32 11.24 14.38 12.24 14.45 C15.24 15.05 16.73 15.99 19 18 C19.66 15.03 20.32 12.06 21 9 C19.35 9.33 17.7 9.66 16 10 C15.67 9.01 15.34 8.02 15 7 C14.11 6.86 13.23 6.71 12.31 6.56 C9 6 9 6 6.5 5.31 C3.02 4.88 1.09 5.35 -2 7 C-3.46 10.52 -3.46 10.52 -4 14 C-5.34 9.99 -4.38 7.94 -3 4 C-1.38 1.56 -1.38 1.56 0 0 Z \",fill:\"#090E36\",transform:\"translate(600,807)\"})),_path599||(_path599=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.53 2.3 2.87 4.53 4.17 6.95 C4.59 7.72 5.01 8.48 5.44 9.27 C6.3 10.86 7.16 12.45 8.02 14.04 C10.59 18.74 13.39 23.01 16.67 27.24 C18.27 29.35 19.61 31.55 20.88 33.88 C21.28 34.61 21.69 35.35 22.12 36.12 C23 38 23 38 23 40 C23.66 40 24.32 40 25 40 C25.7 40.74 26.4 41.49 27.12 42.25 C30.49 45.47 33.8 47.1 38 49 C43.79 51.79 43.79 51.79 46 54 C47.12 58.04 47.19 62.08 47.38 66.25 C47.75 75.77 47.75 75.77 52 84 C52.16 88.84 51.95 93.23 51 98 C49.22 95.32 48.53 93.69 47.69 90.69 C46.23 86.12 44.2 83.53 41 80 C38.79 76.6 38.9 74.22 39.38 70.25 C39.49 69.27 39.6 68.28 39.71 67.27 C39.81 66.52 39.9 65.77 40 65 C40.66 66.32 41.32 67.64 42 69 C41.56 63.54 40.5 60.24 37 56 C35.29 54.64 33.54 53.42 31.73 52.2 C27.94 49.57 25.18 46.44 22.79 42.54 C22.35 41.83 21.91 41.12 21.46 40.39 C20.98 39.6 20.5 38.81 20 38 C19.47 37.13 18.93 36.27 18.38 35.37 C16.6 32.48 14.83 29.58 13.06 26.69 C12.47 25.72 11.87 24.75 11.26 23.75 C8.29 18.88 5.37 13.98 2.56 9.02 C2.07 8.15 1.57 7.28 1.06 6.39 C0 4 0 4 0 0 Z \",fill:\"#472554\",transform:\"translate(551,981)\"})),_path600||(_path600=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.55 1.03 11.55 1.03 16 4 C19.8 9.04 22.15 14.35 22.06 20.69 C22.05 21.5 22.04 22.3 22.04 23.14 C22.02 23.75 22.01 24.37 22 25 C19.01 25.87 16.36 26.11 13.25 26.06 C12.45 26.05 11.65 26.04 10.83 26.04 C10.22 26.02 9.62 26.01 9 26 C8.71 25.11 8.42 24.23 8.12 23.31 C7.75 22.22 7.38 21.13 7 20 C6.73 19.13 6.46 18.27 6.19 17.38 C4.65 14.31 2.77 12.99 0 11 C-1.67 9.67 -3.33 8.33 -5 7 C-4.34 5.35 -3.68 3.7 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7C668F\",transform:\"translate(590,423)\"})),_path601||(_path601=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.06 1.97 2.06 1.97 2.11 3.98 C2.18 5.72 2.25 7.45 2.31 9.19 C2.34 10.05 2.36 10.92 2.38 11.81 C2.59 16.78 3.08 19.83 6 24 C10.07 34.47 12.62 51.15 9 62 C6 61 6 61 5.12 59.33 C4.9 58.64 4.67 57.96 4.44 57.25 C4.19 56.53 3.95 55.82 3.7 55.08 C3.47 54.39 3.24 53.71 3 53 C2.34 51.33 1.68 49.66 1 48 C0.01 48 -0.98 48 -2 48 C-3.01 40.8 -2.98 33.94 -2.62 26.69 C-2.58 25.64 -2.54 24.59 -2.49 23.5 C-1.59 3.19 -1.59 3.19 0 0 Z \",fill:\"#66476C\",transform:\"translate(1012,1160)\"})),_path602||(_path602=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-0.6 4.1 -0.6 4.1 0 6 C0.66 6 1.32 6 2 6 C2 5.34 2 4.68 2 4 C3.32 4.33 4.64 4.66 6 5 C6 5.99 6 6.98 6 8 C5.34 8 4.68 8 4 8 C4 8.66 4 9.32 4 10 C2.35 10.93 0.7 11.86 -0.95 12.78 C-3.01 13.96 -3.01 13.96 -4.86 15.34 C-9.72 18.8 -13.64 19.62 -19.58 19.86 C-22.14 19.9 -22.14 19.9 -25 21 C-26.67 21.04 -28.33 21.05 -30 21 C-28.68 19.35 -27.36 17.7 -26 16 C-26.33 15.34 -26.66 14.68 -27 14 C-26.26 13.71 -25.51 13.42 -24.75 13.12 C-22.43 12.18 -20.22 11.15 -18 10 C-18 9.34 -18 8.68 -18 8 C-19.65 7.67 -21.3 7.34 -23 7 C-23.33 6.01 -23.66 5.02 -24 4 C-24.66 3.67 -25.32 3.34 -26 3 C-17.19 0.81 -9.08 -0.45 0 0 Z \",fill:\"#220C37\",transform:\"translate(712,49)\"})),_path603||(_path603=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5 3.84 4.96 7.44 6.25 12.38 C8.15 19.04 10.79 24.8 14.19 30.81 C16.12 34.27 17.7 37.59 18.88 41.38 C19.25 42.57 19.62 43.77 20 45 C20.66 45.33 21.32 45.66 22 46 C23.13 47.63 24.21 49.31 25.25 51 C27.49 54.62 29.79 58.15 32.25 61.62 C35.1 65.83 36.68 70.11 38 75 C37.34 75.66 36.68 76.32 36 77 C31.62 75.51 29.99 72.25 27.81 68.44 C27.23 67.44 27.23 67.44 26.64 66.43 C22.59 59.42 18.79 52.29 15.09 45.09 C14.04 43.09 12.98 41.09 11.9 39.11 C7.89 31.55 4.73 23.92 2 15.81 C1.7 14.91 1.39 14.02 1.08 13.09 C-0.27 8.91 -1.27 5.44 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#080D31\",transform:\"translate(581,934)\"})),_path604||(_path604=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-0 3.89 -0 3.89 -1.56 6.25 C-4.2 10.45 -6.19 14.65 -8.06 19.25 C-10.18 24.33 -11.95 28.26 -16 32 C-16.87 32.25 -17.73 32.5 -18.62 32.75 C-21.15 33.75 -21.15 33.75 -21.77 35.98 C-22.23 37.72 -22.68 39.46 -23.12 41.2 C-25.2 47.83 -29.48 53.79 -34 59 C-34.66 58.67 -35.32 58.34 -36 58 C-36.62 55.44 -36.62 55.44 -37 53 C-36.01 53 -35.02 53 -34 53 C-32.22 49.2 -30.9 45.83 -30.19 41.69 C-29.25 37.19 -27.38 33.93 -24.91 30.09 C-23.37 27.6 -21.95 25.11 -20.56 22.54 C-20.13 21.74 -19.69 20.94 -19.25 20.12 C-18.39 18.53 -17.54 16.93 -16.69 15.33 C-13.45 9.36 -10.04 4.6 -3.69 1.69 C-2.99 1.36 -2.29 1.04 -1.57 0.7 C-0.79 0.35 -0.79 0.35 0 0 Z \",fill:\"#7C5B7A\",transform:\"translate(710,643)\"})),_path605||(_path605=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.29 0.78 3.58 1.57 3.88 2.38 C4.85 5.1 4.85 5.1 7 7 C8.06 11.44 8.17 15.62 7.19 20.06 C6.95 25.11 8.55 26.47 11.68 30.18 C13 32 13 32 13.12 34.81 C10.6 39.71 6.15 40.82 1.22 42.55 C-1.26 43.05 -2.66 42.93 -5 42 C-5.29 41.34 -5.58 40.68 -5.88 40 C-6.25 39.34 -6.62 38.68 -7 38 C-10.06 37.18 -10.06 37.18 -13 37 C-13.49 35.51 -13.49 35.51 -14 34 C-8.39 34 -2.78 34 3 34 C3 32.68 3 31.36 3 30 C2.2 29.22 1.39 28.43 0.56 27.62 C-2.37 24.62 -2.82 23.13 -3 19 C-2.67 18.01 -2.34 17.02 -2 16 C-1.74 12.76 -1.56 9.52 -1.39 6.27 C-1.1 1.1 -1.1 1.1 0 0 Z \",fill:\"#411E4E\",transform:\"translate(1124,612)\"})),_path606||(_path606=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.76 2.05 1.52 2.1 2.3 2.15 C3.29 2.22 4.29 2.3 5.31 2.38 C6.79 2.48 6.79 2.48 8.3 2.59 C11 3 11 3 14 5 C15.19 7.12 15.19 7.12 16 9 C14.56 10.13 13.13 11.25 11.69 12.38 C10.89 13 10.09 13.63 9.26 14.27 C4.35 18.02 4.35 18.02 0.38 17.75 C-4.13 17.06 -8.57 16.06 -13 15 C-15.22 7.16 -15.22 7.16 -14.44 3.06 C-11.26 -1.49 -4.89 -2.44 0 0 Z \",fill:\"#857295\",transform:\"translate(706,267)\"})),_path607||(_path607=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.45 3.67 2.3 5.63 2.31 10 C2.33 11.24 2.35 12.47 2.36 13.75 C2 17 2 17 0.78 18.83 C-3.75 21.81 -9.59 23.44 -15 22.88 C-18 22 -18 22 -20 19 C-20.46 14.93 -20.31 12.6 -18.44 8.94 C-13.19 2.61 -8.65 -2.21 0 0 Z \",fill:\"#785979\",transform:\"translate(635,202)\"})),_path608||(_path608=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91 3.07 1.09 5.8 1 9 C1.99 8.67 2.98 8.34 4 8 C6.04 11.06 6.42 12.45 6.81 16 C6.92 16.87 7.03 17.73 7.14 18.62 C7 21 7 21 5.7 22.8 C3.17 24.58 1.02 24.19 -2 24 C-2.66 24 -3.32 24 -4 24 C-4.1 24.62 -4.21 25.24 -4.31 25.88 C-5 28 -5 28 -8 30 C-9.01 32.18 -9.01 32.18 -9.69 34.62 C-9.94 35.44 -10.19 36.26 -10.45 37.1 C-10.63 37.73 -10.81 38.35 -11 39 C-11.66 39 -12.32 39 -13 39 C-13.23 39.56 -13.45 40.11 -13.69 40.69 C-15.98 44.72 -19.18 47.45 -23 50 C-21.7 46.5 -20.15 43.51 -18.12 40.38 C-14.92 35.17 -12.88 29.8 -11 24 C-12.65 24.99 -14.3 25.98 -16 27 C-15.58 25.52 -15.14 24.04 -14.69 22.56 C-14.44 21.74 -14.2 20.92 -13.95 20.07 C-13.64 19.38 -13.32 18.7 -13 18 C-12.01 17.67 -11.02 17.34 -10 17 C-9.88 16.3 -9.75 15.6 -9.62 14.88 C-8.95 11.79 -8.2 8.93 -7 6 C-6.01 5.67 -5.02 5.34 -4 5 C-2.61 3.38 -1.27 1.71 0 0 Z \",fill:\"#311540\",transform:\"translate(441,1143)\"})),_path609||(_path609=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.93 0.85 0.86 1.71 0.79 2.58 C0.04 12.48 -0.15 22.31 -0.13 32.23 C-0.13 34.8 -0.13 37.37 -0.14 39.93 C-0.14 48.26 -0 56.57 0.45 64.89 C0.48 65.62 0.52 66.35 0.56 67.1 C0.8 71.13 1.27 75.03 2 79 C2.12 79.71 2.24 80.42 2.36 81.15 C2.71 83.27 3.07 85.38 3.44 87.5 C3.56 88.23 3.68 88.97 3.81 89.72 C4.54 93.97 5.51 97.93 7 102 C3.62 102.19 3.62 102.19 0 102 C-0.66 101.01 -1.32 100.02 -2 99 C-1.69 97.66 -1.36 96.33 -1 95 C-1.3 92.62 -1.3 92.62 -1.94 90.25 C-2.13 89.45 -2.33 88.65 -2.53 87.83 C-2.68 87.22 -2.84 86.62 -3 86 C-3.66 86 -4.32 86 -5 86 C-5.08 85.4 -5.17 84.8 -5.25 84.19 C-6.24 81.31 -7.43 80.59 -10 79 C-12.48 78.47 -12.48 78.47 -15.06 78.38 C-22.07 77.93 -22.07 77.93 -25 75 C-19.79 72.51 -14.86 72.71 -9.18 72.64 C-5.91 72.33 -5.91 72.33 -4.31 69.94 C-2.7 66.32 -2.69 63.26 -2.84 59.39 C-2.86 57.87 -2.89 56.34 -2.92 54.82 C-2.94 53.63 -2.94 53.63 -2.97 52.42 C-3.06 45.99 -2.84 39.57 -2.68 33.14 C-2.64 31.5 -2.61 29.85 -2.58 28.21 C-2.4 18.64 -1.99 9.4 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(404,827)\"})),_path610||(_path610=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.8 4.91 5.21 11.58 6.69 17.5 C7.01 18.7 7.01 18.7 7.33 19.93 C8.62 24.95 9.46 29.85 10 35 C8.38 32.57 7.52 30.92 6.6 28.24 C6.35 27.53 6.1 26.83 5.84 26.1 C5.32 24.61 4.81 23.12 4.3 21.63 C3.62 19.72 2.82 17.86 2 16 C-0.89 14.76 -0.89 14.76 -3.5 15.5 C-7.02 17.61 -7.47 20.25 -9 24 C-11.56 26.94 -11.56 26.94 -14 29 C-14.66 29 -15.32 29 -16 29 C-16.33 30.98 -16.66 32.96 -17 35 C-19.48 35.5 -19.48 35.5 -22 36 C-22.33 33.69 -22.66 31.38 -23 29 C-22.34 29.66 -21.68 30.32 -21 31 C-19.04 29.04 -18.19 27.46 -17 25 C-16.67 24.67 -16.34 24.34 -16 24 C-15.78 22.65 -15.6 21.29 -15.46 19.92 C-15.35 19.09 -15.25 18.26 -15.14 17.4 C-14.92 15.65 -14.73 13.9 -14.54 12.14 C-13.97 7.8 -13.49 4.89 -10.07 1.95 C-6.39 -0.39 -4.14 -1.66 0 0 Z \",fill:\"#311243\",transform:\"translate(883,521)\"})),_path611||(_path611=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56 2.4 3.4 3.59 3.69 7.12 C3.79 8.31 3.79 8.31 3.89 9.52 C4.03 12.64 3.98 15.74 3.84 18.86 C3.89 21.08 3.89 21.08 4.96 23.3 C6.26 26.68 6.47 29.86 6.62 33.44 C6.68 34.6 6.68 34.6 6.74 35.78 C7.13 45.52 7.11 55.26 7.12 65 C7.13 65.86 7.13 66.73 7.13 67.61 C7.14 70.1 7.14 72.58 7.13 75.06 C7.14 76.2 7.14 76.2 7.14 77.35 C7.12 80.5 7 82.99 6 86 C4 85 4 85 3 82 C2.93 80.44 2.91 78.87 2.94 77.31 C2.95 76.5 2.96 75.7 2.96 74.86 C2.98 73.94 2.98 73.94 3 73 C2.34 73 1.68 73 1 73 C0.21 48.66 -0.14 24.35 0 0 Z \",fill:\"#28103B\",transform:\"translate(483,404)\"})),_path612||(_path612=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.26 0.06 2.26 0.06 5 1 C6.53 3.39 7.68 5.5 8.81 8.06 C9.12 8.73 9.44 9.39 9.76 10.07 C10.52 11.71 11.26 13.35 12 15 C12.76 14.5 13.53 14.01 14.31 13.5 C17 12 17 12 20 12 C20.33 12.99 20.66 13.98 21 15 C20.37 15.24 19.73 15.48 19.08 15.72 C16.84 16.82 16.84 16.82 16.17 19.06 C16.03 19.84 15.89 20.63 15.75 21.44 C15.6 22.22 15.45 23 15.3 23.81 C14.85 27.14 15.11 29.79 16 33 C14.35 32.34 12.7 31.68 11 31 C10.95 31.93 10.9 32.85 10.85 33.81 C10.78 35.01 10.7 36.2 10.62 37.44 C10.56 38.63 10.49 39.83 10.41 41.06 C10.21 42.51 10.21 42.51 10 44 C9.01 44.5 9.01 44.5 8 45 C7.01 44.67 6.02 44.34 5 44 C3.47 40.93 3.9 37.73 3.94 34.38 C3.94 33.67 3.95 32.96 3.95 32.23 C3.96 30.49 3.98 28.74 4 27 C3.34 27 2.68 27 2 27 C2 26.34 2 25.68 2 25 C0.68 24.34 -0.64 23.68 -2 23 C-2 21.35 -2 19.7 -2 18 C-0.02 18 1.96 18 4 18 C3.89 16.4 3.76 14.79 3.62 13.19 C3.56 12.29 3.49 11.4 3.41 10.48 C3.13 7.76 3.13 7.76 1 5 C0.01 5 -0.98 5 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#593960\",transform:\"translate(905,332)\"})),_path613||(_path613=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 1.06 1.5 1.06 3 3 C3.32 6.45 3.37 9.08 2.06 12.31 C0.97 15.07 0.8 17.06 0.62 20 C0.24 24.64 -0.91 26.47 -4 30 C-5.96 34.23 -7.53 38.59 -9 43 C-10.49 42.5 -10.49 42.5 -12 42 C-15.57 47.35 -17.62 53.44 -19.31 59.62 C-20.88 65.13 -23.21 70.26 -25.58 75.47 C-27 78.62 -28.23 81.62 -29 85 C-29.66 85 -30.32 85 -31 85 C-29.1 77.58 -26.81 70.42 -24.12 63.25 C-21.28 55.56 -18.57 47.86 -16.03 40.07 C-15.17 37.5 -14.22 35.01 -13.19 32.5 C-11.92 28.75 -11.93 25.92 -12 22 C-11.25 18.62 -11.25 18.62 -10 16 C-9.05 15.89 -9.05 15.89 -8.09 15.77 C-5.62 15.14 -5.62 15.14 -4.55 11.88 C-4.12 10.59 -3.71 9.3 -3.31 8 C-1.07 1.07 -1.07 1.07 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(407,490)\"})),_path614||(_path614=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.58 1.86 8.32 6.99 11 12 C13.94 20.93 14.47 30.68 14 40 C14 40.99 14 41.98 14 43 C13.34 43 12.68 43 12 43 C12 42.34 12 41.68 12 41 C10.96 41.49 9.92 41.99 8.85 42.5 C-5.49 49.14 -5.49 49.14 -14 49 C-14.65 47.86 -14.65 47.86 -15.31 46.69 C-16.81 44.06 -16.81 44.06 -18.56 42.5 C-20.43 40.55 -21.11 38.52 -22 36 C-21.01 36.66 -20.02 37.32 -19 38 C-19 38.66 -19 39.32 -19 40 C-12.75 42.08 -8.2 40.99 -2.49 38.21 C-1.38 37.64 -1.38 37.64 -0.25 37.06 C1.24 36.32 2.74 35.58 4.23 34.85 C4.89 34.52 5.54 34.19 6.21 33.85 C8 33 8 33 11 32 C10.73 23.47 7.83 18.48 2.35 12.07 C0.7 9.54 0.51 7.74 0.31 4.75 C0.21 3.41 0.21 3.41 0.11 2.05 C0.08 1.37 0.04 0.7 0 0 Z \",fill:\"#4B2E62\",transform:\"translate(1236,665)\"})),_path615||(_path615=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C2.66 3 3.32 3 4 3 C2.17 7.83 -1.33 9.11 -5.69 11.44 C-8.41 13 -8.41 13 -10 17 C-7.36 15.68 -4.72 14.36 -2 13 C-3.21 17.43 -4.52 19.98 -8 23 C-7.65 23.7 -7.3 24.4 -6.94 25.12 C-5.84 28.5 -6.2 30.58 -7 34 C-12.45 34.5 -12.45 34.5 -18 35 C-19.55 30.34 -17.98 25.87 -17.03 21.16 C-16.1 16.55 -16.1 16.55 -17 12 C-16.67 11.34 -16.34 10.68 -16 10 C-16.66 9.67 -17.32 9.34 -18 9 C-16.36 7.31 -14.69 5.65 -13 4 C-12.24 3.24 -11.47 2.47 -10.69 1.69 C-6.87 -0.71 -4.46 -0.37 0 0 Z \",fill:\"#836E90\",transform:\"translate(876,396)\"})),_path616||(_path616=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.29 1.19 8.08 3.72 11.94 7.28 C13.89 8.91 15.56 9.87 17.88 10.88 C23.39 13.4 27.96 17.53 32 22 C32.17 22.69 32.34 23.38 32.52 24.1 C33.23 26.91 34.82 27.48 37.25 28.94 C40.99 31.29 43.99 33.73 47 37 C47.6 37.52 48.2 38.03 48.81 38.56 C50 40 50 40 50 44 C46.47 43.41 44.63 42.08 42 39.69 C40.95 38.74 40.95 38.74 39.88 37.78 C38.5 36.47 37.17 35.09 35.88 33.69 C34.06 31.8 34.06 31.8 31.31 31.25 C27.02 29.63 24.43 27.01 21.15 23.88 C19.16 22.14 17.41 21.05 15 20 C15 19.34 15 18.68 15 18 C12.52 17.01 12.52 17.01 10 16 C10 15.34 10 14.68 10 14 C9.34 14 8.68 14 8 14 C6.56 12.69 6.56 12.69 5 11 C4.48 10.61 3.97 10.22 3.44 9.81 C1.12 6.89 0.77 3.62 0 0 Z \",fill:\"#381A43\",transform:\"translate(745,123)\"})),_path617||(_path617=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 2.97 1.24 4.91 1 8 C-2.27 11.27 -7.07 10.89 -11.54 11.14 C-17.1 11.51 -20.66 12.18 -25 16 C-25.62 16.93 -26.24 17.86 -26.88 18.81 C-29.61 22.92 -32.94 26.18 -37 29 C-37.99 29 -38.98 29 -40 29 C-39.97 26.41 -39.9 23.84 -39.81 21.25 C-39.81 20.52 -39.8 19.79 -39.79 19.04 C-39.64 15.35 -39.37 13.41 -36.84 10.65 C-27.77 5.37 -18.95 3.41 -8.6 3.36 C-4.51 3.36 -4.51 3.36 -1.01 1.48 C-0.68 0.99 -0.34 0.5 0 0 Z \",fill:\"#0B123F\",transform:\"translate(943,1021)\"})),_path618||(_path618=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.97 0.68 11.28 2.26 16.95 4.18 C20.4 5.32 23.63 6.15 27.25 6.53 C31.9 7.11 34.14 8.51 38 11 C38 11.33 38 11.66 38 12 C36.76 11.86 35.53 11.71 34.25 11.56 C28.51 10.92 22.76 10.46 17 10 C19.64 10.33 22.28 10.66 25 11 C24.01 12.49 24.01 12.49 23 14 C22.01 14 21.02 14 20 14 C18.66 15.99 17.32 17.99 16 20 C12.8 22.1 9.77 22.43 6 22.75 C4.97 22.85 3.94 22.95 2.88 23.05 C-0.06 23 -1.54 22.54 -4 21 C-2.91 20.73 -1.81 20.46 -0.69 20.19 C3.33 18.93 3.33 18.93 6 16 C6.33 15.01 6.66 14.02 7 13 C7.66 13 8.32 13 9 13 C7.86 11.63 7.86 11.63 4.84 11.9 C3.55 11.91 2.26 11.93 0.94 11.94 C-0.35 11.95 -1.64 11.96 -2.97 11.96 C-3.97 11.98 -4.97 11.99 -6 12 C-6 9 -6 9 -4.06 6.81 C-2 5 -2 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(1039,759)\"})),_path619||(_path619=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.67 3.66 2.34 4.32 2 5 C3.98 6.65 5.96 8.3 8 10 C8.06 9.38 8.12 8.75 8.18 8.11 C9 6 9 6 11.29 4.95 C12.2 4.72 13.12 4.49 14.06 4.25 C15.44 3.89 15.44 3.89 16.85 3.52 C17.56 3.35 18.27 3.18 19 3 C17.62 4.5 17.62 4.5 16 6 C15.34 6 14.68 6 14 6 C14.33 6.99 14.66 7.98 15 9 C15 9.66 15 10.32 15 11 C15.1 13.05 15.1 13.05 16 15 C17.65 15.71 19.32 16.37 21 17 C23.31 19.12 23.31 19.12 25 21 C24.67 21.99 24.34 22.98 24 24 C25.14 27.41 26.15 27.88 29.07 29.72 C53.32 45.85 53.32 45.85 55.75 54.75 C55.83 55.49 55.91 56.24 56 57 C54.02 56.01 52.04 55.02 50 54 C50 53.34 50 52.68 50 52 C49.47 51.78 48.93 51.57 48.38 51.35 C45.13 49.51 42.62 47 39.94 44.44 C35.9 40.64 31.83 36.97 27.5 33.5 C17.14 25.16 6.87 15.92 -2 6 C-2 5.34 -2 4.68 -2 4 C-2.99 3.67 -3.98 3.34 -5 3 C-5 2.67 -5 2.34 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2A1238\",transform:\"translate(692,74)\"})),_path620||(_path620=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.01 0.63 1.03 1.26 1.04 1.91 C1.05 23.18 1.05 23.18 9.05 42.37 C10 44 10 44 10 46.62 C9 49 9 49 7.42 51.58 C5.58 56 5.84 59.37 6.25 64.06 C6.3 64.85 6.36 65.64 6.41 66.46 C6.69 70.39 7.2 74.14 8 78 C8.55 85.02 8.23 91.62 5 98 C3.39 99.75 3.39 99.75 2 101 C0.51 100.5 0.51 100.5 -1 100 C-1 99.34 -1 98.68 -1 98 C-1.63 97.8 -2.26 97.59 -2.91 97.38 C-5 96 -5 96 -5.91 93.24 C-6.2 91.58 -6.2 91.58 -6.5 89.88 C-7.67 84.25 -8.78 79.79 -12 75 C-15.04 73.94 -15.04 73.94 -18 74 C-18.66 73.67 -19.32 73.34 -20 73 C-17.54 71.39 -16.03 71 -13.06 70.94 C-9.33 72.23 -8.07 73.64 -5.96 76.89 C-4.6 79.87 -4.35 82.64 -4.24 85.89 C-3.97 88.29 -3.18 89.91 -2 92 C-1.01 91.01 -1.01 91.01 0 90 C0.66 91.32 1.32 92.64 2 94 C4.26 89.47 4.16 85.96 4 81 C4 76.67 4 72.33 4 68 C3.01 68 2.02 68 1 68 C1.5 66.51 1.5 66.51 2 65 C2.37 61.91 2.51 58.8 2.69 55.69 C2.75 54.85 2.81 54 2.87 53.13 C3.15 48.2 2.79 44.68 1 40 C0.12 35.01 -0.14 30.15 -0.1 25.1 C-0.1 24.38 -0.09 23.65 -0.09 22.91 C-0.09 20.63 -0.08 18.34 -0.06 16.06 C-0.06 14.5 -0.05 12.95 -0.05 11.39 C-0.04 7.59 -0.02 3.8 0 0 Z \",fill:\"#3A174A\",transform:\"translate(463,383)\"})),_path621||(_path621=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.12 0.31 3.12 0.31 4.94 2 C7.2 6.41 7.28 10.86 7.31 15.75 C7.33 16.84 7.34 17.93 7.36 19.06 C7.11 22.46 6.28 25.12 5.12 28.31 C4.78 32.56 5.31 35.46 7.12 39.31 C6.13 39.97 5.14 40.63 4.12 41.31 C3.75 40.18 3.38 39.04 3 37.88 C2.25 35.92 2.25 35.92 1.12 34.31 C-1.9 33.65 -1.9 33.65 -4.88 33.31 C-9 26.94 -6.54 18 -5.44 10.94 C-5.3 10.02 -5.17 9.11 -5.03 8.17 C-3.85 0.42 -3.85 0.42 0 0 Z \",fill:\"#351547\",transform:\"translate(548.875,577.6875)\"})),_path622||(_path622=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.83 3.49 11.21 10.75 14.38 18.31 C14.73 19.12 15.08 19.93 15.45 20.77 C18 26.68 18 26.68 18 29 C18.66 29 19.32 29 20 29 C21.51 31.12 21.51 31.12 23.12 33.88 C23.66 34.78 24.2 35.68 24.76 36.62 C26 39 26 39 26 41 C26.66 41 27.32 41 28 41 C30.95 45.61 32.55 48.37 32 54 C28.85 52.63 26.95 51.12 24.75 48.5 C24.23 47.89 23.71 47.28 23.17 46.66 C22 45 22 45 22 43 C21.34 43 20.68 43 20 43 C18 40 18 40 17.25 36.88 C15.96 32 13.1 27.93 10 24 C9.34 23.67 8.68 23.34 8 23 C7.88 23.64 7.75 24.28 7.62 24.94 C7.42 25.62 7.21 26.3 7 27 C6.34 27.33 5.68 27.66 5 28 C5.88 24.12 5.88 24.12 7 23 C6.01 23 5.02 23 4 23 C4.06 22.05 4.12 21.1 4.19 20.12 C4.09 18.58 4.09 18.58 4 17 C3.01 16.34 2.02 15.68 1 15 C-1.23 10.72 -2.27 7.17 -1.19 2.44 C-0.8 1.63 -0.4 0.83 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(893,531)\"})),_path623||(_path623=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.64 0.61 4.64 0.61 7 2 C8.17 4.21 8.79 6.29 9.39 8.71 C10.01 11.02 10.9 12.89 12 15 C12.27 15.85 12.54 16.69 12.81 17.56 C14.31 20.63 16 21.5 19 23 C18.69 25.38 18.69 25.38 18 28 C14.32 30.46 11.62 30.19 7.38 30.06 C1.48 29.97 -4.15 30.16 -10 31 C-10.31 28.25 -10.31 28.25 -10 25 C-7.21 21.77 -4.8 20.78 -0.69 20.25 C1.14 20.13 1.14 20.13 3 20 C1.95 11.16 1.95 11.16 -3 4 C-2.01 2.68 -1.02 1.36 0 0 Z \",fill:\"#311243\",transform:\"translate(560,118)\"})),_path624||(_path624=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.23 1.33 6.04 2.89 8.56 6.5 C10.85 9.85 10.85 9.85 14.15 12.03 C16 13 16 13 16.72 14.83 C17.06 17.44 16.62 18.4 15.35 20.67 C14.8 21.67 14.8 21.67 14.24 22.68 C13.85 23.37 13.46 24.05 13.06 24.75 C12.68 25.45 12.29 26.14 11.89 26.86 C10.94 28.58 9.97 30.29 9 32 C8.01 31.01 7.02 30.02 6 29 C5.35 30.33 5.35 30.33 4.69 31.69 C1.47 36.46 -3.57 38.57 -9 40 C-12.56 39.91 -15.63 39.1 -19 38 C-20.37 37.62 -21.75 37.25 -23.12 36.88 C-24.55 36.44 -24.55 36.44 -26 36 C-26 35.01 -26 34.02 -26 33 C-25.2 33.14 -24.39 33.29 -23.56 33.44 C-21.8 33.72 -21.8 33.72 -20 34 C-19.31 34.16 -18.62 34.33 -17.91 34.5 C-13.23 35.42 -10.3 35.11 -6.12 32.69 C-1.88 29.52 -0.79 26.6 0.31 21.53 C1.06 18.79 2.14 17 3.75 14.69 C5.67 11.8 5.67 11.8 6.12 8.38 C4.56 5.06 2.46 2.72 0 0 Z \",fill:\"#472961\",transform:\"translate(1126,690)\"})),_path625||(_path625=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.17 0.57 0.34 1.14 0.52 1.72 C1.76 5.7 3.03 9.27 5.25 12.81 C7 16 7 16 6.62 18.25 C6.32 19.12 6.32 19.12 6 20 C6.66 20.99 7.32 21.98 8 23 C8.12 26.19 8.12 26.19 8 29 C7.34 29.33 6.68 29.66 6 30 C5.84 29.38 5.67 28.76 5.5 28.12 C3.44 25.21 1.47 25.13 -1.93 24.49 C-5.1 23.74 -7.35 23.04 -9.12 20.2 C-9.41 19.51 -9.7 18.83 -10 18.12 C-11.26 15.33 -12.03 13.97 -14.31 11.81 C-16 10 -16 10 -15.94 7.44 C-14.9 4.74 -14.36 3.65 -12 2 C-7.9 0.56 -4.34 -0.26 0 0 Z \",fill:\"#381A43\",transform:\"translate(948,364)\"})),_path626||(_path626=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.81 4.21 4.34 8.78 6.12 13.5 C6.5 14.46 6.87 15.43 7.25 16.42 C7.61 17.34 7.96 18.27 8.32 19.22 C8.64 20.06 8.97 20.91 9.3 21.78 C10 24 10 24 10 27 C10.66 27.33 11.32 27.66 12 28 C11.67 28.66 11.34 29.32 11 30 C11.66 30 12.32 30 13 30 C13.53 31.6 14.05 33.21 14.56 34.81 C14.85 35.71 15.14 36.6 15.44 37.52 C16 40 16 40 15 43 C14.16 42.41 14.16 42.41 13.31 41.81 C12.55 41.54 11.79 41.28 11 41 C8.71 42.17 8.71 42.17 6 44 C0.05 46.89 -5.38 49.32 -12 48 C-14.51 45.63 -16.38 43.05 -18 40 C-18 39.34 -18 38.68 -18 38 C-18.66 37.67 -19.32 37.34 -20 37 C-20.63 34.96 -21.02 32.91 -21.44 30.81 C-21.62 30.21 -21.81 29.62 -22 29 C-22.66 28.67 -23.32 28.34 -24 28 C-23.01 26.51 -23.01 26.51 -22 25 C-21.61 25.76 -21.23 26.52 -20.83 27.3 C-20.31 28.29 -19.79 29.29 -19.25 30.31 C-18.74 31.3 -18.23 32.28 -17.7 33.3 C-16.01 35.99 -14.71 37.39 -12 39 C-5.05 40.13 0.99 36.01 7 33 C6.49 26.47 5.19 20.95 2.94 14.81 C1.07 9.72 -0.41 5.52 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(572,940)\"})),_path627||(_path627=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.72 1.93 2.44 1.86 3.18 1.78 C8.58 2.2 12.28 6.34 16 10 C19.06 14.05 20.71 18.35 20.47 23.51 C19.54 28.42 17.78 33.11 16.09 37.8 C14.89 40.75 14.89 40.75 15 43 C15.99 43.66 16.98 44.32 18 45 C17.67 45.66 17.34 46.32 17 47 C15.68 47 14.36 47 13 47 C13.33 47.99 13.66 48.98 14 50 C11 52 11 52 8.31 51.62 C7.55 51.42 6.79 51.21 6 51 C6.6 47.93 7.25 44.87 7.94 41.81 C8.11 41.03 8.28 40.26 8.46 39.45 C8.82 37.82 9.19 36.18 9.57 34.55 C10.85 28.8 12.06 22.87 11 17 C8.71 14.21 8.71 14.21 6 12 C5.73 10.95 5.46 9.9 5.19 8.81 C4.33 5.89 4.33 5.89 2.11 5.18 C0.09 4.68 -1.95 4.33 -4 4 C-2.68 2.68 -1.36 1.36 0 0 Z \",fill:\"#3A174A\",transform:\"translate(267,761)\"})),_path628||(_path628=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 5.85 1.19 9.77 -2 15 C-3.42 16.99 -4.89 18.92 -6.39 20.85 C-11.54 27.72 -14.61 34.32 -16.93 42.57 C-18.07 46.24 -19.51 49.67 -21.06 53.19 C-24.16 60.23 -26.5 67.08 -27.87 74.66 C-28.93 80.02 -30.53 85.09 -32.31 90.25 C-32.77 91.61 -32.77 91.61 -33.24 92.99 C-35.75 100.36 -38.33 107.69 -41 115 C-42.37 111.27 -41.58 109 -40.31 105.31 C-38.63 100.16 -37.25 95.03 -36.06 89.75 C-33.34 77.85 -30.16 66.29 -25.25 55.09 C-23.78 51.45 -22.63 47.76 -21.5 44 C-14.28 20.28 -14.28 20.28 -6 12 C-5.58 7.34 -6.31 4.82 -9 1 C-3.38 -1.12 -3.38 -1.12 0 0 Z \",fill:\"#67486D\",transform:\"translate(567,150)\"})),_path629||(_path629=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.84 2.26 11.39 5.04 17 7.81 C18.62 8.59 18.62 8.59 20.27 9.39 C25.65 12.05 30.15 14.35 34 19 C33.34 20.32 32.68 21.64 32 23 C25.02 23.67 19.55 22.51 13 20.25 C12.25 20 11.49 19.75 10.72 19.49 C5.33 17.53 5.33 17.53 3.7 14.91 C3.47 14.28 3.24 13.65 3 13 C-0.03 11.23 -0.03 11.23 -3 10 C-1.12 2.25 -1.12 2.25 0 0 Z \",fill:\"#371942\",transform:\"translate(814,278)\"})),_path630||(_path630=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.21 10.95 3.02 20.45 1.51 30.3 C0.78 35.57 0.52 40.84 0.25 46.15 C0 49 0 49 -1 50 C-1.11 51.69 -1.18 53.37 -1.25 55.06 C-1.72 60.94 -3.59 64.32 -7 69 C-7.41 69.87 -7.82 70.73 -8.25 71.62 C-10.64 74.86 -13.64 76.58 -17.04 78.67 C-19.13 79.86 -19.13 79.86 -20 82 C-20.99 81.67 -21.98 81.34 -23 81 C-20.33 77.6 -17.73 74.68 -14.38 71.94 C-11.53 69.59 -9.67 67.34 -8 64 C-8.66 63.01 -9.32 62.02 -10 61 C-9.92 58.46 -9.73 56.13 -9.38 53.62 C-9.28 52.91 -9.19 52.2 -9.09 51.47 C-8.26 45.76 -6.75 40.41 -4.95 34.93 C-2.47 27.28 -1.72 19.71 -1.34 11.71 C-1.15 7.74 -0.73 3.91 0 0 Z \",fill:\"#45245A\",transform:\"translate(360,1046)\"})),_path631||(_path631=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.28 1.68 0.56 2.36 -0.19 3.06 C-3.95 6.83 -7.18 10.89 -9.12 15.88 C-9.41 16.58 -9.7 17.28 -10 18 C-10.99 18.33 -11.98 18.66 -13 19 C-14.01 20.33 -15.01 21.66 -16 23 C-16.66 23 -17.32 23 -18 23 C-18.19 23.74 -18.39 24.47 -18.59 25.23 C-18.85 26.21 -19.11 27.18 -19.38 28.19 C-19.63 29.15 -19.89 30.11 -20.15 31.11 C-21 34 -21 34 -22.07 36.64 C-23.16 39.14 -23.16 39.14 -23.5 42.56 C-23.94 45.57 -24.46 47.43 -26 50 C-26.33 49.67 -26.66 49.34 -27 49 C-27.33 51.97 -27.66 54.94 -28 58 C-28.33 58 -28.66 58 -29 58 C-29.07 56.95 -29.07 56.95 -29.15 55.88 C-29.22 54.97 -29.3 54.06 -29.38 53.12 C-29.44 52.22 -29.51 51.32 -29.59 50.38 C-29.8 47.82 -29.8 47.82 -32 46 C-33.59 34.8 -24.96 22.46 -18.81 13.81 C-11.31 4.05 -11.31 4.05 -5 2 C-3.67 1.41 -3.67 1.41 -2.31 0.81 C-1.55 0.54 -0.79 0.28 0 0 Z \",fill:\"#341445\",transform:\"translate(140,1102)\"})),_path632||(_path632=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1 5 C-0.96 5.95 -0.92 6.9 -0.88 7.88 C-0.79 16.27 -3.08 24.95 -9 31 C-12.75 32 -12.75 32 -16 32 C-17 31 -17 31 -17.25 27.44 C-17.19 20.18 -15.45 13.08 -14 6 C-13.67 4.33 -13.33 2.67 -13 1 C-8.61 0.3 -4.44 -0.11 0 0 Z \",fill:\"#523159\",transform:\"translate(532,378)\"})),_path633||(_path633=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.19 1.57 0.37 2.38 0.56 C4.97 1.26 4.97 1.26 7 0 C7.14 1.11 7.29 2.23 7.44 3.38 C7.78 6.82 7.78 6.82 9 9 C8.72 11.01 8.39 13.01 8 15 C8.66 15 9.32 15 10 15 C11.57 18.15 11.23 21.49 11.25 24.94 C11.27 25.67 11.29 26.4 11.31 27.15 C11.35 32.49 11.35 32.49 9.61 35 C8 36 8 36 6 36 C5.34 32.04 4.68 28.08 4 24 C3.34 24.33 2.68 24.66 2 25 C2 26.98 2 28.96 2 31 C-4.88 30.12 -4.88 30.12 -6 29 C-5.82 26.31 -5.38 23.67 -5 21 C-7.33 19.79 -9.5 18.83 -12 18 C-12 17.01 -12 16.02 -12 15 C-5.07 13.51 -5.07 13.51 2 12 C2 6.98 1.71 4.48 0 0 Z \",fill:\"#150E18\",transform:\"translate(531,334)\"})),_path634||(_path634=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.5 4.38 -0.13 8.63 -1.06 12.94 C-2.96 23.14 -2.35 33.76 -1.22 44.02 C-0.73 50.66 -0.93 57.35 -1 64 C-1.62 64.1 -2.24 64.21 -2.88 64.31 C-5.37 64.88 -5.37 64.88 -7 68 C-8.57 57.84 -9.42 47.92 -9.44 37.62 C-9.44 36.95 -9.44 36.28 -9.44 35.59 C-9.43 23.05 -8.9 9.74 0 0 Z \",fill:\"#371942\",transform:\"translate(313,825)\"})),_path635||(_path635=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.89 -0.21 10.83 0.45 16.5 2 C17.59 2.29 17.59 2.29 18.7 2.58 C20.47 3.04 22.24 3.52 24 4 C22.7 10.46 22.7 10.46 19.54 12.89 C18.58 13.34 17.62 13.79 16.62 14.25 C12.56 16.18 12.56 16.18 8.83 18.68 C7 20 7 20 4.06 19.94 C0.45 18.83 -1.51 17.87 -4 15 C-4 9.61 -1.99 4.94 0 0 Z \",fill:\"#472F6B\",transform:\"translate(327,1077)\"})),_path636||(_path636=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.37 0.47 6.04 2.09 9.25 5.04 C10.71 6.35 10.71 6.35 12.21 7.68 C14.31 10.36 14.31 10.36 14.01 12.96 C13.78 13.75 13.55 14.54 13.31 15.36 C14.57 17.83 15.82 20.04 17.31 22.36 C17.99 23.68 18.66 25.01 19.31 26.36 C16.31 28.36 16.31 28.36 14.25 29.23 C11.87 30.61 11.42 31.9 10.31 34.36 C9.32 34.85 9.32 34.85 8.31 35.36 C7.84 37.25 7.84 37.25 7.68 39.42 C7.56 40.72 7.44 42.02 7.31 43.36 C5.82 43.85 5.82 43.85 4.31 44.36 C4.08 43.63 3.85 42.91 3.62 42.17 C2.42 39.17 2.42 39.17 -0.25 36.79 C-2.7 34.35 -3.09 33.57 -3.69 30.36 C-2.66 29.58 -2.66 29.58 -1.61 28.78 C-0.71 28.08 0.19 27.39 1.12 26.67 C2.01 25.98 2.91 25.3 3.83 24.59 C6.42 22.25 7.9 20.55 9.31 17.36 C9.31 15.05 9.31 12.74 9.31 10.36 C4.69 9.37 0.07 8.38 -4.69 7.36 C-3.54 0.47 -3.54 0.47 0 0 Z \",fill:\"#66476C\",transform:\"translate(882.69140625,310.64453125)\"})),_path637||(_path637=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.19 2.31 0.19 5 1 C6.69 3.5 6.69 3.5 8 6 C8.66 6.33 9.32 6.66 10 7 C18.17 23.27 20.38 39.1 20 57 C19.34 57 18.68 57 18 57 C16.97 55.69 15.97 54.35 15 53 C14.67 53 14.34 53 14 53 C13.89 52.31 13.77 51.62 13.65 50.91 C11.02 35.44 8.28 19.75 0.79 5.74 C0 4 0 4 0 0 Z \",fill:\"#2A1238\",transform:\"translate(575,1096)\"})),_path638||(_path638=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.75 0.47 1.5 0.93 2.27 1.41 C5.07 3.13 5.07 3.13 8.62 4.44 C13.53 6.71 13.53 6.71 15 10 C15.63 16.57 14.39 22.13 12.8 28.49 C11.48 34.27 10.75 40.13 10 46 C7.37 44.07 7 42.98 6.38 39.71 C6.25 38.42 6.13 37.14 6 35.81 C5.22 28.73 4.01 23.01 0 17 C-0.23 15.1 -0.23 15.1 -0.2 12.99 C-0.19 12.23 -0.18 11.47 -0.18 10.69 C-0.16 9.91 -0.14 9.12 -0.12 8.31 C-0.12 7.52 -0.11 6.72 -0.1 5.9 C-0.07 3.93 -0.04 1.97 0 0 Z \",fill:\"#54325B\",transform:\"translate(1014,1162)\"})),_path639||(_path639=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.99 2.23 4.99 2.44 6.99 2.56 C9.57 3.13 10.53 3.81 12 6 C11.82 8.27 11.82 8.27 11.12 10.81 C9.6 17.29 10.78 21.79 13 28 C6.88 31 6.88 31 3.31 31 C0.23 29.67 -1.05 27.69 -3 25 C-3.66 24.67 -4.32 24.34 -5 24 C-4.61 15.62 -2.47 7.99 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(540,375)\"})),_path640||(_path640=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.45 3.57 5.32 7.47 7.25 12 C7.77 13.2 8.29 14.39 8.83 15.62 C9.9 18.72 10.27 20.78 10 24 C7 23 7 23 5.44 20 C4.73 18.51 4.73 18.51 4 17 C1.45 15.72 -0.05 16.03 -2.88 16.31 C-3.74 16.39 -4.6 16.47 -5.49 16.55 C-8.03 17.01 -9.81 17.64 -12 19 C-13.35 21.7 -13.34 24.12 -13.56 27.12 C-13.65 28.22 -13.73 29.32 -13.82 30.45 C-13.88 31.29 -13.94 32.13 -14 33 C-14.99 32.34 -15.98 31.68 -17 31 C-16.78 26.56 -16.52 22.12 -16.25 17.69 C-16.19 16.42 -16.13 15.16 -16.06 13.86 C-15.99 12.65 -15.91 11.44 -15.83 10.2 C-15.77 9.08 -15.7 7.97 -15.64 6.82 C-15 4 -15 4 -13.06 2.16 C-8.84 -0.21 -4.82 -0.52 0 0 Z \",fill:\"#4B2F63\",transform:\"translate(551,885)\"})),_path641||(_path641=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C23.93 1.64 23.93 1.64 34 7 C30.57 8.14 29.48 7.7 26 7 C23.14 6.65 20.94 6.72 18 7 C15.92 9.35 15.92 9.35 15 12 C12.98 10.07 11.58 8.37 10 6 C7.63 8.05 7.63 8.05 6.61 10.92 C5.84 13.53 4.8 14.33 2.69 16 C2.06 16.52 1.43 17.03 0.79 17.56 C0.2 18.04 -0.39 18.51 -1 19 C-4.82 22.22 -5.27 24.13 -6 29 C-7.56 30.88 -7.56 30.88 -9 32 C-9.66 31.67 -10.32 31.34 -11 31 C-11.24 29.11 -11.24 29.11 -11.31 26.75 C-11.64 23.04 -11.93 22.1 -14.31 19 C-16.71 17.22 -18.08 16.32 -21 16 C-21 15.01 -21 14.02 -21 13 C-19.9 12.96 -18.81 12.93 -17.68 12.89 C-16.22 12.82 -14.77 12.75 -13.31 12.69 C-12.59 12.66 -11.87 12.64 -11.13 12.62 C-6.66 12.39 -3.64 11.84 0 9 C0.52 8.13 1.03 7.27 1.56 6.38 C3 4 3 4 5.19 3.19 C6.08 3.09 6.08 3.09 7 3 C4.36 2.67 1.72 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#0A113C\",transform:\"translate(1056,768)\"})),_path642||(_path642=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.33 1.99 5.66 2.98 6 4 C6.6 4.29 7.2 4.58 7.82 4.88 C15.1 8.63 19.96 19.67 23 27 C24.02 30.23 24.16 33.31 24.31 36.69 C24.61 40.78 25.13 43.76 27.06 47.38 C30.07 53.25 29.33 59.57 29 66 C28.67 66 28.34 66 28 66 C27.92 64.72 27.84 63.45 27.75 62.13 C27.13 56.59 25.21 51.98 22.94 46.94 C22.54 46.03 22.14 45.12 21.73 44.18 C18.08 35.99 14.11 27.97 10 20 C9.48 18.91 8.95 17.82 8.41 16.7 C6.94 13.89 5.26 12.18 3 10 C3 9.34 3 8.68 3 8 C1.68 7.67 0.36 7.34 -1 7 C-1.33 5.35 -1.66 3.7 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#39154B\",transform:\"translate(580,1071)\"})),_path643||(_path643=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.62 -0.25 5.62 -0.25 9 2 C9.27 2.62 9.54 3.24 9.81 3.88 C11.53 6.94 14.05 8.2 17 10 C15.5 14.01 13.23 15.4 9.62 17.56 C2.95 21.09 2.95 21.09 -1 27 C-2.98 27.33 -4.96 27.66 -7 28 C-7 28.66 -7 29.32 -7 30 C-8.65 30 -10.3 30 -12 30 C-12 29.34 -12 28.68 -12 28 C-12.66 27.67 -13.32 27.34 -14 27 C-12.22 19.07 -12.22 19.07 -9.42 16.62 C-7.66 15.65 -5.83 14.82 -4 14 C-0.14 12.18 -0.14 12.18 1.94 8.69 C2.01 5.43 1.19 3.02 0 0 Z \",fill:\"#67486D\",transform:\"translate(590,515)\"})),_path644||(_path644=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.52 0.49 2.52 0.49 4.47 2.54 C5.05 3.43 5.62 4.32 6.21 5.24 C7.08 6.56 7.08 6.56 7.97 7.91 C9.27 10.07 10.45 12.21 11.52 14.49 C12.18 14.16 12.84 13.83 13.52 13.49 C13.52 15.47 13.52 17.45 13.52 19.49 C10.55 18.83 7.58 18.17 4.52 17.49 C4.19 18.15 3.86 18.81 3.52 19.49 C-0.09 20.93 -2.54 21.49 -6.48 21.49 C-4.86 24.2 -3.23 26.86 -1.48 29.49 C-3.13 30.15 -4.78 30.81 -6.48 31.49 C-10.42 26.65 -11.61 24.62 -11.54 18.36 C-11.53 17.27 -11.52 16.17 -11.51 15.04 C-11.5 14.2 -11.49 13.36 -11.48 12.49 C-9.99 13.48 -9.99 13.48 -8.48 14.49 C-8.66 12.97 -8.66 12.97 -8.85 11.43 C-8.41 6.81 -7.19 5.19 -4.28 1.77 C-2.48 0.49 -2.48 0.49 0 0 Z \",fill:\"#53325A\",transform:\"translate(515.4765625,323.51171875)\"})),_path645||(_path645=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93 0.21 1.86 0.41 2.81 0.62 C2.85 1.55 2.85 1.55 2.89 2.49 C3.06 4.93 3.28 7.24 3.81 9.62 C5.75 11.33 5.75 11.33 7.81 12.62 C7.96 13.59 8.1 14.56 8.25 15.56 C8.99 19.59 10.66 20.15 13.81 22.62 C15.5 26.19 15.5 26.19 16.81 29.62 C17.47 30.62 18.13 31.6 18.81 32.62 C16.5 32.44 16.5 32.44 13.81 31.62 C13.42 30.78 13.03 29.93 12.62 29.06 C11.73 27.86 11.73 27.86 10.81 26.62 C8.18 26.29 5.74 26.38 3.09 26.55 C0.81 26.62 0.81 26.62 -1.19 25.62 C-1.19 24.97 -1.19 24.31 -1.19 23.62 C-1.99 23.32 -2.8 23.01 -3.62 22.69 C-6.19 21.62 -6.19 21.62 -7.19 20.62 C-7.48 18.38 -7.69 16.13 -7.88 13.88 C-7.98 12.64 -8.09 11.41 -8.2 10.14 C-8.19 6.64 -7.87 4.66 -6.19 1.62 C-3.19 -0.38 -3.19 -0.38 0 0 Z \",fill:\"#80719E\",transform:\"translate(683.1875,209.375)\"})),_path646||(_path646=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2 3.61 0.7 4.54 -0.69 8 C-1.02 8.87 -1.36 9.73 -1.7 10.62 C-3.73 14.34 -6.1 15.66 -10 17.12 C-12.33 17.8 -14.65 18.42 -17 19 C-17.31 20.54 -17.63 22.08 -17.94 23.62 C-18.22 25 -18.22 25 -18.52 26.41 C-19.07 29.06 -19.07 29.06 -19.19 32.06 C-20.1 35.37 -21.38 36.83 -23.56 39.44 C-26.07 42.5 -26.95 43.61 -27.5 47.62 C-27.04 51.05 -27.04 51.05 -26.19 54.56 C-26 58 -26 58 -27.94 61 C-30.78 63.98 -33.95 66.61 -37.08 69.27 C-38.82 70.84 -40.24 72.41 -41.69 74.25 C-45.58 78.88 -49.04 80.31 -55 81 C-54.67 80.01 -54.34 79.02 -54 78 C-53.34 78 -52.68 78 -52 78 C-50.84 76.87 -49.68 75.73 -48.56 74.56 C-46.77 72.77 -44.87 71.14 -42.94 69.5 C-41.62 68.33 -40.31 67.17 -39 66 C-37.73 64.92 -37.73 64.92 -36.44 63.81 C-34.69 60.39 -35.11 58.94 -35.62 55.19 C-36.21 50.54 -36.11 48.21 -33.25 44.44 C-31.72 42.71 -30.15 41.13 -28.42 39.6 C-26.61 37.56 -25.94 35.55 -25 33 C-23.77 30.5 -22.48 28.04 -21.2 25.57 C-20.1 23.22 -19.53 21.13 -18.94 18.62 C-18.27 16.66 -18.27 16.66 -17 15 C-14.29 13.97 -14.29 13.97 -11.06 13.12 C-6.44 11.97 -6.44 11.97 -3.36 8.57 C-2.41 6.07 -1.67 3.59 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#846A89\",transform:\"translate(776,512)\"})),_path647||(_path647=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 0.38 1.05 0.38 2.12 0.77 C5.82 2.08 9.53 3.28 13.28 4.41 C30.62 9.64 47.13 15.16 63.23 23.52 C65.36 24.62 67.51 25.69 69.66 26.76 C70.38 27.12 71.1 27.47 71.85 27.84 C73.22 28.52 74.59 29.2 75.96 29.87 C85.86 34.8 85.86 34.8 87.65 38.14 C88.28 40.58 88.28 40.58 87.28 42.58 C86.62 42.58 85.96 42.58 85.28 42.58 C84.72 42.02 84.17 41.46 83.59 40.89 C76.6 33.91 67.42 28.49 58.04 25.58 C53.52 23.94 49.47 21.47 45.32 19.06 C42.22 17.55 39.67 17.05 36.28 16.58 C35.54 16.1 34.79 15.63 34.03 15.14 C30.05 12.88 25.82 12.02 21.28 11.58 C20.67 11.77 20.05 11.97 19.42 12.17 C16.58 12.71 15.17 11.99 12.55 10.81 C11.66 10.41 10.78 10.02 9.87 9.61 C8.95 9.19 8.03 8.76 7.09 8.33 C6.16 7.92 5.24 7.51 4.28 7.09 C-0.83 4.76 -0.83 4.76 -2.72 3.58 C-3.05 2.59 -3.38 1.6 -3.72 0.58 C-1.72 -0.42 -1.72 -0.42 0 0 Z \",fill:\"#28132F\",transform:\"translate(1112.722412109375,651.424560546875)\"})),_path648||(_path648=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.47 2.93 0.49 4.74 -0.31 7.88 C-0.58 8.92 -0.84 9.97 -1.11 11.05 C-2.7 16.32 -4.44 18.81 -9 22 C-9.66 22 -10.32 22 -11 22 C-11.33 22.66 -11.66 23.32 -12 24 C-12.76 24.11 -13.52 24.21 -14.3 24.32 C-17.93 25.23 -18.99 26.87 -21.25 29.81 C-21.94 30.69 -22.62 31.56 -23.33 32.46 C-24.84 34.76 -25.57 36.32 -26 39 C-26.66 39 -27.32 39 -28 39 C-28.33 39.99 -28.66 40.98 -29 42 C-29.5 42.49 -29.99 42.97 -30.5 43.48 C-32.31 45.08 -32.31 45.08 -33 48.38 C-35.2 54.69 -40.19 59.41 -44.55 64.34 C-47.55 67.78 -50.37 71.38 -53.22 74.95 C-55 77 -55 77 -57 78 C-54.85 73.48 -52.01 69.57 -49.12 65.5 C-48.6 64.74 -48.07 63.98 -47.52 63.2 C-44.9 59.49 -42.32 56.13 -39 53 C-36.86 49.79 -35.41 46.58 -34 43 C-33.34 42.01 -32.68 41.02 -32 40 C-31.34 40 -30.68 40 -30 40 C-29 37.13 -28.07 34.36 -27.5 31.38 C-26.6 27.12 -24.62 24.4 -21.69 21.25 C-18.67 17.91 -16.37 14.53 -14.24 10.57 C-12.67 8.58 -11.46 8.37 -9 8 C-9 9.32 -9 10.64 -9 12 C-5.03 10.68 -4.7 9.09 -2.81 5.44 C-2.28 4.43 -1.75 3.41 -1.21 2.37 C-0.81 1.59 -0.41 0.81 0 0 Z \",fill:\"#3B1C47\",transform:\"translate(345,635)\"})),_path649||(_path649=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5.33 1.34 5.66 0.68 6 0 C6.9 1.97 7.79 3.95 8.66 5.94 C9.37 7.56 10.09 9.19 10.83 10.8 C14.58 19 17.37 26.59 18.56 35.56 C19.49 42.39 20.66 47.24 26 52 C26.49 52.47 26.98 52.95 27.49 53.43 C32.75 57.84 39.5 59.25 46 61 C46 61.66 46 62.32 46 63 C37.26 63.48 29.92 61.57 23 56 C15.68 48.79 12.93 41.78 11.06 31.88 C8.21 16.57 8.21 16.57 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#1B0E27\",transform:\"translate(569,569)\"})),_path650||(_path650=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.35 0.94 8.68 1.95 13 3 C13.84 3.18 14.68 3.36 15.54 3.55 C18.53 4.37 20.56 5.25 22.15 7.98 C23.68 12.18 24.82 16.57 24 21 C21.94 23.44 21.94 23.44 19 25 C14.95 25 12.67 24.43 9.25 22.25 C5.08 18.08 3.56 14.04 2.38 8.31 C1.55 4.03 1.55 4.03 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(800,292)\"})),_path651||(_path651=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6 4.93 -0.05 8.39 -2 13 C-2.88 14.54 -3.8 16.05 -4.74 17.55 C-8.19 23.21 -11.14 29.06 -14.06 35 C-14.57 36.02 -15.07 37.03 -15.59 38.08 C-16.34 39.59 -16.34 39.59 -17.1 41.12 C-17.58 42.11 -18.07 43.09 -18.57 44.1 C-19.52 46.02 -20.45 47.94 -21.37 49.87 C-21.8 50.75 -22.22 51.64 -22.66 52.55 C-23.04 53.34 -23.41 54.12 -23.79 54.93 C-25.66 58.13 -27.98 59.89 -31 62 C-31.33 61.67 -31.66 61.34 -32 61 C-32.99 62.32 -33.98 63.64 -35 65 C-34.38 60.71 -32.85 57.4 -30.88 53.56 C-30.24 52.32 -29.6 51.07 -28.96 49.82 C-28.47 48.87 -28.47 48.87 -27.97 47.9 C-27.04 46.08 -26.13 44.24 -25.23 42.39 C-21.46 34.72 -17.42 27.31 -13 20 C-12.33 18.88 -11.65 17.76 -10.96 16.61 C-7.5 10.92 -3.98 5.34 0 0 Z \",fill:\"#26122C\",transform:\"translate(240,767)\"})),_path652||(_path652=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.48 3.92 0.53 6.96 -0.43 10.95 C-0.59 11.61 -0.75 12.27 -0.91 12.95 C-1.41 15.05 -1.92 17.15 -2.44 19.25 C-2.78 20.68 -3.12 22.1 -3.46 23.53 C-4.3 27.02 -5.15 30.51 -6 34 C-6.99 34 -7.98 34 -9 34 C-9.07 34.67 -9.15 35.35 -9.22 36.04 C-10.26 39.99 -12.21 42.93 -14.44 46.31 C-14.85 46.96 -15.25 47.6 -15.67 48.27 C-16.72 49.89 -17.86 51.45 -19 53 C-19.66 53 -20.32 53 -21 53 C-21.25 53.66 -21.5 54.32 -21.75 55 C-23.32 58.76 -25.15 62.37 -27 66 C-27.66 65.67 -28.32 65.34 -29 65 C-28.67 62.36 -28.34 59.72 -28 57 C-29.98 57.66 -31.96 58.32 -34 59 C-34.35 55.71 -34.16 54.25 -32.39 51.39 C-31.68 50.54 -30.98 49.69 -30.25 48.81 C-29.55 47.95 -28.86 47.09 -28.14 46.21 C-25.43 43.41 -23.04 42.38 -19.44 41.06 C-16.99 39.99 -15.81 38.9 -14 37 C-13.34 37 -12.68 37 -12 37 C-11.75 35.95 -11.49 34.9 -11.23 33.82 C-8.36 22.06 -4.77 11.15 0 0 Z \",fill:\"#411E4F\",transform:\"translate(353,616)\"})),_path653||(_path653=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10.33 0.99 10.66 1.98 11 3 C11.66 3 12.32 3 13 3 C12.53 7.27 11.97 9.03 9 12 C8.5 14.54 8.5 14.54 9 17 C12.57 19.38 16.07 20.13 20.19 21.06 C20.92 21.24 21.65 21.41 22.4 21.59 C28.7 23.04 35.01 24.18 41.5 24.06 C42.65 24.04 43.81 24.02 45 24 C45 24.66 45 25.32 45 26 C43.89 26.25 42.77 26.49 41.62 26.75 C37.95 27.61 37.95 27.61 36.56 30.12 C36.38 30.74 36.19 31.36 36 32 C33.19 32.19 33.19 32.19 30 32 C28.97 31.03 27.97 30.03 27 29 C21.06 26.21 14.98 25.14 8.55 24.09 C5.08 23.5 2.97 22.98 0 21 C-0.69 18.88 -0.69 18.88 -1 17 C-1.66 17 -2.32 17 -3 17 C-1.2 12.96 1.44 10.2 4.44 7 C6.04 4.94 6.59 3.54 7 1 C4.69 1 2.38 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#351546\",transform:\"translate(222,1149)\"})),_path654||(_path654=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 0.02 2.27 0.04 3.44 0.06 C5.88 4.42 6.94 8.09 7.44 13.06 C9.02 13.29 10.6 13.49 12.19 13.69 C13.07 13.8 13.95 13.92 14.86 14.04 C17.72 14.07 18.97 13.42 21.44 12.06 C27.33 11.39 30.25 12 34.89 15.68 C36.44 17.06 36.44 17.06 37.89 18.73 C39.6 20.5 39.6 20.5 43.44 20.06 C43.44 20.72 43.44 21.38 43.44 22.06 C35.09 21.17 26.77 20.11 18.44 19.06 C18.44 19.72 18.44 20.38 18.44 21.06 C7.38 22.65 7.38 22.65 3.44 20.06 C2.31 18 2.31 18 1.44 16.06 C0.45 15.73 -0.54 15.4 -1.56 15.06 C-3.8 11.12 -4.81 9.11 -3.75 4.62 C-3.36 3.78 -2.97 2.93 -2.56 2.06 C-3.22 1.73 -3.88 1.4 -4.56 1.06 C-3.56 0.06 -3.56 0.06 0 0 Z \",fill:\"#846A89\",transform:\"translate(638.5625,264.9375)\"})),_path655||(_path655=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.33 2.98 2.66 4 3 C11.64 18.84 8.59 38.49 5 55 C4.66 56.67 4.33 58.33 4 60 C3.34 59.01 2.68 58.02 2 57 C0.02 57.49 0.02 57.49 -2 58 C-2.16 53.55 -2.01 49.67 -1 45.32 C0.05 40.24 0.26 35.44 0.2 30.27 C0.19 29.4 0.19 28.53 0.19 27.63 C0.18 24.88 0.15 22.13 0.12 19.38 C0.11 17.49 0.11 15.61 0.1 13.73 C0.08 9.15 0.04 4.58 0 0 Z \",fill:\"#311541\",transform:\"translate(440,1077)\"})),_path656||(_path656=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.79 1.4 2.96 2.99 4.06 5.88 C4.57 7.2 4.57 7.2 5.1 8.55 C5.76 10.36 6.39 12.18 7 14 C6.67 14.66 6.34 15.32 6 16 C6.66 16 7.32 16 8 16 C10.19 19.29 9.99 21.94 9.88 25.79 C10.06 29.04 11.16 31.8 12.27 34.84 C13.28 37.84 13.59 40.87 14 44 C15.58 49.36 17.57 53.6 21 58 C23.01 60.57 24.62 63.04 26 66 C25.34 66 24.68 66 24 66 C23.67 66.66 23.34 67.32 23 68 C13.83 61.67 10.62 51.9 7.96 41.46 C7.06 38.23 5.98 35.18 4.78 32.05 C0.65 21.18 -2.06 11.74 0 0 Z \",fill:\"#341546\",transform:\"translate(1189,715)\"})),_path657||(_path657=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0 2 0 3.66 1.64 C4.57 2.72 4.57 2.72 5.5 3.81 C6.11 4.52 6.72 5.23 7.34 5.96 C10.14 9.41 11.25 11.28 11.12 15.69 C11.11 16.5 11.09 17.3 11.07 18.14 C11.04 19.06 11.04 19.06 11 20 C16.43 21.1 21.67 21.02 27.17 20.79 C33.56 20.65 36.88 22.83 41.5 26.94 C44.27 29.37 47.1 31.71 50 34 C38.38 34.24 27.02 34.04 16 30 C18 28 18 28 20.5 27.77 C21.95 27.79 21.95 27.79 23.44 27.81 C24.41 27.82 25.37 27.83 26.37 27.83 C29 28 29 28 32 29 C32 28.34 32 27.68 32 27 C29.29 26.25 26.8 25.85 24 25.75 C23.26 25.72 22.51 25.69 21.75 25.65 C20.21 25.59 18.66 25.54 17.11 25.48 C13.28 25.31 11.26 25.17 8 23 C7.16 20.1 7.16 20.1 6.5 16.62 C5.69 12.34 5.08 9.19 2 6 C1.01 5.67 0.02 5.34 -1 5 C-1.33 4.01 -1.66 3.02 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#66476C\",transform:\"translate(623,274)\"})),_path658||(_path658=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C0 7 0 7 -1.96 8.85 C-7.53 14.71 -11.35 22.29 -14.81 29.55 C-15.6 31.19 -16.45 32.8 -17.35 34.39 C-20.51 40.11 -21.61 45.07 -22.4 51.53 C-23.45 57.62 -25.74 63.26 -28 69 C-28.66 69 -29.32 69 -30 69 C-30.66 71.64 -31.32 74.28 -32 77 C-32.99 76.67 -33.98 76.34 -35 76 C-34.69 74.75 -34.37 73.51 -34.05 72.22 C-33.61 70.5 -33.18 68.78 -32.75 67.06 C-32.52 66.16 -32.3 65.26 -32.06 64.33 C-30.96 59.95 -29.89 55.58 -28.92 51.17 C-27.33 43.99 -25.8 37.39 -22 31 C-21.34 31 -20.68 31 -20 31 C-19.67 29.02 -19.34 27.04 -19 25 C-18.01 24.67 -17.02 24.34 -16 24 C-14.83 21.07 -14.83 21.07 -14 18 C-13.67 17.34 -13.34 16.68 -13 16 C-12.34 16 -11.68 16 -11 16 C-10.94 15.28 -10.88 14.56 -10.81 13.81 C-9.74 10.09 -7.82 8.62 -5 6 C-3.28 4.04 -1.65 2.02 0 0 Z \",fill:\"#462453\",transform:\"translate(380,577)\"})),_path659||(_path659=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.89 4.33 4.11 8.89 5 14 C4.31 17.31 4.31 17.31 3 20 C2.63 21.11 2.26 22.23 1.88 23.38 C1.59 24.24 1.3 25.11 1 26 C-6.75 26.12 -6.75 26.12 -9 25 C-9 24.34 -9 23.68 -9 23 C-9.99 22.67 -10.98 22.34 -12 22 C-13.24 19.51 -12.95 18.24 -12.62 15.5 C-12.53 14.71 -12.44 13.91 -12.35 13.09 C-12 11 -12 11 -11 9 C-11.06 7.87 -11.12 6.73 -11.19 5.56 C-11 2 -11 2 -9.44 0 C-5.95 -1.43 -3.6 -0.93 0 0 Z \",fill:\"#3A164B\",transform:\"translate(548,660)\"})),_path660||(_path660=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.69 1.26 4.38 2.52 4.06 3.81 C3.34 9.67 6.12 13.1 9.43 17.71 C11 20 11 20 11 22 C16.05 22.94 16.05 22.94 21 22 C25.17 21.85 28.94 22.02 33 23 C33 23.66 33 24.32 33 25 C36.96 24.5 36.96 24.5 41 24 C41 24.66 41 25.32 41 26 C28.62 26.99 28.62 26.99 16 28 C18.21 32.41 20.17 35.81 23.06 39.69 C29 47.68 29 47.68 29 51 C24.19 50.31 22 47.24 19.07 43.59 C15.01 38.06 11.54 32.51 8.38 26.43 C7.16 24.29 5.97 22.67 4.31 20.88 C0.82 16.54 -1.05 12.05 -0.96 6.42 C-0.72 4.27 -0.37 2.13 0 0 Z \",fill:\"#170B22\",transform:\"translate(545,520)\"})),_path661||(_path661=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.05 -0.2 6.05 -0.2 8 0 C10 2 10 2 10.01 5.53 C9.91 7 9.81 8.47 9.69 9.94 C9.63 10.7 9.58 11.46 9.53 12.24 C9.1 18.17 8.6 24.09 8 30 C3.22 29.42 -0.83 28.45 -5 26 C-5.94 22.31 -5.94 22.31 -6 19 C-6.66 19 -7.32 19 -8 19 C-8 18.34 -8 17.68 -8 17 C-7.3 16.76 -6.6 16.52 -5.88 16.27 C-4.97 15.93 -4.06 15.6 -3.12 15.25 C-1.77 14.76 -1.77 14.76 -0.38 14.27 C2.35 12.82 3.01 11.88 4 9 C4 8.34 4 7.68 4 7 C-1.95 8.64 -7.48 10.52 -12.99 13.33 C-15.39 14.13 -16.64 13.82 -19 13 C-14.5 8.83 -10.4 6.67 -4.62 4.69 C-3.52 4.29 -3.52 4.29 -2.39 3.89 C-0.6 3.25 1.2 2.62 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#58385F\",transform:\"translate(674,314)\"})),_path662||(_path662=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.15 1.57 1.15 1.57 2 4 C1.32 6.47 0.56 8.6 -0.44 10.94 C-1.01 12.38 -1.58 13.82 -2.14 15.26 C-2.45 16.03 -2.75 16.79 -3.06 17.58 C-7.91 30.1 -11.68 42.71 -14.18 55.9 C-14.9 59.68 -15.89 63.32 -17 67 C-17.33 67 -17.66 67 -18 67 C-20.04 52.46 -18.84 40.02 -15 26 C-14.34 26 -13.68 26 -13 26 C-12.86 25.41 -12.73 24.81 -12.59 24.2 C-10.68 16.83 -7.23 11.26 -3 5 C-1.99 3.34 -0.99 1.67 0 0 Z \",fill:\"#080928\",transform:\"translate(592,812)\"})),_path663||(_path663=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.36 4.01 2.44 6.99 2.56 10.02 C3.05 13.3 4.03 14.43 6 17 C6.07 19.09 6.07 19.09 5.69 21.38 C5.11 25.69 4.86 29.9 4.81 34.25 C4.79 35.96 4.79 35.96 4.77 37.7 C5.06 41.81 6.03 45.29 8.06 48.88 C9.25 51.56 9.36 54.18 9.66 57.07 C9.91 59.18 9.91 59.18 11.44 61.38 C13.05 64.09 13.35 65.73 13.81 68.81 C14.66 73.73 16.54 76.66 19.76 80.41 C21 82 21 82 21 84 C16.29 82.86 13.48 80.07 10.43 76.49 C8.25 72.69 8.29 69.14 8.36 64.83 C7.9 61.2 6.29 59.81 4 57 C2.83 53.46 1.99 49.9 1.12 46.28 C-0.58 41.3 -3.83 38.98 -8 36 C-3.25 33 -3.25 33 -1 33 C-0.67 30.69 -0.34 28.38 0 26 C0.66 26 1.32 26 2 26 C1.84 25.45 1.68 24.89 1.52 24.33 C0.95 21.78 0.79 19.4 0.68 16.8 C0.64 15.82 0.6 14.84 0.56 13.83 C0.52 12.81 0.48 11.8 0.44 10.75 C0.39 9.72 0.35 8.69 0.31 7.62 C0.2 5.08 0.1 2.54 0 0 Z \",fill:\"#1E0E2E\",transform:\"translate(511,373)\"})),_path664||(_path664=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.05 2.25 3.1 3.51 3.15 4.8 C3.22 6.45 3.3 8.1 3.38 9.75 C3.41 10.57 3.44 11.4 3.47 12.25 C3.51 13.05 3.55 13.85 3.59 14.67 C3.63 15.77 3.63 15.77 3.68 16.89 C4.04 19.26 4.88 20.9 6 23 C7.26 28.37 7.19 33.76 7.19 39.25 C7.19 40.24 7.19 41.22 7.19 42.24 C7.11 54.2 6.08 66.09 5 78 C4.67 78 4.34 78 4 78 C4 64.8 4 51.6 4 38 C2.68 38 1.36 38 0 38 C-0.3 38.93 -0.61 39.86 -0.92 40.82 C-5.25 53.61 -5.25 53.61 -10 59 C-10.66 59 -11.32 59 -12 59 C-12.5 61.48 -12.5 61.48 -13 64 C-14.12 62.44 -14.12 62.44 -15 60 C-14.31 56.38 -14.31 56.38 -13 53 C-12.01 52.34 -11.02 51.68 -10 51 C-10 51.66 -10 52.32 -10 53 C-9.01 52.5 -9.01 52.5 -8 52 C-7.42 50.15 -7.42 50.15 -7 48 C-6.77 47.35 -6.55 46.69 -6.32 46.02 C-4.16 39.71 -3.33 33.5 -2.73 26.89 C-2.37 23.09 -1.69 20.37 0 17 C0.24 13.86 0.24 13.86 0.12 10.5 C0.1 8.81 0.1 8.81 0.07 7.09 C0.05 6.07 0.02 5.05 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(475,437)\"})),_path665||(_path665=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.28 -0.37 4.66 -0.24 7.4 1.68 C10.06 4.06 12.18 6.51 14.38 9.31 C17.48 13.19 20.65 16.79 24.23 20.23 C25.92 21.92 27.46 23.68 29 25.5 C32.01 28.97 35.19 32.24 38.46 35.45 C38.94 35.93 39.42 36.4 39.92 36.88 C41.91 38.84 43.9 40.79 45.91 42.74 C47.39 44.18 48.86 45.63 50.34 47.08 C51.21 47.93 52.08 48.78 52.98 49.65 C54.92 51.9 55.64 53.1 56 56 C50.33 55.8 47.47 52 43.76 48.18 C43.07 47.49 42.38 46.8 41.68 46.09 C39.48 43.88 37.3 41.66 35.12 39.44 C33.67 37.97 32.21 36.5 30.75 35.03 C29.33 33.6 27.92 32.17 26.51 30.75 C25.54 29.76 25.54 29.76 24.54 28.76 C20.71 24.85 17.05 20.84 13.49 16.69 C11.73 14.69 9.82 12.99 7.75 11.31 C3.81 7.97 1.64 4.92 0 0 Z \",fill:\"#2A1238\",transform:\"translate(668,101)\"})),_path666||(_path666=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17 0.12 1.17 0.12 2.37 0.24 C4.56 0.69 4.56 0.69 7.56 2.69 C8.57 4.33 8.57 4.33 9.47 6.27 C9.81 6.98 10.15 7.69 10.5 8.43 C11.02 9.55 11.02 9.55 11.56 10.69 C13.04 13.62 14.55 16.53 16.06 19.44 C16.44 20.18 16.82 20.92 17.21 21.68 C19.29 25.68 21.35 28.5 24.56 31.69 C25.39 34.05 25.39 34.05 25.81 36.44 C25.96 37.24 26.11 38.04 26.27 38.86 C26.36 39.46 26.46 40.07 26.56 40.69 C24.82 39.03 23.62 37.81 22.56 35.62 C21.59 33.36 21.59 33.36 18.56 31.69 C18.07 30.2 18.07 30.2 17.56 28.69 C16.9 28.36 16.24 28.03 15.56 27.69 C15.25 26.7 14.94 25.71 14.62 24.69 C14.27 23.7 13.92 22.71 13.56 21.69 C12.57 21.36 11.58 21.03 10.56 20.69 C10.5 19.99 10.44 19.29 10.38 18.56 C9.24 14.53 7.68 12.48 4.56 9.69 C-1.63 9.49 -5.27 11.48 -10.44 14.69 C-11.1 14.69 -11.76 14.69 -12.44 14.69 C-12.77 16.67 -13.1 18.65 -13.44 20.69 C-14.43 20.69 -15.42 20.69 -16.44 20.69 C-16.77 21.35 -17.1 22.01 -17.44 22.69 C-18.24 19.04 -18.66 16.42 -17.56 12.81 C-13.36 6.63 -8.02 -0.88 0 0 Z \",fill:\"#381943\",transform:\"translate(955.4375,409.3125)\"})),_path667||(_path667=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.85 4.17 16 16.55 19.56 25.38 C21.8 32.67 22.66 40.43 23.67 47.98 C23.97 50.03 23.97 50.03 24.55 52.13 C26.12 58.64 21.77 66.31 19 72 C18.67 72 18.34 72 18 72 C18.02 71.17 18.03 70.34 18.05 69.48 C19.87 43.5 19.87 43.5 10.5 20.52 C9.46 19.46 8.39 18.43 7.31 17.42 C6 16 6 16 6 14 C5.42 13.77 4.85 13.55 4.25 13.31 C1.29 11.59 -0.21 9.92 -2 7 C-1.69 1.69 -1.69 1.69 0 0 Z \",fill:\"#472554\",transform:\"translate(557,1081)\"})),_path668||(_path668=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.11 1.21 3.11 1.21 7 1 C6.67 1.99 6.34 2.98 6 4 C5.01 3.67 4.02 3.34 3 3 C2.67 3.66 2.34 4.32 2 5 C0.95 4.98 -0.1 4.96 -1.19 4.94 C-4.33 4.99 -6.97 5.27 -10 6 C-10 6.66 -10 7.32 -10 8 C-11.45 8.68 -11.45 8.68 -12.94 9.38 C-16.07 10.66 -16.07 10.66 -17 13 C-17.66 13 -18.32 13 -19 13 C-19.08 13.72 -19.16 14.44 -19.25 15.19 C-20.15 18.55 -21.71 20.42 -24 23 C-23.5 23.99 -23.5 23.99 -23 25 C-32.41 29.59 -32.41 29.59 -37 29 C-37 28.67 -37 28.34 -37 28 C-47.89 28.5 -47.89 28.5 -59 29 C-55.22 26.48 -51.93 26.22 -47.5 25.56 C-44.84 25.2 -44.84 25.2 -43 23 C-40.4 22.37 -40.4 22.37 -37.38 21.88 C-36.37 21.71 -35.37 21.54 -34.34 21.37 C-33.57 21.25 -32.79 21.12 -32 21 C-31.89 20.39 -31.78 19.78 -31.67 19.16 C-30.6 15.72 -27.75 14.1 -25 12 C-24.15 11.28 -23.31 10.56 -22.44 9.81 C-20.02 8.01 -17.84 6.97 -15 6 C-15 5.01 -15 4.02 -15 3 C-13.26 2.3 -11.5 1.61 -9.75 0.94 C-8.78 0.55 -7.8 0.17 -6.8 -0.22 C-3.89 -1.03 -2.76 -1.03 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(765,789)\"})),_path669||(_path669=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.07 2.14 1.07 2.14 2.12 4.81 C2.48 5.69 2.83 6.56 3.2 7.46 C4 10 4 10 4 14 C3.34 14.33 2.68 14.66 2 15 C1.1 16.88 1.1 16.88 0.38 19.06 C0.11 19.8 -0.15 20.53 -0.41 21.29 C-0.61 21.85 -0.8 22.42 -1 23 C-0.01 23.33 0.98 23.66 2 24 C2 25.98 2 27.96 2 30 C1.34 30 0.68 30 0 30 C-0.66 31.32 -1.32 32.64 -2 34 C-2.99 34 -3.98 34 -5 34 C-5.92 28.62 -6.11 23.46 -6 18 C-6.66 18 -7.32 18 -8 18 C-11.82 11.55 -13.79 7.42 -12 0 C-7.46 -2.21 -4.52 -2.26 0 0 Z \",fill:\"#280F3B\",transform:\"translate(517,437)\"})),_path670||(_path670=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.28 -1.97 5.83 -4.77 8.91 C-8.65 12.55 -13.12 15 -17.75 17.56 C-19.72 18.69 -21.68 19.82 -23.64 20.95 C-24.57 21.47 -25.5 22 -26.46 22.55 C-32.45 25.97 -38.38 29.39 -43.44 34.12 C-46.39 36.82 -49.41 38.11 -53.12 39.56 C-59.8 42.2 -63.02 45.03 -66.31 51.38 C-68.91 56.31 -72.4 59.85 -77 63 C-77.66 63 -78.32 63 -79 63 C-79.66 64.32 -80.32 65.64 -81 67 C-82 64 -82 64 -80.45 60.71 C-72.86 47.59 -64.09 40.79 -51.05 33.37 C-47.97 31.6 -45.09 29.7 -42.25 27.56 C-37.37 24 -32.06 21.41 -26.69 18.69 C-16.82 13.67 -7.71 8.07 0 0 Z \",fill:\"#715376\",transform:\"translate(795,572)\"})),_path671||(_path671=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.71 0.44 5.09 0.63 7.81 0.66 C8.59 0.67 9.36 0.69 10.16 0.7 C11.76 0.73 13.37 0.73 14.97 0.72 C17.27 0.78 19.22 0.89 21.43 1.55 C23.98 4.6 23.98 4.6 25.43 7.55 C23.12 7.88 20.81 8.21 18.43 8.55 C18.43 7.89 18.43 7.23 18.43 6.55 C17.77 6.77 17.1 6.98 16.42 7.21 C15.53 7.49 14.65 7.76 13.74 8.05 C12.87 8.33 12 8.61 11.11 8.89 C8.44 9.55 6.17 9.67 3.43 9.55 C3.43 10.21 3.43 10.87 3.43 11.55 C2.36 11.94 1.28 12.33 0.18 12.74 C-3.46 14.27 -5.34 16.25 -7.57 19.55 C-13.28 19.13 -16.18 16.98 -20.57 13.55 C-17.47 12.71 -14.79 12.46 -11.57 12.55 C-10.09 9.66 -8.68 6.88 -7.63 3.8 C-6.57 1.55 -6.57 1.55 -4.82 0.18 C-2.57 -0.45 -2.57 -0.45 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(675.5703125,176.44921875)\"})),_path672||(_path672=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.98 0 3.96 0 6 C4.95 7.98 4.95 7.98 10 10 C9.71 13.22 9.32 15.51 7.56 18.25 C3.67 20.91 -0.28 21.99 -5 22 C-7.81 20.12 -7.81 20.12 -10 17 C-10.46 16.37 -10.93 15.74 -11.41 15.09 C-14.26 10.98 -15.64 8.15 -15 3 C-13.44 2.49 -11.88 1.99 -10.31 1.5 C-9.44 1.22 -8.57 0.94 -7.68 0.66 C-5.01 0 -2.74 -0.12 0 0 Z \",fill:\"#7B6A96\",transform:\"translate(607,332)\"})),_path673||(_path673=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.84 2.8 6.62 5.03 9 10 C10.32 10.69 11.66 11.35 13 12 C15.18 13.6 17.31 15.21 19.44 16.88 C20 17.31 20.56 17.74 21.13 18.19 C31.93 26.58 31.93 26.58 36 31 C36 31.66 36 32.32 36 33 C36.66 33 37.32 33 38 33 C38 33.66 38 34.32 38 35 C39.66 35.34 41.33 35.67 43 36 C44.03 36.21 45.06 36.41 46.12 36.62 C49.06 37.22 49.06 37.22 52 36 C51.62 37.94 51.62 37.94 51 40 C50.01 40.5 50.01 40.5 49 41 C49.99 41.99 50.98 42.98 52 44 C49.09 44.81 47.54 45.22 44.69 44.06 C44.13 43.71 43.57 43.36 43 43 C43 42.34 43 41.68 43 41 C42.42 40.91 41.83 40.83 41.23 40.74 C32.13 39.18 23.84 35.9 16 31 C16.66 30.67 17.32 30.34 18 30 C19.18 30.53 19.18 30.53 20.38 31.06 C22.95 32.3 22.95 32.3 25.31 31.12 C25.87 30.75 26.43 30.38 27 30 C26.01 29.22 25.02 28.43 24 27.62 C23.01 26.76 22.02 25.89 21 25 C21 24.34 21 23.68 21 23 C20.34 22.81 19.68 22.63 19 22.44 C9.31 17.79 4.57 9.3 0 0 Z \",fill:\"#341546\",transform:\"translate(999,567)\"})),_path674||(_path674=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.78 1.53 1.57 2.31 2.38 C4.91 5.07 4.91 5.07 8 7 C8.56 9.19 8.56 9.19 9 12 C9.35 13.07 9.7 14.14 10.06 15.25 C11.15 19.62 11.18 23.53 11 28 C9.68 26.68 8.36 25.36 7 24 C4.46 25.36 4.46 25.36 2 27 C2 27.66 2 28.32 2 29 C4.31 29.33 6.62 29.66 9 30 C9.66 31.98 10.32 33.96 11 36 C10.31 35.71 9.63 35.42 8.92 35.12 C8.02 34.75 7.12 34.38 6.19 34 C5.29 33.63 4.4 33.26 3.48 32.88 C0.97 31.83 0.97 31.83 -2 32 C-3.76 29.36 -4.58 27.53 -5.5 24.56 C-6.44 21.54 -7.52 18.8 -9 16 C-4.25 11.12 -4.25 11.12 -2 10 C-1.57 7.91 -1.57 7.91 -1.44 5.5 C-1.1 1.1 -1.1 1.1 0 0 Z \",fill:\"#280F3B\",transform:\"translate(901,441)\"})),_path675||(_path675=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.4 4.13 1.21 5.69 -1.19 9.19 C-2.77 11.68 -3.03 12.73 -2.7 15.71 C-1.2 21.42 0.57 26.38 4.62 30.75 C8.24 32.65 11.97 32.75 16 33 C16 34.65 16 36.3 16 38 C14.51 37.5 14.51 37.5 13 37 C7.92 35.69 2.84 35.87 -2.36 35.99 C-7.11 36.08 -10.56 35.48 -15 34 C-14.5 33.3 -14.01 32.6 -13.5 31.88 C-11.76 28.53 -11.8 26.72 -12.06 23 C-12.2 17.34 -12.2 17.34 -10.31 14.12 C-9.17 13.07 -9.17 13.07 -8 12 C-7.11 10.93 -6.24 9.84 -5.38 8.75 C-3 6 -3 6 -1 5 C-0.34 2.47 -0.34 2.47 0 0 Z \",fill:\"#70567D\",transform:\"translate(552,280)\"})),_path676||(_path676=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.09 1.12 1.17 2.25 1.26 3.4 C2.04 12.08 3.04 18.64 8 26 C8.33 26.99 8.66 27.98 9 29 C9.66 29 10.32 29 11 29 C11.24 29.55 11.48 30.1 11.73 30.66 C12.85 33.18 13.99 35.68 15.12 38.19 C15.5 39.05 15.88 39.92 16.27 40.81 C18.77 46.23 20.96 49.7 26 53 C30.2 53.44 33.9 52.99 38 52 C38.5 53.98 38.5 53.98 39 56 C35.08 57.86 32.13 58.17 27.81 58 C24.73 57.83 24.73 57.83 22 58 C21.34 58.66 20.68 59.32 20 60 C17.5 59.88 17.5 59.88 15 59 C12.75 55.73 12.87 53.07 13.06 49.19 C13.14 43.84 12.77 40.58 10 36 C7.46 33.65 4.87 31.91 2 30 C1.28 27.15 0.74 24.46 0.31 21.56 C0.19 20.75 0.06 19.94 -0.07 19.11 C-0.96 13.11 -1.66 7.06 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#755A7C\",transform:\"translate(846,579)\"})),_path677||(_path677=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 2.31 2.62 2.31 4 5 C3.59 7.17 3.59 7.17 3 9 C2.21 9.04 1.43 9.07 0.62 9.11 C-6.35 9.46 -6.35 9.46 -12.94 11.56 C-15.98 12.99 -17.71 13.3 -21 13 C-20.34 11.68 -19.68 10.36 -19 9 C-21.8 6.96 -23.33 5.97 -26.84 6.14 C-27.86 6.36 -28.88 6.59 -29.94 6.81 C-36.88 8.08 -43.96 8.91 -51 8 C-51.66 7.01 -52.32 6.02 -53 5 C-48.05 5.99 -48.05 5.99 -43 7 C-43 6.34 -43 5.68 -43 5 C-34.32 1.8 -26.71 0.49 -17.53 0.18 C-2.15 -0.59 -2.15 -0.59 0 0 Z \",fill:\"#311541\",transform:\"translate(658,84)\"})),_path678||(_path678=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.24 1.51 5.94 4.09 8 8 C8.56 11.56 8.56 11.56 8 15 C4.75 19.33 1.14 21.4 -4 23 C-7.48 22.96 -7.48 22.96 -11 22 C-13.25 19.23 -13.25 19.23 -15 15.75 C-15.9 14.04 -15.9 14.04 -16.81 12.3 C-18.05 8.85 -18.24 7.39 -17 4 C-15.19 2.19 -15.19 2.19 -13 1 C-11.68 1 -10.36 1 -9 1 C-7.09 3.72 -5.56 6.45 -4 9.38 C-2.91 11.38 -2.91 11.38 -1 14 C0.32 14 1.64 14 3 14 C2.57 11.44 2.16 9.31 0.94 7 C-0.21 4.55 -0.15 2.67 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(860,687)\"})),_path679||(_path679=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.58 0.23 1.15 0.45 1.75 0.69 C-1.58 8.97 -13.16 13.63 -20.62 17.75 C-21.56 18.27 -22.5 18.79 -23.47 19.32 C-30.74 23.2 -38 25.86 -45.99 27.81 C-50.64 28.91 -50.64 28.91 -54.3 31.84 C-54.61 32.45 -54.93 33.06 -55.25 33.69 C-55.91 33.03 -56.57 32.37 -57.25 31.69 C-57.93 31.52 -58.61 31.36 -59.31 31.19 C-59.95 31.02 -60.59 30.86 -61.25 30.69 C-61.58 30.03 -61.91 29.37 -62.25 28.69 C-64.38 28.22 -64.38 28.22 -66.81 28.06 C-67.64 27.99 -68.47 27.91 -69.32 27.84 C-69.95 27.79 -70.59 27.74 -71.25 27.69 C-71.25 27.03 -71.25 26.37 -71.25 25.69 C-70.39 25.64 -69.54 25.59 -68.65 25.54 C-66.94 25.43 -66.94 25.43 -65.19 25.31 C-64.06 25.24 -62.94 25.17 -61.78 25.1 C-58.09 24.67 -54.81 23.72 -51.25 22.69 C-48.81 22.34 -46.38 22.01 -43.94 21.69 C-33.88 20.05 -25.79 15 -17.25 9.69 C-16.66 9.32 -16.06 8.96 -15.45 8.59 C-11.55 6.2 -7.68 3.83 -4.1 0.98 C-2.25 -0.31 -2.25 -0.31 0 0 Z \",fill:\"#120D15\",transform:\"translate(720.25,597.3125)\"})),_path680||(_path680=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5 0.19 3.5 0.19 5.5 1.19 C4.23 5.1 2.99 6.98 -0.5 9.19 C0.65 11.66 1.55 13.24 3.5 15.19 C3.77 18.09 3.77 18.09 3.75 21.56 C3.76 22.7 3.76 23.85 3.77 25.02 C3.52 28.01 3.06 29.68 1.5 32.19 C-0.48 32.19 -2.46 32.19 -4.5 32.19 C-4.75 31.47 -5 30.74 -5.25 30 C-6.35 27.08 -6.35 27.08 -8.69 25 C-11.06 21.31 -10.74 19.14 -10.12 14.89 C-6.79 0.36 -6.79 0.36 0 0 Z \",fill:\"#472554\",transform:\"translate(503.5,1165.8125)\"})),_path681||(_path681=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.74 1.25 4.19 2.63 6 6 C8.64 5.67 11.28 5.34 14 5 C14 4.34 14 3.68 14 3 C14.66 3 15.32 3 16 3 C15.12 7.75 15.12 7.75 14 10 C12.02 10.73 10.02 11.4 8 12 C8 13.98 8 15.96 8 18 C9.98 17.34 11.96 16.68 14 16 C13.67 16.99 13.34 17.98 13 19 C9.4 20.52 6.95 21 3 21 C3.66 22.32 4.32 23.64 5 25 C2.36 25 -0.28 25 -3 25 C-5 17.38 -5 17.38 -5 14 C-5.66 14 -6.32 14 -7 14 C-9.15 10.14 -10.39 7.45 -10 3 C-9.2 3.37 -9.2 3.37 -8.38 3.75 C-4.76 4.13 -2.91 1.98 0 0 Z M14 14 C14.66 14.66 15.32 15.32 16 16 C15.34 16 14.68 16 14 16 C14 15.34 14 14.68 14 14 Z \",fill:\"#2C113E\",transform:\"translate(300,1247)\"})),_path682||(_path682=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.97 2.1 6.44 4.3 9 8 C9 8.66 9 9.32 9 10 C9.66 10 10.32 10 11 10 C11.19 10.82 11.39 11.64 11.59 12.48 C11.98 14.1 11.98 14.1 12.38 15.75 C12.63 16.82 12.89 17.88 13.15 18.98 C13.86 21.9 13.86 21.9 15.03 24 C18.12 30.38 18.33 38.97 18 46 C16.05 42.5 15.05 38.92 14 35.06 C12.87 30.93 11.68 26.95 10 23 C7.03 23.33 4.06 23.66 1 24 C0.67 24.99 0.34 25.98 0 27 C-0.66 27.33 -1.32 27.66 -2 28 C-2.53 29.88 -2.53 29.88 -2.78 32.15 C-2.96 33.41 -2.96 33.41 -3.14 34.7 C-3.26 35.58 -3.38 36.46 -3.5 37.38 C-3.73 39.11 -3.97 40.85 -4.22 42.59 C-4.32 43.36 -4.42 44.13 -4.53 44.93 C-5 47 -5 47 -7 50 C-9.25 43.26 -6.93 33.45 -4.19 27 C-2.19 23.03 0.3 19.52 3 16 C2.2 15.61 1.39 15.22 0.56 14.81 C-2 13 -2 13 -2.81 10.31 C-2.87 9.55 -2.94 8.79 -3 8 C-2.34 7.67 -1.68 7.34 -1 7 C-0.01 7.33 0.98 7.66 2 8 C1.01 7.34 0.02 6.68 -1 6 C-1 5.34 -1 4.68 -1 4 C-0.34 3.67 0.32 3.34 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#290E3D\",transform:\"translate(873,498)\"})),_path683||(_path683=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 3.46 0.5 3.46 1 7 C-0.11 7.43 -1.23 7.87 -2.38 8.31 C-6.18 9.7 -6.18 9.7 -8 13 C-12.35 15.41 -16.17 17 -21.12 17.38 C-24.53 17.71 -27.47 18.4 -30.69 19.56 C-34.27 20.83 -37.17 21.55 -41 21 C-42.88 19.5 -42.88 19.5 -44 18 C-43.01 17.34 -42.02 16.68 -41 16 C-40.09 15.13 -39.18 14.27 -38.25 13.38 C-34.92 10.53 -32.34 10.75 -28 11 C-27.01 10.34 -26.02 9.68 -25 9 C-22.67 9 -20.33 9 -18 9 C-17.01 8.34 -16.02 7.68 -15 7 C-13.68 7 -12.36 7 -11 7 C-11 6.34 -11 5.68 -11 5 C-10.01 4.67 -9.02 4.34 -8 4 C-7.3 2.68 -6.63 1.35 -6 0 C-3.51 -1.25 -2.59 -0.78 0 0 Z \",fill:\"#0C0911\",transform:\"translate(643,253)\"})),_path684||(_path684=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.6 1.45 2.2 1.9 1.79 2.36 C-2.56 7.28 -6.71 12.33 -10.79 17.48 C-15.86 23.25 -20.65 25.44 -28.2 26.23 C-30.51 26.38 -32.81 26.43 -35.12 26.44 C-36.36 26.44 -36.36 26.44 -37.61 26.45 C-46.21 26.28 -53.33 23.83 -61 20 C-60.5 18.52 -60.5 18.52 -60 17 C-57.98 17.29 -55.96 17.59 -53.95 17.88 C-51.92 18.17 -51.92 18.17 -50 17 C-49.01 17.66 -48.02 18.32 -47 19 C-37.47 21.1 -26.9 21.72 -18.27 16.69 C-14.07 13.56 -10.59 9.8 -7 6 C-4.74 3.81 -2.52 1.92 0 0 Z \",fill:\"#462453\",transform:\"translate(410,1188)\"})),_path685||(_path685=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.98 2.1 6.49 4.24 9 8 C9.75 10.81 9.75 10.81 10 13 C10.99 13.33 11.98 13.66 13 14 C17.56 20.93 20.53 28.69 21 37 C20.67 37.99 20.34 38.98 20 40 C20.5 41.65 20.99 43.31 21.52 44.95 C22.37 48.6 22.15 52.28 22 56 C21.67 56 21.34 56 21 56 C20.66 54.42 20.33 52.83 20 51.25 C19.81 50.37 19.63 49.49 19.44 48.58 C19 46 19 46 19 42 C17.52 41.5 17.52 41.5 16 41 C15.01 43.48 15.01 43.48 14 46 C11.8 43.8 11.51 42.98 11 40 C11.01 38.46 11.05 36.92 11.12 35.38 C11.17 25.88 7.81 19.1 2.52 11.35 C1 9 1 9 0 6 C0.33 5.01 0.66 4.02 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#381A44\",transform:\"translate(1199,688)\"})),_path686||(_path686=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.99 3 2.98 3 4 3 C6 6 6 6 6.75 9.44 C8.3 13.85 10.09 14.64 14 17 C15.44 19 15.44 19 16 21 C15.83 21.6 15.65 22.2 15.48 22.82 C14.9 25.47 15.3 27.18 15.94 29.81 C17.65 38.05 17.65 38.05 17 42 C15.29 44.38 13.44 46.58 11.55 48.81 C9.35 51.92 9.73 54.28 10 58 C9.57 61.08 8.85 63.48 7 66 C2.46 68.77 -1.7 70 -7 70 C-8.75 68 -8.75 68 -10 66 C-6.01 63.04 -2.8 62.6 2.01 62.41 C4.4 62.16 4.4 62.16 6 59 C6.57 55.98 6.95 52.96 7.34 49.91 C8.04 46.84 8.96 45.35 11 43 C13.52 39.28 13.44 35.35 13 31 C12.15 28.25 12.15 28.25 11 26 C10.67 25.01 10.34 24.02 10 23 C9.34 22.34 8.68 21.68 8 21 C7.34 20.34 6.68 19.68 6 19 C2.88 19.65 2.88 19.65 2 22 C2.11 21.04 2.21 20.07 2.32 19.08 C2.44 17.81 2.56 16.55 2.69 15.25 C2.82 14 2.94 12.74 3.07 11.45 C2.99 7.63 2.38 6.81 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#28103A\",transform:\"translate(921,365)\"})),_path687||(_path687=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.27 0.45 10.02 1.08 15 3 C15 3.66 15 4.32 15 5 C15.99 5.33 16.98 5.66 18 6 C5.17 19.69 5.17 19.69 -4.09 20.26 C-6 20 -6 20 -9 18 C-10.25 17.4 -11.52 16.82 -12.79 16.27 C-13.51 15.96 -14.22 15.65 -14.95 15.34 C-15.69 15.02 -16.43 14.7 -17.19 14.38 C-17.94 14.05 -18.69 13.73 -19.46 13.39 C-21.3 12.59 -23.15 11.8 -25 11 C-21.08 9.91 -18.93 10.41 -15.1 11.62 C-11.25 12.31 -8.67 11.39 -5.32 9.44 C-4.45 8.82 -3.58 8.2 -2.69 7.56 C-1.8 6.95 -0.92 6.33 -0.01 5.69 C0.65 5.13 1.32 4.58 2 4 C2 3.34 2 2.68 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#836E8F\",transform:\"translate(719,272)\"})),_path688||(_path688=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.54 2.21 3.55 3.65 4 7 C4.21 8.28 4.41 9.56 4.62 10.88 C4.61 12.97 4.61 12.97 4 15 C0.65 18.26 -3.24 20.43 -7.67 21.87 C-10.16 22.81 -10.16 22.81 -11.22 25.17 C-11.5 26.02 -11.78 26.87 -12.06 27.75 C-13.62 32.06 -15.03 35.49 -18 39 C-20.75 39.88 -20.75 39.88 -23 40 C-22.67 39.34 -22.34 38.68 -22 38 C-21.34 38 -20.68 38 -20 38 C-19.71 37.28 -19.42 36.56 -19.12 35.81 C-18.45 34.12 -17.73 32.43 -16.93 30.79 C-15.76 27.29 -15.9 24.3 -15.94 20.62 C-15.83 16.72 -15.64 13.8 -13.11 10.64 C-10.82 8.92 -8.47 7.46 -6 6 C-4.22 4.42 -2.64 2.74 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7C5C7B\",transform:\"translate(611,563)\"})),_path689||(_path689=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 6.27 0 12.54 0 19 C-2.77 17.44 -5.53 15.88 -8.3 14.31 C-10.95 12.78 -10.95 12.78 -14 13 C-14.17 13.75 -14.34 14.5 -14.52 15.27 C-14.76 16.25 -15 17.24 -15.25 18.25 C-15.48 19.22 -15.71 20.2 -15.95 21.2 C-17.12 24.32 -18.51 25.84 -21 28 C-22.55 24.9 -22.27 21.65 -22.31 18.25 C-22.34 17.55 -22.37 16.84 -22.4 16.12 C-22.46 10.96 -21.4 8.09 -18 4 C-14.62 1.74 -12.43 1.44 -8.44 0.88 C-6.7 0.62 -6.7 0.62 -4.93 0.37 C-2 0 -2 0 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(860,509)\"})),_path690||(_path690=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C3.66 2.33 4.32 2.66 5 3 C1.87 11.51 1.87 11.51 -1.75 13.56 C-2.49 13.71 -3.24 13.85 -4 14 C-3.67 15.32 -3.34 16.64 -3 18 C-8.6 20.93 -8.6 20.93 -11.06 21.38 C-13.32 21.94 -13.32 21.94 -15.5 24.5 C-18.05 27.05 -18.74 27.21 -22 28 C-23.28 29.98 -23.28 29.98 -24 32 C-25.15 25.66 -25.1 19.43 -25 13 C-23.15 12.69 -21.29 12.37 -19.44 12.06 C-17.79 11.77 -17.79 11.77 -16.11 11.47 C-13 11 -13 11 -9.12 11 C-5.19 9.74 -4.78 8.45 -2.75 4.94 C-2.29 4.02 -1.83 3.1 -1.36 2.15 C-0.91 1.44 -0.46 0.73 0 0 Z \",fill:\"#503E58\",transform:\"translate(596,255)\"})),_path691||(_path691=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C19.45 7.52 32.04 19.64 45.48 35.3 C46.87 36.85 48.37 38.31 49.88 39.75 C51.95 41.95 52.67 43.04 53 46 C49.68 48.34 46.98 50.18 43 51 C42.73 49.89 42.46 48.77 42.19 47.62 C39.8 41.16 34.15 37.28 29 33 C27.98 32.14 27.98 32.14 26.95 31.25 C25.64 30.15 24.32 29.07 23 28 C23.99 27.67 24.98 27.34 26 27 C26.65 27.69 27.3 28.37 27.98 29.08 C29.29 30.43 29.29 30.43 30.62 31.81 C31.48 32.71 32.34 33.6 33.23 34.52 C36.02 37.01 38.59 38.5 42 40 C41.35 38.33 40.68 36.66 40 35 C39.71 34.28 39.42 33.56 39.12 32.81 C37.7 30.52 36.42 30.18 34 29 C32.27 27.93 30.56 26.82 28.88 25.69 C28.01 25.11 27.14 24.54 26.24 23.95 C23.69 21.73 23.23 20.09 22 17 C17.45 12.46 12.34 8.42 6.5 5.69 C3.18 4.09 1.8 3.14 0 0 Z \",fill:\"#3A1A48\",transform:\"translate(753,127)\"})),_path692||(_path692=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 2.64 2 5.28 2 8 C5.93 7.43 5.93 7.43 9 5 C11.62 5.38 11.62 5.38 14 6 C14.5 7.48 14.5 7.48 15 9 C14.03 10.68 13.02 12.35 12 14 C11.67 15.65 11.34 17.3 11 19 C6.38 19 1.76 19 -3 19 C-3.66 17.68 -4.32 16.36 -5 15 C-8.13 13.82 -9.62 13.87 -12.81 14.94 C-13.53 15.29 -14.26 15.64 -15 16 C-15.33 15.01 -15.66 14.02 -16 13 C-18.02 12.27 -18.02 12.27 -20 12 C-19.36 11.69 -18.72 11.38 -18.06 11.06 C-16.06 10.17 -16.06 10.17 -15 9 C-15 8.34 -15 7.68 -15 7 C-14.3 6.8 -13.6 6.59 -12.88 6.38 C-11.97 6.11 -11.06 5.84 -10.12 5.56 C-9.22 5.3 -8.32 5.03 -7.38 4.75 C-5.02 4.07 -5.02 4.07 -3 3 C-2.67 3.66 -2.34 4.32 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#311243\",transform:\"translate(318,1261)\"})),_path693||(_path693=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.54 1.64 1.08 2.28 0.61 2.94 C-3.7 9.01 -7.76 14.91 -10.62 21.81 C-12.38 25.89 -13.25 26.69 -17.38 28.38 C-24.22 31.44 -26.67 36.63 -30.06 43 C-30.93 44.61 -31.79 46.21 -32.66 47.81 C-33.04 48.52 -33.42 49.23 -33.8 49.96 C-35.06 52.1 -36.47 54.04 -38 56 C-37.84 55.03 -37.68 54.07 -37.52 53.07 C-37.11 50.21 -36.91 47.41 -36.82 44.52 C-36.79 43.36 -36.79 43.36 -36.75 42.18 C-36.71 40.59 -36.68 39 -36.66 37.41 C-36.53 33.91 -36.41 31.64 -34.5 28.65 C-30.99 26.33 -27.35 25.06 -23.38 23.75 C-22.6 23.48 -21.82 23.21 -21.02 22.94 C-15.33 21 -15.33 21 -13 21 C-12.79 20.24 -12.59 19.47 -12.38 18.69 C-9.74 11.61 -6.64 4.1 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(723,618)\"})),_path694||(_path694=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-5.5 4.13 -5.5 4.13 -7.16 5.37 C-9.55 7.16 -11.94 8.96 -14.33 10.76 C-16.22 12.18 -18.11 13.59 -20 15 C-20.96 15.73 -20.96 15.73 -21.94 16.48 C-26.66 20 -26.66 20 -30 20 C-30 20.66 -30 21.32 -30 22 C-30.93 22.33 -31.86 22.66 -32.82 23 C-40.93 25.97 -47.65 29.5 -54.67 34.62 C-62.72 40.48 -71.81 46.19 -81 50 C-83.21 49.59 -83.21 49.59 -85 49 C-83.68 48.34 -82.36 47.68 -81 47 C-81 46.34 -81 45.68 -81 45 C-80.41 44.72 -79.81 44.44 -79.2 44.15 C-74.59 41.92 -70.22 39.56 -65.94 36.75 C-61.17 33.65 -56.27 30.91 -51.25 28.25 C-50.54 27.87 -49.83 27.5 -49.1 27.11 C-45.83 25.4 -42.57 23.78 -39.17 22.34 C-33.95 20.13 -30.18 17.26 -26.31 13.19 C-21.27 8.03 -7.86 -3.93 0 0 Z \",fill:\"#7D6180\",transform:\"translate(766,568)\"})),_path695||(_path695=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.97 1.94 2.94 1.88 3.94 1.81 C8.62 1.78 12.67 3.35 17 5 C17.33 6.65 17.66 8.3 18 10 C17.67 9.01 17.34 8.02 17 7 C14.16 6.77 14.16 6.77 11 8 C8.82 10.84 7.39 14.01 5.88 17.25 C0.43 28.49 0.43 28.49 -3 32 C-6.25 32.81 -6.25 32.81 -9 33 C-9.69 31.31 -9.69 31.31 -10 29 C-8.81 26.75 -8.81 26.75 -7 24 C-6.23 22.66 -5.48 21.3 -4.75 19.94 C-4.22 18.96 -4.22 18.96 -3.67 17.96 C-2.8 16.03 -2.8 16.03 -3.51 14.14 C-4.24 10.96 -3.15 8.78 -2.06 5.75 C-1.68 4.67 -1.3 3.59 -0.91 2.48 C-0.61 1.66 -0.31 0.84 0 0 Z \",fill:\"#58385F\",transform:\"translate(843,470)\"})),_path696||(_path696=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.65 3.01 33.37 10.32 48.56 17.62 C49.64 18.14 50.71 18.65 51.81 19.18 C61.83 24.13 71.04 30.22 79.75 37.21 C81.41 38.53 83.08 39.81 84.78 41.07 C86.16 42.12 86.16 42.12 87.56 43.19 C88.41 43.82 89.26 44.45 90.13 45.11 C92 47 92 47 92 51 C91.01 51 90.02 51 89 51 C89 50.34 89 49.68 89 49 C88.01 48.72 88.01 48.72 87 48.44 C84.26 47.12 82.91 46.1 80.75 44.06 C69.18 33.62 54.63 26.35 41 19 C41 18.01 41 17.02 41 16 C40.29 15.88 39.58 15.76 38.85 15.63 C35.88 14.97 33.26 14.01 30.44 12.88 C24.46 10.53 18.44 8.36 12.38 6.25 C11.5 5.94 10.62 5.64 9.72 5.32 C6.48 4.2 3.25 3.08 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#27122E\",transform:\"translate(1150,617)\"})),_path697||(_path697=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.72 5.13 5.72 5.13 6 10 C5.17 12.71 4.29 15.16 3.19 17.75 C2.91 18.43 2.64 19.12 2.36 19.82 C0.28 24.86 0.28 24.86 -2 26 C-2.66 25.67 -3.32 25.34 -4 25 C-4.04 25.82 -4.07 26.64 -4.11 27.48 C-4.18 28.56 -4.24 29.64 -4.31 30.75 C-4.37 31.82 -4.43 32.88 -4.49 33.98 C-5.03 37.2 -5.89 38.58 -8 41 C-8 41.33 -8 41.66 -8 42 C-8.27 43.5 -8.57 45 -8.88 46.5 C-9.12 47.72 -9.12 47.72 -9.37 48.97 C-9.58 49.64 -9.78 50.31 -10 51 C-10.99 51.5 -10.99 51.5 -12 52 C-12 51.01 -12 50.02 -12 49 C-12.66 48.67 -13.32 48.34 -14 48 C-6.24 9.43 -6.24 9.43 0 0 Z \",fill:\"#593960\",transform:\"translate(541,165)\"})),_path698||(_path698=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.85 1.27 8.78 3.09 12 7 C15.61 14.36 17.86 22.44 20.36 30.23 C22.62 37.17 25.24 43.79 28.75 50.19 C30.2 53.44 30.55 55.48 30 59 C28.56 60.88 28.56 60.88 26 62 C22.98 62.23 20.02 62.17 17 62 C16.34 60.35 15.68 58.7 15 57 C15.66 56.34 16.32 55.68 17 55 C17.25 53.03 17.51 51.05 17.66 49.07 C18 47 18 47 19.08 45.2 C20.29 42.3 19.84 40.78 19.09 37.75 C18.85 36.73 18.6 35.72 18.35 34.67 C18.07 33.6 17.79 32.54 17.5 31.44 C17.22 30.35 16.94 29.27 16.65 28.15 C13.74 17.38 10.56 9.3 1.54 2.24 C1.03 1.83 0.52 1.42 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#7D5C7B\",transform:\"translate(626,405)\"})),_path699||(_path699=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.26 0.53 6.45 1.85 9.69 4.62 C17.39 11 25.52 17.5 35 21 C35.66 20.67 36.32 20.34 37 20 C36.01 18.68 35.02 17.36 34 16 C38.51 17.23 40.83 18.62 44 22 C44.64 22.29 45.28 22.58 45.94 22.88 C49.09 24.6 50.8 27.18 53 30 C51 31 51 31 48 30.06 C47.01 29.71 46.02 29.36 45 29 C42.93 28.85 42.93 28.85 41 30 C39.19 29.14 39.19 29.14 37 27.81 C33.71 25.9 30.5 24.34 26.94 23 C16.86 19.08 4.94 11.86 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2A1237\",transform:\"translate(784,254)\"})),_path700||(_path700=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.8 2.11 4.8 2.11 6 5 C5.45 8.02 5.45 8.02 4.25 11.25 C0.64 21.88 0.64 21.88 3.3 32.41 C4.99 38.65 4.2 45.58 4 52 C3.01 52.5 3.01 52.5 2 53 C2 52.34 2 51.68 2 51 C1.34 51 0.68 51 0 51 C-0.18 50.25 -0.36 49.5 -0.55 48.73 C-1.79 43.69 -3.06 38.73 -4.69 33.81 C-8.23 22.12 -4.75 10.84 0 0 Z \",fill:\"#7A5E82\",transform:\"translate(867,310)\"})),_path701||(_path701=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.86 0.2 5.86 0.2 8 1 C8.93 2.42 9.86 3.84 10.78 5.27 C13.01 8.43 15.81 11.05 18.56 13.75 C19.5 14.69 19.5 14.69 20.46 15.64 C22.45 17.62 24.44 19.59 26.44 21.56 C27.77 22.89 29.11 24.22 30.45 25.54 C33.45 28.53 36.45 31.5 39.46 34.48 C40.91 35.91 42.34 37.36 43.77 38.81 C45.92 41.03 45.92 41.03 48.31 42.69 C48.87 43.12 49.43 43.55 50 44 C50 44.66 50 45.32 50 46 C42.55 46 38.22 41.99 33 37 C28.28 31.83 24.26 26.43 20.56 20.5 C17.47 15.94 14.66 14.55 9.33 13.4 C8.56 13.27 7.79 13.14 7 13 C5.66 12.68 4.33 12.35 3 12 C1.83 8.02 0.74 4.08 0 0 Z \",fill:\"#462453\",transform:\"translate(948,539)\"})),_path702||(_path702=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 1.48 0.5 1.48 1 3 C0.37 2.99 -0.26 2.98 -0.91 2.97 C-3.79 2.93 -6.68 2.9 -9.56 2.88 C-10.55 2.86 -11.54 2.84 -12.56 2.82 C-19.47 2.78 -25.1 2.92 -30.88 7.06 C-33.08 10.11 -33.19 10.53 -33.25 14 C-33.58 20.03 -37.18 24.17 -40.65 28.83 C-43.18 32.24 -45.41 35.77 -47.61 39.39 C-49.3 41.35 -50.49 41.64 -53 42 C-54.39 37.83 -53.1 35.78 -51.45 31.83 C-49.35 27.74 -46.7 24.18 -43.9 20.54 C-42.08 18.11 -40.56 15.6 -39 13 C-37.7 11.63 -36.38 10.28 -35 9 C-35.33 8.01 -35.66 7.02 -36 6 C-25 -2.18 -13.18 -2.07 0 0 Z \",fill:\"#150A1F\",transform:\"translate(551,112)\"})),_path703||(_path703=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.11 1.16 10.75 3.94 15.06 9.75 C16.49 11.83 16.49 11.83 19.44 13.56 C21.44 16.56 21.44 16.56 21.44 19.56 C17.76 18.93 14.1 18.26 10.44 17.56 C9.74 17.43 9.03 17.3 8.31 17.16 C2.42 15.87 -3.37 13.63 -8.56 10.56 C-8.89 9.57 -9.22 8.58 -9.56 7.56 C-7.29 3.28 -4.81 0.76 0 0 Z \",fill:\"#44214E\",transform:\"translate(173.5625,1247.4375)\"})),_path704||(_path704=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.5 1.48 2.5 1.48 3 3 C3.99 3.33 4.98 3.66 6 4 C5.43 6.87 5.14 7.86 3 10 C1.86 13.22 1.15 16.55 0.38 19.88 C0.15 20.85 -0.08 21.83 -0.32 22.84 C-1.97 30.47 -2.41 37.69 -1.9 45.48 C-1.63 50.89 -2.37 53.68 -6 58 C-9.64 60.91 -13.43 61.7 -17.91 62.57 C-20.18 62.99 -20.18 62.99 -23 64 C-25.69 69.26 -26.47 75.19 -27 81 C-27.99 81 -28.98 81 -30 81 C-29.67 77.7 -29.34 74.4 -29 71 C-29.66 70.67 -30.32 70.34 -31 70 C-30.01 69.51 -30.01 69.51 -29 69 C-28.28 67.36 -27.61 65.69 -27 64 C-27.66 63.67 -28.32 63.34 -29 63 C-27.35 60.69 -25.7 58.38 -24 56 C-23.67 56.66 -23.34 57.32 -23 58 C-22.32 57.65 -21.64 57.3 -20.94 56.94 C-18 56 -18 56 -14.5 56.75 C-10.82 57.43 -10.82 57.43 -8.19 54.56 C-5.6 50.89 -4.71 47.41 -4 43 C-4.16 42.39 -4.32 41.78 -4.48 41.15 C-6.27 33.69 -4.27 23.04 -2 15.81 C-0.63 10.59 -0.34 5.38 0 0 Z \",fill:\"#0A123C\",transform:\"translate(1003,1199)\"})),_path705||(_path705=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.07 4.58 1.02 8.99 0.51 13.54 C-0.11 19.51 -0.18 25.44 -0.19 31.44 C-0.2 32.49 -0.21 33.55 -0.22 34.63 C-0.24 41.49 -0.01 48.39 2 55 C2.66 55.33 3.32 55.66 4 56 C4 59.63 4 63.26 4 67 C4.66 67 5.32 67 6 67 C8.89 71.71 8.84 77.09 9.44 82.47 C9.93 85.56 10.51 87.34 12 90 C12.29 91.26 12.58 92.52 12.88 93.81 C13.87 98.08 15.68 101.29 18 105 C16.51 105.99 16.51 105.99 15 107 C14.67 107.66 14.34 108.32 14 109 C7.9 99.41 5.58 89.53 4.77 78.32 C4.38 73.5 3.27 70.34 1 66 C-2.85 54 -3.38 41.43 -3.38 28.94 C-3.38 27.64 -3.38 26.35 -3.38 25.01 C-3.16 6.33 -3.16 6.33 0 0 Z \",fill:\"#230F37\",transform:\"translate(408,823)\"})),_path706||(_path706=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.28 3.42 2.2 4.57 2.06 8.56 C1.83 12.43 1.83 12.43 3 16 C3.66 16 4.32 16 5 16 C5 30.85 5 45.7 5 61 C1 60 1 60 -1.31 57.5 C-3.25 53.48 -3.1 51.59 -2.26 47.34 C-1.88 44.91 -1.88 44.91 -2.48 42.14 C-3.05 38.68 -2.92 35.68 -2.62 32.19 C-2.53 31.05 -2.44 29.91 -2.35 28.73 C-2 26 -2 26 -1 25 C-0.84 23.15 -0.75 21.29 -0.68 19.43 C-0.62 17.75 -0.62 17.75 -0.56 16.03 C-0.52 14.84 -0.48 13.66 -0.44 12.44 C-0.39 11.25 -0.35 10.06 -0.31 8.84 C-0.2 5.89 -0.1 2.95 0 0 Z \",fill:\"#3A1949\",transform:\"translate(1275,827)\"})),_path707||(_path707=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.17 1.59 3.74 4.84 5 8 C5.77 9.83 6.54 11.67 7.31 13.5 C7.74 14.52 8.16 15.55 8.59 16.6 C9.6 19.04 10.62 21.47 11.66 23.9 C12.21 25.22 12.76 26.55 13.31 27.88 C13.82 29.09 14.34 30.3 14.86 31.55 C15.98 34.95 16.23 37.46 16 41 C14.51 41.5 14.51 41.5 13 42 C-1 27.15 -1 27.15 -1 21 C-1.66 21 -2.32 21 -3 21 C-3.19 18.19 -3.19 18.19 -3 15 C-2.49 14.56 -1.99 14.11 -1.46 13.65 C0.29 12.04 0.29 12.04 0.04 9.34 C-0.1 8.36 -0.23 7.38 -0.38 6.38 C-0.61 4.59 -0.83 2.8 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#301838\",transform:\"translate(314,928)\"})),_path708||(_path708=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C7.24 9.67 9.06 19.87 5.65 28.37 C4 31 4 31 1.31 31.88 C0.55 31.92 -0.21 31.96 -1 32 C-4.97 27.42 -4.91 22.87 -5 17 C-4.77 13.98 -4.38 11.01 -4 8 C-4.33 7.34 -4.66 6.68 -5 6 C-3.35 4.02 -1.7 2.04 0 0 Z \",fill:\"#301243\",transform:\"translate(609,653)\"})),_path709||(_path709=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12 0.38 2.12 0.38 4 1 C4.28 8.17 3.2 14.95 2 22 C1.34 22 0.68 22 0 22 C-0.66 23.98 -1.32 25.96 -2 28 C-2.66 28 -3.32 28 -4 28 C-3.67 24.7 -3.34 21.4 -3 18 C-3.99 18 -4.98 18 -6 18 C-6.14 18.53 -6.27 19.07 -6.41 19.62 C-8.07 25.37 -10.61 29.51 -14.16 34.3 C-16.78 38.15 -18.74 42.24 -20.74 46.43 C-22 49 -22 49 -24 52 C-24.66 52 -25.32 52 -26 52 C-24.44 46.92 -22.77 42.55 -20 38 C-18.59 34.7 -17.28 31.36 -16 28 C-15.34 28 -14.68 28 -14 28 C-13.71 27.13 -13.42 26.27 -13.12 25.38 C-12.75 24.26 -12.38 23.15 -12 22 C-11.69 20.97 -11.38 19.94 -11.06 18.88 C-10 16 -10 16 -8.59 14.14 C-6.86 11.82 -5.68 9.49 -4.44 6.88 C-3.11 4.09 -2.19 2.19 0 0 Z \",fill:\"#351447\",transform:\"translate(475,649)\"})),_path710||(_path710=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C18.19 15.22 18.19 15.22 21 25.75 C21 29.1 20.32 30.98 19 34 C16.06 33.72 13.12 33.43 10.19 33.12 C9.35 33.05 8.52 32.97 7.66 32.89 C6.86 32.8 6.06 32.72 5.23 32.63 C4.49 32.56 3.75 32.49 2.99 32.41 C1 32 1 32 -2 30 C0.3 28.85 1.88 28.83 4.44 28.69 C8.09 28.33 8.09 28.33 11.06 26.25 C12.19 23.54 12.44 21.91 12 19 C10.6 16.72 10.6 16.72 9 15 C8.75 15.89 8.51 16.77 8.25 17.69 C6.94 21.17 5.59 23.34 3 26 C0.75 26.81 0.75 26.81 -1 27 C-1.33 26.34 -1.66 25.68 -2 25 C-0.82 22.83 -0.82 22.83 0.88 20.25 C4.24 15.02 4.24 15.02 5 9 C3.51 6.79 1.8 4.98 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#45245A\",transform:\"translate(1140,695)\"})),_path711||(_path711=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 -0.12 2.88 -0.12 6 0 C6.66 0.66 7.32 1.32 8 2 C7.67 2.62 7.34 3.24 7 3.88 C5.86 5.91 5.86 5.91 6 8 C6.99 8 7.98 8 9 8 C9.05 8.89 9.1 9.78 9.15 10.7 C9.22 11.87 9.3 13.04 9.38 14.25 C9.44 15.41 9.51 16.57 9.59 17.77 C9.97 20.73 10.37 22.54 12 25 C12.66 25.33 13.32 25.66 14 26 C14 27.32 14 28.64 14 30 C14.56 30.19 15.11 30.37 15.69 30.56 C18.57 32.35 19.83 34.47 21.7 37.25 C23.46 39.61 25.68 41.21 28 43 C28 43.66 28 44.32 28 45 C28.78 45.31 29.57 45.62 30.38 45.94 C33 47 33 47 35 48 C35 48.99 35 49.98 35 51 C35.99 51.5 35.99 51.5 37 52 C36.01 52.33 35.02 52.66 34 53 C32.66 52.01 31.33 51.01 30 50 C27.92 49.24 25.83 48.57 23.71 47.94 C22 47 22 47 21.26 44.9 C21.18 44.27 21.09 43.65 21 43 C20.34 43 19.68 43 19 43 C18.77 42.05 18.55 41.1 18.31 40.12 C17.31 36.81 17.31 36.81 14.38 35.62 C13.59 35.42 12.81 35.21 12 35 C12 34.34 12 33.68 12 33 C11.34 33 10.68 33 10 33 C10 32.34 10 31.68 10 31 C9.34 31 8.68 31 8 31 C7.88 30.24 7.75 29.47 7.62 28.69 C7.12 25.8 7.12 25.8 5 23 C4.4 20.47 3.99 17.94 3.56 15.38 C3.09 12.75 3.09 12.75 1 10 C0.59 7.52 0.59 7.52 0.38 4.81 C0.3 3.91 0.23 3.01 0.15 2.08 C0.1 1.39 0.05 0.71 0 0 Z \",fill:\"#3B2D3F\",transform:\"translate(515,409)\"})),_path712||(_path712=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.37 19.49 2.37 19.49 1 27 C0.67 27.33 0.34 27.66 0 28 C-0.4 30.52 -0.75 33.03 -1.06 35.56 C-1.15 36.27 -1.24 36.98 -1.34 37.72 C-1.56 39.48 -1.78 41.24 -2 43 C-2.33 43 -2.66 43 -3 43 C-3 41.82 -3 40.65 -3 39.44 C-3.46 35.36 -4.84 33.9 -8 31.38 C-11.88 28.26 -11.88 28.26 -13.25 25.25 C-12.86 20.16 -10.94 15.68 -9 11 C-8.34 11 -7.68 11 -7 11 C-6.75 10.36 -6.5 9.72 -6.25 9.06 C-5 7 -5 7 -2.88 6.25 C-2.26 6.17 -1.64 6.08 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#614267\",transform:\"translate(570,270)\"})),_path713||(_path713=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.87 3.38 -1.74 3.76 -2.64 4.14 C-12.04 8.49 -18.71 13.63 -26 21 C-27.08 22.02 -27.08 22.02 -28.19 23.06 C-30.07 25.07 -31.16 26.92 -32.38 29.38 C-34.03 32.51 -35.64 34.84 -38.25 37.25 C-41.23 40.23 -41.43 41.02 -42 45 C-43.22 47.73 -44.59 50.36 -46 53 C-46.66 53 -47.32 53 -48 53 C-48 53.66 -48 54.32 -48 55 C-48.66 55 -49.32 55 -50 55 C-49.68 49.71 -48.57 47.09 -45.33 42.96 C-43.29 39.96 -42.18 36.67 -40.89 33.3 C-39.22 28.99 -37.93 26.6 -34 24.06 C-30.46 21.63 -29.76 19.88 -28 16 C-24.18 8.82 -20.72 5.51 -13 3 C-11.79 2.56 -11.79 2.56 -10.56 2.1 C-6.75 0.73 -4.13 0 0 0 Z \",fill:\"#080D31\",transform:\"translate(1040,774)\"})),_path714||(_path714=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.36 0.9 2.36 0.9 2.73 1.83 C4.73 6.77 4.73 6.77 7.94 10.94 C10.1 13.1 10.92 14.75 12.19 17.5 C14.76 22.91 18.14 27.43 21.82 32.14 C24.01 35.02 26.02 37.97 28 41 C28.61 41.93 28.61 41.93 29.23 42.87 C31.78 47.04 32.61 50.24 33 55 C32.01 54.5 32.01 54.5 31 54 C31 53.01 31 52.02 31 51 C28.09 49.46 25.18 48.37 22.06 47.31 C16.78 45.26 14.8 42.85 12 38 C14.75 33.12 14.75 33.12 17 32 C17 31.34 17 30.68 17 30 C16.34 29.34 15.68 28.68 15 28 C14.67 27.01 14.34 26.02 14 25 C13.01 25 12.02 25 11 25 C11 24.34 11 23.68 11 23 C10.34 23 9.68 23 9 23 C5.23 16.6 5.23 16.6 3.88 13.12 C3.2 10.83 3.2 10.83 1 10 C-0.26 5.52 -0.26 5.52 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#290F3C\",transform:\"translate(544,532)\"})),_path715||(_path715=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.72 1.92 2.44 1.83 3.19 1.75 C6 2 6 2 8.56 4.06 C9.77 5.02 9.77 5.02 11 6 C13.13 5.68 13.13 5.68 15 5 C15.44 5.89 15.44 5.89 15.88 6.79 C18.67 12.17 21.25 15.31 26 19 C27.38 21.31 27.38 21.31 28 23 C23.81 22.07 20.08 21.08 17 18 C12.59 18.29 9.64 19.54 6 22 C0 16 0 16 -0.1 12.4 C-0.09 10.91 -0.08 9.43 -0.06 7.94 C-0.06 7.18 -0.05 6.42 -0.05 5.64 C-0.04 3.76 -0.02 1.88 0 0 Z \",fill:\"#53315A\",transform:\"translate(871,346)\"})),_path716||(_path716=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C2.32 4 3.64 4 5 4 C5.15 8.16 5.21 11.27 4.03 15.3 C2.95 19.18 2.59 22.67 2.38 26.69 C2.34 27.38 2.3 28.07 2.26 28.78 C1.95 34.85 1.9 40.92 2 47 C0.02 47.5 0.02 47.5 -2 48 C-2.33 47.34 -2.66 46.68 -3 46 C-3.99 45.67 -4.98 45.34 -6 45 C-6.5 43.51 -6.5 43.51 -7 42 C-6.34 42 -5.68 42 -5 42 C-5 41.67 -5 41.34 -5 41 C-5 39.68 -5 38.36 -5 37 C-5.66 36.34 -6.32 35.68 -7 35 C-6.34 35 -5.68 35 -5 35 C-5.01 34.14 -5.02 33.29 -5.04 32.4 C-5.08 26.49 -5.09 20.82 -4 15 C-3.78 13.83 -3.78 13.83 -3.56 12.64 C-2.99 9.94 -2.25 7.33 -1.44 4.69 C-1.17 3.8 -0.9 2.92 -0.62 2.01 C-0.42 1.35 -0.21 0.68 0 0 Z \",fill:\"#0D0A11\",transform:\"translate(573,283)\"})),_path717||(_path717=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.37 1.11 0.74 1.69 1.12 C0.64 1.74 0.64 1.74 -0.44 2.38 C-3.45 4.21 -6.38 6.15 -9.31 8.12 C-12.8 10.45 -15.18 10.76 -19.31 11.12 C-20.3 10.79 -21.29 10.47 -22.31 10.12 C-22.64 10.78 -22.97 11.45 -23.31 12.12 C-23.31 11.47 -23.31 10.8 -23.31 10.12 C-24.96 11.12 -26.61 12.11 -28.31 13.12 C-28.97 12.47 -29.63 11.8 -30.31 11.12 C-31.3 11.62 -31.3 11.62 -32.31 12.12 C-35 12.28 -37.68 12.4 -40.38 12.5 C-46.86 12.79 -52.27 13.6 -58.31 16.12 C-58.97 15.47 -59.63 14.8 -60.31 14.12 C-60.97 13.79 -61.63 13.47 -62.31 13.12 C-62.31 12.13 -62.31 11.14 -62.31 10.12 C-54.99 8.25 -47.97 7.71 -40.44 7.31 C-28.01 6.54 -15.99 4.8 -4.45 -0.09 C-2.31 -0.88 -2.31 -0.88 0 0 Z \",fill:\"#080D30\",transform:\"translate(749.3125,793.875)\"})),_path718||(_path718=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1 6 C-1.89 6.54 -2.78 7.08 -3.7 7.64 C-8.04 10.38 -10.26 14.43 -12.88 18.75 C-13.4 19.6 -13.92 20.44 -14.46 21.31 C-20.02 30.46 -24.67 39.96 -29.16 49.67 C-29.52 50.44 -29.88 51.22 -30.25 52.02 C-30.94 53.51 -31.62 55.01 -32.3 56.51 C-33.86 59.9 -35.28 62.46 -38 65 C-39.08 66.08 -39.08 66.08 -40.19 67.19 C-40.79 67.79 -41.38 68.38 -42 69 C-41.61 65.72 -40.99 63.98 -39.06 61.25 C-36.53 57.27 -35.78 53.6 -35 49 C-34.34 49 -33.68 49 -33 49 C-32.91 48.01 -32.82 47.01 -32.73 45.99 C-32.09 41.6 -30.4 38.03 -28.38 34.12 C-28.02 33.42 -27.66 32.72 -27.29 32 C-23.25 24.27 -18.23 18.08 -12 12 C-9.97 9.71 -7.96 7.4 -5.96 5.09 C-4.1 3.11 -2.22 1.55 0 0 Z \",fill:\"#30163E\",transform:\"translate(324,748)\"})),_path719||(_path719=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.4 4.88 25.32 4.34 36.86 0.51 C39.3 -0.49 41.66 -1.55 44.02 -2.71 C46.37 -3.71 48.34 -3.82 50.86 -3.49 C49.86 -0.49 49.86 -0.49 46.55 1.26 C45.14 1.88 43.72 2.48 42.3 3.07 C41.61 3.37 40.92 3.68 40.21 3.99 C27.06 9.61 11.29 11.56 -2.27 6.2 C-10.75 2.44 -10.75 2.44 -12.06 -0.73 C-12.08 -1.31 -12.11 -1.89 -12.14 -2.49 C-7.5 -4.04 -4.29 -2.04 0 0 Z \",fill:\"#0C0911\",transform:\"translate(612.13671875,378.4921875)\"})),_path720||(_path720=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.65 0.67 -0.65 0.67 -1.31 1.36 C-4.82 5.07 -4.82 5.07 -6.56 9.75 C-5.91 12.34 -5.07 13.36 -3 15 C-5 18 -5 18 -7.06 18.43 C-9.44 18.44 -11.65 18.41 -14 18 C-15.62 16 -15.62 16 -17 14 C-21.47 13.58 -25.61 14.14 -30 15 C-30.33 13.68 -30.66 12.36 -31 11 C-22.97 2.78 -11.35 -0.26 0 0 Z \",fill:\"#341446\",transform:\"translate(613,99)\"})),_path721||(_path721=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.99 2.33 11.13 12.97 14.5 19.19 C17.68 25.8 17.57 30.43 16.44 37.5 C14.44 42.37 11.93 46.45 8 50 C5.09 51.03 3.14 51.06 0 51 C-0.5 49.51 -0.5 49.51 -1 48 C-0.26 47.77 0.49 47.55 1.25 47.31 C5.25 45.4 7.16 42.7 9.1 38.77 C10.2 35.38 10.27 32.5 10.25 28.94 C10.26 27.13 10.26 27.13 10.27 25.28 C9.9 20.78 8.94 18.89 5.69 15.81 C2.34 12.31 -2 7.08 -2 2 C-1.34 1.67 -0.68 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#412D49\",transform:\"translate(609,411)\"})),_path722||(_path722=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.01 3.03 1.13 5.27 1.25 8.44 C1.59 13.24 2.6 16.92 4.56 21.31 C8.44 30.01 7.14 38.09 4 47 C2.51 47.5 2.51 47.5 1 48 C0.67 48.99 0.34 49.98 0 51 C-1.29 52.37 -2.62 53.71 -4 55 C-4.66 54.67 -5.32 54.34 -6 54 C-5.46 53.22 -5.46 53.22 -4.91 52.43 C-1.29 47.2 -1.29 47.2 -1 41 C-1.66 41.66 -2.32 42.32 -3 43 C-3.66 42.34 -4.32 41.68 -5 41 C-4.34 40.36 -3.68 39.72 -3 39.06 C0.06 34.37 -0.31 30.32 -1.41 25.02 C-2.09 22.04 -2.8 19.07 -3.58 16.12 C-4.64 11.99 -5.35 8.3 -5 4 C-3.45 1.96 -2.28 1.14 0 0 Z \",fill:\"#765B7C\",transform:\"translate(575,357)\"})),_path723||(_path723=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 0.57 7.42 2.28 11.19 4.69 C15.21 7.24 19.25 9.74 23.38 12.12 C34.2 18.61 34.2 18.61 36 24 C34.62 26.06 34.62 26.06 33 28 C32.67 28.66 32.34 29.32 32 30 C31.75 29.38 31.51 28.76 31.25 28.12 C29.76 25.6 28.65 25.13 26 24 C25.01 23.34 24.02 22.68 23 22 C21.95 21.75 20.9 21.5 19.81 21.25 C15.13 19.96 11.3 17.57 8 14 C7.24 11.95 6.89 10.05 6.56 7.9 C5.54 4.46 2.83 3.03 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#341546\",transform:\"translate(1097,761)\"})),_path724||(_path724=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.15 4.85 8.93 10.61 11.06 17.38 C11 20 11 20 9.94 22.38 C8 24 8 24 5.31 24.5 C1.14 23.87 -2.63 22.61 -6 20 C-6.36 18.67 -6.69 17.34 -7 16 C-7.99 15.34 -8.98 14.68 -10 14 C-10.69 11.88 -10.69 11.88 -11 10 C-10.37 9.61 -9.75 9.23 -9.1 8.83 C-8.28 8.31 -7.47 7.79 -6.62 7.25 C-5.41 6.48 -5.41 6.48 -4.16 5.7 C-1.91 3.93 -1.04 2.63 0 0 Z \",fill:\"#45224F\",transform:\"translate(858,181)\"})),_path725||(_path725=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 -0.56 2.88 -0.56 6 0 C9.02 2.04 11.44 4.43 14 7 C13.44 7.17 12.89 7.34 12.31 7.52 C2.65 10.11 2.65 10.11 -4.38 16.44 C-4.58 17.28 -4.79 18.13 -5 19 C-5.67 20.67 -6.33 22.33 -7 24 C-7.99 24 -8.98 24 -10 24 C-10.33 24.66 -10.66 25.32 -11 26 C-13.34 25.74 -15.68 25.41 -18 25 C-18.33 24.34 -18.66 23.68 -19 23 C-17.68 23 -16.36 23 -15 23 C-14.58 20.13 -14.58 20.13 -15 17 C-17.41 15.14 -17.41 15.14 -20 14 C-20 13.67 -20 13.34 -20 13 C-14.55 12.5 -14.55 12.5 -9 12 C-9.33 10.02 -9.66 8.04 -10 6 C-8.91 5.94 -7.81 5.88 -6.69 5.81 C-5.47 5.54 -4.25 5.28 -3 5 C-1.99 3.34 -0.99 1.67 0 0 Z \",fill:\"#45324C\",transform:\"translate(615,300)\"})),_path726||(_path726=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -0.45 4.78 C-1.44 8.78 -1.79 12.91 -2.3 17 C-3.02 20.08 -3.45 21.22 -6 23 C-6.93 23.12 -7.86 23.25 -8.81 23.38 C-13.07 24.21 -14.99 25.92 -18 29 C-19.21 32.05 -19.21 32.05 -20 35 C-21.56 36.88 -21.56 36.88 -23 38 C-23.33 38 -23.66 38 -24 38 C-25.1 32.04 -25.44 28.28 -22 23 C-20.73 21.19 -19.45 19.39 -18.14 17.61 C-16.88 15.83 -15.88 14 -15 12 C-14.34 12.66 -13.68 13.32 -13 14 C-12.34 12.99 -11.68 11.98 -11 10.94 C-7.93 6.6 -4.1 3.35 0 0 Z \",fill:\"#593960\",transform:\"translate(1037,1096)\"})),_path727||(_path727=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.42 4.75 5.52 9.36 5.38 15.71 C5 18 5 18 2.88 20.19 C-0.8 21.23 -2.4 21.4 -6 20 C-10.82 15.57 -12.66 11.15 -12.99 4.69 C-12.99 4.13 -13 3.57 -13 3 C-11.02 3 -9.04 3 -7 3 C-7 2.01 -7 1.02 -7 0 C-4.24 -1.38 -2.9 -0.92 0 0 Z \",fill:\"#7C6E9E\",transform:\"translate(561,414)\"})),_path728||(_path728=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.77 1.94 6.13 4.15 8.76 7.47 C10.67 9.83 12.83 11.88 15 14 C15.6 14.61 16.2 15.22 16.81 15.84 C20.65 19.74 24.57 23.43 28.7 27 C31.65 29.57 34.59 32.14 37.5 34.75 C38.31 35.46 38.31 35.46 39.14 36.18 C40.48 37.39 41.75 38.69 43 40 C43 40.99 43 41.98 43 43 C40 44 40 44 37.55 42.81 C31.7 39.03 26.61 35.22 22 30 C21.49 29.44 20.99 28.88 20.46 28.3 C17 24.32 17 24.32 17 22 C16.42 21.77 15.85 21.54 15.25 21.3 C12.43 19.67 10.98 17.76 9 15.19 C8.01 13.91 8.01 13.91 7 12.61 C6.34 11.75 5.68 10.89 5 10 C4.27 9.13 3.55 8.25 2.8 7.35 C0.87 4.83 0.36 3.12 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(855,241)\"})),_path729||(_path729=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.5 -0.99 0.5 -2 1 C-2 1.66 -2 2.32 -2 3 C-2.99 3.5 -2.99 3.5 -4 4 C-3.43 8.13 -3.43 8.13 -2 12 C-1.01 12.33 -0.02 12.66 1 13 C1 13.66 1 14.32 1 15 C1.93 14.75 1.93 14.75 2.87 14.49 C9.25 12.96 13.77 13.04 20 15 C21.24 15.31 22.48 15.62 23.75 15.94 C28.7 17.83 32.47 21.56 36.34 25.06 C39.46 27.86 42.14 29.47 46 31 C46.81 34.12 46.81 34.12 47 37 C46.01 36.13 45.02 35.27 44 34.38 C40.64 31.47 37.13 28.86 33.5 26.3 C33.01 25.87 32.51 25.44 32 25 C32 24.34 32 23.68 32 23 C31.25 22.81 30.5 22.61 29.73 22.41 C28.75 22.15 27.76 21.89 26.75 21.62 C25.29 21.24 25.29 21.24 23.8 20.85 C21 20 21 20 18.84 18.91 C16.22 17.62 13.88 17.87 11 18 C11 17.34 11 16.68 11 16 C1.1 17.48 1.1 17.48 -9 19 C-9.66 17.35 -10.32 15.7 -11 14 C-11.66 13.34 -12.32 12.68 -13 12 C-12.62 8.38 -12.62 8.38 -12 5 C-11.01 4.67 -10.02 4.34 -9 4 C-8.67 3.01 -8.34 2.02 -8 1 C-5.29 -0.35 -2.99 -0.07 0 0 Z \",fill:\"#3A1A48\",transform:\"translate(619,99)\"})),_path730||(_path730=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.4 0.51 6.87 3.08 10 6 C10 6.66 10 7.32 10 8 C10.8 8.27 11.61 8.54 12.44 8.81 C13.28 9.2 14.13 9.6 15 10 C15.33 10.99 15.66 11.98 16 13 C12.83 16.26 9.6 19.22 6 22 C3.04 20.61 0.45 19 -2.19 17.06 C-2.88 16.56 -3.58 16.05 -4.29 15.54 C-6 14 -6 14 -7 11 C-7.66 10.34 -8.32 9.68 -9 9 C-8.52 8.6 -8.04 8.2 -7.54 7.79 C-6.91 7.26 -6.28 6.73 -5.62 6.19 C-5 5.67 -4.37 5.14 -3.73 4.61 C-1.78 2.92 -1.78 2.92 0 0 Z \",fill:\"#3C194D\",transform:\"translate(152,1231)\"})),_path731||(_path731=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C5.34 3.51 3.27 6.55 1.02 9.71 C-0.68 13.53 -0.68 17.03 0.69 21 C1.64 23.11 2.67 25.14 3.75 27.19 C4.1 27.89 4.45 28.58 4.8 29.3 C7.09 33.76 9.36 37.68 14 40 C16.2 40.23 18.41 40.41 20.62 40.56 C21.81 40.65 23 40.73 24.23 40.82 C25.6 40.91 25.6 40.91 27 41 C27.33 41.99 27.66 42.98 28 44 C24.44 46.26 21.87 46.07 17.75 45.62 C16.67 45.51 15.59 45.4 14.48 45.29 C13.66 45.19 12.84 45.1 12 45 C11.67 45.66 11.34 46.32 11 47 C10.38 46.05 9.76 45.1 9.12 44.12 C7.18 41.06 7.18 41.06 5 39 C2.15 35.08 0.52 31.57 -1 27 C-2.44 25.31 -2.44 25.31 -4 24 C-6.49 20.26 -7 18.52 -7 14 C-5.67 11.01 -4.13 8.26 -2.45 5.45 C-0.88 3 -0.88 3 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(1034,1016)\"})),_path732||(_path732=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 12.21 4 24.42 4 37 C-1 36 -1 36 -3.25 33.81 C-6.37 28.68 -6.04 21.83 -6 16 C-5.67 15.67 -5.34 15.34 -5 15 C-4.87 13.61 -4.77 12.21 -4.69 10.81 C-4.23 6.31 -3.09 3.44 0 0 Z \",fill:\"#270F3A\",transform:\"translate(1276,988)\"})),_path733||(_path733=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 16.5 1 33 1 50 C0.34 50 -0.32 50 -1 50 C-1.19 50.65 -1.39 51.29 -1.59 51.96 C-3 54 -3 54 -5.98 54.54 C-7.18 54.57 -8.38 54.6 -9.62 54.62 C-15.41 54.83 -15.41 54.83 -21 56.12 C-26.8 57.85 -33.09 56.61 -39 56 C-38.33 55.41 -37.67 54.81 -36.98 54.2 C-36.33 53.48 -35.67 52.75 -35 52 C-35.14 48.8 -35.14 48.8 -36 46 C-35.01 46 -34.02 46 -33 46 C-32 47 -31 48 -30 49 C-22 50.7 -12.07 50.55 -4.66 46.82 C-2.27 44.19 -2.2 42.15 -1.81 38.62 C-1.74 37.96 -1.67 37.3 -1.59 36.62 C-0.4 24.47 -0.3 12.19 0 0 Z \",fill:\"#442255\",transform:\"translate(401,846)\"})),_path734||(_path734=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.79 1.02 3.82 1.66 5.23 4.32 C5.55 5.25 5.86 6.17 6.19 7.12 C6.67 8.49 6.67 8.49 7.17 9.88 C8 13 8 13 9 21 C1.74 21 -5.52 21 -13 21 C-12 14.98 -11.4 13.71 -7.62 9.38 C-6.83 8.45 -6.04 7.53 -5.23 6.59 C-4.49 5.73 -3.76 4.88 -3 4 C-1.99 2.68 -0.98 1.35 0 0 Z \",fill:\"#0F1541\",transform:\"translate(907,1259)\"})),_path735||(_path735=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.19 1.57 0.37 2.38 0.56 C3.18 0.78 3.18 0.78 4 1 C4 0.34 4 -0.32 4 -1 C9.34 0.58 13.23 2.46 16.44 7.06 C16.95 7.7 17.47 8.34 18 9 C18.66 9 19.32 9 20 9 C20.66 10.32 21.32 11.64 22 13 C26.88 13.35 29.77 12.42 34 10 C34 10.99 34 11.98 34 13 C34.66 13.66 35.32 14.32 36 15 C35.36 15.2 34.72 15.41 34.07 15.62 C33.24 15.89 32.41 16.16 31.56 16.44 C30.74 16.7 29.92 16.97 29.07 17.25 C27.04 17.82 27.04 17.82 26 19 C23.82 19.46 23.82 19.46 21.12 19.81 C20.24 19.94 19.36 20.07 18.45 20.21 C16 20 16 20 14.25 18.27 C13.05 16.1 12.49 14.33 11.94 11.94 C10.95 9.07 10.45 8.22 7.69 6.85 C5.14 6.1 2.61 5.52 0 5 C-0.99 4.67 -1.98 4.34 -3 4 C-5.35 4.61 -7.68 5.28 -10 6 C-12.81 6.75 -12.81 6.75 -15 7 C-15.66 6.34 -16.32 5.68 -17 5 C-15.35 3.98 -13.68 2.98 -12 2 C-11.03 1.42 -10.06 0.85 -9.06 0.25 C-5.45 -1.23 -3.73 -0.97 0 0 Z \",fill:\"#090F36\",transform:\"translate(910,739)\"})),_path736||(_path736=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95 4.42 3.1 6.68 3 12 C3.66 12 4.32 12 5 12 C5.07 13.13 5.07 13.13 5.15 14.27 C5.51 19.18 5.9 23.95 7 28.75 C8.1 33.8 8.35 38.83 8.6 43.97 C8.83 48.1 9.29 52.06 10.06 56.12 C13.11 72.83 13.11 72.83 9 79 C8.67 75.37 8.34 71.74 8 68 C7.67 68 7.34 68 7 68 C6.77 65.95 6.54 63.9 6.32 61.85 C6.18 59.99 6.18 59.99 5 59 C4.31 55.28 3.9 51.51 3.44 47.75 C3.3 46.65 3.16 45.56 3.02 44.43 C2.22 37.76 1.82 31.38 2.03 24.67 C1.99 21.16 1.24 17.97 0.45 14.57 C-0.39 9.75 -0.15 4.87 0 0 Z \",fill:\"#472961\",transform:\"translate(611,1106)\"})),_path737||(_path737=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.69 1.94 0.69 4 2 C4.39 3.65 4.72 5.32 5 7 C5.97 8.36 6.96 9.69 8 11 C8 11.66 8 12.32 8 13 C8.66 13 9.32 13 10 13 C11.44 14.83 11.44 14.83 13 17.25 C13.52 18.04 14.03 18.83 14.56 19.64 C15.83 21.72 16.94 23.8 18 26 C18.33 26.62 18.66 27.24 19 27.88 C20.24 30.51 21.12 33.22 22 36 C22.66 36 23.32 36 24 36 C28 42.75 28 42.75 28 45 C28.66 45.33 29.32 45.66 30 46 C29.67 46.66 29.34 47.32 29 48 C19.71 44.08 12.98 33.77 7 26 C5.67 24.33 4.34 22.66 3 21 C3.33 20.34 3.66 19.68 4 19 C5.32 19.99 6.64 20.98 8 22 C7.44 17.71 5.93 15.04 3.5 11.5 C1.1 7.99 -0.58 5.28 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#321541\",transform:\"translate(432,945)\"})),_path738||(_path738=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.05 1.3 21.43 4.67 32 8 C31.67 7.67 31.34 7.34 31 7 C30.34 6.34 29.68 5.68 29 5 C34.45 6.03 39.12 7.25 44 10 C44 10.66 44 11.32 44 12 C44.53 12.18 45.06 12.35 45.6 12.53 C47.18 13.06 48.76 13.59 50.34 14.11 C52.09 14.7 53.85 15.28 55.6 15.86 C58.24 16.73 60.87 17.61 63.5 18.5 C64.4 18.8 65.31 19.09 66.24 19.39 C67.1 19.69 67.96 19.98 68.84 20.28 C69.62 20.54 70.39 20.8 71.19 21.06 C73 22 73 22 74 25 C67.53 24.52 62.39 23.27 56.44 20.75 C48.07 17.36 39.66 14.54 31 12 C29.55 11.57 29.55 11.57 28.08 11.14 C18.73 8.39 9.37 5.67 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#201625\",transform:\"translate(771,281)\"})),_path739||(_path739=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.55 3.2 4.53 6.89 5.81 11.38 C6.07 12.27 6.33 13.17 6.59 14.09 C9.49 24.89 11.05 35.91 12.73 46.94 C14.43 57.99 16.55 68.81 19.26 79.66 C20.6 85.2 21.33 89.42 20 95 C19.9 94.48 19.79 93.97 19.69 93.44 C19.05 90.87 19.05 90.87 17.56 88.19 C14.37 81.01 13.81 71.75 14 64 C13.34 64 12.68 64 12 64 C11.81 62.24 11.81 62.24 11.62 60.44 C11.14 56.48 10.15 52.82 9 49 C8.84 48.13 8.67 47.27 8.5 46.38 C8.06 43.93 8.06 43.93 6.94 41.5 C5.91 38.77 6 36.89 6 34 C5.65 32.89 5.3 31.77 4.94 30.62 C3.91 26.66 4.19 23.98 5 20 C4.34 20 3.68 20 3 20 C2.93 18.9 2.93 18.9 2.85 17.77 C2.78 16.79 2.7 15.82 2.62 14.81 C2.56 13.85 2.49 12.89 2.41 11.89 C2 8.98 1.1 6.72 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#000002\",transform:\"translate(914,177)\"})),_path740||(_path740=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.34 0.96 5.89 1.92 8.75 3.94 C12.38 6.24 15.7 7.22 19.83 8.29 C22 9 22 9 24 11 C24.81 13.94 24.81 13.94 25 17 C23.69 18.88 23.69 18.88 22 20 C21.34 20 20.68 20 20 20 C19.67 19.34 19.34 18.68 19 18 C17.67 18.46 17.67 18.46 16.31 18.94 C15.22 19.29 14.13 19.64 13 20 C11.7 20.43 11.7 20.43 10.38 20.88 C8 21 8 21 5.99 19.48 C3.48 16.35 2.65 13.21 1.75 9.38 C1.58 8.69 1.4 8.01 1.23 7.31 C0 2.39 0 2.39 0 0 Z \",fill:\"#0B1240\",transform:\"translate(725,1159)\"})),_path741||(_path741=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5 3.5 3.57 4.9 4.19 9.69 C4.35 10.87 4.5 12.05 4.67 13.26 C4.78 14.17 4.89 15.07 5 16 C-0.14 17.28 -4.69 18 -10 18 C-10.99 18.66 -11.98 19.32 -13 20 C-14.98 20.28 -16.97 20.57 -18.96 20.75 C-24.24 21.39 -28.2 23.22 -32 27 C-33.05 30.17 -33.05 30.17 -33 33 C-33.33 33 -33.66 33 -34 33 C-34.14 31.11 -34.23 29.21 -34.31 27.31 C-34.37 26.26 -34.43 25.2 -34.49 24.11 C-33.82 19.83 -32.45 18.59 -29 16 C-26.15 14.77 -23.26 13.99 -20.25 13.25 C-19.49 13.04 -18.73 12.83 -17.95 12.62 C-13.26 11.39 -8.67 10.64 -3.84 10.24 C-1.91 10.09 -1.91 10.09 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#0A113B\",transform:\"translate(667,842)\"})),_path742||(_path742=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.85 5.83 2.48 10.45 0 16 C-0.99 16 -1.98 16 -3 16 C-3.1 16.89 -3.2 17.79 -3.3 18.71 C-4.24 26.37 -5.68 33.02 -9 40 C-9.66 40 -10.32 40 -11 40 C-11.1 40.7 -11.21 41.4 -11.31 42.12 C-12.09 45.39 -13.42 48.05 -15 51 C-15.66 51 -16.32 51 -17 51 C-17.19 51.66 -17.37 52.32 -17.56 53 C-20.01 58.12 -23.44 62.9 -28.75 65.19 C-32.91 64.95 -36.57 63.81 -40.51 62.5 C-43.24 61.65 -43.24 61.65 -46 64 C-49.78 66.76 -52.6 69.77 -55.47 73.41 C-57.17 75.17 -58.77 76.03 -61 77 C-59.43 73.14 -56.92 70.92 -54 68 C-52.17 65.72 -50.4 63.41 -48.65 61.09 C-47.19 59.25 -45.7 57.61 -44 56 C-38.29 57.86 -38.29 57.86 -35.56 59.19 C-31.76 60.39 -29.83 60.23 -26 59 C-15.15 50.31 -10.38 35.27 -6.25 22.46 C-5.62 20.47 -4.96 18.49 -4.3 16.51 C-2.5 11.03 -0.83 5.73 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(474,540)\"})),_path743||(_path743=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.71 4.18 -1.71 4.18 -3.94 5.31 C-7.42 7.35 -7.42 7.35 -9.19 11 C-8.91 15.43 -7.46 17.63 -4.24 20.64 C-2.52 22.13 -0.78 23.58 1 25 C0.67 26.65 0.34 28.3 0 30 C-2.62 30.56 -2.62 30.56 -6 30 C-7.69 27.84 -9.02 25.55 -10.43 23.2 C-13.42 19.01 -17.42 18.43 -22.25 17.12 C-25.64 15.74 -26.46 14.25 -28 11 C-22.8 8.68 -17.9 6.85 -12.25 6 C-7.1 5.19 -3.73 3.73 0 0 Z \",fill:\"#7C5B7A\",transform:\"translate(568,432)\"})),_path744||(_path744=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.9 1.66 1.9 1.66 2.81 1.31 C3.9 1.16 3.9 1.16 5 1 C6.75 2.44 6.75 2.44 8 4 C6.49 9.78 3.94 14.25 -1.31 17.38 C-5.04 18.24 -8.16 18.25 -12 18 C-12.99 17.34 -13.98 16.68 -15 16 C-14.67 12.37 -14.34 8.74 -14 5 C-13.07 4.72 -12.15 4.45 -11.19 4.16 C-9.99 3.8 -8.8 3.44 -7.56 3.06 C-6.37 2.7 -5.17 2.34 -3.94 1.97 C-1.14 1.29 -1.14 1.29 0 0 Z \",fill:\"#58395F\",transform:\"translate(689,619)\"})),_path745||(_path745=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.81 -1.24 5.27 -3.31 8.44 C-3.93 9.38 -4.54 10.33 -5.18 11.31 C-6.29 12.95 -7.44 14.57 -8.65 16.14 C-10.2 18.11 -10.2 18.11 -11.25 21.25 C-12.85 25.24 -15.45 28.01 -18.38 31.11 C-19.99 32.99 -20.9 34.79 -22 37 C-24.62 39.25 -24.62 39.25 -27 41 C-28.5 39.81 -28.5 39.81 -30 38 C-30.19 35.31 -30.19 35.31 -30 33 C-32.31 32.34 -34.62 31.68 -37 31 C-34.41 28.63 -32.07 27.67 -28.75 26.75 C-20.99 24.29 -16 18.24 -10.88 12.2 C-8.65 9.59 -6.36 7.05 -4.06 4.5 C-2.9 3.22 -2.9 3.22 -1.72 1.91 C-1.15 1.28 -0.59 0.65 0 0 Z \",fill:\"#45245A\",transform:\"translate(375,1146)\"})),_path746||(_path746=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.43 3.33 4.31 6.46 5 10 C6.92 11.92 10.18 11.9 12.77 12.4 C15 13 15 13 18 15 C21.37 14.67 23.42 13.12 26 11 C26 11.66 26 12.32 26 13 C26.66 13 27.32 13 28 13 C26.85 15.47 25.95 17.05 24 19 C18.4 19.55 14.91 18.41 10 16 C9.55 16.66 9.09 17.32 8.62 18 C8.09 18.66 7.55 19.32 7 20 C6.34 20 5.68 20 5 20 C3.88 24.69 4.19 27.54 6 32 C5.01 32 4.02 32 3 32 C2.67 33.98 2.34 35.96 2 38 C-3.76 27.28 -2.4 13.72 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#1C0E2B\",transform:\"translate(539,476)\"})),_path747||(_path747=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 1.49 0.5 1.49 1 3 C-1.15 6.5 -2.79 7.9 -6.55 9.65 C-9.86 11.49 -9.96 11.87 -11.23 15.79 C-11.43 17.25 -11.61 18.72 -11.75 20.19 C-11.96 21.73 -12.18 23.28 -12.4 24.82 C-12.5 25.56 -12.6 26.29 -12.7 27.04 C-13.29 30.89 -14.62 34.38 -16 38 C-17.01 40.74 -18.01 43.5 -19 46.25 C-19.4 47.36 -19.4 47.36 -19.81 48.5 C-21.34 52.83 -22.51 57.04 -23.38 61.56 C-25.11 69.73 -29.06 76.72 -33 84 C-33.69 85.3 -34.39 86.6 -35.08 87.91 C-36.7 90.95 -38.34 93.98 -40 97 C-41.04 93.83 -40.98 92.12 -39.78 89.02 C-39.34 87.89 -39.34 87.89 -38.89 86.74 C-38.58 85.96 -38.26 85.18 -37.94 84.38 C-37.51 83.24 -37.51 83.24 -37.06 82.08 C-35.38 77.82 -33.44 74.01 -30.98 70.14 C-27.7 64.82 -26.01 59.43 -24.38 53.44 C-22.59 47.05 -20.73 40.95 -17.85 34.96 C-16.01 30.73 -15.86 26.83 -15.69 22.25 C-14.89 11.15 -14.89 11.15 -11 7 C-8.72 5.69 -6.52 4.74 -4.02 3.89 C-1.65 3.07 -1.65 3.07 0 0 Z \",fill:\"#715376\",transform:\"translate(560,197)\"})),_path748||(_path748=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 4.29 2.64 8.58 4 13 C3.34 13.66 2.68 14.32 2 15 C1.59 16.99 1.27 18.99 1 21 C0.22 26.78 0.22 26.78 -2 29 C-3.95 29 -3.95 29 -6 28 C-9.55 21.64 -12.3 14.28 -11 7 C-7.98 3.25 -5 0 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(868,581)\"})),_path749||(_path749=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.85 0.27 5.66 0.71 8.62 3.25 C11 6 11 6 12.75 8.44 C14.89 10.88 16.51 11.99 19.25 13.62 C24.29 16.79 27.13 20.89 30.37 25.8 C30.91 26.53 31.45 27.25 32 28 C32.66 28 33.32 28 34 28 C36.04 34.85 33.71 41.49 30.68 47.71 C29.5 49.84 28.29 51.93 27 54 C26.41 53.68 25.83 53.36 25.23 53.02 C22.85 51.79 22.85 51.79 19.38 51.62 C16 51 16 51 14.56 48.94 C14.28 47.98 14.28 47.98 14 47 C15 46 15 46 17.81 45.81 C20.87 45.99 22.44 46.42 25 48 C28.31 45.12 29.61 43.38 30 39 C30.07 38.3 30.15 37.61 30.23 36.89 C30.49 32.7 30.4 29.87 27.75 26.5 C24.77 23.76 24.77 23.76 21 23 C21 22.01 21 21.02 21 20 C20.22 19.69 19.43 19.38 18.62 19.06 C16 18 16 18 14 17 C14 16.34 14 15.68 14 15 C13.01 14.67 12.02 14.34 11 14 C11 13.34 11 12.68 11 12 C10.01 11.67 9.02 11.34 8 11 C6.46 9.19 6.46 9.19 4.94 7 C2.92 3.98 2.92 3.98 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#73597C\",transform:\"translate(529,437)\"})),_path750||(_path750=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.18 4.18 5.78 6.9 6 13 C5.7 14.67 5.37 16.34 5 18 C3.27 17.69 1.54 17.38 -0.19 17.06 C-1.15 16.89 -2.11 16.71 -3.11 16.54 C-4.96 16.19 -6.82 15.81 -8.66 15.38 C-11.85 14.86 -14.04 15.83 -17 17 C-17.66 16.01 -18.32 15.02 -19 14 C-17.68 13.01 -16.36 12.02 -15 11 C-15.66 10.34 -16.32 9.68 -17 9 C-16.26 8.59 -15.51 8.18 -14.75 7.75 C-11.97 6.14 -11.97 6.14 -10.06 3.94 C-7.18 1.23 -3.97 0 0 0 Z \",fill:\"#401F55\",transform:\"translate(510,213)\"})),_path751||(_path751=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.35 1.11 -0.7 2.23 -1.06 3.38 C-2.37 6.8 -2.37 6.8 -1 9 C1.53 9.66 1.53 9.66 4 10 C4 10.66 4 11.32 4 12 C1.33 12 -1.33 12 -4 12 C3.18 12.19 9.94 12.14 17 10.75 C23.42 9.6 23.42 9.6 26.81 11.88 C27.53 12.58 28.26 13.28 29 14 C28.67 14.99 28.34 15.98 28 17 C27.01 17.33 26.02 17.66 25 18 C24.34 17.01 23.68 16.02 23 15 C17.31 14.11 11.92 14.92 6.46 16.55 C0.43 17.65 -5.9 17.13 -12 17 C-12 16.34 -12 15.68 -12 15 C-13.32 14.67 -14.64 14.34 -16 14 C-16.31 11.75 -16.31 11.75 -16 9 C-13.5 6.69 -13.5 6.69 -11 5 C-10.34 5.33 -9.68 5.66 -9 6 C-8.67 4.68 -8.34 3.36 -8 2 C-7.34 2.33 -6.68 2.66 -6 3 C-5.38 2.5 -4.76 2.01 -4.12 1.5 C-2 0 -2 0 0 0 Z \",fill:\"#301243\",transform:\"translate(611,79)\"})),_path752||(_path752=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.33 -1.98 0.66 -3 1 C-3.21 1.74 -3.41 2.48 -3.62 3.25 C-5.76 7.53 -9.72 9.12 -14 11 C-14.66 11 -15.32 11 -16 11 C-16 11.66 -16 12.32 -16 13 C-16.52 13.19 -17.05 13.38 -17.59 13.58 C-19.98 14.46 -22.37 15.35 -24.75 16.25 C-25.57 16.55 -26.4 16.85 -27.25 17.16 C-31.8 18.88 -34.63 20.41 -38 24 C-40.25 24.64 -40.25 24.64 -42.56 24.81 C-43.71 24.91 -43.71 24.91 -44.88 25.02 C-47 25 -47 25 -50 24 C-50 23.34 -50 22.68 -50 22 C-50.66 22 -51.32 22 -52 22 C-52 20.68 -52 19.36 -52 18 C-50.37 17.76 -50.37 17.76 -48.7 17.52 C-32.75 15.05 -14.53 -0.65 0 0 Z \",fill:\"#27103A\",transform:\"translate(342,1133)\"})),_path753||(_path753=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.55 9.11 -3.89 15.66 -9.59 22.27 C-10.91 23.73 -12.23 25.18 -13.56 26.62 C-14.2 27.32 -14.84 28.02 -15.49 28.74 C-19.07 32.5 -21.76 34.89 -27 36 C-25.25 30.25 -25.25 30.25 -23 28 C-23.33 27.01 -23.66 26.02 -24 25 C-24 24.01 -24 23.02 -24 22 C-22.57 20.71 -22.57 20.71 -20.56 19.38 C-15.49 15.77 -11.31 11.46 -7 7 C-6.02 6.02 -5.04 5.04 -4.06 4.06 C-3.38 3.38 -2.7 2.7 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#311243\",transform:\"translate(437,1187)\"})),_path754||(_path754=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.73 3.06 8.27 7.61 11.81 11.94 C12.58 12.87 13.35 13.8 14.14 14.75 C15.8 16.94 16.91 18.94 18.12 21.38 C18.81 21.71 19.49 22.03 20.19 22.38 C22.12 23.38 22.12 23.38 22.88 25.19 C23.12 27.38 23.12 27.38 22.88 29.7 C23.22 33.38 24.72 34.67 27.25 37.31 C28.07 38.17 28.88 39.04 29.72 39.93 C30.52 40.73 31.31 41.54 32.12 42.38 C32.76 43.03 33.4 43.68 34.06 44.36 C35.4 45.71 36.76 47.04 38.12 48.38 C37.63 49.37 37.63 49.37 37.12 50.38 C34.18 47.5 31.24 44.62 28.32 41.73 C27.32 40.75 26.32 39.77 25.32 38.8 C23.88 37.39 22.45 35.97 21.01 34.55 C20.15 33.71 19.28 32.86 18.39 31.98 C16.03 29.27 14.68 26.6 13.12 23.38 C12.47 23.04 11.8 22.72 11.12 22.38 C10.55 21.28 9.97 20.19 9.38 19.06 C7.33 15.29 4.78 13.62 1.12 11.38 C1.12 10.72 1.12 10.05 1.12 9.38 C0.47 9.04 -0.2 8.72 -0.88 8.38 C-0.54 7.72 -0.22 7.05 0.12 6.38 C-0.51 6.13 -1.15 5.88 -1.81 5.62 C-3.88 4.38 -3.88 4.38 -4.62 2.25 C-4.71 1.63 -4.79 1.01 -4.88 0.38 C-1.88 -0.62 -1.88 -0.62 0 0 Z \",fill:\"#321641\",transform:\"translate(940.875,514.625)\"})),_path755||(_path755=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.66 1.67 3.32 1.34 4 1 C4.99 1.66 5.98 2.32 7 3 C7.27 5.77 7.35 8.31 7.29 11.07 C7.29 11.87 7.28 12.66 7.28 13.48 C7.26 16.03 7.23 18.58 7.19 21.12 C7.17 22.85 7.16 24.58 7.15 26.3 C7.11 30.53 7.06 34.77 7 39 C4.03 39 1.06 39 -2 39 C-2.15 30.78 -1.58 22.63 -1 14.44 C-0.9 13.03 -0.81 11.63 -0.71 10.22 C-0.48 6.82 -0.24 3.41 0 0 Z \",fill:\"#755A7C\",transform:\"translate(1011,1241)\"})),_path756||(_path756=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.58 0.23 1.15 0.45 1.75 0.69 C1.75 1.68 1.75 2.67 1.75 3.69 C-0.56 4.02 -2.87 4.35 -5.25 4.69 C-5.25 5.68 -5.25 6.67 -5.25 7.69 C-6.24 8.18 -6.24 8.18 -7.25 8.69 C-8.34 12.78 -8.34 12.78 -7.25 16.69 C-7.58 17.35 -7.91 18.01 -8.25 18.69 C-9.24 18.69 -10.23 18.69 -11.25 18.69 C-11.52 19.33 -11.79 19.97 -12.06 20.62 C-13.25 22.69 -13.25 22.69 -16.25 23.69 C-16.25 24.35 -16.25 25.01 -16.25 25.69 C-18.9 27.15 -20.14 27.69 -23.25 27.69 C-24.35 24.36 -24.43 23.07 -22.89 19.86 C-21.92 18.38 -21.92 18.38 -20.94 16.88 C-17.97 12.09 -16.21 8.22 -15.25 2.69 C-12.28 2.03 -9.31 1.37 -6.25 0.69 C-6.25 1.35 -6.25 2.01 -6.25 2.69 C-5.67 2.17 -5.1 1.66 -4.5 1.12 C-2.25 -0.31 -2.25 -0.31 0 0 Z \",fill:\"#220B37\",transform:\"translate(649.25,725.3125)\"})),_path757||(_path757=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.3 3.39 7.58 7.27 10 13 C8.95 13.13 7.9 13.27 6.82 13.4 C5.45 13.58 4.07 13.76 2.69 13.94 C2 14.02 1.31 14.11 0.6 14.2 C-2.4 14.59 -5.12 15.04 -8 16 C-10.23 16.07 -12.46 16.08 -14.69 16.06 C-16.46 16.05 -16.46 16.05 -18.26 16.04 C-19.17 16.02 -20.07 16.01 -21 16 C-20.67 15.01 -20.34 14.02 -20 13 C-19.09 13.02 -18.18 13.04 -17.25 13.06 C-13.93 12.37 -13.93 12.37 -12.85 10.04 C-12.2 8.42 -11.55 6.8 -10.92 5.17 C-8.76 0.07 -5.23 -0.84 0 0 Z \",fill:\"#7D6281\",transform:\"translate(631,613)\"})),_path758||(_path758=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.01 1.43 6.94 3.98 10 8 C9.34 6.02 8.68 4.04 8 2 C10.02 3.93 11.42 5.63 13 8 C17 10.36 20.44 11.33 25 12 C29.6 28.67 29.6 28.67 26 37 C25.03 38.03 24.03 39.04 23 40 C22.91 39.24 22.83 38.48 22.74 37.69 C21.01 25.01 15.62 18.16 7 9 C5.64 7.49 4.28 5.97 2.94 4.44 C2.37 3.8 1.8 3.16 1.21 2.5 C0 1 0 1 0 0 Z \",fill:\"#857295\",transform:\"translate(809,338)\"})),_path759||(_path759=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.02 2.68 -8.33 3.98 -12.87 5.59 C-16.05 7.02 -17.84 8.29 -20 11 C-19.9 14.86 -18.46 17.11 -16 20 C-22.22 19.63 -24.57 18.03 -29 14 C-29.99 13.67 -30.98 13.34 -32 13 C-32.33 13.99 -32.66 14.98 -33 16 C-35.88 16.12 -35.88 16.12 -39 16 C-39.66 15.34 -40.32 14.68 -41 14 C-40.79 11.52 -40.33 10.33 -38.57 8.55 C-33.37 5.13 -29.2 4.57 -23.04 4.31 C-19.06 3.9 -15.86 2.6 -12.25 0.94 C-7.87 -0.88 -4.59 -1.18 0 0 Z \",fill:\"#45224F\",transform:\"translate(303,1195)\"})),_path760||(_path760=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.72 -0.75 7.11 0.53 10.94 3.06 C14.91 5.64 14.91 5.64 19.62 5.88 C20.74 5.59 21.85 5.3 23 5 C31.44 3.82 37.83 8.05 45 12 C44.67 12.66 44.34 13.32 44 14 C34.2 17.27 26.21 13.62 17.5 9.31 C16 8.55 14.5 7.78 13 7 C13 7.66 13 8.32 13 9 C10.31 10.01 8.58 10.23 5.89 9.18 C3.89 8.17 1.94 7.12 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#391A48\",transform:\"translate(987,623)\"})),_path761||(_path761=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.45 7.21 2 13.5 -1 19 C-3.14 19.82 -3.14 19.82 -5 20 C-4.94 20.86 -4.88 21.72 -4.81 22.6 C-5.03 26.57 -6.14 28.89 -8 32.38 C-8.56 33.43 -9.11 34.49 -9.69 35.59 C-10.12 36.38 -10.55 37.18 -11 38 C-14.3 36.35 -14.76 33.33 -16 30 C-16 25.69 -15.81 25.26 -13.12 22.25 C-12.59 21.64 -12.06 21.02 -11.51 20.39 C-10 19 -10 19 -8 19 C-8.26 18.33 -8.51 17.65 -8.78 16.96 C-9.11 12.57 -7.01 10.19 -4.56 6.69 C-4.13 6.04 -3.69 5.4 -3.25 4.73 C-2.18 3.15 -1.09 1.57 0 0 Z \",fill:\"#472961\",transform:\"translate(423,539)\"})),_path762||(_path762=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06 0.63 1.12 1.25 1.18 1.9 C1.27 2.72 1.35 3.53 1.44 4.38 C1.52 5.19 1.6 6 1.68 6.84 C1.89 9.04 1.89 9.04 3 11 C5.89 10.6 6.82 10.21 8.75 7.94 C9.37 6.98 9.37 6.98 10 6 C9.5 9.69 8.9 11.6 6 14 C8.07 14.15 8.07 14.15 10 13 C10.66 18.32 9.05 20.76 6.18 24.96 C4.43 27.98 4.22 30.55 4 34 C3.01 33.5 3.01 33.5 2 33 C2 31.35 2 29.7 2 28 C1.34 28 0.68 28 0 28 C0 27.01 0 26.02 0 25 C-7.48 23.67 -12.57 24.05 -19.49 27.29 C-22.74 28.21 -24.05 27.55 -27 26 C-29.02 24.7 -31.03 23.38 -33 22 C-32.5 20.51 -32.5 20.51 -32 19 C-31.03 19.68 -30.06 20.36 -29.06 21.06 C-24.41 23.67 -21.08 23.04 -16 22 C-14.71 21.75 -13.42 21.5 -12.09 21.25 C-8.39 20.53 -4.69 19.77 -1 19 C-1.01 18.3 -1.02 17.6 -1.04 16.88 C-1.09 11.14 -0.86 5.67 0 0 Z \",fill:\"#7A5E82\",transform:\"translate(565,384)\"})),_path763||(_path763=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.65 0.33 1.31 0.66 1.98 1 C4.87 2.43 7.82 2.85 10.98 3.44 C13 4 13 4 15 6 C16.65 6.71 18.32 7.38 20 8 C20 8.66 20 9.32 20 10 C-0.46 5.54 -0.46 5.54 -3 3 C-5 2.96 -7 2.96 -9 3 C-8.86 4.35 -8.71 5.71 -8.56 7.06 C-8.47 7.88 -8.39 8.7 -8.3 9.54 C-8.04 11.66 -7.69 13.77 -7.31 15.88 C-7 19 -7 19 -9 22 C-15.04 22.96 -20.96 21.92 -26.82 20.45 C-33.75 19.02 -41.05 20.19 -48 21 C-45.19 18.19 -42.16 18.21 -38.38 17.75 C-37.29 17.61 -37.29 17.61 -36.17 17.48 C-30.91 16.91 -27.05 17.32 -22 19 C-17.83 19.29 -17.83 19.29 -14 18 C-13.34 18.33 -12.68 18.66 -12 19 C-12.29 18.41 -12.58 17.82 -12.88 17.21 C-17.01 8.4 -17.01 8.4 -16 5 C-11.51 -0.95 -7.03 -2.08 0 0 Z \",fill:\"#2B113D\",transform:\"translate(759,56)\"})),_path764||(_path764=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.32 1.98 2.64 3 4 C6.28 3.25 6.28 3.25 8 0 C8.99 0.33 9.98 0.66 11 1 C11 2.65 11 4.3 11 6 C10.01 6.5 10.01 6.5 9 7 C8.35 9.02 8.35 9.02 8 11 C11.62 12.01 15.28 12.5 19 13 C18.66 12.19 18.66 12.19 18.31 11.36 C18.02 10.64 17.73 9.92 17.44 9.19 C17.15 8.48 16.86 7.77 16.56 7.04 C16 5 16 5 17 2 C18.5 3.19 18.5 3.19 20 5 C20.19 7.69 20.19 7.69 20 10 C20.66 10 21.32 10 22 10 C23.62 11.38 23.62 11.38 25 13 C25 13.66 25 14.32 25 15 C25.66 15 26.32 15 27 15 C27 16.32 27 17.64 27 19 C22.95 19.98 19.16 20.08 15 20 C14.88 21.26 14.75 22.52 14.62 23.81 C14.3 27.1 13.93 28.1 12 31 C9.06 27.73 8.68 25.59 8.62 21.25 C8.28 15.49 7.03 11.24 3 7 C0.92 5.79 0.92 5.79 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#150A1F\",transform:\"translate(504,359)\"})),_path765||(_path765=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.81 2.07 2.63 3.14 2.44 4.25 C2.37 10.11 6.21 13.83 9.74 18.17 C12.23 21.28 14.22 24.44 16 28 C6.28 29.57 6.28 29.57 1 26 C-2.71 25.75 -2.71 25.75 -6 26 C-5.01 22.7 -4.02 19.4 -3 16 C-4.32 17.32 -5.64 18.64 -7 20 C-6.58 18.54 -6.14 17.08 -5.69 15.62 C-5.44 14.81 -5.2 14 -4.95 13.16 C-4 11 -4 11 -1 9 C-0.42 6.81 -0.42 6.81 -0.31 4.38 C-0.25 3.56 -0.18 2.74 -0.11 1.9 C-0.08 1.27 -0.04 0.65 0 0 Z \",fill:\"#0D0F39\",transform:\"translate(1021,1042)\"})),_path766||(_path766=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26 3.77 0.37 5.37 -1 9 C-1.66 9 -2.32 9 -3 9 C-3.31 9.99 -3.31 9.99 -3.62 11 C-5.52 15.14 -8.2 18.43 -11 22 C-11.59 22.77 -12.17 23.54 -12.77 24.34 C-17.57 30.64 -22.27 35.78 -29 40 C-29.75 38.32 -29.75 38.32 -30 36 C-28.34 33.52 -28.34 33.52 -25.94 30.81 C-19.83 23.67 -15.07 16.72 -11.37 8.07 C-9.59 5.39 -8.03 4.93 -5 4 C-1.72 3.25 -1.72 3.25 0 0 Z \",fill:\"#2C123D\",transform:\"translate(585,1207)\"})),_path767||(_path767=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.03 2.87 C6.94 11.08 8.81 19.43 10.57 27.95 C10.94 29.73 11.33 31.5 11.73 33.27 C11.92 34.15 12.11 35.03 12.31 35.94 C12.47 36.67 12.63 37.4 12.8 38.15 C13 40 13 40 12 43 C10.12 44.75 10.12 44.75 8 46 C7.01 45.67 6.02 45.34 5 45 C5.37 44.44 5.74 43.89 6.12 43.31 C7.28 40.98 7.28 40.98 6.19 38.5 C5.8 37.67 5.4 36.85 5 36 C4.35 33.77 3.94 31.62 3.6 29.32 C2.95 25.71 1.97 22.28 0.94 18.75 C-0.72 12.83 -1.83 7.15 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2A1238\",transform:\"translate(1232,883)\"})),_path768||(_path768=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.57 2.19 5.14 4.18 7.06 7.88 C7.06 8.87 7.06 9.86 7.06 10.88 C6.1 10.84 5.13 10.81 4.14 10.77 C2.88 10.74 1.61 10.72 0.31 10.69 C-0.94 10.65 -2.19 10.62 -3.48 10.58 C-7.11 10.89 -8.4 11.34 -10.94 13.88 C-12.19 15.96 -12.19 15.96 -12.94 17.88 C-13.08 17.13 -13.23 16.39 -13.38 15.62 C-13.84 13.35 -14.36 11.12 -14.94 8.88 C-15.6 8.88 -16.26 8.88 -16.94 8.88 C-18.56 6.3 -18.98 5.2 -18.56 2.12 C-18.36 1.38 -18.15 0.64 -17.94 -0.12 C-12.33 -1.99 -5.59 -2.06 0 0 Z \",fill:\"#6F5174\",transform:\"translate(561.9375,321.125)\"})),_path769||(_path769=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.52 1.26 7.63 2.7 11 6 C12.66 11.77 12.92 18.06 10.31 23.56 C7.86 27.58 5.55 30.48 1 32 C1 32.66 1 33.32 1 34 C3.64 33.67 6.28 33.34 9 33 C9 33.99 9 34.98 9 36 C5.62 36.84 3.33 37.11 0 36 C0 35.34 0 34.68 0 34 C-0.66 34 -1.32 34 -2 34 C-1.94 32.56 -1.85 31.12 -1.75 29.69 C-1.7 28.89 -1.66 28.09 -1.61 27.26 C-1 25 -1 25 1.02 23.53 C3.24 22.16 3.24 22.16 3.46 19.62 C3.25 12.98 3.03 6.05 0 0 Z \",fill:\"#66476C\",transform:\"translate(608,428)\"})),_path770||(_path770=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.66 4 3.32 4 4 4 C3.49 7.72 2.88 10.73 1 14 C1.66 14.33 2.32 14.66 3 15 C-0.64 23.43 -3.86 29.97 -10.44 36.38 C-13.16 39.17 -15.29 42.11 -17.47 45.33 C-19.26 47.28 -20.42 47.62 -23 48 C-22.12 43.49 -20.73 41.65 -17.12 39.06 C-12.03 34.93 -11.22 29.78 -9.88 23.69 C-8.79 19.09 -7.08 15.23 -5 11 C-4.34 11 -3.68 11 -3 11 C-2.88 10.11 -2.75 9.23 -2.62 8.31 C-2.06 5.3 -1.23 2.8 0 0 Z \",fill:\"#291238\",transform:\"translate(368,1083)\"})),_path771||(_path771=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 3.38 0.82 4.77 0.06 8.19 C-0.13 9.09 -0.33 9.99 -0.53 10.92 C-0.68 11.61 -0.84 12.29 -1 13 C-0.34 13.33 0.32 13.66 1 14 C0.87 14.71 0.73 15.41 0.6 16.14 C-1.17 26.4 -1.61 36.62 -2 47 C-2.33 47 -2.66 47 -3 47 C-3.15 54.58 -3.15 54.58 -2.5 62.12 C-1.94 66.46 -1.91 70.64 -2 75 C-5.24 71.76 -5.86 67.33 -6.12 62.87 C-6.12 60.72 -6.08 58.58 -6 56.44 C-5.8 50.8 -6.34 46.46 -8 41 C-9.09 29.86 -6.96 18.93 -5 8 C-4.34 8 -3.68 8 -3 8 C-2.81 6.58 -2.81 6.58 -2.62 5.12 C-2 2 -2 2 0 0 Z M-2 13 C-1 16 -1 16 -1 16 Z M-3 18 C-2 20 -2 20 -2 20 Z M-4 23 C-4 26.3 -4 29.6 -4 33 C-3.67 33 -3.34 33 -3 33 C-3 29.7 -3 26.4 -3 23 C-3.33 23 -3.66 23 -4 23 Z M-5 33 C-5 36.96 -5 40.92 -5 45 C-4.67 45 -4.34 45 -4 45 C-4 41.04 -4 37.08 -4 33 C-4.33 33 -4.66 33 -5 33 Z \",fill:\"#291139\",transform:\"translate(284,822)\"})),_path772||(_path772=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.12 4.62 C2.08 5.41 2.04 6.19 2 7 C2.69 7.31 3.37 7.63 4.08 7.95 C4.98 8.38 5.88 8.81 6.81 9.25 C7.71 9.67 8.6 10.09 9.52 10.52 C12.11 12.07 13.38 13.48 15 16 C10.36 17.46 7.77 16.37 3.38 14.5 C-3.21 11.98 -8.14 11.59 -15 13 C-15.58 9.99 -16.04 7.07 -16 4 C-11.97 -0.78 -5.76 -0.28 0 0 Z \",fill:\"#66476C\",transform:\"translate(580,436)\"})),_path773||(_path773=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.39 1.2 -0.78 2.39 -1.19 3.62 C-1.99 6.88 -2.04 7.87 -0.94 11.19 C2.55 16.53 2.55 16.53 7.96 19.57 C11.54 20.09 14.56 20.06 18 19 C18.66 19.33 19.32 19.66 20 20 C20 19.34 20 18.68 20 18 C25.28 18.33 30.56 18.66 36 19 C36 19.33 36 19.66 36 20 C35.38 20.09 34.77 20.17 34.13 20.26 C28.36 21.22 23.97 22.79 19.01 25.88 C14.79 28.23 10.77 28.26 6 28 C3.87 27.27 3.87 27.27 2 26 C1.16 23.93 1.16 23.93 0.62 21.44 C-0.65 16.55 -2.67 13.12 -5.7 9.11 C-7.16 6.73 -7.61 4.74 -8 2 C-4.77 -0.15 -3.72 -0.2 0 0 Z \",fill:\"#715376\",transform:\"translate(637,266)\"})),_path774||(_path774=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.11 3.75 22.37 4.06 32.88 1.44 C25.82 7.11 17.31 10.38 8.23 10 C0.17 8.64 -7.39 5.34 -14.94 2.3 C-16.65 1.63 -18.38 1.02 -20.12 0.44 C-18.93 -0.27 -17.72 -0.95 -16.5 -1.62 C-15.83 -2.01 -15.15 -2.39 -14.46 -2.79 C-9.29 -4.51 -4.74 -2.05 0 0 Z \",fill:\"#43214E\",transform:\"translate(357.125,1210.5625)\"})),_path775||(_path775=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C-1.45 6.46 -1.45 6.46 -7 11 C-6.01 11.66 -5.02 12.32 -4 13 C-4.64 13.31 -5.28 13.62 -5.94 13.94 C-7.94 14.83 -7.94 14.83 -9 16 C-8.34 16.33 -7.68 16.66 -7 17 C-7.33 17.66 -7.66 18.32 -8 19 C-26.97 14.54 -26.97 14.54 -30 10 C-30 8.68 -30 7.36 -30 6 C-30.66 5.67 -31.32 5.34 -32 5 C-30.02 4.34 -28.04 3.68 -26 3 C-25.23 3.96 -25.23 3.96 -24.44 4.94 C-21.3 7.59 -19.06 7.85 -15 8 C-14.34 7.34 -13.68 6.68 -13 6 C-11.3 5.25 -9.6 4.5 -7.87 3.8 C-5.73 2.93 -5.73 2.93 -2.81 1.19 C-1.88 0.8 -0.96 0.4 0 0 Z \",fill:\"#7D6790\",transform:\"translate(620,540)\"})),_path776||(_path776=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 1 1 1 1.06 4.06 C1.04 5.03 1.02 6 1 7 C0.43 7.12 -0.14 7.24 -0.72 7.37 C-10.96 9.08 -10.96 9.08 -19 15 C-20.78 18.56 -19.95 23.03 -19.79 26.97 C-19.69 31.56 -20.16 34.36 -23 38 C-25.69 40.31 -25.69 40.31 -28 42 C-27.47 40.64 -27.47 40.64 -26.94 39.25 C-25.87 35.67 -26.18 32.87 -26.69 29.19 C-27.5 21.17 -24.66 16.53 -19.94 10.26 C-14.53 3.78 -9.04 -1.1 0 0 Z \",fill:\"#67486D\",transform:\"translate(859,502)\"})),_path777||(_path777=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.72 1.96 5.2 3.28 7 7 C8.85 8.05 8.85 8.05 11 9 C14.24 11.37 16.88 13.58 19 17 C19.29 19.58 19.29 19.58 19.19 22.25 C19.16 23.14 19.13 24.03 19.11 24.95 C19.07 25.63 19.04 26.3 19 27 C18.67 27 18.34 27 18 27 C17.8 25.95 17.8 25.95 17.6 24.88 C17.42 23.97 17.24 23.06 17.06 22.12 C16.89 21.22 16.71 20.32 16.54 19.38 C16.1 17 16.1 17 15 15 C14.01 15 13.02 15 12 15 C11.84 15.6 11.67 16.2 11.5 16.81 C9.19 20.19 5.8 20.83 2 22 C1.67 21.01 1.34 20.02 1 19 C-0.98 19.99 -0.98 19.99 -3 21 C-4.5 18 -4.27 14.92 -4.31 11.62 C-4.34 10.95 -4.37 10.28 -4.4 9.59 C-4.45 6.02 -4.27 4.33 -1.98 1.52 C-1.33 1.02 -0.67 0.52 0 0 Z \",fill:\"#795E82\",transform:\"translate(546,345)\"})),_path778||(_path778=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.09 1.77 2.19 1.55 3.31 1.31 C7 1 7 1 8.94 2.31 C10 4 10 4 10 6 C7.05 8.74 6.23 9 2 9 C3.65 11.64 5.3 14.28 7 17 C4.06 15.99 2.05 15.05 -0.31 13 C-4.47 9.91 -8.73 9.36 -13.75 8.56 C-17.07 9.21 -17.97 11.4 -20 14 C-22.75 14.81 -22.75 14.81 -25 15 C-25.33 13.68 -25.66 12.36 -26 11 C-24.93 9.99 -23.84 8.99 -22.75 8 C-22.15 7.44 -21.54 6.89 -20.92 6.31 C-19 5 -19 5 -15 5 C-15 4.34 -15 3.68 -15 3 C-12.88 2.5 -10.75 2 -8.62 1.5 C-7.44 1.22 -6.26 0.94 -5.04 0.66 C-2 0 -2 0 0 0 Z \",fill:\"#70577E\",transform:\"translate(694,183)\"})),_path779||(_path779=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 2.5 2.39 3.66 2.69 7.12 C2.77 8.04 2.86 8.95 2.95 9.88 C3 12.81 2.68 15.54 2.28 18.43 C-0.7 45.58 -0.37 76.22 10.15 101.8 C11 104 11 104 11 108 C10.34 108 9.68 108 9 108 C5.95 100.33 3.5 92.69 1.75 84.62 C1.51 83.55 1.51 83.55 1.26 82.45 C-1.71 68.08 -1.23 52.88 -1.55 38.26 C-1.74 29.8 -1.99 21.41 -3 13 C-2.34 12.67 -1.68 12.34 -1 12 C-1.02 10.95 -1.04 9.9 -1.06 8.81 C-1.01 5.67 -0.73 3.03 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(314,836)\"})),_path780||(_path780=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 2.85 3.48 C4.74 11.47 5.43 18.81 5 27 C4.96 27.96 4.91 28.91 4.87 29.9 C4.54 34.66 4.16 37.27 1 41 C1 40.34 1 39.68 1 39 C0.01 38.67 -0.98 38.34 -2 38 C-4.49 24.62 -5.78 12.65 0 0 Z \",fill:\"#2A0E3E\",transform:\"translate(456,366)\"})),_path781||(_path781=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 -0.99 1.98 -1.98 3 -3 C4.98 -2.34 6.96 -1.68 9 -1 C8.34 -0.67 7.68 -0.34 7 0 C7.19 1.97 7.19 1.97 8 4 C9.99 4.98 11.95 5.44 14.09 6 C16 7 16 7 17.27 9.19 C18.13 12.51 18.05 15.15 17.75 18.56 C17.66 19.68 17.57 20.79 17.48 21.94 C17.04 24.74 16.44 26.59 15 29 C15.01 28.08 15.02 27.17 15.04 26.23 C15.04 25.04 15.05 23.85 15.06 22.62 C15.07 21.44 15.09 20.26 15.1 19.04 C15.21 16.08 15.21 16.08 14 14 C12.03 12.9 12.03 12.9 9.69 11.94 C8.91 11.6 8.13 11.25 7.32 10.9 C5.22 10.09 3.2 9.49 1 9 C1 9.66 1 10.32 1 11 C-0.94 10.62 -0.94 10.62 -3 10 C-3.33 9.34 -3.66 8.68 -4 8 C-3.06 5.38 -3.06 5.38 -2 3 C-3.14 2.78 -3.14 2.78 -4.31 2.56 C-7 2 -7 2 -10 1 C-12.06 0.93 -14.13 0.92 -16.19 0.94 C-17.27 0.95 -18.36 0.96 -19.48 0.96 C-20.31 0.98 -21.14 0.99 -22 1 C-22 1.66 -22 2.32 -22 3 C-22.66 2.67 -23.32 2.34 -24 2 C-16.53 -5.72 -9.47 -2.88 0 0 Z \",fill:\"#472859\",transform:\"translate(419,1109)\"})),_path782||(_path782=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 -0.21 2.06 -0.21 6 0.29 C8.42 2.35 10.23 4.66 12 7.29 C4.37 6.38 4.37 6.38 1.31 5.6 C-1.83 5.18 -3.25 5.71 -6 7.29 C-7.84 9.19 -9.39 11.17 -11 13.29 C-9.51 17.56 -7.35 20.91 -4.75 24.6 C-4.35 25.17 -3.95 25.74 -3.54 26.33 C-0.8 30.23 2.04 34.05 5 37.8 C6 39.29 6 39.29 6 41.29 C5.34 41.29 4.68 41.29 4 41.29 C2.42 39.41 0.95 37.52 -0.5 35.54 C-4.77 29.84 -9.24 24.36 -13.87 18.95 C-19.03 12.51 -19.03 12.51 -18.95 9.18 C-16.97 5.23 -12.79 3.28 -9 1.29 C-5.92 0.53 -3.1 0.45 0 0 Z \",fill:\"#462453\",transform:\"translate(806,129.7109375)\"})),_path783||(_path783=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.37 0.59 5.12 1.7 7.62 4 C8.32 4.63 9.01 5.26 9.73 5.91 C10.48 6.6 11.23 7.29 12 8 C13.67 9.5 15.33 11 17 12.5 C19.38 14.64 21.77 16.79 24.13 18.95 C28.04 22.48 31.91 25.33 36.53 27.86 C37.02 28.24 37.5 28.61 38 29 C38 29.99 38 30.98 38 32 C40.97 32.5 40.97 32.5 44 33 C44.5 34.98 44.5 34.98 45 37 C44.67 36.34 44.34 35.68 44 35 C43.07 35.14 42.14 35.29 41.19 35.44 C30.17 35.39 18.17 22.19 10.75 15 C0 3.94 0 3.94 0 0 Z \",fill:\"#3E1C4D\",transform:\"translate(939,601)\"})),_path784||(_path784=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 3.88 4.56 C4.43 5.77 4.43 5.77 5 7 C6.66 7.38 8.32 7.71 10 8 C11.88 9.69 11.88 9.69 13 12 C12.88 15.06 12.88 15.06 12 18 C11.5 18.46 10.99 18.93 10.47 19.4 C8.55 21.49 8.62 22.66 8.59 25.46 C8.57 26.34 8.55 27.22 8.53 28.12 C8.52 29.05 8.51 29.98 8.5 30.94 C8.31 38.08 7.67 44.4 5.63 51.29 C4.69 55.34 4.83 59.26 4.99 63.41 C5.01 67.72 3.62 71.05 2 75 C1.42 76.47 0.85 77.95 0.27 79.43 C-0.04 80.22 -0.35 81.02 -0.66 81.84 C-0.98 82.65 -1.3 83.47 -1.62 84.31 C-1.95 85.15 -2.27 85.98 -2.61 86.85 C-3.41 88.9 -4.2 90.95 -5 93 C-5.66 93 -6.32 93 -7 93 C-6.59 91.78 -6.18 90.57 -5.75 89.31 C-5.16 87.54 -4.58 85.77 -4 84 C-3.69 83.05 -3.37 82.1 -3.05 81.13 C5.45 54.58 8.92 26.75 0 0 Z \",fill:\"#3A174A\",transform:\"translate(374,1029)\"})),_path785||(_path785=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0 2 0 3.69 1.12 C5 3 5 3 4.6 5.74 C4.4 6.81 4.2 7.89 4 9 C3.86 11.02 3.76 13.04 3.68 15.05 C3.64 16.16 3.6 17.27 3.56 18.41 C3.5 20.13 3.5 20.13 3.44 21.88 C3.39 23.04 3.35 24.21 3.31 25.41 C3.2 28.27 3.1 31.14 3 34 C2.01 34 1.02 34 0 34 C-0.33 33.34 -0.66 32.68 -1 32 C-2.98 32.5 -2.98 32.5 -5 33 C-8.65 22.07 -8.65 22.07 -7.12 17.19 C-6.22 15.54 -5.27 13.91 -4.29 12.3 C-2.37 8.87 -2.22 5.88 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#341546\",transform:\"translate(1272,818)\"})),_path786||(_path786=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.7 6.14 1.32 8.52 -1 12 C-0.34 12.45 0.32 12.91 1 13.38 C1.66 13.91 2.32 14.45 3 15 C3 15.66 3 16.32 3 17 C3.99 17.33 4.98 17.66 6 18 C6 18.66 6 19.32 6 20 C1.15 18.48 -3.43 16.57 -8.06 14.5 C-12.35 12.6 -16.63 10.7 -21 9 C-18.67 7.79 -16.5 6.83 -14 6 C-13.57 4.3 -13.57 4.3 -13.12 2.56 C-12 -1 -12 -1 -9.56 -2.5 C-5.82 -3.23 -3.23 -1.77 0 0 Z \",fill:\"#220B37\",transform:\"translate(1039,737)\"})),_path787||(_path787=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.25 2 1.25 4 3 C4 4.32 4 5.64 4 7 C4.66 7 5.32 7 6 7 C7.62 10.67 9.11 14.08 10 18 C1.76 20.33 1.76 20.33 -2 19 C-4.03 17.71 -6.04 16.38 -8 15 C-8.33 16.98 -8.66 18.96 -9 21 C-9.99 21 -10.98 21 -12 21 C-12.37 14.42 -12.37 14.42 -10.62 12.44 C-10.09 11.96 -9.55 11.49 -9 11 C-8.63 9.58 -8.63 9.58 -8.25 8.12 C-6.48 3.71 -3.98 2.51 0 0 Z \",fill:\"#2C173A\",transform:\"translate(879,437)\"})),_path788||(_path788=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.87 0.33 1.73 0.66 2.62 1 C5.96 1.99 8.55 2.16 12 2 C12.33 3.32 12.66 4.64 13 6 C12.34 6 11.68 6 11 6 C11.66 8.31 12.32 10.62 13 13 C12.34 13 11.68 13 11 13 C11.33 14.32 11.66 15.64 12 17 C8.77 18.92 6.68 20.01 2.88 19.94 C-0.7 18.77 -2 18.23 -4 15 C-4.56 11.25 -4.59 7.75 -4 4 C-2 1.31 -2 1.31 0 0 Z \",fill:\"#472554\",transform:\"translate(506,1206)\"})),_path789||(_path789=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.12 0.62 0.25 1.24 0.38 1.88 C1.16 4.54 2.62 5.65 4.62 7.5 C6 9 6 9 6 11 C8.31 11 10.62 11 13 11 C11.94 15.47 10.36 18.6 7.06 21.74 C2.87 24.3 -2.17 24.75 -7 25 C-8 24 -8 24 -8.25 21.31 C-7.96 17.48 -6.79 15.39 -5 12 C-4.19 9.7 -3.46 7.38 -2.75 5.05 C-2 3 -2 3 0 0 Z \",fill:\"#371942\",transform:\"translate(237,780)\"})),_path790||(_path790=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.14 4.81 5.01 8.07 4 14 C1.29 17.2 -0.36 17.91 -4.5 18.5 C-8.54 17.92 -10.15 16.85 -13 14 C-14.44 11.13 -14.38 9.18 -14 6 C-9.76 1.76 -5.99 -0.33 0 0 Z \",fill:\"#8079AC\",transform:\"translate(672,585)\"})),_path791||(_path791=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.5 2.97 0.5 6 1 C6.57 7.84 4.51 13.52 2.31 19.94 C1.97 20.98 1.63 22.03 1.28 23.11 C-0.57 28.61 -2.58 33.49 -5.86 38.28 C-7.08 40.12 -8.05 42.01 -9 44 C-9.66 43.67 -10.32 43.34 -11 43 C-10.67 41.35 -10.34 39.7 -10 38 C-10.66 37.67 -11.32 37.34 -12 37 C-11.42 35.94 -10.83 34.89 -10.23 33.8 C-7.43 28.19 -5.92 22.28 -4.31 16.25 C-4.01 15.13 -3.7 14 -3.38 12.85 C-2.21 8.57 -1.06 4.3 0 0 Z \",fill:\"#1D1521\",transform:\"translate(841,453)\"})),_path792||(_path792=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.27 1.11 1.54 2.23 1.81 3.38 C4.42 13.69 7.92 22.81 13.01 32.14 C14.42 34.79 15.7 37.5 16.97 40.22 C18.09 42.15 19.36 43.5 21 45 C20.67 45.66 20.34 46.32 20 47 C21.32 47.33 22.64 47.66 24 48 C23.34 48.66 22.68 49.32 22 50 C19.38 49.62 19.38 49.62 17 49 C17 48.34 17 47.68 17 47 C16.41 46.78 15.83 46.56 15.22 46.33 C12.3 44.58 11.19 42.59 9.44 39.69 C8.86 38.74 8.28 37.8 7.68 36.82 C7.13 35.89 6.57 34.96 6 34 C5.45 33.16 4.89 32.32 4.32 31.46 C2.88 28.77 2.58 26.96 2.44 23.94 C2.26 20.37 1.66 18.14 0 15 C-0.38 12.67 -0.71 10.34 -1 8 C-1.23 7.09 -1.45 6.18 -1.69 5.25 C-2 3 -2 3 0 0 Z \",fill:\"#1F0D31\",transform:\"translate(901,565)\"})),_path793||(_path793=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.83 0.53 4.71 0.66 7.31 3.75 C9.06 7.11 9.64 8.33 9 12 C6.59 14.46 6.59 14.46 3.38 16.81 C2.33 17.6 1.29 18.39 0.21 19.21 C-3.27 21.15 -5.08 21.47 -9 21 C-9.66 20.67 -10.32 20.34 -11 20 C-10.03 11.63 -5.09 6.4 0 0 Z \",fill:\"#856B8A\",transform:\"translate(775,543)\"})),_path794||(_path794=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.98 2.02 1.97 3.04 1.95 4.09 C1.9 7.9 1.86 11.7 1.84 15.51 C1.82 17.16 1.8 18.8 1.77 20.44 C1.74 22.82 1.72 25.19 1.71 27.56 C1.69 28.29 1.68 29.01 1.66 29.76 C1.66 35.11 2.9 39.08 5 44 C4.01 44.66 3.02 45.32 2 46 C0.79 49.05 0.79 49.05 0 52 C1.65 52.66 3.3 53.32 5 54 C4.67 54.66 4.34 55.32 4 56 C0.54 54.51 0.54 54.51 -3 53 C-2.42 50.61 -1.78 48.33 -1 46 C-1.42 44.19 -1.91 42.4 -2.44 40.62 C-3.95 34.46 -4.28 28.66 -4.25 22.31 C-4.25 21.45 -4.24 20.58 -4.24 19.69 C-4.18 15.28 -3.98 10.88 -3.67 6.48 C-3.62 5.67 -3.56 4.86 -3.5 4.02 C-3 2 -3 2 0 0 Z \",fill:\"#180C24\",transform:\"translate(503,312)\"})),_path795||(_path795=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.2 6.39 18.67 13.47 21 25 C21.29 29.69 21.24 34.31 21 39 C18 38 18 38 16.68 35.59 C16.23 34.57 15.78 33.55 15.31 32.5 C12.76 27.11 9.83 23.15 5.64 18.94 C3.92 16.91 3.4 15.59 3 13 C4.65 12.67 6.3 12.34 8 12 C6.35 8.97 4.77 6.77 2.31 4.31 C1.55 3.55 0.79 2.79 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3C1A4D\",transform:\"translate(1166,691)\"})),_path796||(_path796=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.58 2.23 1.15 2.45 1.75 2.69 C6.12 5.24 8.6 9.21 10 14 C10.12 17.31 10.12 17.31 10 20 C4.6 18.9 1.72 17.18 -2.3 13.46 C-4.63 11.46 -7.23 10.29 -10 9 C-10.66 8.34 -11.32 7.68 -12 7 C-11.62 3.38 -11.62 3.38 -11 0 C-7.02 -1.05 -4.02 -0.84 0 0 Z \",fill:\"#867395\",transform:\"translate(672,263)\"})),_path797||(_path797=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C2 3.66 2 4.32 2 5 C3.32 5.66 4.64 6.32 6 7 C6 8.98 6 10.96 6 13 C6.66 13 7.32 13 8 13 C8 13.66 8 14.32 8 15 C4.91 16.03 3.47 15.97 0.31 15.56 C-0.5 15.46 -1.3 15.36 -2.14 15.25 C-2.75 15.17 -3.37 15.09 -4 15 C-4 14.34 -4 13.68 -4 13 C-7.52 12.92 -10.62 12.96 -14 14 C-13.67 11.69 -13.34 9.38 -13 7 C-13.99 6.67 -14.98 6.34 -16 6 C-16 5.01 -16 4.02 -16 3 C-15.34 3 -14.68 3 -14 3 C-14 2.34 -14 1.68 -14 1 C-14.99 0.67 -15.98 0.34 -17 0 C-15.11 -0.2 -13.21 -0.38 -11.31 -0.56 C-9.73 -0.72 -9.73 -0.72 -8.11 -0.88 C-5.19 -0.99 -2.83 -0.71 0 0 Z M-17 8 C-16 12 -16 12 -16 12 Z \",fill:\"#0C0F37\",transform:\"translate(689,805)\"})),_path798||(_path798=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.97 1.5 5.4 3.71 7.62 7.25 C10.66 11.97 13.78 16.58 17.06 21.12 C19.97 25.17 22.86 29.22 25.69 33.31 C28.39 37.19 31.24 40.92 34.17 44.64 C44.08 57.42 44.08 57.42 47 63 C46.67 63.66 46.34 64.32 46 65 C41.96 62.08 39.72 59.13 37 55 C35.31 52.82 33.6 50.65 31.88 48.5 C24.12 38.73 17.02 28.52 9.94 18.25 C9.46 17.56 8.98 16.87 8.49 16.15 C5.12 11.25 5.12 11.25 4 9 C3.34 8.34 2.68 7.68 2 7 C2 5.68 2 4.36 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#000002\",transform:\"translate(219,930)\"})),_path799||(_path799=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.79 2.32 3.42 4.65 5 7.12 C7.23 10.33 8.72 11.76 12.59 12.49 C14.53 12.75 16.47 13 18.41 13.24 C21 14 21 14 22.91 15.88 C23.27 16.58 23.63 17.28 24 18 C23.67 18.99 23.34 19.98 23 21 C20.03 21 17.06 21 14 21 C14 20.34 14 19.68 14 19 C13.34 19 12.68 19 12 19 C11.67 20.65 11.34 22.3 11 24 C10.34 24 9.68 24 9 24 C9.33 28.29 9.66 32.58 10 37 C9.51 35.51 9.51 35.51 9 34 C8.34 34 7.68 34 7 34 C6.81 33.18 6.61 32.36 6.41 31.52 C6.15 30.44 5.89 29.36 5.62 28.25 C5.24 26.65 5.24 26.65 4.85 25.02 C4.14 22.1 4.14 22.1 2.96 19.98 C1.7 17.38 1.37 14.92 0.94 12.06 C0.48 9.08 0.03 6.13 -0.62 3.18 C-0.75 2.46 -0.87 1.74 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#411E4E\",transform:\"translate(1219,726)\"})),_path800||(_path800=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.15 1.76 8.7 4.17 11.88 8.62 C12.25 9.41 12.62 10.19 13 11 C12.67 11.66 12.34 12.32 12 13 C10.68 13 9.36 13 8 13 C8.21 13.6 8.41 14.2 8.62 14.81 C9 17 9 17 7 20 C6.34 19.67 5.68 19.34 5 19 C2.96 18.77 0.92 18.59 -1.12 18.44 C-2.77 18.31 -2.77 18.31 -4.45 18.18 C-5.71 18.09 -5.71 18.09 -7 18 C-7 17.67 -7 17.34 -7 17 C-5.02 16.67 -3.04 16.34 -1 16 C-2 15.93 -2 15.93 -3.01 15.85 C-12.33 15.06 -12.33 15.06 -16 13 C-16.66 12.01 -17.32 11.02 -18 10 C-15 9 -15 9 -11.62 9.56 C-7.76 10.03 -6.19 10.21 -3 8 C-1.69 5.42 -0.8 2.78 0 0 Z \",fill:\"#371942\",transform:\"translate(285,914)\"})),_path801||(_path801=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-2.39 5.51 -4.22 7.01 -9.06 7.44 C-11.01 7.72 -11.01 7.72 -13 8 C-13.33 8.66 -13.66 9.32 -14 10 C-16.48 10.31 -16.48 10.31 -19.62 10.44 C-24.74 10.78 -28.33 11.79 -33 14 C-38.64 15.83 -44.02 17.49 -50 17 C-50 17.66 -50 18.32 -50 19 C-50.99 18.67 -51.98 18.34 -53 18 C-53.69 15.94 -53.69 15.94 -54 14 C-50.68 12.26 -47.65 10.83 -44 10 C-43.28 9.65 -42.56 9.3 -41.81 8.94 C-39.08 8.03 -37.57 7.95 -34.75 8.06 C-28.52 8.22 -23.16 6.44 -18 3 C-14.72 2.9 -11.5 3.07 -8.23 3.22 C-4.65 2.98 -2.88 2.07 0 0 Z \",fill:\"#0D0F39\",transform:\"translate(816,781)\"})),_path802||(_path802=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C4.63 10.74 3.71 22.7 0 32 C-2.86 36.7 -6.45 40.82 -10 45 C-10.66 45.99 -11.32 46.98 -12 48 C-12.66 47.67 -13.32 47.34 -14 47 C-13.72 46.28 -13.45 45.55 -13.16 44.8 C-10.92 38.99 -10.92 38.99 -9.56 32.94 C-8.98 29.9 -8 27.91 -6.56 25.19 C-2.9 18.11 -1.68 11.78 -2.12 3.85 C-2 2 -2 2 0 0 Z \",fill:\"#4B295A\",transform:\"translate(505,251)\"})),_path803||(_path803=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.34 1.66 3.58 2.58 5 5 C5.6 11.01 4.3 17.18 1.39 22.47 C-1.22 25.35 -4.26 25.5 -8 26 C-7.63 26.93 -7.26 27.86 -6.88 28.81 C-6.59 29.86 -6.3 30.92 -6 32 C-6.66 32.99 -7.32 33.98 -8 35 C-8.4 33.86 -8.4 33.86 -8.81 32.69 C-9.78 29.98 -9.78 29.98 -11.69 28.56 C-13 27 -13 27 -13.12 24.31 C-11.97 20.93 -11.04 19.81 -8.62 17.31 C-4.85 13.32 -3.71 9.64 -2.61 4.32 C-2 2 -2 2 0 0 Z \",fill:\"#28103B\",transform:\"translate(456,712)\"})),_path804||(_path804=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.68 2.68 2.31 4.14 2.41 7.88 C2.45 9.05 2.49 10.22 2.53 11.42 C2.56 12.64 2.59 13.86 2.62 15.12 C2.66 16.36 2.7 17.59 2.74 18.86 C2.84 21.9 2.92 24.95 3 28 C3.66 28 4.32 28 5 28 C5.04 28.79 5.07 29.57 5.11 30.38 C5.5 36.64 6.4 41.25 9 47 C9.36 49.3 9.56 51.59 9.75 53.91 C10.06 56.5 10.87 58.66 12 61 C9.03 61.5 9.03 61.5 6 62 C5.13 60.62 4.28 59.22 3.44 57.81 C2.96 57.04 2.49 56.26 2 55.46 C0.78 52.45 1.18 51.09 2 48 C2.67 38.54 2.11 27.03 -1 18 C-1.66 17.67 -2.32 17.34 -3 17 C-2.89 15.1 -2.76 13.21 -2.62 11.31 C-2.56 10.26 -2.49 9.2 -2.41 8.11 C-2.01 5.09 -1.26 2.76 0 0 Z \",fill:\"#2E153B\",transform:\"translate(205,853)\"})),_path805||(_path805=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0 5 0 5 -2 8 C-5.94 9.62 -7.93 10.36 -12 9 C-12.41 10.24 -12.83 11.48 -13.25 12.75 C-14.65 16.37 -15.67 18.78 -19 21 C-22.3 21.91 -25.61 22.51 -29 23 C-29 22.01 -29 21.02 -29 20 C-28.24 19.86 -27.47 19.71 -26.69 19.56 C-22.99 17.41 -22.6 15.05 -21.38 11.09 C-20.77 8.95 -20.77 8.95 -22 7 C-20.44 5 -20.44 5 -18 3 C-14.25 2.75 -14.25 2.75 -11 3 C-10.67 2.34 -10.34 1.68 -10 1 C-9.36 1.01 -8.72 1.02 -8.07 1.04 C-7.24 1.04 -6.41 1.05 -5.56 1.06 C-4.33 1.08 -4.33 1.08 -3.07 1.1 C-1.01 1.23 -1.01 1.23 0 0 Z \",fill:\"#322537\",transform:\"translate(621,249)\"})),_path806||(_path806=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.77 7 -0.07 10.03 -3 14 C-3.62 13.32 -4.24 12.64 -4.88 11.94 C-9.4 9.13 -12.93 9.87 -18 11 C-20.47 11.84 -22.65 12.85 -25 14 C-25.99 14.33 -26.98 14.66 -28 15 C-28.33 15.66 -28.66 16.32 -29 17 C-28.74 15.56 -28.47 14.12 -28.19 12.69 C-28.04 11.89 -27.89 11.09 -27.73 10.26 C-26.89 7.67 -26.05 6.76 -24 5 C-22.21 4.2 -22.21 4.2 -20.23 3.61 C-19.51 3.4 -18.78 3.18 -18.04 2.96 C-17.28 2.75 -16.53 2.53 -15.75 2.31 C-14.64 1.98 -14.64 1.98 -13.51 1.63 C-8.92 0.3 -4.83 -0.42 0 0 Z \",fill:\"#0B133D\",transform:\"translate(827,1156)\"})),_path807||(_path807=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.35 2.98 -1.3 4.96 -3 7 C-2.67 7.66 -2.34 8.32 -2 9 C-2.66 9.43 -3.32 9.87 -4 10.31 C-4.66 10.87 -5.32 11.43 -6 12 C-6 12.99 -6 13.98 -6 15 C-9.29 15.8 -10.71 16.1 -14 15 C-14 15.66 -14 16.32 -14 17 C-14.8 17.29 -15.61 17.58 -16.44 17.88 C-19.13 18.73 -19.13 18.73 -20 21 C-20.66 21 -21.32 21 -22 21 C-22.33 21.99 -22.66 22.98 -23 24 C-23.48 17.3 -23.3 13.47 -19 8 C-18.72 6.89 -18.72 6.89 -18.44 5.75 C-18 4 -18 4 -15 2 C-12.21 1.86 -9.48 2 -6.69 2.12 C-3.87 1.99 -2.45 1.29 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(498,216)\"})),_path808||(_path808=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.62 2.44 0.62 5 2 C5.93 2.5 6.86 2.99 7.81 3.5 C8.53 4 9.26 4.49 10 5 C10 5.66 10 6.32 10 7 C11.32 7.66 12.64 8.32 14 9 C12.76 9.37 11.52 9.74 10.25 10.12 C5.13 11.81 0.47 14.19 -4.3 16.7 C-6.58 17.8 -8.53 18.52 -11 19 C-13 16 -13 16 -13.12 12.69 C-11.53 7.47 -8.43 5.86 -4 3 C-3.3 2.44 -2.61 1.87 -1.89 1.29 C-1.27 0.86 -0.64 0.44 0 0 Z \",fill:\"#806685\",transform:\"translate(918,689)\"})),_path809||(_path809=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.64 1.17 9.39 2.55 14 6 C13.61 11.42 12.11 14.41 8 18 C4.9 18.67 2.09 18.75 -1 18 C-3.69 15.94 -3.96 15.29 -4.44 11.81 C-3.91 7.2 -2.31 3.97 0 0 Z \",fill:\"#50356A\",transform:\"translate(1103,687)\"})),_path810||(_path810=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.3 0.25 1.3 0.25 2.62 0.5 C5.93 1.1 5.93 1.1 9 0.88 C12.68 1.03 14.75 2.31 18 4 C19.26 4.27 20.52 4.54 21.81 4.81 C26.89 5.95 30.96 8.79 35 12 C35 12.33 35 12.66 35 13 C21.33 13.47 9.85 12.57 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#806685\",transform:\"translate(603,796)\"})),_path811||(_path811=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.24 0.46 1.24 0.46 2.51 0.93 C7.05 2.32 11.16 2.22 15.88 2.12 C16.75 2.12 17.63 2.11 18.54 2.1 C20.69 2.07 22.85 2.04 25 2 C25.33 2.66 25.66 3.32 26 4 C25.43 4.09 24.86 4.17 24.28 4.26 C18.32 5.35 14.71 7.2 10 11 C10.54 14.89 11.52 17.1 14 20.12 C14.62 20.89 15.24 21.65 15.88 22.44 C16.93 23.71 16.93 23.71 18 25 C18.81 26 19.63 27 20.46 28.03 C22.64 30.69 24.81 33.35 27 36 C26.01 36 25.02 36 24 36 C24 35.34 24 34.68 24 34 C23.34 34 22.68 34 22 34 C20.51 32.3 19.08 30.54 17.69 28.75 C14.71 24.93 11.79 22 8 19 C6.69 16.25 6.69 16.25 6 14 C5.34 14 4.68 14 4 14 C4 13.01 4 12.02 4 11 C2.68 11 1.36 11 0 11 C-3.05 5.63 -3.05 5.63 -2.81 2.69 C-2 1 -2 1 0 0 Z \",fill:\"#44214F\",transform:\"translate(778,127)\"})),_path812||(_path812=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.65 7.66 -0.09 12.7 -2 18 C-2.38 19.11 -2.38 19.11 -2.76 20.25 C-5.03 26.75 -5.03 26.75 -8 29 C-11.7 29.64 -15.44 29.46 -19.19 29.44 C-20.2 29.46 -21.22 29.48 -22.27 29.5 C-29.05 29.49 -33.12 28.32 -39 25 C-42.17 25.18 -44.19 25.59 -47 27 C-45.25 21.25 -45.25 21.25 -43 19 C-39.32 19.21 -36.64 19.63 -33.43 21.49 C-28.75 23.55 -24.44 23.72 -19.38 23.94 C-17.96 24.04 -17.96 24.04 -16.52 24.14 C-11.31 24.42 -11.31 24.42 -6.52 22.64 C-4.18 18.57 -3.27 14.31 -2.25 9.75 C-1.92 8.35 -1.92 8.35 -1.58 6.91 C-1.04 4.61 -0.51 2.31 0 0 Z \",fill:\"#0B133D\",transform:\"translate(891,1150)\"})),_path813||(_path813=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-2.06 9.21 -6.57 16.34 -12 22 C-12.66 22 -13.32 22 -14 22 C-14.33 22.99 -14.66 23.98 -15 25 C-16.74 26.02 -18.48 27.02 -20.25 27.97 C-22.15 28.98 -22.15 28.98 -23.81 30.94 C-27.27 34.2 -31.54 36.37 -36 38 C-36.99 37.67 -37.98 37.34 -39 37 C-38.19 36.65 -38.19 36.65 -37.36 36.3 C-32.81 34.23 -30.12 32.76 -28 28 C-28.66 27.34 -29.32 26.68 -30 26 C-29.2 25.38 -28.39 24.76 -27.56 24.12 C-24.96 22.26 -24.96 22.26 -24 20 C-23.34 20 -22.68 20 -22 20 C-21.75 19.44 -21.5 18.89 -21.25 18.31 C-20 16 -20 16 -18.19 13.81 C-15.74 10.67 -13.98 7.41 -12.15 3.89 C-11 2 -11 2 -9 1 C-9.69 10.49 -9.69 10.49 -12.84 14.11 C-14.26 15.27 -15.7 16.4 -17.16 17.5 C-19.44 19.36 -20.31 21.15 -21 24 C-20.01 24 -19.02 24 -18 24 C-17.74 23.43 -17.48 22.87 -17.21 22.28 C-14.52 17.2 -10.82 12.44 -6.31 8.88 C-3.17 6.33 -1.86 3.58 0 0 Z \",fill:\"#30163C\",transform:\"translate(367,1106)\"})),_path814||(_path814=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C14 2.34 25.78 11.91 37 20 C37.78 20.55 38.55 21.1 39.35 21.67 C40.45 22.47 40.45 22.47 41.57 23.28 C42.56 23.99 42.56 23.99 43.57 24.72 C44.04 25.14 44.51 25.57 45 26 C45 26.66 45 27.32 45 28 C46.07 28.33 46.07 28.33 47.15 28.68 C54.64 32.16 61.71 40.48 65 48 C65 48.99 65 49.98 65 51 C64.34 51 63.68 51 63 51 C62.44 49.95 61.89 48.9 61.31 47.81 C59.34 44.32 56.88 41.8 54 39 C54 38.34 54 37.68 54 37 C53.46 36.77 52.93 36.55 52.38 36.31 C49.84 34.91 47.78 33.19 45.59 31.3 C44 30 42.36 28.91 40.62 27.81 C39.76 27.21 38.89 26.62 38 26 C38 25.34 38 24.68 38 24 C37.27 23.72 36.54 23.45 35.78 23.16 C28.21 20 21.52 15.04 14.85 10.34 C10.6 7.36 6.23 4.67 1.73 2.09 C1.16 1.73 0.59 1.37 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#1B0E29\",transform:\"translate(1117,786)\"})),_path815||(_path815=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.99 4.29 2.98 8.58 4 13 C4.66 12.34 5.32 11.68 6 11 C10.87 20.78 14.87 29.87 14 41 C13 43.94 13 43.94 12 46 C11.67 45.01 11.34 44.02 11 43 C10.63 42.28 10.26 41.56 9.88 40.81 C8.88 37.62 9.36 35.45 9.91 32.2 C10.08 28.2 8.5 24.65 7 21 C6.67 21.66 6.34 22.32 6 23 C5.34 23 4.68 23 4 23 C2.62 21.37 1.28 19.71 0 18 C0.33 17.34 0.66 16.68 1 16 C0.01 16 -0.98 16 -2 16 C-2 16.66 -2 17.32 -2 18 C-4.64 18 -7.28 18 -10 18 C-9.4 16.97 -8.8 15.94 -8.19 14.88 C-6.86 12.56 -5.63 10.26 -4.44 7.88 C-3.08 5.15 -1.65 2.55 0 0 Z \",fill:\"#401F54\",transform:\"translate(1250,761)\"})),_path816||(_path816=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.1 1.22 4.71 3.15 6.94 5.61 C7.74 6.47 8.54 7.33 9.36 8.22 C11.37 11.12 11.61 12.42 11.19 15.86 C9.11 16.56 7.03 17.24 4.94 17.92 C3.78 18.3 2.62 18.69 1.43 19.08 C-3.02 20.15 -3.02 20.15 -5.81 18.86 C-7.56 16.3 -7.56 16.3 -8.81 13.86 C-8.1 13.09 -8.1 13.09 -7.37 12.3 C-5.55 9.83 -5.55 9.83 -5.31 6.3 C-4.81 2.86 -4.81 2.86 -3.5 0.86 C-1.81 -0.14 -1.81 -0.14 0 0 Z \",fill:\"#846F90\",transform:\"translate(542.80859375,423.140625)\"})),_path817||(_path817=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.5 4.31 -3.07 6.6 -5.94 9.69 C-6.39 10.19 -6.85 10.68 -7.32 11.2 C-10.13 14.23 -11.65 15.82 -15.81 16.38 C-19 16 -19 16 -21.88 13.94 C-24.51 10.29 -24.65 8.41 -24 4 C-22.9 2.26 -22.9 2.26 -21 1 C-17.79 1 -17.79 1 -14.06 1.44 C-8.42 2.1 -5.14 0 0 0 Z \",fill:\"#846F90\",transform:\"translate(874,656)\"})),_path818||(_path818=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.29 1.11 0.58 1.69 0.88 C5.94 2.95 9.81 4.25 14.5 4.94 C18.54 5.64 21.81 6.25 25 9 C25 9.99 25 10.98 25 12 C26.63 14.18 26.63 14.18 28.75 16.38 C31.06 18.87 33.21 21.28 35.25 24 C36.85 26.04 36.85 26.04 38.81 27.06 C41.37 26.99 42.39 26.31 44.56 25 C45.7 24.34 46.83 23.68 48 23 C48.99 23.33 49.98 23.66 51 24 C42.74 29.74 42.74 29.74 38 29 C38.66 30.98 39.32 32.96 40 35 C35.4 32.84 33.2 29.84 30.43 25.74 C29.02 23.71 29.02 23.71 26 23 C24.42 21.11 24.42 21.11 22.75 18.75 C18.5 13.12 14.15 9.97 7.81 7 C4.23 5.3 2.22 3.34 0 0 Z \",fill:\"#401E54\",transform:\"translate(969,532)\"})),_path819||(_path819=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 3.39 1.01 6.35 0.88 9.88 C0.83 14.71 1.2 17.91 4 22 C4.66 22.66 5.32 23.32 6 24 C6.66 23.67 7.32 23.34 8 23 C10.48 26.73 10.57 30.68 10 35 C9.05 37.02 8.05 39.03 7 41 C6.18 45.61 5.83 50.14 5.68 54.81 C5.64 56.05 5.6 57.29 5.56 58.57 C5.52 59.85 5.48 61.12 5.44 62.44 C5.39 63.74 5.35 65.05 5.31 66.39 C5.2 69.59 5.1 72.8 5 76 C4.67 76 4.34 76 4 76 C3.83 71.16 3.67 66.32 3.52 61.49 C3.46 59.84 3.41 58.2 3.35 56.56 C3.27 54.18 3.19 51.81 3.12 49.44 C3.09 48.71 3.07 47.99 3.04 47.24 C2.9 42.38 3.3 37.81 4 33 C2.55 32.47 2.55 32.47 1.06 31.94 C-2 30 -2 30 -2.71 26.88 C-3.01 22.87 -2.97 19 -2.69 15 C-2.65 14.33 -2.62 13.65 -2.58 12.96 C-2.28 8.36 -1.39 4.36 0 0 Z \",fill:\"#38144A\",transform:\"translate(459,299)\"})),_path820||(_path820=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.74 0.42 13.79 5.74 19 11 C20.9 13.31 22.7 15.66 24.46 18.08 C26.04 20.24 26.04 20.24 29 22 C29 23.32 29 24.64 29 26 C24.41 24.39 22.11 22.87 19.62 18.69 C17.42 15.03 14.89 10.95 11 9 C8.09 8.42 8.09 8.42 5 9 C2.58 11.89 2.58 11.89 1 15 C-2.36 13.57 -4.32 11.82 -6.69 9.06 C-7.29 8.37 -7.89 7.68 -8.51 6.97 C-10 5 -10 5 -11 2 C-9.74 2.23 -8.48 2.45 -7.19 2.69 C-5.01 3.02 -5.01 3.02 -3 3 C-1.31 1.56 -1.31 1.56 0 0 Z \",fill:\"#28103B\",transform:\"translate(1251,950)\"})),_path821||(_path821=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 1.56 2.92 2.83 3.94 4.94 C5.24 7.46 6.97 9.03 9 11 C11 14 11 14 11 17 C11.66 17 12.32 17 13 17 C16 20.34 19.12 24.59 20 29 C18.77 33.38 17.54 35.54 14.06 38.5 C11 40 11 40 8.62 39.75 C8.09 39.5 7.55 39.25 7 39 C7 38.34 7 37.68 7 37 C4.03 37.5 4.03 37.5 1 38 C1 37.01 1 36.02 1 35 C1.7 34.84 2.4 34.68 3.12 34.52 C8.82 33.31 8.82 33.31 12.62 29.31 C12.75 28.55 12.87 27.79 13 27 C12.01 26.34 11.02 25.68 10 25 C9.3 22.34 9.22 19.76 9 17 C7.82 17.09 7.82 17.09 6.62 17.19 C5.76 17.13 4.89 17.06 4 17 C1.76 13.63 1.95 12 2.06 8.07 C1.97 5.15 1.08 2.69 0 0 Z \",fill:\"#411E4D\",transform:\"translate(1018,517)\"})),_path822||(_path822=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.72 3.14 4.44 3.29 5.19 3.44 C9.58 5.88 11.36 9.32 13 14 C13.78 20.23 13.58 26.19 11 32 C8.09 30.98 7.13 30.22 5.59 27.49 C2.19 18.59 0 9.59 0 0 Z \",fill:\"#58385F\",transform:\"translate(574,316)\"})),_path823||(_path823=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.72 2.52 3.8 5.74 5.18 9.14 C6.02 11.06 7 12.82 8.06 14.62 C9.65 17.4 10.91 20.01 12 23 C11.34 23 10.68 23 10 23 C9.62 22.25 9.25 21.5 8.86 20.73 C5.1 13.4 5.1 13.4 -1 8 C-1.5 7.4 -1.99 6.8 -2.5 6.19 C-3 5.8 -3.49 5.4 -4 5 C-7.56 5.46 -10.49 6.6 -13.76 8.03 C-21.29 10.83 -28.91 10.53 -36.81 10.5 C-39.74 10.49 -42.66 10.5 -45.58 10.53 C-46.86 10.53 -48.14 10.52 -49.46 10.52 C-53.63 11.09 -55.79 12.31 -59 15 C-59.94 18.26 -59.94 18.26 -60 22 C-60.18 23.65 -60.37 25.29 -60.56 26.94 C-60.71 28.29 -60.86 29.65 -61 31 C-63.08 27.14 -64.2 23.41 -64 19 C-62.44 15.81 -62.44 15.81 -60 13 C-58.86 11.58 -58.86 11.58 -57.69 10.12 C-53.02 6.45 -46.68 7.75 -41.08 7.95 C-29.39 8.23 -19.16 6.78 -8.69 1.25 C-5.49 -0.24 -3.48 -0.54 0 0 Z \",fill:\"#715376\",transform:\"translate(627,156)\"})),_path824||(_path824=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.08 0.63 2.16 1.25 2.24 1.9 C2.61 4.72 2.99 7.55 3.38 10.38 C3.5 11.36 3.63 12.34 3.76 13.36 C3.89 14.3 4.02 15.24 4.15 16.21 C4.26 17.08 4.38 17.95 4.5 18.85 C4.85 21.2 4.85 21.2 7 23 C7.73 24.87 8.46 26.74 9.12 28.64 C9.83 30.55 10.63 32.42 11.46 34.28 C13.09 38.04 14.17 41.85 15.19 45.81 C15.36 46.48 15.54 47.15 15.72 47.83 C17 52.71 17 52.71 17 55 C16.34 55 15.68 55 15 55 C14.34 53.35 13.68 51.7 13 50 C12.34 50 11.68 50 11 50 C10.51 48.79 10.51 48.79 10.01 47.55 C9.57 46.48 9.14 45.41 8.69 44.31 C8.26 43.26 7.83 42.2 7.39 41.11 C6.1 38.02 6.1 38.02 4.4 35.48 C2.78 32.61 2.37 30.31 1.94 27.06 C1.46 23.76 0.97 20.91 -0.12 17.75 C-1.98 11.92 -0.99 5.92 0 0 Z \",fill:\"#381848\",transform:\"translate(172,1193)\"})),_path825||(_path825=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C15.69 4.56 15.69 4.56 19.34 10 C19.56 10.66 19.78 11.32 20 12 C18.62 14.62 18.62 14.62 17 17 C17 17.66 17 18.32 17 19 C17.76 19.33 18.52 19.65 19.3 19.99 C20.29 20.43 21.29 20.86 22.31 21.31 C23.3 21.74 24.28 22.17 25.3 22.61 C27.77 23.88 29.2 24.93 31 27 C31.84 27.84 31.84 27.84 32.69 28.69 C33.12 29.12 33.55 29.55 34 30 C31 30 31 30 29.31 28.62 C26.04 26.33 22.9 25.84 19 25 C19 24.34 19 23.68 19 23 C18.17 23 17.35 23 16.5 23 C11.34 21.52 8 18.44 5 14 C5.38 10.31 5.38 10.31 6 7 C4.24 4.9 2.26 3.61 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2C123E\",transform:\"translate(1068,748)\"})),_path826||(_path826=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.53 2 2.53 2 5 5 C5.12 7.96 5.01 10.09 4.5 12.94 C4.36 13.97 4.36 13.97 4.22 15.03 C3.54 19.51 2.23 23.01 0 27 C-0.56 28.06 -1.11 29.12 -1.68 30.21 C-2.26 31.26 -2.84 32.3 -3.44 33.38 C-4.01 34.43 -4.59 35.49 -5.18 36.59 C-5.78 37.38 -6.38 38.18 -7 39 C-8.32 39 -9.64 39 -11 39 C-12.14 35.58 -11.94 35.25 -10.49 32.15 C-10.14 31.39 -9.8 30.63 -9.45 29.84 C-8.88 28.62 -8.88 28.62 -8.31 27.38 C-4.35 18.42 -1.87 9.59 0 0 Z \",fill:\"#1B0F27\",transform:\"translate(920,368)\"})),_path827||(_path827=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 1.62 2.38 1.62 4 4 C4.5 6.97 4.5 6.97 5 10 C-8.2 10 -21.4 10 -35 10 C-34 6 -34 6 -33 5 C-31.07 4.83 -31.07 4.83 -28.69 4.81 C-27.91 4.8 -27.13 4.78 -26.32 4.77 C-23.78 5.02 -22.23 5.81 -20 7 C-16.07 7 -14.05 5.33 -11.12 2.94 C-7.33 -0.03 -4.9 -0.94 0 0 Z \",fill:\"#421F4F\",transform:\"translate(536,1270)\"})),_path828||(_path828=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6 0.89 5.2 1.77 7.81 2.62 C8.85 2.97 8.85 2.97 9.91 3.32 C11.61 3.88 13.3 4.44 15 5 C14.01 5.33 13.02 5.66 12 6 C12.66 7.32 13.32 8.64 14 10 C11.52 9.51 11.52 9.51 9 9 C9 7.68 9 6.36 9 5 C8.27 5.32 7.54 5.65 6.79 5.98 C4.07 6.97 2.23 7.19 -0.62 7.25 C-7.3 7.71 -13.34 9.85 -19.63 12 C-20.42 12.27 -21.22 12.54 -22.04 12.82 C-22.75 13.07 -23.47 13.32 -24.2 13.58 C-26 14 -26 14 -28 13 C-23.56 7.79 -18.04 5.08 -12 2 C-12.66 1.34 -13.32 0.68 -14 0 C-12.61 -0.39 -11.21 -0.76 -9.81 -1.12 C-9.04 -1.33 -8.26 -1.54 -7.46 -1.76 C-4.36 -2.06 -2.83 -1.28 0 0 Z \",fill:\"#2B123C\",transform:\"translate(345,1213)\"})),_path829||(_path829=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C4.47 1.5 4.47 1.5 8 1 C7.69 1.85 7.38 2.69 7.06 3.56 C5.98 7.08 5.44 10.35 5 14 C4.9 14.69 4.79 15.37 4.68 16.08 C4.15 19.74 4.01 22.47 5 26 C5.09 28.67 5.04 31.32 5 34 C4.34 34 3.68 34 3 34 C2.67 34.99 2.34 35.98 2 37 C-0.07 38.17 -0.07 38.17 -2.56 39.19 C-3.39 39.53 -4.22 39.88 -5.07 40.23 C-6.02 40.61 -6.02 40.61 -7 41 C-7 39.35 -7 37.7 -7 36 C-5.58 35.66 -5.58 35.66 -4.12 35.31 C-0.92 34.31 -0.92 34.31 0.35 31.9 C1.25 27.89 -0.07 25.01 -1.5 21.31 C-3.8 14.77 -4.8 9.65 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#452355\",transform:\"translate(963,463)\"})),_path830||(_path830=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.39 -0.16 2.39 -0.16 5 0 C6.81 2.5 6.81 2.5 8 5 C8.93 4.01 8.93 4.01 9.88 3 C12 1 12 1 14 1 C13.74 2.94 13.47 4.88 13.19 6.81 C13.04 7.89 12.89 8.97 12.73 10.08 C11.96 13.15 11.35 14.03 9 16 C6.91 19.46 5.84 22.33 5.44 26.31 C5.29 27.53 5.15 28.75 5 30 C4.34 30.33 3.68 30.66 3 31 C3 30.34 3 29.68 3 29 C2.34 29 1.68 29 1 29 C-0.1 22.83 -0.12 16.82 -0.06 10.56 C-0.06 9.54 -0.05 8.53 -0.05 7.48 C-0.04 4.99 -0.02 2.49 0 0 Z \",fill:\"#2C123D\",transform:\"translate(831,314)\"})),_path831||(_path831=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C9 3.66 9 4.32 9 5 C9.99 5.33 10.98 5.66 12 6 C11.67 6.99 11.34 7.98 11 9 C10.25 8.88 9.49 8.76 8.72 8.64 C-4.02 7.09 -19.63 10.01 -30.27 17.62 C-31.12 18.3 -31.12 18.3 -32 19 C-32.66 18.67 -33.32 18.34 -34 18 C-32.18 13.09 -28.39 10.26 -23.91 7.9 C-17.47 5.09 -10.91 3.88 -4.03 2.71 C-3.03 2.48 -2.03 2.24 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#261230\",transform:\"translate(229,1141)\"})),_path832||(_path832=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C7 4 7 4 5 5 C5 5.99 5 6.98 5 8 C5.66 8 6.32 8 7 8 C5.53 11.35 3.66 13.69 1.12 16.31 C0.45 17.03 -0.23 17.75 -0.93 18.49 C-3 20 -3 20 -5.14 19.89 C-7 19 -7 19 -8.81 16.5 C-10.28 12.17 -10.39 8.39 -9 4 C-5.56 1.71 -4.01 1.82 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0F1541\",transform:\"translate(1014,1095)\"})),_path833||(_path833=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.28 3.42 3.16 6.79 4.25 10.69 C5.94 16.47 7.74 20.99 11.86 25.52 C13 27 13 27 13 30 C13.57 30.22 14.13 30.44 14.71 30.66 C17.73 32.43 19.4 34.64 21.56 37.38 C22.33 38.33 23.09 39.29 23.88 40.27 C25.61 42.5 27.32 44.74 29 47 C28.67 47.66 28.34 48.32 28 49 C27.34 48.67 26.68 48.34 26 48 C24.51 48.5 24.51 48.5 23 49 C22.01 48.01 21.02 47.02 20 46 C20 46.99 20 47.98 20 49 C18.51 48.5 18.51 48.5 17 48 C15.94 45.81 15.94 45.81 15 43 C14.66 42.01 14.32 41.03 13.98 40.01 C13.36 38.11 12.75 36.21 12.15 34.3 C11.89 33.5 11.64 32.7 11.38 31.88 C11.16 31.15 10.94 30.43 10.71 29.68 C10.13 27.79 10.13 27.79 8 27 C7.38 24.94 7.38 24.94 7 23 C6.01 23.33 5.02 23.66 4 24 C3.32 21.5 2.66 19 2 16.5 C1.81 15.8 1.62 15.11 1.42 14.39 C0.14 9.46 -0.18 5.09 0 0 Z \",fill:\"#2A0E3D\",transform:\"translate(877,590)\"})),_path834||(_path834=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6 0.07 5.16 0.19 7.75 0.38 C8.47 0.42 9.18 0.46 9.92 0.51 C13.69 0.76 17.32 1.15 21 2 C21 2.66 21 3.32 21 4 C22.65 4 24.3 4 26 4 C23.93 6.07 22.74 6.62 20.04 7.62 C19.26 7.92 18.48 8.21 17.67 8.52 C16.85 8.82 16.03 9.12 15.19 9.44 C8.96 11.69 8.96 11.69 3.18 14.85 C2.1 15.42 2.1 15.42 1 16 C-1.31 15.19 -1.31 15.19 -3 14 C-2.69 11.85 -2.38 9.71 -2.06 7.56 C-1.89 6.37 -1.71 5.17 -1.54 3.94 C-1 1 -1 1 0 0 Z \",fill:\"#836988\",transform:\"translate(653,311)\"})),_path835||(_path835=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C0.03 4.45 -0.94 4.91 -1.94 5.38 C-5.07 6.66 -5.07 6.66 -6 9 C-6.66 9 -7.32 9 -8 9 C-11.07 17.48 -11.07 17.48 -10 26 C-7.51 28.57 -4.83 30.82 -2 33 C-2.33 34.32 -2.66 35.64 -3 37 C-10.33 36.63 -10.33 36.63 -13.38 33.75 C-16.39 28.65 -17.6 25.01 -17 19 C-15.93 15.85 -14.54 12.95 -13 10 C-12.44 8.91 -11.89 7.81 -11.31 6.69 C-8.14 2.99 -4.51 1.64 0 0 Z \",fill:\"#67486D\",transform:\"translate(569,272)\"})),_path836||(_path836=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43 3.85 0.56 6.77 -0.38 10.69 C-1.34 14.89 -2.19 18.95 -2.56 23.25 C-3 27 -3 27 -5 29 C-5.28 31.53 -5.47 33.97 -5.56 36.5 C-5.88 43.76 -5.88 43.76 -7 46 C-7.55 52.12 -5.96 56.44 -3.62 61.94 C2.58 76.8 2.58 76.8 1.1 82.41 C0.61 83.43 0.13 84.45 -0.38 85.5 C-1.1 87.06 -1.1 87.06 -1.84 88.66 C-2.22 89.43 -2.6 90.2 -3 91 C-4.27 87.14 -3.34 85.55 -1.65 81.92 C-0.09 77.3 -1.65 72.54 -3.31 68.12 C-5.1 64.82 -5.72 64.38 -9 63 C-11.48 59.42 -11.27 55.94 -11.25 51.69 C-11.26 49.78 -11.26 49.78 -11.27 47.82 C-10.99 43.91 -10.12 40.75 -9 37 C-8.32 33.51 -7.77 30 -7.19 26.5 C-5.6 17.29 -3.32 8.74 0 0 Z \",fill:\"#3C194D\",transform:\"translate(471,252)\"})),_path837||(_path837=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.3 0 6.6 0 10 C-1.65 10 -3.3 10 -5 10 C-6.72 12 -8.01 13.78 -9.38 16 C-10.16 17.2 -10.95 18.39 -11.75 19.59 C-12.13 20.17 -12.51 20.76 -12.91 21.36 C-17.44 28.18 -20.95 31.69 -29.06 33.62 C-29.7 33.75 -30.34 33.87 -31 34 C-30.32 30.05 -29.21 27.37 -27 24 C-26.67 24.66 -26.34 25.32 -26 26 C-20.13 24.04 -17.62 21.9 -14.81 16.31 C-14.48 15.69 -14.14 15.06 -13.79 14.42 C-12.01 11.08 -10.36 7.68 -8.75 4.25 C-6.44 -0.04 -4.78 -1.59 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(860,477)\"})),_path838||(_path838=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93 0.35 1.86 0.7 2.81 1.06 C5.98 2.32 5.98 2.32 9 1 C9.89 3.72 10.77 6.45 11.62 9.19 C11.88 9.96 12.14 10.73 12.4 11.52 C14.19 17.32 14.19 17.32 13.15 21.05 C12.77 21.69 12.39 22.34 12 23 C9.69 23.33 7.38 23.66 5 24 C4.97 25.42 4.95 26.83 4.94 28.25 C4.93 29.04 4.91 29.83 4.9 30.64 C5 32.91 5.37 34.83 6 37 C2.04 33.96 1.02 30.86 0.11 26.13 C0 24 0 24 1.38 21.44 C1.91 20.96 2.45 20.49 3 20 C3.66 20.33 4.32 20.66 5 21 C8.52 18.45 8.52 18.45 11 15 C8.36 15 5.72 15 3 15 C0.31 10.27 -1.68 6.61 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#421F4F\",transform:\"translate(951,475)\"})),_path839||(_path839=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 0.19 2.38 0.19 5 1 C6.6 3.89 7 5.69 7 9 C7.66 9 8.32 9 9 9 C9.94 18.04 10.11 26.93 10 36 C9.01 36 8.02 36 7 36 C6.34 36.66 5.68 37.32 5 38 C4.52 36.42 4.04 34.83 3.56 33.25 C3.3 32.37 3.03 31.49 2.75 30.58 C2.51 29.73 2.26 28.88 2 28 C1.81 27.37 1.61 26.73 1.41 26.08 C0.84 23.2 0.87 20.43 0.88 17.5 C0.87 16.38 0.87 15.25 0.87 14.09 C1 11 1 11 1.57 8.83 C2.31 5.7 0.97 2.98 0 0 Z \",fill:\"#251038\",transform:\"translate(1213,739)\"})),_path840||(_path840=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.14 1.13 2.29 2.27 2.44 3.44 C2.61 6.81 2.61 6.81 4 8 C4.91 14.12 2.84 17.79 -0.2 23.06 C-2 25 -2 25 -4.52 25.54 C-7 25 -7 25 -8.77 23.34 C-11.03 19.05 -10.97 14.69 -10 10 C-8.02 7.42 -5.65 5.84 -3 4 C-1.99 2.68 -0.98 1.35 0 0 Z \",fill:\"#8A7896\",transform:\"translate(765,444)\"})),_path841||(_path841=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.73 0.5 5.81 0.87 9 3 C9 3.66 9 4.32 9 5 C10.58 5.12 10.58 5.12 12.19 5.25 C14.13 5.79 14.13 5.79 16 7 C17.57 9.86 18.63 12.76 19.73 15.83 C20.96 18.9 22.36 21.17 24.31 23.81 C26.26 26.64 27.05 28.2 27.88 31.62 C26.52 36.85 23.39 39.07 19 42 C15.11 44.25 11.21 46.4 7 48 C6.34 47.67 5.68 47.34 5 47 C5.33 46.01 5.66 45.02 6 44 C7.88 43.44 7.88 43.44 10 43 C13.06 40.96 13.53 40.35 14.94 37.19 C16.24 34.37 17.19 32.8 19.38 30.5 C21.38 27.99 21.38 27.99 20.62 24.38 C20.14 22.9 19.59 21.44 19 20 C18.44 18.6 18.44 18.6 17.87 17.18 C15.32 11.72 13.34 8.59 7.62 6.31 C6.09 5.84 4.56 5.38 3 5 C3 4.34 3 3.68 3 3 C2.34 3 1.68 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#715376\",transform:\"translate(693,289)\"})),_path842||(_path842=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.79 8.36 4.49 15.01 1.44 23.19 C1.04 24.29 1.04 24.29 0.63 25.41 C-1.96 32.3 -5.26 38.66 -9 45 C-9.45 45.85 -9.9 46.7 -10.36 47.57 C-12.37 50.55 -14.67 52.41 -17.5 54.62 C-21.94 58.1 -21.94 58.1 -26 62 C-26.99 61.34 -27.98 60.68 -29 60 C-28.2 59.51 -27.39 59.01 -26.56 58.5 C-25.37 57.68 -24.18 56.84 -23 56 C-22.29 55.51 -21.58 55.02 -20.84 54.52 C-5.32 42.5 -3.18 18.09 0 0 Z \",fill:\"#391A48\",transform:\"translate(285,1026)\"})),_path843||(_path843=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.38 2.31 8.2 5.98 11 11 C11.35 11.55 11.71 12.1 12.07 12.66 C14.58 16.66 15.63 19.31 15 24 C13.02 26.01 13.02 26.01 10.38 27.69 C9 28.56 9 28.56 7.6 29.45 C6.74 29.96 5.88 30.47 5 31 C3.42 31.99 3.42 31.99 1.81 33 C-1.88 34.31 -4.24 33.99 -8 33 C-9.94 31.44 -9.94 31.44 -11 30 C-9.24 29.94 -9.24 29.94 -7.44 29.88 C-2.31 29.23 0.63 26.8 4 23 C6.31 19.6 6.99 17.73 7.06 13.62 C5.85 9.47 4.02 6.98 1.28 3.7 C0 2 0 2 0 0 Z \",fill:\"#472758\",transform:\"translate(837,153)\"})),_path844||(_path844=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 2.69 2.44 2.69 4 5 C2.27 4.69 0.54 4.38 -1.19 4.06 C-2.15 3.89 -3.11 3.71 -4.11 3.54 C-5.98 3.19 -7.85 2.78 -9.69 2.3 C-12.26 1.69 -12.26 1.69 -14.75 4.06 C-17.23 7.3 -17.92 8.96 -18 13 C-17.37 14.68 -16.71 16.35 -16 18 C-16.33 18.99 -16.66 19.98 -17 21 C-18.73 18.79 -20.43 16.56 -22.12 14.31 C-22.62 13.69 -23.11 13.06 -23.62 12.42 C-24.94 10.64 -26.08 9.01 -27 7 C-26.11 2.47 -23.45 -0.04 -20 -3 C-13.33 -5.31 -5.97 -3.28 0 0 Z \",fill:\"#472758\",transform:\"translate(821,138)\"})),_path845||(_path845=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.49 7.92 1.49 7.92 3 16 C0.69 16.66 -1.62 17.32 -4 18 C-5.71 16.72 -7.37 15.37 -9 14 C-11.87 13.08 -14.74 12.38 -17.67 11.71 C-18.44 11.48 -19.21 11.24 -20 11 C-20.33 10.34 -20.66 9.68 -21 9 C-19.87 8.46 -18.73 7.93 -17.56 7.38 C-13.42 5.34 -9.78 2.82 -6.08 0.07 C-4 -1 -4 -1 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(648,363)\"})),_path846||(_path846=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.25 1.09 0.5 2.19 0.75 3.31 C1.72 6.92 1.72 6.92 3.69 9 C9.61 11.56 16.39 7.92 22.04 5.84 C25.16 4.95 27.77 4.85 31 5 C31 5.66 31 6.32 31 7 C30.25 7.22 29.5 7.44 28.73 7.66 C22.32 9.73 19.55 11.09 16 17 C12.91 18.26 11.09 18.39 7.94 17.26 C4.36 15.56 1.78 13.81 -1 11 C-1.85 10.59 -2.69 10.18 -3.56 9.75 C-6.92 7.34 -7.18 4.94 -8 1 C-4.93 -0.86 -3.4 -1.22 0 0 Z \",fill:\"#634369\",transform:\"translate(611,353)\"})),_path847||(_path847=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.25 4.04 0.25 4.04 -0.99 6.55 C-1.45 7.47 -1.9 8.39 -2.37 9.34 C-2.86 10.32 -3.36 11.3 -3.88 12.31 C-4.62 13.8 -4.62 13.8 -5.39 15.31 C-9.29 22.92 -13.41 30.49 -19 37 C-19.66 37 -20.32 37 -21 37 C-21.25 30.38 -21.25 30.38 -19 27 C-18.66 25.57 -18.37 24.13 -18.12 22.69 C-16.57 15.3 -12.68 11.71 -7 7 C-5.99 5.34 -4.99 3.67 -4 2 C-1.81 0.69 -1.81 0.69 0 0 Z \",fill:\"#775878\",transform:\"translate(826,495)\"})),_path848||(_path848=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.82 -0.29 2.82 -0.29 6.12 -0.19 C7.77 -0.15 7.77 -0.15 9.45 -0.11 C10.71 -0.05 10.71 -0.05 12 0 C10.44 2.44 10.44 2.44 8 5 C4.5 5.5 4.5 5.5 1 6 C-1.18 7.97 -1.18 7.97 -3 11 C-4.12 12.63 -5.24 14.25 -6.38 15.88 C-7.27 17.18 -7.27 17.18 -8.18 18.52 C-9.81 20.74 -11.51 22.61 -13.44 24.56 C-16.32 27.85 -16.76 30.48 -16.48 34.79 C-15.71 38.37 -13.97 40.93 -12 44 C-12 44.99 -12 45.98 -12 47 C-13.17 46.24 -14.34 45.47 -15.5 44.69 C-16.15 44.26 -16.8 43.83 -17.47 43.39 C-17.97 42.93 -18.48 42.47 -19 42 C-19 41.01 -19 40.02 -19 39 C-19.66 38.34 -20.32 37.68 -21 37 C-21.85 31.63 -21.9 26.53 -18.75 21.94 C-16.78 19.59 -14.96 17.99 -12 17 C-12 16.34 -12 15.68 -12 15 C-11.34 14.34 -10.68 13.68 -10 13 C-9.57 12.24 -9.13 11.47 -8.69 10.69 C-6.79 7.67 -4.55 5.48 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(830,1227)\"})),_path849||(_path849=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.87 2.43 4.86 2.14 7 0 C10 3 9.74 6.01 10.02 10.12 C9.96 18.34 5.52 23.32 0 29 C-1.65 28.67 -3.3 28.34 -5 28 C-4.63 24.76 -4.28 23.29 -1.97 20.91 C0.8 16.81 0.45 13.5 0.25 8.69 C0.23 7.85 0.21 7.02 0.2 6.15 C0.15 4.1 0.08 2.05 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(854,356)\"})),_path850||(_path850=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.89 0.68 1.89 0.68 4 2 C5.05 4.38 5.05 4.38 5.75 7.12 C5.99 8.04 6.23 8.95 6.48 9.88 C6.74 10.93 6.74 10.93 7 12 C7.33 12 7.66 12 8 12 C8 10.35 8 8.7 8 7 C9.32 6.67 10.64 6.34 12 6 C12.65 7.27 13.29 8.54 13.94 9.81 C14.3 10.52 14.66 11.23 15.03 11.96 C17.18 16.47 17.18 16.47 16 20 C11.71 20 7.42 20 3 20 C3 18.68 3 17.36 3 16 C3.66 16 4.32 16 5 16 C4.67 15.34 4.34 14.68 4 14 C2.02 14 0.04 14 -2 14 C-2 13.34 -2 12.68 -2 12 C-3.32 11.67 -4.64 11.34 -6 11 C-5.34 10.34 -4.68 9.68 -4 9 C-3.67 7.85 -3.34 6.69 -3 5.5 C-2 2 -2 2 0 0 Z \",fill:\"#090F36\",transform:\"translate(721,1260)\"})),_path851||(_path851=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.32 3.99 -7.09 5.4 -11.88 7 C-17.06 8.75 -21.73 10.44 -26 14 C-26.35 15.66 -26.69 17.33 -27 19 C-29.27 21.96 -32.03 24.49 -34.7 27.1 C-38.13 30.6 -39.75 32.87 -40 38 C-41.32 37.34 -42.64 36.68 -44 36 C-44.08 30.79 -43.52 27.02 -40.06 23 C-38.73 21.65 -37.37 20.32 -36 19 C-35.04 17.94 -35.04 17.94 -34.05 16.85 C-28.48 11.16 -22.32 7.86 -15.19 4.44 C-14.27 4 -13.35 3.55 -12.4 3.1 C-8.02 1.09 -4.89 -0.26 0 0 Z \",fill:\"#2A1238\",transform:\"translate(334,1214)\"})),_path852||(_path852=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.46 3.69 3.01 6.7 4 11 C4.66 11 5.32 11 6 11 C6.35 12.03 6.7 13.05 7.07 14.11 C10.16 22.87 13.56 30.41 19 38 C9.94 35.19 3.98 29 -1 21 C-1.91 17.94 -2.09 15.18 -2 12 C-2.02 10.99 -2.04 9.98 -2.06 8.94 C-2.03 7.98 -2.03 7.98 -2 7 C-1.01 7 -0.02 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#7D678F\",transform:\"translate(792,296)\"})),_path853||(_path853=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 2.86 3.27 C3.15 4.25 3.45 5.24 3.75 6.25 C5.56 11.9 7.82 17.15 10.35 22.5 C22.7 48.73 22.7 48.73 22 56 C21.01 56.49 21.01 56.49 20 57 C19.75 56.26 19.49 55.53 19.23 54.77 C18.89 53.79 18.54 52.82 18.19 51.81 C17.85 50.85 17.51 49.89 17.17 48.89 C16.08 45.98 16.08 45.98 14.43 43.4 C13.05 41.08 12.48 39.38 12 36.75 C11.67 35.51 11.34 34.27 11 33 C10.01 32.67 9.02 32.34 8 32 C7.88 31.3 7.75 30.6 7.62 29.88 C6.96 26.8 6.13 23.93 5 21 C4.34 20.67 3.68 20.34 3 20 C2.05 18.05 1.19 16.07 0.38 14.06 C-0.07 12.98 -0.52 11.9 -0.98 10.79 C-2 8 -2 8 -2 6 C-0.68 5.67 0.64 5.34 2 5 C1.34 4.67 0.68 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#1B0A31\",transform:\"translate(1252,980)\"})),_path854||(_path854=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.27 2.34 9.12 4.63 13 9 C13.61 9.59 14.21 10.18 14.84 10.79 C19.26 15.31 22.27 19.94 24.94 25.62 C25.23 26.25 25.53 26.87 25.83 27.51 C27.69 31.67 28.37 35.51 29 40 C30.13 42.57 30.13 42.57 31.56 44.81 C34 48.82 34 48.82 34 51 C34.66 51 35.32 51 36 51 C36.5 53.47 36.5 53.47 37 56 C36.34 56 35.68 56 35 56 C34.5 55.05 34.01 54.1 33.5 53.12 C31.65 49.84 29.45 47.11 27 44.25 C22.46 38.72 19 32.3 19 25 C19.66 25 20.32 25 21 25 C19.47 20.19 19.47 20.19 16 17 C15.53 16.15 15.05 15.31 14.56 14.44 C14.05 13.63 13.53 12.83 13 12 C12.01 12 11.02 12 10 12 C5.46 9.85 2.91 7 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#411E4E\",transform:\"translate(326,971)\"})),_path855||(_path855=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2 1.32 2 2 2 C2.12 4.88 2.12 4.88 2 8 C1.34 8.66 0.68 9.32 0 10 C-0.47 12.89 -0.84 15.72 -1.12 18.62 C-1.21 19.43 -1.3 20.23 -1.39 21.05 C-1.6 23.04 -1.8 25.02 -2 27 C-2.66 26.67 -3.32 26.34 -4 26 C-4.41 23.28 -4.41 23.28 -4.62 19.94 C-4.7 18.83 -4.77 17.73 -4.85 16.59 C-4.9 15.74 -4.95 14.88 -5 14 C-8.37 14.73 -10.27 15.9 -13 18 C-13.66 18 -14.32 18 -15 18 C-16.51 13.65 -15.21 11.2 -13.32 7.19 C-10.29 2.15 -5.94 -1.78 0 0 Z \",fill:\"#67486D\",transform:\"translate(592,284)\"})),_path856||(_path856=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.28 3.04 C4.68 3.89 5.09 4.75 5.5 5.62 C5.93 6.52 6.35 7.42 6.79 8.34 C8.25 11.54 9.66 14.75 11 18 C8.67 20.15 7.22 20.96 4.06 21.5 C-0.96 20.68 -2.91 17.38 -5.94 13.56 C-7 11 -7 11 -6.5 8 C-4.81 4.62 -2.81 2.51 0 0 Z \",fill:\"#4E4141\",transform:\"translate(904,411)\"})),_path857||(_path857=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.56 -0.47 13.11 1.07 20.12 3.81 C21.08 4.17 22.03 4.53 23 4.89 C28.06 6.8 33.05 8.83 38 11 C38 11.99 38 12.98 38 14 C29.8 15.87 21.4 17 13 16 C10.59 14.48 10.59 14.48 9 13 C10.46 13.03 10.46 13.03 11.96 13.07 C13.23 13.09 14.5 13.11 15.81 13.12 C17.71 13.16 17.71 13.16 19.64 13.2 C23.13 13.28 23.13 13.28 26 11 C17.09 6.43 11.32 3.69 1.38 5.75 C-2.98 6.07 -4.67 4.68 -8 2 C-5.33 0.67 -3.83 1.33 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#3E1D4A\",transform:\"translate(1005,624)\"})),_path858||(_path858=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.38 0.69 3.38 0.69 7 2 C9.49 5.78 9.17 9.58 9 14 C8.34 14 7.68 14 7 14 C6.34 12.35 5.68 10.7 5 9 C4.01 9 3.02 9 2 9 C2.02 9.77 2.05 10.54 2.07 11.34 C2.1 12.84 2.1 12.84 2.12 14.38 C2.15 15.37 2.17 16.37 2.2 17.4 C2 20 2 20 0 22 C-0.66 21.01 -1.32 20.02 -2 19 C-4.4 21.4 -4.34 22.33 -4.62 25.62 C-4.7 26.44 -4.77 27.26 -4.85 28.1 C-4.9 28.73 -4.95 29.35 -5 30 C-5.33 30 -5.66 30 -6 30 C-6 28.02 -6 26.04 -6 24 C-6.66 24 -7.32 24 -8 24 C-8.33 24.66 -8.66 25.32 -9 26 C-9.33 25.34 -9.66 24.68 -10 24 C-10.99 23.67 -11.98 23.34 -13 23 C-13.33 23.66 -13.66 24.32 -14 25 C-14 21.7 -14 18.4 -14 15 C-13.34 15.66 -12.68 16.32 -12 17 C-9.5 17.81 -7.66 18 -5 18 C-4.89 16.95 -4.78 15.9 -4.67 14.82 C-4.51 13.45 -4.35 12.07 -4.19 10.69 C-4.08 9.65 -4.08 9.65 -3.97 8.6 C-3.61 5.57 -3.35 3.44 -1.43 1.02 C-0.96 0.68 -0.48 0.35 0 0 Z \",fill:\"#150A1E\",transform:\"translate(505,294)\"})),_path859||(_path859=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.19 0 2.19 0 5 1 C9.05 6.09 11.77 12.3 14.44 18.19 C14.81 18.97 15.19 19.75 15.58 20.55 C18.18 26.29 18.18 26.29 17.22 30.05 C16.82 30.69 16.42 31.34 16 32 C15.01 32 14.02 32 13 32 C10.13 28.99 8.95 25.56 7.56 21.69 C6.19 17.98 4.88 14.53 2.75 11.19 C0.6 7.27 0.31 4.42 0 0 Z \",fill:\"#060929\",transform:\"translate(980,1063)\"})),_path860||(_path860=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.38 2 1.38 4 3 C4 3.66 4 4.32 4 5 C4.66 5 5.32 5 6 5 C6 5.66 6 6.32 6 7 C6.66 7 7.32 7 8 7 C8 7.66 8 8.32 8 9 C8.76 9.27 9.53 9.54 10.31 9.81 C13 11 13 11 14.5 12.69 C14.99 13.12 15.49 13.55 16 14 C17.68 13.71 19.34 13.38 21 13 C23.36 15.36 23.49 16.78 24 20 C23.34 20.33 22.68 20.66 22 21 C22 21.66 22 22.32 22 23 C23.98 22.34 25.96 21.68 28 21 C28.12 27.75 28.12 27.75 27 30 C25.68 30.33 24.36 30.66 23 31 C23 34.96 23 38.92 23 43 C20.74 39.62 20.17 36.95 19.25 33 C16.75 23.14 13.5 15.06 4.77 9.27 C2.37 7.55 1.16 5.69 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#28103A\",transform:\"translate(1216,905)\"})),_path861||(_path861=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.72 3.27 -6.32 4.86 -10.06 6.69 C-10.7 7.01 -11.34 7.33 -11.99 7.66 C-16.73 10 -16.73 10 -19 10 C-19 10.66 -19 11.32 -19 12 C-18.01 12.33 -17.02 12.66 -16 13 C-14.8 14.71 -14.8 14.71 -13.75 16.81 C-13.39 17.5 -13.04 18.19 -12.67 18.89 C-11.89 21.35 -12.16 22.6 -13 25 C-13.45 24.59 -13.89 24.18 -14.36 23.76 C-17.74 20.74 -20.58 18.34 -25 17 C-27.57 20.85 -28.86 24.52 -30 29 C-31.32 28.34 -32.64 27.68 -34 27 C-32.15 17.75 -26.38 11.54 -19 6 C-5.62 -2.4 -5.62 -2.4 0 0 Z \",fill:\"#0A123C\",transform:\"translate(1150,870)\"})),_path862||(_path862=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.7 1.2 4.93 2.71 6.69 6.12 C7.61 9.19 7.78 11.62 7.5 14.81 C5.5 16.81 5.5 16.81 2.31 17.19 C-2.51 16.71 -4.61 15.69 -8.5 12.81 C-9.69 10.44 -9.69 10.44 -9.5 7.81 C-5 -0.38 -5 -0.38 0 0 Z \",fill:\"#28103B\",transform:\"translate(266.5,893.1875)\"})),_path863||(_path863=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 1 2 2 3 3 C6.1 4.2 6.1 4.2 9 5 C4.77 7.82 1.29 7.06 -3.68 6.88 C-7.18 7.01 -9.78 7.63 -13 9 C-14.14 11.29 -14.1 12.59 -14.06 15.12 C-14.04 16.4 -14.02 17.68 -14 19 C-11.52 19.99 -11.52 19.99 -9 21 C-11.9 22.93 -12.9 23.3 -16.19 23.62 C-17.45 23.75 -18.7 23.87 -20 24 C-21.09 18.68 -20.87 15.11 -19 10 C-18.34 9.01 -17.68 8.02 -17 7 C-16.34 7 -15.68 7 -15 7 C-14.69 6.38 -14.38 5.76 -14.06 5.12 C-12 1 -12 1 -8.75 -0.19 C-5.18 -0.96 -3.39 -1.22 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(596,400)\"})),_path864||(_path864=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.58 5.78 3.76 10.61 1.19 15.94 C-4.58 28.33 -6.08 42.6 -8 56 C-8.33 56 -8.66 56 -9 56 C-9 54.02 -9 52.04 -9 50 C-9.66 50 -10.32 50 -11 50 C-9.75 32.74 -5.66 16.33 0 0 Z \",fill:\"#2A1532\",transform:\"translate(470,239)\"})),_path865||(_path865=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.45 0.5 0.91 0.99 1.38 1.5 C2.88 3.23 2.88 3.23 5 3 C5.19 3.68 5.39 4.35 5.59 5.05 C5.85 5.94 6.11 6.83 6.38 7.75 C6.76 9.07 6.76 9.07 7.15 10.42 C7.93 12.8 8.67 14.88 10 17 C10.99 17.33 11.98 17.66 13 18 C13.33 17.34 13.66 16.68 14 16 C18.07 24.68 20.58 33.41 22.89 42.68 C23.76 46.18 24.8 49.59 26 53 C21.35 48.69 19.34 42.98 17.19 37.12 C14.98 31.45 11.62 26.86 8 22 C3.07 15.1 -0.73 8.63 0 0 Z \",fill:\"#351048\",transform:\"translate(868,563)\"})),_path866||(_path866=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.22 0.89 4.22 0.89 4.45 1.79 C5.85 6.75 7.04 9.57 11.37 12.68 C14.5 15.21 16.88 18.6 19 22 C19 22.66 19 23.32 19 24 C17.68 24 16.36 24 15 24 C14.13 22.61 14.13 22.61 13.25 21.19 C10.42 17.18 7.71 15.83 3 15 C-0.4 14.96 -3.75 15.06 -7.14 15.29 C-10 15 -10 15 -11.95 13.25 C-13 11 -13 11 -12.69 8.75 C-12.46 8.17 -12.23 7.6 -12 7 C-11.32 7.06 -10.65 7.12 -9.95 7.18 C-7.22 7.31 -4.71 7.36 -2 7 C0.68 4.7 0.68 4.7 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#66486C\",transform:\"translate(565,487)\"})),_path867||(_path867=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.93 0.7 1.93 0.7 4 2 C4.72 4.17 4.72 4.17 5.06 6.75 C5.59 10.07 6.08 12.15 7.62 15.19 C9.35 18.72 9.43 21.11 9 25 C7.5 27.44 7.5 27.44 6 29 C3.53 28.62 2.27 28.27 0.48 26.47 C-3.22 20.84 -3.25 17.46 -2 11 C-1.82 9.17 -1.65 7.33 -1.5 5.5 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#624268\",transform:\"translate(887,364)\"})),_path868||(_path868=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 0.44 2.06 0.44 4 1 C3.89 4.6 3.76 8.21 3.62 11.81 C3.59 12.84 3.56 13.86 3.53 14.92 C3.49 15.9 3.45 16.88 3.41 17.89 C3.38 18.8 3.35 19.71 3.32 20.64 C3 23 3 23 1 26 C0.5 22.04 0.5 22.04 0 18 C0.66 18 1.32 18 2 18 C1.5 13.54 1.5 13.54 1 9 C-3.69 9.52 -3.69 9.52 -8.18 10.88 C-12.8 12.71 -17.61 13.86 -22.41 15.14 C-26.38 16.22 -30.21 17.35 -34 19 C-34 19.66 -34 20.32 -34 21 C-35.32 21.33 -36.64 21.66 -38 22 C-34.96 16.68 -31.34 13.06 -26 10 C-22.56 9.19 -22.56 9.19 -19 9 C-17.44 8.87 -15.87 8.72 -14.31 8.56 C-13.59 8.5 -12.86 8.44 -12.11 8.38 C-7.11 7.48 -4.42 4.61 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3A174A\",transform:\"translate(517,195)\"})),_path869||(_path869=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.18 1.75 0.36 2.5 -0.49 3.27 C-13.55 14.54 -13.55 14.54 -24 28 C-24.33 28 -24.66 28 -25 28 C-25.33 26.35 -25.66 24.7 -26 23 C-26.99 22.67 -27.98 22.34 -29 22 C-29.56 19.38 -29.56 19.38 -29 16 C-23.8 11.19 -17.14 8.49 -10.56 6.12 C-7.38 4.73 -4.64 2.87 -1.77 0.93 C-1.19 0.62 -0.6 0.31 0 0 Z \",fill:\"#897796\",transform:\"translate(741,661)\"})),_path870||(_path870=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.68 0.29 3.34 0.62 5 1 C4.16 8.18 -0.99 13.36 -5.32 18.85 C-6.44 20.28 -7.52 21.75 -8.55 23.25 C-10 25 -10 25 -12.62 25.31 C-15 25 -15 25 -16 24 C-16.35 20.56 -16.43 18.65 -14.5 15.73 C-13.82 15.03 -13.14 14.34 -12.44 13.62 C-11.35 12.48 -11.35 12.48 -10.24 11.32 C-9.5 10.55 -8.76 9.79 -8 9 C-6.68 7.51 -5.37 6.01 -4.06 4.5 C-1.11 1.11 -1.11 1.11 0 0 Z \",fill:\"#39154B\",transform:\"translate(434,657)\"})),_path871||(_path871=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 1 4 1 6 4 C6.85 4.49 7.69 4.99 8.56 5.5 C11 7 11 7 12 10 C13.32 10 14.64 10 16 10 C16.66 11.65 17.32 13.3 18 15 C18.87 14.51 19.73 14.01 20.62 13.5 C24.11 11.95 26.25 11.73 30 12 C26.81 14.13 24.73 14.5 21 15 C20.67 15.99 20.34 16.98 20 18 C19.67 18.99 19.34 19.98 19 21 C19.43 21.87 19.87 22.73 20.31 23.62 C23 29 24.62 34.12 23 40 C21.51 37.25 20.04 34.5 18.56 31.75 C18.14 30.97 17.72 30.2 17.29 29.39 C16.68 28.26 16.68 28.26 16.07 27.11 C15.69 26.42 15.32 25.73 14.94 25.01 C14 23 14 23 13.53 20.88 C12.69 17.9 10.44 16.75 8 15 C8.33 14.01 8.66 13.02 9 12 C8.01 12 7.02 12 6 12 C4.02 8.04 2.04 4.08 0 0 Z \",fill:\"#391948\",transform:\"translate(549,1054)\"})),_path872||(_path872=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.84 0 5.24 0.4 8 1 C9.79 6.09 7.93 9.49 5.81 14.12 C5.51 14.84 5.2 15.56 4.89 16.29 C3.18 20.12 1.84 22.94 -2 25 C-4.62 25.38 -4.62 25.38 -7 25 C-9 22 -9 22 -10 20 C-9.01 19.67 -8.02 19.34 -7 19 C-2.06 13.52 -0.88 7.12 0 0 Z \",fill:\"#7C6D9C\",transform:\"translate(900,373)\"})),_path873||(_path873=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.74 1.52 1.74 1.52 3 3 C2.19 3.01 1.38 3.03 0.55 3.04 C-6.06 3.21 -6.06 3.21 -11.81 6.06 C-12.9 7.52 -12.9 7.52 -14 9 C-14.55 9.55 -15.1 10.09 -15.67 10.65 C-20.6 15.62 -22.67 20.7 -24.76 27.34 C-26 30 -26 30 -28.14 30.88 C-28.76 30.92 -29.37 30.96 -30 31 C-30 33.64 -30 36.28 -30 39 C-32.22 36.78 -32.57 36.04 -33 33 C-32.1 23.64 -28.88 16.47 -22 10 C-21.34 10 -20.68 10 -20 10 C-19.67 9.01 -19.34 8.02 -19 7 C-13.54 0.6 -8.1 -0.66 0 0 Z \",fill:\"#23122A\",transform:\"translate(889,293)\"})),_path874||(_path874=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.21 1.53 0.41 2.31 0.62 C0.99 2.94 -0.33 5.25 -1.69 7.62 C-1.03 8.28 -0.37 8.94 0.31 9.62 C-3.35 11.96 -6.48 11.83 -10.75 11.75 C-11.98 11.73 -13.21 11.71 -14.47 11.7 C-15.53 11.67 -16.59 11.65 -17.69 11.62 C-20.66 11.62 -21.91 12.04 -24.56 13.19 C-27.98 14.54 -30.11 14.85 -33.69 13.62 C-33.36 12.31 -33.03 10.99 -32.69 9.62 C-32.08 9.59 -31.48 9.55 -30.86 9.51 C-26.11 9.12 -23.41 8.72 -19.69 5.62 C-17.38 4.88 -15.04 4.22 -12.69 3.62 C-8.56 2.52 -3.97 -0.55 0 0 Z \",fill:\"#241B26\",transform:\"translate(657.6875,234.375)\"})),_path875||(_path875=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.69 2.75 -0.62 4.5 -1.94 6.25 C-2.34 6.79 -2.75 7.34 -3.17 7.9 C-5.18 10.59 -7.21 13.27 -9.25 15.94 C-13.41 21.4 -17.35 26.95 -21.12 32.69 C-26.34 40.61 -31.99 47.97 -38.29 55.07 C-40.9 58.01 -43.45 61.01 -46 64 C-46.66 63.67 -47.32 63.34 -48 63 C-40.07 50.8 -31.9 38.86 -21.98 28.18 C-19.68 25.64 -17.68 22.97 -15.67 20.2 C-12.73 16.32 -9.53 12.64 -6.37 8.93 C-4.03 6.04 -2.01 3.12 0 0 Z \",fill:\"#000002\",transform:\"translate(311,671)\"})),_path876||(_path876=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.21 1.64 8.61 4.55 11.31 9.31 C11.65 10.15 11.65 10.15 12 11 C11.53 10.5 11.05 10.01 10.56 9.5 C6.78 7.28 3.28 7.79 -1 8 C-1.99 8 -2.98 8 -4 8 C-7.6 10.88 -7.6 10.88 -9.37 14.95 C-10.49 18.6 -13.95 20.12 -16.97 22.22 C-19.18 24.16 -19.65 25.14 -20 28 C-20.66 28 -21.32 28 -22 28 C-22.33 28.99 -22.66 29.98 -23 31 C-23 28.36 -23 25.72 -23 23 C-23.66 22.67 -24.32 22.34 -25 22 C-23 19 -23 19 -20 17.06 C-16.98 14.99 -16.46 14.14 -15 11 C-13.67 10.32 -12.34 9.65 -11 9 C-10.67 8.01 -10.34 7.02 -10 6 C-8.48 4.58 -8.48 4.58 -6.62 3.25 C-6.02 2.8 -5.41 2.35 -4.79 1.89 C-3 1 -3 1 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#391948\",transform:\"translate(940,525)\"})),_path877||(_path877=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.47 4.41 0.44 7.69 -1 12 C-2.99 13.34 -4.99 14.68 -7 16 C-7 16.66 -7 17.32 -7 18 C-0.68 19.07 5.64 20.13 12 21 C11.34 21.66 10.68 22.32 10 23 C6.43 22.84 2.93 22.52 -0.62 22.1 C-5.53 21.64 -5.53 21.64 -9.84 23.97 C-10.56 24.64 -11.27 25.31 -12 26 C-15.19 26.06 -15.19 26.06 -18 25 C-19.56 22.75 -19.56 22.75 -20 20 C-19.19 17.44 -19.19 17.44 -17 15 C-14.75 13.92 -12.47 13.02 -10.15 12.11 C-6.98 10.48 -5.72 8.04 -4 5 C-3.01 4.34 -2.02 3.68 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#4E3356\",transform:\"translate(875,375)\"})),_path878||(_path878=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.33 0.49 1.33 0.49 2.69 1 C5.85 2.16 5.85 2.16 8.69 1.88 C11 2 11 2 12.81 3.5 C14.58 7.21 14.33 9.89 14 14 C13.01 15.48 13.01 15.48 12 17 C6.16 17.99 0.52 16.92 -5 15 C-4.36 14.63 -3.71 14.27 -3.05 13.89 C-0.24 11.3 -0.41 9.56 -0.25 5.81 C-0.19 4.73 -0.14 3.64 -0.08 2.52 C-0.05 1.69 -0.03 0.86 0 0 Z \",fill:\"#0A123C\",transform:\"translate(798,1181)\"})),_path879||(_path879=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.4 3.11 0.8 4.23 0.19 5.38 C-1.78 9.29 -3.06 13.19 -4.19 17.41 C-5 20 -5 20 -6.45 23.19 C-8.06 26.91 -8.87 30.58 -9.61 34.58 C-9.8 35.62 -9.8 35.62 -10 36.68 C-10.26 38.13 -10.53 39.58 -10.79 41.04 C-11.19 43.26 -11.6 45.48 -12.01 47.7 C-13.44 54.81 -13.44 54.81 -14 62 C-16 63.69 -16 63.69 -18 65 C-21 63 -21 63 -22 60 C-22.35 53.44 -21.32 47.42 -20 41 C-19.67 41 -19.34 41 -19 41 C-18.34 45.29 -17.68 49.58 -17 54 C-16.76 52.95 -16.52 51.89 -16.27 50.81 C-15.2 46.2 -14.11 41.6 -13 37 C-12.84 36.33 -12.68 35.67 -12.51 34.98 C-9.57 22.91 -5.74 11.05 0 0 Z \",fill:\"#080D31\",transform:\"translate(592,821)\"})),_path880||(_path880=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02 0.95 4.03 1.95 6 3 C6.99 2.67 7.98 2.34 9 2 C11.19 2.94 11.19 2.94 13 4 C12.67 5.98 12.34 7.96 12 10 C8.47 9.54 5.72 8.42 2.56 6.88 C-1.41 5.07 -3.73 4.58 -8 6 C-8.93 6.47 -9.86 6.95 -10.81 7.44 C-13.64 8.82 -15.53 9.35 -18.56 9.88 C-23.76 10.95 -26.19 13.32 -29.15 17.71 C-31.2 21.06 -32.53 24.09 -33 28 C-33.66 27.67 -34.32 27.34 -35 27 C-34.63 19.88 -30.55 13.69 -25.75 8.62 C-22.41 6.65 -18.98 5.3 -15.35 3.95 C-12.86 3.04 -12.86 3.04 -10.38 1.25 C-6.97 -0.54 -3.73 -0.58 0 0 Z \",fill:\"#806686\",transform:\"translate(828,450)\"})),_path881||(_path881=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.45 0 10.85 4.03 16 9 C17.49 10.3 18.99 11.59 20.5 12.88 C23.88 15.76 23.88 15.76 25 18 C23.68 18 22.36 18 21 18 C20.67 18.66 20.34 19.32 20 20 C13.68 17.71 8.75 14.55 3.5 10.44 C2.88 9.95 2.25 9.47 1.61 8.97 C-2.87 5.38 -2.87 5.38 -4 2 C-2.68 2 -1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2F163B\",transform:\"translate(1002,580)\"})),_path882||(_path882=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.11 3.63 -0.24 7.25 -0.38 10.88 C-0.42 12.42 -0.42 12.42 -0.47 14 C-0.53 15.48 -0.53 15.48 -0.59 16.99 C-0.62 17.9 -0.65 18.81 -0.68 19.75 C-1 22 -1 22 -3 24 C-3.45 23.2 -3.91 22.39 -4.38 21.56 C-5.75 18.91 -5.75 18.91 -8 18 C-10.33 17.96 -12.67 17.96 -15 18 C-15.33 17.34 -15.66 16.68 -16 16 C-15.05 14.31 -14.03 12.65 -13 11 C-12.64 10.18 -12.27 9.36 -11.89 8.52 C-8.71 1.38 -8.71 1.38 -4.81 -0.69 C-2 -1 -2 -1 0 0 Z \",fill:\"#2A0E3E\",transform:\"translate(256,841)\"})),_path883||(_path883=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.68 1.13 1.35 2.26 1.02 3.43 C-0.13 8.03 -0.33 12.4 -0.31 17.12 C-0.33 17.9 -0.34 18.67 -0.36 19.46 C-0.37 24.32 0.1 27.91 3 32 C5.24 32.93 5.24 32.93 7.69 32.88 C8.5 32.91 9.3 32.95 10.14 32.99 C11.06 33 11.06 33 12 33 C11.01 33.93 11.01 33.93 10 34.88 C7.77 36.76 7.77 36.76 8 39 C6.02 39.49 6.02 39.49 4 40 C4.66 40.66 5.32 41.32 6 42 C-1.39 42.48 -1.39 42.48 -4.06 40.38 C-5.32 37.2 -4.61 35.37 -4 32 C-4.19 29.08 -4.5 26.2 -4.84 23.29 C-4.9 22.54 -4.95 21.78 -5 21 C-4.67 20.67 -4.34 20.34 -4 20 C-4.01 16.5 -4.13 13.01 -4.26 9.52 C-3.96 5.47 -2.88 2.88 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(516,1159)\"})),_path884||(_path884=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C-0.28 13.58 -3.97 24.31 -11 33 C-16.75 32.12 -16.75 32.12 -19 31 C-18.81 29.25 -18.81 29.25 -18 27 C-17.28 26.46 -16.56 25.93 -15.81 25.38 C-8.5 19.2 -4.44 8.39 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(907,383)\"})),_path885||(_path885=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.01 0.59 1.03 1.18 1.04 1.79 C1.3 6.1 1.46 8.36 4.31 11.75 C5.2 12.49 6.09 13.24 7 14 C10.66 18.28 12.14 21.05 12.06 26.69 C12.05 27.5 12.04 28.3 12.04 29.14 C12.02 29.75 12.01 30.37 12 31 C11.01 31 10.02 31 9 31 C9.33 33.31 9.66 35.62 10 38 C12.31 38.66 14.62 39.32 17 40 C16.34 40.66 15.68 41.32 15 42 C12.02 41.85 10.46 41.4 8.19 39.44 C6.91 36.81 6.95 35.78 7.12 32.94 C7.06 30.99 7.06 30.99 7 29 C4.7 27.1 4.7 27.1 2 26 C-0.17 22.74 -0.11 21.37 0 17.6 C0 13.01 -0.49 8.45 -0.88 3.88 C-0.92 2.93 -0.96 1.98 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#442255\",transform:\"translate(466,280)\"})),_path886||(_path886=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.76 2.78 24.18 14.47 31.25 24.06 C33 27 33 27 33 29 C29.07 28.42 26.87 26.52 23.88 24 C22.9 23.19 21.93 22.38 20.93 21.54 C18.22 19.19 15.57 16.8 12.94 14.38 C8.26 10.1 3.28 6.49 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#462452\",transform:\"translate(849,99)\"})),_path887||(_path887=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.43 1.63 0.87 2.25 0.29 2.9 C-0.45 3.72 -1.18 4.53 -1.94 5.38 C-2.67 6.19 -3.4 7 -4.15 7.84 C-6.03 9.86 -6.03 9.86 -7 12 C-7.66 12 -8.32 12 -9 12 C-9 13.65 -9 15.3 -9 17 C-7.35 17.33 -5.7 17.66 -4 18 C-4.36 20.72 -4.72 21.77 -6.86 23.56 C-7.63 24.04 -8.39 24.51 -9.19 25 C-9.99 25.51 -10.8 26.02 -11.63 26.54 C-12.41 27.02 -13.2 27.5 -14 28 C-15.19 28.79 -16.38 29.58 -17.56 30.38 C-18.37 30.91 -19.17 31.45 -20 32 C-21.32 31.01 -22.64 30.02 -24 29 C-22.68 25.16 -21.07 22.65 -18.31 19.69 C-17.6 18.91 -16.89 18.14 -16.16 17.34 C-15.44 16.57 -14.73 15.79 -14 15 C-12.77 13.61 -11.54 12.21 -10.31 10.81 C-9.75 10.17 -9.18 9.52 -8.6 8.86 C-7.1 7.12 -5.64 5.35 -4.19 3.56 C-2 1 -2 1 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(562,1233)\"})),_path888||(_path888=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C6.14 9.53 6.62 19.68 6 30 C5.67 30.66 5.34 31.32 5 32 C4.34 32 3.68 32 3 32 C1.65 28.34 0.32 24.67 -1 21 C-1.38 19.95 -1.76 18.89 -2.16 17.81 C-2.52 16.78 -2.88 15.75 -3.25 14.69 C-3.59 13.74 -3.92 12.8 -4.27 11.82 C-5.06 8.78 -5.13 6.14 -5 3 C-4.01 3 -3.02 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#27122E\",transform:\"translate(202,871)\"})),_path889||(_path889=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 4.29 0.66 8.58 1 13 C2.32 13 3.64 13 5 13 C5.06 12.23 5.12 11.46 5.18 10.66 C5.27 9.66 5.35 8.66 5.44 7.62 C5.52 6.63 5.6 5.63 5.68 4.6 C6 2 6 2 7 0 C8.65 0.66 10.3 1.32 12 2 C11.72 3.92 11.42 5.83 11.12 7.75 C10.96 8.82 10.8 9.88 10.63 10.98 C10.07 13.68 9.37 15.64 8 18 C7.34 18 6.68 18 6 18 C5.01 19.24 5.01 19.24 4 20.5 C3.01 21.74 3.01 21.74 2 23 C1.34 23 0.68 23 0 23 C-2.04 18.93 -2.03 16.41 -1 12 C-4.58 11 -4.58 11 -8 12 C-7.67 8.7 -7.34 5.4 -7 2 C-1.12 0 -1.12 0 0 0 Z \",fill:\"#836D8F\",transform:\"translate(909,363)\"})),_path890||(_path890=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.1 1.05 2.21 2.1 2.31 3.19 C3 7.01 4.01 8.75 6 12 C6.8 13.81 7.55 15.65 8.25 17.5 C8.78 18.88 8.78 18.88 9.33 20.28 C10.1 23.42 10.1 24.97 9 28 C6.93 30.46 6.93 30.46 4.44 32.81 C3.61 33.6 2.78 34.39 1.93 35.21 C1.3 35.8 0.66 36.39 0 37 C-0.66 36.34 -1.32 35.68 -2 35 C-1.67 34.01 -1.34 33.02 -1 32 C-0.85 30.42 -0.75 28.83 -0.68 27.25 C-0.64 26.31 -0.6 25.37 -0.56 24.4 C-0.52 23.43 -0.48 22.45 -0.44 21.44 C-0.39 20.49 -0.35 19.53 -0.31 18.55 C-0.04 12.36 0.05 6.19 0 0 Z \",fill:\"#5C3D62\",transform:\"translate(691,305)\"})),_path891||(_path891=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.23 1.28 7.36 3.1 10.56 7.38 C13.42 11.15 16.08 14.3 20 17 C22.26 16.87 22.26 16.87 24 16 C24.33 14.35 24.66 12.7 25 11 C25.99 11.33 26.98 11.66 28 12 C27.12 18.75 27.12 18.75 26 21 C25.34 21 24.68 21 24 21 C24 22.98 24 24.96 24 27 C15.3 23.55 8.17 16.76 3 9 C3.02 8.2 3.04 7.39 3.06 6.56 C2.99 3.43 2.04 2.3 0 0 Z \",fill:\"#452355\",transform:\"translate(380,764)\"})),_path892||(_path892=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.39 2.12 0.77 3.25 0.14 4.4 C-0.68 5.91 -1.5 7.43 -2.31 8.94 C-2.72 9.67 -3.12 10.41 -3.54 11.17 C-5.98 15.72 -7.86 20.16 -9.33 25.11 C-10.3 27.85 -11.68 29.29 -14 31 C-14.74 31.27 -15.49 31.54 -16.25 31.81 C-21.51 34.09 -25.84 38.27 -29 43 C-29.66 43 -30.32 43 -31 43 C-31.25 43.76 -31.5 44.53 -31.75 45.31 C-33.11 48.24 -34.32 49.3 -37 51 C-36.5 46.76 -35.39 44.97 -32.25 42.12 C-29.08 39.13 -26.57 36.17 -24.14 32.57 C-23 31 -23 31 -20.62 28.69 C-14.59 22.51 -10.2 14.85 -5.68 7.54 C-3.93 4.89 -2.02 2.45 0 0 Z \",fill:\"#391A48\",transform:\"translate(345,714)\"})),_path893||(_path893=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 4.67 4 8.33 4 12 C2.75 12.04 2.75 12.04 1.47 12.08 C-9.1 12.61 -16.21 14.81 -24 22 C-25 20 -25 20 -24.06 16.88 C-23.71 15.93 -23.36 14.98 -23 14 C-23.66 13.67 -24.32 13.34 -25 13 C-16.65 8.51 -8.72 4.37 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#6A4D6F\",transform:\"translate(640,328)\"})),_path894||(_path894=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.71 3.51 -0.81 6.43 -2.94 9.5 C-4.62 11.95 -6.21 14.36 -7.69 16.94 C-9 19 -9 19 -12 21 C-12.89 20.94 -13.77 20.88 -14.69 20.81 C-23.32 21.3 -28.74 28.64 -34.14 34.63 C-35.43 36.08 -36.72 37.54 -38 39 C-38.66 38.67 -39.32 38.34 -40 38 C-39.08 37.02 -39.08 37.02 -38.14 36.02 C-36.92 34.71 -36.92 34.71 -35.69 33.38 C-34.89 32.52 -34.09 31.66 -33.26 30.77 C-30.97 27.96 -29.58 25.25 -28 22 C-24.7 17.38 -21.84 13.56 -16.31 11.88 C-13.4 11.99 -10.84 12.39 -8 13 C-7.04 11.59 -6.08 10.17 -5.12 8.75 C-4.59 7.96 -4.06 7.17 -3.51 6.36 C-2.18 4.28 -1.05 2.22 0 0 Z \",fill:\"#401E54\",transform:\"translate(380,1128)\"})),_path895||(_path895=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.5 4.7 3.5 4.7 6 6 C4 7 4 7 0.88 6.19 C-4 5.95 -5.71 7.33 -9.5 10.16 C-11.44 12.54 -11.29 14.01 -11 17 C-14.91 15.73 -16.86 14.54 -19 11 C-19.33 10.01 -19.66 9.02 -20 8 C-21.66 6.66 -23.33 5.33 -25 4 C-25 3.34 -25 2.68 -25 2 C-24.37 2.02 -23.74 2.05 -23.09 2.07 C-18.83 2.16 -14.94 2.15 -10.81 1 C-6.89 -0.03 -4 -0.17 0 0 Z \",fill:\"#3C194D\",transform:\"translate(685,76)\"})),_path896||(_path896=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.12 0.38 3.12 0.38 5.29 2.02 C8.19 5.73 7.73 9.02 7.6 13.58 C7.12 16.38 7.12 16.38 4.62 19.12 C2.12 20.38 2.12 20.38 -0.25 19.88 C-2.88 18.38 -2.88 18.38 -4.19 14.75 C-4.99 10.56 -5.17 6.63 -4.88 2.38 C-2.88 0.38 -2.88 0.38 0 0 Z \",fill:\"#7E6382\",transform:\"translate(1225.875,1078.625)\"})),_path897||(_path897=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C22.26 5.13 22.26 5.13 26 11 C18.96 13.72 11.64 13.59 4.48 11.14 C2.31 10.12 2.31 10.12 -1 8 C-2.21 4.38 -1.54 3.36 0 0 Z \",fill:\"#897795\",transform:\"translate(1213,1049)\"})),_path898||(_path898=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1.44 4.5 C-1.95 5 -2.47 5.49 -3 6 C-3.33 6.99 -3.66 7.98 -4 9 C-4.91 9.64 -5.81 10.28 -6.75 10.94 C-10.74 14.09 -11.88 18.18 -13.66 22.82 C-15.4 26.96 -17.68 30.53 -20.18 34.25 C-21.44 36.15 -22.64 38.09 -23.79 40.06 C-24.38 41.05 -24.96 42.04 -25.56 43.06 C-26.08 43.96 -26.6 44.86 -27.13 45.79 C-29.48 48.56 -31.52 49.14 -35 50 C-35.74 47.34 -36.13 45.51 -35.44 42.81 C-34 41 -34 41 -31.12 40.06 C-26.25 38.4 -24.3 34.78 -22.07 30.33 C-21.42 28.97 -20.77 27.61 -20.12 26.25 C-14.82 15.43 -9.35 7.82 0 0 Z \",fill:\"#44214E\",transform:\"translate(383,657)\"})),_path899||(_path899=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 2.4 4.36 5.01 6.19 8.06 C6.72 8.94 7.25 9.82 7.79 10.72 C9 13 9 13 9 15 C9.6 15.22 10.2 15.43 10.82 15.66 C14.47 17.9 15.56 21.69 17.34 25.47 C19.32 28.49 20.56 29.07 24 30 C26.67 30.49 29.3 30.73 32 31 C32.5 32.98 32.5 32.98 33 35 C33.66 35 34.32 35 35 35 C35 36.98 35 38.96 35 41 C30.38 41.72 27.57 39.96 23.85 37.5 C21.25 35.39 19.75 32.83 18 30 C17.23 29.42 16.46 28.83 15.67 28.23 C12.58 25.65 10.55 22.76 8.44 19.38 C7.85 18.45 7.85 18.45 7.26 17.51 C0 5.79 0 5.79 0 0 Z \",fill:\"#73597B\",transform:\"translate(798,309)\"})),_path900||(_path900=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.3 2.12 2.6 2.25 3.94 2.38 C8.65 2.91 13.5 3.46 18 5 C18.33 5.66 18.66 6.32 19 7 C21.11 7.91 21.11 7.91 23.56 8.62 C24.39 8.89 25.22 9.15 26.07 9.41 C26.7 9.61 27.34 9.8 28 10 C28 11.32 28 12.64 28 14 C28.99 14.33 29.98 14.66 31 15 C31.99 15.99 32.98 16.98 34 18 C28.06 17.67 22.12 17.34 16 17 C16 16.34 16 15.68 16 15 C14.68 14.67 13.36 14.34 12 14 C12.66 13.67 13.32 13.34 14 13 C13.01 12.34 12.02 11.68 11 11 C12 10 12 10 14.56 9.94 C15.37 9.96 16.17 9.98 17 10 C17 9.34 17 8.68 17 8 C16.01 7.97 15.03 7.95 14.01 7.92 C12.09 7.84 12.09 7.84 10.12 7.75 C8.21 7.68 8.21 7.68 6.26 7.61 C3 7 3 7 1.55 4.95 C1.37 4.31 1.19 3.66 1 3 C0.07 3.52 -0.86 4.03 -1.81 4.56 C-5 6 -5 6 -8 5 C-7.01 4.34 -6.02 3.68 -5 3 C-5.99 2.34 -6.98 1.68 -8 1 C-5.07 0.02 -3.04 -0.08 0 0 Z \",fill:\"#3D2F43\",transform:\"translate(670,232)\"})),_path901||(_path901=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.26 4.3 -0.7 6.95 -3.38 10.38 C-8.5 17.03 -9.39 23.79 -9 32 C-8.34 32 -7.68 32 -7 32 C-7.33 35.63 -7.66 39.26 -8 43 C-9.65 43 -11.3 43 -13 43 C-14.32 48.61 -15.64 54.22 -17 60 C-17.33 60 -17.66 60 -18 60 C-17.78 53.68 -17.2 48.02 -15 42.06 C-13.04 36.69 -12.62 31.89 -12.35 26.2 C-11.8 21.14 -10 16.65 -8 12 C-7.34 12 -6.68 12 -6 12 C-5.34 9.69 -4.68 7.38 -4 5 C-4.45 5.45 -4.91 5.91 -5.38 6.38 C-6.58 7.58 -7.79 8.79 -9 10 C-9.66 10 -10.32 10 -11 10 C-9.16 4.14 -6.42 0 0 0 Z \",fill:\"#331641\",transform:\"translate(539,157)\"})),_path902||(_path902=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.93 0.85 0.86 1.71 0.79 2.58 C0.04 12.48 -0.15 22.31 -0.13 32.23 C-0.13 34.8 -0.13 37.37 -0.14 39.93 C-0.14 49.84 0.16 59.69 0.79 69.58 C0.9 71.38 1 73.19 1 75 C-2.86 77.57 -5.98 77.19 -10.44 77.06 C-11.96 77.03 -13.48 77 -15 76.97 C-15.67 76.95 -16.34 76.94 -17.03 76.92 C-19.14 77.01 -20.98 77.42 -23 78 C-23.66 77.01 -24.32 76.02 -25 75 C-19.79 72.51 -14.86 72.71 -9.18 72.64 C-5.91 72.33 -5.91 72.33 -4.31 69.94 C-2.7 66.32 -2.69 63.26 -2.84 59.39 C-2.86 57.87 -2.89 56.34 -2.92 54.82 C-2.94 53.63 -2.94 53.63 -2.97 52.42 C-3.06 45.99 -2.84 39.57 -2.68 33.14 C-2.64 31.5 -2.61 29.85 -2.58 28.21 C-2.4 18.64 -1.99 9.4 0 0 Z \",fill:\"#3E1B4D\",transform:\"translate(404,827)\"})),_path903||(_path903=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.88 0.88 4.88 0.88 6 2 C6.47 9.95 6.12 17.33 4 25 C0.35 23.75 -0.78 23.33 -3 20 C-3.34 17.88 -3.34 17.88 -3.5 15.56 C-3.73 12.22 -4.35 9.93 -6 7 C-5.01 6.34 -4.02 5.68 -3 5 C-1.95 3.37 -0.94 1.7 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(935,865)\"})),_path904||(_path904=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.48 -0.16 6.84 0.05 10.36 2.94 C15.65 8.61 21.77 15.71 22.12 23.79 C22.08 24.52 22.04 25.25 22 26 C20.58 25.29 19.16 24.55 17.75 23.81 C16.96 23.41 16.17 23 15.36 22.58 C10.34 19.22 7.69 13.97 4.81 8.81 C4.46 8.18 4.1 7.56 3.74 6.91 C2.45 4.62 1.17 2.34 0 0 Z \",fill:\"#0B133D\",transform:\"translate(1137,845)\"})),_path905||(_path905=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.7 0.25 1.4 0.5 2.12 0.75 C2.12 1.74 2.12 2.73 2.12 3.75 C-1.81 7.68 -7.65 7.86 -12.98 7.98 C-14.82 7.98 -16.66 7.96 -18.5 7.94 C-19.95 7.93 -19.95 7.93 -21.43 7.92 C-27.97 7.85 -34.44 7.53 -40.95 6.96 C-43.66 6.77 -46.29 6.75 -49 6.81 C-52.65 6.75 -53.86 6.46 -56.88 4.75 C-56.88 4.09 -56.88 3.43 -56.88 2.75 C-53.42 2.72 -49.96 2.7 -46.5 2.69 C-45.53 2.68 -44.57 2.67 -43.57 2.66 C-38.06 2.64 -32.69 2.9 -27.21 3.51 C-23.67 3.87 -20.18 4 -16.62 4.06 C-15.96 4.09 -15.29 4.12 -14.6 4.15 C-8.68 4.23 -5.28 -0.46 0 0 Z \",fill:\"#100C14\",transform:\"translate(639.875,508.25)\"})),_path906||(_path906=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12.35 0.97 12.7 1.94 13.06 2.94 C14.75 6.39 14.75 6.39 18.69 6.88 C19.78 6.92 20.87 6.96 22 7 C22 7.33 22 7.66 22 8 C24.97 8.33 27.94 8.66 31 9 C27.88 11.08 26.13 11.48 22.5 12.06 C19.52 12.55 16.87 13.04 14 14 C10.69 14.62 10.69 14.62 7 14 C4.55 11.25 2.75 8.23 1 5 C1.66 4.67 2.32 4.34 3 4 C1.68 3.34 0.36 2.68 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#705275\",transform:\"translate(582,487)\"})),_path907||(_path907=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.81 0.6 2.63 1.2 2.44 1.81 C1.78 4.16 1.78 4.16 3 7 C3.99 7 4.98 7 6 7 C6 7.66 6 8.32 6 9 C6.66 9.33 7.32 9.66 8 10 C7.65 10.54 7.3 11.07 6.94 11.62 C5.75 14 5.75 14 6.53 16.62 C7.12 20.84 6.44 24.25 5.56 28.38 C5.41 29.11 5.27 29.85 5.12 30.61 C4.75 32.41 4.38 34.2 4 36 C3.34 36 2.68 36 2 36 C0.28 30 -1.21 24.19 -2 18 C-2.33 17.34 -2.66 16.68 -3 16 C-2.67 15.01 -2.34 14.02 -2 13 C-2.16 12.36 -2.32 11.73 -2.49 11.07 C-3.37 7.47 -2.03 4.51 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#67486D\",transform:\"translate(854,392)\"})),_path908||(_path908=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.26 1.8 4.89 2.83 7 6 C7.38 8.63 7.38 8.63 7.56 11.56 C7.74 15.43 7.74 15.43 9 19 C9.1 21.74 9.14 24.45 9.12 27.19 C9.13 27.93 9.13 28.67 9.14 29.44 C9.13 34.06 8.76 38.44 8 43 C7.01 42.67 6.02 42.34 5 42 C4 39 3.74 36.62 3.54 33.48 C3.46 32.38 3.38 31.28 3.3 30.15 C3.22 28.99 3.14 27.82 3.06 26.62 C2.42 17.66 1.68 8.83 0 0 Z \",fill:\"#060928\",transform:\"translate(662,1086)\"})),_path909||(_path909=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.09 2.81 0.19 4.63 -0.73 6.43 C-1.66 8.31 -2.55 10.2 -3.43 12.1 C-3.92 13.16 -4.42 14.22 -4.94 15.31 C-5.4 16.32 -5.86 17.33 -6.34 18.36 C-8.24 21.38 -9.8 22.49 -13 24 C-16.31 24.69 -16.31 24.69 -19 25 C-19.89 22.59 -20.03 21.16 -19.5 18.62 C-17.7 15.47 -15.54 13.79 -12.73 11.54 C-10.75 9.91 -10.75 9.91 -9 6.88 C-6.39 3.13 -4.12 1.91 0 0 Z \",fill:\"#411E4E\",transform:\"translate(268,745)\"})),_path910||(_path910=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.08 0.12 2.16 0.24 3.27 0.36 C4.09 0.47 4.91 0.58 5.75 0.69 C6.68 3.7 6.79 4.55 5.75 7.69 C3.69 8.38 3.69 8.38 1.75 8.69 C2.58 9.45 3.4 10.21 4.25 11 C6.75 13.69 6.75 13.69 6.75 16.69 C5.76 17.02 4.77 17.35 3.75 17.69 C3.28 17.09 2.8 16.49 2.31 15.88 C-0.73 13.28 -3.42 12.47 -7.23 11.4 C-9.25 10.69 -9.25 10.69 -11.25 8.69 C-11.11 5.37 -10.94 3.4 -8.59 0.98 C-5.47 -0.74 -3.5 -0.42 0 0 Z \",fill:\"#45245B\",transform:\"translate(995.25,649.3125)\"})),_path911||(_path911=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.7 0.13 1.4 0.27 2.12 0.4 C3.07 0.58 4.02 0.76 5 0.94 C6.51 1.23 6.51 1.23 8.04 1.52 C10.54 1.93 12.8 2.03 15.31 2.06 C19.5 3.13 20.01 3.77 22.38 7.19 C24 9.93 25.09 12.27 26.06 15.31 C27.47 19.35 30.27 21.14 34 23 C34 23.66 34 24.32 34 25 C34.66 24.67 35.32 24.34 36 24 C37.54 23.93 39.08 23.92 40.62 23.94 C41.85 23.95 41.85 23.95 43.1 23.96 C43.73 23.98 44.35 23.99 45 24 C44.5 25.49 44.5 25.49 44 27 C44.56 26.84 45.11 26.69 45.69 26.53 C51.22 25.12 55.38 24.98 61 26 C61 26.66 61 27.32 61 28 C57.69 28.09 54.38 28.14 51.06 28.19 C50.14 28.21 49.21 28.24 48.26 28.26 C39.81 28.35 31.42 26.85 25 21 C23.26 17.95 21.75 14.87 20.3 11.68 C19.15 8.93 19.15 8.93 17 7 C14.32 6.98 14.32 6.98 11.38 7.38 C10.37 7.49 9.37 7.6 8.34 7.71 C7.57 7.81 6.79 7.9 6 8 C5.71 7.37 5.43 6.73 5.13 6.08 C3.77 3.58 2.59 3.04 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A1949\",transform:\"translate(834,206)\"})),_path912||(_path912=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.99 4.49 2.99 4.49 4 7 C3.25 9.94 3.25 9.94 2 12 C1.01 11.67 0.02 11.34 -1 11 C-4.35 11.31 -7.69 11.64 -11.02 12.12 C-13.98 12.42 -16.25 12.62 -18.62 10.67 C-20.01 9.01 -20.01 9.01 -22 6 C-20.33 5.33 -18.67 4.67 -17 4 C-16.26 3.67 -15.51 3.34 -14.75 3 C-10 1.27 -5.07 0 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(961,1119)\"})),_path913||(_path913=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 5.93 1.09 13.91 -0.2 20.6 C-1.78 28.4 -3.76 36.03 -6.12 43.62 C-6.38 44.45 -6.63 45.27 -6.89 46.12 C-7.53 48.1 -8.26 50.05 -9 52 C-9.99 52.49 -9.99 52.49 -11 53 C-9.9 47.75 -8.63 42.61 -7.1 37.47 C-2.93 24.02 -2.93 24.02 -3.75 10.25 C-5.25 7.56 -6.09 7.15 -9 6.31 C-11.82 5.47 -12.86 5.14 -15 3 C-14.34 3 -13.68 3 -13 3 C-13 2.34 -13 1.68 -13 1 C-8.27 -0.96 -4.99 -1.25 0 0 Z \",fill:\"#462453\",transform:\"translate(439,1108)\"})),_path914||(_path914=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.78 3.12 2.57 3.25 3.38 3.38 C6 4 6 4 8 6 C8.27 8.75 8.27 8.75 8.25 12 C8.26 13.07 8.26 14.14 8.27 15.25 C8 18 8 18 6 20 C4 19.88 4 19.88 2 19 C-0.13 16.04 -0.72 12.41 -1.54 8.9 C-1.94 7.25 -2.46 5.62 -3 4 C-3.99 4.01 -4.97 4.02 -5.99 4.04 C-7.27 4.04 -8.55 4.05 -9.88 4.06 C-11.15 4.07 -12.43 4.09 -13.74 4.1 C-17 4 -17 4 -19 3 C-19 2.34 -19 1.68 -19 1 C-12.52 -1.5 -6.82 -0.83 0 0 Z \",fill:\"#0B0910\",transform:\"translate(658,625)\"})),_path915||(_path915=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.44 2.89 0.51 4.54 -0.31 7.62 C-0.6 8.71 -0.88 9.79 -1.18 10.9 C-1.58 12.43 -1.58 12.43 -2 14 C-2.34 15.42 -2.67 16.83 -3 18.25 C-4.09 22.34 -5.36 26.1 -7 30 C-7.66 30.33 -8.32 30.66 -9 31 C-9.68 32.91 -10.27 34.86 -10.81 36.81 C-12.44 42.35 -14.41 47.56 -16.7 52.86 C-19.03 58.48 -21 64.25 -23 70 C-23.66 70 -24.32 70 -25 70 C-23.1 62.58 -20.81 55.42 -18.12 48.25 C-15.28 40.56 -12.57 32.86 -10.03 25.07 C-9.17 22.5 -8.22 20.01 -7.19 17.5 C-5.92 13.75 -5.93 10.92 -6 7 C-5.25 3.62 -5.25 3.62 -4 1 C-1.88 0.12 -1.88 0.12 0 0 Z \",fill:\"#371942\",transform:\"translate(401,505)\"})),_path916||(_path916=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95 0.51 5.37 1.59 8 3 C6.74 3.29 5.48 3.58 4.19 3.88 C1.15 4.57 -0.31 5.2 -3 7 C-4.6 7.58 -6.2 8.14 -7.81 8.69 C-12.9 10.68 -16.3 13.19 -19 18 C-19.51 20.8 -19.51 20.8 -19 23 C-19.99 23 -20.98 23 -22 23 C-23.68 23.92 -25.32 24.91 -26.94 25.94 C-29.96 27.86 -32.46 29.35 -36 30 C-36 30.66 -36 31.32 -36 32 C-38.5 33.62 -38.5 33.62 -41 35 C-40.31 32.62 -40.31 32.62 -39 30 C-37.36 29.28 -35.69 28.61 -34 28 C-33.67 27.01 -33.34 26.02 -33 25 C-31.99 24.32 -30.98 23.64 -29.94 22.94 C-25.68 20.07 -22.88 16.36 -19.8 12.3 C-16.32 7.85 -13.12 5.98 -7.88 3.88 C-3.63 2.41 -3.63 2.41 0 0 Z \",fill:\"#381A43\",transform:\"translate(375,1242)\"})),_path917||(_path917=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.59 1.27 5.17 2.54 7.75 3.81 C8.48 4.17 9.21 4.53 9.96 4.89 C13.57 6.68 16.85 8.45 20 11 C20.66 11.33 21.32 11.66 22 12 C22 13.65 22 15.3 22 17 C20.1 17.08 18.21 17.14 16.31 17.19 C14.73 17.24 14.73 17.24 13.11 17.29 C8.14 16.83 4.94 14.35 1.62 10.75 C1.1 10.21 0.58 9.67 0.04 9.11 C-1.53 5.93 -0.69 3.38 0 0 Z \",fill:\"#090F36\",transform:\"translate(937,1143)\"})),_path918||(_path918=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.19 1.11 0.37 1.69 0.56 C4.4 1.08 6.34 0.66 9 0 C9.66 1.98 10.32 3.96 11 6 C11.66 6 12.32 6 13 6 C14.67 8.11 16.22 10.22 17.75 12.44 C18.19 13.07 18.64 13.71 19.1 14.37 C19.99 15.65 20.88 16.93 21.76 18.21 C22.84 19.76 23.93 21.3 25.03 22.83 C25.58 23.61 26.12 24.39 26.69 25.19 C27.17 25.86 27.64 26.54 28.14 27.23 C29 29 29 29 28 32 C27.32 31.07 26.64 30.14 25.94 29.19 C23.79 26.56 23 26 19.62 24.81 C14.88 23.11 13.09 18.97 10.68 14.79 C8.26 10.77 5.28 7.3 2.25 3.75 C0 1 0 1 0 0 Z \",fill:\"#090E35\",transform:\"translate(614,1009)\"})),_path919||(_path919=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86 1.28 5.02 2.53 7 5 C7 5.99 7 6.98 7 8 C7.66 6.68 8.32 5.36 9 4 C14.01 5.47 16.52 8.28 20 12 C19.67 12.99 19.34 13.98 19 15 C18.38 14.34 17.76 13.68 17.12 13 C15.24 10.77 15.24 10.77 13 11 C13.56 15.3 15.09 18.05 17.5 21.62 C19.41 24.48 20.91 26.74 22 30 C21.67 30.66 21.34 31.32 21 32 C13.18 28.73 8.52 19.33 5 12 C3.92 9.36 2.96 6.69 2 4 C1.36 2.65 0.71 1.31 0 0 Z \",fill:\"#2A113A\",transform:\"translate(419,935)\"})),_path920||(_path920=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.34 2.98 1.68 4.96 1 7 C0.01 6.67 -0.98 6.34 -2 6 C-1.66 6.77 -1.66 6.77 -1.31 7.56 C-0.58 13.31 -4.93 18.49 -8 23 C-9.03 24.99 -10.04 26.98 -11 29 C-11.33 28.34 -11.66 27.68 -12 27 C-14.22 28.93 -14.22 28.93 -15 32 C-16.32 31.67 -17.64 31.34 -19 31 C-17.44 25.75 -15.16 21.08 -12.62 16.25 C-12.24 15.48 -11.85 14.72 -11.45 13.93 C-11.07 13.19 -10.68 12.46 -10.29 11.7 C-9.95 11.04 -9.6 10.38 -9.25 9.69 C-7.74 7.65 -6.25 7.09 -4 6 C-3.28 4.36 -2.61 2.69 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#28103B\",transform:\"translate(454,702)\"})),_path921||(_path921=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.19 4.5 C2 7.44 1.74 10.14 1 13 C-2.14 15.57 -3.74 16.11 -7.75 15.75 C-10 15 -10 15 -12 14 C-13.2 9.43 -12.83 5.62 -12 1 C-7.68 -1.23 -4.7 -1.06 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(568,528)\"})),_path922||(_path922=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 -0.25 1.88 -0.25 4.13 -0.07 C5.34 0.01 5.34 0.01 6.57 0.09 C7.42 0.16 8.26 0.24 9.12 0.31 C10.4 0.4 10.4 0.4 11.7 0.5 C13.8 0.65 15.9 0.82 18 1 C18 1.66 18 2.32 18 3 C18.57 3.12 19.13 3.24 19.71 3.37 C20.45 3.53 21.18 3.7 21.94 3.88 C22.67 4.04 23.4 4.2 24.15 4.37 C26 5 26 5 27 7 C27.66 7 28.32 7 29 7 C29 7.66 29 8.32 29 9 C28.26 9.13 27.53 9.27 26.77 9.4 C25.79 9.58 24.82 9.76 23.81 9.94 C22.85 10.11 21.89 10.29 20.89 10.46 C18.26 10.95 15.63 11.47 13 12 C13 10.68 13 9.36 13 8 C10.14 7.32 10.14 7.32 7 7 C6.01 7.66 5.02 8.32 4 9 C3.01 9 2.02 9 1 9 C0.01 7.02 -0.98 5.04 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#100C14\",transform:\"translate(676,257)\"})),_path923||(_path923=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.29 2.19 4.11 3.6 6 7 C6.64 8.03 7.28 9.06 7.94 10.12 C10.14 13.98 11.54 18.05 12.99 22.24 C13.91 24.76 14.97 27.14 16.12 29.56 C19.42 36.82 20.29 44.1 20 52 C16.65 45.56 13.2 38.39 14 31 C13.34 31 12.68 31 12 31 C11.7 30.37 11.39 29.74 11.08 29.09 C9.03 24.9 6.99 20.9 4.31 17.06 C1.05 12.04 0 5.95 0 0 Z \",fill:\"#401F4A\",transform:\"translate(645,1055)\"})),_path924||(_path924=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.37 0.52 10.01 4.65 14 8 C15.49 10.04 16.18 11.59 17 14 C16.34 14 15.68 14 15 14 C14.67 14.99 14.34 15.98 14 17 C3.99 16.97 3.99 16.97 0.38 13.44 C-1.25 9.38 -1.85 6.37 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#4B2F63\",transform:\"translate(966,569)\"})),_path925||(_path925=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.94 0.9 2.88 1.79 2.82 2.72 C2.52 11.02 3.37 17.72 6.22 25.54 C7.66 29.52 8.26 32.77 8 37 C8.95 37.27 9.9 37.54 10.88 37.81 C14 39 14 39 16 42 C16.12 44.69 16.12 44.69 16 47 C15.34 46.67 14.68 46.34 14 46 C14 45.01 14 44.02 14 43 C11.36 43.33 8.72 43.66 6 44 C6 43.34 6 42.68 6 42 C5.34 42 4.68 42 4 42 C3.88 41.32 3.77 40.64 3.65 39.94 C3.12 36.85 2.59 33.77 2.06 30.69 C1.88 29.62 1.7 28.54 1.51 27.44 C1.24 25.9 1.24 25.9 0.97 24.32 C0.81 23.38 0.65 22.43 0.48 21.45 C0.03 18.88 0.03 18.88 -1 16 C-0.91 13.25 -0.77 10.55 -0.56 7.81 C-0.51 7.06 -0.46 6.31 -0.4 5.54 C-0.27 3.69 -0.14 1.85 0 0 Z \",fill:\"#5A4661\",transform:\"translate(859,324)\"})),_path926||(_path926=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.49 2.48 0.49 5 1 C5.33 1.99 5.66 2.98 6 4 C7.33 5.01 8.66 6.01 10 7 C10 7.66 10 8.32 10 9 C10.66 9 11.32 9 12 9 C14.77 17.86 16.39 26.18 16.38 35.5 C16.38 36.74 16.38 36.74 16.38 38 C16.28 43.28 15.46 47.92 14 53 C12.68 52.34 11.36 51.68 10 51 C10 50.01 10 49.02 10 48 C11.49 47.51 11.49 47.51 13 47 C13.33 44.03 13.66 41.06 14 38 C13.34 38 12.68 38 12 38 C11.67 37.34 11.34 36.68 11 36 C8.98 35.35 8.98 35.35 7 35 C7.43 32.08 8.05 30.94 10.06 28.69 C12.58 25.2 12.45 23.22 12 19 C11.38 16.04 10.8 14.57 8.31 12.8 C6.58 11.8 4.79 10.9 3 10 C3 9.34 3 8.68 3 8 C4.32 7.67 5.64 7.34 7 7 C6.03 6.59 5.06 6.17 4.06 5.75 C1 4 1 4 0.12 1.81 C0.08 1.21 0.04 0.62 0 0 Z \",fill:\"#351048\",transform:\"translate(592,1114)\"})),_path927||(_path927=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C5.15 1.69 5.15 1.69 7 1 C7 1.66 7 2.32 7 3 C6.01 3 5.02 3 4 3 C2.74 18.44 2.24 33.87 5.06 49.19 C6.16 55.15 6.19 60.95 6 67 C5.01 66.67 4.02 66.34 3 66 C2.31 60.55 1.91 55.34 2.06 49.85 C2.13 47.9 2.13 47.9 1 46 C1.02 44.13 1.05 42.26 1.12 40.39 C1.36 32.73 0.68 26.75 -2.1 19.51 C-4.56 12.63 -2.2 6.61 0 0 Z \",fill:\"#462860\",transform:\"translate(608,1075)\"})),_path928||(_path928=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.13 3.33 1.23 5.59 0.01 7.76 C-2.98 13.13 -3.75 17.89 -4 24 C-5.94 23.69 -7.88 23.38 -9.81 23.06 C-11.43 22.8 -11.43 22.8 -13.08 22.54 C-16 22 -16 22 -19 21 C-18.44 20.39 -17.89 19.79 -17.31 19.16 C-12.53 13.91 -7.97 8.56 -3.63 2.93 C-2 1 -2 1 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(311,687)\"})),_path929||(_path929=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.75 -0.12 6.75 -0.12 9 1 C9 1.66 9 2.32 9 3 C9.66 3 10.32 3 11 3 C17.01 8.52 22.09 15.89 26 23 C26 24.32 26 25.64 26 27 C22.46 25.58 21.66 24.32 20 21 C19.43 20.73 18.86 20.46 18.27 20.19 C15.22 18.59 13.17 16.43 10.75 14 C9.86 13.11 8.97 12.23 8.05 11.31 C6 9 6 9 6 7 C5.38 6.77 4.76 6.55 4.12 6.31 C1.39 4.62 0.95 3.01 0 0 Z \",fill:\"#28103A\",transform:\"translate(967,545)\"})),_path930||(_path930=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 2.56 2.38 2.56 4 5 C3.41 5.25 2.82 5.51 2.21 5.77 C-0.22 7.13 -1.52 8.58 -3.31 10.69 C-5.12 12.58 -5.12 12.58 -7 14 C-10.94 13.94 -10.94 13.94 -14 13 C-14.25 12.22 -14.5 11.43 -14.75 10.62 C-16.15 7.68 -17.01 7.1 -20 6 C-19.26 5.57 -18.51 5.13 -17.75 4.69 C-15.05 3.11 -15.05 3.11 -13 1.38 C-8.86 -1.47 -4.72 -1.41 0 0 Z \",fill:\"#442254\",transform:\"translate(701,137)\"})),_path931||(_path931=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C6.48 17.32 4.69 38.93 -1 56 C-1.19 59.52 -1.32 63.03 -1.43 66.55 C-2.08 70.47 -3.3 72.16 -6 75 C-6.03 73.52 -6.05 72.04 -6.06 70.56 C-6.07 69.74 -6.09 68.92 -6.1 68.07 C-6 66 -6 66 -5 65 C-4.81 63.56 -4.68 62.11 -4.57 60.66 C-4.5 59.76 -4.42 58.86 -4.35 57.94 C-4.2 56.06 -4.06 54.18 -3.93 52.29 C-3.55 47.74 -3 43.72 -1.44 39.41 C0.97 31.99 0.32 24.09 0.19 16.38 C0.17 14.78 0.16 13.19 0.15 11.6 C0.11 7.73 0.06 3.87 0 0 Z \",fill:\"#401D4E\",transform:\"translate(364,1030)\"})),_path932||(_path932=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.63 1.01 3.72 1.73 5.44 3.94 C6.01 9.02 4.96 13.76 2.12 18 C-0.68 21.07 -0.9 21.12 -4.56 21.94 C-6.17 22.75 -7.75 23.6 -9.31 24.5 C-10.51 25.18 -10.51 25.18 -11.73 25.88 C-12.34 26.23 -12.94 26.58 -13.56 26.94 C-14.55 26.28 -15.54 25.62 -16.56 24.94 C-15.33 24.52 -14.09 24.11 -12.81 23.69 C-7.88 21.85 -7.88 21.85 -4.56 17.94 C-4.48 13.1 -5.03 8.52 -6.56 3.94 C-3.28 -0.08 -3.28 -0.08 0 0 Z \",fill:\"#7F709D\",transform:\"translate(636.5625,514.0625)\"})),_path933||(_path933=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.03 0.78 2.05 1.55 2.08 2.35 C2.19 5.9 2.32 9.45 2.44 13 C2.48 14.22 2.52 15.44 2.56 16.7 C2.81 24.22 2.81 24.22 3.66 31.69 C4 35 4 35 2 38 C1.67 38.66 1.34 39.32 1 40 C-2 39 -2 39 -3.18 37.27 C-4.78 32.83 -4.04 28.09 -3.81 23.44 C-3.78 22.4 -3.75 21.37 -3.72 20.3 C-3.41 13.18 -2.16 6.79 0 0 Z \",fill:\"#1E0D30\",transform:\"translate(497,318)\"})),_path934||(_path934=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.26 1.4 6.78 3.4 10 6.5 C14.15 10.37 18.37 13.99 22.88 17.44 C23.41 17.85 23.94 18.26 24.5 18.69 C26.83 20.46 29.17 22.1 31.7 23.6 C34 25 34 25 35.49 26.55 C37.51 28.49 39.58 29.21 42.19 30.19 C43.09 30.53 43.99 30.88 44.92 31.23 C45.61 31.48 46.29 31.74 47 32 C47 32.99 47 33.98 47 35 C30.63 30.21 15.12 19.81 4 7 C3.67 6.01 3.34 5.02 3 4 C2.01 3.67 1.02 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#010004\",transform:\"translate(126,1229)\"})),_path935||(_path935=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.57 2.11 -1.14 2.22 -1.72 2.34 C-4.34 2.85 -6.95 3.36 -9.56 3.88 C-10.46 4.05 -11.35 4.22 -12.28 4.4 C-16.17 5.17 -19.94 5.98 -23.75 7.12 C-29.15 8.58 -34.45 8.2 -40 8 C-41.21 7.99 -41.21 7.99 -42.44 7.98 C-45.29 7.83 -47.42 7.51 -49.59 5.6 C-51 3.94 -51 3.94 -53 1 C-52.07 1.22 -52.07 1.22 -51.13 1.44 C-49.86 1.72 -49.86 1.72 -48.56 2 C-47.74 2.19 -46.92 2.37 -46.07 2.56 C-38.05 3.71 -30.28 2.67 -22.31 1.56 C-21.31 1.43 -20.3 1.29 -19.26 1.15 C-15.32 0.62 -11.39 0.07 -7.47 -0.62 C-4.72 -1.04 -2.68 -0.71 0 0 Z \",fill:\"#0B0711\",transform:\"translate(237,1092)\"})),_path936||(_path936=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.62 2.31 0.62 4.31 3.62 C3.24 3.99 2.17 4.36 1.07 4.75 C-3.01 6.5 -4.56 8.8 -6.75 12.69 C-7.25 13.55 -7.25 13.55 -7.76 14.44 C-8.75 16.16 -9.72 17.89 -10.69 19.62 C-14.01 25.45 -17.34 30.65 -21.88 35.6 C-25.02 39.11 -27.83 42.88 -30.69 46.62 C-31.02 45.97 -31.35 45.3 -31.69 44.62 C-30.76 42.93 -30.76 42.93 -29.38 40.94 C-27.46 38.05 -26.59 36.25 -25.69 32.81 C-24.69 29.62 -24.69 29.62 -22.38 28.25 C-16.81 24.88 -14.39 17.67 -12.69 11.62 C-11.7 11.62 -10.71 11.62 -9.69 11.62 C-10.02 10.63 -10.35 9.64 -10.69 8.62 C-9.7 8.29 -8.71 7.97 -7.69 7.62 C-6.43 5.98 -6.43 5.98 -5.31 4.06 C-3.03 0.7 -3.03 0.7 0 0 Z \",fill:\"#351447\",transform:\"translate(582.6875,718.375)\"})),_path937||(_path937=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C2.66 3 3.32 3 4 3 C2.54 6.81 0.74 7.99 -2.81 9.88 C-7.31 12.42 -9.95 14.87 -13 19 C-13.33 19 -13.66 19 -14 19 C-14 16.69 -14 14.38 -14 12 C-14.66 12 -15.32 12 -16 12 C-16 11.34 -16 10.68 -16 10 C-16.66 9.67 -17.32 9.34 -18 9 C-16.36 7.31 -14.69 5.65 -13 4 C-12.24 3.24 -11.47 2.47 -10.69 1.69 C-6.87 -0.71 -4.46 -0.37 0 0 Z \",fill:\"#7F709D\",transform:\"translate(876,396)\"})),_path938||(_path938=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 1.48 -0.99 1.48 -2 3 C-1.2 3.37 -0.39 3.74 0.44 4.12 C3 6 3 6 3.81 9.19 C3.87 10.12 3.94 11.04 4 12 C3.48 11.79 2.97 11.59 2.44 11.38 C-0.39 10.94 -2.24 11.66 -4.93 12.5 C-8.94 13.47 -12.94 13.73 -17 13 C-19.62 10.5 -19.62 10.5 -21 8 C-19.55 7.44 -19.55 7.44 -18.06 6.88 C-14.02 5.18 -10.69 2.75 -7.21 0.11 C-4.4 -1.3 -2.95 -0.89 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(680,1047)\"})),_path939||(_path939=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.33 0.66 0.66 1 1 C2.67 1.04 4.33 1.04 6 1 C5.67 1.66 5.34 2.32 5 3 C5.5 3.43 5.99 3.87 6.5 4.31 C8 6 8 6 8 9 C8.66 9 9.32 9 10 9 C10.99 12.3 11.98 15.6 13 19 C12.34 19 11.68 19 11 19 C10.67 19.66 10.34 20.32 10 21 C9.49 19.56 9 18.13 8.5 16.69 C8.22 15.89 7.94 15.09 7.66 14.26 C7 12 7 12 7 9 C6.34 9 5.68 9 5 9 C4.34 8.01 3.68 7.02 3 6 C0.88 5.34 0.88 5.34 -1.5 5.19 C-2.29 5.1 -3.09 5.01 -3.91 4.92 C-6.22 4.77 -6.22 4.77 -8 7 C-8.99 7.5 -8.99 7.5 -10 8 C-9.98 9.31 -9.95 10.63 -9.93 11.98 C-9.91 13.72 -9.89 15.45 -9.88 17.19 C-9.85 18.48 -9.85 18.48 -9.82 19.81 C-9.79 24.32 -9.84 27.9 -12 32 C-12.33 32 -12.66 32 -13 32 C-13.05 28.07 -13.09 24.13 -13.11 20.2 C-13.12 18.21 -13.15 16.21 -13.18 14.22 C-13.18 12.96 -13.19 11.71 -13.2 10.42 C-13.21 9.26 -13.22 8.1 -13.23 6.91 C-13 4 -13 4 -11 1 C-7.12 -0.29 -4.09 -0.13 0 0 Z \",fill:\"#3A184A\",transform:\"translate(391,904)\"})),_path940||(_path940=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.07 0.9 1.07 0.9 1.15 1.83 C1.22 2.63 1.3 3.43 1.38 4.25 C1.44 5.04 1.51 5.83 1.59 6.64 C1.88 9.01 1.88 9.01 3.02 10.98 C4.85 14.75 4.58 18.92 4 23 C2.06 25.12 2.06 25.12 0 27 C-0.66 29.7 -0.81 32.22 -1 35 C1.35 33.1 1.35 33.1 1.12 29.88 C1.08 28.93 1.04 27.98 1 27 C1.66 27.33 2.32 27.66 3 28 C3 30.97 3 33.94 3 37 C3.66 37 4.32 37 5 37 C4.87 37.58 4.73 38.16 4.6 38.76 C3.6 43.16 2.73 47.54 2 52 C1.68 53.34 1.36 54.67 1 56 C0.34 56 -0.32 56 -1 56 C-1.33 54.02 -1.66 52.04 -2 50 C-1.34 50 -0.68 50 0 50 C-0.28 48.79 -0.28 48.79 -0.56 47.56 C-0.71 46.72 -0.85 45.87 -1 45 C-0.5 44.5 -0.5 44.5 0 44 C-0.66 43.67 -1.32 43.34 -2 43 C-2.33 43.66 -2.66 44.32 -3 45 C-5.7 36.9 -3.79 28.76 -0.88 21 C0.5 16.29 0.17 12.12 -0.56 7.31 C-0.95 4.37 -0.99 2.74 0 0 Z \",fill:\"#2C113E\",transform:\"translate(485,477)\"})),_path941||(_path941=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.84 3.11 2.63 5.39 2 9 C-2.11 13 -2.11 13 -5 13 C-5.25 13.62 -5.5 14.24 -5.75 14.88 C-7.28 17.48 -8.23 17.85 -11 19 C-13.09 19.52 -15.2 20 -17.31 20.44 C-21.05 21.25 -24.45 22.04 -27.88 23.75 C-31.78 25.31 -33.97 25.14 -38 24 C-40.44 22.31 -40.44 22.31 -42 20 C-42.25 16.75 -42.25 16.75 -42 14 C-42.66 13.67 -43.32 13.34 -44 13 C-40.6 10.91 -37.95 10.82 -34 11 C-34 13.64 -34 16.28 -34 19 C-28.68 20.03 -24.69 19.84 -19.31 18.69 C-18.03 18.42 -16.75 18.16 -15.43 17.89 C-8.55 16.11 -5.69 12.97 -2 7 C-1.06 4.2 -1.06 4.2 -1 2 C-1.66 1.67 -2.32 1.34 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(653,339)\"})),_path942||(_path942=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.68 1.46 3.3 2.28 4.19 5.19 C4.31 8.44 4.31 8.44 4.19 11.19 C3.2 11.52 2.21 11.85 1.19 12.19 C0.04 11.23 0.04 11.23 -1.12 10.25 C-3.66 7.95 -3.66 7.95 -6.88 7.75 C-10.13 8.23 -11.3 9.18 -13.81 11.19 C-15.13 11.19 -16.45 11.19 -17.81 11.19 C-17.39 9.75 -16.95 8.31 -16.5 6.88 C-16.26 6.07 -16.01 5.27 -15.76 4.45 C-12.59 -3.1 -6.93 -2 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(990.8125,1104.8125)\"})),_path943||(_path943=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56 3.85 4.25 7.89 6.06 12.12 C6.43 12.94 6.79 13.76 7.17 14.6 C9.54 20.15 10.61 24.97 11 31 C11.66 31 12.32 31 13 31 C13 31.66 13 32.32 13 33 C13.66 33.33 14.32 33.66 15 34 C15 38.62 15 43.24 15 48 C13.68 47.34 12.36 46.68 11 46 C10.25 42.88 10.25 42.88 10 40 C9.34 40 8.68 40 8 40 C7.83 38.76 7.66 37.51 7.48 36.23 C6.29 27.93 5.05 20.24 1.85 12.45 C0.44 8.39 0.18 4.26 0 0 Z \",fill:\"#351940\",transform:\"translate(1265,732)\"})),_path944||(_path944=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C6.96 2.34 9.6 2.09 13 0 C13.33 0.66 13.66 1.32 14 2 C13.14 4.31 13.14 4.31 11.81 7 C11.39 7.89 10.96 8.77 10.52 9.69 C8.81 12.29 7.92 13.03 5 14 C2.2 14.41 2.2 14.41 -0.75 14.62 C-2.23 14.74 -2.23 14.74 -3.73 14.85 C-4.48 14.9 -5.23 14.95 -6 15 C-7.03 12.31 -7.08 11.21 -6.07 8.46 C-5.62 7.58 -5.16 6.71 -4.69 5.81 C-4.24 4.93 -3.79 4.05 -3.32 3.14 C-2 1 -2 1 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(406,515)\"})),_path945||(_path945=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75 2.62 2.39 4.04 3 7 C3.66 7 4.32 7 5 7 C6.31 13.56 5.53 17.83 3 24 C2.34 24 1.68 24 1 24 C0.34 25.32 -0.32 26.64 -1 28 C-1 27.34 -1 26.68 -1 26 C-1.66 26 -2.32 26 -3 26 C-4 23 -4 23 -3.5 21.12 C-2.86 18.42 -3.39 16.72 -4 14 C-4.66 10.97 -5.21 8.11 -5 5 C-2.56 1.94 -2.56 1.94 0 0 Z \",fill:\"#251B28\",transform:\"translate(542,323)\"})),_path946||(_path946=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-1.32 5.58 -3.04 7.2 -7.06 8.38 C-10.32 9.49 -10.88 9.82 -12.94 12.81 C-14.15 16.4 -14.24 19.98 -14.44 23.75 C-14.8 30.54 -16.42 35.77 -19 42 C-19.85 44.29 -20.68 46.58 -21.5 48.88 C-21.92 50.05 -22.35 51.23 -22.79 52.45 C-23.95 55.86 -24.95 59.28 -25.94 62.75 C-27.48 67.91 -29.62 72 -32.54 76.5 C-35.02 80.74 -36.49 85.34 -38 90 C-38.33 90 -38.66 90 -39 90 C-39 88.02 -39 86.04 -39 84 C-38.34 84 -37.68 84 -37 84 C-36.9 83.15 -36.8 82.29 -36.7 81.41 C-35.93 77.66 -34.61 74.85 -32.88 71.44 C-29.39 64.33 -26.86 57.04 -24.49 49.5 C-23.15 45.29 -21.72 41.29 -19.82 37.3 C-18.07 33.48 -17.54 30.36 -17.5 26.12 C-17.19 19.1 -16.18 11.18 -11 6 C-8.71 5.46 -6.42 5.11 -4.09 4.76 C-1.81 4.18 -1.81 4.18 -0.72 1.93 C-0.48 1.29 -0.24 0.66 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(560,195)\"})),_path947||(_path947=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.35 0.37 8.4 3.43 12.31 6.75 C16.79 10.52 21.22 13.9 26.29 16.83 C28.51 18.35 29.84 20.37 31.44 22.51 C34.86 25.78 39.65 27.28 44 29 C43.01 29.33 42.02 29.66 41 30 C40.67 30.66 40.34 31.32 40 32 C39.32 31.13 39.32 31.13 38.62 30.25 C36.07 28.06 34.72 27.47 31.62 26.44 C21.41 22.59 13.12 14.15 5.12 6.94 C4.61 6.47 4.09 6.01 3.56 5.53 C2.33 4.4 1.16 3.2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#251037\",transform:\"translate(788,245)\"})),_path948||(_path948=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.66 5 3.32 5 4 5 C4.39 7.96 4.76 10.91 5.12 13.88 C5.24 14.72 5.35 15.56 5.46 16.43 C5.56 17.23 5.66 18.04 5.76 18.87 C5.85 19.61 5.95 20.35 6.04 21.12 C6 23 6 23 4 25 C-0.15 25.88 -3.87 25.97 -8 25 C-11.08 22.08 -12.9 18.66 -15 15 C-15.93 14.07 -16.86 13.14 -17.81 12.19 C-20.11 9.89 -21.03 8.08 -22 5 C-17.49 8.67 -13.5 12.34 -10 17 C-10 17.66 -10 18.32 -10 19 C-8.74 18.86 -7.48 18.71 -6.19 18.56 C-5.13 18.44 -5.13 18.44 -4.04 18.32 C-1.81 18.03 -1.81 18.03 1 17 C1 14.03 1 11.06 1 8 C0.34 8 -0.32 8 -1 8 C-0.67 5.36 -0.34 2.72 0 0 Z \",fill:\"#462453\",transform:\"translate(1261,726)\"})),_path949||(_path949=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 1.98 0.5 1.98 1 4 C0.34 4 -0.32 4 -1 4 C-1.33 4.88 -1.33 4.88 -1.67 5.77 C-3.41 8.68 -5.38 9.84 -8.25 11.62 C-9.18 12.22 -10.12 12.81 -11.08 13.41 C-14 15 -16.84 15.98 -20 17 C-22.02 18.3 -24.03 19.63 -26 21 C-27.32 21.69 -28.65 22.38 -30 23 C-30.66 21.68 -31.32 20.36 -32 19 C-24.32 13.64 -16.63 8.28 -8.69 3.31 C-7.66 2.67 -6.63 2.03 -5.57 1.36 C-3 0 -3 0 0 0 Z \",fill:\"#060929\",transform:\"translate(913,707)\"})),_path950||(_path950=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.68 6.84 0.13 11.87 -3 18 C-3.37 20.78 -3.56 23.52 -3.69 26.32 C-4.02 29.19 -4.93 31.33 -6 34 C-6.28 35.93 -6.48 37.87 -6.62 39.81 C-6.74 41.28 -6.74 41.28 -6.85 42.77 C-6.9 43.51 -6.95 44.24 -7 45 C-10.14 40.28 -9.33 35.26 -9.32 29.71 C-9.31 27.71 -9.34 25.7 -9.36 23.69 C-9.36 22.41 -9.36 21.14 -9.36 19.82 C-9.37 18.66 -9.37 17.5 -9.37 16.3 C-8.77 10.99 -6.37 7.07 -2.88 3.12 C-2.1 2.23 -2.1 2.23 -1.3 1.32 C-0.87 0.88 -0.44 0.45 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(488,322)\"})),_path951||(_path951=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.36 0.65 2.72 1.32 4.06 2 C4.06 2.33 4.06 2.66 4.06 3 C3.48 2.97 2.9 2.93 2.3 2.89 C-4.45 2.66 -8.29 4.24 -13.94 8 C-14.27 7.34 -14.6 6.68 -14.94 6 C-17.7 8.76 -17.52 11.21 -17.94 15 C-24.09 14.41 -24.09 14.41 -25.94 14 C-26.27 13.34 -26.6 12.68 -26.94 12 C-25 6.2 -22.95 3.58 -17.62 0.5 C-10.97 -2.72 -6.77 -2.93 0 0 Z \",fill:\"#45245B\",transform:\"translate(840.9375,99)\"})),_path952||(_path952=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.22 0.11 2.43 0.23 3.69 0.35 C5.51 0.48 5.51 0.48 7.38 0.62 C11.06 1.5 12.42 2.42 14.69 5.41 C14.69 8.15 13.94 9.13 12.12 11.16 C8.65 12.94 5.46 13.08 1.69 12.41 C-1.8 10.5 -4.65 8.37 -7.31 5.41 C-5.11 1.89 -4.23 0.52 0 0 Z \",fill:\"#80719E\",transform:\"translate(765.3125,646.58984375)\"})),_path953||(_path953=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 1.12 1.1 2.24 1.15 3.39 C1.22 4.87 1.3 6.34 1.38 7.81 C1.41 8.55 1.44 9.29 1.47 10.05 C1.67 13.82 1.86 15.8 4 19 C6.33 19.37 8.66 19.71 11 20 C14.22 23.22 13.83 27.43 14.34 31.84 C15.01 35.05 15.83 36.6 18 39 C20.44 38.53 22.81 38.06 25.19 37.31 C26.08 37.16 26.08 37.16 27 37 C27.66 37.66 28.32 38.32 29 39 C28.16 39.28 28.16 39.28 27.31 39.56 C23.93 41.66 22.15 44.71 20 48 C17.62 47.69 17.62 47.69 15 47 C12.59 43.38 12.37 40.21 11.94 36 C11.37 30.42 11.37 30.42 10 25 C7.68 24.28 5.35 23.62 3 23 C0.45 20.45 0.09 18.53 -0.11 14.99 C-0.11 14.29 -0.1 13.6 -0.1 12.89 C-0.09 12.14 -0.09 11.38 -0.09 10.61 C-0.08 9.83 -0.07 9.05 -0.06 8.25 C-0.06 7.46 -0.05 6.66 -0.05 5.85 C-0.04 3.9 -0.02 1.95 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(844,599)\"})),_path954||(_path954=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C0.57 2.89 0.13 3.77 -0.31 4.69 C-4.22 13.39 -4.11 23.44 -3.88 32.81 C-3.76 39.48 -4.02 45.41 -8 51 C-11.75 54.48 -15.9 56.03 -20.75 57.44 C-24.07 58.47 -24.96 58.96 -27.44 61.62 C-29.32 65.68 -30.26 69.61 -31 74 C-31.33 74 -31.66 74 -32 74 C-32.47 67.52 -31.46 62.58 -28 57 C-24.99 54.99 -23.1 54.46 -19.62 53.69 C-14.6 52.38 -12.15 51.1 -9 47 C-7.63 44.26 -8.05 41.83 -8.17 38.83 C-8.46 29.89 -7.68 21.66 -5.69 12.94 C-5.47 11.99 -5.26 11.05 -5.04 10.07 C-3.26 2.83 -3.26 2.83 0 0 Z \",fill:\"#0F1541\",transform:\"translate(1008,1206)\"})),_path955||(_path955=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 1.75 2.06 1.75 4 4 C3.94 5.94 3.94 5.94 3 8 C2.61 8.91 2.22 9.81 1.81 10.75 C0 13 0 13 -2.62 13.69 C-6.13 12.97 -7.54 12.06 -10.38 10 C-13.42 7.83 -15.6 6.51 -19.38 6.31 C-20.57 6.54 -21.77 6.77 -23 7 C-23.47 7.82 -23.95 8.65 -24.44 9.5 C-24.95 10.32 -25.47 11.15 -26 12 C-30.78 12.95 -34.77 12.4 -39 10 C-37 9 -37 9 -33.62 8.75 C-29.83 8.39 -29.83 8.39 -28.12 5.38 C-26 3 -26 3 -24 2.79 C-16.58 3.46 -10.61 6.07 -5 11 C-5.31 10.4 -5.62 9.8 -5.94 9.19 C-7 7 -7 7 -8 4 C-6.86 3.57 -6.86 3.57 -5.69 3.12 C-2.85 2.04 -2.85 2.04 0 0 Z \",fill:\"#755B7D\",transform:\"translate(704,188)\"})),_path956||(_path956=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.41 3.88 C0.11 4.62 -0.19 5.36 -0.5 6.12 C-1.84 9.96 -2.16 12.75 -1.38 16.82 C-0.92 19.46 -0.83 22.07 -0.69 24.75 C-0.34 29.03 -0.34 29.03 2.06 32.56 C2.7 33.04 3.34 33.51 4 34 C4 34.66 4 35.32 4 36 C1.03 36 -1.94 36 -5 36 C-10.28 17.55 -10.28 17.55 -6.36 9.28 C-4.41 6.01 -2.39 2.98 0 0 Z \",fill:\"#381A43\",transform:\"translate(288,1244)\"})),_path957||(_path957=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.36 2.15 3.58 4.17 5 7 C5.66 7.33 6.32 7.66 7 8 C7.82 10.3 8.51 12.52 9.12 14.88 C9.3 15.55 9.48 16.23 9.66 16.92 C11.52 24.44 12.5 31.83 9 39 C8.01 39.49 8.01 39.49 7 40 C6.21 35.92 5.42 31.83 4.62 27.75 C4.4 26.61 4.18 25.47 3.95 24.3 C0 3.83 0 3.83 0 0 Z \",fill:\"#291138\",transform:\"translate(582,1109)\"})),_path958||(_path958=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 2.06 2.44 2.06 4 4 C3.55 5.46 3.09 6.92 2.62 8.38 C2.37 9.19 2.11 10 1.85 10.84 C1 13 1 13 -1 15 C-3.88 15.5 -3.88 15.5 -7 15 C-9.97 11.79 -10.91 9.65 -11.5 5.31 C-11 2 -11 2 -9.44 0 C-5.9 -1.45 -3.66 -0.98 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(320,1003)\"})),_path959||(_path959=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.55 0.72 6.32 2.98 8.94 6.59 C10.83 10.87 9.45 14.73 8 19 C6.35 17.35 4.7 15.7 3 14 C2.67 15.65 2.34 17.3 2 19 C0.35 19.33 -1.3 19.66 -3 20 C-3 17.03 -3 14.06 -3 11 C-3.33 13.31 -3.66 15.62 -4 18 C-4.33 18 -4.66 18 -5 18 C-5.69 10.48 -4.67 5.97 0 0 Z \",fill:\"#7C6E9E\",transform:\"translate(529,409)\"})),_path960||(_path960=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.66 2.05 5.58 4.82 8.02 8.17 C11.07 12.23 14.04 16.07 17.77 19.54 C20.02 21.66 20.61 22.36 21.59 25.42 C21.61 26.1 21.63 26.78 21.65 27.48 C17.12 27 15.19 25.49 12.09 22.23 C11.31 21.42 10.53 20.61 9.73 19.77 C7.59 17.42 5.58 15.01 3.65 12.48 C2.65 11.48 1.65 10.48 0.65 9.48 C-0.43 8.31 -1.49 7.12 -2.54 5.92 C-3.07 5.32 -3.6 4.72 -4.14 4.1 C-5.35 2.48 -5.35 2.48 -5.35 0.48 C-2.35 -0.52 -2.35 -0.52 0 0 Z \",fill:\"#1B0E27\",transform:\"translate(714.3515625,192.51953125)\"})),_path961||(_path961=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.6 0.2 1.21 0.41 1.83 0.62 C3.03 1.03 3.03 1.03 4.25 1.44 C5.04 1.7 5.83 1.97 6.64 2.25 C8.93 3.02 8.93 3.02 11.06 3.44 C13.35 4.1 14.85 5.13 16.75 6.56 C17.67 7.25 17.67 7.25 18.61 7.94 C19.07 8.29 19.53 8.64 20 9 C20.66 8.01 21.32 7.02 22 6 C22.5 7.48 22.5 7.48 23 9 C23.66 9.31 24.32 9.62 25 9.94 C27 11 27 11 27.81 13 C28 15 28 15 27 17 C24.75 17.31 24.75 17.31 22 17 C20 14.81 20 14.81 18 12 C14.04 6.84 10.4 6.15 4.23 5.26 C3.49 5.18 2.76 5.09 2 5 C1.7 5.61 1.4 6.23 1.09 6.86 C-0.46 9.9 -1.9 12.45 -5 14 C-6.65 12.35 -8.3 10.7 -10 9 C-9.09 8.26 -8.19 7.52 -7.25 6.75 C-4.69 4.62 -2.31 2.4 0 0 Z \",fill:\"#3D1C4B\",transform:\"translate(168,1243)\"})),_path962||(_path962=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.58 3.23 -1.16 3.46 -1.76 3.7 C-6.93 5.86 -11.11 7.91 -15 12 C-16.98 17.33 -15.28 22.64 -14 28 C-13.34 28 -12.68 28 -12 28 C-10.54 39.72 -10.54 39.72 -10.27 41.86 C-10.09 43.28 -9.91 44.69 -9.71 46.1 C-8.66 54.01 -8.26 62.16 -10 70 C-10.33 70 -10.66 70 -11 70 C-11.05 69.36 -11.1 68.71 -11.15 68.05 C-11.39 65.07 -11.63 62.1 -11.88 59.12 C-11.95 58.11 -12.03 57.1 -12.11 56.05 C-12.59 50.32 -13.32 44.84 -14.7 39.25 C-15.05 36.62 -14.64 34.56 -14 32 C-14.66 32 -15.32 32 -16 32 C-18.67 16.36 -18.67 16.36 -18 11 C-15.81 8.25 -15.81 8.25 -13 6 C-12.15 5.28 -11.31 4.56 -10.44 3.81 C-6.61 0.97 -4.86 0 0 0 Z \",fill:\"#492F65\",transform:\"translate(630,1086)\"})),_path963||(_path963=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.39 2.91 3.67 5.18 4.02 9.49 C3.99 13.75 2.97 17.61 1.81 21.69 C1.6 22.5 1.39 23.32 1.18 24.16 C-0.98 32.08 -4.56 37.03 -11 42 C-11.66 41.34 -12.32 40.68 -13 40 C-12.71 35.94 -11.34 33.86 -8.69 30.88 C-1.16 21.48 -0.31 11.62 0 0 Z \",fill:\"#7D678F\",transform:\"translate(790,474)\"})),_path964||(_path964=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.78 1.39 3.43 3.34 5 6 C6.26 7.69 7.55 9.36 8.88 11 C9.57 11.88 10.27 12.75 10.99 13.66 C13.03 16.16 13.03 16.16 16 18.5 C19.08 22.35 18.41 26.25 18 31 C16.02 31.99 16.02 31.99 14 33 C12 31.31 12 31.31 10 29 C9.96 27.33 9.96 25.67 10 24 C8.66 21.9 8.66 21.9 7 20 C5.34 16.96 4.12 13.81 2.94 10.56 C2.6 9.64 2.25 8.71 1.9 7.75 C1.06 5.18 0.47 2.67 0 0 Z \",fill:\"#6D4E72\",transform:\"translate(577,355)\"})),_path965||(_path965=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C0.19 7.91 -5.66 16.69 -13 21 C-15.75 20.62 -15.75 20.62 -19 19 C-20.18 18.5 -20.18 18.5 -21.39 17.98 C-26.82 15.55 -29.99 13.16 -33.55 8.44 C-35.95 6.05 -38.75 6.19 -42 6 C-42.33 5.34 -42.66 4.68 -43 4 C-42.34 3.01 -41.68 2.02 -41 1 C-36.51 2.25 -33.41 3.79 -30 7 C-30 7.66 -30 8.32 -30 9 C-29.41 9.18 -28.82 9.36 -28.21 9.55 C-24.65 10.68 -21.49 11.69 -18.31 13.69 C-15.28 15.41 -13.43 15.51 -10 15 C-6.87 12.31 -4.82 9.36 -2.75 5.81 C-2.23 4.93 -1.71 4.05 -1.17 3.14 C0.08 1.26 0.08 1.26 0 0 Z \",fill:\"#472960\",transform:\"translate(566,1192)\"})),_path966||(_path966=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 1.99 3.66 2.98 4 4 C4.77 3.9 5.55 3.81 6.34 3.71 C12.81 3.02 17.81 2.98 24 5 C24 5.66 24 6.32 24 7 C17.82 8.15 11.79 9.05 5.5 9.31 C-1.33 9.74 -6.89 12.02 -13 15 C-11.87 11.6 -10.87 10.95 -8 9 C-8.66 8.34 -9.32 7.68 -10 7 C-8.41 5.8 -6.8 4.62 -5.19 3.44 C-3.85 2.45 -3.85 2.45 -2.48 1.43 C-1.66 0.96 -0.84 0.49 0 0 Z \",fill:\"#624268\",transform:\"translate(1093,1046)\"})),_path967||(_path967=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.49 1.22 6.36 2.83 9.69 6 C7.58 13.31 7.58 13.31 4.69 15 C1.28 15.06 -1.15 14.9 -3.91 12.76 C-6.16 10.33 -7.31 8.66 -7.31 5.31 C-5.51 1.15 -4.74 0 0 0 Z \",fill:\"#0B1240\",transform:\"translate(1009.3125,823)\"})),_path968||(_path968=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46 -0.03 2.92 -0.05 4.38 -0.06 C5.19 -0.07 6 -0.09 6.84 -0.1 C9 0 9 0 11 1 C11.88 3.81 11.88 3.81 12 7 C10.19 9.12 10.19 9.12 8 11 C7.71 11.72 7.42 12.44 7.12 13.19 C6 15 6 15 2.88 15.75 C1.45 15.87 1.45 15.87 0 16 C-2.94 11.01 -3.63 6.66 -4 1 C-3.01 1.33 -2.02 1.66 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(956,717)\"})),_path969||(_path969=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31 0.98 2.63 1.96 3.94 2.94 C4.67 3.48 5.4 4.03 6.15 4.59 C8.96 6.73 8.96 6.73 9.43 9.77 C9.65 11.56 9.65 11.56 9.88 13.38 C11.14 22.53 13.15 30.81 17.23 39.12 C18 41 18 41 18 44 C16.02 44.5 16.02 44.5 14 45 C12 38.91 10.01 32.83 8.02 26.74 C7.34 24.67 6.66 22.59 5.98 20.52 C5.01 17.55 4.03 14.58 3.06 11.6 C2.76 10.67 2.45 9.74 2.13 8.78 C1.85 7.92 1.57 7.06 1.29 6.17 C1.04 5.41 0.79 4.66 0.53 3.87 C0 2 0 2 0 0 Z \",fill:\"#2A1238\",transform:\"translate(868,582)\"})),_path970||(_path970=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.37 6.26 -0.52 12.39 -1.75 18.56 C-2.01 19.86 -2.01 19.86 -2.27 21.17 C-4.18 30.4 -7 39.23 -10.09 48.13 C-11.05 50.92 -11.05 50.92 -11.41 53.57 C-12.14 56.59 -13.49 58.35 -15.38 60.81 C-18.53 65.14 -20.29 68.95 -22 74 C-23.68 77.14 -25.36 79.61 -28 82 C-26.85 77.47 -25.43 73.96 -23 70 C-22.32 68 -21.66 66 -21 64 C-19.42 60.17 -17.77 56.39 -15.77 52.76 C-12.58 46.93 -10.85 41.24 -9.43 34.8 C-8.71 31.57 -7.87 28.71 -6.52 25.69 C-4.56 20.92 -3.74 16.19 -2.88 11.12 C-2.54 9.23 -2.21 7.34 -1.87 5.45 C-1.72 4.62 -1.58 3.79 -1.43 2.93 C-1 1 -1 1 0 0 Z \",fill:\"#311243\",transform:\"translate(436,407)\"})),_path971||(_path971=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.25 2.5 1.25 5 3 C5 4.32 5 5.64 5 7 C6.87 8.61 6.87 8.61 9 10 C9.99 11.49 9.99 11.49 11 13 C11.33 13 11.66 13 12 13 C12 15.97 12 18.94 12 22 C9.69 23.32 7.38 24.64 5 26 C-0.4 13.86 -0.4 13.86 -1 7 C-1.33 6.34 -1.66 5.68 -2 5 C-1.06 2.38 -1.06 2.38 0 0 Z \",fill:\"#7D668E\",transform:\"translate(911,322)\"})),_path972||(_path972=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.9 1.48 5.04 3.4 7 7 C12.39 16.12 20.37 23.55 30 28 C26.05 29.32 24.05 29.06 20 28 C17.08 25.95 14.63 23.52 12.12 21 C11.43 20.32 10.73 19.65 10.01 18.95 C7.99 16.98 5.99 14.99 4 13 C2.99 12 1.97 11 0.96 10 C-1.04 8.02 -3.03 6.02 -5 4 C-4.01 3.67 -3.02 3.34 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#311939\",transform:\"translate(779,259)\"})),_path973||(_path973=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.65 -1.23 4.73 -3.57 7.38 C-4.95 8.94 -6.22 10.55 -7.5 12.19 C-9.96 14.95 -11.58 16.62 -15 18 C-18.34 17.77 -21 17.5 -24 16 C-24 15.34 -24 14.68 -24 14 C-23.34 13.67 -22.68 13.34 -22 13 C-21.63 12.24 -21.26 11.47 -20.88 10.69 C-17.34 5.63 -11.87 4.08 -6 3 C-3.98 2.05 -1.97 1.05 0 0 Z \",fill:\"#45245B\",transform:\"translate(786,179)\"})),_path974||(_path974=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.27 3.41 2.62 6.24 3.19 10.19 C5.7 25.72 9.61 41.58 18 55 C19.49 58.05 20.78 61.06 21.56 64.38 C21.71 64.91 21.85 65.45 22 66 C22.66 66.33 23.32 66.66 24 67 C28 72.53 28 72.53 28 75 C20.25 71.71 17.1 62.49 13.62 55.31 C13.27 54.59 12.91 53.86 12.54 53.12 C10.56 48.9 9.56 45.76 10 41 C9.34 41 8.68 41 8 41 C8 40.34 8 39.68 8 39 C7.34 39 6.68 39 6 39 C2.73 26.19 -0.25 13.31 0 0 Z \",fill:\"#311541\",transform:\"translate(406,888)\"})),_path975||(_path975=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.12 1.94 0.12 4 1 C4.7 2.65 5.37 4.32 6 6 C6.99 6.33 7.98 6.66 9 7 C11.22 11.42 12.3 16.06 12 21 C12.33 21.66 12.66 22.32 13 23 C12.34 23.99 11.68 24.98 11 26 C10.46 25.11 9.93 24.23 9.38 23.31 C7.78 20.88 6.19 19.24 3.88 17.5 C0.68 14.72 0.17 12.96 -1 9 C-1.99 8.67 -2.98 8.34 -4 8 C-3.34 7.67 -2.68 7.34 -2 7 C-1.63 5.01 -1.29 3.01 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#220B37\",transform:\"translate(871,482)\"})),_path976||(_path976=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 5 C2.66 5 3.32 5 4 5 C4 5.66 4 6.32 4 7 C5.05 7.15 5.05 7.15 6.12 7.31 C10.96 8.47 14.14 9.8 17.08 13.93 C17.65 15.04 18.22 16.16 18.81 17.31 C19.69 18.98 19.69 18.98 20.58 20.68 C21.98 23.96 22.88 26.44 23 30 C21.67 32.6 21.67 32.6 19.75 35.06 C17.28 38.29 15.03 41.48 13 45 C12.34 44.67 11.68 44.34 11 44 C12.41 37.3 13.49 32.29 18 27 C18.77 23.05 18.07 20.65 16 17.31 C12.03 12.2 6.17 10.96 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(692,287)\"})),_path977||(_path977=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 5 C2.61 5.15 3.23 5.29 3.86 5.45 C10.51 7.29 10.51 7.29 12.94 10.81 C13.29 11.86 13.64 12.92 14 14 C14.39 15.11 14.78 16.23 15.19 17.38 C15.46 18.24 15.72 19.11 16 20 C20.31 19.52 22.17 18.25 25 15 C24.28 21.01 22.26 26.57 18 31 C16.68 31 15.36 31 14 31 C12.93 28.03 12.03 25.14 11.45 22.04 C10.57 16.16 10.57 16.16 7.25 11.56 C5.13 10.61 5.13 10.61 2 10 C2 9.01 2 8.02 2 7 C1.34 6.34 0.68 5.68 0 5 C-0.12 2.38 -0.12 2.38 0 0 Z \",fill:\"#472961\",transform:\"translate(470,272)\"})),_path978||(_path978=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.58 3.21 5.67 5.13 6 10 C6.06 13 6.06 16 6 19 C5.44 18.48 4.89 17.97 4.31 17.44 C2.08 15.74 2.08 15.74 -0.62 16.19 C-3.15 16.86 -3.15 16.86 -5 19 C-7.31 19.01 -7.31 19.01 -10 18.69 C-10.89 18.59 -11.77 18.49 -12.69 18.39 C-15 18 -15 18 -17 17 C-16.34 15.1 -16.34 15.1 -15 13 C-12.47 12.02 -12.47 12.02 -9.5 11.38 C-5.3 10.54 -5.3 10.54 -2 8 C-1.33 6.03 -1.33 6.03 -0.88 3.88 C-0.59 2.6 -0.3 1.32 0 0 Z \",fill:\"#290E3D\",transform:\"translate(864,261)\"})),_path979||(_path979=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.85 0.62 2.7 1.23 2.54 1.87 C-0.07 16.96 -0.79 33.82 8 47 C7.98 49.26 7.98 49.26 7.62 51.69 C7.46 52.9 7.46 52.9 7.29 54.14 C7.15 55.06 7.15 55.06 7 56 C4.83 51.78 3 47.81 3 43 C1.35 42.34 -0.3 41.68 -2 41 C-1.96 40.05 -1.92 39.1 -1.88 38.12 C-1.86 33.29 -2.94 28.69 -4 24 C-3.34 24 -2.68 24 -2 24 C-2 22.02 -2 20.04 -2 18 C-2.66 18 -3.32 18 -4 18 C-4.51 11.1 -2.87 6.25 0 0 Z \",fill:\"#27103A\",transform:\"translate(537,473)\"})),_path980||(_path980=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.66 0.5 5.71 1.02 8 4 C10.2 10.59 9.79 17.15 6.88 23.44 C4.05 28.5 1.11 30.44 -4 33 C-3.07 27.78 -1.91 23.52 0.56 18.81 C3.27 13.69 3.27 13.69 4 8 C2.15 4.76 2.15 4.76 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7C6E9E\",transform:\"translate(780,475)\"})),_path981||(_path981=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.41 0.5 0.83 0.99 1.25 1.5 C3.12 3.43 3.12 3.43 7 3 C7.33 4.98 7.66 6.96 8 9 C5 10 5 10 2.81 9.06 C2.21 8.71 1.62 8.36 1 8 C1.12 9.42 1.24 10.83 1.38 12.25 C1.44 13.04 1.51 13.83 1.59 14.64 C2.03 17.18 2.53 18.88 4 21 C6.68 21.84 9.17 21.82 12 22 C10.55 25.83 8.57 27.12 5 29 C4.67 28.67 4.34 28.34 4 28 C3.01 28.99 2.02 29.98 1 31 C1 28.36 1 25.72 1 23 C0.34 23 -0.32 23 -1 23 C-2.91 17.9 -4.43 13.54 -4 8 C-3.34 8 -2.68 8 -2 8 C-2.04 7.05 -2.08 6.1 -2.12 5.12 C-2 2 -2 2 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(950,468)\"})),_path982||(_path982=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.58 4.14 2.15 8.28 2.71 12.42 C2.9 13.82 3.09 15.22 3.29 16.62 C4.68 26.49 5.26 36.03 5 46 C0.79 47.85 -2.39 48.18 -7 48 C-6.01 47.5 -6.01 47.5 -5 47 C-4.73 46.18 -4.46 45.35 -4.19 44.5 C-3.8 43.68 -3.4 42.85 -3 42 C-0.38 41.19 -0.38 41.19 2 41 C1.5 39.51 1.5 39.51 1 38 C1 37.67 1 37.34 1 37 C0.01 36.67 -0.98 36.34 -2 36 C-1.34 35.01 -0.68 34.02 0 33 C-0.6 33.21 -1.2 33.41 -1.81 33.62 C-4 34 -4 34 -7 32 C-6.03 31.73 -5.06 31.46 -4.06 31.19 C-3.05 30.8 -2.04 30.4 -1 30 C0.1 26.7 0.11 24.27 0.1 20.8 C0.09 19.59 0.09 18.38 0.09 17.14 C0.08 15.88 0.07 14.61 0.06 13.31 C0.06 12.04 0.05 10.76 0.05 9.45 C0.04 6.3 0.02 3.15 0 0 Z \",fill:\"#31153F\",transform:\"translate(919,210)\"})),_path983||(_path983=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.49 2.49 3.04 4.53 4.12 7.88 C4.48 8.92 4.83 9.97 5.2 11.05 C7.55 20.45 5.76 30.54 4.25 39.94 C4.07 41.07 3.89 42.2 3.71 43.37 C2.44 51.17 0.82 58.6 -2 66 C-2.33 66 -2.66 66 -3 66 C-3.05 63.98 -3.09 61.96 -3.12 59.94 C-3.15 58.81 -3.17 57.69 -3.2 56.53 C-2.98 52.72 -2.08 49.65 -1 46 C2.07 30.54 2.82 15.54 0 0 Z \",fill:\"#381848\",transform:\"translate(365,1031)\"})),_path984||(_path984=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.84 2.26 11.39 5.04 17 7.81 C18.62 8.59 18.62 8.59 20.27 9.39 C25.65 12.05 30.15 14.35 34 19 C33.34 20.32 32.68 21.64 32 23 C23.92 23.64 17.51 21.89 10 19 C10 18.67 10 18.34 10 18 C16.93 18.5 16.93 18.5 24 19 C21.66 14.33 19.28 13.28 14.81 11.12 C9.21 8.29 4.48 5.48 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#311540\",transform:\"translate(814,278)\"})),_path985||(_path985=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.57 1.88 11.23 4.29 14.88 10.19 C17.32 15.07 17.69 18.63 17 24 C16.92 24.65 16.83 25.29 16.75 25.96 C16.44 28.21 16.1 30.45 15.75 32.69 C15.64 33.41 15.53 34.14 15.42 34.88 C14.55 39.83 13.04 43.01 10 47 C9.34 46.67 8.68 46.34 8 46 C8.22 45.4 8.43 44.8 8.66 44.18 C10.94 36.76 11.3 29.8 11.31 22.06 C11.32 20.55 11.32 20.55 11.33 19.01 C11.28 14.19 11.21 10.39 9 6 C6.61 4.89 6.61 4.89 4 4 C1.69 1.88 1.69 1.88 0 0 Z \",fill:\"#6C4E72\",transform:\"translate(614,410)\"})),_path986||(_path986=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.67 2.33 3.34 2.66 3 3 C3.66 3.33 4.32 3.66 5 4 C4.01 5.98 3.02 7.96 2 10 C0.91 9.98 -0.19 9.96 -1.31 9.94 C-4.94 9.81 -4.94 9.81 -8 11 C-7.67 11.66 -7.34 12.32 -7 13 C-19.84 20 -19.84 20 -27 20 C-29.5 19.06 -29.5 19.06 -31 18 C-31 17.67 -31 17.34 -31 17 C-30.05 16.94 -29.1 16.88 -28.12 16.81 C-20.06 15.62 -13.98 11.4 -8.6 5.51 C-6.36 3.39 -3.94 2.77 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#090F36\",transform:\"translate(809,770)\"})),_path987||(_path987=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.41 4.24 -0.32 6.33 -2.19 10.23 C-3.23 13.07 -3.23 13.07 -2.49 16.37 C-1.91 20.7 -2.69 23.23 -4.19 27.31 C-4.61 28.53 -5.04 29.74 -5.48 30.99 C-7.14 34.27 -7.79 34.62 -11 36 C-12.2 37.85 -12.2 37.85 -13 40.06 C-13.34 40.88 -13.67 41.69 -14.02 42.53 C-14.5 43.75 -14.5 43.75 -15 45 C-18.61 53.52 -22.83 61.74 -27 70 C-28.31 66.07 -27.36 65.07 -25.57 61.39 C-25.03 60.25 -24.48 59.12 -23.92 57.95 C-23.63 57.35 -23.34 56.74 -23.03 56.12 C-21.5 52.96 -20 49.78 -18.5 46.59 C-18.2 45.95 -17.9 45.31 -17.59 44.65 C-13.23 35.3 -9.61 25.66 -6 16 C-5.37 14.34 -4.75 12.68 -4.12 11.02 C-2.73 7.35 -1.36 3.68 0 0 Z \",fill:\"#221128\",transform:\"translate(409,471)\"})),_path988||(_path988=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.78 6.06 3.39 11.84 3.75 18.14 C3.89 21.07 3.89 21.07 5 24 C4.78 26.38 4.52 28.75 4.25 31.12 C3.49 39.3 5.31 45.88 7.97 53.55 C9 57 9 57 8 60 C6.79 57.58 5.58 55.15 4.38 52.73 C3.55 51.08 2.69 49.44 1.78 47.84 C-0.94 42.94 -1.55 39.61 -1 34 C-0.33 32.33 0.33 30.67 1 29 C1.44 24.7 1.47 21.71 -1 18 C-1.14 16.01 -1.14 16.01 -0.98 13.77 C-0.92 12.97 -0.87 12.16 -0.82 11.34 C-0.76 10.5 -0.69 9.67 -0.62 8.81 C-0.57 7.97 -0.51 7.12 -0.45 6.25 C-0.31 4.17 -0.16 2.08 0 0 Z \",fill:\"#341546\",transform:\"translate(936,425)\"})),_path989||(_path989=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.59 4.02 5.16 8.06 6.7 12.1 C7.23 13.47 7.76 14.84 8.3 16.2 C11.91 25.29 13.74 33.1 13 43 C12.97 43.86 12.95 44.72 12.92 45.61 C12.52 58.43 9.64 68.98 3 80 C2.01 80.5 2.01 80.5 1 81 C1.41 79.8 1.83 78.61 2.25 77.38 C2.84 75.58 3.42 73.79 4 72 C4.32 71.03 4.65 70.06 4.98 69.06 C7.3 61.64 8.72 54.31 9.81 46.62 C10.02 45.23 10.02 45.23 10.22 43.82 C11.58 33.52 9.83 26.83 5.5 17.44 C2.82 11.59 0.5 6.45 0 0 Z \",fill:\"#846C8C\",transform:\"translate(830,591)\"})),_path990||(_path990=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.76 6.39 -0.03 8.86 -3 12 C-6 14.03 -8.4 14.38 -12 14 C-14 12 -14 12 -14.44 9.25 C-13.83 4.75 -12.15 3.22 -9 0 C-5.88 -1.56 -3.34 -0.66 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(824,538)\"})),_path991||(_path991=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.7 4.05 3.16 7.18 3.25 12 C3.28 12.85 3.3 13.69 3.33 14.56 C2.93 17.51 2 18.83 0 21 C-0.66 21.33 -1.32 21.66 -2 22 C-1.34 23.65 -0.68 25.3 0 27 C-0.99 27.99 -1.98 28.98 -3 30 C-3.33 29.01 -3.66 28.02 -4 27 C-6.31 27.33 -8.62 27.66 -11 28 C-12.65 25.69 -14.3 23.38 -16 21 C-15.01 21.23 -14.02 21.45 -13 21.69 C-9.92 21.69 -9.07 21.06 -6.79 18.9 C-2.03 12.79 0.27 7.79 0 0 Z \",fill:\"#280F3B\",transform:\"translate(913,480)\"})),_path992||(_path992=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.75 0.88 5.75 0.88 8 2 C8 2.66 8 3.32 8 4 C8.57 4.17 9.14 4.34 9.72 4.52 C14.93 6.15 19.35 8.13 24 11 C24 11.33 24 11.66 24 12 C12.38 12.24 1.02 12.04 -10 8 C-8 6 -8 6 -5.5 5.77 C-4.05 5.79 -4.05 5.79 -2.56 5.81 C-1.59 5.82 -0.63 5.83 0.37 5.83 C3 6 3 6 6 7 C6 6.34 6 5.68 6 5 C0.06 4.01 0.06 4.01 -6 3 C-6 2.67 -6 2.34 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(649,296)\"})),_path993||(_path993=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.47 0.52 9.6 1.93 14.5 4.38 C15.76 4.99 17.02 5.6 18.28 6.21 C19.21 6.66 19.21 6.66 20.15 7.12 C28.38 11.05 35.8 13.02 45 12 C47.27 11.07 49.21 10.03 51.25 8.68 C53 8 53 8 55.22 8.88 C56.1 9.44 56.1 9.44 57 10 C56.4 10.25 55.8 10.49 55.19 10.75 C52.88 11.85 52.88 11.85 51.66 14.05 C50 16 50 16 47.83 16.5 C47 16.5 46.18 16.5 45.32 16.5 C44.41 16.5 43.5 16.5 42.56 16.5 C41.62 16.48 40.67 16.46 39.69 16.44 C38.28 16.45 38.28 16.45 36.85 16.46 C31.44 16.41 27.72 15.89 23 13 C20.76 12.31 20.76 12.31 19 12 C19 11.34 19 10.68 19 10 C18.36 9.75 17.72 9.51 17.06 9.25 C13 7.59 9 5.8 5 4 C5 3.34 5 2.68 5 2 C3.35 1.67 1.7 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#341446\",transform:\"translate(233,1142)\"})),_path994||(_path994=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.66 2.66 3.24 5.58 4.19 9.12 C4.37 9.8 4.55 10.47 4.74 11.17 C6 16.22 6.23 19.98 5 25 C3.38 25.81 3.38 25.81 1 26 C-2.12 23.62 -2.12 23.62 -5 21 C-5.66 20.67 -6.32 20.34 -7 20 C-7 19.34 -7 18.68 -7 18 C-7.66 17.67 -8.32 17.34 -9 17 C-8.03 16.44 -7.06 15.89 -6.06 15.31 C-2.88 13.35 -2.88 13.35 -2.12 10.62 C-1.99 7.74 -1.93 4.88 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2C123E\",transform:\"translate(1231,894)\"})),_path995||(_path995=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-3.32 4.11 -4.67 3.77 -8 3 C-8.66 3 -9.32 3 -10 3 C-9.48 8.3 -7.67 11.51 -5 16 C-5 16.66 -5 17.32 -5 18 C-4.01 18.33 -3.02 18.66 -2 19 C-0.98 20.65 0.02 22.32 1 24 C1.97 25.07 2.95 26.14 3.94 27.19 C8.01 31.81 11 37.77 11 44 C10.34 42.68 9.68 41.36 9 40 C8.34 40 7.68 40 7 40 C6.92 39.22 6.84 38.43 6.75 37.62 C6.5 36.76 6.25 35.89 6 35 C5.38 34.7 4.77 34.4 4.13 34.09 C1.53 32.76 0.68 31.45 -0.88 29 C-1.64 27.8 -1.64 27.8 -2.42 26.57 C-2.94 25.72 -3.46 24.87 -4 24 C-4.53 23.16 -5.06 22.33 -5.61 21.46 C-14.02 7.96 -14.02 7.96 -13 1 C-9.05 -2.95 -4.72 -2.36 0 0 Z \",fill:\"#411E4E\",transform:\"translate(759,199)\"})),_path996||(_path996=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.51 5.12 13.25 11.51 17 19 C17.13 21.67 17.04 24.32 17 27 C14.2 27 12.51 26.49 10.47 24.54 C4.72 17.37 2.33 8.75 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(857,161)\"})),_path997||(_path997=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.41 2.05 7.73 4.95 11.38 8.12 C12.05 8.71 12.72 9.29 13.41 9.89 C17.96 13.9 21.6 17.95 25 23 C25.66 23.33 26.32 23.66 27 24 C27 24.66 27 25.32 27 26 C21.81 25.75 19.13 24.79 15.52 21 C15.04 20.46 14.56 19.93 14.06 19.38 C13.03 18.27 11.99 17.17 10.96 16.08 C10.46 15.55 9.96 15.01 9.44 14.47 C7.52 12.51 5.41 10.83 3.25 9.12 C0.41 6.73 0.06 6.43 -0.5 2.56 C-0.34 1.72 -0.17 0.87 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(645,124)\"})),_path998||(_path998=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.03 0.93 4.04 1.93 6 3 C5.01 3.5 5.01 3.5 4 4 C4.11 5.96 4.11 5.96 5 8 C8.3 9.78 10.18 10 14 10 C14.33 8.68 14.66 7.36 15 6 C17 8 17 8 17 12 C17.66 10.68 18.32 9.36 19 8 C21 10 21 10 21.12 12.62 C21.08 13.41 21.04 14.19 21 15 C20.24 15.29 19.47 15.58 18.69 15.88 C15.85 16.96 15.85 16.96 13 19 C13.99 20.65 14.98 22.3 16 24 C13.06 22.61 10.45 21.03 7.81 19.12 C7.12 18.63 6.42 18.14 5.71 17.63 C3.77 15.78 3.38 14.62 3 12 C3.66 12.33 4.32 12.66 5 13 C3.83 10.12 2.65 8.66 0.38 6.44 C-2 4 -2 4 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#311540\",transform:\"translate(711,84)\"})),_path999||(_path999=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.39 3.39 4.75 6.32 5.11 11.13 C4.81 19.11 3.24 27.7 0 35 C-0.66 35 -1.32 35 -2 35 C-2.84 29.22 -3 24.15 -2.25 18.36 C-1.79 14 -2.12 10.27 -3 6 C-3 4.68 -3 3.36 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z M-2 26 C-1 29 -1 29 -1 29 Z \",fill:\"#2E1736\",transform:\"translate(281,1012)\"})),_path1000||(_path1000=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.93 4.44 -2.8 6.8 -5 9 C-7.4 11.92 -9.68 14.91 -11.94 17.94 C-12.96 19.29 -13.98 20.65 -15 22 C-15.44 22.6 -15.87 23.2 -16.32 23.81 C-18.34 26.46 -19.59 27.87 -22.81 28.88 C-23.53 28.92 -24.26 28.96 -25 29 C-27.16 24.69 -26.13 19.51 -25 15 C-24.91 12.33 -24.96 9.68 -25 7 C-25 6.01 -25 5.02 -25 4 C-24.34 4.33 -23.68 4.66 -23 5 C-22.52 7.54 -22.16 10 -21.88 12.56 C-21.79 13.27 -21.7 13.98 -21.61 14.72 C-21.4 16.48 -21.2 18.24 -21 20 C-17.45 18.04 -14.88 16.07 -12.25 13 C-11.66 12.32 -11.06 11.64 -10.45 10.94 C-8.81 8.96 -8.81 8.96 -8 6 C-6.15 4.39 -6.15 4.39 -3.94 2.81 C-3.2 2.28 -2.47 1.75 -1.71 1.21 C-1.15 0.81 -0.58 0.41 0 0 Z \",fill:\"#311144\",transform:\"translate(527,167)\"})),_path1001||(_path1001=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.78 1.53 5.85 3.82 8.5 6.88 C11.7 10.55 11.7 10.55 15.14 14 C17.25 16.27 18.16 18.24 19.25 21.12 C19.59 21.99 19.92 22.86 20.27 23.76 C21 26 21 26 21 28 C21.56 28.23 22.11 28.45 22.69 28.69 C25.7 30.39 27.63 32.47 30 35 C30.63 35.66 31.26 36.32 31.91 37 C32.88 38.05 32.88 38.05 33.88 39.12 C34.49 39.79 35.11 40.45 35.74 41.13 C36.16 41.75 36.57 42.37 37 43 C36.67 43.99 36.34 44.98 36 46 C29.76 39.86 23.67 33.68 18 27 C17.44 26.38 16.89 25.77 16.31 25.13 C12.2 20.54 12.2 20.54 11 17.38 C9.77 14.46 7.92 13.28 5.46 11.39 C2.28 8.36 1.36 4.08 0 0 Z \",fill:\"#391948\",transform:\"translate(669,90)\"})),_path1002||(_path1002=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 0.76 7.94 1.56 10.71 5.32 C12.56 8.99 14 11.85 14 16 C12.46 16.23 10.92 16.43 9.38 16.62 C8.09 16.8 8.09 16.8 6.77 16.98 C3.47 17 1.12 16.05 -2 15 C-4.65 14.72 -7.22 14.5 -9.88 14.38 C-10.91 14.32 -10.91 14.32 -11.96 14.26 C-13.64 14.16 -15.32 14.08 -17 14 C-17 13.34 -17 12.68 -17 12 C-16.3 12.01 -15.6 12.02 -14.88 12.04 C-9.14 12.09 -3.67 11.86 2 11 C2.33 8.69 2.66 6.38 3 4 C2.01 3.34 1.02 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#290E3D\",transform:\"translate(733,59)\"})),_path1003||(_path1003=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.06 0.55 5.97 1.6 8.93 4.4 C8.93 5.06 8.93 5.72 8.93 6.4 C9.73 6.69 10.54 6.98 11.37 7.27 C13.93 8.4 13.93 8.4 14.93 10.4 C11.44 9.29 8.15 8.14 4.93 6.4 C4.93 7.06 4.93 7.72 4.93 8.4 C3.61 8.73 2.29 9.06 0.93 9.4 C0.93 8.74 0.93 8.08 0.93 7.4 C-4.6 6.67 -8.1 8.71 -12.8 11.3 C-15.07 12.4 -15.07 12.4 -18.07 12.4 C-16.93 8.98 -15.4 7.13 -13.07 4.4 C-12.49 3.7 -11.9 2.99 -11.3 2.27 C-7.74 -0.72 -4.48 -0.14 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(909.0703125,731.6015625)\"})),_path1004||(_path1004=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.52 5.98 0.02 8.68 -3.75 13.32 C-5.51 15.68 -6.24 18.19 -7 21 C-8.95 20.35 -8.95 20.35 -11 19 C-11.61 16.4 -11.61 16.4 -11.75 13.38 C-11.81 12.37 -11.86 11.37 -11.92 10.34 C-11.95 9.57 -11.97 8.79 -12 8 C-12.99 7.67 -13.98 7.34 -15 7 C-15 6.34 -15 5.68 -15 5 C-13.07 3.97 -11.13 2.95 -9.19 1.94 C-8.11 1.37 -7.03 0.8 -5.92 0.21 C-3 -1 -3 -1 0 0 Z \",fill:\"#67486D\",transform:\"translate(611,283)\"})),_path1005||(_path1005=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 5 4 C6.64 5.05 8.31 6.04 10 7 C11.49 8.02 11.49 8.02 13 9.06 C15.84 11.04 15.84 11.04 18.62 12 C21.46 13.19 23.03 14.66 25 17 C25 17.66 25 18.32 25 19 C25.99 19.33 26.98 19.66 28 20 C28.99 20.33 29.98 20.66 31 21 C30.67 21.99 30.34 22.98 30 24 C25.71 22.35 21.42 20.7 17 19 C17.99 20.98 18.98 22.96 20 25 C19.67 25.66 19.34 26.32 19 27 C3.12 6.61 3.12 6.61 0 0 Z \",fill:\"#381A43\",transform:\"translate(813,193)\"})),_path1006||(_path1006=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.99 2.66 1.98 3 3 C2.67 3.66 2.34 4.32 2 5 C2.66 5 3.32 5 4 5 C4 4.34 4 3.68 4 3 C4.66 3 5.32 3 6 3 C5.43 7.45 4.23 11.4 2.75 15.61 C1.75 18.78 1.17 21.98 0.62 25.25 C0.42 25.83 0.21 26.4 0 27 C-0.99 27.33 -1.98 27.66 -3 28 C-4.02 29.87 -4.02 29.87 -4.69 32.06 C-4.94 32.8 -5.19 33.53 -5.45 34.29 C-5.63 34.85 -5.81 35.42 -6 36 C-6.66 35.67 -7.32 35.34 -8 35 C-7.36 31.87 -6.71 28.75 -6.06 25.62 C-5.88 24.74 -5.7 23.85 -5.51 22.93 C-5.33 22.08 -5.16 21.23 -4.97 20.35 C-4.81 19.57 -4.65 18.78 -4.48 17.97 C-4 16 -4 16 -3 14 C-2.64 12.01 -2.31 10 -2 8 C-1.11 2.22 -1.11 2.22 0 0 Z \",fill:\"#090F36\",transform:\"translate(988,824)\"})),_path1007||(_path1007=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.45 1.83 7.45 1.83 10 5 C12.64 11.36 11.88 16.64 9.81 23 C9.58 23.78 9.34 24.56 9.1 25.37 C8.42 27.59 7.72 29.79 7 32 C6.67 33.04 6.33 34.09 5.99 35.16 C5.35 37.12 4.68 39.06 4 41 C5.98 40.5 5.98 40.5 8 40 C8 40.99 8 41.98 8 43 C3.25 44.12 3.25 44.12 1 43 C1.6 39.93 2.25 36.87 2.94 33.81 C3.11 33.03 3.28 32.26 3.46 31.45 C3.82 29.82 4.19 28.18 4.57 26.55 C5.85 20.8 7.07 14.86 6 9 C3.69 6.1 3.69 6.1 1 4 C0.19 1.69 0.19 1.69 0 0 Z \",fill:\"#38154A\",transform:\"translate(272,769)\"})),_path1008||(_path1008=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.81 0.08 1.62 0.17 2.46 0.25 C8.43 0.93 8.43 0.93 10.69 3.19 C11.27 6.8 10.85 7.97 8.69 11 C8.03 11.72 7.37 12.44 6.69 13.19 C2.23 11.21 2.23 11.21 -2.31 9.19 C-2.29 8.22 -2.27 7.25 -2.25 6.25 C-1.96 3.31 -1.96 3.31 -3.31 2.19 C-9.29 1.77 -12.96 2.51 -18.31 5.19 C-18.31 8.16 -18.31 11.13 -18.31 14.19 C-20.38 12.5 -20.38 12.5 -22.31 10.19 C-22.4 6.64 -21.36 5.25 -19.19 2.44 C-13.51 -2 -6.76 -0.81 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(583.3125,434.8125)\"})),_path1009||(_path1009=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 1.62 6.05 3.63 9 6 C10.36 6.65 10.36 6.65 11.75 7.31 C14 9 14 9 14.75 12.25 C14.87 14.11 14.87 14.11 15 16 C15.16 17.09 15.33 18.19 15.5 19.31 C15.66 20.53 15.83 21.75 16 23 C16.25 24.2 16.25 24.2 16.5 25.42 C17.61 31.95 17.61 31.95 15.73 35.2 C14.23 36.93 12.72 38.5 11 40 C10.34 39.67 9.68 39.34 9 39 C9.83 38.34 10.65 37.68 11.5 37 C14.04 33.95 14.86 32.3 14.63 28.32 C13.17 22.94 9.55 17.3 5.41 13.56 C3.33 11.26 2.73 8.75 1.81 5.81 C1.47 4.73 1.12 3.64 0.77 2.52 C0.52 1.69 0.26 0.86 0 0 Z \",fill:\"#7D5C7B\",transform:\"translate(712,296)\"})),_path1010||(_path1010=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.03 1.72 4.22 4.04 5.88 7.06 C6.62 10.44 6.62 10.44 6.88 13.06 C5.23 14.38 3.57 15.7 1.88 17.06 C-2.55 15.71 -4.68 14 -7.12 10.06 C-7.88 6.25 -7.88 6.25 -8.12 3.06 C-2.88 0.08 -2.88 0.08 0 0 Z \",fill:\"#241038\",transform:\"translate(333.125,1225.9375)\"})),_path1011||(_path1011=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 2.81 3.31 C3.8 6.15 3.8 6.15 6.33 7.69 C9.73 10.63 11.06 13.65 12.88 17.69 C15.9 24.11 19.25 29.66 24 35 C23.67 35.66 23.34 36.32 23 37 C11.81 31.19 6.68 20.34 2 9 C1.59 8.07 1.17 7.14 0.75 6.19 C0 4 0 4 0 0 Z \",fill:\"#281138\",transform:\"translate(108,1195)\"})),_path1012||(_path1012=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5.08 3.11 5.16 4.23 5.25 5.38 C5.58 9.06 5.58 9.06 8.06 10.44 C8.7 10.62 9.34 10.81 10 11 C10.38 14.31 10.1 15.82 8.44 18.75 C5.33 21.62 3.16 21.84 -1 22 C-2 21 -2 21 -2.19 17.19 C-2.14 11.36 -1.08 5.72 0 0 Z \",fill:\"#593960\",transform:\"translate(517,388)\"})),_path1013||(_path1013=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.68 0.33 1.36 0.66 2.06 1 C2.39 3.97 2.72 6.94 3.06 10 C-2.55 10 -8.16 10 -13.94 10 C-13.94 2 -13.94 2 -12.38 0 C-8.08 -1.76 -4.35 -1.48 0 0 Z \",fill:\"#44214F\",transform:\"translate(277.9375,1270)\"})),_path1014||(_path1014=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C1.07 5.19 2.14 5.39 3.25 5.59 C4.64 5.85 6.04 6.11 7.44 6.38 C8.14 6.5 8.85 6.63 9.58 6.76 C11.4 7.11 13.2 7.55 15 8 C15.33 8.66 15.66 9.32 16 10 C15.07 10.25 14.14 10.49 13.19 10.75 C9.92 11.68 9.92 11.68 8.56 14.12 C7 16 7 16 3.69 16.56 C-1.07 15.84 -2.61 14.31 -6 11 C-5.34 7.7 -4.68 4.4 -4 1 C-1 0 -1 0 0 0 Z \",fill:\"#38154A\",transform:\"translate(222,1165)\"})),_path1015||(_path1015=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.94 4.04 2.19 7.91 2.32 12.05 C2.34 12.71 2.36 13.37 2.38 14.05 C2.44 16.14 2.5 18.22 2.56 20.31 C2.61 21.74 2.65 23.16 2.69 24.58 C2.8 28.05 2.9 31.53 3 35 C2.67 34.34 2.34 33.68 2 33 C1.01 32.67 0.02 32.34 -1 32 C-1.73 30.07 -1.73 30.07 -2.19 27.69 C-2.35 26.91 -2.5 26.13 -2.67 25.32 C-3 23 -3 23 -3 19 C-3.99 18.67 -4.98 18.34 -6 18 C-5.66 10.76 -3.9 6.08 0 0 Z \",fill:\"#30163E\",transform:\"translate(841,327)\"})),_path1016||(_path1016=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.58 1.4 2.15 1.8 1.71 2.21 C-6.45 10.13 -15.73 20.17 -17 32 C-16.48 34.98 -16.48 34.98 -15.56 38 C-14.48 41.81 -13.82 45.03 -14 49 C-14.66 49 -15.32 49 -16 49 C-16.33 46.03 -16.66 43.06 -17 40 C-17.66 40 -18.32 40 -19 40 C-21.04 35.07 -22.41 31.42 -22 26 C-21.01 26 -20.02 26 -19 26 C-18.9 25.42 -18.79 24.85 -18.69 24.25 C-17.89 21.64 -16.65 20.16 -15 18 C-14.29 16.55 -14.29 16.55 -13.56 15.06 C-10.48 9.03 -5.67 3.75 0 0 Z \",fill:\"#3D1D49\",transform:\"translate(297,1231)\"})),_path1017||(_path1017=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.92 0.43 7.45 2.69 11 6 C11.99 7.49 11.99 7.49 13 9 C13.99 9.33 14.98 9.66 16 10 C16 10.66 16 11.32 16 12 C22.69 13.04 27.71 13.21 34.05 10.7 C36.43 9.84 38.49 9.76 41 10 C41 10.66 41 11.32 41 12 C41.66 12.33 42.32 12.66 43 13 C41.71 13.36 40.42 13.71 39.12 14.06 C38.05 14.36 38.05 14.36 36.95 14.66 C35 15 35 15 33 14 C33 14.66 33 15.32 33 16 C28.32 18.49 25.06 17.86 20 17 C20.66 16.34 21.32 15.68 22 15 C20.76 15.08 19.53 15.16 18.25 15.25 C14.89 15.27 14.25 15.2 11.5 13 C11 12.34 10.51 11.68 10 11 C9.01 11.33 8.02 11.66 7 12 C6.59 11.13 6.18 10.27 5.75 9.38 C4.02 6.04 2.13 3.08 0 0 Z \",fill:\"#381A43\",transform:\"translate(213,918)\"})),_path1018||(_path1018=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.81 2.44 0.81 5 2 C6.11 5.34 5.84 6.52 5.06 9.88 C4.26 13.34 3.89 16.44 4 20 C5.32 20.66 6.64 21.32 8 22 C7.67 22.99 7.34 23.98 7 25 C4.03 25.33 1.06 25.66 -2 26 C-2 25.01 -2 24.02 -2 23 C-2.66 23 -3.32 23 -4 23 C-3.3 17.82 -2.42 12.7 -1.44 7.56 C-1.3 6.83 -1.16 6.1 -1.02 5.35 C-0.68 3.56 -0.34 1.78 0 0 Z \",fill:\"#2C1F31\",transform:\"translate(848,420)\"})),_path1019||(_path1019=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.92 0.53 8.63 2.15 12.88 4.56 C14.19 5.29 15.5 6.01 16.82 6.73 C17.5 7.1 18.18 7.48 18.88 7.86 C23.13 10.15 27.47 12.26 31.81 14.39 C39.62 18.24 39.62 18.24 41.25 21.5 C42 24 42 24 41 26 C40.34 26 39.68 26 39 26 C38.44 25.44 37.89 24.89 37.32 24.31 C34.44 21.44 31.31 19.26 27.94 17 C27.28 16.56 26.61 16.11 25.93 15.65 C21.24 12.6 16.66 10.49 11.31 8.79 C6.4 7.11 2.83 4.4 0 0 Z \",fill:\"#27122E\",transform:\"translate(1159,668)\"})),_path1020||(_path1020=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.37 2.79 2.37 2.79 2.75 4.62 C4.15 10.72 7.93 14.23 12.56 18.19 C17.78 20.94 23.34 22.42 29 24 C29 24.66 29 25.32 29 26 C20.26 26.48 12.92 24.57 6 19 C0.64 13.93 -2.26 9.17 -4 2 C-3.01 2.33 -2.02 2.66 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#1C1420\",transform:\"translate(586,606)\"})),_path1021||(_path1021=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 0.35 2.1 0.7 3.19 1.06 C6.95 1.99 8.37 1.76 12 1 C14.5 1.88 14.5 1.88 17 3 C17.78 3.14 18.57 3.29 19.38 3.44 C22 4 22 4 25.38 5.62 C29.48 7.18 31.78 6.95 36 6 C35.62 7.94 35.62 7.94 35 10 C34.34 10.33 33.68 10.66 33 11 C33.99 11.99 34.98 12.98 36 14 C33.09 14.81 31.54 15.22 28.69 14.06 C28.13 13.71 27.57 13.36 27 13 C27 12.34 27 11.68 27 11 C26.42 10.91 25.83 10.83 25.23 10.74 C16.22 9.19 7.68 6.02 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#391A48\",transform:\"translate(1015,597)\"})),_path1022||(_path1022=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91 0.31 1.82 0.62 2.75 0.94 C7.25 2.26 11.77 2.42 16.43 2.66 C19 3 19 3 21 5 C20.83 8.19 20.15 9.79 18.25 12.38 C16 14 16 14 13.69 13.94 C12.8 13.63 11.91 13.32 11 13 C9.78 12.63 8.57 12.26 7.31 11.88 C4 10 4 10 2.69 6.38 C2.46 5.26 2.23 4.15 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#846F90\",transform:\"translate(610,384)\"})),_path1023||(_path1023=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.44 2.71 15.61 2.38 23.44 2.62 C19.17 5.47 15.58 4.68 10.57 4.5 C7.44 4.62 6.09 5.11 3.44 6.62 C2.09 6.95 0.74 7.24 -0.62 7.5 C-3.36 8.16 -4.4 8.47 -6.5 10.44 C-7.66 12.84 -8.2 14.99 -8.56 17.62 C-11.43 14.76 -11.77 12.09 -11.94 8.19 C-11.91 4.53 -11.85 3.94 -9.25 1.12 C-4.28 -1.65 -4.28 -1.65 0 0 Z \",fill:\"#705275\",transform:\"translate(562.5625,262.375)\"})),_path1024||(_path1024=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.26 7.58 2.88 14.53 1.69 22.06 C1.49 23.31 1.49 23.31 1.29 24.59 C0.64 28.43 0.21 30.68 -2 34 C-2.45 36.05 -2.45 36.05 -2.62 38.19 C-2.75 39.45 -2.87 40.7 -3 42 C-4.32 41.01 -5.64 40.02 -7 39 C-6.15 30.95 -5.32 23.23 -2.73 15.53 C-1.27 10.47 -0.69 5.21 0 0 Z \",fill:\"#230F38\",transform:\"translate(433,819)\"})),_path1025||(_path1025=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.57 6.45 -2.01 10.23 -5.38 14.62 C-6.16 15.67 -6.16 15.67 -6.97 16.73 C-10.58 21.4 -14.4 25.76 -18.56 29.94 C-19.06 30.44 -19.56 30.94 -20.08 31.46 C-22.38 33.69 -23.92 34.97 -27 36 C-26.59 31.11 -24.18 28.6 -20.88 25.25 C-19.87 24.19 -18.86 23.13 -17.86 22.07 C-17.36 21.55 -16.87 21.03 -16.37 20.49 C-13.91 17.82 -11.75 14.93 -9.56 12.04 C-7.56 9.43 -5.43 6.97 -3.26 4.51 C-1.8 2.81 -1.8 2.81 0 0 Z \",fill:\"#301839\",transform:\"translate(284,711)\"})),_path1026||(_path1026=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.32 1.72 2.93 2.55 3.38 5.44 C2.93 8.47 1.95 9.68 0 12 C-0.31 12.7 -0.62 13.4 -0.94 14.12 C-2.26 16.46 -3.55 17.02 -6 18 C-6.66 15.69 -7.32 13.38 -8 11 C-8.66 11 -9.32 11 -10 11 C-10 10.01 -10 9.02 -10 8 C-10.66 7.67 -11.32 7.34 -12 7 C-9.52 1.9 -5.91 -1.97 0 0 Z \",fill:\"#5E4365\",transform:\"translate(880,423)\"})),_path1027||(_path1027=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.62 0.37 1.24 0.74 1.88 1.12 C2.87 1.12 3.86 1.12 4.88 1.12 C4.88 2.12 4.88 3.11 4.88 4.12 C5.53 4.12 6.2 4.12 6.88 4.12 C6.88 4.79 6.88 5.44 6.88 6.12 C7.53 6.12 8.2 6.12 8.88 6.12 C9.53 5.46 10.2 4.81 10.88 4.12 C10.96 5.73 11.01 7.33 11.06 8.94 C11.11 10.28 11.11 10.28 11.17 11.64 C10.88 14.12 10.88 14.12 9.49 15.95 C7.88 17.12 7.88 17.12 5.88 17.12 C5.22 13.17 4.55 9.2 3.88 5.12 C2.88 5.62 2.88 5.62 1.88 6.12 C1.88 8.11 1.88 10.08 1.88 12.12 C-5 11.25 -5 11.25 -6.12 10.12 C-5.95 7.43 -5.51 4.8 -5.12 2.12 C-5.78 1.8 -6.45 1.46 -7.12 1.12 C-2.67 -1.1 -2.67 -1.1 0 0 Z \",fill:\"#1D1521\",transform:\"translate(531.125,352.875)\"})),_path1028||(_path1028=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.35 0.84 2.35 0.84 5 3 C6.27 6.42 6.8 9.91 7.38 13.5 C7.64 14.94 7.64 14.94 7.91 16.42 C9.15 23.54 9.15 23.54 8 27 C5.94 28.69 5.94 28.69 4 30 C2 29 2 29 0.89 25.73 C0.53 24.36 0.17 22.99 -0.19 21.62 C-0.38 20.94 -0.57 20.25 -0.76 19.55 C-1.65 16.18 -2.12 14.37 -1 11 C0.32 10.34 1.64 9.68 3 9 C2.01 6.03 1.02 3.06 0 0 Z \",fill:\"#311939\",transform:\"translate(853,330)\"})),_path1029||(_path1029=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.9 2.15 2.9 2.15 3.81 2.31 C7.19 3.37 8.53 5.13 10.19 8.19 C10.46 8.79 10.72 9.38 11 10 C12.98 10 14.96 10 17 10 C17.12 13.38 17.12 13.38 17 17 C16.34 17.66 15.68 18.32 15 19 C11.47 18.68 8.37 18.12 5 17 C3.88 11.25 3.88 11.25 5 9 C4.34 9 3.68 9 3 9 C3 9.66 3 10.32 3 11 C2.34 10.67 1.68 10.34 1 10 C0.33 7.97 0.33 7.97 -0.19 5.5 C-0.37 4.69 -0.55 3.87 -0.73 3.03 C-0.82 2.36 -0.91 1.69 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(1210,791)\"})),_path1030||(_path1030=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.33 -0.04 4.67 -0.04 7 0 C7.33 0.33 7.66 0.66 8 1 C9.85 1.07 11.71 1.08 13.56 1.06 C14.57 1.05 15.59 1.04 16.63 1.04 C17.41 1.02 18.19 1.01 19 1 C18.67 1.66 18.34 2.32 18 3 C15.06 3.63 15.06 3.63 11.44 4.12 C10.24 4.29 9.04 4.46 7.81 4.63 C6.88 4.75 5.95 4.88 5 5 C5.66 6.65 6.32 8.3 7 10 C6.36 10.72 5.72 11.44 5.06 12.19 C3.01 14.98 2.39 16.62 2 20 C1.01 19.67 0.02 19.34 -1 19 C-2.06 15.81 -2.06 15.81 -3 12 C-3.66 10 -4.32 8 -5 6 C-4.01 6 -3.02 6 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#311244\",transform:\"translate(589,635)\"})),_path1031||(_path1031=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.57 6.43 -0.94 12.3 -4 18 C-6.14 19.32 -6.14 19.32 -8 20 C-10.78 15.83 -10.93 11.94 -11 7 C-10.25 3.78 -9.47 2.48 -7.19 0.12 C-4.38 -1.32 -2.95 -0.9 0 0 Z \",fill:\"#50356A\",transform:\"translate(497,259)\"})),_path1032||(_path1032=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.49 -0.44 4.75 -0.17 7.68 1.9 C8.98 3.12 8.98 3.12 10.31 4.38 C11.2 5.19 12.08 6 12.99 6.84 C15 9 15 9 15 11 C15.56 11.23 16.11 11.45 16.69 11.69 C19 13 19 13 21.19 15.25 C23.59 17.6 25.71 19.2 28.5 21 C33.59 24.3 37.5 28.03 41 33 C40.34 33.66 39.68 34.32 39 35 C35.73 32.89 34.82 31.74 34 28 C32.32 25.79 30.89 24.95 28.35 23.77 C24.38 21.67 21.1 19.12 17.62 16.31 C16.98 15.8 16.34 15.29 15.68 14.76 C14.12 13.51 12.56 12.26 11 11 C11.33 12.65 11.66 14.3 12 16 C7.17 11.61 3.52 6.48 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#2A1238\",transform:\"translate(835,219)\"})),_path1033||(_path1033=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 1.65 3.32 3.3 4 5 C4.66 5 5.32 5 6 5 C5.88 6.42 5.76 7.83 5.62 9.25 C5.56 10.04 5.49 10.83 5.41 11.64 C4.98 14.13 4.34 15.86 3 18 C0.62 19 0.62 19 -2 19 C-6.11 16.18 -6.91 12.71 -8 8 C-7.05 7.42 -6.1 6.85 -5.12 6.25 C-2.24 4.17 -1.16 3.25 0 0 Z \",fill:\"#3C194D\",transform:\"translate(437,975)\"})),_path1034||(_path1034=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.16 0.35 2.16 0.35 4 1 C4.75 3.39 5.48 5.78 6.19 8.19 C6.51 9.2 6.51 9.2 6.84 10.23 C7.87 13.82 8.21 15.55 6.61 18.99 C5.81 19.98 5.81 19.98 5 21 C2.5 19.69 2.5 19.69 0 18 C0 17.01 0 16.02 0 15 C-0.66 15 -1.32 15 -2 15 C-2.27 14.28 -2.54 13.56 -2.81 12.81 C-3.99 10.02 -5.39 7.56 -7 5 C-6.34 5 -5.68 5 -5 5 C-4.22 4.15 -3.43 3.31 -2.62 2.44 C-1.76 1.63 -0.89 0.83 0 0 Z \",fill:\"#6D5D4E\",transform:\"translate(885,429)\"})),_path1035||(_path1035=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.71 10.07 7.11 26.23 6 38 C5.34 38.99 4.68 39.98 4 41 C-2.5 10.37 -2.5 10.37 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#634369\",transform:\"translate(1016,1181)\"})),_path1036||(_path1036=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.36 4.01 2.44 6.99 2.56 10.02 C3.05 13.31 4.03 14.43 6 17 C6.07 19.12 6.07 19.12 5.69 21.44 C4.84 27.64 4.91 33.75 5 40 C1.12 41.08 -0.79 41.03 -4.31 39.06 C-5.36 38.49 -5.36 38.49 -6.43 37.91 C-6.95 37.61 -7.46 37.31 -8 37 C-5.73 34.57 -4.32 33.57 -1 33 C-0.67 30.69 -0.34 28.38 0 26 C0.66 26 1.32 26 2 26 C1.84 25.45 1.68 24.89 1.52 24.33 C0.95 21.78 0.79 19.4 0.68 16.8 C0.64 15.82 0.6 14.84 0.56 13.83 C0.52 12.81 0.48 11.8 0.44 10.75 C0.39 9.72 0.35 8.69 0.31 7.62 C0.2 5.08 0.1 2.54 0 0 Z \",fill:\"#1A0D27\",transform:\"translate(511,373)\"})),_path1037||(_path1037=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0 2 0 3.5 1.44 C4 1.95 4.49 2.47 5 3 C5.66 3.33 6.32 3.66 7 4 C7 5.32 7 6.64 7 8 C7.99 8 8.98 8 10 8 C11.61 9.69 11.61 9.69 13.31 12 C13.92 12.82 14.53 13.63 15.16 14.48 C15.77 15.31 16.37 16.14 17 17 C18.08 18.46 19.16 19.92 20.25 21.38 C20.71 22 21.17 22.63 21.64 23.27 C23.55 25.69 25.23 27.61 28 29 C28 29.66 28 30.32 28 31 C28.66 31.33 29.32 31.66 30 32 C28.23 32.68 28.23 32.68 26 33 C14.89 26.32 5 12.28 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#240F30\",transform:\"translate(149,1214)\"})),_path1038||(_path1038=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02 0.65 2.02 0.65 4.02 3.65 C4.5 6.37 4.47 8.93 4.02 11.65 C1.75 14.56 0.17 14.63 -3.48 15.15 C-6.98 14.65 -6.98 14.65 -9.41 12.53 C-11.24 9.16 -11.62 7.43 -10.98 3.65 C-8.15 -1.13 -4.98 -0.6 0 0 Z \",fill:\"#39154B\",transform:\"translate(212.9765625,1203.34765625)\"})),_path1039||(_path1039=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C2.32 2.67 3.64 2.34 5 2 C7.4 5.59 8.48 8.42 9.06 12.69 C9.87 18.17 10.87 23.58 12 29 C11.01 29 10.02 29 9 29 C3.06 22.67 -0.24 12.26 -0.25 3.75 C-0.17 2.51 -0.09 1.27 0 0 Z \",fill:\"#371942\",transform:\"translate(860,554)\"})),_path1040||(_path1040=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 2.33 3.98 2.66 5 3 C3.9 11.71 -3.83 18.18 -10.14 23.72 C-12.18 25.13 -13.52 25.84 -16 26 C-17.75 24.56 -17.75 24.56 -19 23 C-18.36 22.54 -17.72 22.08 -17.06 21.6 C-9.22 15.69 -3.43 9.3 0 0 Z \",fill:\"#221826\",transform:\"translate(679,351)\"})),_path1041||(_path1041=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.92 -1.23 4.64 -3.88 7.44 C-6.49 10.21 -8.34 12.59 -10 16 C-13.04 19.85 -16.13 22.55 -20.96 23.71 C-28.66 24.41 -36.33 23.82 -44 23 C-44 23.66 -44 24.32 -44 25 C-46.97 25 -49.94 25 -53 25 C-53.33 24.34 -53.66 23.68 -54 23 C-51.5 22.66 -49 22.33 -46.5 22 C-45.8 21.9 -45.11 21.81 -44.39 21.71 C-40.82 21.25 -37.36 20.96 -33.76 21.02 C-30.54 21 -28.36 20.8 -25.38 19.75 C-24.68 19.52 -23.99 19.29 -23.27 19.05 C-16.92 16.12 -12.12 11.51 -7.12 6.75 C-6.44 6.1 -5.75 5.45 -5.04 4.78 C-3.36 3.19 -1.68 1.6 0 0 Z \",fill:\"#401D4F\",transform:\"translate(349,1154)\"})),_path1042||(_path1042=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.24 2.33 2 3.99 2.38 6.62 C2.76 9.17 2.76 9.17 5.06 10.31 C5.7 10.54 6.34 10.77 7 11 C6.67 12.98 6.34 14.96 6 17 C6.99 17 7.98 17 9 17 C8.86 17.66 8.71 18.32 8.56 19 C8.28 20.49 8.28 20.49 8 22 C7.87 22.66 7.74 23.33 7.61 24.01 C7.17 26.41 7.17 26.41 7 30 C8.27 32.03 8.27 32.03 10 33 C9.34 33 8.68 33 8 33 C8.66 33.99 9.32 34.98 10 36 C10.42 37.65 10.77 39.32 11.06 41 C11.57 43.79 12.1 46.3 13 49 C13.04 51 13.04 53 13 55 C10.76 52.76 10.62 51.96 10.06 48.94 C9.43 45.84 8.68 42.92 7.62 39.94 C5.48 33.75 4.02 27.36 2.49 20.99 C2.16 19.64 1.8 18.28 1.44 16.93 C0.34 12.86 -0.23 9.22 -0.12 5 C-0.11 4.05 -0.09 3.1 -0.07 2.12 C-0.05 1.42 -0.02 0.72 0 0 Z \",fill:\"#250E39\",transform:\"translate(891,537)\"})),_path1043||(_path1043=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.87 2.08 6.73 4.21 9 8 C9 8.66 9 9.32 9 10 C-2.38 9.5 -2.38 9.5 -14 9 C-12.98 4.9 -12.03 3.53 -8.74 0.99 C-5.69 -0.75 -3.4 -0.55 0 0 Z \",fill:\"#624268\",transform:\"translate(613,503)\"})),_path1044||(_path1044=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.61 10.79 0.08 21.38 -6 29 C-7.32 29 -8.64 29 -10 29 C-10.33 28.01 -10.66 27.02 -11 26 C-10.01 24.51 -10.01 24.51 -9 23 C-9.33 22.34 -9.66 21.68 -10 21 C-9.24 20.36 -8.47 19.72 -7.69 19.06 C-4.24 15.62 -3.25 11.6 -2 7 C-1.79 6.29 -1.59 5.59 -1.38 4.86 C-0.9 3.25 -0.45 1.62 0 0 Z \",fill:\"#0C0911\",transform:\"translate(531,388)\"})),_path1045||(_path1045=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.66 2.66 1.32 3 2 C6.03 2.66 6.03 2.66 9 3 C10.24 8.84 9.57 13.27 8 19 C3.62 18.5 1.04 17.22 -2 14 C-2.77 9.14 -1.29 4.67 0 0 Z \",fill:\"#67486D\",transform:\"translate(538,381)\"})),_path1046||(_path1046=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-1.74 3.37 -3.97 3.13 -7 3 C-7.66 2.67 -8.32 2.34 -9 2 C-9 1.34 -9 0.68 -9 0 C-24.38 -4.41 -41.41 -4.68 -57 -1 C-55.63 -3.75 -54.35 -3.99 -51.5 -5.12 C-34.43 -10.48 -15.74 -8.05 0 0 Z \",fill:\"#1A0D25\",transform:\"translate(229,1141)\"})),_path1047||(_path1047=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.03 0.25 4.05 0.58 6.06 0.94 C7.17 1.13 8.27 1.33 9.41 1.53 C10.69 1.76 10.69 1.76 12 2 C14 7.62 14 7.62 14 11 C14.66 11 15.32 11 16 11 C16.33 13.31 16.66 15.62 17 18 C11.25 16.25 11.25 16.25 9 14 C9.66 14 10.32 14 11 14 C11 13.34 11 12.68 11 12 C10.3 11.92 9.6 11.84 8.88 11.75 C5.06 10.75 1.81 8.81 -1 6 C-1.12 3.5 -1.12 3.5 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#45224F\",transform:\"translate(1212,813)\"})),_path1048||(_path1048=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.03 1.14 1.05 2.28 1.08 3.45 C1.35 15.97 1.64 28.49 1.93 41 C2 43.89 2.06 46.78 2.13 49.67 C2.23 53.99 2.33 58.32 2.44 62.65 C2.48 64.25 2.52 65.86 2.55 67.47 C2.6 69.7 2.66 71.93 2.72 74.16 C2.75 75.41 2.78 76.67 2.81 77.96 C2.87 81.04 2.87 81.04 4 84 C4.28 88.92 3.57 92.38 2 97 C1.43 99.29 0.89 101.58 0.38 103.88 C0.11 105.03 -0.15 106.18 -0.41 107.37 C-0.61 108.24 -0.8 109.1 -1 110 C-1.33 110 -1.66 110 -2 110 C-1.86 107.79 -1.71 105.58 -1.56 103.38 C-1.44 101.53 -1.44 101.53 -1.32 99.65 C-1 96 -1 96 -0.49 93.33 C0.12 89.21 0.13 85.21 0.11 81.06 C0.11 80.18 0.11 79.3 0.11 78.39 C0.11 75.51 0.11 72.62 0.1 69.73 C0.1 67.72 0.09 65.71 0.09 63.7 C0.09 58.42 0.08 53.14 0.07 47.87 C0.06 42.48 0.05 37.09 0.05 31.7 C0.04 21.13 0.02 10.57 0 0 Z \",fill:\"#311540\",transform:\"translate(482,404)\"})),_path1049||(_path1049=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.6 0.16 1.2 0.33 1.81 0.5 C4.11 1.11 4.11 1.11 7 1 C7.33 1.99 7.66 2.98 8 4 C7.67 4.66 7.34 5.32 7 6 C7 7.32 7 8.64 7 10 C7.99 10.33 8.98 10.66 10 11 C9.67 11.66 9.34 12.32 9 13 C6.69 12.34 4.38 11.68 2 11 C2.74 16.55 2.74 16.55 4 22 C0.62 22.62 0.62 22.62 -3 23 C-3.66 22.34 -4.32 21.68 -5 21 C-4.64 13.48 -4.64 13.48 -1 10 C-0.83 7.04 -0.83 7.04 -1 4 C-0.5 1.62 -0.5 1.62 0 0 Z \",fill:\"#2A0E3E\",transform:\"translate(538,532)\"})),_path1050||(_path1050=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.75 2.75 5.75 2.75 8 5 C9.95 5.1 9.95 5.1 12.12 4.75 C12.92 4.65 13.72 4.54 14.54 4.43 C16.89 4.02 19.14 3.46 21.44 2.81 C22.61 2.54 23.79 2.28 25 2 C25.66 2.66 26.32 3.32 27 4 C25.68 4 24.36 4 23 4 C23.43 7.03 23.97 8.95 25.62 11.56 C27 14 27 14 26.69 16.31 C26.46 16.87 26.23 17.43 26 18 C24.92 16.82 24.92 16.82 23.81 15.62 C18.96 11.1 14.62 10.72 8.21 10.25 C6 10 6 10 4 9 C2.02 6.07 0.65 3.49 0 0 Z \",fill:\"#240F37\",transform:\"translate(870,451)\"})),_path1051||(_path1051=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.88 0.88 3.88 0.88 5 2 C4.4 9.39 4.4 9.39 2 13 C1.73 15.34 1.73 15.34 1.69 17.88 C1.37 21.77 1.08 22.89 -1.31 26.19 C-4 28 -4 28 -6.17 27.61 C-6.77 27.41 -7.38 27.21 -8 27 C-6.86 22.87 -5.71 18.75 -4.56 14.62 C-4.24 13.45 -3.91 12.27 -3.58 11.06 C-3.26 9.94 -2.95 8.82 -2.63 7.66 C-2.34 6.63 -2.05 5.59 -1.76 4.52 C-1 2 -1 2 0 0 Z \",fill:\"#1E0C30\",transform:\"translate(425,411)\"})),_path1052||(_path1052=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.65 1 3.3 1 5 C1.76 5 2.53 5 3.31 5 C6 6 6 6 7.81 9 C10.08 15.94 9.22 23.79 9 31 C8.34 31.33 7.68 31.66 7 32 C7 31.34 7 30.68 7 30 C6.34 30 5.68 30 5 30 C4.73 28.87 4.73 28.87 4.45 27.73 C3.2 22.64 1.91 17.61 0.31 12.62 C-1.01 8.31 -2.11 4.22 0 0 Z \",fill:\"#7B5B7B\",transform:\"translate(862,331)\"})),_path1053||(_path1053=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.22 1.41 1.43 2.83 1.62 4.25 C1.8 5.43 1.8 5.43 1.98 6.64 C2 9.36 1.25 10.62 0 13 C-0.24 15.13 -0.24 15.13 -0.12 17.25 C-0.08 18.49 -0.04 19.73 0 21 C-0.66 21 -1.32 21 -2 21 C-2.33 20.34 -2.66 19.68 -3 19 C-3.12 20.09 -3.25 21.19 -3.38 22.31 C-4 26 -4 26 -6 29 C-6.66 29 -7.32 29 -8 29 C-8.1 29.67 -8.2 30.33 -8.3 31.02 C-9.44 38.04 -11.37 44.4 -14 51 C-14.33 51 -14.66 51 -15 51 C-15 48.03 -15 45.06 -15 42 C-14.34 42 -13.68 42 -13 42 C-12.94 40.98 -12.94 40.98 -12.89 39.95 C-11.72 23.45 -11.72 23.45 -7.07 19.26 C-4.08 16 -3.36 12.46 -2.25 8.25 C-2.03 7.46 -1.81 6.66 -1.58 5.85 C-1.04 3.9 -0.52 1.95 0 0 Z \",fill:\"#1F0D31\",transform:\"translate(425,764)\"})),_path1054||(_path1054=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.91 0.11 7.52 1.16 11.44 4.12 C15.56 7.19 19.7 9.28 24.44 11.19 C38.11 16.82 50.88 25.28 62 35 C58.67 35 57.97 34.55 55.3 32.73 C54.59 32.26 53.87 31.78 53.13 31.29 C51.65 30.28 50.17 29.27 48.69 28.26 C40 22.28 40 22.28 30 20 C29.23 19.13 29.23 19.13 28.44 18.25 C25.91 15.92 24.24 15.22 21.06 14.06 C16.66 12.41 14.13 10.58 11 7 C7.49 3.85 4.54 2.27 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#1B0A32\",transform:\"translate(939,700)\"})),_path1055||(_path1055=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.1 0.59 3.2 1.18 3.3 1.79 C4.6 8.71 4.6 8.71 9 14 C11.56 14.65 14.04 15.06 16.66 15.35 C19 16 19 16 20.8 17.86 C22.38 20.67 22.22 22.82 22 26 C21.34 26.33 20.68 26.66 20 27 C19.84 26.38 19.67 25.76 19.5 25.12 C17.44 22.21 15.47 22.13 12.07 21.49 C8.9 20.74 6.65 20.04 4.88 17.2 C4.59 16.51 4.3 15.83 4 15.12 C2.74 12.33 1.97 10.97 -0.31 8.81 C-0.87 8.21 -1.43 7.62 -2 7 C-1.8 4.26 -1.22 2.45 0 0 Z \",fill:\"#311640\",transform:\"translate(934,367)\"})),_path1056||(_path1056=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.85 0.45 10.08 3.04 15 6 C15 6.99 15 7.98 15 9 C15.78 9.31 16.57 9.62 17.38 9.94 C21.85 11.75 21.85 11.75 23.44 14.44 C24.9 17.24 24.9 17.24 28 19 C28 19.99 28 20.98 28 22 C28.66 22.33 29.32 22.66 30 23 C31.35 24.31 32.69 25.64 34 27 C29.11 26.58 27.23 24.56 24 21 C20.89 17.81 17.7 14.72 14.44 11.69 C13.69 10.99 12.95 10.29 12.18 9.57 C9.91 7.61 9.91 7.61 6 8 C5.67 8.66 5.34 9.32 5 10 C4.16 8.9 3.33 7.8 2.5 6.69 C2.04 6.07 1.57 5.46 1.09 4.82 C0 3 0 3 0 0 Z \",fill:\"#321641\",transform:\"translate(830,212)\"})),_path1057||(_path1057=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C0.26 3.8 0.26 3.8 -0.95 5.96 C-1.6 7.13 -1.6 7.13 -2.27 8.33 C-2.74 9.15 -3.21 9.97 -3.69 10.81 C-4.14 11.62 -4.58 12.43 -5.04 13.26 C-7.4 17.44 -9.71 21.47 -13 25 C-13.66 25 -14.32 25 -15 25 C-15.27 25.59 -15.54 26.18 -15.81 26.78 C-17.01 29.02 -18.29 30.63 -20 32.5 C-23.98 36.93 -27.73 41.54 -31.47 46.17 C-33.37 48.3 -35.05 49.92 -37.25 51.68 C-40.21 53.77 -40.21 53.77 -41 57 C-42.32 57 -43.64 57 -45 57 C-43.6 52.21 -41.2 50.21 -37.31 47.19 C-28.52 40.36 -28.52 40.36 -23 31 C-21.36 29.31 -19.69 27.65 -18 26 C-14.81 22.66 -12.05 19.57 -10.31 15.25 C-9.07 12.17 -8.29 11.19 -6 9 C-4.95 7.02 -3.95 5.03 -3 3 C-2 1 -2 1 0 0 Z \",fill:\"#421F4F\",transform:\"translate(607,1223)\"})),_path1058||(_path1058=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 1.12 2.44 1.12 5 3 C6.16 7 6.02 10.86 6 15 C-1.73 16.23 -9.17 17.27 -17 17 C-16.06 15.06 -16.06 15.06 -14 13 C-11.9 12.72 -11.9 12.72 -9.5 12.62 C-7.13 12.52 -7.13 12.52 -5 12 C-2.89 9.37 -2.89 9.37 -2 6 C-1.61 4.89 -1.22 3.77 -0.81 2.62 C-0.54 1.76 -0.28 0.89 0 0 Z \",fill:\"#795E82\",transform:\"translate(722,785)\"})),_path1059||(_path1059=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.94 1.18 0.88 2.35 0.81 3.56 C0.78 10.51 2.51 17.25 4 24 C3.34 24 2.68 24 2 24 C2.06 25.2 2.12 26.39 2.19 27.62 C2.21 31.73 1.13 34.45 -1 38 C-1.66 38 -2.32 38 -3 38 C-3.26 33.81 -3.48 29.63 -3.69 25.44 C-3.76 24.26 -3.83 23.07 -3.91 21.86 C-4.22 15.31 -4.17 10.78 -1 5 C-0.31 2.22 -0.31 2.22 0 0 Z \",fill:\"#867395\",transform:\"translate(846,315)\"})),_path1060||(_path1060=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.66 0.16 14.81 1.14 21 6 C21.66 7.36 21.66 7.36 22.32 8.75 C24.56 13.09 27.68 15.69 31.31 18.88 C36.59 23.52 40.98 28.22 45 34 C41.11 33.3 39.88 31.81 37.45 28.73 C33.78 24.37 29.2 20.88 24.66 17.47 C23.79 16.81 23.79 16.81 22.9 16.14 C21.73 15.27 20.57 14.41 19.39 13.55 C16.34 11.27 14.52 9.48 13 6 C10.5 4.78 10.5 4.78 8 4 C7.67 3.67 7.34 3.34 7 3 C5 2.96 3 2.96 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#391947\",transform:\"translate(648,96)\"})),_path1061||(_path1061=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.32 2 2.64 2 4 2 C4 2.66 4 3.32 4 4 C4.99 4.33 5.98 4.66 7 5 C4.9 7.5 3.45 8.85 0.31 9.88 C-3.98 10.04 -7.93 9.39 -12 8 C-12.66 7.34 -13.32 6.68 -14 6 C-13.94 3.5 -13.94 3.5 -13 1 C-9.04 -1.38 -4.22 -2.11 0 0 Z \",fill:\"#8277A1\",transform:\"translate(706,267)\"})),_path1062||(_path1062=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.29 3.22 -5.05 3.67 -8.8 4.33 C-9.57 4.45 -10.34 4.57 -11.12 4.69 C-11.91 4.81 -12.7 4.94 -13.51 5.07 C-21.68 6.28 -29.76 6.28 -38 6 C-38 5.34 -38 4.68 -38 4 C-38.99 3.67 -39.98 3.34 -41 3 C-41 2.67 -41 2.34 -41 2 C-35.97 1.55 -30.93 1.1 -25.89 0.66 C-24.18 0.51 -22.47 0.36 -20.76 0.21 C-18.29 -0.02 -15.83 -0.23 -13.36 -0.44 C-12.6 -0.51 -11.84 -0.58 -11.06 -0.66 C-7.17 -0.98 -3.78 -1.02 0 0 Z \",fill:\"#060929\",transform:\"translate(668,807)\"})),_path1063||(_path1063=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.05 -0.2 6.05 -0.2 8 0 C10 2 10 2 10.19 5.44 C10 9 10 9 9 12 C7.02 12.33 5.04 12.66 3 13 C3.33 11.02 3.66 9.04 4 7 C-1.95 8.64 -7.48 10.52 -12.99 13.33 C-15.39 14.13 -16.64 13.82 -19 13 C-14.5 8.83 -10.4 6.67 -4.62 4.69 C-3.52 4.29 -3.52 4.29 -2.39 3.89 C-0.6 3.25 1.2 2.62 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#604166\",transform:\"translate(674,314)\"})),_path1064||(_path1064=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 2.23 1.09 4.46 1.12 6.69 C1.15 7.93 1.17 9.17 1.2 10.45 C1 14 1 14 0.03 16.34 C-3.72 26.06 -2.16 39.14 -2.13 49.48 C-2.12 51.96 -2.13 54.44 -2.14 56.92 C-2.14 58.52 -2.13 60.12 -2.13 61.71 C-2.13 62.44 -2.14 63.17 -2.14 63.92 C-2.12 67.34 -1.92 70.52 -1.37 73.89 C-1.25 74.92 -1.12 75.94 -1 77 C-1.99 77.99 -1.99 77.99 -3 79 C-4.82 69.3 -5.32 59.84 -5.25 50 C-5.25 49.28 -5.24 48.56 -5.24 47.82 C-5.17 31.71 -4.82 15.51 0 0 Z \",fill:\"#29103B\",transform:\"translate(408,809)\"})),_path1065||(_path1065=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 4.06 0.26 6.96 -1.19 10.94 C-1.61 12.14 -2.04 13.35 -2.48 14.59 C-3.98 17.95 -5.65 20.2 -8 23 C-9.13 24.91 -10.21 26.85 -11.25 28.81 C-11.77 29.79 -12.29 30.76 -12.83 31.77 C-13.21 32.51 -13.6 33.24 -14 34 C-14.66 34 -15.32 34 -16 34 C-16.1 34.6 -16.21 35.2 -16.31 35.81 C-17 38 -17 38 -18.38 39.31 C-20.3 41.1 -20.3 41.1 -21.5 44.56 C-23 48 -23 48 -26 50 C-24.77 45.9 -23.3 42.57 -20.94 39 C-20.32 38.06 -19.71 37.11 -19.07 36.14 C-18.05 34.59 -18.05 34.59 -17 33 C-15.81 31.19 -14.62 29.39 -13.44 27.57 C-12.67 26.39 -11.89 25.21 -11.11 24.04 C-8.57 20.14 -6.72 16.29 -5 12 C-6.98 12.99 -8.96 13.98 -11 15 C-9.25 9.9 -6.67 3.53 -1.84 0.76 C-1.23 0.51 -0.62 0.26 0 0 Z \",fill:\"#351547\",transform:\"translate(375,674)\"})),_path1066||(_path1066=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.66 3.66 -1.32 4.32 -2 5 C-2 5.99 -2 6.98 -2 8 C-4.35 11.19 -5.71 11.94 -9.62 12.81 C-13 13 -13 13 -15 12 C-17.97 14.48 -17.97 14.48 -21 17 C-19.79 13.28 -18.49 9.62 -17 6 C-16.34 6 -15.68 6 -15 6 C-14.67 4.68 -14.34 3.36 -14 2 C-13.07 1.94 -12.15 1.88 -11.19 1.82 C-9.4 1.69 -9.4 1.69 -7.56 1.56 C-5.77 1.44 -5.77 1.44 -3.94 1.32 C-1.11 1.32 -1.11 1.32 0 0 Z \",fill:\"#401D4F\",transform:\"translate(413,527)\"})),_path1067||(_path1067=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.91 2.81 3.82 2.63 4.75 2.44 C9.33 1.82 9.33 1.82 12 3 C12.94 5.21 12.94 5.21 13.56 7.94 C14.47 12.27 14.47 12.27 18 15 C18 15.66 18 16.32 18 17 C18.66 17 19.32 17 20 17 C20 17.66 20 18.32 20 19 C17.36 18.67 14.72 18.34 12 18 C11.47 16.76 10.95 15.5 10.44 14.25 C10.15 13.55 9.86 12.86 9.56 12.14 C8.92 9.7 9.2 8.36 10 6 C9.01 5.67 8.02 5.34 7 5 C6.01 6.98 5.02 8.96 4 11 C2.35 11 0.7 11 -1 11 C-1.33 11.99 -1.66 12.98 -2 14 C-3.56 8.34 -2.24 5.2 0 0 Z \",fill:\"#43324A\",transform:\"translate(844,443)\"})),_path1068||(_path1068=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.84 1.08 0.84 1.08 1.69 2.19 C3.94 5.04 3.94 5.04 6.56 7.5 C10.33 11.37 11.99 14.97 14 20 C8.72 19.67 3.44 19.34 -2 19 C-1.86 16.42 -1.71 13.84 -1.56 11.19 C-1.5 9.98 -1.5 9.98 -1.43 8.74 C-1.25 5.63 -0.99 2.97 0 0 Z \",fill:\"#745A7D\",transform:\"translate(593,343)\"})),_path1069||(_path1069=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.25 1.52 0.5 2.31 0.76 C6.49 2.27 9.35 3.73 12.25 7.25 C8.51 6.66 5.66 5.55 2.31 3.81 C-12.7 -3.01 -29.35 -0.79 -44.93 3.29 C-48.96 4.3 -52.88 4.86 -57 5.31 C-62.08 5.82 -62.08 5.82 -67.05 6.93 C-68.75 7.25 -68.75 7.25 -71.75 5.25 C-63.23 3.18 -54.6 1.96 -45.94 0.69 C-43.69 0.36 -41.43 0.02 -39.18 -0.31 C-37.15 -0.61 -35.12 -0.91 -33.09 -1.21 C-21.23 -3.13 -11.59 -3.86 0 0 Z \",fill:\"#000002\",transform:\"translate(740.75,47.75)\"})),_path1070||(_path1070=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.04 0.81 1.07 1.62 1.11 2.46 C1.18 3.56 1.24 4.67 1.31 5.81 C1.37 6.89 1.43 7.97 1.49 9.08 C1.91 12.35 2.58 14.86 3.59 17.95 C5.48 24.61 5.03 31.03 4.48 37.84 C4.31 39.93 4.17 42.02 4.03 44.11 C3.47 52.16 2.51 60.07 1 68 C0.67 68 0.34 68 0 68 C0 67.45 0 66.89 0.01 66.33 C0.03 60.57 0.04 54.81 0.05 49.05 C0.06 46.9 0.07 44.75 0.08 42.6 C0.09 39.51 0.09 36.42 0.1 33.33 C0.1 32.37 0.11 31.42 0.11 30.43 C0.11 29.53 0.11 28.63 0.11 27.7 C0.12 26.91 0.12 26.12 0.12 25.31 C-0.01 22.79 -0.48 20.46 -1 18 C-1.31 11.91 -1.07 6 0 0 Z \",fill:\"#846F90\",transform:\"translate(1133,1212)\"})),_path1071||(_path1071=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.23 1.25 14.29 5.39 21 10 C26.04 13.42 30.98 15.93 36.68 18.1 C39.56 19.22 42.27 20.57 45 22 C46.11 22.56 47.23 23.11 48.38 23.69 C49.24 24.12 50.11 24.55 51 25 C48.33 26.33 46.83 25.67 44 25 C44 25.66 44 26.32 44 27 C40.62 25.76 37.86 24.34 34.94 22.25 C30.41 19.14 25.68 16.8 20.7 14.49 C17.92 12.96 16.22 11.24 14 9 C11.67 7.7 11.67 7.7 9.25 6.75 C8.05 6.25 8.05 6.25 6.83 5.73 C6.22 5.49 5.62 5.25 5 5 C5 4.34 5 3.68 5 3 C2.52 2.01 2.52 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#290F3C\",transform:\"translate(969,697)\"})),_path1072||(_path1072=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-7.37 8.2 -16.85 14.48 -27.26 20.05 C-30.3 21.71 -33.25 23.51 -36.2 25.32 C-38.49 26.18 -39.73 25.79 -42 25 C-40.68 24.34 -39.36 23.68 -38 23 C-38 22.34 -38 21.68 -38 21 C-37.41 20.72 -36.81 20.44 -36.2 20.15 C-31.59 17.92 -27.22 15.56 -22.94 12.75 C-18.06 9.58 -13.06 6.75 -7.94 4 C-7.19 3.59 -6.44 3.18 -5.66 2.76 C-3.81 1.77 -1.91 0.88 0 0 Z \",fill:\"#7E6483\",transform:\"translate(723,592)\"})),_path1073||(_path1073=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.86 0.09 3.71 0.25 5.56 0.44 C7.08 0.59 7.08 0.59 8.63 0.75 C9.41 0.83 10.19 0.91 11 1 C11 1.66 11 2.32 11 3 C8.36 3 5.72 3 3 3 C3 3.66 3 4.32 3 5 C2.25 5.39 1.49 5.79 0.72 6.19 C-2.74 8.5 -3.91 11.24 -5.5 14.94 C-7.6 19.76 -9.58 22.96 -14 26 C-14.67 26.49 -15.33 26.98 -16.02 27.48 C-18.51 29.24 -18.51 29.24 -21 31 C-21.66 30.67 -22.32 30.34 -23 30 C-22.19 28.06 -22.19 28.06 -21 26 C-20.01 25.67 -19.02 25.34 -18 25 C-16.98 24.02 -15.98 23.02 -15 22 C-14.34 21.67 -13.68 21.34 -13 21 C-11.93 18.95 -10.95 16.86 -10 14.75 C-9.48 13.61 -8.97 12.47 -8.44 11.3 C-7.55 9.27 -6.71 7.23 -5.94 5.16 C-5 3 -5 3 -2.94 1.75 C-2.3 1.5 -1.66 1.25 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3B184B\",transform:\"translate(766,68)\"})),_path1074||(_path1074=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.86 3.48 0.71 6.96 0.56 10.44 C0.52 11.43 0.48 12.42 0.44 13.45 C0.4 14.39 0.36 15.34 0.32 16.31 C0.28 17.18 0.24 18.06 0.21 18.96 C0 21 0 21 -1 22 C-1.11 23.69 -1.18 25.37 -1.25 27.06 C-1.72 32.94 -3.59 36.32 -7 41 C-7.41 41.87 -7.82 42.73 -8.25 43.62 C-10.64 46.86 -13.64 48.58 -17.04 50.67 C-19.13 51.86 -19.13 51.86 -20 54 C-20.99 53.67 -21.98 53.34 -23 53 C-20.33 49.6 -17.73 46.68 -14.38 43.94 C-11.5 41.55 -9.69 39.38 -8 36 C-7.5 35.16 -7 34.32 -6.48 33.45 C-4.58 29.02 -4.32 25.02 -4 20.25 C-3.42 13.12 -2.48 6.76 0 0 Z \",fill:\"#452354\",transform:\"translate(360,1074)\"})),_path1075||(_path1075=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.03 4.36 0.03 4.36 -1.5 7.31 C-2.05 8.38 -2.6 9.44 -3.16 10.54 C-6.08 16.04 -9.02 21.53 -12 27 C-12.33 25.68 -12.66 24.36 -13 23 C-14.32 23.33 -15.64 23.66 -17 24 C-16.46 17.82 -14.45 12.67 -12 7 C-11.01 7 -10.02 7 -9 7 C-8.67 7.99 -8.34 8.98 -8 10 C-5.98 7.98 -4.71 5.25 -3.25 2.81 C-2 1 -2 1 0 0 Z \",fill:\"#312436\",transform:\"translate(840,484)\"})),_path1076||(_path1076=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C2.62 4.36 0.72 6.46 -2.75 9.38 C-5.91 12.1 -8.76 14.75 -11.38 18 C-13.98 20.97 -14.41 21.39 -18 22 C-18.81 19.31 -18.81 19.31 -19 16 C-16.75 13.31 -16.75 13.31 -14 11 C-13.46 10.4 -12.93 9.8 -12.38 9.19 C-11 8 -11 8 -8 8 C-8 7.34 -8 6.68 -8 6 C-6.03 4.63 -4.02 3.3 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(893,401)\"})),_path1077||(_path1077=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.21 6.41 2.02 12.53 1 18.88 C-1.37 31.84 -1.37 31.84 2 44 C2.66 44.17 3.32 44.33 4 44.5 C6 45 6 45 7.25 47.06 C7.5 47.7 7.75 48.34 8 49 C3.5 50.5 3.5 50.5 -1 52 C-0.96 51.22 -0.92 50.43 -0.88 49.62 C-0.71 46.84 -0.71 46.84 -3 45 C-3.26 42.59 -3.26 42.59 -3.27 39.58 C-3.27 38.49 -3.27 37.4 -3.27 36.28 C-3.27 35.14 -3.26 33.99 -3.25 32.81 C-3.26 31.69 -3.27 30.56 -3.27 29.4 C-3.26 23.5 -2.87 18.59 -1 13 C-0.8 10.81 -0.8 10.81 -0.94 8.88 C-0.99 5.66 -0.77 3.09 0 0 Z \",fill:\"#1B0D28\",transform:\"translate(485,348)\"})),_path1078||(_path1078=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.58 0.61 5.73 2.07 8.56 4.31 C9.71 5.2 9.71 5.2 10.88 6.11 C14.64 9.46 16.57 12.97 18.56 17.56 C19.89 20.62 21.15 23.22 23 26 C23 26.99 23 27.98 23 29 C22.34 29 21.68 29 21 29 C21.47 29.64 21.95 30.28 22.44 30.94 C24.47 34.92 24.72 38.58 25 43 C21.13 38.59 18.43 34.1 17.61 28.21 C15.79 18.67 9.84 9.72 3 3 C2.44 2.44 1.88 1.87 1.3 1.29 C0.87 0.87 0.44 0.44 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(335,977)\"})),_path1079||(_path1079=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.9 0.31 0.9 0.31 1.81 0.62 C1.33 1 0.85 1.38 0.35 1.76 C-4.07 5.34 -6.44 7.82 -7.56 13.54 C-8.63 18.64 -10 21.22 -14.19 24.62 C-15.82 25.68 -17.48 26.7 -19.19 27.62 C-20.19 24.62 -20.19 24.62 -19.46 22.71 C-19.07 22 -18.68 21.3 -18.27 20.57 C-17.63 19.4 -17.63 19.4 -16.96 18.21 C-16.5 17.4 -16.04 16.59 -15.56 15.75 C-15.12 14.95 -14.68 14.14 -14.23 13.32 C-6.16 -1.06 -6.16 -1.06 0 0 Z \",fill:\"#765A7B\",transform:\"translate(707.1875,645.375)\"})),_path1080||(_path1080=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75 2.53 2.75 2.53 5 5 C-3.8 7.66 -11.7 9.7 -21 9 C-21 8.34 -21 7.68 -21 7 C-21.99 7 -22.98 7 -24 7 C-23.67 6.01 -23.34 5.02 -23 4 C-23 4.66 -23 5.32 -23 6 C-21.25 5.38 -19.5 4.75 -17.75 4.12 C-16.78 3.78 -15.8 3.43 -14.8 3.07 C-12.07 2.09 -12.07 2.09 -9.89 0.89 C-6.74 -0.6 -3.33 -0.89 0 0 Z \",fill:\"#58385F\",transform:\"translate(570,506)\"})),_path1081||(_path1081=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.27 1.11 1.54 2.23 1.81 3.38 C2.66 7.22 2.66 7.22 6 9 C8.02 9.38 8.02 9.38 10.12 9.5 C11.4 9.67 12.68 9.83 14 10 C14.33 10.66 14.66 11.32 15 12 C13.77 12.51 13.77 12.51 12.52 13.02 C11.44 13.47 10.36 13.92 9.25 14.38 C8.18 14.82 7.12 15.26 6.02 15.71 C3.1 16.91 3.1 16.91 0.8 18.16 C-1 19 -1 19 -4 19 C-5.33 10.89 -4.61 6.91 0 0 Z \",fill:\"#150F18\",transform:\"translate(618,322)\"})),_path1082||(_path1082=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.38 3.7 0.66 5.39 2.57 C5.82 3.23 6.25 3.88 6.69 4.56 C9.67 8.81 13.16 11.94 17.14 15.24 C19 17 19 17 20 20 C17.74 20.76 16.39 21.11 14.07 20.47 C6.87 16.89 1.88 11.61 -1 4 C-0.69 1.62 -0.69 1.62 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(785,105)\"})),_path1083||(_path1083=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.02 3.97 0.02 3.97 -2 7 C-1.34 6.67 -0.68 6.34 0 6 C-1.32 9.56 -2.92 12.66 -4.94 15.88 C-7.36 19.84 -9.26 23.7 -11 28 C-11.99 30.01 -12.98 32.01 -14 34 C-15.32 33.67 -16.64 33.34 -18 33 C-17.36 28.41 -15.56 24.54 -13.5 20.44 C-13.15 19.74 -12.8 19.04 -12.45 18.32 C-9 11.63 -4.76 5.82 0 0 Z \",fill:\"#271233\",transform:\"translate(127,1108)\"})),_path1084||(_path1084=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.49 1.49 0.49 1.49 1 3 C-1.64 3.99 -4.28 4.98 -7 6 C-7 6.99 -7 7.98 -7 9 C-7.59 9.1 -8.17 9.2 -8.77 9.3 C-15.55 11.43 -20.31 19.48 -24.38 25 C-25.02 25.85 -25.02 25.85 -25.67 26.72 C-28.74 31.01 -29.97 34.83 -31 40 C-31.66 39.67 -32.32 39.34 -33 39 C-34.65 42.3 -36.3 45.6 -38 49 C-39.07 44.72 -38.99 44.21 -37.19 40.5 C-36.83 39.75 -36.47 38.99 -36.11 38.22 C-35.74 37.49 -35.38 36.75 -35 36 C-34.53 34.98 -34.53 34.98 -34.05 33.93 C-32.93 31.86 -31.65 30.35 -30.06 28.62 C-27.41 25.63 -25.73 22.62 -24 19 C-23.34 18.67 -22.68 18.34 -22 18 C-21.67 17.01 -21.34 16.02 -21 15 C-6.45 0 -6.45 0 0 0 Z \",fill:\"#0A0F37\",transform:\"translate(1033,780)\"})),_path1085||(_path1085=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.84 0.42 1.68 0.85 2.54 1.28 C2.54 1.61 2.54 1.94 2.54 2.28 C-7.85 2.99 -17.37 0.06 -26.16 -5.47 C-26.59 -5.88 -27.02 -6.3 -27.46 -6.72 C-27.46 -7.71 -27.46 -8.7 -27.46 -9.72 C-28.45 -10.05 -29.44 -10.38 -30.46 -10.72 C-22 -13.54 -7.62 -3.79 0 0 Z \",fill:\"#060929\",transform:\"translate(1026.45703125,748.71875)\"})),_path1086||(_path1086=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-0.29 5.17 -1.58 6.34 -2.88 7.5 C-3.59 8.15 -4.31 8.8 -5.05 9.47 C-7 11 -7 11 -9 11 C-9.33 11.99 -9.66 12.98 -10 14 C-11.98 14.33 -13.96 14.66 -16 15 C-16.66 13.68 -17.32 12.36 -18 11 C-16.59 9.37 -15.17 7.74 -13.75 6.12 C-12.57 4.77 -12.57 4.77 -11.36 3.38 C-7.48 -0.53 -5.34 -1.48 0 0 Z \",fill:\"#7F6584\",transform:\"translate(876,726)\"})),_path1087||(_path1087=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.99 5.33 3.98 5.66 5 6 C5.95 8 5.95 8 6.69 10.44 C7.06 11.64 7.06 11.64 7.45 12.87 C8 15 8 15 8 17 C8.46 17.44 8.93 17.89 9.41 18.35 C11.3 20.31 11.76 21.83 12.5 24.44 C13.57 27.9 14.78 30.13 17 33 C18.12 35.63 19.05 38.3 20 41 C20.66 39.68 21.32 38.36 22 37 C22.66 38.98 23.32 40.96 24 43 C23.01 43 22.02 43 21 43 C21.33 43.99 21.66 44.98 22 46 C21.01 46 20.02 46 19 46 C15.98 40.18 13.26 34.38 10.99 28.23 C10.07 25.92 10.07 25.92 8.38 23.9 C7 22 7 22 7 19 C6.34 18.67 5.68 18.34 5 18 C5 17.34 5 16.68 5 16 C4.34 15.67 3.68 15.34 3 15 C2.25 12.67 1.61 10.37 1 8 C0.63 6.69 0.25 5.37 -0.12 4.06 C-0.41 3.05 -0.7 2.04 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#090F37\",transform:\"translate(1253,995)\"})),_path1088||(_path1088=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.79 12.83 -0.15 25.5 -6 36 C-6.66 36 -7.32 36 -8 36 C-9.07 23.67 -5.03 11.14 0 0 Z \",fill:\"#080D31\",transform:\"translate(980,861)\"})),_path1089||(_path1089=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.85 7.02 11.5 14.1 14 23 C13.67 23.99 13.34 24.98 13 26 C12.92 25.38 12.84 24.76 12.75 24.12 C12.21 21.82 12.21 21.82 10 20.94 C9.34 20.63 8.68 20.32 8 20 C7.67 19.01 7.34 18.02 7 17 C5.25 15.92 5.25 15.92 3 15 C-2.77 12.23 -2.77 12.23 -5 10 C-4.94 8 -4.94 8 -4 6 C-1.44 4.75 -1.44 4.75 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#27103A\",transform:\"translate(563,561)\"})),_path1090||(_path1090=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.31 0.76 -0.62 1.53 -0.94 2.31 C-1.68 4.19 -2.36 6.09 -3 8 C-5.21 9.43 -7.38 10.7 -9.69 11.94 C-10.92 12.61 -12.15 13.29 -13.39 13.96 C-13.99 14.3 -14.59 14.63 -15.22 14.97 C-16.98 15.99 -18.65 17.1 -20.33 18.25 C-23 20 -23 20 -25 20 C-25.33 21.32 -25.66 22.64 -26 24 C-26.62 24.12 -27.24 24.25 -27.88 24.38 C-30.19 24.87 -30.19 24.87 -32 27 C-32.42 29.5 -32.42 29.5 -32 32 C-31.01 32.66 -30.02 33.32 -29 34 C-31.38 34.12 -31.38 34.12 -34 34 C-34.66 33.34 -35.32 32.68 -36 32 C-35.62 26.87 -33.28 24.67 -29.72 21.24 C-25.83 18.03 -21.63 15.38 -17.38 12.66 C-12.72 9.63 -9.27 6.56 -6 2 C-6.33 1.34 -6.66 0.68 -7 0 C-4.33 -1.33 -2.83 -0.67 0 0 Z \",fill:\"#2B113D\",transform:\"translate(628,61)\"})),_path1091||(_path1091=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6 2.66 6 3.32 6 4 C6.92 3.9 7.83 3.81 8.77 3.71 C10.56 3.54 10.56 3.54 12.38 3.38 C14.15 3.2 14.15 3.2 15.96 3.02 C16.96 3.02 17.97 3.01 19 3 C19.66 3.66 20.32 4.32 21 5 C18.95 5.23 16.9 5.46 14.85 5.68 C12.99 5.82 12.99 5.82 12 7 C9.47 7.24 6.97 7.42 4.44 7.56 C3.37 7.63 3.37 7.63 2.28 7.69 C0.52 7.8 -1.24 7.9 -3 8 C-3.33 7.01 -3.66 6.02 -4 5 C-4.59 5.08 -5.18 5.17 -5.79 5.25 C-14.13 6.33 -14.13 6.33 -18 5 C-18.33 4.34 -18.66 3.68 -19 3 C-21.53 2.34 -21.53 2.34 -24 2 C-24 1.67 -24 1.34 -24 1 C-23.31 1.01 -22.62 1.01 -21.9 1.02 C-18.79 1.04 -15.68 1.05 -12.56 1.06 C-11.47 1.07 -10.39 1.08 -9.26 1.09 C-7.71 1.09 -7.71 1.09 -6.13 1.1 C-5.17 1.1 -4.21 1.11 -3.22 1.11 C-1.03 1.25 -1.03 1.25 0 0 Z \",fill:\"#321541\",transform:\"translate(271,1168)\"})),_path1092||(_path1092=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.07 0.58 1.15 1.17 1.23 1.77 C3.44 15.55 11.41 25.96 20.07 36.52 C22 39 23.68 41.51 25.31 44.19 C25.84 45.05 26.38 45.91 26.93 46.79 C27.28 47.52 27.63 48.25 28 49 C27.67 49.66 27.34 50.32 27 51 C25 49.62 25 49.62 23 48 C23 47.34 23 46.68 23 46 C22.34 46 21.68 46 21 46 C20.06 44.68 19.13 43.34 18.27 41.96 C16.77 39.65 15.17 37.43 13.56 35.19 C6.46 25.01 -1.26 12.85 0 0 Z \",fill:\"#000002\",transform:\"translate(283,889)\"})),_path1093||(_path1093=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.11 1.21 3.11 1.21 7 1 C6.67 1.99 6.34 2.98 6 4 C5.01 3.67 4.02 3.34 3 3 C2.67 3.66 2.34 4.32 2 5 C0.95 4.98 -0.1 4.96 -1.19 4.94 C-4.33 4.99 -6.97 5.27 -10 6 C-10 6.66 -10 7.32 -10 8 C-10.95 8.45 -11.9 8.91 -12.88 9.38 C-16 10.8 -16 10.8 -18 13 C-18.33 12.34 -18.66 11.68 -19 11 C-19.66 11 -20.32 11 -21 11 C-20.94 11.93 -20.88 12.86 -20.81 13.81 C-21 17 -21 17 -22.5 18.88 C-23.24 19.43 -23.24 19.43 -24 20 C-24 18.35 -24 16.7 -24 15 C-26.33 15.96 -26.33 15.96 -28 19 C-28.38 16.75 -28.38 16.75 -28 14 C-25.12 11.81 -25.12 11.81 -22 10 C-21.34 9.34 -20.68 8.68 -20 8 C-18.35 7.29 -16.68 6.62 -15 6 C-15 5.01 -15 4.02 -15 3 C-13.26 2.3 -11.5 1.61 -9.75 0.94 C-8.78 0.55 -7.8 0.17 -6.8 -0.22 C-3.89 -1.03 -2.76 -1.03 0 0 Z \",fill:\"#090E35\",transform:\"translate(765,789)\"})),_path1094||(_path1094=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.04 0.26 6.35 1.23 9.81 3.25 C9.81 3.58 9.81 3.91 9.81 4.25 C6.51 4.25 3.21 4.25 -0.19 4.25 C-0.85 7.55 -1.51 10.85 -2.19 14.25 C-3.18 14.25 -4.17 14.25 -5.19 14.25 C-4.86 14.91 -4.53 15.57 -4.19 16.25 C-4.16 18.42 -4.14 20.58 -4.12 22.75 C-3.67 30.63 -0.69 34.81 4.81 40.25 C3.82 40.75 3.82 40.75 2.81 41.25 C-5.01 33.02 -7.31 25.67 -8.62 14.56 C-7.88 8.91 -6.43 0.5 0 0 Z \",fill:\"#482859\",transform:\"translate(1154.1875,625.75)\"})),_path1095||(_path1095=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.6 1.72 8.93 3.91 13.31 6.12 C14.05 6.5 14.79 6.87 15.56 7.25 C17.37 8.17 19.19 9.08 21 10 C21 10.66 21 11.32 21 12 C21.61 12.2 22.23 12.41 22.86 12.62 C27.93 14.31 27.93 14.31 33 16 C33.5 17.49 33.5 17.49 34 19 C33.31 18.72 32.62 18.45 31.9 18.16 C30.94 17.78 29.99 17.39 29 17 C27.97 16.59 26.94 16.17 25.88 15.75 C24.78 15.31 23.69 14.88 22.56 14.44 C21.47 14 20.38 13.57 19.25 13.12 C16.12 12.04 13.31 11.27 10 11 C9.34 11.66 8.68 12.32 8 13 C5.88 12.62 5.88 12.62 4 12 C4 11.01 4 10.02 4 9 C2.15 6.9 2.15 6.9 0 5 C-0.66 4.34 -1.32 3.68 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#280F3B\",transform:\"translate(953,690)\"})),_path1096||(_path1096=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0.33 12.54 0.66 19 1 C16 7 16 7 12.75 8.94 C8.58 10.12 6.17 10.1 2 9 C-0.44 7.44 -0.44 7.44 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#634369\",transform:\"translate(551,517)\"})),_path1097||(_path1097=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.51 1.23 6.83 2.62 10 6 C10.64 6.29 11.28 6.58 11.94 6.88 C15.09 8.6 16.8 11.18 19 14 C17 15 17 15 14 14.06 C13.01 13.71 12.02 13.36 11 13 C8.93 12.85 8.93 12.85 7 14 C5.05 13.07 5.05 13.07 2.75 11.69 C-0.76 9.65 -4.07 8.11 -8 7 C-7.01 6.67 -6.02 6.34 -5 6 C-4.67 5.01 -4.34 4.02 -4 3 C-1.69 3.66 0.62 4.32 3 5 C2.01 3.35 1.02 1.7 0 0 Z \",fill:\"#291138\",transform:\"translate(818,270)\"})),_path1098||(_path1098=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.01 2.66 -0.98 3.32 -2 4 C-1.67 4.66 -1.34 5.32 -1 6 C-1.66 6 -2.32 6 -3 6 C-3 6.66 -3 7.32 -3 8 C-3.99 8 -4.98 8 -6 8 C-6 8.66 -6 9.32 -6 10 C-7.65 10 -9.3 10 -11 10 C-10.01 11.98 -9.02 13.96 -8 16 C-9.56 16.34 -11.12 16.67 -12.69 17 C-13.56 17.19 -14.43 17.37 -15.32 17.56 C-17.94 17.99 -20.36 18.08 -23 18 C-22.38 16.06 -22.38 16.06 -21 14 C-17.88 13.25 -17.88 13.25 -15 13 C-15.33 11.02 -15.66 9.04 -16 7 C-10.83 3.81 -5.81 1.74 0 0 Z \",fill:\"#211924\",transform:\"translate(659,247)\"})),_path1099||(_path1099=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.06 1.79 -5.11 2.21 -8.63 2.02 C-9.52 1.99 -10.4 1.95 -11.31 1.92 C-12.24 1.89 -13.17 1.85 -14.12 1.81 C-21.31 1.65 -26.89 1.7 -33.06 5.81 C-35.35 7.21 -37.37 7.6 -40 8 C-40 8.66 -40 9.32 -40 10 C-43.86 12.15 -46.55 13.39 -51 13 C-49.33 11.33 -47.67 9.67 -46 8 C-45.32 7.24 -45.32 7.24 -44.62 6.46 C-33.66 -3.42 -13.5 -2.21 0 0 Z \",fill:\"#25112E\",transform:\"translate(183,1092)\"})),_path1100||(_path1100=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.52 -0.25 -1.52 -0.25 -3.06 -0.5 C-14.3 -2.04 -14.3 -2.04 -25 0 C-27.37 0.07 -29.75 0.08 -32.12 0.06 C-33.41 0.05 -34.69 0.04 -36.01 0.04 C-37.49 0.02 -37.49 0.02 -39 0 C-39 -0.99 -39 -1.98 -39 -3 C-39.66 -3.33 -40.32 -3.66 -41 -4 C-11.51 -7.67 -11.51 -7.67 0 0 Z \",fill:\"#857194\",transform:\"translate(1158,1041)\"})),_path1101||(_path1101=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.68 -0.28 3.35 -0.61 5 -1 C1.06 3.88 -3.12 8.06 -8 12 C-8.66 11.67 -9.32 11.34 -10 11 C-12.01 11.28 -14.01 11.61 -16 12 C-15.67 9.69 -15.34 7.38 -15 5 C-14.01 4.67 -13.02 4.34 -12 4 C-12 3.01 -12 2.02 -12 1 C-10.38 0.64 -8.75 0.29 -7.12 -0.06 C-6.22 -0.26 -5.32 -0.46 -4.38 -0.66 C-2 -1 -2 -1 0 0 Z \",fill:\"#230F37\",transform:\"translate(656,729)\"})),_path1102||(_path1102=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.99 4.66 3.98 5.32 5 6 C5.7 8.58 6.25 11 6.69 13.62 C6.88 14.68 6.88 14.68 7.08 15.77 C7.4 17.51 7.7 19.25 8 21 C7.34 21.33 6.68 21.66 6 22 C6 21.34 6 20.68 6 20 C4.68 20 3.36 20 2 20 C1.67 20.66 1.34 21.32 1 22 C0.34 21.67 -0.32 21.34 -1 21 C-1.41 18.71 -1.41 18.71 -1.62 15.94 C-1.7 15.02 -1.77 14.1 -1.85 13.15 C-1.9 12.44 -1.95 11.73 -2 11 C-2.99 11.99 -3.98 12.98 -5 14 C-5.68 12.33 -5.68 12.33 -6 10 C-4.86 7.42 -4.86 7.42 -3.19 4.75 C-2.37 3.41 -2.37 3.41 -1.54 2.05 C-1.03 1.37 -0.52 0.7 0 0 Z \",fill:\"#351547\",transform:\"translate(414,479)\"})),_path1103||(_path1103=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46 -0.05 2.92 -0.09 4.38 -0.12 C5.19 -0.15 6 -0.17 6.84 -0.2 C9 0 9 0 11 2 C11 7.23 7.31 11.24 4 15 C1.29 16.35 -1.01 16.07 -4 16 C-3.01 15.34 -2.02 14.68 -1 14 C-3.97 13.5 -3.97 13.5 -7 13 C-5.62 10.24 -3.63 9.54 -1 8 C-0.34 7.34 0.32 6.68 1 6 C0.68 2.9 0.68 2.9 0 0 Z \",fill:\"#856B8A\",transform:\"translate(629,387)\"})),_path1104||(_path1104=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8 6.94 8 12.88 8 19 C3 18 3 18 0.69 15.62 C-1.59 10.73 -1.55 6.32 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#28103B\",transform:\"translate(1272,1006)\"})),_path1105||(_path1105=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 8.58 2 17.16 2 26 C2.33 26 2.66 26 3 26 C3.34 28.56 3.67 31.12 4 33.69 C4.1 34.41 4.19 35.13 4.29 35.87 C4.77 39.61 5.12 43.22 5 47 C4.01 47.5 4.01 47.5 3 48 C2.34 48.99 1.68 49.98 1 51 C-0.55 41.23 -1.3 31.78 -1.21 21.9 C-1.19 19.84 -1.19 17.78 -1.19 15.73 C-1.14 4.83 -1.14 4.83 0 0 Z \",fill:\"#190B21\",transform:\"translate(305,842)\"})),_path1106||(_path1106=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.04 1.1 2.07 2.2 2.11 3.33 C2.47 11.92 3.18 19.8 6 28 C7.65 28.33 9.3 28.66 11 29 C11 27.02 11 25.04 11 23 C11.33 23 11.66 23 12 23 C12.73 26.56 13.13 30.06 13.25 33.69 C13.29 34.81 13.29 34.81 13.33 35.95 C12.92 38.51 11.96 39.37 10 41 C6.88 36.63 4.73 32.37 2.81 27.38 C2.55 26.72 2.29 26.07 2.03 25.39 C-1.42 16.59 -1.18 9.27 0 0 Z \",fill:\"#2A1238\",transform:\"translate(1212,746)\"})),_path1107||(_path1107=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.6 0.39 1.2 0.78 1.82 1.18 C8.81 5.5 16.03 8.92 23.56 12.19 C25 12.81 25 12.81 26.46 13.45 C32.9 16.2 39.4 18.68 46 21 C44 23 44 23 41.56 23.25 C39 23 39 23 36 21 C34.74 20.61 33.48 20.22 32.19 19.81 C27.28 18.25 22.8 15.98 18.25 13.62 C14.69 11.79 11.14 10.24 7.38 8.88 C3.4 7.37 1.27 5.71 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#341446\",transform:\"translate(1090,590)\"})),_path1108||(_path1108=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.25 3.23 8.03 6.55 11 11 C10.67 11.99 10.34 12.98 10 14 C9.5 13.06 9 12.12 8.48 11.15 C5.93 7.32 2.59 6.52 -1.75 5.62 C-2.45 5.46 -3.14 5.3 -3.86 5.13 C-5.57 4.73 -7.28 4.36 -9 4 C-9 4.66 -9 5.32 -9 6 C-9.99 6.33 -10.98 6.66 -12 7 C-13.1 8.8 -13.1 8.8 -13 11 C-11.15 13.27 -11.15 13.27 -9 15 C-16.88 14.12 -16.88 14.12 -18 13 C-18.31 10.69 -18.31 10.69 -18 8 C-16.12 5.69 -16.12 5.69 -14 4 C-13.34 4 -12.68 4 -12 4 C-12 3.34 -12 2.68 -12 2 C-7.54 -0.66 -4.97 -1.85 0 0 Z \",fill:\"#775D81\",transform:\"translate(599,419)\"})),_path1109||(_path1109=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C2.31 2.33 4.62 2.66 7 3 C6.67 3.66 6.34 4.32 6 5 C3.01 6 1.51 6.21 -1.44 5 C-4.75 3.71 -6.6 4.06 -10 5 C-10.68 5.56 -11.36 6.11 -12.06 6.69 C-14 8 -14 8 -16.44 7.56 C-19.81 5.51 -21.61 3.14 -24 0 C-23.67 -0.66 -23.34 -1.32 -23 -2 C-19.53 -0.02 -19.53 -0.02 -16 2 C-15.67 1.34 -15.34 0.68 -15 0 C-15.66 0 -16.32 0 -17 0 C-17 -0.66 -17 -1.32 -17 -2 C-10.97 -3.64 -5.62 -2.55 0 0 Z \",fill:\"#7D678F\",transform:\"translate(623,397)\"})),_path1110||(_path1110=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.08 0.11 2.16 0.22 3.27 0.34 C4.09 0.43 4.91 0.53 5.75 0.62 C5.75 1.28 5.75 1.95 5.75 2.62 C4.86 2.87 3.98 3.12 3.06 3.38 C-0.37 4.67 -2.43 6.32 -5.25 8.62 C-9.01 10.18 -13.25 9.69 -17.25 9.62 C-17.54 8.99 -17.83 8.35 -18.12 7.69 C-19.08 5.47 -19.08 5.47 -21.25 4.62 C-17.47 2.79 -15.3 2.47 -11.25 3.62 C-10.92 2.97 -10.59 2.3 -10.25 1.62 C-6.79 -0.75 -4.07 -0.44 0 0 Z \",fill:\"#290E3D\",transform:\"translate(651.25,50.375)\"})),_path1111||(_path1111=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0.95 8.35 3.03 12 6 C13.19 8.62 13.19 8.62 13 11 C11.94 12.88 11.94 12.88 10 14 C5.07 13.89 1.68 12.24 -2 9 C-2.67 4.88 -2.33 3.5 0 0 Z \",fill:\"#0B1240\",transform:\"translate(995,844)\"})),_path1112||(_path1112=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.55 5.49 7.04 12.78 7.51 19.82 C5.83 17.3 4.61 15.01 3.39 12.26 C3.03 11.48 2.68 10.69 2.32 9.88 C1.51 7.82 1.51 7.82 1.51 5.82 C-2.94 6.32 -2.94 6.32 -7.49 6.82 C-7.82 7.81 -8.15 8.8 -8.49 9.82 C-9.48 10.32 -9.48 10.32 -10.49 10.82 C-11.02 12.71 -11.02 12.71 -11.27 14.97 C-11.45 16.23 -11.45 16.23 -11.63 17.52 C-11.75 18.4 -11.87 19.29 -11.99 20.2 C-12.22 21.94 -12.46 23.67 -12.71 25.41 C-12.86 26.57 -12.86 26.57 -13.02 27.76 C-13.49 29.82 -13.49 29.82 -15.49 32.82 C-17.75 26.05 -15.41 16.22 -12.61 9.76 C-11.93 8.43 -11.23 7.12 -10.49 5.82 C-10.01 4.91 -10.01 4.91 -9.52 3.98 C-7.95 1.29 -6.83 -0.04 -3.93 -1.24 C-1.49 -1.18 -1.49 -1.18 0 0 Z \",fill:\"#2B113E\",transform:\"translate(881.48828125,515.17578125)\"})),_path1113||(_path1113=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.44 2.5 1.44 5 4 C6.57 10.64 4.36 18.78 2 25 C1.01 25.66 0.02 26.32 -1 27 C-3.58 23.13 -3.08 20.19 -2.75 15.75 C-2.71 15.01 -2.67 14.27 -2.63 13.51 C-2.32 8.75 -1.47 4.54 0 0 Z \",fill:\"#160A1F\",transform:\"translate(863,464)\"})),_path1114||(_path1114=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.66 1.34 2.32 1 3 C0.95 4.85 0.96 6.71 1 8.56 C1.05 13.81 0.69 18.8 0 24 C-0.33 24 -0.66 24 -1 24 C-1 22.35 -1 20.7 -1 19 C-3.33 19.96 -3.33 19.96 -5 23 C-5.66 22.01 -6.32 21.02 -7 20 C-7.33 21.65 -7.66 23.3 -8 25 C-10.25 22.95 -11 21.99 -12 19 C-11.05 13.68 -8.71 11.75 -4.69 8.59 C-2.02 6.08 -1.17 3.43 0 0 Z \",fill:\"#351047\",transform:\"translate(877,537)\"})),_path1115||(_path1115=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.92 0.96 0.83 1.93 0.75 2.92 C0.64 4.19 0.54 5.45 0.44 6.75 C0.33 8 0.23 9.26 0.12 10.55 C0.02 13.47 0.26 15.25 1 18 C0.52 22.83 -1.06 27.31 -2.94 31.75 C-5.07 36.82 -6.25 41.94 -7.39 47.31 C-8 50 -8 50 -9 52 C-9.66 52 -10.32 52 -11 52 C-11 52.99 -11 53.98 -11 55 C-11.66 55 -12.32 55 -13 55 C-12.28 47.1 -9.55 39.71 -6.5 32.42 C-4.4 26.86 -3.72 21.04 -2.88 15.19 C-2.54 12.95 -2.21 10.72 -1.87 8.48 C-1.72 7.5 -1.58 6.52 -1.43 5.51 C-1 3 -1 3 0 0 Z \",fill:\"#260C3A\",transform:\"translate(443,341)\"})),_path1116||(_path1116=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.74 2.23 -1.47 2.46 -2.23 2.7 C-8.02 4.63 -11.97 6.22 -16 11 C-16.99 11.66 -17.98 12.32 -19 13 C-19.66 12.67 -20.32 12.34 -21 12 C-20.67 10.68 -20.34 9.36 -20 8 C-21.32 8 -22.64 8 -24 8 C-24.33 6.35 -24.66 4.7 -25 3 C-22.03 3 -19.06 3 -16 3 C-15.34 1.68 -14.68 0.36 -14 -1 C-10.02 -2.99 -3.81 -1.9 0 0 Z \",fill:\"#391A48\",transform:\"translate(274,1177)\"})),_path1117||(_path1117=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.72 0.76 1.44 1.53 2.19 2.31 C4.75 4.76 6.99 6.21 10 8 C15.04 11.63 18.29 14.82 20 21 C19.94 23.79 19.53 26.24 19 29 C18.34 29 17.68 29 17 29 C17.33 31.31 17.66 33.62 18 36 C15.82 34.26 15.06 33.44 14.7 30.62 C14.7 29.71 14.69 28.81 14.69 27.88 C14.29 21.55 11.9 17.85 8 13 C7.3 12.11 6.6 11.23 5.88 10.31 C5.26 9.55 4.64 8.79 4 8 C0 2.33 0 2.33 0 0 Z \",fill:\"#421F4F\",transform:\"translate(574,1025)\"})),_path1118||(_path1118=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26 4.18 0.48 6.9 -0.69 11.12 C-0.87 11.8 -1.05 12.47 -1.24 13.16 C-2.31 16.95 -3.58 20.53 -5.19 24.12 C-7.66 29.92 -7.71 35.78 -8 42 C-8.36 45.8 -8.79 49.37 -10 53 C-10.66 53 -11.32 53 -12 53 C-13 49.69 -13.1 46.7 -13.06 43.25 C-13.05 42.27 -13.04 41.28 -13.04 40.27 C-13.02 39.52 -13.01 38.77 -13 38 C-12.34 38 -11.68 38 -11 38 C-10.91 37.29 -10.82 36.59 -10.73 35.86 C-9.52 27.6 -7.21 20.08 -4.38 12.25 C-3.95 11.06 -3.53 9.88 -3.1 8.66 C-2.08 5.77 -1.04 2.88 0 0 Z \",fill:\"#381A43\",transform:\"translate(326,776)\"})),_path1119||(_path1119=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.5 1.98 0.5 4 1 C4 5.62 4 10.24 4 15 C10.44 17.21 16.14 17.14 22.88 16.92 C28.3 16.82 32.79 17.47 38 19 C38 19.33 38 19.66 38 20 C32.72 19.67 27.44 19.34 22 19 C22 19.66 22 20.32 22 21 C10.94 22.59 10.94 22.59 7 20 C5.88 17.94 5.88 17.94 5 16 C4.01 15.67 3.02 15.34 2 15 C-0.24 11.06 -1.25 9.04 -0.19 4.56 C0.2 3.72 0.6 2.87 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7D6283\",transform:\"translate(635,265)\"})),_path1120||(_path1120=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.8 1.19 1.59 2.38 1.38 3.6 C-0.34 14.03 -1.4 24.26 -1.62 34.84 C-1.64 35.72 -1.67 36.6 -1.69 37.5 C-1.7 38.27 -1.72 39.05 -1.73 39.84 C-2.03 42.25 -2.8 43.9 -4 46 C-4.4 41.9 -4.76 37.79 -5.12 33.69 C-5.24 32.54 -5.35 31.39 -5.46 30.21 C-6.1 22.77 -5.77 16.26 -4 9 C-3.83 8.29 -3.67 7.58 -3.49 6.85 C-2.73 3.88 -2.2 2.2 0 0 Z \",fill:\"#2F163C\",transform:\"translate(212,835)\"})),_path1121||(_path1121=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-2.62 6.96 -7.7 10.89 -14 15 C-14.99 15.66 -15.98 16.32 -17 17 C-19.26 17.41 -19.26 17.41 -21.69 17.62 C-22.5 17.7 -23.3 17.77 -24.14 17.85 C-25.06 17.93 -25.06 17.93 -26 18 C-26 16.68 -26 15.36 -26 14 C-24.84 13.4 -23.68 12.79 -22.49 12.17 C-20.95 11.36 -19.41 10.56 -17.88 9.75 C-17.11 9.35 -16.35 8.96 -15.57 8.55 C-12.15 6.75 -8.82 4.95 -5.63 2.77 C-3 1 -3 1 0 0 Z \",fill:\"#070928\",transform:\"translate(867,740)\"})),_path1122||(_path1122=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.12 3.01 3.25 4.02 3.38 5.06 C3.98 8.88 4.87 12.32 6 16 C4.38 16.84 2.75 17.67 1.12 18.5 C0.22 18.96 -0.68 19.43 -1.62 19.91 C-4 21 -4 21 -6 21 C-4.05 5.7 -4.05 5.7 0 0 Z \",fill:\"#502E57\",transform:\"translate(851,447)\"})),_path1123||(_path1123=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.99 1.67 3.98 1.34 5 1 C7.39 4.83 7.56 8.6 8 13 C8.7 12.99 9.4 12.98 10.12 12.96 C11.03 12.96 11.94 12.95 12.88 12.94 C13.78 12.93 14.68 12.91 15.62 12.9 C18 13 18 13 20 14 C19.67 14.66 19.34 15.32 19 16 C13.74 17.35 8.38 17.1 3 17 C2.67 16.01 2.34 15.02 2 14 C1.34 14 0.68 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#1C1222\",transform:\"translate(923,330)\"})),_path1124||(_path1124=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 0.31 1.88 0.31 4 1 C4.66 1.99 5.32 2.98 6 4 C8.29 5.14 10.62 6.02 13 6.94 C15 8 15 8 16 11 C15.34 10.83 14.68 10.67 14 10.5 C7.27 9.28 7.27 9.28 0.93 11.12 C-0.77 12.34 -2.39 13.66 -4 15 C-5.32 14.01 -6.64 13.02 -8 12 C-6.49 7.02 -3.44 3.76 0 0 Z \",fill:\"#7D668E\",transform:\"translate(876,299)\"})),_path1125||(_path1125=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3 3.98 3 5.96 3 8 C-5.91 7.67 -14.82 7.34 -24 7 C-23.01 6.67 -22.02 6.34 -21 6 C-21 5.34 -21 4.68 -21 4 C-7.01 -0.78 -7.01 -0.78 0 0 Z \",fill:\"#897795\",transform:\"translate(677,249)\"})),_path1126||(_path1126=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.8 0.41 1.61 0.83 2.44 1.25 C2.44 1.91 2.44 2.57 2.44 3.25 C2.97 3.5 3.51 3.74 4.06 4 C7 5.55 9.7 7.38 12.44 9.25 C11.45 9.58 10.46 9.91 9.44 10.25 C8.57 9.63 7.71 9.01 6.81 8.38 C2.66 5.76 -0.69 5.14 -5.56 5.25 C-8.38 6.01 -8.38 6.01 -10.56 7.25 C-14.04 8.41 -16.92 8.32 -20.56 8.25 C-20.89 8.91 -21.22 9.57 -21.56 10.25 C-24.2 9.59 -26.84 8.93 -29.56 8.25 C-29.23 7.59 -28.9 6.93 -28.56 6.25 C-26.25 5.69 -26.25 5.69 -23.56 5.25 C-22.94 5.09 -22.33 4.92 -21.69 4.75 C-19.56 4.25 -19.56 4.25 -16.38 3.94 C-13 3.33 -11 2.57 -8 1.06 C-4.58 -0.57 -3.89 -0.82 0 0 Z \",fill:\"#341047\",transform:\"translate(664.5625,56.75)\"})),_path1127||(_path1127=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.37 7.02 0.85 13.51 -0.5 20.38 C-2.12 28.74 -3.74 37.84 -0.96 46.08 C0.96 51.9 -0.28 58.56 -3 64 C-3.66 64 -4.32 64 -5 64 C-4.99 63.34 -4.99 62.68 -4.98 62 C-4.96 59.02 -4.95 56.04 -4.94 53.06 C-4.93 52.02 -4.92 50.98 -4.91 49.91 C-4.91 48.92 -4.91 47.93 -4.9 46.91 C-4.9 45.99 -4.89 45.08 -4.89 44.13 C-4.76 42.02 -4.76 42.02 -6 41 C-5.95 35.54 -4.88 30.27 -3.56 25 C-1.55 16.76 -0.8 8.42 0 0 Z \",fill:\"#401E50\",transform:\"translate(612,1159)\"})),_path1128||(_path1128=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.7 0.46 8.25 1.94 12.42 3.98 C21.83 8.69 21.83 8.69 32.15 8.7 C34.29 7.97 34.29 7.97 37 6 C39.34 6.3 41.67 6.63 44 7 C46.32 6.65 46.32 6.65 48 6 C47.02 8.86 46.04 9.97 43.56 11.75 C31.96 15.82 21.22 11.05 10.56 6.5 C9.86 6.2 9.16 5.91 8.44 5.6 C5.12 4.14 2.3 2.87 0 0 Z \",fill:\"#3A174A\",transform:\"translate(238,1142)\"})),_path1129||(_path1129=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 2.31 0.66 4.62 1 7 C-2.8 9.21 -6.76 10.01 -11 11 C-11 12.32 -11 13.64 -11 15 C-12.32 15.33 -13.64 15.66 -15 16 C-16.25 9.38 -16.25 9.38 -14 6 C-13.01 5.34 -12.02 4.68 -11 4 C-10.67 3.34 -10.34 2.68 -10 2 C-9.01 2 -8.02 2 -7 2 C-7 1.34 -7 0.68 -7 0 C-3.87 -1.04 -3.01 -0.93 0 0 Z \",fill:\"#3E1D4A\",transform:\"translate(1236,839)\"})),_path1130||(_path1130=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.25 1.11 0.5 1.69 0.75 C-2.18 10.18 -15.59 14.61 -24.31 18.75 C-24.31 18.09 -24.31 17.43 -24.31 16.75 C-25.3 17.08 -26.29 17.41 -27.31 17.75 C-26.12 14.17 -25.43 13.96 -22.23 12.19 C-21.4 11.72 -20.57 11.25 -19.71 10.77 C-18.4 10.05 -18.4 10.05 -17.06 9.31 C-0.25 -0.03 -0.25 -0.03 0 0 Z \",fill:\"#1B131F\",transform:\"translate(720.3125,597.25)\"})),_path1131||(_path1131=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.84 2.6 8.48 5.11 11.82 10.57 C12.48 11.23 13.14 11.89 13.82 12.57 C14.81 14.05 14.81 14.05 15.82 15.57 C14.5 15.9 13.18 16.23 11.82 16.57 C11.82 17.89 11.82 19.21 11.82 20.57 C11.16 20.57 10.5 20.57 9.82 20.57 C9.57 20.05 9.33 19.53 9.08 18.99 C5.12 10.63 5.12 10.63 -2.43 5.75 C-4.29 5.17 -4.29 5.17 -6.18 4.57 C-6.18 3.58 -6.18 2.59 -6.18 1.57 C-3.87 0.1 -2.74 -0.54 0 0 Z \",fill:\"#150F18\",transform:\"translate(519.18359375,309.43359375)\"})),_path1132||(_path1132=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-1.31 2.33 -3.62 2.66 -6 3 C-6 2.34 -6 1.68 -6 1 C-6.66 1.22 -7.33 1.43 -8.01 1.66 C-8.89 1.93 -9.78 2.21 -10.69 2.5 C-11.99 2.92 -11.99 2.92 -13.32 3.34 C-15.99 4 -18.26 4.12 -21 4 C-21 4.66 -21 5.32 -21 6 C-22.07 6.39 -23.14 6.78 -24.25 7.19 C-27.89 8.72 -29.77 10.7 -32 14 C-37.71 13.58 -40.61 11.42 -45 8 C-43.68 7.67 -42.36 7.34 -41 7 C-40.67 7.99 -40.34 8.98 -40 10 C-34.5 8.84 -32.21 7.59 -29 3 C-25.32 0.54 -23.86 1.3 -19.68 1.91 C-15.49 2.05 -11.77 0.81 -7.8 -0.41 C-4.78 -1.05 -2.92 -0.95 0 0 Z \",fill:\"#705275\",transform:\"translate(700,182)\"})),_path1133||(_path1133=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.04 1.66 5.58 3.48 8.12 5.81 C12.57 9.75 17.74 12.32 23 15 C23 15.66 23 16.32 23 17 C24.52 17.65 24.52 17.65 26.06 18.31 C26.7 18.59 27.33 18.86 27.98 19.14 C29.3 19.7 30.62 20.24 31.95 20.76 C35.45 22.15 36.86 22.78 39 26 C38.34 26.66 37.68 27.32 37 28 C33.02 27.65 29.64 26.61 26 25 C26 24.34 26 23.68 26 23 C25.34 23 24.68 23 24 23 C22 20.5 22 20.5 20 18 C18.03 16.26 16.06 14.63 14 13 C13.19 12.34 12.37 11.69 11.53 11.01 C6.7 7.09 6.7 7.09 1.7 3.38 C1.14 2.93 0.58 2.47 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A164A\",transform:\"translate(1011,577)\"})),_path1134||(_path1134=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.64 0.61 4.64 0.61 7 2 C8.17 4.21 8.79 6.29 9.39 8.71 C10.01 11.02 10.9 12.89 12 15 C12.27 15.85 12.54 16.69 12.81 17.56 C14.31 20.63 16.07 21.38 19 23 C19 23.66 19 24.32 19 25 C14.02 23.76 11.84 22.27 9 18 C8.29 16.69 7.61 15.36 7 14 C5.68 14.99 4.36 15.98 3 17 C2.82 16.41 2.64 15.82 2.45 15.21 C1.04 10.79 -0.38 6.87 -3 3 C-2.01 2.01 -1.02 1.02 0 0 Z \",fill:\"#2C123E\",transform:\"translate(560,118)\"})),_path1135||(_path1135=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.18 6.24 -4.31 8.14 -9 11 C-10.03 11.63 -11.06 12.26 -12.12 12.91 C-19.84 17.52 -24.99 19.67 -34 19 C-37.56 18 -37.56 18 -40 17 C-40 16.67 -40 16.34 -40 16 C-39.2 15.99 -38.4 15.97 -37.58 15.96 C-29.1 15.59 -22.57 13.77 -15 10 C-14.16 9.58 -13.32 9.16 -12.46 8.73 C-7.82 6.28 -3.91 3.51 0 0 Z \",fill:\"#281232\",transform:\"translate(401,1204)\"})),_path1136||(_path1136=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.55 3.72 2.09 4.44 1.62 5.19 C-0.04 7.89 -0.04 7.89 -0.94 10.56 C-2 13 -2 13 -3.87 14.81 C-10.48 21.59 -12.66 29.96 -12.8 39.19 C-13 42.01 -13.55 43.61 -15 46 C-17.11 37.57 -16.19 28.33 -14 20 C-12.52 17.69 -11.24 16.68 -9 15 C-8.34 14.01 -7.68 13.02 -7 12 C-6.01 12 -5.02 12 -4 12 C-3.82 11.08 -3.82 11.08 -3.63 10.14 C-3.47 9.33 -3.3 8.52 -3.12 7.69 C-2.96 6.89 -2.8 6.09 -2.63 5.26 C-2 3 -2 3 0 0 Z \",fill:\"#331445\",transform:\"translate(589,805)\"})),_path1137||(_path1137=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.9 1.3 4.95 2.55 7 5 C7.96 7.97 8.42 10.92 9 14 C13.29 14 17.58 14 22 14 C20 18 20 18 18.05 18.9 C13.1 19.92 9.67 20.39 5 18 C2.56 16.12 2.56 16.12 1 14 C1.19 11.78 1.42 10.58 3 9 C3.33 6.54 3.33 6.54 3 4 C2.01 3.34 1.02 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(590,434)\"})),_path1138||(_path1138=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 5 2 C5 2.66 5 3.32 5 4 C5.62 4.27 6.24 4.54 6.88 4.81 C9 6 9 6 11 9 C11 10.32 11 11.64 11 13 C7.78 11.58 5.64 9.83 3.12 7.38 C0.27 4.79 -0.57 4.05 -4.5 3.56 C-5.33 3.71 -6.15 3.85 -7 4 C-8.32 6.64 -9.64 9.28 -11 12 C-11.66 12 -12.32 12 -13 12 C-13 11.34 -13 10.68 -13 10 C-13.66 10 -14.32 10 -15 10 C-14.79 6.27 -14 5 -11.44 2.19 C-7.61 -0.74 -4.71 -0.52 0 0 Z \",fill:\"#423149\",transform:\"translate(887,308)\"})),_path1139||(_path1139=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86 1.31 3.87 2.26 5.31 5.06 C5.31 7.04 5.31 9.02 5.31 11.06 C0.03 11.06 -5.25 11.06 -10.69 11.06 C-8.77 5.3 -6.95 0.16 0 0 Z \",fill:\"#121745\",transform:\"translate(906.6875,1268.9375)\"})),_path1140||(_path1140=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 2.33 3.98 2.66 5 3 C10.49 9.14 10.25 14.12 10 22 C9.73 26.01 9.39 30 9 34 C6.17 31.17 6.47 28.82 6.06 24.88 C5.24 17.79 4.01 12.01 0 6 C-0.12 2.81 -0.12 2.81 0 0 Z \",fill:\"#593960\",transform:\"translate(1014,1173)\"})),_path1141||(_path1141=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75 1 2.75 1 4.75 2 C4.75 2.99 4.75 3.98 4.75 5 C5.68 5.25 6.61 5.5 7.56 5.75 C10.91 7.06 11.94 7.98 13.75 11 C12.1 11 10.45 11 8.75 11 C8.42 10.01 8.09 9.02 7.75 8 C3.11 5.79 -0.28 6.01 -5.25 7 C-5.86 9.67 -6.25 11.94 -6.12 14.69 C-6.17 15.45 -6.21 16.21 -6.25 17 C-7.24 17.66 -8.23 18.32 -9.25 19 C-10.9 17.35 -12.55 15.7 -14.25 14 C-12.92 11.34 -11.14 9.3 -9.25 7 C-8.79 6.37 -8.33 5.73 -7.86 5.08 C-4 0 -4 0 0 0 Z \",fill:\"#71577D\",transform:\"translate(587.25,554)\"})),_path1142||(_path1142=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.19 2.31 0.19 5 1 C6.03 2.65 7.02 4.32 8 6 C11.07 8.3 11.07 8.3 14 10 C12.5 14.01 10.23 15.4 6.62 17.56 C-0.05 21.09 -0.05 21.09 -4 27 C-5.65 27.33 -7.3 27.66 -9 28 C-9 25.31 -9 25.31 -8 22 C-5.56 19.9 -2.85 18.47 0 17 C1.67 16.1 1.67 16.1 3.38 15.19 C6 14 6 14 8 14 C7.57 11.1 6.87 9.84 5 7.5 C3.08 5.1 2.62 3.89 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#624268\",transform:\"translate(593,515)\"})),_path1143||(_path1143=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3 2.32 3 3 3 C3.2 5.92 3.38 8.83 3.56 11.75 C3.62 12.57 3.67 13.4 3.73 14.25 C3.78 15.05 3.83 15.85 3.88 16.67 C3.93 17.41 3.97 18.14 4.02 18.89 C4 21.08 3.61 22.9 3 25 C0 24 0 24 -1.62 21.06 C-4.01 14.99 -4.06 8.44 -4 2 C-2.68 1.34 -1.36 0.68 0 0 Z \",fill:\"#1E0D31\",transform:\"translate(886,491)\"})),_path1144||(_path1144=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.19 0.06 2.19 0.06 5 1 C6.41 2.65 7.55 4.39 8.73 6.22 C10.45 8.63 12.67 10.2 15 12 C15 12.66 15 13.32 15 14 C15.78 14.31 16.57 14.62 17.38 14.94 C20 16 20 16 22 17 C22 17.99 22 18.98 22 20 C22.66 20.33 23.32 20.66 24 21 C23.01 21.33 22.02 21.66 21 22 C19.66 21.01 18.33 20.01 17 19 C14.92 18.24 12.83 17.57 10.71 16.94 C9 16 9 16 8.26 13.9 C8.18 13.27 8.09 12.65 8 12 C7.34 12 6.68 12 6 12 C5.77 11.05 5.55 10.1 5.31 9.12 C4.31 5.81 4.31 5.81 1.38 4.62 C0.59 4.42 -0.19 4.21 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#1E1522\",transform:\"translate(528,440)\"})),_path1145||(_path1145=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.87 0.53 0.87 0.53 1.75 1.06 C4.4 2.17 5.33 1.8 8 1 C8.34 2.02 8.68 3.05 9.02 4.11 C9.47 5.47 9.92 6.83 10.38 8.19 C10.6 8.86 10.82 9.53 11.05 10.23 C12.25 13.87 13.53 17.46 15 21 C13.82 20.69 13.82 20.69 12.62 20.38 C11.33 20.19 11.33 20.19 10 20 C9.34 20.66 8.68 21.32 8 22 C8 21.01 8 20.02 8 19 C7.34 19 6.68 19 6 19 C5.18 16.96 4.37 14.92 3.56 12.88 C3.11 11.74 2.66 10.6 2.19 9.43 C1.09 6.26 0.44 3.32 0 0 Z \",fill:\"#1D1421\",transform:\"translate(568,328)\"})),_path1146||(_path1146=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 0.44 2.06 0.44 4 1 C4.75 2.62 4.75 2.62 5 5 C3.73 7.04 2.4 9.05 1 11 C1 11.66 1 12.32 1 13 C0.01 13 -0.98 13 -2 13 C-2.33 13.66 -2.66 14.32 -3 15 C-5.34 14.74 -7.68 14.41 -10 14 C-10.33 13.34 -10.66 12.68 -11 12 C-9.68 12 -8.36 12 -7 12 C-6.58 9.13 -6.58 9.13 -7 6 C-9.41 4.14 -9.41 4.14 -12 3 C-12 2.67 -12 2.34 -12 2 C-11.22 1.94 -10.44 1.88 -9.63 1.82 C-8.62 1.73 -7.61 1.65 -6.56 1.56 C-5.55 1.48 -4.54 1.4 -3.5 1.32 C-1.06 1.27 -1.06 1.27 0 0 Z \",fill:\"#160F1A\",transform:\"translate(607,311)\"})),_path1147||(_path1147=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.15 2.13 5.69 4.03 8 8 C13.04 14.79 18.17 18.81 26 22 C26 22.66 26 23.32 26 24 C26.66 24 27.32 24 28 24 C28.33 25.98 28.66 27.96 29 30 C28.22 29.44 27.43 28.89 26.62 28.31 C23.89 26.44 21.11 25.18 18.06 23.88 C12.05 20.94 9.4 16.59 6 11 C4.86 9.33 3.71 7.66 2.56 6 C0 2.25 0 2.25 0 0 Z \",fill:\"#44214F\",transform:\"translate(811,171)\"})),_path1148||(_path1148=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.86 0.46 1.86 0.46 3.75 0.94 C8.7 2.83 12.47 6.56 16.34 10.06 C19.46 12.86 22.14 14.47 26 16 C26.81 19.12 26.81 19.12 27 22 C26.01 21.13 25.02 20.27 24 19.38 C20.64 16.47 17.13 13.86 13.5 11.3 C13.01 10.87 12.51 10.44 12 10 C12 9.34 12 8.68 12 8 C10.88 7.71 10.88 7.71 9.73 7.41 C8.75 7.15 7.76 6.89 6.75 6.62 C5.78 6.37 4.8 6.11 3.8 5.85 C1 5 1 5 -1.16 3.91 C-3.78 2.62 -6.12 2.87 -9 3 C-9 2.34 -9 1.68 -9 1 C-12.3 1.33 -15.6 1.66 -19 2 C-19.33 1.34 -19.66 0.68 -20 0 C-12.7 -1.77 -7.18 -2.3 0 0 Z \",fill:\"#3D1D49\",transform:\"translate(639,114)\"})),_path1149||(_path1149=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 3.47 4 C3.58 13.19 0.84 21.36 -2 30 C-3.65 30.33 -5.3 30.66 -7 31 C-6.78 30.37 -6.57 29.74 -6.34 29.09 C-4.51 23.46 -3.79 18.9 -4 13 C-3.67 12.67 -3.34 12.34 -3 12 C-2.86 10.93 -2.71 9.86 -2.56 8.75 C-2.07 5.48 -1.36 2.99 0 0 Z \",fill:\"#230E37\",transform:\"translate(417,439)\"})),_path1150||(_path1150=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C6.13 5.88 6.59 11.18 5 16 C1.32 18.53 -2.66 18.57 -7 19 C-7.33 17.02 -7.66 15.04 -8 13 C-7.01 13.33 -6.02 13.66 -5 14 C-4.01 12.35 -3.02 10.7 -2 9 C-1.01 9.33 -0.02 9.66 1 10 C0.67 6.7 0.34 3.4 0 0 Z \",fill:\"#2B1538\",transform:\"translate(895,435)\"})),_path1151||(_path1151=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.43 1.11 4.87 2.23 5.31 3.38 C6.7 7.18 6.7 7.18 10 9 C11.27 11.12 11.27 11.12 12.52 13.72 C12.96 14.65 13.41 15.58 13.87 16.54 C14.32 17.52 14.78 18.49 15.25 19.5 C15.96 20.96 15.96 20.96 16.68 22.46 C19.24 27.87 19.24 27.87 20 30 C19.67 30.66 19.34 31.32 19 32 C18.34 31.01 17.68 30.02 17 29 C16.01 29 15.02 29 14 29 C10.77 23.21 7.58 17.41 4.43 11.58 C3.46 9.82 2.42 8.1 1.32 6.42 C0 4 0 4 0 0 Z M8 11 C9 13 9 13 9 13 Z M9 13 C10 15 10 15 10 15 Z M10 15 C11 17 11 17 11 17 Z M12 19 C12.33 20.65 12.66 22.3 13 24 C13.33 23.01 13.66 22.02 14 21 C13.34 20.34 12.68 19.68 12 19 Z \",fill:\"#301839\",transform:\"translate(963,411)\"})),_path1152||(_path1152=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.79 3.41 -1.76 6.72 -3 10 C-5 11 -5 11 -7.38 10.94 C-9.97 10.81 -9.97 10.81 -11.94 12 C-14.69 13.33 -16.99 13.14 -20 13 C-20.93 10.39 -21.15 9.36 -20.06 6.75 C-19.54 5.88 -19.54 5.88 -19 5 C-18.3 5.23 -17.6 5.45 -16.88 5.69 C-12.33 6.18 -9.36 4.08 -5.88 1.31 C-4 0 -4 0 0 0 Z \",fill:\"#140E17\",transform:\"translate(628,252)\"})),_path1153||(_path1153=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.22 3.34 -3.57 4.03 -7 6 C-13.48 9.87 -18.32 14.07 -23 20 C-25 19 -25 19 -25.77 17.14 C-26 15 -26 15 -25.17 13.32 C-19.44 6.72 -9.16 -2.54 0 0 Z \",fill:\"#1A0D28\",transform:\"translate(170,1139)\"})),_path1154||(_path1154=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.65 2.66 3.3 3 5 C2.34 5 1.68 5 1 5 C-1.77 11.42 -1.08 17.76 -0.83 24.59 C-0.7 31.25 -1.72 36.74 -4 43 C-4.66 43 -5.32 43 -6 43 C-5.84 41.72 -5.67 40.44 -5.5 39.12 C-4.78 32.57 -4.58 26.19 -5.75 19.69 C-6.56 13.53 -4.29 7.65 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#240F38\",transform:\"translate(868,491)\"})),_path1155||(_path1155=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 1.34 3.64 0.68 5 0 C4.38 1.81 4.38 1.81 3 4 C1.68 4.63 1.68 4.63 0.32 5.27 C-3.62 7.32 -6.39 9.87 -9.56 12.94 C-17.9 20.89 -17.9 20.89 -21 23 C-21.99 22.67 -22.98 22.34 -24 22 C-23.53 17.75 -21.15 15.7 -18 13 C-17.01 13 -16.02 13 -15 13 C-14.81 12.44 -14.61 11.88 -14.41 11.3 C-12.41 8.04 -9.51 6.31 -6.38 4.25 C-5.46 3.63 -5.46 3.63 -4.52 3 C-3.02 1.99 -1.51 1 0 0 Z \",fill:\"#0A0F36\",transform:\"translate(1058,1068)\"})),_path1156||(_path1156=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.25 0.56 3.25 0.56 4.79 2.24 C6.16 4.33 7.35 6.23 8.25 8.56 C7.25 11.56 7.25 11.56 5.25 13.56 C6.24 13.23 7.23 12.9 8.25 12.56 C8.25 13.55 8.25 14.54 8.25 15.56 C5.44 16.25 5.44 16.25 2.25 16.56 C-0.4 14.76 -1.38 12.39 -2.75 9.56 C-3.41 8.9 -4.07 8.24 -4.75 7.56 C-4.06 0.83 -4.06 0.83 0 0 Z \",fill:\"#7D6790\",transform:\"translate(655.75,490.4375)\"})),_path1157||(_path1157=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0.75 3 0.75 6 2.75 C6.66 2.42 7.32 2.09 8 1.75 C9.8 2.35 9.8 2.35 11.88 3.38 C12.89 3.86 12.89 3.86 13.93 4.35 C16.53 6.11 18.14 8.24 20 10.75 C9.85 10.72 2.89 8.51 -6 3.75 C-6 3.09 -6 2.43 -6 1.75 C-3 -0.25 -3 -0.25 0 0 Z \",fill:\"#836E90\",transform:\"translate(609,371.25)\"})),_path1158||(_path1158=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.73 2.18 3.11 4.12 3.88 7.5 C3.95 9.83 3.97 12.17 3.88 14.5 C1.89 14.5 -0.09 14.5 -2.12 14.5 C-2.46 15.49 -2.78 16.48 -3.12 17.5 C-4.61 16.42 -4.61 16.42 -6.12 14.5 C-6.42 11.36 -6.42 11.36 -6.31 7.81 C-6.29 6.63 -6.26 5.45 -6.23 4.24 C-6.2 3.33 -6.16 2.43 -6.12 1.5 C-2.39 -0.56 -2.39 -0.56 0 0 Z \",fill:\"#523159\",transform:\"translate(906.125,336.5)\"})),_path1159||(_path1159=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.33 0.4 1.33 0.4 2.69 0.8 C5 1.69 5 1.69 7 3.69 C7.62 5.81 7.62 5.81 8 7.69 C5.94 9.38 5.94 9.38 3 10.69 C-0.44 9.38 -0.44 9.38 -4 7.69 C-7.29 7.43 -7.29 7.43 -10 7.69 C-10.33 6.37 -10.66 5.05 -11 3.69 C-10.01 3.36 -9.02 3.03 -8 2.69 C-7.67 1.7 -7.34 0.71 -7 -0.31 C-4.22 -1.7 -2.93 -0.9 0 0 Z \",fill:\"#45245B\",transform:\"translate(504,231.3125)\"})),_path1160||(_path1160=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 0.03 1.21 0.03 2.44 0.06 C1.82 0.27 1.2 0.48 0.56 0.69 C-2.41 2.61 -2.55 4.75 -3.56 8.06 C-4.54 9.08 -5.54 10.08 -6.56 11.06 C-7.96 13.38 -9.27 15.69 -10.56 18.06 C-11.05 18.94 -11.54 19.82 -12.05 20.72 C-14.84 25.75 -17.43 30.72 -19.56 36.06 C-20.22 36.06 -20.88 36.06 -21.56 36.06 C-21.89 37.38 -22.22 38.7 -22.56 40.06 C-23.39 34.13 -21.95 30.04 -19.31 24.75 C-19.01 24.14 -18.71 23.53 -18.4 22.9 C-16.55 19.34 -14.74 17.41 -11.56 15.06 C-10.84 13.42 -10.17 11.75 -9.56 10.06 C-8.58 8.45 -7.56 6.87 -6.5 5.31 C-5.97 4.53 -5.45 3.76 -4.9 2.95 C-2.86 0.07 -2.86 0.07 0 0 Z \",fill:\"#1D0E2A\",transform:\"translate(598.5625,801.9375)\"})),_path1161||(_path1161=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.03 5.56 -2.62 11.72 -6.92 15.84 C-10.02 19.06 -11.86 22.94 -13.91 26.87 C-16.1 30.89 -18.34 33.3 -22 36 C-22.66 36.99 -23.32 37.98 -24 39 C-25.66 40.02 -27.32 41.02 -29 42 C-30.75 43.58 -30.75 43.58 -32 45 C-30.73 40.03 -28.91 37.33 -25 34 C-24.34 34 -23.68 34 -23 34 C-22.9 33.4 -22.81 32.81 -22.71 32.19 C-21.84 29.52 -20.82 28.74 -18.69 26.94 C-12.14 20.72 -7.84 12.63 -3.2 4.96 C-2.17 3.28 -1.09 1.64 0 0 Z \",fill:\"#401D4F\",transform:\"translate(402,632)\"})),_path1162||(_path1162=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28 2.57 0.97 4.1 0.69 6.94 C0.57 8.25 0.57 8.25 0.45 9.59 C0 12 0 12 -2 15 C-4.99 13.61 -7.66 12.34 -10 10 C-10.94 7.34 -11.45 4.78 -12 2 C-7.88 0 -4.55 -0.18 0 0 Z \",fill:\"#291F2C\",transform:\"translate(652,310)\"})),_path1163||(_path1163=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 1.25 2.44 1.25 5 3 C5.62 5.12 5.62 5.12 6 7 C6.99 7.33 7.98 7.66 9 8 C10.35 10.34 11.54 12.62 12.69 15.06 C13.01 15.73 13.33 16.39 13.66 17.07 C14.45 18.71 15.23 20.35 16 22 C12.15 23.28 10.6 22.41 6.81 21.06 C5.73 20.68 4.64 20.3 3.52 19.91 C2.69 19.61 1.86 19.31 1 19 C2.32 18.01 3.64 17.02 5 16 C4.17 10.06 2.81 5.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#826D8F\",transform:\"translate(761,259)\"})),_path1164||(_path1164=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.18 5.88 -7.75 9.04 -13.02 11.89 C-15.4 13.22 -17.69 14.68 -20 16.12 C-23.97 18.53 -27.47 20.02 -32 21 C-31.36 20.4 -30.72 19.8 -30.06 19.19 C-27.8 17.09 -27.8 17.09 -27 14 C-25.37 12.88 -25.37 12.88 -23.29 11.84 C-22.54 11.46 -21.79 11.08 -21.02 10.68 C-20.23 10.29 -19.44 9.9 -18.62 9.5 C-17.07 8.72 -15.52 7.94 -13.98 7.16 C-13.29 6.81 -12.6 6.47 -11.89 6.12 C-9.92 4.95 -8.57 3.64 -7 2 C-4.32 0.41 -3.18 0 0 0 Z \",fill:\"#230F36\",transform:\"translate(612,68)\"})),_path1165||(_path1165=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.68 0.29 1.36 0.58 2.06 0.88 C2.39 1.87 2.72 2.86 3.06 3.88 C2.09 5.56 1.09 7.22 0.06 8.88 C-0.64 11.57 -0.64 11.57 -0.94 13.88 C-4.24 13.88 -7.54 13.88 -10.94 13.88 C-10.82 7.03 -10.82 7.03 -8.49 3.97 C-3.99 -0.17 -3.99 -0.17 0 0 Z \",fill:\"#2C123E\",transform:\"translate(329.9375,1266.125)\"})),_path1166||(_path1166=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.99 -1.32 1.98 -2 3 C-4.61 3.14 -7.03 3.13 -9.62 3 C-18.21 2.74 -18.21 2.74 -26 6 C-27.27 8.76 -27.6 10.94 -28 14 C-31.84 13.22 -31.84 13.22 -33.31 11.25 C-34.16 8.49 -33.64 6.78 -33 4 C-21.5 -0.47 -12.24 -1.53 0 0 Z \",fill:\"#0B133D\",transform:\"translate(676,873)\"})),_path1167||(_path1167=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.58 0.22 1.17 0.43 1.77 0.66 C0.65 4.03 0.06 4.43 -2.76 6.36 C-3.49 6.87 -4.22 7.37 -4.97 7.89 C-6.12 8.67 -6.12 8.67 -7.29 9.47 C-8.78 10.5 -10.27 11.52 -11.76 12.55 C-12.5 13.06 -13.24 13.56 -14.01 14.08 C-16.91 16.14 -19.67 18.38 -22.4 20.66 C-24.23 21.66 -24.23 21.66 -26.46 21.32 C-27.34 20.99 -27.34 20.99 -28.23 20.66 C-28.23 20 -28.23 19.34 -28.23 18.66 C-26.7 17.33 -26.7 17.33 -24.57 15.83 C-23.8 15.28 -23.02 14.72 -22.22 14.15 C-21.4 13.58 -20.58 13 -19.73 12.41 C-18.13 11.28 -16.54 10.15 -14.95 9.02 C-14.16 8.46 -13.37 7.91 -12.56 7.34 C-9.63 5.22 -6.82 2.95 -4.04 0.63 C-2.23 -0.34 -2.23 -0.34 0 0 Z \",fill:\"#483750\",transform:\"translate(786.228515625,554.3427734375)\"})),_path1168||(_path1168=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1.4 5.76 1.68 9.05 1.96 C9.2 2.92 9.2 2.92 9.36 3.89 C9.7 4.92 9.7 4.92 10.05 5.96 C11.04 6.29 12.03 6.62 13.05 6.96 C12.72 7.95 12.39 8.94 12.05 9.96 C12.44 12.1 12.44 12.1 13.05 13.96 C4.24 8.54 4.24 8.54 1.3 4.71 C-1.7 1.04 -4.29 0.25 -8.89 -0.56 C-9.9 -0.66 -10.91 -0.76 -11.95 -0.86 C-12.96 -0.97 -13.97 -1.07 -15.02 -1.19 C-18.49 -1.02 -20.06 0.12 -22.95 1.96 C-25.7 2.32 -28.16 2.1 -30.95 1.96 C-23.31 -5.69 -8.84 -4.56 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(662.953125,52.04296875)\"})),_path1169||(_path1169=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.62 3.75 2.62 3.75 1 7 C-1.48 8.3 -3.93 9.18 -6.59 10.04 C-9.06 11.02 -10.29 12 -12 14 C-12 12.35 -12 10.7 -12 9 C-12.52 9.2 -13.04 9.4 -13.57 9.61 C-17.01 10.16 -19.54 9.28 -22.88 8.31 C-24.07 7.98 -25.26 7.64 -26.49 7.3 C-30.21 5.92 -32.81 4.32 -36 2 C-34 1 -34 1 -31.94 1.52 C-31.16 1.8 -30.37 2.09 -29.56 2.38 C-28.78 2.65 -28 2.93 -27.19 3.21 C-26.47 3.47 -25.75 3.73 -25 4 C-20.83 5.39 -16.87 5.3 -12.5 5.38 C-11.63 5.41 -10.76 5.45 -9.87 5.49 C-7.48 5.52 -5.34 5.51 -3 5 C-0.81 2.65 -0.81 2.65 0 0 Z \",fill:\"#311442\",transform:\"translate(286,1152)\"})),_path1170||(_path1170=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C4.25 7.39 4.25 7.39 3.02 10.38 C1.84 13.41 1.86 15.57 2 18.81 C2.1 23.96 1.51 28.09 0 33 C-0.66 33 -1.32 33 -2 33 C-2.06 28.44 -2.09 23.88 -2.12 19.31 C-2.14 18.02 -2.16 16.73 -2.18 15.39 C-2.18 14.15 -2.19 12.9 -2.2 11.61 C-2.21 10.47 -2.22 9.32 -2.23 8.14 C-2 5.01 -1.33 2.82 0 0 Z \",fill:\"#381A43\",transform:\"translate(214,845)\"})),_path1171||(_path1171=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3.46 7.13 2.57 11.93 1.56 16.94 C0.17 24.21 -0.45 31.31 -0.69 38.71 C-0.98 41.73 -1.41 43.46 -3 46 C-2.98 45.32 -2.95 44.64 -2.93 43.94 C-2.77 35.14 -3.77 26.69 -5 18 C-4.34 18 -3.68 18 -3 18 C-2.95 17.12 -2.9 16.24 -2.85 15.33 C-2.78 14.17 -2.7 13.01 -2.62 11.81 C-2.56 10.66 -2.49 9.52 -2.41 8.33 C-2.02 5.2 -1.32 2.85 0 0 Z \",fill:\"#401D51\",transform:\"translate(319,811)\"})),_path1172||(_path1172=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67 -0.04 3.33 -0.04 5 0 C5.33 0.33 5.66 0.66 6 1 C9.55 1.24 13.1 1.4 16.65 1.52 C23.74 1.84 23.74 1.84 27 4 C27 4.66 27 5.32 27 6 C26.08 5.95 25.16 5.91 24.22 5.86 C16.51 5.63 11.58 5.95 5 10 C4.34 10 3.68 10 3 10 C3 9.01 3 8.02 3 7 C1.68 6.67 0.36 6.34 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#0E0A12\",transform:\"translate(628,297)\"})),_path1173||(_path1173=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.39 8.67 1.54 15.87 -1.92 23.97 C-3.57 28.61 -4.18 33.35 -4.92 38.21 C-5.95 44.9 -7.36 51.43 -9 58 C-9.33 58 -9.66 58 -10 58 C-9.89 55.75 -9.76 53.5 -9.62 51.25 C-9.56 50 -9.49 48.74 -9.41 47.45 C-9 44 -9 44 -8.01 42.11 C-6.81 39.6 -6.59 37.57 -6.37 34.8 C-6.24 33.33 -6.24 33.33 -6.11 31.83 C-6.03 30.81 -5.96 29.8 -5.88 28.75 C-5.79 27.72 -5.7 26.69 -5.61 25.62 C-5.4 23.08 -5.2 20.54 -5 18 C-4.34 18 -3.68 18 -3 18 C-2.34 14.37 -1.68 10.74 -1 7 C-2.98 7.33 -4.96 7.66 -7 8 C-5.74 4.23 -4.34 3.92 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#351546\",transform:\"translate(526,178)\"})),_path1174||(_path1174=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.38 1.29 2.71 2.63 4 4 C4 4.66 4 5.32 4 6 C5.83 6.4 5.83 6.4 7.69 6.81 C12.49 8.03 15.76 9.72 19.25 13.31 C24.1 18.05 29.18 21.99 36 23 C36 23.66 36 24.32 36 25 C30.88 26.22 30.88 26.22 28 26 C25.44 23.38 25.44 23.38 24.24 21.68 C19.74 15.61 11.77 12.87 5.11 9.84 C1.78 7.87 0.46 6.56 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#775878\",transform:\"translate(633,173)\"})),_path1175||(_path1175=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.11 1.2 4.69 2.45 6.75 5.06 C6.75 5.72 6.75 6.38 6.75 7.06 C5.88 7.14 5.88 7.14 4.99 7.21 C0.3 7.66 -3.79 8.43 -8.25 10.06 C-8.91 10.06 -9.57 10.06 -10.25 10.06 C-10.75 10.56 -11.24 11.05 -11.75 11.56 C-12.25 12.06 -12.74 12.55 -13.25 13.06 C-13.91 13.06 -14.57 13.06 -15.25 13.06 C-15.58 12.07 -15.91 11.08 -16.25 10.06 C-11.85 5.24 -6.83 0.13 0 0 Z \",fill:\"#44214E\",transform:\"translate(979.25,451.9375)\"})),_path1176||(_path1176=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.69 1.88 -0.69 1.88 -2 4 C-3.65 4.71 -5.32 5.37 -7 6 C-8.67 7.32 -10.34 8.66 -12 10 C-12.66 10 -13.32 10 -14 10 C-14 10.66 -14 11.32 -14 12 C-16.5 13.5 -16.5 13.5 -19 15 C-21.88 17.21 -21.88 17.21 -24 20 C-24 21.03 -24 22.06 -24 23.12 C-24 24.07 -24 25.02 -24 26 C-26.5 27.88 -26.5 27.88 -29 29 C-29.99 26.69 -30.98 24.38 -32 22 C-28.47 18.27 -24.77 15.25 -20.5 12.38 C-19.94 11.99 -19.39 11.61 -18.82 11.22 C-16.34 9.53 -13.85 7.91 -11.25 6.39 C-8.78 4.99 -8.78 4.99 -6.44 2.31 C-4 0 -4 0 0 0 Z \",fill:\"#7E668C\",transform:\"translate(899,397)\"})),_path1177||(_path1177=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 2.31 2.62 2.31 4 5 C3.59 7.17 3.59 7.17 3 9 C1.04 9.05 -0.92 9.09 -2.88 9.12 C-3.97 9.15 -5.06 9.17 -6.18 9.2 C-9 9 -9 9 -11 7 C-8.03 6.34 -5.06 5.68 -2 5 C-2 4.34 -2 3.68 -2 3 C-6.14 2.79 -6.14 2.79 -10 4 C-11.79 4.1 -13.58 4.13 -15.38 4.12 C-16.33 4.13 -17.29 4.13 -18.27 4.13 C-20.68 4.02 -22.7 3.69 -25 3 C-25 2.34 -25 1.68 -25 1 C-6.81 -1.7 -6.81 -1.7 0 0 Z \",fill:\"#311343\",transform:\"translate(658,84)\"})),_path1178||(_path1178=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.73 1.56 4.99 2.99 7.25 5.19 C11.13 7.75 14.48 7.35 19 7 C17.63 10.16 17.01 10.99 14 13 C9.41 13.87 7.03 12.58 3.31 10.06 C2.57 9.52 1.82 8.97 1.05 8.41 C-1.04 6.83 -1.04 6.83 -4 6 C-6.14 6.39 -6.14 6.39 -8 7 C-5.47 4.2 -3.8 2.54 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3C1A4D\",transform:\"translate(557,1253)\"})),_path1179||(_path1179=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 5 C1.34 5 0.68 5 0 5 C0.06 5.8 0.12 6.61 0.19 7.44 C-0.17 14.16 -2.83 20.12 -6 26 C-8.31 26 -10.62 26 -13 26 C-13 25.34 -13 24.68 -13 24 C-12.34 24 -11.68 24 -11 24 C-10.89 23.29 -10.77 22.57 -10.65 21.84 C-9.96 18.82 -8.9 16.35 -7.56 13.56 C-6.13 10.51 -4.89 7.66 -3.88 4.44 C-3 2 -3 2 0 0 Z \",fill:\"#2F163B\",transform:\"translate(589,1186)\"})),_path1180||(_path1180=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C5.22 4.62 6.38 7.77 6 13 C6.99 13.33 7.98 13.66 9 14 C9.69 15.99 10.36 17.99 11 20 C11.62 20.9 12.23 21.8 12.87 22.73 C15.16 26.25 16.65 29.66 18.12 33.56 C18.38 34.21 18.63 34.86 18.89 35.52 C19.97 38.31 21.04 41.1 22.05 43.91 C22.8 46.21 22.8 46.21 25.12 46.81 C26.05 46.91 26.05 46.91 27 47 C26.67 47.99 26.34 48.98 26 50 C20.15 47.5 18.76 41.86 16.47 36.3 C13.26 28.59 9.91 22.18 4.73 15.54 C1.54 10.86 0 5.64 0 0 Z \",fill:\"#0A123C\",transform:\"translate(1250,997)\"})),_path1181||(_path1181=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.85 3.47 4.74 7.3 6.69 11.31 C12.37 22.83 18.33 34.11 25.03 45.08 C26.82 48 28.54 50.9 30 54 C25.63 52.49 24.25 49.57 22 45.69 C20.07 42.38 18.21 39.27 15.82 36.28 C13.71 33.64 13.04 31.18 12 28 C11.5 27.5 11.01 27.01 10.5 26.5 C9 25 9 25 8.13 22.38 C6.61 17.85 4.51 13.67 2.39 9.39 C0.72 5.93 0 3.92 0 0 Z \",fill:\"#38154A\",transform:\"translate(395,988)\"})),_path1182||(_path1182=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.55 1.62 1.09 2.24 0.62 2.88 C-0.89 5.8 -1.44 7.81 -2 11 C-2.69 14.91 -3.61 17.75 -6 21 C-7.32 20.67 -8.64 20.34 -10 20 C-10.33 15.71 -10.66 11.42 -11 7 C-9.01 6.06 -7.03 5.11 -5.04 4.17 C-2.99 2.99 -1.58 1.74 0 0 Z \",fill:\"#6C4D71\",transform:\"translate(682,676)\"})),_path1183||(_path1183=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C7.45 1.01 7.45 1.01 13 0 C12.17 0.72 11.35 1.44 10.5 2.19 C7.76 4.73 7.76 4.73 7.69 7.81 C7.84 8.9 7.84 8.9 8 10 C10.64 10.66 13.28 11.32 16 12 C16 12.66 16 13.32 16 14 C9.4 13.67 2.8 13.34 -4 13 C-3.01 11.02 -2.02 9.04 -1 7 C-0.29 3.26 -0.29 3.26 0 0 Z \",fill:\"#715376\",transform:\"translate(574,422)\"})),_path1184||(_path1184=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.63 8.24 4.63 8.24 1.56 11.94 C-1 14 -1 14 -3 15 C-6 13 -6 13 -6.56 10.44 C-6.71 9.63 -6.85 8.83 -7 8 C-7.66 7.67 -8.32 7.34 -9 7 C-8.34 5.02 -7.68 3.04 -7 1 C-6.34 1 -5.68 1 -5 1 C-5 1.66 -5 2.32 -5 3 C-3.68 3 -2.36 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#291236\",transform:\"translate(914,404)\"})),_path1185||(_path1185=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4 2 C3.83 6.22 3.18 8.7 0.94 12.31 C-2.83 15.76 -4.98 16.35 -10 17 C-10.99 16.34 -11.98 15.68 -13 15 C-13 14.34 -13 13.68 -13 13 C-13.66 12.67 -14.32 12.34 -15 12 C-10.25 8 -10.25 8 -8 8 C-7.67 8.66 -7.34 9.32 -7 10 C-5.03 9.85 -5.03 9.85 -3 9 C-1.86 6.92 -1.86 6.92 -1.25 4.44 C-1.01 3.61 -0.77 2.78 -0.52 1.93 C-0.35 1.3 -0.18 0.66 0 0 Z \",fill:\"#765B7E\",transform:\"translate(868,373)\"})),_path1186||(_path1186=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.69 0.38 2.69 0.38 6 2 C7.47 4.48 8.6 7.02 9.79 9.64 C11.35 12.68 12.78 13.87 16 15 C16.87 15 17.73 15 18.62 15 C21 15 21 15 22.81 16.5 C23.2 17 23.6 17.49 24 18 C21.69 18.66 19.38 19.32 17 20 C16.67 19.34 16.34 18.68 16 18 C14.68 18.33 13.36 18.66 12 19 C12.66 20.32 13.32 21.64 14 23 C11 23 11 23 9.38 21.75 C7.85 19.81 7.54 18.38 7 16 C6.34 15.34 5.68 14.68 5 14 C4.59 11.4 4.59 11.4 4.38 8.38 C4.3 7.37 4.23 6.37 4.15 5.34 C4.1 4.57 4.05 3.79 4 3 C2.68 2.67 1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(522,299)\"})),_path1187||(_path1187=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 3.62 4.31 C2.77 7.98 1.04 9.11 -2.04 11.13 C-4.94 12.42 -7.05 11.94 -10 11 C-10.69 9.38 -10.69 9.38 -11 7 C-8.4 0.68 -6.78 -0.41 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(1044,1181)\"})),_path1188||(_path1188=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.92 2.89 2.42 4.29 3.04 7.59 C3.23 8.51 3.41 9.43 3.6 10.38 C3.89 11.86 3.89 11.86 4.19 13.38 C6.08 22.64 8.59 31.47 11.85 40.35 C12.15 41.16 12.44 41.98 12.74 42.82 C13.01 43.54 13.28 44.25 13.55 44.98 C14.07 47.32 13.75 48.75 13 51 C7.96 41.69 2.83 31.74 3 21 C2.58 18.78 2.1 16.57 1.56 14.38 C1.16 12.72 1.16 12.72 0.75 11.02 C0.31 9.26 -0.14 7.5 -0.62 5.74 C-1.09 3.57 -0.67 2.09 0 0 Z \",fill:\"#000002\",transform:\"translate(1258,693)\"})),_path1189||(_path1189=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.07 2.75 4.51 5.46 6.38 9.12 C6.71 9.12 7.03 9.12 7.38 9.12 C7.38 13.08 7.38 17.05 7.38 21.12 C7.04 21.12 6.72 21.12 6.38 21.12 C6.19 20.44 6.01 19.75 5.82 19.04 C5.57 18.14 5.32 17.24 5.06 16.31 C4.82 15.42 4.58 14.53 4.32 13.61 C3.34 11.02 2.62 9.72 0.38 8.12 C-3.18 8.45 -3.18 8.45 -6.62 9.12 C-7.29 8.8 -7.94 8.46 -8.62 8.12 C-8.95 9.12 -9.29 10.11 -9.62 11.12 C-10.92 7.25 -10.38 5.78 -8.62 2.12 C-5.4 -0.24 -3.89 -1.3 0 0 Z \",fill:\"#230F38\",transform:\"translate(512.625,424.875)\"})),_path1190||(_path1190=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C4.97 4.5 4.97 4.5 8 5 C8.33 4.01 8.66 3.02 9 2 C9.66 2.33 10.32 2.66 11 3 C11.63 5.5 11.63 5.5 12.12 8.56 C12.29 9.57 12.46 10.59 12.63 11.63 C12.75 12.41 12.88 13.19 13 14 C12.45 13.83 11.89 13.67 11.32 13.5 C8.74 12.94 6.45 12.94 3.81 13 C2.21 13.04 0.6 13.05 -1 13 C-2 12 -2 12 -2.19 8.19 C-2.16 4.96 -1.83 2.74 0 0 Z \",fill:\"#291138\",transform:\"translate(932,331)\"})),_path1191||(_path1191=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.66 4 3.32 4 4 4 C3.48 8.46 2.39 11.23 0 15 C-0.5 16.18 -0.99 17.35 -1.5 18.56 C-2.77 21.47 -3.98 23.6 -6 26 C-8.19 23.81 -8.65 23.01 -9 20 C-8.22 17.64 -8.22 17.64 -7.06 15.25 C-6.49 14.05 -6.49 14.05 -5.91 12.83 C-5.61 12.22 -5.31 11.62 -5 11 C-4.34 11 -3.68 11 -3 11 C-2.88 10.11 -2.75 9.23 -2.62 8.31 C-2.06 5.3 -1.23 2.8 0 0 Z \",fill:\"#291331\",transform:\"translate(368,1083)\"})),_path1192||(_path1192=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.38 0.61 1.38 0.61 2.78 1.24 C4.02 1.79 5.26 2.33 6.5 2.88 C7.47 3.3 7.47 3.3 8.46 3.73 C11.65 5.1 14.63 6.27 18.06 6.81 C22.2 7.68 25.53 10 29 12.31 C29.59 12.69 30.18 13.07 30.79 13.46 C32.44 14.61 32.44 14.61 35 17 C35.38 19.79 35.38 19.79 35 22 C34.01 22 33.02 22 32 22 C32 21.34 32 20.68 32 20 C30.02 19.34 28.04 18.68 26 18 C26 17.34 26 16.68 26 16 C25.49 15.76 24.98 15.52 24.46 15.28 C20.43 13.19 16.61 10.75 12.75 8.37 C8.61 5.84 4.5 3.81 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#31193A\",transform:\"translate(1116,657)\"})),_path1193||(_path1193=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C9.41 14.63 9.41 14.63 6 21 C5.67 21 5.34 21 5 21 C4.73 19.8 4.46 18.61 4.19 17.38 C3.5 14.55 2.76 12.55 1.38 9.94 C-0.27 6.43 -0.23 3.83 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(891,367)\"})),_path1194||(_path1194=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.05 4.06 2.09 7.12 2.12 10.19 C2.14 11.05 2.16 11.92 2.18 12.81 C2.21 17.32 2.16 20.9 0 25 C-1.32 24.67 -2.64 24.34 -4 24 C-4.09 18.12 -4.12 12.25 -3.69 6.38 C-3.63 5.58 -3.57 4.78 -3.51 3.96 C-3 2 -3 2 0 0 Z \",fill:\"#0B0910\",transform:\"translate(503,312)\"})),_path1195||(_path1195=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.5 0.62 9.58 1.39 13.31 5.62 C13.87 6.41 14.43 7.19 15 8 C13.95 7.81 12.9 7.63 11.81 7.44 C7.24 6.79 7.24 6.79 3 8 C1.06 10.53 -0.5 13.2 -2 16 C-4.88 13.12 -4.87 11.02 -5 7 C-3.52 4.33 -2.16 2.16 0 0 Z \",fill:\"#44214E\",transform:\"translate(716,110)\"})),_path1196||(_path1196=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 0.12 1.88 0.12 4 1 C5.02 2.66 6.02 4.32 7 6 C9.03 7.17 9.03 7.17 11 8 C10.25 8.24 9.5 8.48 8.73 8.73 C7.75 9.07 6.76 9.4 5.75 9.75 C4.78 10.07 3.8 10.4 2.8 10.73 C-0.18 12.08 -1.75 13.67 -4 16 C-6.25 15.75 -6.25 15.75 -8 15 C-6.26 10.08 -3.75 3.75 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(564,476)\"})),_path1197||(_path1197=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.98 0.66 3.96 1 6 C1.99 6 2.98 6 4 6 C4.33 8.31 4.66 10.62 5 13 C0.67 15.23 -2.28 14.92 -7 14 C-8.01 8.96 -7.97 5.76 -6 1 C-5.67 1.66 -5.34 2.32 -5 3 C-4.36 2.5 -3.72 2.01 -3.06 1.5 C-1 0 -1 0 0 0 Z \",fill:\"#70577D\",transform:\"translate(548,363)\"})),_path1198||(_path1198=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.99 2.33 1.98 2.66 3 3 C3.33 5.31 3.66 7.62 4 10 C3.34 10 2.68 10 2 10 C2 9.34 2 8.68 2 8 C1.01 8 0.02 8 -1 8 C-1.33 7.34 -1.66 6.68 -2 6 C-6.75 3.88 -11.39 3.66 -16.51 3.44 C-19.34 2.94 -20.24 2.21 -22 0 C-14.79 -3.04 -7.21 -3.04 0 0 Z \",fill:\"#291C2E\",transform:\"translate(566,317)\"})),_path1199||(_path1199=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.56 3.29 -5.12 4.59 -7.69 5.88 C-8.41 6.24 -9.13 6.6 -9.87 6.98 C-13.53 8.82 -17.16 10.56 -21 12 C-21.99 10.68 -22.98 9.36 -24 8 C-23.07 7.1 -23.07 7.1 -22.12 6.19 C-19.86 3.99 -19.86 3.99 -18 1 C-15.36 1.33 -12.72 1.66 -10 2 C-9.67 1.34 -9.34 0.68 -9 0 C-5.75 -1.28 -3.33 -0.83 0 0 Z \",fill:\"#312436\",transform:\"translate(616,277)\"})),_path1200||(_path1200=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-6.02 8.74 -6.02 8.74 -10 9 C-11.67 8.71 -13.34 8.37 -15 8 C-16.32 8 -17.64 8 -19 8 C-19.33 8.99 -19.66 9.98 -20 11 C-22.31 11.19 -22.31 11.19 -25 11 C-26.67 9.49 -26.67 9.49 -28 8 C-26.89 7.64 -26.89 7.64 -25.76 7.27 C-19.6 5.23 -13.51 3.1 -7.47 0.73 C-4.86 -0.04 -2.71 -0.14 0 0 Z \",fill:\"#251B28\",transform:\"translate(626,269)\"})),_path1201||(_path1201=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.21 1.75 11.76 4.79 17 10 C14 10 14 10 12.06 9 C9.78 7.71 9.78 7.71 6 8 C5 11 4.99 12.17 5.44 15.19 C5.62 16.45 5.81 17.7 6 19 C1.99 15.31 -0.75 12.53 -1.15 6.94 C-1.18 4.96 -1.1 2.98 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#381A43\",transform:\"translate(769,227)\"})),_path1202||(_path1202=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-1.99 3.33 -2.98 3.66 -4 4 C-4.66 3.01 -5.32 2.02 -6 1 C-11.69 0.11 -17.08 0.92 -22.54 2.55 C-28.57 3.65 -34.9 3.13 -41 3 C-40 1 -40 1 -37.56 -0.12 C-34.51 -0.88 -32.62 -1.04 -29.56 -0.94 C-23.61 -0.77 -18.08 -2.11 -12.32 -3.44 C-7 -4.34 -4.46 -2.85 0 0 Z \",fill:\"#2C123E\",transform:\"translate(640,93)\"})),_path1203||(_path1203=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.84 0.29 5.9 1.48 9.31 3.25 C18.09 7.05 26.95 6.54 36.31 6.25 C32.58 9.98 28.1 10.46 23 10.75 C15.23 10.64 3.44 8.08 -2.41 2.65 C-2.83 2.19 -3.25 1.73 -3.69 1.25 C-2.69 0.25 -2.69 0.25 0 0 Z \",fill:\"#3D1D49\",transform:\"translate(345.6875,1209.75)\"})),_path1204||(_path1204=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 3.43 0.83 4.29 -0.25 7.62 C-0.53 8.51 -0.82 9.39 -1.11 10.3 C-1.4 11.19 -1.7 12.08 -2 13 C-2.25 13.82 -2.51 14.64 -2.77 15.48 C-4.09 19.68 -5.51 23.32 -8 27 C-9.32 26.67 -10.64 26.34 -12 26 C-11.71 24.9 -11.42 23.81 -11.12 22.68 C-10.75 21.22 -10.37 19.77 -10 18.31 C-9.81 17.59 -9.62 16.87 -9.42 16.13 C-8.45 12.33 -7.75 8.95 -8 5 C-5.03 5.5 -5.03 5.5 -2 6 C-2 4.68 -2 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(982,841)\"})),_path1205||(_path1205=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.4 2.55 2.4 2.55 1.79 3.11 C-3.03 7.7 -6.91 12.74 -10.79 18.13 C-13 21 -15.38 23.49 -18 26 C-19.04 22.87 -18.93 22.01 -18 19 C-17.34 19 -16.68 19 -16 19 C-15.73 18.46 -15.46 17.93 -15.19 17.38 C-14.8 16.59 -14.4 15.81 -14 15 C-13.63 14.07 -13.26 13.14 -12.88 12.19 C-9.77 6.9 -5.06 3.37 0 0 Z \",fill:\"#150A1F\",transform:\"translate(624,764)\"})),_path1206||(_path1206=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C3.75 4.62 4.51 2.63 6 0 C7 2 7 2 6.06 5.12 C5.71 6.07 5.36 7.02 5 8 C4.34 8 3.68 8 3 8 C2.91 8.61 2.83 9.21 2.74 9.84 C1.61 16.59 -0.67 22.03 -4 28 C-4.66 27.67 -5.32 27.34 -6 27 C-5.91 25.25 -5.8 23.5 -5.69 21.75 C-5.63 20.78 -5.57 19.8 -5.51 18.8 C-4.95 15.75 -4.04 14.29 -2 12 C-2.33 11.34 -2.66 10.68 -3 10 C-2.44 7.62 -2.44 7.62 -1.56 4.88 C-1.28 3.96 -0.99 3.05 -0.69 2.12 C-0.46 1.42 -0.24 0.72 0 0 Z \",fill:\"#2F163C\",transform:\"translate(338,730)\"})),_path1207||(_path1207=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C2.33 1.99 2.66 2.98 3 4 C3.66 4.33 4.32 4.66 5 5 C5.33 3.68 5.66 2.36 6 1 C6.2 1.88 6.39 2.77 6.59 3.68 C8.84 12.7 11.97 18.83 18 26 C17.67 26.66 17.34 27.32 17 28 C15.8 26.47 14.59 24.94 13.39 23.41 C11.94 21.73 11.94 21.73 9 21 C8.01 23.48 8.01 23.48 7 26 C6.67 26 6.34 26 6 26 C5.9 25.18 5.8 24.36 5.7 23.51 C4.82 16.89 3.58 11.11 0.8 5.02 C0 3 0 3 0 0 Z \",fill:\"#230E38\",transform:\"translate(884,511)\"})),_path1208||(_path1208=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C2.32 2.67 3.64 2.34 5 2 C6.3 5.9 5.62 8.37 4 12 C-0.8 20.22 -0.8 20.22 -5.24 21.79 C-7.44 22.06 -7.44 22.06 -11 22 C-11.33 21.01 -11.66 20.02 -12 19 C-11.26 18.77 -10.51 18.55 -9.75 18.31 C-5.68 16.37 -3.8 13.6 -1.81 9.62 C-0.83 6.44 -0.39 3.31 0 0 Z \",fill:\"#402C47\",transform:\"translate(620,440)\"})),_path1209||(_path1209=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.25 2.25 2.25 2.25 3.25 5.25 C4.24 5.91 5.23 6.57 6.25 7.25 C6.25 8.24 6.25 9.23 6.25 10.25 C0.31 10.75 0.31 10.75 -5.75 11.25 C-6.08 9.27 -6.41 7.29 -6.75 5.25 C-7.41 5.25 -8.07 5.25 -8.75 5.25 C-8.42 3.27 -8.09 1.29 -7.75 -0.75 C-4.24 -1.95 -3.21 -2.04 0 0 Z \",fill:\"#452355\",transform:\"translate(845.75,189.75)\"})),_path1210||(_path1210=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4 3 C3.16 4.83 2.22 6.61 1.25 8.38 C-1.9 14.43 -3.65 20.33 -5 27 C-5.99 27 -6.98 27 -8 27 C-10.09 20.73 -8.98 16.05 -6.22 10.29 C-4.33 6.74 -2.23 3.35 0 0 Z \",fill:\"#2D143C\",transform:\"translate(538,162)\"})),_path1211||(_path1211=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.72 2.56 -1.44 3.11 -2.19 3.69 C-5.58 6.48 -7.55 9.37 -10 13 C-9.67 13.66 -9.34 14.32 -9 15 C-9.33 15.66 -9.66 16.32 -10 17 C-9.55 16.55 -9.09 16.09 -8.62 15.62 C-7.42 14.42 -6.21 13.21 -5 12 C-4.67 13.32 -4.34 14.64 -4 16 C-4.71 16.41 -5.42 16.82 -6.15 17.24 C-7.07 17.78 -7.99 18.32 -8.94 18.88 C-10.31 19.68 -10.31 19.68 -11.71 20.49 C-14.11 21.8 -14.11 21.8 -15 24 C-17.31 23.67 -19.62 23.34 -22 23 C-19.38 20.85 -17.36 19.6 -14 19 C-14.33 18.34 -14.66 17.68 -15 17 C-14.01 17 -13.02 17 -12 17 C-12 16.34 -12 15.68 -12 15 C-12.66 15 -13.32 15 -14 15 C-14.33 13.02 -14.66 11.04 -15 9 C-14.01 9 -13.02 9 -12 9 C-12 8.34 -12 7.68 -12 7 C-11.01 7 -10.02 7 -9 7 C-8.73 6.4 -8.46 5.8 -8.19 5.19 C-5.89 0.96 -4.99 0 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(890,741)\"})),_path1212||(_path1212=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.4 0.47 0.8 0.95 1.22 1.43 C3.34 3.3 4.74 3.59 7.5 4.06 C10.78 4.64 12.12 5.08 15 7 C18.37 6.67 20.42 5.12 23 3 C23 3.66 23 4.32 23 5 C23.66 5 24.32 5 25 5 C23.85 7.47 22.95 9.05 21 11 C15.4 11.55 11.91 10.41 7 8 C6.32 8.99 6.32 8.99 5.62 10 C5.09 10.66 4.55 11.32 4 12 C3.34 12 2.68 12 2 12 C-0.6 8.1 -0.15 4.53 0 0 Z \",fill:\"#3B2D40\",transform:\"translate(542,484)\"})),_path1213||(_path1213=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.99 3 2.98 3 4 3 C6 6 6 6 6.75 9.44 C8.3 13.85 10.09 14.64 14 17 C15.78 19.67 16 20.74 16 24 C11.95 23.13 8.95 21.95 6 19 C2.88 19.65 2.88 19.65 2 22 C2.11 21.04 2.21 20.07 2.32 19.08 C2.5 17.18 2.5 17.18 2.69 15.25 C2.82 14 2.94 12.74 3.07 11.45 C2.99 7.63 2.38 6.81 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#291138\",transform:\"translate(921,365)\"})),_path1214||(_path1214=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.28 2.18 3.44 2.41 4.19 6 C5.17 11.01 5.19 15.91 5 21 C3.02 21.99 3.02 21.99 1 23 C-2.55 17.67 -2.49 11.25 -2 5 C-1 1.94 -1 1.94 0 0 Z \",fill:\"#121745\",transform:\"translate(704,1121)\"})),_path1215||(_path1215=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.14 2.93 10.59 10.75 13.43 17.51 C14.16 19.3 14.85 21.1 15.54 22.9 C17.59 27.26 20.04 29.36 24 32 C23.34 32 22.68 32 22 32 C21.67 33.65 21.34 35.3 21 37 C17.9 35.93 17.02 35.02 15.25 32.19 C14.05 29.13 13.72 27.23 14 24 C13.34 24 12.68 24 12 24 C11.75 23.26 11.49 22.53 11.23 21.77 C10.89 20.79 10.54 19.82 10.19 18.81 C9.85 17.85 9.51 16.89 9.17 15.89 C7.74 12.36 6.21 9.16 3.44 6.5 C1.57 4.55 0.89 2.52 0 0 Z \",fill:\"#462453\",transform:\"translate(1206,694)\"})),_path1216||(_path1216=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C6.24 31.79 6.24 31.79 0 47 C-0.33 47 -0.66 47 -1 47 C-1.17 31.31 -0.63 15.67 0 0 Z \",fill:\"#45235A\",transform:\"translate(613,1143)\"})),_path1217||(_path1217=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.08 5.93 5.08 5.93 6 10 C5.29 11.11 5.29 11.11 4.56 12.25 C2.28 16.26 2.92 19.61 4 24 C5.51 26.83 5.51 26.83 7 29 C6.67 29.66 6.34 30.32 6 31 C3.14 28.58 2.25 26.37 1.18 22.82 C0.87 21.81 0.56 20.8 0.25 19.76 C-0.06 18.7 -0.37 17.65 -0.69 16.56 C-1.01 15.51 -1.33 14.46 -1.66 13.38 C-4 5.55 -4 5.55 -4 1 C-2.68 0.67 -1.36 0.34 0 0 Z \",fill:\"#311244\",transform:\"translate(1205,740)\"})),_path1218||(_path1218=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.82 1.41 8.45 3.54 11 8 C6.32 9.48 3.63 8.34 -0.81 6.5 C-6.54 4.31 -10.08 3.46 -16 5 C-16.33 4.01 -16.66 3.02 -17 2 C-11.9 -1.4 -5.95 -0.54 0 0 Z \",fill:\"#140E17\",transform:\"translate(584,444)\"})),_path1219||(_path1219=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.98 0.66 3.96 1 6 C-0.5 4.62 -0.5 4.62 -2 3 C-2 2.34 -2 1.68 -2 1 C-2.83 1.22 -3.67 1.43 -4.53 1.66 C-14.85 4.21 -14.85 4.21 -20.12 4 C-23.83 3.62 -23.83 3.62 -25.74 5.25 C-27.39 7.18 -27.39 7.18 -27 11 C-22.71 11 -18.42 11 -14 11 C-15.98 11.99 -15.98 11.99 -18 13 C-18.6 13.39 -19.2 13.78 -19.81 14.19 C-23.06 15.39 -25.67 14.69 -29 14 C-30 13 -30 13 -30.25 9.19 C-30.19 6.57 -30.01 5.01 -29 2.56 C-24.28 -1.12 -16.91 -0.08 -11.2 0.06 C-1.12 -0.22 -1.12 -0.22 0 0 Z \",fill:\"#67486D\",transform:\"translate(611,406)\"})),_path1220||(_path1220=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.1 1.53 0.21 2.31 0.31 C1.65 3.28 0.99 6.25 0.31 9.31 C1.63 9.97 2.95 10.63 4.31 11.31 C5.68 12.61 7.03 13.93 8.31 15.31 C5.31 17.31 5.31 17.31 3.38 17.18 C0.48 16.4 -2.1 15.66 -4.69 14.12 C-6.34 11.12 -6.03 8.66 -5.69 5.31 C-3.71 0.43 -3.71 0.43 0 0 Z \",fill:\"#35283A\",transform:\"translate(624.6875,315.6875)\"})),_path1221||(_path1221=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.09 3.51 -2.19 4.03 -3.32 4.56 C-7.47 6.94 -8.46 9.5 -9.94 14.06 C-12.48 21.29 -15.74 27.3 -21 33 C-21.66 33 -22.32 33 -23 33 C-22.33 29.64 -21.05 27.04 -19.38 24.06 C-17.61 20.92 -15.88 17.77 -14.22 14.57 C-13.63 13.43 -13.04 12.3 -12.44 11.12 C-11.63 9.55 -11.63 9.55 -10.81 7.95 C-7.83 3.09 -5.91 0 0 0 Z \",fill:\"#472F6B\",transform:\"translate(402,1125)\"})),_path1222||(_path1222=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.31 3.25 3.31 3.25 3 6 C-0.65 9.44 -4.79 11.56 -9.31 13.62 C-10.25 14.07 -10.25 14.07 -11.21 14.53 C-15.72 16.62 -20.14 17.91 -25 19 C-25 18.34 -25 17.68 -25 17 C-25.66 16.67 -26.32 16.34 -27 16 C-25.87 15.67 -25.87 15.67 -24.73 15.34 C-14.8 12.26 -6.17 8.64 0 0 Z \",fill:\"#241033\",transform:\"translate(262,1075)\"})),_path1223||(_path1223=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.12 1.56 3.77 4.61 5.06 7.69 C5.33 8.3 5.6 8.91 5.88 9.54 C7.06 12.33 7.98 14.84 8.37 17.85 C9.32 22.6 11.68 26.48 14 30.69 C14.92 32.38 15.84 34.07 16.75 35.76 C17.16 36.5 17.56 37.25 17.98 38.01 C19 40 19 40 20 43 C17 42 17 42 15.83 40.26 C15.5 39.55 15.16 38.85 14.81 38.12 C14.47 37.43 14.12 36.73 13.77 36.01 C13 34 13 34 13 31 C12.39 30.74 11.77 30.49 11.14 30.23 C7.54 28.16 6.37 24.8 5 21 C4.6 18.73 4.6 18.73 4.38 16.56 C4.25 15.39 4.13 14.21 4 13 C3.34 12.67 2.68 12.34 2 12 C0.58 7.91 -0.26 4.33 0 0 Z \",fill:\"#101643\",transform:\"translate(1185,844)\"})),_path1224||(_path1224=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.19 0.01 2.38 0.02 3.6 0.03 C4.52 0.04 5.43 0.05 6.38 0.06 C6.38 3.69 6.38 7.32 6.38 11.06 C5.24 10.41 5.24 10.41 4.07 9.75 C2.58 8.91 2.58 8.91 1.06 8.06 C0.08 7.51 -0.91 6.95 -1.93 6.38 C-4.57 4.84 -4.57 4.84 -7.62 5.06 C-8.28 8.03 -8.95 11 -9.62 14.06 C-9.96 14.06 -10.28 14.06 -10.62 14.06 C-11.97 6.84 -11.97 6.84 -10.31 3.12 C-7.26 -0.6 -4.63 -0.05 0 0 Z \",fill:\"#705275\",transform:\"translate(853.625,516.9375)\"})),_path1225||(_path1225=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.5 2.97 0.5 6 1 C6.59 7.67 4.48 12.87 2 19 C0.35 18.67 -1.3 18.34 -3 18 C-3.33 18.66 -3.66 19.32 -4 20 C-3.43 13.04 -1.99 6.69 0 0 Z \",fill:\"#241B26\",transform:\"translate(841,453)\"})),_path1226||(_path1226=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.99 3 2.98 3 4 C3.66 4 4.32 4 5 4 C4.72 6.63 4.43 9.25 4.12 11.88 C4.01 12.99 4.01 12.99 3.89 14.14 C3.23 19.77 3.23 19.77 1 22 C0.01 22 -0.98 22 -2 22 C-2 21.34 -2 20.68 -2 20 C-2.66 20 -3.32 20 -4 20 C-3.72 17.79 -3.42 15.58 -3.12 13.38 C-2.96 12.15 -2.8 10.92 -2.63 9.65 C-2.05 6.26 -1.18 3.22 0 0 Z \",fill:\"#523F5A\",transform:\"translate(871,317)\"})),_path1227||(_path1227=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67 1 3.33 2 5 3 C5.85 3.43 6.69 3.87 7.56 4.31 C10.64 6.44 12.02 8.84 14 12 C16.63 15.49 19.33 18.56 23 21 C22.67 21.66 22.34 22.32 22 23 C21.53 22.64 21.05 22.27 20.57 21.9 C16.92 19.12 13.25 16.51 9.38 14.06 C5.34 11.39 1.29 8.36 -1 4 C-0.65 1.79 -0.65 1.79 0 0 Z \",fill:\"#2A1039\",transform:\"translate(1056,559)\"})),_path1228||(_path1228=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.25 2 1.25 4 3 C4 4.32 4 5.64 4 7 C4.66 7 5.32 7 6 7 C9 13.75 9 13.75 9 16 C5.31 15.68 4.15 15.15 1.5 12.44 C-0.74 9.71 -0.74 9.71 -3.69 9.88 C-4.45 9.92 -5.21 9.96 -6 10 C-6.66 9.01 -7.32 8.02 -8 7 C-5.48 4.39 -2.95 2.11 0 0 Z \",fill:\"#301B37\",transform:\"translate(879,437)\"})),_path1229||(_path1229=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.68 4.32 -1.68 4.32 -3.88 5.56 C-6.27 6.94 -8.03 8.03 -10 10 C-10.99 10.5 -10.99 10.5 -12 11 C-12.66 12.65 -13.32 14.3 -14 16 C-18.29 15.01 -22.58 14.02 -27 13 C-27 12.01 -27 11.02 -27 10 C-22.13 8.2 -17.45 6.84 -12.31 6.06 C-7.16 5.21 -3.74 3.74 0 0 Z \",fill:\"#7C6182\",transform:\"translate(568,432)\"})),_path1230||(_path1230=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -4.32 4.75 C-5.73 5.37 -7.14 5.97 -8.56 6.56 C-9.25 6.87 -9.95 7.17 -10.66 7.48 C-16.65 10.05 -22.41 12 -29 12 C-29 11.34 -29 10.68 -29 10 C-29.99 9.34 -30.98 8.68 -32 8 C-31.39 7.89 -30.79 7.78 -30.16 7.67 C-22.62 6.24 -15.19 4.53 -8.19 1.31 C-5.13 0.05 -3.25 -0.3 0 0 Z \",fill:\"#0D0A12\",transform:\"translate(663,375)\"})),_path1231||(_path1231=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C0.32 5.34 0.65 7.67 1 10 C-3.42 13.07 -3.42 13.07 -6.19 12.75 C-7.48 12.22 -8.75 11.63 -10 11 C-9.12 4.25 -9.12 4.25 -8 2 C-8.66 1.67 -9.32 1.34 -10 1 C-6.15 -1.57 -4.41 -0.83 0 0 Z \",fill:\"#0B0910\",transform:\"translate(635,314)\"})),_path1232||(_path1232=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.09 1.98 4.19 1.96 5.31 1.94 C9 2 9 2 12 3 C14.14 2.61 14.14 2.61 16 2 C15.19 3.94 15.19 3.94 14 6 C11 7 11 7 9.19 6.31 C6.75 5.74 6.75 5.74 4 7.69 C1.44 9.66 -0.81 11.64 -3 14 C-3 12.35 -3 10.7 -3 9 C-4.32 9 -5.64 9 -7 9 C-7 7.35 -7 5.7 -7 4 C-5.82 3.57 -5.82 3.57 -4.62 3.12 C-1.9 2.15 -1.9 2.15 0 0 Z \",fill:\"#150F18\",transform:\"translate(581,278)\"})),_path1233||(_path1233=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.99 5.94 0.99 12 2 C11.01 3.49 11.01 3.49 10 5 C9.01 5 8.02 5 7 5 C5.66 6.99 4.32 8.99 3 11 C-0.2 13.1 -3.23 13.43 -7 13.75 C-8.03 13.85 -9.06 13.95 -10.12 14.05 C-13.06 14 -14.54 13.54 -17 12 C-13.53 10.96 -10.43 10.04 -6.81 9.69 C-3.81 9.21 -3.81 9.21 -1.62 6.69 C0.34 3.95 0.34 3.95 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(1052,768)\"})),_path1234||(_path1234=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.04 3.06 4.42 4.45 4.81 8 C4.92 8.87 5.03 9.73 5.14 10.62 C5 13 5 13 3.71 14.8 C1.18 16.57 -1 16.2 -4 16 C-5.78 10.97 -4.08 6.67 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#311243\",transform:\"translate(443,1151)\"})),_path1235||(_path1235=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.67 1.22 5.15 3.26 7.62 6.21 C13.33 13.02 13.33 13.02 21.31 16.33 C24.12 15.81 25.57 14.78 27.68 12.89 C28.34 13.22 29 13.55 29.68 13.89 C28.44 14.88 27.19 15.86 25.93 16.83 C25.24 17.38 24.54 17.92 23.82 18.48 C20.3 20.81 20.3 20.81 17.68 20.89 C15.42 19.34 15.42 19.34 13 17.02 C12.12 16.2 11.25 15.37 10.36 14.52 C7.07 11.29 3.8 8.05 0.59 4.74 C-1.38 2.72 -1.38 2.72 -4.32 0.89 C-2.32 -0.11 -2.32 -0.11 0 0 Z \",fill:\"#0A123C\",transform:\"translate(884.31640625,761.10546875)\"})),_path1236||(_path1236=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.28 3.42 3.16 6.79 4.25 10.69 C5.94 16.47 7.74 20.99 11.86 25.52 C13 27 13 27 13 30 C13.6 30.27 14.2 30.54 14.81 30.81 C16.97 31.98 18.36 33.19 20 35 C19.67 35.66 19.34 36.32 19 37 C18.24 36.36 17.47 35.72 16.69 35.06 C14.12 32.86 14.12 32.86 11 32 C10.63 30.68 10.29 29.34 10 28 C9.34 27.67 8.68 27.34 8 27 C7.38 24.94 7.38 24.94 7 23 C6.01 23.33 5.02 23.66 4 24 C3.32 21.5 2.66 19 2 16.5 C1.81 15.8 1.62 15.11 1.42 14.39 C0.14 9.46 -0.18 5.09 0 0 Z \",fill:\"#2B113D\",transform:\"translate(877,590)\"})),_path1237||(_path1237=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.68 0.43 1.36 0.87 2.06 1.31 C2.02 2.1 1.98 2.88 1.94 3.69 C2.07 7.6 2.77 11.13 3.62 14.95 C4.06 17.31 4.06 17.31 4.06 21.31 C2.74 20.98 1.42 20.65 0.06 20.31 C-1.26 15.69 -2.58 11.07 -3.94 6.31 C-5.59 6.64 -7.24 6.97 -8.94 7.31 C-9.27 6.32 -9.6 5.33 -9.94 4.31 C-3.86 -0.9 -3.86 -0.9 0 0 Z \",fill:\"#504340\",transform:\"translate(891.9375,423.6875)\"})),_path1238||(_path1238=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46 0.31 2.92 0.62 4.38 0.94 C5.19 1.11 6 1.29 6.84 1.46 C9 2 9 2 11 3 C10.71 6.22 10.32 8.51 8.56 11.25 C4.78 13.83 0.57 14.79 -4 15 C-4.66 14.34 -5.32 13.68 -6 13 C-5.24 12.61 -4.47 12.22 -3.69 11.81 C-0.67 9.77 0.63 8.37 2 5 C1.31 2.22 1.31 2.22 0 0 Z \",fill:\"#7D668F\",transform:\"translate(606,339)\"})),_path1239||(_path1239=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4.66 1.34 5.32 0.68 6 0 C6.66 0.66 7.32 1.32 8 2 C7.46 5.54 7.46 5.54 6 7 C4.08 7.12 4.08 7.12 2.12 7.25 C-1.9 7.63 -4.78 8.73 -8.38 10.56 C-14.02 13.34 -18.8 13.54 -25 13 C-25 12.67 -25 12.34 -25 12 C-24.37 11.91 -23.74 11.83 -23.09 11.74 C-16.67 10.68 -12.28 8.74 -7 5 C-2.24 2 -2.24 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#290E3D\",transform:\"translate(716,57)\"})),_path1240||(_path1240=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3.36 4.68 3.36 4.68 3.31 7.88 C3.31 8.92 3.3 9.97 3.3 11.05 C3.01 13.9 2.47 15.58 1 18 C0.01 17.01 -0.98 16.02 -2 15 C-2.66 15.66 -3.32 16.32 -4 17 C-6.26 13.13 -6.2 10.48 -5.62 6.13 C-4.69 2.93 -2.8 1.65 0 0 Z \",fill:\"#705376\",transform:\"translate(1017,1228)\"})),_path1241||(_path1241=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.99 0.77 0.98 1.55 0.96 2.34 C0.91 8.34 1.09 14.07 2 20 C2.66 20 3.32 20 4 20 C4 20.66 4 21.32 4 22 C3.34 22 2.68 22 2 22 C2 25.3 2 28.6 2 32 C1.01 32.49 1.01 32.49 0 33 C-4.32 22.55 -4.11 11.8 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#452354\",transform:\"translate(612,1178)\"})),_path1242||(_path1242=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.75 2.44 0.75 4.44 2.75 C4.79 6.55 4.96 8.89 2.94 12.19 C2.44 12.7 1.95 13.22 1.44 13.75 C-1.53 12.63 -3.9 11.53 -6.56 9.75 C-6.07 3.7 -6.07 3.7 -5.56 1.75 C-2.56 -0.25 -2.56 -0.25 0 0 Z \",fill:\"#0B1240\",transform:\"translate(891.5625,1102.25)\"})),_path1243||(_path1243=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.34 1.89 1.67 3.79 2 5.69 C2.19 6.74 2.37 7.8 2.56 8.89 C2.95 11.65 3.08 14.22 3 17 C3.66 17 4.32 17 5 17 C5.27 17.95 5.54 18.9 5.81 19.88 C6.75 23.25 6.75 23.25 10 25 C10.29 27.16 10.29 27.16 10.19 29.62 C10.16 30.44 10.13 31.26 10.11 32.1 C10.07 32.73 10.04 33.35 10 34 C7.75 34 7.75 34 5 33 C3.33 30.47 2.14 27.8 1 25 C1.66 24.67 2.32 24.34 3 24 C2.55 21.44 2.09 18.87 1.62 16.31 C1.5 15.59 1.37 14.87 1.24 14.13 C0.66 10.92 0.07 8.17 -1.23 5.17 C-1.48 4.45 -1.74 3.74 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#3A174A\",transform:\"translate(1270,755)\"})),_path1244||(_path1244=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 -0.19 2.38 -0.19 5 0 C7 3 7 3 6.93 5.5 C5.7 8.82 4.33 9.42 1.19 10.94 C0.31 11.38 -0.56 11.82 -1.46 12.28 C-4 13 -4 13 -6.32 12.13 C-6.88 11.76 -7.43 11.38 -8 11 C-7.34 8.36 -6.68 5.72 -6 3 C-5.01 3 -4.02 3 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#846E8F\",transform:\"translate(658,314)\"})),_path1245||(_path1245=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.64 10.19 -8.63 18.73 -15 27 C-15.99 26.67 -16.98 26.34 -18 26 C-16.74 22.58 -15.29 19.78 -13.19 16.81 C-10.39 12.74 -8.22 8.56 -6.18 4.07 C-4.66 1.4 -3.18 0 0 0 Z \",fill:\"#2A1239\",transform:\"translate(580,1211)\"})),_path1246||(_path1246=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.34 3.66 2.37 6.73 2 11 C0.62 13.94 0.62 13.94 -1 16 C-1.66 16 -2.32 16 -3 16 C-3.33 16.99 -3.66 17.98 -4 19 C-4.72 19.71 -4.72 19.71 -5.46 20.43 C-7.25 22.25 -7.86 23.78 -8.69 26.19 C-8.94 26.9 -9.19 27.62 -9.45 28.36 C-9.63 28.9 -9.81 29.44 -10 30 C-11.08 26.74 -10.91 24.84 -9.86 21.59 C-9.46 20.35 -9.46 20.35 -9.05 19.09 C-8.62 17.81 -8.62 17.81 -8.19 16.5 C-7.91 15.65 -7.64 14.79 -7.36 13.91 C-6.12 10.12 -4.86 6.54 -3 3 C-2.34 3.33 -1.68 3.66 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#381A43\",transform:\"translate(441,1130)\"})),_path1247||(_path1247=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C1.67 3.66 1.34 4.32 1 5 C-0.98 5 -2.96 5 -5 5 C-4.34 5.66 -3.68 6.32 -3 7 C-6.53 8.18 -9.29 8.2 -13 8 C-13.99 7.34 -14.98 6.68 -16 6 C-16 5.01 -16 4.02 -16 3 C-15.34 3 -14.68 3 -14 3 C-14 2.34 -14 1.68 -14 1 C-14.99 0.67 -15.98 0.34 -17 0 C-15.11 -0.2 -13.21 -0.38 -11.31 -0.56 C-9.73 -0.72 -9.73 -0.72 -8.11 -0.88 C-5.19 -0.99 -2.83 -0.71 0 0 Z M-17 8 C-16 12 -16 12 -16 12 Z \",fill:\"#0A0F36\",transform:\"translate(689,805)\"})),_path1248||(_path1248=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.15 0.97 3.77 1.75 5.38 3.5 C7.64 5.59 10.08 6.16 13 7 C13 7.66 13 8.32 13 9 C14.22 9.08 15.43 9.16 16.69 9.25 C19.72 9.46 20.86 9.89 23.25 11.85 C26.7 14.55 30.14 15.73 34.25 17.12 C41.87 19.74 41.87 19.74 43 22 C38.92 21.44 35.52 20.54 31.77 18.86 C30.8 18.43 29.83 18 28.83 17.55 C27.84 17.1 26.84 16.65 25.81 16.19 C19.08 13.17 12.38 10.32 5.4 7.91 C2.01 6.62 -0.93 4.91 -4 3 C-2.68 2.67 -1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1B0D2D\",transform:\"translate(1074,764)\"})),_path1249||(_path1249=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 0.19 2.38 0.19 5 1 C6.6 3.89 7 5.69 7 9 C7.66 9 8.32 9 9 9 C9 15.93 9 22.86 9 30 C8.01 29.67 7.02 29.34 6 29 C4.87 26.13 5 23.6 5.19 20.56 C5.29 13.5 3.15 6.31 0 0 Z \",fill:\"#271230\",transform:\"translate(1213,739)\"})),_path1250||(_path1250=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.65 1.32 3.3 2 5 C-13.33 14.53 -13.33 14.53 -22 14 C-22.33 13.34 -22.66 12.68 -23 12 C-20.09 10.74 -18.2 10 -15 10 C-15 9.34 -15 8.68 -15 8 C-14.39 7.67 -13.77 7.35 -13.14 7.01 C-12.33 6.57 -11.52 6.14 -10.69 5.69 C-9.89 5.26 -9.09 4.83 -8.26 4.39 C-5.98 3.12 -5.98 3.12 -4.39 1.33 C-3 0 -3 0 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(751,580)\"})),_path1251||(_path1251=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.03 1.99 0.05 3.01 0.08 C4.15 0.13 4.15 0.13 5.31 0.19 C2.6 3.03 -0.39 5.04 -3.69 7.19 C-5.1 8.38 -5.1 8.38 -4.94 11.81 C-4.91 16.23 -3.65 19.26 -1.69 23.19 C-4.56 22.62 -4.56 22.62 -7.69 21.19 C-10.14 15.86 -9.62 11.77 -8.69 6.19 C-8.69 5.2 -8.69 4.21 -8.69 3.19 C-6.31 -0.29 -4.01 -0.14 0 0 Z \",fill:\"#472554\",transform:\"translate(942.6875,562.8125)\"})),_path1252||(_path1252=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.47 1.62 6.23 3.22 8.77 6.12 C9.46 8.31 9.46 8.31 9.77 10.12 C8.45 10.12 7.13 10.12 5.77 10.12 C4.41 8.15 3.08 6.14 1.77 4.12 C-1.14 1.77 -2.95 1.17 -6.67 0.62 C-11.42 1.29 -12.9 2.72 -16.23 6.12 C-16.56 7.12 -16.89 8.11 -17.23 9.12 C-19.87 9.12 -22.51 9.12 -25.23 9.12 C-24.57 8.8 -23.91 8.46 -23.23 8.12 C-23.13 7.51 -23.02 6.9 -22.92 6.27 C-21.9 3.1 -20.09 2.41 -17.23 0.81 C-10.82 -2.46 -6.61 -2.59 0 0 Z \",fill:\"#67486D\",transform:\"translate(616.23046875,502.875)\"})),_path1253||(_path1253=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.38 5.43 6.38 5.43 9.29 8.11 C10.06 8.82 10.83 9.52 11.62 10.25 C12.34 10.92 13.05 11.58 13.79 12.27 C16.11 14.08 18.23 15.05 21 16 C20.67 16.66 20.34 17.32 20 18 C13.4 16.02 6.8 14.04 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#715376\",transform:\"translate(783,272)\"})),_path1254||(_path1254=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-0.19 5.31 -0.19 5.31 -2 8 C-2.96 9.45 -2.96 9.45 -3.94 10.93 C-4.62 11.94 -5.3 12.95 -6 14 C-7.32 16.06 -8.63 18.12 -9.94 20.19 C-10.96 21.79 -11.98 23.4 -13 25 C-14.43 20.26 -13.81 16.57 -12 12 C-8.8 7.07 -5.57 2.29 0 0 Z \",fill:\"#301838\",transform:\"translate(254,751)\"})),_path1255||(_path1255=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.34 2 0.68 2 0 2 C-0.27 2.6 -0.54 3.2 -0.81 3.81 C-2 6 -3.1 7.41 -5 9 C-5.66 9 -6.32 9 -7 9 C-7.31 10.3 -7.31 10.3 -7.62 11.62 C-9.31 15.76 -11.38 18.39 -15 21 C-18.19 21.87 -20.71 22 -24 22 C-17.67 13.29 -8.25 6.83 0 0 Z \",fill:\"#1A0D27\",transform:\"translate(643,744)\"})),_path1256||(_path1256=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 3.7 -1.63 7.15 -2.88 10.69 C-3.2 11.64 -3.53 12.59 -3.87 13.57 C-5 16 -5 16 -8 18 C-9.19 20.05 -9.19 20.05 -10 22 C-10.66 22 -11.32 22 -12 22 C-13.13 13.8 -9.36 7.72 -5 1 C-3 0 -3 0 0 0 Z \",fill:\"#2F163C\",transform:\"translate(351,714)\"})),_path1257||(_path1257=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-7.22 3.78 -7.22 3.78 -11.25 4.94 C-14.19 5.79 -14.19 5.79 -15.88 8.5 C-18.9 12.05 -21.48 12.11 -26 13 C-26.33 13.33 -26.66 13.66 -27 14 C-29.67 14.14 -32.32 14.04 -35 14 C-34.46 13.75 -33.93 13.5 -33.38 13.25 C-29.69 11.31 -26.29 8.97 -22.96 6.48 C-18.11 2.97 -14.1 1.2 -8.16 0.32 C-1.86 -0.62 -1.86 -0.62 0 0 Z \",fill:\"#70577E\",transform:\"translate(613,467)\"})),_path1258||(_path1258=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02 2.98 2.37 5.44 2 9 C1.34 9.66 0.68 10.32 0 11 C-5.03 10.77 -7.96 8.85 -12 6 C-12.66 6 -13.32 6 -14 6 C-14 5.34 -14 4.68 -14 4 C-12.23 3.13 -10.46 2.28 -8.69 1.44 C-7.7 0.96 -6.72 0.49 -5.7 -0 C-3 -1 -3 -1 0 0 Z \",fill:\"#715375\",transform:\"translate(665,378)\"})),_path1259||(_path1259=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 6 C0.57 5.95 0.57 5.95 -0.89 5.89 C-2.14 5.87 -3.4 5.84 -4.69 5.81 C-5.93 5.78 -7.17 5.74 -8.45 5.71 C-12.19 6.02 -14.01 6.82 -17 9 C-16.83 4.69 -16.58 2.61 -13.56 -0.56 C-8.73 -2.51 -4.81 -1.93 0 0 Z \",fill:\"#70567D\",transform:\"translate(567,326)\"})),_path1260||(_path1260=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.14 0.74 6.09 1.59 9 3 C11.57 7.42 11.17 12.02 11 17 C9.35 17.33 7.7 17.66 6 18 C5.81 17.4 5.61 16.79 5.41 16.17 C5.15 15.37 4.89 14.57 4.62 13.75 C4.37 12.96 4.11 12.17 3.85 11.36 C3.05 9 3.05 9 1.94 6.88 C0.81 4.62 0.41 2.47 0 0 Z \",fill:\"#0C0911\",transform:\"translate(680,272)\"})),_path1261||(_path1261=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.82 1.57 1.61 3.13 1.38 4.69 C1.26 5.56 1.14 6.43 1.02 7.32 C-1.34 13.5 -7.5 15.9 -13.19 18.44 C-14.11 18.83 -14.11 18.83 -15.05 19.23 C-19.59 21.32 -21.25 23.36 -23 28 C-23.7 30.74 -23.7 30.74 -24 33 C-24.66 33 -25.32 33 -26 33 C-25.68 25.79 -24.26 21.26 -19 16 C-17.41 15.46 -15.81 14.99 -14.19 14.56 C-8.68 13.08 -8.68 13.08 -4 10 C-2.41 6.75 -1.15 3.43 0 0 Z \",fill:\"#121745\",transform:\"translate(1003,1247)\"})),_path1262||(_path1262=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3 3.32 3 4 3 C4.33 2.01 4.66 1.02 5 0 C7.57 3.78 6.98 7.26 6.38 11.56 C6.3 12.23 6.23 12.91 6.16 13.6 C5.72 16.89 5.37 18.65 2.91 20.96 C1.97 21.48 1.97 21.48 1 22 C0.06 19.18 -0.12 17.47 -0.1 14.55 C-0.09 13.7 -0.09 12.86 -0.09 11.98 C-0.08 11.1 -0.07 10.22 -0.06 9.31 C-0.06 8.42 -0.05 7.53 -0.05 6.61 C-0.04 4.4 -0.02 2.2 0 0 Z \",fill:\"#2A1238\",transform:\"translate(860,531)\"})),_path1263||(_path1263=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 1.48 0.5 1.48 1 3 C0.37 2.99 -0.26 2.98 -0.91 2.97 C-3.79 2.93 -6.68 2.9 -9.56 2.88 C-11.05 2.85 -11.05 2.85 -12.56 2.82 C-22.44 2.71 -22.44 2.71 -30.75 7.5 C-31.49 8.33 -32.24 9.15 -33 10 C-33.99 10.66 -34.98 11.32 -36 12 C-35.84 11.4 -35.67 10.8 -35.5 10.19 C-34.89 7.89 -34.89 7.89 -35 5 C-24.94 -2.79 -11.89 -1.86 0 0 Z \",fill:\"#000002\",transform:\"translate(551,112)\"})),_path1264||(_path1264=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.65 4.65 5.27 13.03 6.43 19.35 C7.12 22.58 8.07 25.7 9 28.88 C11.16 36.57 11.77 44.02 12 52 C11.01 51.67 10.02 51.34 9 51 C8.08 45.83 7.97 40.92 8.03 35.67 C7.99 32.35 7.58 29.26 7 26 C6.01 25.67 5.02 25.34 4 25 C3.87 23.99 3.73 22.99 3.6 21.95 C2.84 16.97 1.73 12.11 0.62 7.21 C0 4 0 4 0 0 Z \",fill:\"#3E1B4D\",transform:\"translate(561,862)\"})),_path1265||(_path1265=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0.25 2 0.25 4 1 C4.33 1.99 4.66 2.98 5 4 C5.99 4.33 6.98 4.66 8 5 C8 5.99 8 6.98 8 8 C10.47 8.99 10.47 8.99 13 10 C13 10.66 13 11.32 13 12 C13.59 12.25 14.18 12.5 14.79 12.76 C22.56 17.12 26.28 26.98 29 35 C29 35.66 29 36.32 29 37 C29.66 37 30.32 37 31 37 C31 38.65 31 40.3 31 42 C27.27 40.14 25.75 35.65 24 32 C23.54 30.24 23.54 30.24 23.06 28.44 C20.61 20.52 13.47 12.66 6.38 8.44 C3.12 6.47 1.33 3.99 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#391947\",transform:\"translate(1158,807)\"})),_path1266||(_path1266=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17 0.12 2.34 0.24 3.55 0.36 C4.88 0.52 4.88 0.52 6.25 0.69 C6.25 1.68 6.25 2.67 6.25 3.69 C3.13 5.77 2.56 5.84 -0.94 5.88 C-6.73 6.35 -9.87 9.63 -13.75 13.69 C-14.41 13.36 -15.07 13.03 -15.75 12.69 C-15.01 11.08 -14.26 9.47 -13.5 7.88 C-13.08 6.98 -12.66 6.09 -12.23 5.17 C-8.96 -0.3 -6.18 -0.68 0 0 Z \",fill:\"#80719E\",transform:\"translate(768.75,638.3125)\"})),_path1267||(_path1267=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.02 0.62 1.04 1.24 1.06 1.87 C1.14 21.81 1.14 21.81 5.12 41.16 C6.36 46.56 5.72 51.47 5.12 56.94 C5.02 58 4.92 59.07 4.81 60.17 C4.55 62.78 4.28 65.39 4 68 C3.01 68 2.02 68 1 68 C1.33 67.01 1.66 66.02 2 65 C2.37 61.91 2.51 58.8 2.69 55.69 C2.75 54.85 2.81 54 2.87 53.13 C3.15 48.2 2.79 44.68 1 40 C0.12 35.01 -0.14 30.15 -0.1 25.1 C-0.1 24.38 -0.09 23.65 -0.09 22.91 C-0.09 20.63 -0.08 18.34 -0.06 16.06 C-0.06 14.5 -0.05 12.95 -0.05 11.39 C-0.04 7.59 -0.02 3.8 0 0 Z \",fill:\"#39154B\",transform:\"translate(463,383)\"})),_path1268||(_path1268=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.73 0.29 1.46 0.59 2.21 0.89 C12.65 5.04 23.34 8.48 34 12 C34 12.99 34 13.98 34 15 C27.65 14.34 22.24 12.4 16.32 10.08 C11.64 8.34 7.99 7.69 3 8 C2.01 5.36 1.02 2.72 0 0 Z \",fill:\"#4B3952\",transform:\"translate(737,268)\"})),_path1269||(_path1269=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.99 0.5 0.99 1 2 C-2.87 2.9 -6.53 3.12 -10.5 3.25 C-18.27 3.7 -25.52 5.37 -33.03 7.36 C-33.89 7.58 -34.75 7.81 -35.64 8.04 C-36.41 8.25 -37.18 8.46 -37.97 8.67 C-40 9 -40 9 -43 8 C-29.62 0.54 -15.05 -0.31 0 0 Z \",fill:\"#1D0E2D\",transform:\"translate(626,96)\"})),_path1270||(_path1270=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.66 8.69 2.16 17.28 2 26 C0.35 26 -1.3 26 -3 26 C-3 18.08 -3 10.16 -3 2 C-2.34 2 -1.68 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#806686\",transform:\"translate(1016,1254)\"})),_path1271||(_path1271=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1 6 C-1.91 6.58 -2.81 7.15 -3.75 7.75 C-7.13 10.09 -8.65 12.07 -10.73 15.51 C-12.34 17.39 -13.6 17.62 -16 18 C-16 18.66 -16 19.32 -16 20 C-16.66 20 -17.32 20 -18 20 C-18 20.99 -18 21.98 -18 23 C-19.31 24.35 -20.65 25.68 -22 27 C-26.45 33.87 -29.45 41.25 -32 49 C-33.36 45.97 -32.91 44.72 -31.85 41.5 C-31.27 40.14 -30.67 38.78 -30.06 37.44 C-29.75 36.73 -29.43 36.02 -29.1 35.29 C-25.17 26.8 -20.37 19.82 -13 14 C-11.98 12.34 -10.98 10.68 -10 9 C-6.9 5.66 -3.6 2.78 0 0 Z \",fill:\"#331642\",transform:\"translate(324,748)\"})),_path1272||(_path1272=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.02 2.64 1.12 3.71 0.04 6.38 C-0.45 7.24 -0.95 8.1 -1.46 8.99 C-1.99 9.94 -2.53 10.9 -3.08 11.88 C-3.65 12.87 -4.22 13.86 -4.81 14.88 C-5.93 16.83 -7.04 18.78 -8.14 20.74 C-8.64 21.61 -9.14 22.47 -9.66 23.36 C-11.09 26.18 -12.07 28.98 -13 32 C-13.66 31.67 -14.32 31.34 -15 31 C-14.01 28.03 -13.02 25.06 -12 22 C-11.34 22 -10.68 22 -10 22 C-10.06 21.05 -10.12 20.1 -10.19 19.12 C-10.19 13.8 -9.05 7.41 -5.53 3.28 C-3.8 1.83 -2.05 0.92 0 0 Z \",fill:\"#361448\",transform:\"translate(444,710)\"})),_path1273||(_path1273=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.19 2 1.19 4 3 C4.25 5.69 4.25 5.69 4 8 C4.66 8 5.32 8 6 8 C7.62 9.38 7.62 9.38 9 11 C9 11.66 9 12.32 9 13 C9.66 13 10.32 13 11 13 C11 14.32 11 15.64 11 17 C6.71 17.66 2.42 18.32 -2 19 C-2 16.69 -2 14.38 -2 12 C-0.35 11.67 1.3 11.34 3 11 C2.78 10.46 2.57 9.91 2.34 9.36 C1.93 8.28 1.93 8.28 1.5 7.19 C1.22 6.48 0.94 5.77 0.66 5.04 C0 3 0 3 0 0 Z \",fill:\"#18111B\",transform:\"translate(520,361)\"})),_path1274||(_path1274=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.34 2.32 2.68 3.64 2 5 C2.66 5.33 3.32 5.66 4 6 C0.82 13.74 -2.49 21.4 -6 29 C-7.14 25.59 -6.87 25 -5.56 21.81 C-5.28 21.1 -4.99 20.38 -4.69 19.64 C-4.46 19.1 -4.24 18.56 -4 18 C-5.65 18.99 -7.3 19.98 -9 21 C-8.58 19.52 -8.14 18.04 -7.69 16.56 C-7.44 15.74 -7.2 14.92 -6.95 14.07 C-6.64 13.38 -6.32 12.7 -6 12 C-5.01 11.67 -4.02 11.34 -3 11 C-2.88 10.3 -2.75 9.6 -2.62 8.88 C-1.96 5.82 -1.03 2.95 0 0 Z \",fill:\"#30173B\",transform:\"translate(434,1149)\"})),_path1275||(_path1275=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.1 0.97 2.21 1.94 2.31 2.94 C2.71 5.94 3.54 8.39 4.69 11.19 C6.5 16.23 5.59 20.36 4.45 25.5 C3.75 27.99 3.75 27.99 5 30 C4.67 30.66 4.34 31.32 4 32 C1.94 32.62 1.94 32.62 0 33 C0.51 29.97 1 26.99 1.75 24 C2.28 20.93 2.28 20.93 0.53 18.27 C-1.25 14.46 -1.34 11.86 -1.25 7.69 C-1.23 6.45 -1.22 5.22 -1.2 3.95 C-1 1 -1 1 0 0 Z \",fill:\"#210D34\",transform:\"translate(602,761)\"})),_path1276||(_path1276=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.09 2.99 3.17 3.98 3.26 5 C4.06 12.84 5.28 18.5 10 25 C9.67 25.66 9.34 26.32 9 27 C8.34 26.67 7.68 26.34 7 26 C7.33 26.99 7.66 27.98 8 29 C6.35 29.33 4.7 29.66 3 30 C2.13 28.74 1.28 27.46 0.44 26.19 C-0.28 25.13 -0.28 25.13 -1 24.04 C-2 22 -2 22 -1 19 C-0.01 18.67 0.98 18.34 2 18 C1.86 15.94 1.71 13.87 1.56 11.81 C1.48 10.66 1.4 9.52 1.32 8.33 C1.05 5.48 0.62 2.79 0 0 Z \",fill:\"#38154A\",transform:\"translate(948,489)\"})),_path1277||(_path1277=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02 0.6 4.02 1.27 6 2 C6.33 2.66 6.66 3.32 7 4 C7.66 4 8.32 4 9 4 C9.95 6.14 10.9 8.27 11.84 10.41 C12.6 12.11 13.39 13.81 14.19 15.5 C14.56 16.28 14.93 17.07 15.31 17.88 C15.66 18.59 16.01 19.31 16.36 20.05 C17 22 17 22 16 25 C14 22 14 22 14 19 C13.01 19 12.02 19 11 19 C10.67 19.99 10.34 20.98 10 22 C9.49 20.59 8.99 19.17 8.5 17.75 C8.22 16.96 7.94 16.17 7.66 15.36 C7 13 7 13 7 9 C6.01 9 5.02 9 4 9 C0 2.25 0 2.25 0 0 Z \",fill:\"#2B1536\",transform:\"translate(526,454)\"})),_path1278||(_path1278=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.27 2.66 4.28 5.81 5.75 9.69 C8.22 16.12 10.9 22.44 13.73 28.72 C15.09 31.78 16.36 34.71 17 38 C14.62 36.05 13.96 34.88 13 31.88 C12.67 30.93 12.34 29.98 12 29 C11.01 28.67 10.02 28.34 9 28 C6.02 23.04 4.12 17.78 2.25 12.31 C2.03 11.67 1.8 11.03 1.57 10.37 C0.4 6.81 -0.26 3.75 0 0 Z \",fill:\"#101643\",transform:\"translate(1206,890)\"})),_path1279||(_path1279=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.23 2.91 5.29 5.83 6.25 9.31 C9.56 20.82 15.01 31.49 21.07 41.77 C22.86 44.84 24.25 47.53 25 51 C22 50 22 50 20.24 46.93 C19.59 45.58 18.95 44.23 18.31 42.88 C17.61 41.41 16.9 39.95 16.2 38.49 C15.65 37.37 15.65 37.37 15.1 36.23 C13.72 33.43 12.23 30.7 10.73 27.97 C7.52 22.12 4.77 16.45 3 10 C2.44 8.15 1.88 6.29 1.31 4.44 C0.87 2.96 0.44 1.48 0 0 Z \",fill:\"#251037\",transform:\"translate(1189,850)\"})),_path1280||(_path1280=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.85 0.27 5.66 0.71 8.62 3.25 C10.82 5.79 12.91 8.38 15 11 C16.24 12.21 16.24 12.21 17.5 13.44 C20.15 16.15 21.99 18.8 24 22 C23.01 22.33 22.02 22.66 21 23 C21 22.01 21 21.02 21 20 C20.22 19.69 19.43 19.38 18.62 19.06 C16 18 16 18 14 17 C14 16.34 14 15.68 14 15 C13.01 14.67 12.02 14.34 11 14 C11 13.34 11 12.68 11 12 C10.01 11.67 9.02 11.34 8 11 C6.46 9.19 6.46 9.19 4.94 7 C2.92 3.98 2.92 3.98 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4F73\",transform:\"translate(529,437)\"})),_path1281||(_path1281=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.19 5.86 0.71 10.94 -0.56 16.65 C-1.11 19.21 -1.11 19.21 -1 22.69 C-1 26 -1 26 -1.96 28.87 C-3.67 34.56 -3.47 40.54 -3.62 46.44 C-3.66 47.65 -3.7 48.85 -3.74 50.1 C-3.84 53.07 -3.92 56.03 -4 59 C-4.33 59 -4.66 59 -5 59 C-5.05 53.72 -5.09 48.43 -5.11 43.15 C-5.12 41.35 -5.13 39.56 -5.15 37.76 C-5.18 35.17 -5.19 32.59 -5.2 30 C-5.21 29.2 -5.22 28.41 -5.23 27.59 C-5.23 22.71 -4.53 18.68 -3 14 C-2.61 11.9 -2.26 9.8 -1.94 7.69 C-1.11 2.21 -1.11 2.21 0 0 Z \",fill:\"#2A133A\",transform:\"translate(486,335)\"})),_path1282||(_path1282=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.65 1.77 4.29 3.54 4.94 5.31 C5.3 6.3 5.66 7.28 6.03 8.3 C6.71 10.19 7.36 12.09 8 14 C7.01 15.49 7.01 15.49 6 17 C3.67 14.67 1.33 12.33 -1 10 C-3.57 9.35 -3.57 9.35 -6 9 C-5.67 7.68 -5.34 6.36 -5 5 C-4.01 5 -3.02 5 -2 5 C-1.86 4.36 -1.71 3.72 -1.56 3.06 C-1 1 -1 1 0 0 Z \",fill:\"#2F163C\",transform:\"translate(903,289)\"})),_path1283||(_path1283=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C7.33 1.34 7.66 0.68 8 0 C13.81 4.17 19.59 8.32 25 13 C24.67 13.66 24.34 14.32 24 15 C14.97 12.59 5.29 8.04 0 0 Z \",fill:\"#2F163C\",transform:\"translate(797,261)\"})),_path1284||(_path1284=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.77 4.08 1.12 7.91 1.1 12.05 C1.09 13.16 1.09 14.27 1.09 15.41 C1.08 16.56 1.07 17.7 1.06 18.88 C1.06 20.04 1.05 21.21 1.05 22.41 C1.04 25.27 1.02 28.14 1 31 C0.01 31 -0.98 31 -2 31 C-3.26 21.01 -3.09 11.04 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#593960\",transform:\"translate(1020,1249)\"})),_path1285||(_path1285=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.1 -2.13 5.74 -4.81 8.56 C-5.3 9.09 -5.79 9.61 -6.3 10.16 C-14.03 18.32 -21.1 25.53 -32 29 C-32.66 28.34 -33.32 27.68 -34 27 C-33.26 26.75 -32.51 26.51 -31.75 26.25 C-28.94 25.17 -28.94 25.17 -27.06 23.06 C-25 21 -25 21 -22.06 19.56 C-18.65 17.82 -16.59 15.8 -14 13 C-11.95 10.89 -9.82 8.95 -7.56 7.06 C-4.92 4.82 -2.41 2.5 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(354,1146)\"})),_path1286||(_path1286=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.78 0.72 26.77 3.45 39 10 C39.66 10.99 40.32 11.98 41 13 C32.76 11.65 25.02 9.19 17.12 6.5 C15.31 5.89 15.31 5.89 13.46 5.28 C3.78 2.02 3.78 2.02 0 0 Z \",fill:\"#0D1036\",transform:\"translate(1187,1040)\"})),_path1287||(_path1287=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.2 3.91 5.39 7.83 6.56 11.75 C6.9 12.86 7.25 13.97 7.6 15.12 C7.92 16.19 8.24 17.26 8.57 18.36 C9.01 19.84 9.01 19.84 9.47 21.34 C10 24.02 9.91 25.46 9 28 C8.01 28 7.02 28 6 28 C4.99 24.27 3.99 20.54 3 16.81 C2.71 15.76 2.43 14.7 2.13 13.62 C1.86 12.59 1.59 11.57 1.31 10.52 C1.06 9.58 0.81 8.64 0.55 7.68 C0.01 5.04 -0.1 2.69 0 0 Z \",fill:\"#090F36\",transform:\"translate(581,906)\"})),_path1288||(_path1288=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 6.61 1.34 12.22 1 18 C0.01 18.33 -0.98 18.66 -2 19 C-1.79 19.81 -1.79 19.81 -1.57 20.64 C0.3 28.62 0.23 36.49 0.12 44.62 C0.11 46.02 0.11 47.42 0.1 48.82 C0.07 52.22 0.04 55.61 0 59 C-0.33 59 -0.66 59 -1 59 C-4.39 16.5 -4.39 16.5 0 0 Z \",fill:\"#3A1949\",transform:\"translate(313,830)\"})),_path1289||(_path1289=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.97 7.55 -3.32 16.83 -8 23 C-10.13 23.72 -10.13 23.72 -12 24 C-11.45 18.78 -10.24 14.61 -8.12 9.75 C-7.61 8.55 -7.1 7.35 -6.57 6.11 C-3.48 0 -3.48 0 0 0 Z \",fill:\"#381A43\",transform:\"translate(226,811)\"})),_path1290||(_path1290=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.42 1.86 2.42 1.86 4.75 4.19 C9.45 8.65 14.32 11.92 20 15 C17 16 17 16 14.77 15.21 C10.47 13.03 6.82 11.02 3.38 7.62 C1.38 5.76 0.54 5.04 -2.21 4.84 C-4.68 5.11 -4.68 5.11 -8 6 C-8 5.01 -8 4.02 -8 3 C-8.66 3 -9.32 3 -10 3 C-10 2.01 -10 1.02 -10 0 C-6.38 -1.25 -3.69 -0.93 0 0 Z \",fill:\"#421F4F\",transform:\"translate(1079,722)\"})),_path1291||(_path1291=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.85 5.83 2.48 10.45 0 16 C-0.99 16 -1.98 16 -3 16 C-3.1 16.89 -3.2 17.79 -3.3 18.71 C-4.24 26.37 -5.68 33.02 -9 40 C-9.66 40 -10.32 40 -11 40 C-11.5 42.48 -11.5 42.48 -12 45 C-12.66 45 -13.32 45 -14 45 C-12.2 39.58 -10.38 34.18 -8.55 28.77 C-7.89 26.79 -7.22 24.81 -6.56 22.83 C-6.1 21.48 -5.64 20.13 -5.18 18.78 C-4.51 16.8 -3.84 14.81 -3.18 12.83 C-2.79 11.66 -2.39 10.5 -1.98 9.29 C-1.06 6.19 -0.45 3.2 0 0 Z \",fill:\"#3C194D\",transform:\"translate(474,540)\"})),_path1292||(_path1292=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C2.66 3.67 3.32 3.34 4 3 C3.92 3.82 3.83 4.64 3.75 5.48 C3.59 7.1 3.59 7.1 3.44 8.75 C3.33 9.82 3.23 10.88 3.12 11.98 C3.01 14.71 3.28 16.43 4 19 C4.4 24.7 4.25 29.66 2 35 C1.34 35 0.68 35 0 35 C0 23.45 0 11.9 0 0 Z \",fill:\"#200E31\",transform:\"translate(860,496)\"})),_path1293||(_path1293=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.69 3.06 3.69 3.06 4 5 C4.66 5 5.32 5 6 5 C6.25 5.62 6.5 6.24 6.75 6.88 C8.21 9.35 9.38 9.95 12 11 C12 11.66 12 12.32 12 13 C12.66 13 13.32 13 14 13 C14 13.66 14 14.32 14 15 C13.01 15 12.02 15 11 15 C11 15.66 11 16.32 11 17 C7.66 16.4 5.54 15.26 3 13 C3 12.34 3 11.68 3 11 C2.4 10.77 1.8 10.55 1.19 10.31 C-1.56 8.66 -2.52 6.8 -4 4 C-2.68 4.33 -1.36 4.66 0 5 C0.33 4.34 0.66 3.68 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#150F18\",transform:\"translate(589,361)\"})),_path1294||(_path1294=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.81 0.88 1.81 0.88 3.81 3.88 C2.82 3.88 1.83 3.88 0.81 3.88 C0.81 4.54 0.81 5.19 0.81 5.88 C0.15 5.88 -0.51 5.88 -1.19 5.88 C-0.86 7.52 -0.53 9.18 -0.19 10.88 C1.13 11.2 2.45 11.54 3.81 11.88 C3.48 12.87 3.15 13.86 2.81 14.88 C-0.16 14.88 -3.13 14.88 -6.19 14.88 C-8.34 10.57 -8.34 10.57 -7.19 6.88 C-7.19 5.56 -7.19 4.24 -7.19 2.88 C-4.73 0.9 -3.2 -0.18 0 0 Z \",fill:\"#70577D\",transform:\"translate(650.1875,325.125)\"})),_path1295||(_path1295=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56 1.81 3.85 3.24 4.45 6.35 C4.61 8.09 4.73 9.82 4.82 11.56 C4.91 13.98 4.91 13.98 5.64 16.12 C6 18 6 18 4 21 C3.37 23.11 3.37 23.11 3 25 C2.01 24.67 1.02 24.34 0 24 C0.66 24 1.32 24 2 24 C1.34 22.68 0.68 21.36 0 20 C0.66 20 1.32 20 2 20 C2 19.34 2 18.68 2 18 C1.18 17.22 0.35 16.43 -0.5 15.62 C-3 13 -3 13 -3 9 C-2.34 8.67 -1.68 8.34 -1 8 C-0.53 6.1 -0.53 6.1 -0.38 3.94 C-0.25 2.64 -0.13 1.34 0 0 Z \",fill:\"#311144\",transform:\"translate(459,423)\"})),_path1296||(_path1296=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0.6 6.6 0.6 9 3 C11.43 3.46 11.43 3.46 14.12 3.62 C15.04 3.7 15.95 3.77 16.88 3.85 C17.93 3.93 17.93 3.93 19 4 C19.33 3.01 19.66 2.02 20 1 C20.66 1.33 21.32 1.66 22 2 C17.8 6.68 17.8 6.68 14.5 8 C11.21 8 9.58 6.99 7 5 C7 4.34 7 3.68 7 3 C6.01 3 5.02 3 4 3 C4 3.66 4 4.32 4 5 C2.61 6.29 2.61 6.29 0.75 7.62 C0.15 8.07 -0.46 8.52 -1.08 8.98 C-3 10 -3 10 -7 10 C-7.93 7.39 -8.15 6.36 -7.06 3.75 C-6.71 3.17 -6.36 2.59 -6 2 C-5.67 2.99 -5.34 3.98 -5 5 C-4.01 5 -3.02 5 -2 5 C-1.86 4.36 -1.71 3.72 -1.56 3.06 C-1 1 -1 1 0 0 Z \",fill:\"#341447\",transform:\"translate(489,194)\"})),_path1297||(_path1297=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.2 0.32 4.73 0.76 7.17 2.93 C11.89 8.79 14.36 13.46 15 21 C10.83 19.48 9.28 16.85 6.94 13.19 C5.93 11.63 5.93 11.63 4.9 10.04 C4.27 9.04 3.65 8.03 3 7 C2.42 6.09 1.85 5.18 1.25 4.24 C0 2 0 2 0 0 Z \",fill:\"#060928\",transform:\"translate(632,1033)\"})),_path1298||(_path1298=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 2.97 3.32 5.94 4 9 C7.47 8.5 7.47 8.5 11 8 C11.33 9.32 11.66 10.64 12 12 C12.66 12 13.32 12 14 12 C14 11.34 14 10.68 14 10 C14.66 10 15.32 10 16 10 C15.69 12.38 15.69 12.38 15 15 C11.53 17.31 10.08 17.51 6 17 C2.89 13.85 2.21 10.51 1.31 6.25 C1.06 5.08 0.81 3.91 0.55 2.7 C0.37 1.81 0.19 0.92 0 0 Z \",fill:\"#28103B\",transform:\"translate(228,899)\"})),_path1299||(_path1299=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.53 1.46 5.36 3.31 7.69 6.31 C8.29 7.07 8.89 7.83 9.51 8.61 C11.08 11.14 11.48 13.11 12 16 C13.85 17.05 13.85 17.05 16 18 C17.36 19.64 18.7 21.31 20 23 C20.66 23.33 21.32 23.66 22 24 C22 24.66 22 25.32 22 26 C12.88 21.97 4.13 12.37 -1 4 C-0.74 1.68 -0.74 1.68 0 0 Z \",fill:\"#3B174B\",transform:\"translate(983,545)\"})),_path1300||(_path1300=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.17 1.42 3.34 2.83 3.5 4.25 C3.59 5.04 3.69 5.83 3.78 6.64 C4 9 4 9 4 13 C4.04 14.3 4.08 15.6 4.12 16.94 C4.12 20.37 3.67 22.94 2 26 C1.34 26.33 0.68 26.66 0 27 C-0.77 22.27 -1 17.79 -1 13 C-1.33 12.01 -1.66 11.02 -2 10 C-1.66 7.52 -1.66 7.52 -1.06 4.81 C-0.87 3.91 -0.67 3.01 -0.47 2.08 C-0.24 1.05 -0.24 1.05 0 0 Z \",fill:\"#351547\",transform:\"translate(464,451)\"})),_path1301||(_path1301=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.5 5.56 C2.75 7.26 2.75 7.26 3 9 C3.66 9.33 4.32 9.66 5 10 C-1.1 13.81 -6.34 16.13 -13.62 15.88 C-17.56 14.85 -19.78 13.43 -23 11 C-22.34 9.02 -21.68 7.04 -21 5 C-20.67 5.66 -20.34 6.32 -20 7 C-19.38 7.29 -18.76 7.58 -18.12 7.88 C-15.63 9.19 -14.55 10.68 -13 13 C-11.17 12.78 -11.17 12.78 -9.31 12.56 C-8.63 12.48 -7.94 12.4 -7.24 12.32 C-4.81 11.97 -2.4 11.48 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#70577D\",transform:\"translate(555,392)\"})),_path1302||(_path1302=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.23 7.38 -1.23 7.38 -4.88 10.31 C-6.42 11.15 -6.42 11.15 -8 12 C-8.72 12.58 -9.44 13.16 -10.19 13.75 C-12 15 -12 15 -15 15 C-15.31 12.81 -15.31 12.81 -15 10 C-11.22 5.57 -6.22 0 0 0 Z \",fill:\"#2C123E\",transform:\"translate(584,93)\"})),_path1303||(_path1303=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.64 0.06 1.29 0.12 1.95 0.18 C8.35 0.78 14.74 1.28 21.15 1.72 C23.55 1.96 25.69 2.33 28 3 C28 3.66 28 4.32 28 5 C29.32 5 30.64 5 32 5 C34.14 5.66 34.14 5.66 36.25 6.5 C36.96 6.78 37.66 7.06 38.39 7.34 C38.92 7.56 39.45 7.78 40 8 C40 8.66 40 9.32 40 10 C44.95 11.48 44.95 11.48 50 13 C50 13.33 50 13.66 50 14 C41.1 13.62 33.52 11.68 26.31 6.31 C21.5 3.09 16.32 3.35 10.68 3.24 C6.77 2.99 3.71 2.2 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#3C1A4D\",transform:\"translate(777,75)\"})),_path1304||(_path1304=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.25 2.49 0.78 3.41 0 6 C1.32 6 2.64 6 4 6 C5.34 6.3 6.68 6.62 8 7 C7.35 7.35 6.7 7.7 6.02 8.07 C0.81 11.01 -3.13 13.7 -6.65 18.58 C-8.32 20.34 -9.64 20.61 -12 21 C-11.01 17.53 -11.01 17.53 -10 14 C-9.34 14 -8.68 14 -8 14 C-7.73 13.27 -7.47 12.55 -7.2 11.8 C-6 9 -4.6 6.7 -2.88 4.19 C-2.34 3.4 -1.8 2.61 -1.24 1.79 C-0.83 1.2 -0.42 0.61 0 0 Z \",fill:\"#3D1D49\",transform:\"translate(249,762)\"})),_path1305||(_path1305=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0 4 0 6 0 C6 4 6 4 3.81 6.5 C1 9 1 9 -1.75 11.06 C-4.1 13.09 -4.68 13.97 -5 17 C-5.66 17 -6.32 17 -7 17 C-7.33 17.99 -7.66 18.98 -8 20 C-8 17.36 -8 14.72 -8 12 C-8.66 11.67 -9.32 11.34 -10 11 C-8 8 -8 8 -5 6.06 C-2.14 4.1 -1.13 3.18 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(925,536)\"})),_path1306||(_path1306=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11 0.94 2.21 1.87 3.31 2.81 C3.93 3.33 4.54 3.86 5.18 4.39 C5.78 4.92 6.38 5.45 7 6 C7.86 6.69 7.86 6.69 8.73 7.39 C10 9 10 9 9.93 11.38 C10.03 15.08 11.6 16.3 14.12 18.94 C14.94 19.8 15.76 20.66 16.6 21.55 C17.79 22.76 17.79 22.76 19 24 C19.64 24.65 20.28 25.31 20.93 25.98 C22.27 27.33 23.63 28.67 25 30 C24.67 30.66 24.34 31.32 24 32 C21.07 29.15 18.16 26.28 15.25 23.41 C14.26 22.44 13.27 21.47 12.27 20.5 C1.46 9.97 1.46 9.97 -1 4 C-0.75 1.56 -0.75 1.56 0 0 Z \",fill:\"#2F163B\",transform:\"translate(954,533)\"})),_path1307||(_path1307=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.59 0.36 3.85 0.86 5.81 2.62 C7.52 6.04 6.88 8.36 6 12 C5.34 12.66 4.68 13.32 4 14 C1.38 13.62 1.38 13.62 -1 13 C-2.6 8.78 -3.34 6.85 -1.62 2.56 C-1.09 1.72 -0.55 0.87 0 0 Z \",fill:\"#67486D\",transform:\"translate(552,465)\"})),_path1308||(_path1308=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98 2.93 1.39 5.57 1.81 8.62 C2.46 12.71 3.32 16.1 5.12 19.81 C8.87 27.68 6.54 35.96 4 44 C3.01 44.5 3.01 44.5 2 45 C2.16 44.49 2.32 43.97 2.48 43.44 C4.79 32.51 2.5 21.97 -1.19 11.69 C-2.11 8.62 -2.28 6.19 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#785979\",transform:\"translate(575,360)\"})),_path1309||(_path1309=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.74 -0.11 15.31 0.03 23 1 C23 1.66 23 2.32 23 3 C23.66 3 24.32 3 25 3 C25 3.66 25 4.32 25 5 C20.67 5.87 16.84 6.04 12.44 5.69 C10.8 5.57 10.8 5.57 9.12 5.45 C6.07 5.01 3.72 4.44 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#0E0B12\",transform:\"translate(650,307)\"})),_path1310||(_path1310=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0.54 12.93 2.48 19.44 4.88 C20.94 5.4 20.94 5.4 22.48 5.94 C23.91 6.46 23.91 6.46 25.37 6.99 C26.24 7.31 27.1 7.62 27.99 7.94 C30 9 30 9 31 12 C24.3 11.51 18.88 10.12 12.69 7.56 C11.9 7.25 11.12 6.94 10.31 6.62 C6.8 5.2 3.37 3.72 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#170D1E\",transform:\"translate(814,294)\"})),_path1311||(_path1311=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6 0.56 3.2 1.1 4.81 1.62 C5.6 1.89 6.39 2.15 7.21 2.41 C7.8 2.61 8.39 2.8 9 3 C9 3.33 9 3.66 9 4 C8.2 3.95 7.4 3.91 6.58 3.86 C-0.77 3.62 -6.5 4.42 -13.34 7.12 C-16.07 8.02 -18.15 8.16 -21 8 C-19.72 5.43 -18.5 5.1 -15.94 3.88 C-15.2 3.52 -14.47 3.17 -13.71 2.8 C-13.15 2.54 -12.58 2.27 -12 2 C-12.66 1.34 -13.32 0.68 -14 0 C-4.91 -2.58 -4.91 -2.58 0 0 Z \",fill:\"#2F163D\",transform:\"translate(345,1213)\"})),_path1312||(_path1312=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.17 0.94 4.68 1.53 6.56 4.31 C7.04 5.2 7.51 6.09 8 7 C9.05 8.21 9.05 8.21 10.12 9.44 C12.26 12.35 12.67 14.44 13 18 C13.66 18 14.32 18 15 18 C15 18.66 15 19.32 15 20 C12 19 12 19 10 17 C9.01 17 8.02 17 7 17 C6.67 17.66 6.34 18.32 6 19 C6 18.01 6 17.02 6 16 C5.34 16 4.68 16 4 16 C3.8 15.1 3.59 14.19 3.38 13.26 C3.11 12.08 2.84 10.9 2.56 9.69 C2.16 7.93 2.16 7.93 1.75 6.14 C1.05 3 1.05 3 0 0 Z \",fill:\"#391A47\",transform:\"translate(356,1006)\"})),_path1313||(_path1313=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.35 2.9 5.41 7.23 7 12 C4 11 4 11 2.44 8 C1.96 7.01 1.49 6.02 1 5 C-1.55 3.72 -3.05 4.03 -5.88 4.31 C-6.74 4.39 -7.6 4.47 -8.49 4.55 C-11.03 5.01 -12.81 5.64 -15 7 C-16.35 9.7 -16.34 12.12 -16.56 15.12 C-16.65 16.22 -16.73 17.32 -16.82 18.45 C-16.88 19.29 -16.94 20.13 -17 21 C-17.66 20.67 -18.32 20.34 -19 20 C-18.94 17.56 -18.85 15.13 -18.75 12.69 C-18.74 12 -18.72 11.31 -18.71 10.6 C-18.55 7.36 -18.46 5.48 -16.16 3.09 C-10.97 0.47 -5.79 -0.66 0 0 Z \",fill:\"#472F6B\",transform:\"translate(554,897)\"})),_path1314||(_path1314=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.29 1.64 3.58 2.28 3.88 2.94 C5.42 5.77 6.98 6.02 10 7 C12.5 8 12.5 8 15 9 C14.34 10.32 13.68 11.64 13 13 C10.75 13.25 10.75 13.25 8 13 C7.38 12.34 6.76 11.68 6.12 11 C4.03 8.6 4.03 8.6 0.25 8.75 C-1.36 8.87 -1.36 8.87 -3 9 C-3.75 6.75 -3.75 6.75 -4 4 C-2.06 1.69 -2.06 1.69 0 0 Z \",fill:\"#311B39\",transform:\"translate(897,424)\"})),_path1315||(_path1315=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C1.61 6.42 -0.4 9.08 -4 12 C-6.12 12.12 -6.12 12.12 -8 11 C-9.81 8.62 -9.81 8.62 -11 6 C-10 3 -10 3 -8.25 1.81 C-5.7 0.89 -3.69 0.93 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7F709D\",transform:\"translate(606,340)\"})),_path1316||(_path1316=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 11.56 3 22.12 3 33 C-2.44 25.75 -2.68 16.86 -2 8 C-1.49 5.24 -0.81 2.69 0 0 Z \",fill:\"#53405B\",transform:\"translate(829,311)\"})),_path1317||(_path1317=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.19 5.53 0.75 9.76 -1 15 C-3.84 15 -6.24 14.6 -9 14 C-10.03 11.32 -9.96 9.76 -9.5 6.88 C-8 4 -8 4 -4.44 2.75 C-3.3 2.5 -2.17 2.25 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#2E1738\",transform:\"translate(501,298)\"})),_path1318||(_path1318=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.83 6.05 -0.4 8.4 -4 12 C-5.28 15.64 -5.28 15.64 -6 19 C-8.44 18.62 -8.44 18.62 -11 18 C-12 16 -12 16 -11.33 13.87 C-10.97 13.07 -10.62 12.26 -10.25 11.44 C-9.73 10.23 -9.73 10.23 -9.2 9 C-8 7 -8 7 -5 6 C-5 5.34 -5 4.68 -5 4 C-3.37 2.62 -1.71 1.28 0 0 Z \",fill:\"#200E31\",transform:\"translate(571,94)\"})),_path1319||(_path1319=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.65 2.64 3.3 4 5 C4.87 4.75 5.73 4.5 6.62 4.25 C10.99 3.93 12.63 5.36 16 8 C15.67 8.99 15.34 9.98 15 11 C15.99 11.99 16.98 12.98 18 14 C17.67 14.66 17.34 15.32 17 16 C13.61 15.31 10.82 14.01 7.75 12.44 C6.86 11.98 5.97 11.53 5.05 11.06 C4.37 10.71 3.7 10.36 3 10 C3 9.01 3 8.02 3 7 C2.5 6.53 2.01 6.05 1.5 5.56 C0 4 0 4 0 0 Z \",fill:\"#2C123E\",transform:\"translate(948,679)\"})),_path1320||(_path1320=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.59 3.39 6.5 6.74 9 11 C9 11.99 9 12.98 9 14 C7.35 14.66 5.7 15.32 4 16 C-1.39 10.8 -1.39 10.8 -3 8 C-2.74 4.49 -1.98 2.97 0 0 Z \",fill:\"#6D5D4E\",transform:\"translate(905,416)\"})),_path1321||(_path1321=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.56 0.96 2.56 0.96 3.12 1.94 C5.62 4.68 7.48 4.69 11.07 4.99 C13.19 5 14.98 4.62 17 4 C17.66 4.33 18.32 4.66 19 5 C19 4.34 19 3.68 19 3 C21.64 3 24.28 3 27 3 C24.88 5.12 23.3 5.85 20.56 7 C17.77 8.18 15.54 9.3 13 11 C10.96 11.2 10.96 11.2 8.81 11.12 C6.93 11.06 6.93 11.06 5 11 C3.35 7.37 1.7 3.74 0 0 Z \",fill:\"#75597B\",transform:\"translate(638,281)\"})),_path1322||(_path1322=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.34 0.04 1.34 0.04 2.7 0.08 C3.38 0.12 4.05 0.15 4.75 0.19 C3.76 0.68 3.76 0.68 2.75 1.19 C3.08 2.51 3.41 3.83 3.75 5.19 C2.75 5.21 2.75 5.21 1.74 5.24 C-1.24 5.53 -3.51 5.96 -6.25 7.19 C-8.73 10.56 -9.92 14.25 -11.25 18.19 C-12.01 20.09 -12.78 21.98 -13.56 23.88 C-14.13 25.31 -14.69 26.75 -15.25 28.19 C-16.57 24.23 -15.53 22.86 -13.94 19.06 C-12.31 15.06 -10.94 11.32 -10.19 7.06 C-9.25 3.19 -9.25 3.19 -7.52 1.46 C-4.79 -0.07 -3.11 -0.12 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(487.25,242.8125)\"})),_path1323||(_path1323=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.53 4.11 -1.67 6.26 -4.44 9.31 C-5.05 10.01 -5.67 10.71 -6.31 11.43 C-8 13 -8 13 -10 13 C-9.67 12.4 -9.34 11.8 -9 11.19 C-7.79 8.95 -7.79 8.95 -8 6 C-7.34 5.01 -6.68 4.02 -6 3 C-10.96 2.64 -10.96 2.64 -15.44 4.5 C-19.09 6.64 -21.81 6.21 -26 6 C-17.03 1.47 -10.19 -0.63 0 0 Z \",fill:\"#3A1949\",transform:\"translate(229,1150)\"})),_path1324||(_path1324=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.1 3.45 6.63 7.25 9 12 C7 11.33 5 10.67 3 10 C2.22 9.78 1.44 9.56 0.63 9.34 C-0.17 9.1 -0.98 8.87 -1.81 8.62 C-2.58 8.41 -3.35 8.2 -4.14 7.98 C-6 7 -6 7 -6.63 5.01 C-6.75 4.35 -6.88 3.68 -7 3 C-8.98 1.25 -8.98 1.25 -11 0 C-7.06 -2.84 -4.3 -1.73 0 0 Z \",fill:\"#301243\",transform:\"translate(971,689)\"})),_path1325||(_path1325=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.87 2.43 4.86 2.14 7 0 C7.66 0.99 8.32 1.98 9 3 C8.01 3 7.02 3 6 3 C5.62 4.99 5.29 6.99 5 9 C5.33 9.33 5.66 9.66 6 10 C6.07 11.52 6.08 13.04 6.06 14.56 C6.05 15.39 6.04 16.22 6.04 17.07 C6.02 17.7 6.01 18.34 6 19 C4.02 19.99 4.02 19.99 2 21 C0.34 16.03 -0.11 12.05 -0.06 6.75 C-0.05 5.49 -0.04 4.22 -0.04 2.92 C-0.02 1.96 -0.01 0.99 0 0 Z \",fill:\"#3D2346\",transform:\"translate(854,356)\"})),_path1326||(_path1326=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C2 1.66 2 2.32 2 3 C2.99 2.67 3.98 2.34 5 2 C8 6.75 8 6.75 8 9 C8.64 9.12 9.28 9.25 9.94 9.38 C10.62 9.58 11.3 9.79 12 10 C13.42 12.85 13.33 15.66 13.52 18.81 C14.09 21.4 14.99 22.33 17 24 C16.67 24.99 16.34 25.98 16 27 C15.26 26.09 14.51 25.19 13.75 24.25 C11.62 21.69 9.4 19.31 7 17 C7.66 16.67 8.32 16.34 9 16 C7.52 11.11 7.52 11.11 3.94 8 C2 7 2 7 0.75 3.38 C0.5 2.26 0.25 1.15 0 0 Z \",fill:\"#5A4761\",transform:\"translate(514,292)\"})),_path1327||(_path1327=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.1 -0.08 4.21 -0.14 6.31 -0.19 C7.48 -0.22 8.66 -0.26 9.86 -0.29 C13 0 13 0 14.92 1.2 C16.34 3.56 16.22 5.29 16 8 C14.06 8.08 12.13 8.14 10.19 8.19 C9.11 8.22 8.03 8.26 6.92 8.29 C4 8 4 8 2.11 6.49 C1.56 5.75 1.56 5.75 1 5 C1.33 4.01 1.66 3.02 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#8078AB\",transform:\"translate(686,249)\"})),_path1328||(_path1328=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.07 3.1 2.62 5.1 3.4 8.71 C3.65 9.85 3.9 10.98 4.16 12.16 C4.42 13.36 4.67 14.57 4.94 15.81 C5.34 17.65 5.34 17.65 5.74 19.52 C6.26 21.93 6.78 24.34 7.3 26.76 C7.87 29.42 8.46 32.07 9.06 34.72 C9.46 36.53 9.46 36.53 9.88 38.38 C10.1 39.37 10.32 40.37 10.55 41.4 C11 43.99 11.09 46.38 11 49 C9.17 46.26 8.4 44.42 7.5 41.31 C7.24 40.43 6.99 39.54 6.72 38.62 C5.75 35.1 4.87 31.55 4 28 C3.67 26.92 3.35 25.84 3.01 24.73 C1.99 20.96 1.38 17.31 0.88 13.44 C0.71 12.18 0.54 10.92 0.37 9.62 C0.04 6.38 -0.07 3.25 0 0 Z \",fill:\"#230F36\",transform:\"translate(921,220)\"})),_path1329||(_path1329=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.72 11.49 2.72 11.49 0.95 15.2 C-0.44 16.81 -0.44 16.81 -3 19 C-4.32 18.67 -5.64 18.34 -7 18 C-6.64 11.38 -4.86 4.86 0 0 Z \",fill:\"#7E6382\",transform:\"translate(1190,1158)\"})),_path1330||(_path1330=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.09 0.74 1.17 1.48 1.26 2.25 C1.65 5.6 2.04 8.96 2.44 12.31 C2.57 13.48 2.71 14.65 2.85 15.85 C2.98 16.97 3.11 18.09 3.25 19.24 C3.43 20.79 3.43 20.79 3.61 22.36 C3.94 25.1 3.94 25.1 5 28 C5.66 28.33 6.32 28.66 7 29 C7 30.98 7 32.96 7 35 C3.79 34.77 2.92 33.91 0.69 31.5 C-1.25 27.48 -1.1 25.59 -0.26 21.34 C0.12 18.91 0.12 18.91 -0.48 16.15 C-1.06 12.66 -0.89 9.64 -0.56 6.12 C-0.46 4.97 -0.36 3.82 -0.25 2.63 C-0.17 1.76 -0.09 0.9 0 0 Z \",fill:\"#381A43\",transform:\"translate(1273,853)\"})),_path1331||(_path1331=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.48 3.92 0.53 6.96 -0.43 10.95 C-0.59 11.61 -0.75 12.27 -0.91 12.95 C-1.41 15.05 -1.92 17.15 -2.44 19.25 C-2.78 20.68 -3.12 22.1 -3.46 23.53 C-4.3 27.02 -5.15 30.51 -6 34 C-6.99 34 -7.98 34 -9 34 C-8.86 33.07 -8.71 32.14 -8.56 31.19 C-8.22 28.98 -8 26.88 -7.96 24.65 C-7.67 15.52 -3.89 8.1 0 0 Z \",fill:\"#43204D\",transform:\"translate(353,616)\"})),_path1332||(_path1332=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2 3.61 0.7 4.54 -0.69 8 C-1.02 8.87 -1.36 9.73 -1.7 10.62 C-3.73 14.34 -6.1 15.66 -10 17.12 C-12.33 17.8 -14.65 18.42 -17 19 C-17.13 19.68 -17.27 20.35 -17.4 21.05 C-17.58 21.94 -17.76 22.83 -17.94 23.75 C-18.11 24.63 -18.29 25.51 -18.46 26.42 C-18.64 27.27 -18.82 28.12 -19 29 C-19.15 29.74 -19.29 30.49 -19.45 31.25 C-20 33 -20 33 -21.94 34.19 C-22.62 34.46 -23.3 34.72 -24 35 C-24.99 35.5 -24.99 35.5 -26 36 C-25.7 35.42 -25.39 34.84 -25.08 34.25 C-24.09 32.18 -23.37 30.21 -22.7 28.03 C-18.59 15.88 -18.59 15.88 -14.01 13.35 C-11.92 12.83 -9.81 12.37 -7.69 11.95 C-4.81 11.23 -4.81 11.23 -3.38 8.61 C-2.42 6.09 -1.67 3.61 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#836E8F\",transform:\"translate(776,512)\"})),_path1333||(_path1333=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.78 -0.12 11.28 0.17 17 1 C17 1.33 17 1.66 17 2 C15.02 2.33 13.04 2.66 11 3 C11.55 5.06 11.55 5.06 13 7 C15.88 7.71 15.88 7.71 19.12 7.75 C20.77 7.84 20.77 7.84 22.45 7.92 C23.29 7.95 24.13 7.97 25 8 C25 8.33 25 8.66 25 9 C21.54 9.06 18.08 9.09 14.62 9.12 C13.64 9.14 12.66 9.16 11.64 9.18 C10.7 9.18 9.76 9.19 8.79 9.2 C7.49 9.21 7.49 9.21 6.15 9.23 C4 9 4 9 2 7 C2 5.33 2 3.67 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#8277A1\",transform:\"translate(677,249)\"})),_path1334||(_path1334=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.44 0.31 2.88 0.62 4.31 0.94 C5.11 1.11 5.91 1.29 6.74 1.46 C9 2 9 2 12 3 C11.38 10.51 11.38 10.51 9.44 13 C8.73 13.49 8.73 13.49 8 14 C6.11 13.31 6.11 13.31 4 12 C2.99 9.69 2.99 9.69 2.31 7 C1.41 3.41 1.41 3.41 0 0 Z \",fill:\"#0B1240\",transform:\"translate(746,1181)\"})),_path1335||(_path1335=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.38 1.89 4.68 3.84 5.94 5.81 C8.51 9.97 8.51 9.97 11.71 13.62 C14.12 16.2 13.72 19.61 14 23 C12.62 21.71 11.29 20.37 10 19 C10 18.34 10 17.68 10 17 C8.02 17 6.04 17 4 17 C2.29 11.39 1.09 5.76 0 0 Z \",fill:\"#321640\",transform:\"translate(570,1080)\"})),_path1336||(_path1336=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.16 1.37 3.99 1.99 6 5 C6.23 7.18 6.23 7.18 6.2 9.67 C6.19 10.56 6.18 11.45 6.18 12.37 C6.16 13.3 6.14 14.23 6.12 15.19 C6.12 16.13 6.11 17.07 6.1 18.04 C6.07 20.36 6.04 22.68 6 25 C5.67 24.01 5.34 23.02 5 22 C4.01 22.33 3.02 22.66 2 23 C0.9 19.71 1.2 18.29 2 15 C1.01 14.34 0.02 13.68 -1 13 C-0.62 11.06 -0.62 11.06 0 9 C0.66 8.67 1.32 8.34 2 8 C1.67 7.24 1.34 6.47 1 5.69 C0 3 0 3 0 0 Z \",fill:\"#200D35\",transform:\"translate(1274,1029)\"})),_path1337||(_path1337=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 1.67 3.64 1.34 5 1 C6.13 10.34 6.1 19.61 6 29 C5.34 29 4.68 29 4 29 C3.01 22.4 2.02 15.8 1 9 C0.67 9 0.34 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#331543\",transform:\"translate(306,860)\"})),_path1338||(_path1338=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.3 8.9 -1.65 16.73 -3.62 24.56 C-3.95 25.87 -4.28 27.18 -4.61 28.49 C-5.41 31.66 -6.2 34.83 -7 38 C-7.33 38 -7.66 38 -8 38 C-7.61 30.27 -7.19 22.71 -5.46 15.14 C-4.9 12.75 -4.9 12.75 -4.62 9.25 C-3.86 5.25 -2.44 3.22 0 0 Z \",fill:\"#371647\",transform:\"translate(415,776)\"})),_path1339||(_path1339=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.84 1.79 5.35 2.97 7 7 C7.45 10.72 7.72 14.31 7 18 C4.97 19.84 4.97 19.84 3 21 C2.34 20.67 1.68 20.34 1 20 C1.01 19.31 1.02 18.62 1.04 17.91 C1.09 11.84 0.79 6.02 0 0 Z \",fill:\"#6D4F73\",transform:\"translate(610,430)\"})),_path1340||(_path1340=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.69 0.18 5.33 0.62 8 1 C6.51 2.49 6.51 2.49 5 4 C7.64 3.34 10.28 2.68 13 2 C13.66 3.65 14.32 5.3 15 7 C9.01 8.46 3.14 9.42 -3 10 C-0.12 4.12 -0.12 4.12 1 3 C0.34 2.34 -0.32 1.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#322537\",transform:\"translate(658,233)\"})),_path1341||(_path1341=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.56 2.39 8.76 7.02 11.05 12.53 C11.77 14.67 12.42 16.81 13 19 C8.02 18.85 5.68 16.12 2.36 12.79 C1 11 1 11 1 8 C1.99 8 2.98 8 4 8 C3.01 6.58 3.01 6.58 2 5.12 C0 2 0 2 0 0 Z \",fill:\"#43204D\",transform:\"translate(720,149)\"})),_path1342||(_path1342=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 2.64 2.64 5.28 4 8 C-3.92 8.49 -3.92 8.49 -12 9 C-12.66 7.68 -13.32 6.36 -14 5 C-2.41 0 -2.41 0 0 0 Z \",fill:\"#311244\",transform:\"translate(293,1159)\"})),_path1343||(_path1343=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3 2 -3 2 -5 3 C-4.67 3.66 -4.34 4.32 -4 5 C-4.89 5.33 -5.78 5.65 -6.7 5.99 C-7.87 6.43 -9.04 6.86 -10.25 7.31 C-11.41 7.74 -12.57 8.17 -13.77 8.61 C-16.59 9.83 -18.67 11.03 -21 13 C-21.66 12.67 -22.32 12.34 -23 12 C-20.99 6.59 -16.49 3.8 -11.62 1.19 C-7.41 -0.19 -4.4 -0.23 0 0 Z \",fill:\"#2F1838\",transform:\"translate(218,1147)\"})),_path1344||(_path1344=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 5 3 C8.11 2.95 8.11 2.95 11.5 2.5 C17.67 1.78 17.67 1.78 21 4 C22.66 4.38 24.32 4.73 26 5 C26 5.66 26 6.32 26 7 C19.64 7.95 15.21 7.89 9 6 C5.66 5.83 2.34 5.88 -1 6 C-1.66 4.68 -2.32 3.36 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#6E5073\",transform:\"translate(1104,1040)\"})),_path1345||(_path1345=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26 4.25 0.61 7.99 0 12.31 C-1.27 22.44 -1.25 32.18 1.12 42.19 C1.94 45.73 2.02 46.76 1 50 C0.34 49.34 -0.32 48.68 -1 48 C-1 46.68 -1 45.36 -1 44 C-1.99 44.5 -1.99 44.5 -3 45 C-2.79 44.22 -2.59 43.43 -2.38 42.62 C-2.03 39.32 -2.21 37.53 -2.94 34.38 C-5.2 24.05 -4.22 13.28 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#2B113E\",transform:\"translate(432,875)\"})),_path1346||(_path1346=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.83 2.83 2.46 5.69 2.62 9.5 C2.66 10.24 2.7 10.99 2.74 11.75 C3.13 20.17 3.09 28.58 3 37 C2.67 37 2.34 37 2 37 C1.87 35.96 1.73 34.93 1.6 33.86 C1.42 32.49 1.24 31.12 1.06 29.75 C0.98 29.07 0.89 28.39 0.8 27.68 C0.24 22.77 0.24 22.77 -1 18 C-1.66 17.67 -2.32 17.34 -3 17 C-2.89 15.1 -2.76 13.21 -2.62 11.31 C-2.56 10.26 -2.49 9.2 -2.41 8.11 C-2.01 5.09 -1.26 2.76 0 0 Z \",fill:\"#2A1238\",transform:\"translate(205,853)\"})),_path1347||(_path1347=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.88 1.61 2.77 2.23 2.65 2.86 C2.12 5.7 1.59 8.54 1.06 11.38 C0.88 12.34 0.7 13.31 0.51 14.3 C-1.14 23.22 -1.99 32.09 -2.56 41.12 C-2.65 42.43 -2.73 43.73 -2.82 45.07 C-2.88 46.04 -2.94 47 -3 48 C-3.33 48 -3.66 48 -4 48 C-4.9 36.94 -5.47 26.19 -3.69 15.19 C-3.56 14.38 -3.43 13.57 -3.29 12.73 C-2.95 10.8 -2.48 8.9 -2 7 C-1.34 6.67 -0.68 6.34 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#311541\",transform:\"translate(441,816)\"})),_path1348||(_path1348=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.5 2.02 5.5 2.02 7.12 5.19 C6.94 9.35 5.06 12.44 3 16 C-0.19 14.41 -0.88 11.48 -2.24 8.3 C-3.17 5.48 -3.19 3.73 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(586,561)\"})),_path1349||(_path1349=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.86 3.13 2.2 5.37 2 9 C2.66 9.33 3.32 9.66 4 10 C4 10.99 4 11.98 4 13 C3.01 13.5 3.01 13.5 2 14 C1.01 15.49 1.01 15.49 0 17 C-0.33 16.34 -0.66 15.68 -1 15 C-1.33 16.98 -1.66 18.96 -2 21 C-2.33 21 -2.66 21 -3 21 C-3.04 20.11 -3.07 19.22 -3.11 18.3 C-3.18 17.13 -3.24 15.96 -3.31 14.75 C-3.37 13.59 -3.43 12.43 -3.49 11.23 C-4.03 7.82 -4.92 6.63 -7 4 C-6.67 3.01 -6.34 2.02 -6 1 C-4 0 -4 0 0 0 Z \",fill:\"#290E3D\",transform:\"translate(515,439)\"})),_path1350||(_path1350=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.15 1.18 1.15 1.18 1.31 2.38 C1.78 5.33 1.78 5.33 5 7 C5 7.99 5 8.98 5 10 C5.66 10 6.32 10 7 10 C9 12 9 12 9.19 15.06 C9 18 9 18 8 19 C8 19.82 8 20.65 8 21.5 C8 22.32 8 23.15 8 24 C7.67 24.33 7.34 24.66 7 25 C7.02 25.97 7.04 26.94 7.06 27.94 C7 31 7 31 5 33 C4.12 29.99 3.92 27.38 4 24.25 C4.06 18.66 3.78 13.35 2 8 C1.34 8 0.68 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#241037\",transform:\"translate(482,396)\"})),_path1351||(_path1351=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.41 3.32 2.74 5.66 3 8 C6.63 9.32 10.26 10.64 14 12 C14 13.32 14 14.64 14 16 C5.13 16.62 5.13 16.62 0.94 14.31 C-1.29 11.65 -1.92 10.47 -2 7 C-1.06 3.19 -1.06 3.19 0 0 Z \",fill:\"#634369\",transform:\"translate(667,332)\"})),_path1352||(_path1352=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.44 0.43 2.88 0.87 4.31 1.31 C5.11 1.56 5.91 1.8 6.74 2.05 C9.32 3.13 10.41 3.69 12 6 C12.69 8.76 13.24 11.39 13.69 14.19 C13.88 15.31 13.88 15.31 14.08 16.46 C14.4 18.3 14.7 20.15 15 22 C12 21 12 21 10.61 18.79 C9.97 17.44 9.97 17.44 9.31 16.06 C8.88 15.17 8.44 14.27 7.99 13.35 C7 11 7 11 7 9 C6.34 8.67 5.68 8.34 5 8 C4.08 6.68 3.21 5.32 2.38 3.94 C1.93 3.2 1.48 2.47 1.02 1.71 C0.69 1.15 0.35 0.58 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(764,260)\"})),_path1353||(_path1353=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.6 0.23 1.2 0.45 1.81 0.69 C1.11 1.45 0.41 2.21 -0.31 3 C-2.52 6.26 -2.21 8.45 -1.5 12.25 C-1.08 14.07 -0.64 15.88 -0.19 17.69 C0.72 21.77 0.89 25.5 0.81 29.69 C0.15 29.69 -0.51 29.69 -1.19 29.69 C-1.69 27.92 -2.19 26.15 -2.69 24.38 C-2.97 23.39 -3.24 22.4 -3.53 21.39 C-4.19 18.69 -4.19 18.69 -4.19 15.69 C-4.85 15.69 -5.51 15.69 -6.19 15.69 C-6.1 13.58 -5.99 11.48 -5.88 9.38 C-5.82 8.2 -5.76 7.03 -5.7 5.82 C-5.19 2.69 -5.19 2.69 -3.78 0.75 C-2.19 -0.31 -2.19 -0.31 0 0 Z \",fill:\"#452355\",transform:\"translate(714.1875,110.3125)\"})),_path1354||(_path1354=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.33 0.59 8.03 1.65 12.07 3.29 C13.22 3.76 14.36 4.22 15.54 4.71 C16.72 5.19 17.91 5.68 19.12 6.19 C20.87 6.89 20.87 6.89 22.64 7.61 C30.28 10.74 37.67 14.2 45 18 C44.67 18.66 44.34 19.32 44 20 C43.49 19.77 42.98 19.54 42.45 19.3 C31.46 14.37 20.38 9.95 9 6 C9 5.34 9 4.68 9 4 C8.44 3.88 7.89 3.75 7.31 3.62 C4.78 2.94 2.42 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#06040A\",transform:\"translate(779,64)\"})),_path1355||(_path1355=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-2.06 9.21 -6.57 16.34 -12 22 C-12.66 22 -13.32 22 -14 22 C-14.33 22.99 -14.66 23.98 -15 25 C-18.06 26.19 -18.06 26.19 -21 27 C-21.66 26.34 -22.32 25.68 -23 25 C-22.22 24.92 -21.43 24.84 -20.62 24.75 C-19.76 24.5 -18.89 24.26 -18 24 C-17.29 22.69 -16.63 21.35 -16 20 C-13.13 15.89 -10.26 11.99 -6.31 8.88 C-3.17 6.33 -1.86 3.58 0 0 Z \",fill:\"#2C123D\",transform:\"translate(367,1106)\"})),_path1356||(_path1356=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.53 1.85 3.05 2.69 2.56 3.56 C-1.33 12.13 -0.32 22.34 -0.52 31.57 C-0.55 32.75 -0.59 33.93 -0.62 35.14 C-0.65 36.22 -0.67 37.3 -0.7 38.41 C-1 41 -1 41 -3 43 C-2.98 41.11 -2.98 41.11 -2.96 39.19 C-2.9 28.41 -3.16 17.75 -4 7 C-3.34 7 -2.68 7 -2 7 C-1.34 4.69 -0.68 2.38 0 0 Z \",fill:\"#3F1D53\",transform:\"translate(408,778)\"})),_path1357||(_path1357=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.54 2.47 4.91 4.88 7.06 7.69 C9.01 10.02 10.3 10.78 13 12 C14 13 15 14 16 15 C16.99 15.33 17.98 15.66 19 16 C19 16.99 19 17.98 19 19 C15.97 18.33 13.27 17.33 10.44 16.06 C9.67 15.72 8.91 15.38 8.12 15.04 C6 14 6 14 3 12 C3 11.34 3 10.68 3 10 C0.52 9.01 0.52 9.01 -2 8 C-1.67 7.34 -1.34 6.68 -1 6 C-0.01 6 0.98 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#341445\",transform:\"translate(1004,704)\"})),_path1358||(_path1358=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 3 2 3 0.62 4.62 C-1 6 -1 6 -3 6 C-3.27 6.93 -3.54 7.86 -3.81 8.81 C-4.91 11.76 -5.62 13.06 -8 15 C-8.99 14.67 -9.98 14.34 -11 14 C-11 12.68 -11 11.36 -11 10 C-11.33 9.34 -11.66 8.68 -12 8 C-12.04 6 -12.04 4 -12 2 C-10.42 2.34 -10.42 2.34 -8.81 2.69 C-4.55 3.04 -3.42 2.34 0 0 Z \",fill:\"#2B113E\",transform:\"translate(582,674)\"})),_path1359||(_path1359=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 2.98 3.66 4.96 4 7 C5.44 7.51 6.87 8 8.31 8.5 C9.11 8.78 9.91 9.06 10.74 9.34 C13.09 10.14 13.09 10.14 16 10 C16 9.34 16 8.68 16 8 C18.31 8.66 20.62 9.32 23 10 C22.67 10.99 22.34 11.98 22 13 C19.52 12.5 19.52 12.5 17 12 C17 12.66 17 13.32 17 14 C11.53 14.34 7.84 13.61 3 11 C-0.06 8.04 -0.63 5.19 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(984,622)\"})),_path1360||(_path1360=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93 2.61 1.15 3.64 0.06 6.25 C-0.29 6.83 -0.64 7.4 -1 8 C-0.01 8 0.98 8 2 8 C2.33 8.99 2.66 9.98 3 11 C2.01 11.76 1.02 12.53 0 13.31 C-4.92 17.48 -8.38 22.71 -12 28 C-12.33 27.01 -12.66 26.02 -13 25 C-12.02 23.65 -11.02 22.32 -10 21 C-8.65 17.63 -7.47 14.23 -6.28 10.8 C-5.86 9.88 -5.44 8.95 -5 8 C-4.01 7.67 -3.02 7.34 -2 7 C-1.32 5.11 -1.32 5.11 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#401D4F\",transform:\"translate(429,585)\"})),_path1361||(_path1361=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C1.33 3.04 1.33 3.04 3 0 C3.38 2.12 3.38 2.12 3 5 C1.21 7.24 -0.83 9.12 -3 11 C-7.88 9.65 -9.49 7.28 -12 3 C-11.67 2.34 -11.34 1.68 -11 1 C-7.26 0.29 -3.81 0 0 0 Z \",fill:\"#7D6790\",transform:\"translate(573,548)\"})),_path1362||(_path1362=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.47 3.87 -3.34 5.17 -7 7 C-8.98 7.71 -10.98 8.39 -13 9 C-13 5.89 -12.83 3.89 -12 1 C-13.32 0.34 -14.64 -0.32 -16 -1 C-10.49 -2.38 -4.87 -3.24 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(588,517)\"})),_path1363||(_path1363=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69 2.06 0.69 2.06 1 4 C0.01 3.67 -0.98 3.34 -2 3 C-1.49 3.84 -0.99 4.69 -0.47 5.55 C0.18 6.65 0.83 7.75 1.5 8.88 C2.15 9.97 2.8 11.06 3.47 12.18 C5 15 5 15 5 17 C-0.52 15.66 -3.85 11.49 -7 7 C-7.83 4.93 -7.83 4.93 -8 3 C-5.45 -0.82 -4.39 -1.46 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(609,410)\"})),_path1364||(_path1364=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.83 0.98 10.7 3.46 16 6 C16.61 6.29 17.23 6.59 17.86 6.89 C19.78 7.81 21.71 8.75 23.62 9.69 C24.24 9.98 24.86 10.28 25.49 10.59 C29.88 12.77 29.88 12.77 31 15 C26.35 15.28 23.54 14.62 19.44 12.44 C18.41 11.9 17.38 11.36 16.32 10.8 C14.68 9.91 14.68 9.91 13 9 C11.78 8.35 10.56 7.69 9.33 7.04 C6.21 5.38 3.1 3.69 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(829,275)\"})),_path1365||(_path1365=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-1.65 5.46 -2.89 6 -6 6 C-6.33 6.99 -6.66 7.98 -7 9 C-7.99 9 -8.98 9 -10 9 C-11.31 9.48 -12.6 10.01 -13.88 10.56 C-17.29 11.91 -19.42 12.23 -23 11 C-22.67 9.68 -22.34 8.36 -22 7 C-21.4 6.96 -20.79 6.93 -20.17 6.89 C-15.43 6.5 -12.72 6.1 -9 3 C-6.68 2.28 -4.35 1.61 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#382A3D\",transform:\"translate(647,237)\"})),_path1366||(_path1366=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.31 2.65 -6.62 3.3 -9.94 3.94 C-10.86 4.12 -11.79 4.3 -12.74 4.49 C-17.83 5.47 -22.86 6.29 -28.02 6.75 C-31.14 7.14 -34.01 8.05 -37 9 C-37.33 8.01 -37.66 7.02 -38 6 C-37.34 6 -36.68 6 -36 6 C-36 5.34 -36 4.68 -36 4 C-34.96 3.87 -34.96 3.87 -33.91 3.74 C-30.75 3.35 -27.59 2.96 -24.44 2.56 C-22.81 2.36 -22.81 2.36 -21.15 2.15 C-14.52 1.33 -14.52 1.33 -7.91 0.41 C-5.22 0.03 -2.7 -0.08 0 0 Z \",fill:\"#2E1638\",transform:\"translate(630,115)\"})),_path1367||(_path1367=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.65 1.32 3.3 2 5 C-0.67 6.66 -3 8 -6 9 C-9.19 8.06 -9.19 8.06 -12 7 C-12.33 5.35 -12.66 3.7 -13 2 C-8.46 0.55 -4.82 -0.24 0 0 Z \",fill:\"#3A164B\",transform:\"translate(139,1209)\"})),_path1368||(_path1368=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.49 2.97 0.49 6 1 C6 1.66 6 2.32 6 3 C6.71 3.1 7.42 3.21 8.15 3.32 C11.34 4.08 13.71 5.32 16.56 6.94 C19.68 8.7 22.78 10.43 26 12 C26 13.98 26 15.96 26 18 C23.28 17.09 21.36 16.38 19.38 14.28 C16.02 11.06 12.18 8.77 8.25 6.31 C6.69 5.33 5.13 4.35 3.58 3.36 C2.89 2.93 2.2 2.5 1.5 2.06 C1 1.71 0.51 1.36 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#0F1035\",transform:\"translate(1254,1066)\"})),_path1369||(_path1369=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.85 2.78 2.34 3.8 2.75 6.94 C2.9 7.94 2.9 7.94 3.05 8.96 C2.99 11.6 2.6 12.89 1 15 C-1.61 15.72 -1.61 15.72 -4.75 16.06 C-9.5 16.7 -12.92 17.51 -17 20 C-17 18.02 -17 16.04 -17 14 C-12.02 12.86 -7.06 11.78 -2 11 C-2.33 10.34 -2.66 9.68 -3 9 C-2.01 8.34 -1.02 7.68 0 7 C0.25 3.42 0.25 3.42 0 0 Z \",fill:\"#421F4E\",transform:\"translate(1266,742)\"})),_path1370||(_path1370=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.25 0.91 1.5 1.81 1.75 2.75 C2.73 6.03 2.73 6.03 5 7.81 C7.6 10.65 7.88 13.09 8.56 16.8 C9.07 19.36 9.93 21.63 11 24 C10.01 24.33 9.02 24.66 8 25 C4.63 21.28 2.63 19.07 2 14 C1.65 13.07 1.3 12.14 0.94 11.19 C-0.22 7.26 -0.14 4.08 0 0 Z \",fill:\"#080C31\",transform:\"translate(489,380)\"})),_path1371||(_path1371=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C7.69 2.31 5.53 2.93 2.49 3.95 C-5.3 6.58 -12.11 9.22 -16 17 C-16.99 16.67 -17.98 16.34 -19 16 C-16.82 10.21 -15.28 7.53 -9.49 4.83 C-8.63 4.5 -7.76 4.16 -6.88 3.81 C-5.57 3.3 -5.57 3.3 -4.24 2.77 C-2 2 -2 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#271038\",transform:\"translate(559,147)\"})),_path1372||(_path1372=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.87 0.57 3.86 0.86 6 3 C5.52 3.68 5.03 4.35 4.54 5.05 C2.69 8.6 2.57 11.2 2.44 15.19 C2.21 21.79 2.21 21.79 0 24 C-1.29 20.14 -2.13 16.89 -2.06 12.81 C-1.8 9.22 -1.8 9.22 -2.69 6.81 C-3.19 3.93 -1.6 2.31 0 0 Z \",fill:\"#472554\",transform:\"translate(527,1089)\"})),_path1373||(_path1373=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.11 0.74 1.22 1.47 1.33 2.23 C2.47 9.56 2.47 9.56 6 16 C6.33 14.35 6.66 12.7 7 11 C9.09 14.39 9.15 16.71 8.75 20.62 C8.66 21.59 8.57 22.55 8.48 23.54 C8 26 8 26 6 28 C3 26 3 26 2.05 22.66 C1.79 21.27 1.54 19.89 1.31 18.5 C1.19 17.78 1.06 17.07 0.93 16.33 C0.01 10.86 -0.36 5.54 0 0 Z \",fill:\"#1D1029\",transform:\"translate(665,685)\"})),_path1374||(_path1374=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.39 1.11 0.78 1.69 1.19 C0.7 1.68 0.7 1.68 -0.31 2.19 C-0.71 5.2 -0.71 5.2 -0.81 8.69 C-0.97 12.28 -0.97 12.28 -1.31 15.19 C-1.97 15.52 -2.63 15.85 -3.31 16.19 C-4.3 15.86 -5.29 15.53 -6.31 15.19 C-8.28 11.25 -7.9 6.47 -7.31 2.19 C-4.69 -0.51 -3.61 -1.27 0 0 Z \",fill:\"#6C4D71\",transform:\"translate(916.3125,360.8125)\"})),_path1375||(_path1375=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.27 0.62 0.54 1.24 0.81 1.88 C1.96 4.3 1.96 4.3 5 6 C4.01 7.49 4.01 7.49 3 9 C2.67 10.01 2.34 11.02 2 12.06 C1 15 1 15 -1 17 C-1.25 19.52 -1.42 21.97 -1.5 24.5 C-1.73 31.73 -1.73 31.73 -4 34 C-4 31.36 -4 28.72 -4 26 C-4.66 26 -5.32 26 -6 26 C-4 17.33 -2 8.67 0 0 Z \",fill:\"#391A48\",transform:\"translate(477,213)\"})),_path1376||(_path1376=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.97 5.29 -8.4 9.27 -13.81 13 C-14.39 13.4 -14.96 13.8 -15.56 14.2 C-19.72 17 -19.72 17 -22 17 C-22 16.01 -22 15.02 -22 14 C-20.93 13.44 -19.86 12.89 -18.75 12.31 C-15.35 10.39 -13.25 8.23 -11 5 C-12.32 4.67 -13.64 4.34 -15 4 C-13.27 3.27 -11.54 2.54 -9.81 1.8 C-7.9 0.99 -7.9 0.99 -5.81 -0.25 C-3.5 -1.21 -2.36 -0.68 0 0 Z \",fill:\"#28103A\",transform:\"translate(623,63)\"})),_path1377||(_path1377=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.93 1.77 2.86 1.55 3.81 1.31 C7 1 7 1 8.88 2.06 C10.44 4.76 10.2 6.94 10 10 C8.35 9.67 6.7 9.34 5 9 C4.67 9.99 4.34 10.98 4 12 C3.34 12 2.68 12 2 12 C2 13.32 2 14.64 2 16 C1.34 16 0.68 16 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(1010,1220)\"})),_path1378||(_path1378=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 -0.19 5.45 C-5.05 12.64 -5.05 12.64 -9.62 14.38 C-13.61 13.93 -15.2 12.8 -18 10 C-17.67 8.68 -17.34 7.36 -17 6 C-16.34 6.33 -15.68 6.66 -15 7 C-15 7.66 -15 8.32 -15 9 C-13.68 9.33 -12.36 9.66 -11 10 C-10.62 9.53 -10.25 9.06 -9.86 8.57 C-6.87 4.93 -4.29 2.15 0 0 Z \",fill:\"#090E35\",transform:\"translate(1020,1109)\"})),_path1379||(_path1379=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0.33 7.26 0.66 11 1 C11.66 2.65 12.32 4.3 13 6 C11.35 7.65 9.7 9.3 8 11 C3.37 9.54 3.37 9.54 1.75 7.19 C1 5 1 5 0 0 Z \",fill:\"#3B174B\",transform:\"translate(336,965)\"})),_path1380||(_path1380=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.44 4.31 -0.54 7.03 -2.38 10.94 C-2.91 12.12 -2.91 12.12 -3.46 13.32 C-4.23 15 -5.01 16.69 -5.79 18.37 C-7.42 21.91 -9.03 25.47 -10.64 29.02 C-11.4 30.72 -12.17 32.41 -12.94 34.1 C-15.17 39 -17.16 43.94 -19 49 C-20.35 44.68 -19.12 41.76 -17.5 37.69 C-17.23 36.98 -16.95 36.28 -16.67 35.55 C-11.86 23.36 -5.92 11.68 0 0 Z \",fill:\"#000002\",transform:\"translate(373,555)\"})),_path1381||(_path1381=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.33 4.4 3.94 9.06 5.68 13.71 C6.96 16.91 8.44 19.93 10 23 C10.62 25.12 10.62 25.12 11 27 C11.19 27.74 11.37 28.49 11.56 29.25 C11.71 29.83 11.85 30.4 12 31 C5.24 24.68 -0.23 16.66 -1.06 7.31 C-1.22 2.45 -1.22 2.45 0 0 Z \",fill:\"#3F1D4C\",transform:\"translate(924,565)\"})),_path1382||(_path1382=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.19 1.54 15.94 2.74 23 9 C23.66 9.33 24.32 9.66 25 10 C25 9.34 25 8.68 25 8 C27.97 8.5 27.97 8.5 31 9 C28.48 12.12 27.27 12.95 23.25 13.75 C22.18 13.83 21.11 13.91 20 14 C19.5 13.09 19.01 12.19 18.5 11.25 C14.86 5.83 9.13 4.14 3 2.75 C1.67 2.49 0.34 2.24 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(606,499)\"})),_path1383||(_path1383=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.3 3.57 -0.4 5.14 -1.11 6.7 C-2.58 10.52 -3.3 14.5 -4.17 18.49 C-5.49 24.08 -7.24 29.53 -9 35 C-9.66 35 -10.32 35 -11 35 C-13.33 31.36 -13.31 28.25 -13 24 C-12.01 22.51 -12.01 22.51 -11 21 C-10.67 21.66 -10.34 22.32 -10 23 C-7.93 22.41 -7.93 22.41 -6 21 C-5.48 18.42 -5.48 18.42 -5.56 15.44 C-5.28 9.19 -3.5 5.11 0 0 Z \",fill:\"#28103B\",transform:\"translate(431,415)\"})),_path1384||(_path1384=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C1.32 3.66 2.64 4.32 4 5 C2.88 6.56 2.88 6.56 1 8 C-2.19 7.69 -2.19 7.69 -5 7 C-5 7.66 -5 8.32 -5 9 C-5.78 9.29 -6.57 9.58 -7.38 9.88 C-10.1 10.85 -10.1 10.85 -12 13 C-10.43 3.32 -10.43 3.32 -6 0 C-3.51 -1.25 -2.59 -0.78 0 0 Z \",fill:\"#411E4F\",transform:\"translate(489,224)\"})),_path1385||(_path1385=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.32 5.3 -1.44 7.9 -4.66 12.05 C-8.26 17.3 -10.34 23.7 -11 30 C-11.33 30 -11.66 30 -12 30 C-12.59 23.33 -10.48 18.13 -8 12 C-7.34 12 -6.68 12 -6 12 C-5.34 9.69 -4.68 7.38 -4 5 C-4.45 5.45 -4.91 5.91 -5.38 6.38 C-7.19 8.19 -7.19 8.19 -9 10 C-9.66 10 -10.32 10 -11 10 C-9.16 4.14 -6.42 0 0 0 Z \",fill:\"#311243\",transform:\"translate(539,157)\"})),_path1386||(_path1386=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.43 3.65 3.11 6.3 3.36 10.59 C4.11 21.83 5.45 32.45 8.41 43.35 C8.63 44.16 8.85 44.98 9.07 45.82 C9.28 46.54 9.48 47.25 9.69 47.98 C10.04 50.27 9.7 51.81 9 54 C5.11 43.86 3.16 33.8 1.69 23.06 C1.52 21.82 1.35 20.58 1.17 19.29 C0.33 12.81 -0.19 6.54 0 0 Z \",fill:\"#381A43\",transform:\"translate(570,885)\"})),_path1387||(_path1387=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.04 1.27 4.04 2.61 6 4 C6 4.66 6 5.32 6 6 C6.71 6.22 7.42 6.45 8.15 6.68 C15.64 10.16 22.71 18.48 26 26 C26 26.99 26 27.98 26 29 C25.34 29 24.68 29 24 29 C23.44 27.95 22.89 26.9 22.31 25.81 C20.34 22.32 17.88 19.8 15 17 C15 16.34 15 15.68 15 15 C14.46 14.77 13.93 14.55 13.38 14.31 C8.01 11.35 3.47 7.04 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#261135\",transform:\"translate(1156,808)\"})),_path1388||(_path1388=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.43 1.13 2.87 2.27 3.31 3.44 C4.15 5.2 4.15 5.2 5 7 C5.99 7.33 6.98 7.66 8 8 C9.64 10.65 9.64 10.65 11.25 13.94 C11.79 15.02 12.33 16.1 12.89 17.21 C13.26 18.13 13.62 19.05 14 20 C13.67 20.66 13.34 21.32 13 22 C10.94 22.62 10.94 22.62 9 23 C4.95 15.49 1.87 8.33 0 0 Z \",fill:\"#240F38\",transform:\"translate(889,634)\"})),_path1389||(_path1389=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.88 0.57 4.76 1.14 4.64 1.72 C3.59 8.04 4.51 10.71 8 16 C8 16.99 8 17.98 8 19 C6.02 19.99 6.02 19.99 4 21 C1.01 15.13 -1.07 9.67 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#180B23\",transform:\"translate(545,520)\"})),_path1390||(_path1390=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C4.5 3.5 4.5 3.5 7 3 C7.66 2.01 8.32 1.02 9 0 C7.68 -0.33 6.36 -0.66 5 -1 C6.65 -1 8.3 -1 10 -1 C10.81 1.19 10.81 1.19 11 4 C8.56 6.81 8.56 6.81 6 9 C5.24 8.65 4.47 8.3 3.69 7.94 C0.95 6.68 0.95 6.68 -2 8 C-2.33 6.35 -2.66 4.7 -3 3 C-5.97 2.5 -5.97 2.5 -9 2 C-7.03 -1.94 -3.65 -1.12 0 0 Z \",fill:\"#2F163C\",transform:\"translate(903,433)\"})),_path1391||(_path1391=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.18 2.78 4.51 4.45 4.81 8.69 C4.88 9.48 4.95 10.26 5.02 11.07 C5 13 5 13 4 14 C3.75 15.52 3.53 17.04 3.31 18.56 C2.27 24.2 -0.24 27.77 -4 32 C-4 28.79 -3.46 27.74 -2.02 24.97 C0.4 19.71 0.47 15.14 0.25 9.44 C0.22 8.07 0.22 8.07 0.2 6.67 C0.15 4.45 0.08 2.22 0 0 Z \",fill:\"#826C8D\",transform:\"translate(844,354)\"})),_path1392||(_path1392=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43 3.85 0.56 6.77 -0.38 10.69 C-1.34 14.89 -2.19 18.95 -2.56 23.25 C-3 27 -3 27 -5 29 C-5.61 31.33 -5.61 31.33 -6 33.94 C-6.57 37.42 -6.99 38.99 -9 42 C-8.21 27.28 -4.95 13.79 0 0 Z \",fill:\"#3C1C48\",transform:\"translate(471,252)\"})),_path1393||(_path1393=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-2.65 4 -4.3 4 -6 4 C-6.13 4.53 -6.25 5.05 -6.38 5.6 C-7.15 8.57 -8.04 11.5 -8.94 14.44 C-9.28 15.55 -9.62 16.66 -9.96 17.81 C-10.87 20.6 -11.87 23.29 -13 26 C-13.33 26 -13.66 26 -14 26 C-14.19 20.64 -13.58 15.95 -12.31 10.75 C-12.16 10.04 -12.01 9.34 -11.86 8.61 C-11.02 5.12 -10.37 3.29 -7.53 1.03 C-4.81 -0.08 -2.91 -0.25 0 0 Z \",fill:\"#462453\",transform:\"translate(485,237)\"})),_path1394||(_path1394=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0 3 0 5.69 2.31 C8 5 8 5 8 8 C7.34 8 6.68 8 6 8 C6.76 9.44 7.54 10.88 8.31 12.31 C8.96 13.51 8.96 13.51 9.61 14.74 C10.87 16.99 10.87 16.99 12.53 18.48 C14.46 20.47 15.23 22.49 16.25 25.06 C16.61 25.94 16.96 26.82 17.33 27.72 C18 30 18 30 17 32 C16.33 30.68 16.33 30.68 15.64 29.33 C15.04 28.17 14.44 27.01 13.81 25.81 C13.22 24.66 12.63 23.52 12.02 22.33 C10 19 7.8 16.68 5 14 C3.81 11.44 3.81 11.44 3 9 C2.65 8.34 2.3 7.68 1.94 7 C0.86 4.7 0.42 2.5 0 0 Z \",fill:\"#321543\",transform:\"translate(105,1185)\"})),_path1395||(_path1395=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.53 2.3 2.87 4.53 4.17 6.95 C4.59 7.72 5.01 8.48 5.44 9.27 C6.3 10.86 7.16 12.45 8.02 14.04 C10.59 18.74 13.39 23.01 16.67 27.24 C18.27 29.35 19.61 31.55 20.88 33.88 C21.28 34.61 21.69 35.35 22.12 36.12 C23 38 23 38 23 40 C23.66 40 24.32 40 25 40 C25.45 41.07 25.91 42.14 26.38 43.25 C27.5 45.88 28.68 48.46 30 51 C27.12 48.36 24.79 45.86 22.76 42.52 C22.33 41.81 21.89 41.11 21.45 40.38 C20.97 39.6 20.49 38.81 20 38 C19.47 37.13 18.93 36.27 18.38 35.37 C16.6 32.48 14.83 29.58 13.06 26.69 C12.47 25.72 11.87 24.75 11.26 23.75 C8.29 18.88 5.37 13.98 2.56 9.02 C2.07 8.15 1.57 7.28 1.06 6.39 C0 4 0 4 0 0 Z \",fill:\"#452355\",transform:\"translate(551,981)\"})),_path1396||(_path1396=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.25 3.12 0.37 6.18 -0.56 9.25 C-0.83 10.14 -1.1 11.03 -1.38 11.95 C-1.58 12.63 -1.79 13.3 -2 14 C-0.68 14 0.64 14 2 14 C1.67 15.65 1.34 17.3 1 19 C-4.59 17.64 -7.91 14.85 -12 11 C-11.34 10.67 -10.68 10.34 -10 10 C-9.01 10.33 -8.02 10.66 -7 11 C-7 10.34 -7 9.68 -7 9 C-6.01 8.67 -5.02 8.34 -4 8 C-3.28 6.02 -2.62 4.02 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#39154B\",transform:\"translate(476,991)\"})),_path1397||(_path1397=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.98 8.93 -1.43 16.37 -6 23 C-8.2 23.84 -8.2 23.84 -10 24 C-9.67 21.69 -9.34 19.38 -9 17 C-8.34 17 -7.68 17 -7 17 C-6.83 16.36 -6.66 15.72 -6.48 15.06 C-4.93 9.5 -3.08 4.89 0 0 Z \",fill:\"#160A20\",transform:\"translate(586,821)\"})),_path1398||(_path1398=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.75 2.22 1.13 3.56 0.46 5.84 C-2.37 11.31 -5.89 15.88 -9.88 20.56 C-10.47 21.28 -11.07 21.99 -11.69 22.73 C-15.43 27.18 -19.21 31.59 -23 36 C-23 32.48 -22.33 31.7 -20.3 28.91 C-19.73 28.13 -19.16 27.34 -18.57 26.53 C-17.97 25.72 -17.37 24.9 -16.75 24.06 C-16.16 23.25 -15.58 22.44 -14.97 21.6 C-12.19 17.79 -9.44 14.25 -6 11 C-3.86 7.79 -2.39 4.58 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#391A47\",transform:\"translate(312,677)\"})),_path1399||(_path1399=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.32 0.51 8.03 1.2 12 3 C12 3.66 12 4.32 12 5 C11.34 5 10.68 5 10 5 C10.21 5.62 10.41 6.24 10.62 6.88 C10.75 7.58 10.87 8.28 11 9 C10.34 9.66 9.68 10.32 9 11 C6.06 10.94 6.06 10.94 3 10 C0.26 6.71 -0.36 4.24 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(578,449)\"})),_path1400||(_path1400=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.05 4.14 1.96 7.75 1.62 12 C1.53 13.2 1.44 14.39 1.35 15.62 C1.05 18.48 0.63 21.2 0 24 C-0.66 23.34 -1.32 22.68 -2 22 C-2 21.01 -2 20.02 -2 19 C-2.99 18.67 -3.98 18.34 -5 18 C-5.37 16.68 -5.71 15.34 -6 14 C-6.66 13.67 -7.32 13.34 -8 13 C-8 9.04 -8 5.08 -8 1 C-7.67 1 -7.34 1 -7 1 C-6.34 4.3 -5.68 7.6 -5 11 C-4.01 11.33 -3.02 11.66 -2 12 C-0.78 9.57 -0.68 7.58 -0.44 4.88 C-0.35 3.96 -0.27 3.05 -0.18 2.12 C-0.12 1.42 -0.06 0.72 0 0 Z \",fill:\"#311244\",transform:\"translate(460,393)\"})),_path1401||(_path1401=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 0.44 2.06 0.44 4 1 C3 3 3 3 1.06 3.88 C-1.44 5.24 -1.85 6.45 -3 9 C-3.99 9.5 -3.99 9.5 -5 10 C-5.47 11.9 -5.47 11.9 -5.62 14.06 C-5.81 16.01 -5.81 16.01 -6 18 C-6.99 18.33 -7.98 18.66 -9 19 C-9.94 15.84 -10.11 13.03 -10.06 9.75 C-10.05 8.86 -10.04 7.97 -10.04 7.05 C-10.02 6.37 -10.01 5.7 -10 5 C-9.36 4.72 -8.72 4.45 -8.07 4.16 C-7.24 3.8 -6.41 3.44 -5.56 3.06 C-4.74 2.7 -3.92 2.34 -3.07 1.97 C-1.06 1.17 -1.06 1.17 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(896,336)\"})),_path1402||(_path1402=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.1 1.05 2.21 2.1 2.31 3.19 C3 7.01 4.01 8.75 6 12 C6.8 13.81 7.55 15.65 8.25 17.5 C8.78 18.88 8.78 18.88 9.33 20.28 C10.09 23.37 10.09 25.02 9 28 C6.94 29.81 6.94 29.81 5 31 C5.03 30 5.03 30 5.07 28.99 C5.17 24.12 5.11 20.48 3 16 C3 14.68 3 13.36 3 12 C2.34 12 1.68 12 1 12 C-0.26 9.48 -0.1 7.69 -0.06 4.88 C-0.05 3.96 -0.04 3.05 -0.04 2.12 C-0.02 1.42 -0.01 0.72 0 0 Z \",fill:\"#5F4166\",transform:\"translate(691,305)\"})),_path1403||(_path1403=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.94 2.5 -5.18 3.47 -9 4 C-9 4.66 -9 5.32 -9 6 C-13.54 7.45 -17.18 8.24 -22 8 C-21.34 7.01 -20.68 6.02 -20 5 C-19.34 5 -18.68 5 -18 5 C-18.33 4.01 -18.66 3.02 -19 2 C-18.01 1.34 -17.02 0.68 -16 0 C-15.22 0.16 -14.43 0.33 -13.62 0.5 C-10.98 1.25 -10.98 1.25 -8.56 0 C-5.34 -1.26 -3.31 -0.77 0 0 Z \",fill:\"#211825\",transform:\"translate(678,244)\"})),_path1404||(_path1404=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.19 1.07 2.39 2.15 2.59 3.25 C2.85 4.69 3.11 6.13 3.38 7.56 C3.56 8.62 3.56 8.62 3.76 9.7 C4.39 13.13 5.12 16.41 6.1 19.78 C7 23 7 23 7 27 C6.34 27 5.68 27 5 27 C0.95 18.33 -1.8 10.71 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#351547\",transform:\"translate(274,879)\"})),_path1405||(_path1405=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C5.04 5.52 3.05 8.34 0 11 C-0.66 11 -1.32 11 -2 11 C-2.17 11.56 -2.34 12.11 -2.52 12.69 C-4.23 18.1 -6.35 22.98 -9 28 C-10.3 24.1 -9.35 22.94 -7.69 19.25 C-5.51 14.28 -5.51 14.28 -3.88 9.12 C-2.95 5.82 -1.62 3.02 0 0 Z \",fill:\"#090F36\",transform:\"translate(593,823)\"})),_path1406||(_path1406=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 3.97 2 6.94 2 10 C2.66 10 3.32 10 4 10 C4.33 10.66 4.66 11.32 5 12 C5.66 12 6.32 12 7 12 C6.57 12.84 6.57 12.84 6.12 13.69 C4.91 16.01 4.91 16.01 4.25 18.69 C3.63 19.83 3.63 19.83 3 21 C-0.12 21.81 -0.12 21.81 -3 22 C-3 20.02 -3 18.04 -3 16 C-2.34 16 -1.68 16 -1 16 C-1.28 14.92 -1.28 14.92 -1.56 13.81 C-2.03 10.8 -1.72 8.94 -1 6 C-0.66 4 -0.33 2 0 0 Z \",fill:\"#2B123B\",transform:\"translate(598,781)\"})),_path1407||(_path1407=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.33 2.65 4.66 4.3 5 6 C5.66 6 6.32 6 7 6 C10 12.62 10 12.62 10 16 C10.99 16.33 11.98 16.66 13 17 C13.33 19.31 13.66 21.62 14 24 C14.66 24 15.32 24 16 24 C16 25.65 16 27.3 16 29 C9 20.55 9 20.55 9 17 C8.34 17 7.68 17 7 17 C5.83 14.54 4.66 12.09 3.5 9.62 C3.17 8.93 2.83 8.23 2.49 7.51 C0 2.23 0 2.23 0 0 Z \",fill:\"#260F3A\",transform:\"translate(904,543)\"})),_path1408||(_path1408=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 4 3 C4.79 7.41 4.5 10.26 2 14 C0.68 13.67 -0.64 13.34 -2 13 C-2.33 13.99 -2.66 14.98 -3 16 C-3.99 11.93 -4.38 8.19 -4 4 C-2 1.56 -2 1.56 0 0 Z \",fill:\"#70567C\",transform:\"translate(546,345)\"})),_path1409||(_path1409=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.04 7.14 1.84 13.46 0.69 20.56 C0.56 21.44 0.43 22.32 0.29 23.23 C-0.98 31.54 -2.42 39.36 -6 47 C-7.49 43.13 -6.29 40.82 -5 37 C-4.61 35.05 -4.27 33.08 -3.96 31.11 C-3.8 30.01 -3.63 28.91 -3.45 27.77 C-3.28 26.63 -3.11 25.49 -2.94 24.31 C-2.76 23.19 -2.59 22.07 -2.41 20.92 C-1.36 13.96 -0.55 7.02 0 0 Z \",fill:\"#30163C\",transform:\"translate(371,1047)\"})),_path1410||(_path1410=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.94 2.71 9.47 5.64 13.94 9.06 C14.82 9.71 14.82 9.71 15.72 10.38 C17.21 11.51 18.61 12.75 20 14 C20 14.99 20 15.98 20 17 C16.39 15.66 13.27 14.02 10 12 C9.12 11.46 8.23 10.91 7.32 10.35 C6.02 9.5 6.02 9.5 4.69 8.62 C3.8 8.06 2.92 7.5 2.01 6.91 C0 5 0 5 -0.29 2.27 C-0.2 1.52 -0.1 0.77 0 0 Z \",fill:\"#28132F\",transform:\"translate(1151,675)\"})),_path1411||(_path1411=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.59 2.97 4.89 5.8 6.29 10.1 C7.02 12.28 7.02 12.28 9 15 C8.34 15.66 7.68 16.32 7 17 C1.43 16.43 1.43 16.43 0 15 C0.03 12.97 0.07 10.94 0.16 8.91 C0.19 6.76 0.19 6.76 -2 5 C-2 3.68 -2 2.36 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#27103A\",transform:\"translate(901,655)\"})),_path1412||(_path1412=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.33 4 0.4 6.08 -1 10 C-2.5 11.94 -2.5 11.94 -4 13 C-4.66 13 -5.32 13 -6 13 C-6.33 13.66 -6.66 14.32 -7 15 C-7.66 15 -8.32 15 -9 15 C-9 14.34 -9 13.68 -9 13 C-9.66 13 -10.32 13 -11 13 C-12.19 11.31 -12.19 11.31 -13 9 C-11.88 6.31 -11.88 6.31 -10 4 C-7.81 3.19 -7.81 3.19 -6 3 C-6 4.32 -6 5.64 -6 7 C-2.7 6.28 -2.7 6.28 -1.31 2.94 C-0.88 1.97 -0.45 1 0 0 Z \",fill:\"#381A43\",transform:\"translate(342,640)\"})),_path1413||(_path1413=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.85 1.92 13.47 4.17 20 7 C20.72 7.31 21.44 7.61 22.18 7.93 C24.99 9.58 25.73 12.09 27 15 C22.84 14.09 19.39 12.17 15.69 10.12 C11.87 8.02 8.14 6.02 4.08 4.43 C3.06 3.96 2.05 3.49 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#806789\",transform:\"translate(608,492)\"})),_path1414||(_path1414=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.07 8.54 7.07 8.54 6.88 12.44 C6 15 6 15 4.46 17.64 C2.67 21.77 2.66 24.94 2.81 29.38 C2.83 30.11 2.84 30.85 2.85 31.61 C2.89 33.4 2.94 35.2 3 37 C2.34 37 1.68 37 1 37 C0.97 34 0.95 31 0.94 28 C0.93 27.16 0.92 26.32 0.91 25.46 C0.9 21.44 1 17.56 1.56 13.58 C2.04 9.67 1.4 7.62 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3B174B\",transform:\"translate(466,417)\"})),_path1415||(_path1415=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.9 0.01 1.8 0.02 2.73 0.03 C3.42 0.04 4.1 0.05 4.81 0.06 C4.48 1.71 4.15 3.36 3.81 5.06 C2.64 5.19 2.64 5.19 1.44 5.31 C-1.33 5.79 -1.33 5.79 -2.5 8.12 C-2.73 8.76 -2.95 9.4 -3.19 10.06 C-4.51 9.4 -5.83 8.74 -7.19 8.06 C-7.19 7.4 -7.19 6.74 -7.19 6.06 C-8.18 5.73 -9.17 5.4 -10.19 5.06 C-9.38 3.12 -9.38 3.12 -8.19 1.06 C-5.17 0.06 -3.15 -0.04 0 0 Z \",fill:\"#74597B\",transform:\"translate(904.1875,358.9375)\"})),_path1416||(_path1416=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.25 0.13 2.51 0.26 3.8 0.39 C5.23 0.57 5.23 0.57 6.69 0.75 C7.02 1.74 7.35 2.73 7.69 3.75 C6.81 3.73 5.93 3.7 5.02 3.68 C3.86 3.66 2.7 3.64 1.5 3.62 C0.35 3.6 -0.8 3.58 -1.98 3.55 C-5.27 3.75 -7.41 4.23 -10.31 5.75 C-12.44 9.4 -12.51 12.59 -12.31 16.75 C-13.63 15.76 -14.95 14.77 -16.31 13.75 C-15.65 9.79 -14.99 5.83 -14.31 1.75 C-13.65 2.41 -12.99 3.07 -12.31 3.75 C-11.64 3.08 -10.96 2.42 -10.27 1.73 C-6.47 -0.82 -4.49 -0.5 0 0 Z \",fill:\"#795F83\",transform:\"translate(562.3125,331.25)\"})),_path1417||(_path1417=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98 0.03 1.97 0.05 2.98 0.08 C3.73 0.12 4.48 0.15 5.25 0.19 C4.01 3.92 2.44 4.98 -0.75 7.19 C-1.74 7.19 -2.73 7.19 -3.75 7.19 C-4.74 8.67 -4.74 8.67 -5.75 10.19 C-7.07 10.19 -8.39 10.19 -9.75 10.19 C-10 6.88 -10 6.88 -9.75 3.19 C-6.7 0.02 -4.27 -0.15 0 0 Z \",fill:\"#6C4E74\",transform:\"translate(601.75,324.8125)\"})),_path1418||(_path1418=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.74 1.52 1.74 1.52 3 3 C2.19 3.01 1.38 3.03 0.55 3.04 C-6.14 3.22 -6.14 3.22 -11.94 6.19 C-12.62 7.12 -13.3 8.04 -14 9 C-14.93 10.11 -15.87 11.21 -16.81 12.31 C-17.53 13.2 -18.26 14.09 -19 15 C-19.33 14.01 -19.66 13.02 -20 12 C-22.48 13.49 -22.48 13.49 -25 15 C-24.19 13.06 -24.19 13.06 -23 11 C-22.01 10.67 -21.02 10.34 -20 10 C-19.67 9.01 -19.34 8.02 -19 7 C-13.54 0.6 -8.1 -0.66 0 0 Z \",fill:\"#28142F\",transform:\"translate(889,293)\"})),_path1419||(_path1419=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.85 0.33 1.69 0.65 2.56 0.99 C3.7 1.43 4.83 1.86 6 2.31 C7.18 2.77 8.36 3.23 9.58 3.7 C12.29 4.73 15.01 5.69 17.75 6.62 C18.82 7.08 19.89 7.53 21 8 C21.33 8.99 21.66 9.98 22 11 C15.44 11.61 11.18 11.22 5.79 7.29 C3.94 5.95 2.06 4.97 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#856B8A\",transform:\"translate(693,282)\"})),_path1420||(_path1420=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.68 34.52 2.68 34.52 1 45 C0.01 45 -0.98 45 -2 45 C-1.94 44.1 -1.88 43.2 -1.82 42.27 C-0.91 28.19 -0.47 14.1 0 0 Z \",fill:\"#7C6182\",transform:\"translate(1110,1235)\"})),_path1421||(_path1421=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.77 0.77 5.04 1.7 7.38 4.69 C5.49 5 5.49 5 3.56 5.31 C-0.11 6.2 -0.45 6.42 -2.62 9.81 C-2.96 10.76 -3.28 11.71 -3.62 12.69 C-6.06 11.88 -6.06 11.88 -8.62 10.69 C-8.96 9.7 -9.28 8.71 -9.62 7.69 C-7.33 3.37 -4.81 0.91 0 0 Z \",fill:\"#411E4E\",transform:\"translate(173.625,1247.3125)\"})),_path1422||(_path1422=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 0.04 1.21 0.04 2.45 0.08 C3.06 0.12 3.68 0.15 4.31 0.19 C3.61 1.68 2.87 3.15 2.12 4.62 C1.72 5.45 1.31 6.27 0.89 7.12 C-0.69 9.19 -0.69 9.19 -3.22 10.03 C-6.03 10.21 -7.33 9.67 -9.69 8.19 C-7.74 2.64 -6.21 -0.27 0 0 Z \",fill:\"#421F4F\",transform:\"translate(373.6875,1131.8125)\"})),_path1423||(_path1423=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.53 3.88 1.05 5.77 0.52 7.63 C-0.46 12.1 -1.09 17.82 1 22 C1.41 28.39 0.82 34.67 0 41 C-0.66 40.67 -1.32 40.34 -2 40 C-1.98 39.24 -1.95 38.48 -1.93 37.69 C-1.84 32.73 -1.79 28.13 -3.06 23.31 C-5.13 15.32 -2.59 7.59 0 0 Z \",fill:\"#2B113E\",transform:\"translate(442,770)\"})),_path1424||(_path1424=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 1.67 3.32 1.34 4 1 C6 0.96 8 0.96 10 1 C10 1.99 10 2.98 10 4 C8.72 4.12 7.44 4.25 6.12 4.38 C2.65 4.69 2.65 4.69 0 7 C-0.28 9.13 -0.28 9.13 -0.2 11.57 C-0.19 12.47 -0.18 13.36 -0.18 14.29 C-0.15 15.69 -0.15 15.69 -0.12 17.12 C-0.11 18.54 -0.11 18.54 -0.1 19.99 C-0.07 22.33 -0.04 24.66 0 27 C-0.99 27.33 -1.98 27.66 -3 28 C-3 20.41 -3 12.82 -3 5 C-2.34 4.67 -1.68 4.34 -1 4 C-0.35 1.98 -0.35 1.98 0 0 Z \",fill:\"#401F55\",transform:\"translate(1231,745)\"})),_path1425||(_path1425=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5 0.62 0.99 1.24 1.5 1.88 C0.51 2.2 -0.48 2.54 -1.5 2.88 C-2.22 2.24 -2.94 1.6 -3.69 0.94 C-6.74 -1.3 -8.62 -1.7 -12.39 -1.53 C-15.44 -0.95 -17.85 0.41 -20.54 1.92 C-23.5 3.36 -26.23 3.6 -29.5 3.88 C-30.49 1.56 -31.48 -0.75 -32.5 -3.12 C-31.84 -3.12 -31.18 -3.12 -30.5 -3.12 C-30.5 -2.46 -30.5 -1.81 -30.5 -1.12 C-29.64 -1.26 -28.79 -1.39 -27.9 -1.53 C-25.54 -1.89 -23.19 -2.25 -20.83 -2.61 C-18.44 -2.98 -16.06 -3.41 -13.69 -3.88 C-8.36 -4.29 -4.11 -3.49 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(576.5,508.125)\"})),_path1426||(_path1426=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.03 3.09 0.97 4.53 0.56 7.69 C0.46 8.5 0.36 9.3 0.25 10.14 C0.17 10.75 0.09 11.37 0 12 C4.52 12.08 8.59 12.1 13 11 C12.81 12.88 12.81 12.88 12 15 C9.5 16.19 9.5 16.19 7 17 C6.67 17.33 6.34 17.66 6 18 C3.06 18.19 3.06 18.19 0 18 C-2 16 -2 16 -2.27 13.57 C-2.26 12.62 -2.26 11.67 -2.25 10.69 C-2.26 9.74 -2.26 8.8 -2.27 7.82 C-1.99 4.87 -1.23 2.68 0 0 Z \",fill:\"#3B174B\",transform:\"translate(409,500)\"})),_path1427||(_path1427=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-0.63 5.93 -2.86 8.42 -5 11 C-5.76 11.99 -6.53 12.98 -7.31 14 C-10.58 16.43 -12.55 16.84 -16.57 16.63 C-21.17 15.43 -24.76 12.39 -28 9 C-28 8.34 -28 7.68 -28 7 C-27.01 6.67 -26.02 6.34 -25 6 C-24.3 6.78 -23.6 7.57 -22.88 8.38 C-19.82 11.17 -18.07 12.34 -14 13 C-7.38 11.27 -3.87 5.24 0 0 Z \",fill:\"#3A184A\",transform:\"translate(586,1245)\"})),_path1428||(_path1428=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.78 2.27 1.78 2.27 1.56 3.56 C-0.47 14.33 -0.47 14.33 1 25 C0.34 29.58 -0.29 32.82 -3.69 36.06 C-7.79 38.46 -9.46 37.99 -14 37 C-16.81 37.36 -16.81 37.36 -19 38 C-18.67 37.01 -18.34 36.02 -18 35 C-17.01 35 -16.02 35 -15 35 C-14.67 34.34 -14.34 33.68 -14 33 C-11.36 33.33 -8.72 33.66 -6 34 C-3.56 30.39 -2.59 27.78 -2.3 23.44 C-2.23 22.39 -2.15 21.35 -2.07 20.27 C-2.01 19.19 -1.94 18.11 -1.88 17 C-1.73 14.85 -1.58 12.71 -1.43 10.56 C-1.37 9.62 -1.31 8.67 -1.25 7.69 C-1.01 5.07 -0.56 2.57 0 0 Z \",fill:\"#0E0F3A\",transform:\"translate(999,1219)\"})),_path1429||(_path1429=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.65 -1.32 3.3 -2 5 C-2.66 5 -3.32 5 -4 5 C-4.19 5.7 -4.37 6.4 -4.56 7.12 C-6.49 10.98 -9.28 13.8 -13 16 C-13.99 15.67 -14.98 15.34 -16 15 C-15.81 13.12 -15.81 13.12 -15 11 C-14.2 10.71 -13.39 10.42 -12.56 10.12 C-11.29 9.57 -11.29 9.57 -10 9 C-9.28 7.02 -8.62 5.02 -8 3 C-5.09 0.09 -4.29 0 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(1022,1072)\"})),_path1430||(_path1430=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C2.83 4.21 3.66 5.42 4.5 6.62 C4.92 7.24 5.35 7.85 5.78 8.48 C6.94 10.15 6.94 10.15 9 11 C9.96 12.66 10.92 14.33 11.85 16.01 C13.68 19.17 15.84 22.06 18 25 C17.67 25.66 17.34 26.32 17 27 C13.29 23.35 9.74 19.61 6.31 15.69 C5.83 15.16 5.34 14.63 4.84 14.08 C1.23 9.92 -0.1 6.44 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3A1949\",transform:\"translate(474,949)\"})),_path1431||(_path1431=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C0.42 5.23 -1.17 7.46 -2.75 9.69 C-3.19 10.31 -3.64 10.94 -4.09 11.58 C-9.43 19.08 -9.43 19.08 -12 22 C-12.66 22 -13.32 22 -14 22 C-12.68 14.75 -8.69 8.61 -4 3 C-1.74 2.15 -1.74 2.15 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2F153C\",transform:\"translate(298,693)\"})),_path1432||(_path1432=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.4 1.13 3.81 1.85 5.88 4.62 C10.51 10.17 16.6 12.92 23 16 C18.09 17.64 13.72 15.83 9 14 C5.64 11.9 2.58 9.83 1.36 5.95 C1.24 5.31 1.12 4.66 1 4 C0.81 3.26 0.63 2.51 0.44 1.75 C0.29 1.17 0.15 0.6 0 0 Z \",fill:\"#311541\",transform:\"translate(917,617)\"})),_path1433||(_path1433=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-3.73 5.1 -7.03 5 -10.88 4.84 C-13.3 4.85 -13.3 4.85 -16 7 C-16.86 10.35 -17 13.28 -16.94 16.75 C-17 20 -17 20 -19 22 C-18.98 20.99 -18.96 19.98 -18.94 18.94 C-18.9 15.02 -18.9 15.02 -19.62 11.31 C-20.01 7.87 -20.11 6.69 -18 4 C-12.78 -0.15 -6.43 -0.2 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(860,513)\"})),_path1434||(_path1434=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.18 0.7 0.36 1.4 0.55 2.12 C3.01 12.27 3.01 12.27 7.75 21.44 C9.65 25.33 8.75 28.84 8 33 C5.83 28.78 4 24.81 4 20 C1.52 19.01 1.52 19.01 -1 18 C-0.96 17.05 -0.92 16.1 -0.88 15.12 C-0.86 10.29 -1.94 5.69 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#270F3A\",transform:\"translate(536,496)\"})),_path1435||(_path1435=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2.33 2.32 2.66 3 3 C2.34 4.65 1.68 6.3 1 8 C-1.31 8.33 -3.62 8.66 -6 9 C-6.03 10.42 -6.05 11.83 -6.06 13.25 C-6.07 14.04 -6.09 14.83 -6.1 15.64 C-6 17.91 -5.63 19.83 -5 22 C-8.96 18.96 -9.98 15.86 -10.89 11.13 C-11 9 -11 9 -9.62 6.44 C-9.09 5.96 -8.55 5.49 -8 5 C-7.34 5.33 -6.68 5.66 -6 6 C-2.48 3.45 -2.48 3.45 0 0 Z \",fill:\"#401E54\",transform:\"translate(962,490)\"})),_path1436||(_path1436=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5 1.89 6.15 3.41 8 7 C8.2 9.69 8.09 12.3 8 15 C8.33 15.99 8.66 16.98 9 18 C9.04 20.33 9.04 22.67 9 25 C6.61 21.42 5.48 17.84 4.1 13.79 C3.07 10.95 3.07 10.95 1.38 8.36 C-0.34 5.42 -0.23 3.35 0 0 Z \",fill:\"#67486D\",transform:\"translate(693,306)\"})),_path1437||(_path1437=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C4.72 3.92 4.42 5.83 4.12 7.75 C3.96 8.82 3.8 9.88 3.63 10.98 C3.07 13.68 2.37 15.64 1 18 C1 17.34 1 16.68 1 16 C-0.98 16 -2.96 16 -5 16 C-5.33 15.01 -5.66 14.02 -6 13 C-4.68 13 -3.36 13 -2 13 C-1.94 12.23 -1.88 11.46 -1.82 10.66 C-1.73 9.66 -1.65 8.66 -1.56 7.62 C-1.48 6.63 -1.4 5.63 -1.32 4.6 C-1 2 -1 2 0 0 Z \",fill:\"#81698A\",transform:\"translate(916,363)\"})),_path1438||(_path1438=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.38 0.69 3.38 0.69 7 2 C9.49 5.78 9.17 9.58 9 14 C8.34 14 7.68 14 7 14 C6.34 12.35 5.68 10.7 5 9 C4.01 9 3.02 9 2 9 C1.67 9.99 1.34 10.98 1 12 C0.67 10.35 0.34 8.7 0 7 C-0.99 7 -1.98 7 -3 7 C-2.25 2.25 -2.25 2.25 0 0 Z \",fill:\"#1B1320\",transform:\"translate(505,294)\"})),_path1439||(_path1439=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.5 2.97 0.5 6 1 C5.11 4.95 4.1 8.51 2 12 C-1.3 13.56 -4.38 13.91 -8 14 C-8 13.01 -8 12.02 -8 11 C-7.24 10.86 -6.47 10.71 -5.69 10.56 C-1.95 8.39 -1.63 5.92 -0.48 1.9 C-0.32 1.27 -0.16 0.65 0 0 Z \",fill:\"#251B27\",transform:\"translate(600,258)\"})),_path1440||(_path1440=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.17 -0.36 4.69 -0.19 7.44 1.5 C10.73 4.71 13.35 8.25 16 12 C13 12 13 12 10 11 C9.67 11.66 9.34 12.32 9 13 C4.61 9.03 1.31 5.99 0 0 Z \",fill:\"#2F163C\",transform:\"translate(668,101)\"})),_path1441||(_path1441=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.24 7.69 8.73 17.35 10 27 C5.47 23.38 4.07 18.79 2.19 13.5 C1.86 12.65 1.54 11.79 1.21 10.91 C-1.33 3.95 -1.33 3.95 0 0 Z \",fill:\"#090F36\",transform:\"translate(1239,959)\"})),_path1442||(_path1442=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C10.22 14.71 10.22 14.71 11.56 20.38 C11.71 20.91 11.85 21.45 12 22 C12.66 22.33 13.32 22.66 14 23 C18 28.53 18 28.53 18 31 C10.18 27.68 7.08 18.38 3.62 11.12 C3.27 10.38 2.91 9.63 2.54 8.85 C2.04 7.79 2.04 7.79 1.54 6.7 C1.24 6.06 0.95 5.42 0.64 4.76 C0 3 0 3 0 0 Z \",fill:\"#331543\",transform:\"translate(416,932)\"})),_path1443||(_path1443=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.42 2.97 -3.05 5.72 -4.81 8.5 C-8.83 15.14 -12.32 22.38 -14 30 C-14.66 30 -15.32 30 -16 30 C-16.33 30.66 -16.66 31.32 -17 32 C-16.53 26.64 -15.06 22.3 -12.97 17.36 C-11.91 14.88 -11.91 14.88 -11 11.75 C-9.25 6.94 -5.86 0 0 0 Z \",fill:\"#3A164A\",transform:\"translate(305,767)\"})),_path1444||(_path1444=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.7 2.47 -7.64 4.33 -11.64 6.26 C-14.68 7.75 -17.55 9.31 -20.32 11.23 C-23 13 -23 13 -25 13 C-25 10.81 -25 10.81 -24 8 C-17.38 2.2 -8.68 -0.55 0 0 Z \",fill:\"#7C5B7B\",transform:\"translate(817,763)\"})),_path1445||(_path1445=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C2.64 1.67 5.28 1.34 8 1 C8 1.66 8 2.32 8 3 C-4.87 3.99 -4.87 3.99 -18 5 C-18 4.34 -18 3.68 -18 3 C-18.66 2.34 -19.32 1.68 -20 1 C-19.24 0.86 -18.47 0.71 -17.69 0.56 C-11.37 -0.76 -6.45 -1.56 0 0 Z \",fill:\"#1D1521\",transform:\"translate(578,543)\"})),_path1446||(_path1446=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.65 1.67 3.3 1.34 5 1 C5.33 2.32 5.66 3.64 6 5 C3.92 5.7 1.84 6.38 -0.25 7.06 C-1.41 7.45 -2.57 7.83 -3.77 8.22 C-6.79 8.95 -8.2 9.27 -11 8 C-12.25 5.94 -12.25 5.94 -13 4 C-10.52 4.5 -10.52 4.5 -8 5 C-7.67 4.01 -7.34 3.02 -7 2 C-4.57 0.81 -2.72 0 0 0 Z \",fill:\"#836988\",transform:\"translate(548,434)\"})),_path1447||(_path1447=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69 1.81 0.69 1.81 1 4 C-1.15 7.16 -4.58 8.5 -8 10 C-8.99 10 -9.98 10 -11 10 C-11.66 8.02 -12.32 6.04 -13 4 C-4.74 -0.59 -4.74 -0.59 0 0 Z \",fill:\"#70577E\",transform:\"translate(678,321)\"})),_path1448||(_path1448=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.06 4.28 2.12 8.43 2.06 12.81 C2.06 13.51 2.05 14.2 2.05 14.91 C2.04 16.61 2.02 18.3 2 20 C-2.21 21.85 -5.39 22.18 -10 22 C-9.34 21.67 -8.68 21.34 -8 21 C-7.6 19.76 -7.6 19.76 -7.19 18.5 C-6.8 17.68 -6.4 16.85 -6 16 C-3.38 15.19 -3.38 15.19 -1 15 C-1.33 14.01 -1.66 13.02 -2 12 C-1.33 10 -0.67 8 0 6 C0.17 2.75 0.17 2.75 0 0 Z \",fill:\"#2C123E\",transform:\"translate(922,236)\"})),_path1449||(_path1449=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.79 0.54 5.55 2.12 8 5 C8 5.66 8 6.32 8 7 C8.66 7 9.32 7 10 7 C10.12 8.83 10.12 8.83 10.25 10.69 C10.74 14.78 12.1 17 15 20 C8.15 16.9 3.82 11.47 0.63 4.8 C0 3 0 3 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(749,240)\"})),_path1450||(_path1450=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.44 5.74 -3.85 9.68 -8 13 C-9.32 13.37 -10.66 13.7 -12 14 C-12.66 14.66 -13.32 15.32 -14 16 C-14.66 14.68 -15.32 13.36 -16 12 C-10.93 7.6 -5.53 3.79 0 0 Z \",fill:\"#2F163C\",transform:\"translate(351,1253)\"})),_path1451||(_path1451=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.51 3.39 2.81 5.57 3 8 C3.07 8.84 3.13 9.68 3.2 10.55 C3.49 17.34 3.49 17.34 1.06 20.62 C-1 22 -1 22 -2 22 C-2.05 19.4 -2.09 16.79 -2.12 14.19 C-2.14 13.45 -2.16 12.71 -2.18 11.95 C-2.21 8.09 -2.19 6.29 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#2A1238\",transform:\"translate(444,1095)\"})),_path1452||(_path1452=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.18 -1.77 5.2 -4.62 8.19 C-8.75 12.57 -12.53 17.08 -16 22 C-16.66 21.67 -17.32 21.34 -18 21 C-17.38 17.12 -15.53 14.58 -13.25 11.44 C-12.57 10.49 -11.9 9.54 -11.2 8.56 C-8.96 5.96 -7.01 4.6 -4 3 C-2.65 2.02 -1.32 1.02 0 0 Z \",fill:\"#432E4B\",transform:\"translate(1040,1089)\"})),_path1453||(_path1453=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 0.66 4.66 1.32 5 2 C7.62 2.43 10.17 2.75 12.81 3 C21.57 3.84 21.57 3.84 25 6 C20.97 6.77 17.63 7.06 13.56 6.5 C9.15 5.9 5.38 6.28 1 7 C0.88 6.36 0.75 5.72 0.62 5.06 C0.32 4.04 0.32 4.04 0 3 C-0.66 2.67 -1.32 2.34 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#66476C\",transform:\"translate(1096,1044)\"})),_path1454||(_path1454=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.76 8.17 2.13 16.3 2.19 24.5 C2.2 25.35 2.21 26.2 2.23 27.07 C2.23 31.79 1.82 35.56 0 40 C-0.33 40 -0.66 40 -1 40 C-0.99 39.37 -0.99 38.74 -0.98 38.09 C-0.8 22.23 -0.8 22.23 -1.98 6.43 C-2 3.71 -1.41 2.29 0 0 Z \",fill:\"#432255\",transform:\"translate(363,1030)\"})),_path1455||(_path1455=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.3 1.02 3.61 2.05 3.92 3.11 C4.34 4.47 4.76 5.83 5.19 7.19 C5.38 7.86 5.58 8.53 5.78 9.23 C7.3 14 9.26 16.55 13 20 C14.31 23.31 14.31 23.31 15 26 C15.66 26 16.32 26 17 26 C17.33 27.65 17.66 29.3 18 31 C17.34 31 16.68 31 16 31 C15.5 30.05 15.01 29.1 14.5 28.12 C12.65 24.84 10.45 22.11 8 19.25 C3.46 13.72 0 7.3 0 0 Z \",fill:\"#44214F\",transform:\"translate(345,996)\"})),_path1456||(_path1456=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 1.33 3.34 1.66 3 2 C3.66 2.66 4.32 3.32 5 4 C4.24 6.46 3.47 8.92 2.69 11.38 C2.47 12.07 2.26 12.77 2.04 13.49 C0.34 18.77 0.34 18.77 -3 21 C-3.96 17.96 -3.99 15.98 -3.22 12.89 C-3.04 12.14 -2.86 11.38 -2.67 10.61 C-2.37 9.44 -2.37 9.44 -2.06 8.25 C-1.87 7.46 -1.67 6.66 -1.47 5.85 C-0.99 3.9 -0.5 1.95 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(968,875)\"})),_path1457||(_path1457=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.11 4.17 0.11 4.17 -1.25 6.75 C-1.72 7.65 -2.19 8.54 -2.67 9.47 C-3.33 10.72 -3.33 10.72 -4 12 C-4.77 13.61 -4.77 13.61 -5.56 15.25 C-7.18 18.34 -8.93 21.19 -11 24 C-11.66 24 -12.32 24 -13 24 C-13 22.02 -13 20.04 -13 18 C-12.34 17.67 -11.68 17.34 -11 17 C-11.33 15.68 -11.66 14.36 -12 13 C-11.01 12.67 -10.02 12.34 -9 12 C-7.78 10.37 -7.78 10.37 -6.81 8.44 C-6.21 7.3 -5.62 6.17 -5 5 C-4.34 5 -3.68 5 -3 5 C-3 4.01 -3 3.02 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#0A0F36\",transform:\"translate(1002,800)\"})),_path1458||(_path1458=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C15.39 5.95 15.39 5.95 20 12 C20.64 14.18 20.64 14.18 21 16 C16.93 14.58 13.87 12.6 10.44 10 C6.77 7.18 6.77 7.18 2.72 5 C1 4 1 4 0.25 1.88 C0.17 1.26 0.09 0.64 0 0 Z \",fill:\"#381946\",transform:\"translate(1129,787)\"})),_path1459||(_path1459=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 3.31 0.03 6.21 -1.07 9.59 C-2.26 12.68 -3.25 14.12 -6 16 C-7.52 16.64 -9.04 17.26 -10.56 17.88 C-14.16 19.36 -14.87 19.79 -17.06 23.25 C-17.37 24.16 -17.68 25.07 -18 26 C-18.99 25.34 -19.98 24.68 -21 24 C-18.69 17.56 -18.69 17.56 -15.75 15.19 C-13 14 -13 14 -9.38 13.12 C-5.93 12.32 -5.93 12.32 -4.25 9.81 C-3.84 8.88 -3.42 7.96 -3 7 C-2.72 6.38 -2.45 5.76 -2.16 5.12 C-1.42 3.42 -0.7 1.71 0 0 Z \",fill:\"#846A89\",transform:\"translate(777,514)\"})),_path1460||(_path1460=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 1.98 4.95 1.98 10 4 C9.67 4.66 9.34 5.32 9 6 C8.34 6 7.68 6 7 6 C6.98 7.26 6.96 8.52 6.94 9.81 C6.93 10.52 6.91 11.23 6.9 11.96 C6.92 14.2 6.92 14.2 8 17 C3.57 15.52 2.45 12.51 0.16 8.59 C-1.29 5.35 -1.22 3.32 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(549,523)\"})),_path1461||(_path1461=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.91 1.3 6.07 3.43 8 7 C8.83 11.78 8.55 15.81 6 20 C4.19 20.94 4.19 20.94 2 21 C-0.24 19.85 -2.21 18.79 -4 17 C-4.43 10.81 -3.49 6.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z M0 5 C-2.43 8.84 -3.14 10.33 -2.19 14.88 C-1.8 15.91 -1.4 16.94 -1 18 C0.65 18.33 2.3 18.66 4 19 C6.15 16.07 7.02 14.57 6.88 10.88 C5.99 7.97 5.47 6.71 3 5 C2.01 5 1.02 5 0 5 Z \",fill:\"#6A4B70\",transform:\"translate(552,460)\"})),_path1462||(_path1462=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.51 0.95 3 1.91 4.5 2.88 C5.75 3.68 5.75 3.68 7.03 4.49 C7.68 4.99 8.33 5.49 9 6 C9 6.66 9 7.32 9 8 C9.66 7.67 10.32 7.34 11 7 C12.54 6.93 14.08 6.92 15.62 6.94 C16.85 6.95 16.85 6.95 18.1 6.96 C19.04 6.98 19.04 6.98 20 7 C19.67 7.99 19.34 8.98 19 10 C19.56 9.84 20.11 9.69 20.69 9.53 C26.22 8.12 30.38 7.98 36 9 C36 9.66 36 10.32 36 11 C32.69 11.09 29.38 11.14 26.06 11.19 C24.67 11.23 24.67 11.23 23.26 11.26 C14.61 11.35 6.73 9.69 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3B174B\",transform:\"translate(859,223)\"})),_path1463||(_path1463=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91 0.62 1.81 1.24 2.75 1.88 C5.15 3.44 7.41 4.8 10 6 C10.33 5.01 10.66 4.02 11 3 C11.33 3.99 11.66 4.98 12 6 C12.66 6.31 13.32 6.62 14 6.94 C16 8 16 8 16.81 10 C17 12 17 12 16 14 C13.75 14.31 13.75 14.31 11 14 C9 11.81 9 11.81 7 9 C4.42 6.29 2.12 4.08 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#291233\",transform:\"translate(179,1246)\"})),_path1464||(_path1464=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 2.31 2.5 2.31 5 5 C5 5.99 5 6.98 5 8 C5.66 8 6.32 8 7 8 C7.53 9.58 8.05 11.16 8.56 12.75 C8.85 13.63 9.14 14.51 9.44 15.42 C10.02 18.08 9.89 19.47 9 22 C8.34 22 7.68 22 7 22 C6.75 21.34 6.49 20.67 6.23 19.99 C4.09 14.46 4.09 14.46 1.31 9.25 C-0.29 6.5 -0.71 4.15 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#361843\",transform:\"translate(175,1219)\"})),_path1465||(_path1465=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-3.19 7.09 -6.27 8.66 -12.05 9.64 C-14.07 9.92 -14.07 9.92 -16 11 C-16 9.68 -16 8.36 -16 7 C-15.34 7 -14.68 7 -14 7 C-13.78 6.04 -13.78 6.04 -13.56 5.06 C-13 3 -13 3 -12 2 C-9.74 1.97 -7.49 2.07 -5.23 2.16 C-2.71 2.16 -2.71 2.16 0 0 Z \",fill:\"#816786\",transform:\"translate(1129,1219)\"})),_path1466||(_path1466=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 10.23 2 20.46 2 31 C-1 28 -1 28 -1.26 25.69 C-1.21 24.8 -1.17 23.91 -1.12 23 C-1 18.98 -1.14 15.18 -1.62 11.19 C-2.07 6.96 -1.81 3.94 0 0 Z \",fill:\"#3E1C4D\",transform:\"translate(1278,847)\"})),_path1467||(_path1467=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.48 4.34 -1.65 6.21 -5 9 C-9.39 12 -9.39 12 -13 12 C-11.82 6.53 -10.5 3.65 -6 0 C-3.3 -1.08 -2.61 -1.3 0 0 Z \",fill:\"#44214E\",transform:\"translate(261,756)\"})),_path1468||(_path1468=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 0.31 2.88 0.31 6 1 C8 4 8 4 7.75 6.62 C7.5 7.41 7.25 8.19 7 9 C4.27 10.37 2.02 10.13 -1 10 C-2 9 -2 9 -2.19 6.12 C-2 3 -2 3 0 0 Z \",fill:\"#39154B\",transform:\"translate(583,691)\"})),_path1469||(_path1469=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.44 5.04 -2.71 7.38 -6 11 C-9.36 9.88 -10.58 8.5 -13 6 C-13.66 5.67 -14.32 5.34 -15 5 C-15 4.34 -15 3.68 -15 3 C-12.03 3.33 -9.06 3.66 -6 4 C-8.31 3.34 -10.62 2.68 -13 2 C-13 1.67 -13 1.34 -13 1 C-8.59 -0.1 -4.52 -0.08 0 0 Z \",fill:\"#311244\",transform:\"translate(623,635)\"})),_path1470||(_path1470=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 1.04 11.52 3.11 17.22 5.07 C19.16 5.74 21.11 6.4 23.06 7.05 C30.33 9.54 37.25 12.32 44 16 C39.95 17.35 38.64 16.16 34.81 14.38 C29.55 11.99 24.29 10.03 18.75 8.38 C5.71 4.44 5.71 4.44 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#000003\",transform:\"translate(1150,617)\"})),_path1471||(_path1471=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.91 0.53 5.95 1.43 8.81 4.12 C9.49 4.75 10.17 5.38 10.87 6.02 C11.57 6.67 12.27 7.33 13 8 C14.48 9.27 15.96 10.55 17.44 11.81 C20.88 14.75 20.88 14.75 22 17 C20.68 17 19.36 17 18 17 C17.67 17.66 17.34 18.32 17 19 C15 18 15 18 13.94 14.81 C12.19 10.36 8.98 8.67 4.96 6.36 C3 5 3 5 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#311640\",transform:\"translate(1005,581)\"})),_path1472||(_path1472=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.45 0.5 0.91 0.99 1.38 1.5 C2.88 3.23 2.88 3.23 5 3 C7 9.67 9 16.33 11 23 C7.24 21.76 5.92 19.64 4.16 16.19 C3.86 15.57 3.56 14.95 3.25 14.31 C2.93 13.71 2.62 13.11 2.29 12.49 C0.15 8.18 -0.32 4.78 0 0 Z \",fill:\"#351447\",transform:\"translate(868,563)\"})),_path1473||(_path1473=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.56 7.85 -1.18 14.99 -3.44 22.5 C-3.75 23.58 -4.06 24.67 -4.38 25.78 C-6.74 33.74 -6.74 33.74 -9 36 C-10.78 31.83 -9.06 28.17 -7.69 24.12 C-7.35 23.08 -7.35 23.08 -7 22.02 C-6.56 20.65 -6.1 19.29 -5.65 17.93 C-5.05 16.14 -4.47 14.35 -3.89 12.55 C-3 10 -3 10 -2 9 C-1.61 7.49 -1.26 5.97 -0.94 4.44 C-0.76 3.61 -0.58 2.78 -0.4 1.93 C-0.27 1.3 -0.14 0.66 0 0 Z \",fill:\"#7B6082\",transform:\"translate(797,475)\"})),_path1474||(_path1474=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C5.01 8.48 4.9 16.64 1.95 25.12 C0.91 27.18 -0.29 28.47 -2 30 C-1.67 28.35 -1.34 26.7 -1 25 C-2.32 25.33 -3.64 25.66 -5 26 C-5 25.34 -5 24.68 -5 24 C-4.03 23.64 -4.03 23.64 -3.04 23.27 C-0.82 22.21 -0.82 22.21 -0.43 20.05 C-0.39 19.29 -0.35 18.53 -0.31 17.75 C-0.26 16.95 -0.21 16.15 -0.15 15.33 C-0.1 14.56 -0.05 13.79 0 13 C0.31 11.27 0.31 11.27 0.62 9.5 C0.81 8.26 0.81 8.26 1 7 C0.67 6.67 0.34 6.34 0 6 C-0.04 4 -0.04 2 0 0 Z \",fill:\"#3A1949\",transform:\"translate(467,454)\"})),_path1475||(_path1475=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.95 3.47 -6.08 3.65 -9.31 4.06 C-9.98 4.15 -10.64 4.24 -11.33 4.34 C-14.91 4.81 -18.39 5.1 -22 5 C-21 2 -21 2 -18.19 0.31 C-13 -1.75 -5.08 -2.54 0 0 Z \",fill:\"#2C1E31\",transform:\"translate(645,341)\"})),_path1476||(_path1476=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.32 2.64 2.64 4 4 C1.62 6.63 -0.96 8.19 -4 10 C-5.68 11.31 -7.36 12.64 -9 14 C-10 12 -10 12 -9.06 8.88 C-8.71 7.93 -8.36 6.98 -8 6 C-8.66 5.67 -9.32 5.34 -10 5 C-6.7 3.35 -3.4 1.7 0 0 Z \",fill:\"#70577D\",transform:\"translate(625,336)\"})),_path1477||(_path1477=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.61 4.02 0.33 7.02 -1 11 C-1.34 11.79 -1.69 12.57 -2.04 13.38 C-3.07 16.19 -3.33 18.52 -3.5 21.5 C-3.72 25.42 -4.39 28.41 -6 32 C-6.33 32 -6.66 32 -7 32 C-7.55 19.8 -6.6 10.64 0 0 Z \",fill:\"#381946\",transform:\"translate(488,324)\"})),_path1478||(_path1478=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.47 3.87 11.33 8.08 16 14 C15.67 14.66 15.34 15.32 15 16 C13.68 15.34 12.36 14.68 11 14 C11.66 15.98 12.32 17.96 13 20 C11.12 19.38 11.12 19.38 9 18 C8.33 16 7.67 14 7 12 C6.17 11.2 5.35 10.39 4.5 9.56 C1.39 6.37 0.92 4.28 0 0 Z \",fill:\"#241038\",transform:\"translate(845,229)\"})),_path1479||(_path1479=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.32 12.26 -0.29 22.38 -4 34 C-4.33 34 -4.66 34 -5 34 C-5.19 26.91 -5.19 20.8 -3 14 C-2.43 10.57 -1.94 7.14 -1.46 3.7 C-1 1 -1 1 0 0 Z \",fill:\"#391A46\",transform:\"translate(367,1063)\"})),_path1480||(_path1480=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91 0.01 1.82 0.02 2.76 0.03 C3.81 0.04 3.81 0.04 4.88 0.06 C4.55 0.72 4.22 1.38 3.88 2.06 C2.21 2.42 0.55 2.75 -1.12 3.06 C-2.47 3.71 -3.8 4.38 -5.12 5.06 C-8.48 6.26 -11.65 6.02 -15.18 5.96 C-17.76 6.09 -19.76 7.07 -22.12 8.06 C-27.49 8.38 -27.49 8.38 -30.12 7.06 C-29.79 6.4 -29.47 5.74 -29.12 5.06 C-28.18 5.08 -27.23 5.1 -26.25 5.12 C-23.22 5.29 -23.22 5.29 -21.12 4.06 C-18.34 3.79 -15.55 3.62 -12.75 3.44 C-9.9 3.22 -9.9 3.22 -7.12 1.06 C-4.6 -0.2 -2.81 -0.04 0 0 Z \",fill:\"#301243\",transform:\"translate(264.125,915.9375)\"})),_path1481||(_path1481=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5 1.75 4.65 5.46 6 9 C6.56 12.75 6.56 12.75 6 16 C3.5 18.44 3.5 18.44 1 20 C0.34 19.67 -0.32 19.34 -1 19 C-0.86 18.44 -0.71 17.89 -0.56 17.31 C-0.38 16.55 -0.19 15.79 0 15 C0.23 14.15 0.45 13.31 0.69 12.44 C1.3 9.74 1.3 9.74 -1 7 C-1.19 3.88 -1.19 3.88 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0B133D\",transform:\"translate(1159,878)\"})),_path1482||(_path1482=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.5 7.59 1.18 13.74 -3 20 C-3.66 19.67 -4.32 19.34 -5 19 C-4.39 12.32 -2.22 6.3 0 0 Z \",fill:\"#2A1239\",transform:\"translate(410,470)\"})),_path1483||(_path1483=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C4.38 3.25 4.38 3.25 6 5 C7.08 5.99 7.08 5.99 8.19 7 C10 9 10 9 10 12 C10.66 12 11.32 12 12 12 C12.33 13.65 12.66 15.3 13 17 C11.68 17.33 10.36 17.66 9 18 C0 6.66 0 6.66 0 0 Z \",fill:\"#624468\",transform:\"translate(524,440)\"})),_path1484||(_path1484=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.3 2.12 2.6 2.25 3.94 2.38 C8.72 2.9 13.33 3.86 18 5 C17.01 6.49 17.01 6.49 16 8 C13.87 7.94 11.75 7.85 9.62 7.75 C8.44 7.7 7.26 7.66 6.04 7.61 C3 7 3 7 1.59 4.95 C1.39 4.31 1.2 3.66 1 3 C0.07 3.52 -0.86 4.03 -1.81 4.56 C-5 6 -5 6 -8 5 C-7.01 4.34 -6.02 3.68 -5 3 C-5.99 2.34 -6.98 1.68 -8 1 C-5.07 0.02 -3.04 -0.08 0 0 Z \",fill:\"#4E3C56\",transform:\"translate(670,232)\"})),_path1485||(_path1485=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.02 -0.07 1.02 -0.07 2.06 -0.15 C4 0.38 4 0.38 5.73 2.55 C7.11 5.63 7.34 7.53 7.25 10.88 C7.21 12.44 7.21 12.44 7.16 14.03 C7.11 15.13 7.06 16.24 7 17.38 C6.95 18.55 6.89 19.73 6.84 20.94 C6.29 29.94 6.29 29.94 4 33.38 C3.97 30.4 3.95 27.42 3.94 24.44 C3.93 23.59 3.92 22.74 3.91 21.86 C3.91 21.05 3.91 20.24 3.9 19.41 C3.9 18.66 3.89 17.91 3.89 17.14 C4 15.38 4 15.38 5 14.38 C4.77 10.39 4.63 8.09 1.94 5.06 C0.98 4.23 0.98 4.23 0 3.38 C0 2.72 0 2.06 0 1.38 C-4.95 2.86 -4.95 2.86 -10 4.38 C-6.66 1.03 -4.56 0.22 0 0 Z \",fill:\"#401D4E\",transform:\"translate(510,211.625)\"})),_path1486||(_path1486=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.12 3.99 2.9 5.97 1.12 9.69 C-1.1 14.79 -1.76 19.47 -2 25 C-2.33 25 -2.66 25 -3 25 C-3 22.69 -3 20.38 -3 18 C-3.66 18 -4.32 18 -5 18 C-5.6 10.48 -4.14 6.26 0 0 Z \",fill:\"#27103A\",transform:\"translate(143,1155)\"})),_path1487||(_path1487=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.69 2.06 1.69 2.06 1.69 5.06 C2.35 5.06 3.01 5.06 3.69 5.06 C3.69 9.68 3.69 14.3 3.69 19.06 C0.38 15.76 0.16 14.61 -0.69 10.19 C-1.89 5.13 -2.72 1.96 -7.31 -0.94 C-10.32 -1.59 -13.24 -1.86 -16.31 -1.94 C-16.31 -2.27 -16.31 -2.6 -16.31 -2.94 C-9.7 -4 -5.39 -4.52 0 0 Z \",fill:\"#70577E\",transform:\"translate(1150.3125,1045.9375)\"})),_path1488||(_path1488=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.41 10.57 0.67 20.1 -3 30 C-3.66 29.67 -4.32 29.34 -5 29 C-4.64 22.45 -3.74 16.6 -1.7 10.37 C-0.68 6.93 -0.33 3.57 0 0 Z \",fill:\"#381A43\",transform:\"translate(285,1026)\"})),_path1489||(_path1489=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.99 2.64 1.98 4 3 C4 3.66 4 4.32 4 5 C5.32 5 6.64 5 8 5 C8 9.29 8 13.58 8 18 C6.68 17.34 5.36 16.68 4 16 C3.25 12.88 3.25 12.88 3 10 C2.34 10 1.68 10 1 10 C0.67 6.7 0.34 3.4 0 0 Z \",fill:\"#351546\",transform:\"translate(1272,762)\"})),_path1490||(_path1490=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.58 3.24 -1.51 4.89 -3.84 7.2 C-4.69 8.05 -4.69 8.05 -5.56 8.92 C-6.16 9.51 -6.76 10.09 -7.38 10.69 C-7.97 11.28 -8.56 11.87 -9.16 12.49 C-13.6 16.87 -13.6 16.87 -17 18 C-16.34 10.53 -10.11 6.03 -4.87 1.32 C-3 0 -3 0 0 0 Z \",fill:\"#301838\",transform:\"translate(274,729)\"})),_path1491||(_path1491=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.17 0.49 12.43 1.1 18 4 C18.99 5.32 19.98 6.64 21 8 C17.7 8.66 14.4 9.32 11 10 C10.34 8.68 9.68 7.36 9 6 C7.36 5.28 5.69 4.61 4 4 C3.67 3.34 3.34 2.68 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#7C607F\",transform:\"translate(623,373)\"})),_path1492||(_path1492=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.84 0 5.24 0.4 8 1 C9.15 4.55 9.09 5.8 7.56 9.31 C6.79 10.64 6.79 10.64 6 12 C1.12 10.25 1.12 10.25 0 8 C-0.13 5.33 -0.04 2.68 0 0 Z \",fill:\"#80719E\",transform:\"translate(900,373)\"})),_path1493||(_path1493=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12 3.53 2.53 6.94 3 11 C4.98 10.34 6.96 9.68 9 9 C9 11.97 9 14.94 9 18 C7.52 17.58 6.04 17.14 4.56 16.69 C3.74 16.44 2.92 16.2 2.07 15.95 C1.38 15.64 0.7 15.32 0 15 C-0.99 12.04 -1.13 10.03 -1.12 6.94 C-1.13 6.06 -1.13 5.18 -1.13 4.28 C-1 2 -1 2 0 0 Z \",fill:\"#18111B\",transform:\"translate(683,279)\"})),_path1494||(_path1494=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.3 2.6 0.81 3.76 0.19 6.56 C0.02 7.37 -0.16 8.17 -0.33 9 C-1 11 -1 11 -3 12 C-1.91 15.78 -1.09 18.47 2 21 C1.67 21.33 1.34 21.66 1 22 C2.98 22.99 4.96 23.98 7 25 C6.67 25.66 6.34 26.32 6 27 C5.39 26.64 4.77 26.28 4.14 25.91 C3.33 25.44 2.52 24.98 1.69 24.5 C0.49 23.8 0.49 23.8 -0.74 23.09 C-3.03 21.78 -3.03 21.78 -6 22 C-6.39 15.18 -5.01 9.5 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#482758\",transform:\"translate(473,260)\"})),_path1495||(_path1495=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.14 4.75 -0.14 4.75 -1.81 8 C-2.36 9.07 -2.9 10.15 -3.46 11.25 C-5 14 -5 14 -7 16 C-9.12 15.62 -9.12 15.62 -11 15 C-10.53 10.94 -10.12 7.53 -8 4 C-7.01 4.33 -6.02 4.66 -5 5 C-3.35 3.35 -1.7 1.7 0 0 Z \",fill:\"#2A0F3D\",transform:\"translate(505,148)\"})),_path1496||(_path1496=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.89 0.06 1.89 0.06 3.81 0.12 C2.82 1.61 2.82 1.61 1.81 3.12 C1.15 3.12 0.49 3.12 -0.19 3.12 C-0.19 3.78 -0.19 4.44 -0.19 5.12 C-0.91 5.52 -1.63 5.91 -2.38 6.31 C-6.1 8.72 -7.75 11.44 -10.19 15.12 C-11.61 12.27 -11.5 10.29 -11.19 7.12 C-8.23 2.63 -5.55 -0.18 0 0 Z \",fill:\"#1E0D30\",transform:\"translate(528.1875,114.875)\"})),_path1497||(_path1497=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.65 0.66 -3.3 1.32 -5 2 C-4.67 2.99 -4.34 3.98 -4 5 C-4 5.66 -4 6.32 -4 7 C-3.9 9.05 -3.9 9.05 -3 11 C-1.35 11.71 0.32 12.37 2 13 C4.31 15.12 4.31 15.12 6 17 C5.67 17.99 5.34 18.98 5 20 C4.01 20 3.02 20 2 20 C-0.16 17.73 -0.16 17.73 -2.5 14.75 C-3.27 13.78 -4.05 12.8 -4.84 11.8 C-5.91 10.41 -5.91 10.41 -7 9 C-7.59 8.28 -8.18 7.57 -8.78 6.83 C-10 5 -10 5 -10 2 C-8.71 1.47 -7.42 0.95 -6.12 0.44 C-5.41 0.15 -4.69 -0.14 -3.95 -0.44 C-2 -1 -2 -1 0 0 Z \",fill:\"#2C123D\",transform:\"translate(711,78)\"})),_path1498||(_path1498=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.14 9.1 0.14 9.1 -0.56 13.62 C-1.29 19.22 -1.72 23.9 1 29 C1.12 32.25 1.12 32.25 1 35 C-3.25 28.62 -4.24 22.53 -4 15 C-4.21 13.76 -4.41 12.52 -4.62 11.25 C-5.01 7.92 -4.95 6.67 -3 4 C-2.34 3.67 -1.68 3.34 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#331443\",transform:\"translate(572,856)\"})),_path1499||(_path1499=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 1.76 5.04 C1.17 7.03 0.59 9.01 0 11 C-0.66 11 -1.32 11 -2 11 C-2.12 11.79 -2.24 12.57 -2.37 13.38 C-3.16 17.91 -4.11 22.39 -5.06 26.88 C-5.25 27.75 -5.44 28.63 -5.63 29.54 C-6.08 31.69 -6.54 33.85 -7 36 C-7.66 36 -8.32 36 -9 36 C-9 40.62 -9 45.24 -9 50 C-9.33 50 -9.66 50 -10 50 C-11.11 36.82 -7.84 25.51 -4 13 C-3.57 11.57 -3.14 10.14 -2.71 8.7 C-1.83 5.79 -0.93 2.89 0 0 Z \",fill:\"#260F39\",transform:\"translate(419,770)\"})),_path1500||(_path1500=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C3.11 6 4.03 11.54 2.02 16.36 C1.14 17.65 0.22 18.92 -0.74 20.16 C-2.16 22.23 -2.51 23.79 -2.94 26.25 C-4 30 -4 30 -6.94 32.38 C-7.95 32.91 -8.96 33.45 -10 34 C-10.99 34.66 -11.98 35.32 -13 36 C-11.35 32.31 -11.35 32.31 -9.66 30.8 C-4.06 24.73 -0.52 15.35 -0.62 7.19 C-0.7 6.23 -0.77 5.28 -0.85 4.29 C-1 2 -1 2 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(678,747)\"})),_path1501||(_path1501=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3.33 3.32 3.66 4 4 C6.4 7.41 7 8.71 7 13 C7.66 13.33 8.32 13.66 9 14 C10.11 16.36 10.11 16.36 11.19 19.31 C11.55 20.28 11.92 21.24 12.29 22.24 C13.01 25.03 12.99 26.34 12 29 C9.49 26.49 8.95 24.39 8 21 C8 19.68 8 18.36 8 17 C7.01 16.67 6.02 16.34 5 16 C3.96 13.67 3.1 11.47 2.31 9.06 C2.09 8.42 1.86 7.77 1.63 7.1 C0 2.33 0 2.33 0 0 Z \",fill:\"#28103B\",transform:\"translate(882,613)\"})),_path1502||(_path1502=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.37 3.24 -0.27 3.48 -0.92 3.72 C-3.16 4.82 -3.16 4.82 -3.83 7.06 C-3.97 7.84 -4.11 8.63 -4.25 9.44 C-4.4 10.22 -4.55 11 -4.7 11.81 C-5.15 15.14 -4.89 17.79 -4 21 C-7.53 19.82 -8.26 19.24 -10 16 C-10.25 13.28 -10.14 10.74 -10 8 C-9.01 7.67 -8.02 7.34 -7 7 C-6.67 6.01 -6.34 5.02 -6 4 C-6.99 4.5 -6.99 4.5 -8 5 C-7.19 3.06 -7.19 3.06 -6 1 C-3 0 -3 0 0 0 Z \",fill:\"#534159\",transform:\"translate(925,344)\"})),_path1503||(_path1503=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 7.26 1.66 14.52 2 22 C1.67 21.34 1.34 20.68 1 20 C0.01 19.67 -0.98 19.34 -2 19 C-4.23 13.69 -4.18 8.53 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#381A43\",transform:\"translate(842,340)\"})),_path1504||(_path1504=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 0.21 2.38 0.21 5 1 C6.19 3 6.19 3 7 5.56 C8.54 9.98 10.44 13.51 13.14 17.31 C13.43 17.87 13.71 18.42 14 19 C13.67 19.99 13.34 20.98 13 22 C9.92 19.23 8.31 16.94 7 13 C6.34 13 5.68 13 5 13 C3.1 10.14 2.31 8.07 1.38 4.81 C0.98 3.46 0.98 3.46 0.59 2.08 C0.39 1.39 0.2 0.71 0 0 Z \",fill:\"#715477\",transform:\"translate(791,294)\"})),_path1505||(_path1505=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0.31 7.24 0.75 11 2 C11 2.66 11 3.32 11 4 C11.66 4.33 12.32 4.66 13 5 C10.88 7.12 10.88 7.12 8 9 C3.95 8.42 2.38 7.42 -0.38 4.38 C-0.91 3.59 -1.45 2.81 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#846E8F\",transform:\"translate(742,275)\"})),_path1506||(_path1506=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.76 1.38 3.14 3.04 4.44 5.81 C5.68 8.44 6.82 10.76 8.6 13.07 C10.49 15.67 10.81 18.08 11.38 21.2 C11.93 23.39 11.93 23.39 15 25 C12.69 25 12.69 25 10 24 C8.59 21.46 7.8 18.79 7 16 C5.75 12.25 4.17 11.28 1 9 C0.26 8.65 -0.49 8.3 -1.25 7.94 C-3 7 -3 7 -4 4 C-2.68 2.68 -1.36 1.36 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(628,269)\"})),_path1507||(_path1507=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.45 7.34 0.76 14.1 -2 21 C-3.21 24.1 -4.42 27.21 -5.62 30.31 C-6.11 31.57 -6.11 31.57 -6.61 32.85 C-7.41 34.9 -8.2 36.95 -9 39 C-9.66 39 -10.32 39 -11 39 C-10.59 37.78 -10.18 36.57 -9.75 35.31 C-9.17 33.54 -8.58 31.77 -8 30 C-7.68 29.03 -7.35 28.07 -7.02 27.07 C-4.77 20.14 -3.17 13.28 -1.95 6.12 C-1.09 1.09 -1.09 1.09 0 0 Z \",fill:\"#3A1949\",transform:\"translate(378,1083)\"})),_path1508||(_path1508=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.99 3 1.98 3 3 C3.66 3.33 4.32 3.66 5 4 C4.01 4 3.02 4 2 4 C2 5.65 2 7.3 2 9 C2.99 8.67 3.98 8.34 5 8 C5.62 10.38 5.62 10.38 6 13 C4 15 4 15 1.56 15.06 C0.29 15.03 0.29 15.03 -1 15 C-1.99 15.33 -2.98 15.66 -4 16 C-4 15.34 -4 14.68 -4 14 C-4.99 14 -5.98 14 -7 14 C-7 13.34 -7 12.68 -7 12 C-6.34 12 -5.68 12 -5 12 C-5 11.34 -5 10.68 -5 10 C-3.35 9.34 -1.7 8.68 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#290E3D\",transform:\"translate(940,680)\"})),_path1509||(_path1509=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.32 2.64 2.64 4 4 C4.33 3.67 4.66 3.34 5 3 C8.99 3 10.14 4.29 13 7 C14.31 9.75 14.31 9.75 15 12 C14.01 12.33 13.02 12.66 12 13 C11.01 11.68 10.02 10.36 9 9 C8.67 9.66 8.34 10.32 8 11 C7.67 10.67 7.34 10.34 7 10 C7 10.66 7 11.32 7 12 C3.17 10.55 1.72 8.69 0 5 C-0.19 2.19 -0.19 2.19 0 0 Z \",fill:\"#290F3C\",transform:\"translate(896,634)\"})),_path1510||(_path1510=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.14 1.59 7.23 4.6 10 8 C10 8.66 10 9.32 10 10 C6.37 10.33 2.74 10.66 -1 11 C-2.42 6.75 -1.19 4.28 0 0 Z \",fill:\"#867396\",transform:\"translate(859,420)\"})),_path1511||(_path1511=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 -0.12 2.88 -0.12 6 0 C6.66 0.66 7.32 1.32 8 2 C7.67 2.62 7.34 3.24 7 3.88 C5.86 5.91 5.86 5.91 6 8 C6.99 8 7.98 8 9 8 C8.67 9.65 8.34 11.3 8 13 C6.68 13.33 5.36 13.66 4 14 C1.32 10.92 0.58 8.8 0.31 4.75 C0.25 3.86 0.18 2.97 0.11 2.05 C0.08 1.37 0.04 0.7 0 0 Z \",fill:\"#281D2B\",transform:\"translate(515,409)\"})),_path1512||(_path1512=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.59 2.35 6.52 4.67 8 8.75 C8 11 8 11 7 13 C6.34 13 5.68 13 5 13 C3.45 11.43 3.45 11.43 1.69 9.31 C-1.08 6.05 -3.93 2.98 -7 0 C-3.81 -1.06 -3.05 -1.09 0 0 Z \",fill:\"#846A8A\",transform:\"translate(903,314)\"})),_path1513||(_path1513=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.02 0.4 1.02 0.4 2.06 0.81 C2.06 1.8 2.06 2.79 2.06 3.81 C0.41 3.81 -1.24 3.81 -2.94 3.81 C-3.06 4.43 -3.18 5.05 -3.31 5.69 C-3.94 7.81 -3.94 7.81 -5.94 9.81 C-8.88 10.62 -8.88 10.62 -11.94 10.81 C-13.81 9.38 -13.81 9.38 -14.94 7.81 C-14.26 7.42 -13.58 7.03 -12.88 6.62 C-10.08 4.98 -10.08 4.98 -8.22 3.46 C-3.53 -0.23 -3.53 -0.23 0 0 Z \",fill:\"#5E3E64\",transform:\"translate(617.9375,296.1875)\"})),_path1514||(_path1514=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.47 1.42 8.71 3.11 13 5 C12.67 6.32 12.34 7.64 12 9 C5.58 9.1 -0.63 8.75 -7 8 C-7 7.67 -7 7.34 -7 7 C-4.36 6.67 -1.72 6.34 1 6 C1 3.84 0.55 2.08 0 0 Z \",fill:\"#2C123D\",transform:\"translate(845,294)\"})),_path1515||(_path1515=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.32 -1.32 2.64 -2 4 C-2.54 3.84 -3.09 3.68 -3.64 3.52 C-11.32 1.83 -18.15 2.53 -25.09 6.11 C-27.47 7.22 -29.41 7.33 -32 7 C-31.46 6.73 -30.91 6.47 -30.35 6.2 C-28.66 5.33 -26.99 4.43 -25.34 3.49 C-16.39 -1.4 -9.91 -2.09 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(682,287)\"})),_path1516||(_path1516=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.83 -0.08 5.67 -0.14 8.5 -0.19 C9.29 -0.21 10.08 -0.24 10.9 -0.26 C16.62 -0.33 20.75 0.71 26 3 C26 3.66 26 4.32 26 5 C20.84 5.09 16.11 4.74 11 4 C9.78 4.02 8.57 4.04 7.31 4.06 C4.14 4 2.63 3.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#392B3E\",transform:\"translate(694,258)\"})),_path1517||(_path1517=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0 5 0 5 -2 8 C-5.5 9.5 -5.5 9.5 -9 10 C-9.99 9.34 -10.98 8.68 -12 8 C-12 7.34 -12 6.68 -12 6 C-11.34 6 -10.68 6 -10 6 C-10 4.35 -10 2.7 -10 1 C-9.36 1.01 -8.72 1.02 -8.07 1.04 C-7.24 1.04 -6.41 1.05 -5.56 1.06 C-4.33 1.08 -4.33 1.08 -3.07 1.1 C-1.01 1.23 -1.01 1.23 0 0 Z \",fill:\"#231A25\",transform:\"translate(621,249)\"})),_path1518||(_path1518=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.33 -1.98 0.66 -3 1 C-3.31 2.11 -3.31 2.11 -3.62 3.25 C-5.76 7.53 -9.72 9.12 -14 11 C-14.66 11 -15.32 11 -16 11 C-16 11.66 -16 12.32 -16 13 C-17.32 13.33 -18.64 13.66 -20 14 C-19 11 -19 11 -16 9 C-16.33 8.34 -16.66 7.68 -17 7 C-15.3 5.82 -13.59 4.65 -11.88 3.5 C-10.92 2.85 -9.97 2.2 -8.99 1.53 C-5.69 -0.16 -3.66 -0.3 0 0 Z \",fill:\"#291138\",transform:\"translate(342,1133)\"})),_path1519||(_path1519=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.92 0.43 7.45 2.69 11 6 C11.99 7.49 11.99 7.49 13 9 C13.99 9.33 14.98 9.66 16 10 C15.67 11.65 15.34 13.3 15 15 C11.12 13.25 11.12 13.25 10 11 C9.01 11.33 8.02 11.66 7 12 C6.59 11.13 6.18 10.27 5.75 9.38 C4.02 6.04 2.13 3.08 0 0 Z \",fill:\"#361941\",transform:\"translate(213,918)\"})),_path1520||(_path1520=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.63 0.09 5.25 0.19 7.88 0.31 C8.62 0.34 9.37 0.36 10.14 0.38 C12.1 0.48 14.05 0.73 16 1 C16.66 1.99 17.32 2.98 18 4 C17.67 4.66 17.34 5.32 17 6 C11.72 6 6.44 6 1 6 C1 5.01 1 4.02 1 3 C1.66 2.67 2.32 2.34 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#08060C\",transform:\"translate(617,381)\"})),_path1521||(_path1521=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.98 2 4.96 2 7 2 C6.34 2.66 5.68 3.32 5 4 C4.23 6.31 3.6 8.65 2.98 11 C2 13 2 13 0.09 13.9 C-2 14 -2 14 -5 12 C-3.41 7.96 -1.72 3.98 0 0 Z \",fill:\"#5B4962\",transform:\"translate(863,370)\"})),_path1522||(_path1522=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C3.99 2.34 4.98 1.68 6 1 C5.34 2.98 4.68 4.96 4 7 C3.01 7 2.02 7 1 7 C1.06 7.91 1.12 8.81 1.19 9.75 C0.98 13.34 0.55 14.54 -2 17 C-4.19 17.75 -4.19 17.75 -6 18 C-6 16.68 -6 15.36 -6 14 C-6.66 14 -7.32 14 -8 14 C-8 13.34 -8 12.68 -8 12 C-9.32 11.34 -10.64 10.68 -12 10 C-11.34 9.34 -10.68 8.68 -10 8 C-10 8.66 -10 9.32 -10 10 C-7.69 10 -5.38 10 -3 10 C-1.12 6.73 -0.51 3.72 0 0 Z \",fill:\"#5F4265\",transform:\"translate(915,345)\"})),_path1523||(_path1523=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20.33 0.99 20.66 1.98 21 3 C23.02 3.73 23.02 3.73 25 4 C21.21 4.23 17.42 4.43 13.62 4.62 C12.54 4.69 11.46 4.75 10.35 4.82 C9.32 4.87 8.29 4.92 7.23 4.98 C6.27 5.03 5.32 5.08 4.34 5.14 C2 5 2 5 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#0E0A12\",transform:\"translate(648,257)\"})),_path1524||(_path1524=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.56 4.95 -2.18 8.93 -4.44 13.31 C-4.75 13.94 -5.06 14.58 -5.38 15.23 C-7.74 19.87 -7.74 19.87 -10 21 C-9.47 19.33 -9.47 19.33 -8.94 17.62 C-7.63 14.2 -7.63 14.2 -9 12 C-8.14 7.78 -7 4 -3.94 0.94 C-2 0 -2 0 0 0 Z \",fill:\"#2A1238\",transform:\"translate(430,1167)\"})),_path1525||(_path1525=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 -0.38 6.12 C-2 9 -2 9 -3 10 C-4.67 10.04 -6.33 10.04 -8 10 C-9.12 3.25 -9.12 3.25 -8 1 C-5.07 0.02 -3.04 -0.08 0 0 Z \",fill:\"#080928\",transform:\"translate(1011,1126)\"})),_path1526||(_path1526=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.58 3.49 6.86 7.09 10.06 10.94 C10.9 11.94 11.74 12.94 12.6 13.96 C14.92 16.9 16.97 19.86 19 23 C18.67 23.66 18.34 24.32 18 25 C16.35 24.67 14.7 24.34 13 24 C13.08 23.28 13.17 22.56 13.25 21.81 C12.92 18.13 11.5 16.65 9 14 C8.34 13.67 7.68 13.34 7 13 C7 12.01 7 11.02 7 10 C6.22 9.77 5.43 9.55 4.62 9.31 C2 8 2 8 0.69 5.56 C0 3 0 3 0 0 Z \",fill:\"#391B45\",transform:\"translate(264,988)\"})),_path1527||(_path1527=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.39 2.96 4.74 5.94 7 9 C6 10 6 10 3.75 10.31 C1 10 1 10 -1.5 7.94 C-3.85 5.67 -3.85 5.67 -6.81 6.25 C-7.9 6.62 -7.9 6.62 -9 7 C-9.56 5.06 -9.56 5.06 -10 3 C-8.43 1.43 -6.57 1.39 -4.44 0.94 C-3.61 0.76 -2.78 0.58 -1.93 0.4 C-0.98 0.2 -0.98 0.2 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(1049,957)\"})),_path1528||(_path1528=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.96 2.19 4.92 4.37 5.88 6.56 C6.14 7.17 6.41 7.78 6.69 8.41 C8.49 12.55 9.84 16.64 11 21 C10.01 21.33 9.02 21.66 8 22 C4.43 14.74 1.36 8 0 0 Z \",fill:\"#0A123C\",transform:\"translate(589,943)\"})),_path1529||(_path1529=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.27 3.95 -3.57 4.88 -7.05 6.8 C-10.39 8.86 -13.12 11.54 -15.94 14.25 C-16.53 14.8 -17.11 15.36 -17.72 15.93 C-19.15 17.28 -20.58 18.64 -22 20 C-22 15.95 -20.45 14.15 -18 11 C-17.01 11 -16.02 11 -15 11 C-15 10.34 -15 9.68 -15 9 C-12.69 6.38 -12.69 6.38 -10 4 C-9.01 4 -8.02 4 -7 4 C-6.67 2.68 -6.34 1.36 -6 0 C-2.25 -1.12 -2.25 -1.12 0 0 Z \",fill:\"#1E0D31\",transform:\"translate(648,740)\"})),_path1530||(_path1530=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 0.5 1.14 0.5 2.31 1 C4.99 2.17 4.99 2.17 8 2 C12.68 5.19 17.28 9.14 18.69 14.75 C18.79 15.49 18.89 16.24 19 17 C15.43 15.5 13.27 13.42 10.62 10.62 C8.03 7.95 5.6 5.54 2.44 3.56 C1.63 3.05 0.83 2.53 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2E1736\",transform:\"translate(1165,689)\"})),_path1531||(_path1531=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.42 3.88 0.86 5.81 1.31 C7.43 1.68 7.43 1.68 9.08 2.05 C11.94 2.98 13.15 3.69 15 6 C11.21 9.61 11.21 9.61 9 11 C6.12 10.81 6.12 10.81 4 10 C3.57 8.3 3.57 8.3 3.12 6.56 C2.75 5.39 2.38 4.21 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#80709D\",transform:\"translate(610,384)\"})),_path1532||(_path1532=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.83 0.83 3.65 0.67 4.5 0.5 C7 0 7 0 9 1 C10.92 4.73 11.45 7.83 11 12 C9.5 13.88 9.5 13.88 8 15 C8 13.02 8 11.04 8 9 C7.34 8.67 6.68 8.34 6 8 C6 7.67 6 7.34 6 7 C3.03 6.5 3.03 6.5 0 6 C-1 3 -1 3 0 0 Z \",fill:\"#513D58\",transform:\"translate(864,366)\"})),_path1533||(_path1533=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.52 1.55 3.81 2.57 5 5.31 C5 11.12 -0.37 15.77 -4 20 C-4.99 19.67 -5.98 19.34 -7 19 C-6.36 18.64 -5.73 18.28 -5.07 17.91 C-2.22 15.29 -2.24 13.3 -1.81 9.5 C-1.05 3.14 -1.05 3.14 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(876,321)\"})),_path1534||(_path1534=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.59 2.05 7.84 5.13 11 9 C11.94 11.94 11.94 11.94 12 14 C7.25 13.12 7.25 13.12 5 12 C5 11.34 5 10.68 5 10 C4.36 9.73 3.72 9.46 3.06 9.19 C1 8 1 8 0 5 C-0.04 3.33 -0.05 1.67 0 0 Z \",fill:\"#523F5A\",transform:\"translate(897,316)\"})),_path1535||(_path1535=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 2.25 1.5 2.25 3 5 C4.05 5.68 5.1 6.36 6.19 7.06 C7.58 8.02 7.58 8.02 9 9 C9 10.32 9 11.64 9 13 C2.07 12.5 2.07 12.5 -5 12 C-5 11.67 -5 11.34 -5 11 C-0.54 10.5 -0.54 10.5 4 10 C4 9.34 4 8.68 4 8 C3.22 7.75 2.44 7.49 1.63 7.23 C0.62 6.89 -0.39 6.54 -1.44 6.19 C-2.45 5.85 -3.46 5.51 -4.5 5.17 C-5.32 4.78 -6.15 4.4 -7 4 C-7.33 3.01 -7.66 2.02 -8 1 C-5.14 -0.43 -3.16 -0.39 0 0 Z \",fill:\"#786693\",transform:\"translate(694,235)\"})),_path1536||(_path1536=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.68 4.67 -1.66 8.34 -4 12 C-4.52 12.82 -5.05 13.64 -5.59 14.49 C-8.74 19.33 -12.15 23.69 -16 28 C-16.66 27.67 -17.32 27.34 -18 27 C-17.49 26.3 -17.49 26.3 -16.98 25.58 C-15.42 23.41 -13.87 21.24 -12.31 19.06 C-11.78 18.33 -11.25 17.59 -10.71 16.83 C-7.47 12.29 -4.6 7.68 -1.97 2.75 C-1 1 -1 1 0 0 Z \",fill:\"#401D4F\",transform:\"translate(602,1226)\"})),_path1537||(_path1537=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.73 -2.94 7.56 -6 11 C-7.96 12.39 -9.96 13.72 -12 15 C-13.47 16.36 -14.93 17.74 -16.38 19.12 C-20.5 22.89 -23.51 24.2 -29 25 C-29.33 24.34 -29.66 23.68 -30 23 C-28.89 22.67 -27.77 22.34 -26.62 22 C-19.74 19.43 -14.12 14.29 -9.06 9.06 C-7 7 -7 7 -4 6 C-2.91 4.07 -2.91 4.07 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#2E143C\",transform:\"translate(414,1197)\"})),_path1538||(_path1538=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.32 4.47 3.42 6.38 1.44 9.31 C-1.68 11.47 -4.27 11.71 -8 12 C-9 9 -9 9 -8.06 6.81 C-7.71 6.21 -7.36 5.62 -7 5 C-6.34 5.66 -5.68 6.32 -5 7 C-3.35 4.69 -1.7 2.38 0 0 Z \",fill:\"#5E3E64\",transform:\"translate(1029,1103)\"})),_path1539||(_path1539=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.94 0.67 0.88 1.34 0.82 2.03 C-0.38 15.38 -1.33 28.59 -1 42 C-1.66 42 -2.32 42 -3 42 C-4.98 36.4 -4.94 32.85 -4 27 C-4 26.03 -4 25.06 -4 24.06 C-4 22 -4 22 -3 21 C-2.7 19.44 -2.46 17.88 -2.25 16.31 C-2.05 14.89 -2.05 14.89 -1.85 13.45 C-1.64 11.96 -1.64 11.96 -1.44 10.44 C-1.3 9.44 -1.16 8.44 -1.02 7.42 C-0.67 4.94 -0.34 2.47 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(527,801)\"})),_path1540||(_path1540=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.14 1.54 6.09 3.06 9 5 C9.43 7.24 9.43 7.24 9.44 9.88 C9.46 10.74 9.48 11.6 9.5 12.49 C8.86 15.71 7.46 16.91 5 19 C4.89 18.19 4.78 17.38 4.67 16.55 C4.51 15.48 4.35 14.41 4.19 13.31 C4.04 12.26 3.89 11.2 3.73 10.11 C2.97 6.89 1.77 4.77 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#897795\",transform:\"translate(827,359)\"})),_path1541||(_path1541=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.95 3.74 0.96 6.43 0.12 10.19 C-0.06 11.05 -0.24 11.91 -0.43 12.79 C-1 15 -1 15 -2 17 C-4.59 14.41 -4.37 12.97 -4.62 9.38 C-4.7 8.37 -4.77 7.37 -4.85 6.34 C-4.93 5.18 -4.93 5.18 -5 4 C-5.99 3.67 -6.98 3.34 -8 3 C-8 2.34 -8 1.68 -8 1 C-4.93 -0.86 -3.4 -1.22 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(604,287)\"})),_path1542||(_path1542=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.49 0.99 1.49 0.99 3 2 C3 2.66 3 3.32 3 4 C3.56 4.21 4.11 4.41 4.69 4.62 C7.28 6.17 8.84 8.05 10.7 10.4 C12.63 12.78 14.8 14.86 17 17 C16.5 16.73 16.01 16.46 15.5 16.19 C13.35 15.17 11.31 14.43 9.06 13.69 C5.08 12.19 2.56 10.51 0 7 C-0.31 3.19 -0.31 3.19 0 0 Z \",fill:\"#73597D\",transform:\"translate(759,248)\"})),_path1543||(_path1543=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.57 2.89 0.13 3.77 -0.31 4.69 C-5.25 15.66 -4.26 29.21 -4 41 C-4.66 40.67 -5.32 40.34 -6 40 C-8.26 27.91 -7.36 13.17 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#121745\",transform:\"translate(1008,1206)\"})),_path1544||(_path1544=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.13 1.15 1.27 2.29 1.4 3.47 C1.58 5 1.76 6.53 1.94 8.06 C2.02 8.81 2.11 9.57 2.2 10.34 C2.6 13.79 3.03 17.22 3.56 20.66 C4 23.96 4.1 27.11 4.06 30.44 C4.05 31.49 4.04 32.54 4.04 33.62 C4.02 34.41 4.01 35.19 4 36 C3.01 35.67 2.02 35.34 1 35 C0.31 29.55 -0.09 24.34 0.06 18.85 C0.13 16.9 0.13 16.9 -1 15 C-1.17 9.85 -0.85 5.08 0 0 Z \",fill:\"#44235A\",transform:\"translate(610,1106)\"})),_path1545||(_path1545=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-0.74 4.14 -1.48 4.29 -2.25 4.44 C-6.44 6.82 -7.38 10.61 -9 15 C-11.31 14.34 -13.62 13.68 -16 13 C-15.67 12.01 -15.34 11.02 -15 10 C-14.01 10 -13.02 10 -12 10 C-11.57 9.28 -11.13 8.56 -10.69 7.81 C-8.2 3.67 -5.11 0 0 0 Z \",fill:\"#230F38\",transform:\"translate(1280,984)\"})),_path1546||(_path1546=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5 2.66 5 3.32 5 4 C5.66 4 6.32 4 7 4 C7.33 6.97 7.66 9.94 8 13 C7.01 13.33 6.02 13.66 5 14 C0.18 9.18 0.18 9.18 -0.33 5.82 C-0.31 3.88 -0.17 1.94 0 0 Z \",fill:\"#2C1339\",transform:\"translate(322,956)\"})),_path1547||(_path1547=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43 4.93 1.18 9.84 1.19 14.94 C1.2 15.93 1.21 16.92 1.22 17.94 C1.23 18.89 1.23 19.85 1.23 20.84 C1.23 21.71 1.24 22.58 1.24 23.48 C0.97 26.29 0.16 28.44 -1 31 C-1.33 31 -1.66 31 -2 31 C-2.05 27.07 -2.09 23.13 -2.11 19.2 C-2.12 17.21 -2.15 15.21 -2.18 13.22 C-2.18 11.96 -2.19 10.71 -2.2 9.42 C-2.21 8.26 -2.22 7.1 -2.23 5.91 C-2 3 -2 3 0 0 Z \",fill:\"#3C1A4D\",transform:\"translate(380,905)\"})),_path1548||(_path1548=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.03 1.94 5.05 3.87 5.06 5.81 C5.07 6.89 5.09 7.97 5.1 9.08 C5 12 5 12 4 15 C0.12 14.12 0.12 14.12 -1 13 C-1.1 11.57 -1.13 10.13 -1.12 8.69 C-1.13 7.91 -1.13 7.13 -1.13 6.32 C-1 4.09 -0.62 2.15 0 0 Z \",fill:\"#381A43\",transform:\"translate(307,889)\"})),_path1549||(_path1549=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.38 6.39 1.12 11.28 -0.56 16.44 C-0.8 17.17 -1.03 17.9 -1.27 18.65 C-1.84 20.44 -2.42 22.22 -3 24 C-3.99 24 -4.98 24 -6 24 C-5.38 20.94 -4.75 17.87 -4.12 14.81 C-3.95 13.95 -3.78 13.08 -3.6 12.19 C-2.72 7.95 -1.82 3.96 0 0 Z \",fill:\"#080D31\",transform:\"translate(986,835)\"})),_path1550||(_path1550=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.55 -0.46 14.64 -0.62 21 4 C21.71 5.31 22.38 6.65 23 8 C23.66 8.33 24.32 8.66 25 9 C21.58 8.38 18.41 7.53 15.14 6.37 C14.25 6.06 13.36 5.75 12.45 5.42 C11.08 4.94 11.08 4.94 9.69 4.44 C8.76 4.11 7.82 3.78 6.87 3.44 C4.58 2.63 2.29 1.82 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#210E35\",transform:\"translate(1045,757)\"})),_path1551||(_path1551=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 1.65 3.96 3.3 6 5 C6.66 3.35 7.32 1.7 8 0 C10.6 1.3 10.65 2.22 11.56 4.94 C13.14 9.91 13.69 14.81 14 20 C12 17 12 17 10.75 13.5 C8.66 9.32 7.13 8.89 3 7 C0 2.9 0 2.9 0 0 Z \",fill:\"#2F1739\",transform:\"translate(1207,728)\"})),_path1552||(_path1552=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11 0.34 1.11 0.34 2.25 0.69 C2.25 1.68 2.25 2.67 2.25 3.69 C-1.02 6.96 -5.55 7.57 -10.05 7.81 C-11.95 7.81 -13.85 7.76 -15.75 7.69 C-16.08 6.7 -16.41 5.71 -16.75 4.69 C-15.74 4.52 -15.74 4.52 -14.7 4.36 C-13.37 4.12 -13.37 4.12 -12 3.88 C-11.12 3.72 -10.24 3.57 -9.33 3.42 C-5.5 2.33 -4.03 -0.46 0 0 Z \",fill:\"#120D16\",transform:\"translate(639.75,508.3125)\"})),_path1553||(_path1553=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.81 0.6 2.63 1.2 2.44 1.81 C1.78 4.16 1.78 4.16 3 7 C3.99 7 4.98 7 6 7 C6 7.66 6 8.32 6 9 C6.66 9.33 7.32 9.66 8 10 C7.01 11.49 7.01 11.49 6 13 C2.87 13.4 0.89 13.63 -1.74 11.77 C-3 10 -3 10 -2.89 7.77 C-2.68 6.98 -2.47 6.19 -2.25 5.38 C-2.05 4.58 -1.85 3.78 -1.64 2.96 C-1 1 -1 1 0 0 Z \",fill:\"#5A4761\",transform:\"translate(854,392)\"})),_path1554||(_path1554=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.69 6.62 -0.74 11.22 -4 17 C-5.32 16.34 -6.64 15.68 -8 15 C-7.84 8.62 -4.11 4.54 0 0 Z \",fill:\"#867396\",transform:\"translate(916,379)\"})),_path1555||(_path1555=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75 2.62 2.39 4.04 3 7 C3.66 7 4.32 7 5 7 C4.67 8.32 4.34 9.64 4 11 C2.68 11 1.36 11 0 11 C-0.33 10.67 -0.66 10.34 -1 10 C-1 11.98 -1 13.96 -1 16 C-4 14 -4 14 -4.69 12.01 C-5.01 9.58 -5.23 7.44 -5 5 C-2.56 1.94 -2.56 1.94 0 0 Z \",fill:\"#3F2E43\",transform:\"translate(542,323)\"})),_path1556||(_path1556=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.66 8.23 0.18 14.09 -2.75 20.69 C-3.09 21.49 -3.42 22.29 -3.77 23.12 C-5.98 28.26 -8.6 32.56 -12 37 C-11.01 37.33 -10.02 37.66 -9 38 C-10.98 38.49 -10.98 38.49 -13 39 C-13.5 37.52 -13.5 37.52 -14 36 C-12.82 34.32 -11.62 32.64 -10.38 31 C-8.08 27.67 -6.73 24.02 -5.31 20.25 C-5.01 19.46 -4.71 18.68 -4.4 17.87 C-2.22 12.01 -0.67 6.23 0 0 Z \",fill:\"#090F36\",transform:\"translate(675,1234)\"})),_path1557||(_path1557=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.32 3.99 -7.09 5.4 -11.88 7 C-17.18 8.79 -21.4 10.81 -26 14 C-26.66 14 -27.32 14 -28 14 C-26.56 10.27 -24.96 9.12 -21.39 7.42 C-20.47 6.98 -19.55 6.55 -18.6 6.09 C-17.64 5.65 -16.68 5.21 -15.69 4.75 C-14.74 4.29 -13.79 3.83 -12.81 3.36 C-5.03 -0.29 -5.03 -0.29 0 0 Z \",fill:\"#281231\",transform:\"translate(334,1214)\"})),_path1558||(_path1558=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.38 13.1 1.38 13.1 -1 18 C-1.66 18.33 -2.32 18.66 -3 19 C-3.91 21.11 -3.91 21.11 -4.62 23.56 C-4.89 24.39 -5.15 25.22 -5.41 26.07 C-5.61 26.7 -5.8 27.34 -6 28 C-7.37 25.26 -6.72 23.85 -6.07 20.88 C-5.85 19.86 -5.63 18.84 -5.41 17.79 C-5.17 16.73 -4.93 15.66 -4.69 14.56 C-4.46 13.5 -4.24 12.44 -4 11.34 C-2.26 3.38 -2.26 3.38 0 0 Z \",fill:\"#211027\",transform:\"translate(312,813)\"})),_path1559||(_path1559=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.58 1.52 14.26 3.17 21 7 C20.67 7.66 20.34 8.32 20 9 C13.63 8.53 7.57 7.26 2 4 C0.71 1.86 0.71 1.86 0 0 Z \",fill:\"#121745\",transform:\"translate(1084,777)\"})),_path1560||(_path1560=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.11 3.72 -0.77 4.44 -1.69 5.19 C-7.43 10.03 -11.38 14.93 -15.25 21.38 C-16.95 23.93 -18.76 25.92 -21 28 C-20.69 27.26 -20.38 26.51 -20.06 25.75 C-19.19 23.49 -18.52 21.35 -18 19 C-18.66 18.67 -19.32 18.34 -20 18 C-18.02 15.03 -18.02 15.03 -16 12 C-15.34 12.33 -14.68 12.66 -14 13 C-9.14 8.83 -4.47 4.58 0 0 Z \",fill:\"#381A43\",transform:\"translate(272,733)\"})),_path1561||(_path1561=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C10 4 10 4 9 7 C5.7 7 2.4 7 -1 7 C-1 3 -1 3 0 0 Z \",fill:\"#482859\",transform:\"translate(992,650)\"})),_path1562||(_path1562=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 2.62 2.55 4.32 3.07 7.97 C3.24 9.18 3.42 10.39 3.6 11.64 C3.77 12.91 3.95 14.19 4.12 15.5 C4.31 16.74 4.49 17.99 4.68 19.27 C5.65 26.23 6.28 32.97 6 40 C5.67 40 5.34 40 5 40 C4.52 37.33 4.04 34.67 3.56 32 C3.43 31.26 3.29 30.51 3.15 29.75 C2.5 26.07 1.9 22.4 1.46 18.69 C1.11 15.23 1.11 15.23 0.44 12.86 C-0.17 10.3 -0.09 7.88 -0.06 5.25 C-0.05 4.27 -0.04 3.28 -0.04 2.27 C-0.02 1.52 -0.01 0.77 0 0 Z \",fill:\"#1A0D26\",transform:\"translate(659,642)\"})),_path1563||(_path1563=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.55 -0.04 1.55 -0.04 3.12 -0.09 C6 0.38 6 0.38 10 4.38 C1.09 5.37 1.09 5.37 -8 6.38 C-8.66 5.05 -9.32 3.74 -10 2.38 C-6.63 0.35 -3.91 0.05 0 0 Z \",fill:\"#281B2C\",transform:\"translate(577,510.625)\"})),_path1564||(_path1564=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C3.32 2.67 4.64 2.34 6 2 C7 5 7 5 5.56 8.19 C4.79 9.58 4.79 9.58 4 11 C2.35 11 0.7 11 -1 11 C-1.33 11.99 -1.66 12.98 -2 14 C-3.56 8.34 -2.24 5.2 0 0 Z \",fill:\"#3D2D42\",transform:\"translate(844,443)\"})),_path1565||(_path1565=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.94 1.76 3.89 3.52 4.83 5.27 C6.05 7.31 6.05 7.31 9 9 C9 9.66 9 10.32 9 11 C3.06 11.5 3.06 11.5 -3 12 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#6E547A\",transform:\"translate(898,348)\"})),_path1566||(_path1566=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3 3.32 3 4.64 3 6 C3.66 6 4.32 6 5 6 C5.33 5.34 5.66 4.68 6 4 C6 4.66 6 5.32 6 6 C6.66 6 7.32 6 8 6 C7.67 6.99 7.34 7.98 7 9 C6.01 9 5.02 9 4 9 C4 9.99 4 10.98 4 12 C1.69 11.34 -0.62 10.68 -3 10 C-2.89 8.52 -2.76 7.04 -2.62 5.56 C-2.56 4.74 -2.49 3.92 -2.41 3.07 C-2.28 2.38 -2.14 1.7 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#281D2B\",transform:\"translate(509,302)\"})),_path1567||(_path1567=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.37 0.02 1.37 0.02 2.78 0.04 C3.7 0.04 4.62 0.05 5.56 0.06 C6.27 0.07 6.98 0.09 7.71 0.1 C4.5 1.84 2.39 2.3 -1.29 2.1 C-1.29 2.76 -1.29 3.42 -1.29 4.1 C-2.64 4.43 -2.64 4.43 -4.02 4.76 C-5.2 5.08 -6.38 5.4 -7.6 5.72 C-8.77 6.02 -9.94 6.33 -11.15 6.64 C-15.04 8.45 -15.79 10.16 -17.29 14.1 C-17.62 14.1 -17.95 14.1 -18.29 14.1 C-18.06 10.18 -17.9 7.8 -15.29 4.79 C-11.92 2.89 -8.95 2.16 -5.18 1.49 C-2.74 0.98 -2.61 0.11 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(572.28515625,265.90234375)\"})),_path1568||(_path1568=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.15 9.22 6.38 22.21 6 33 C5.67 33 5.34 33 5 33 C4.15 29.19 3.32 25.38 2.5 21.56 C2.26 20.49 2.02 19.42 1.78 18.32 C0.44 12.07 -0.27 6.4 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(1016,1181)\"})),_path1569||(_path1569=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.59 3.59 -9.1 3.52 -14 4 C-16.78 3.89 -19.25 3.53 -22 3 C-22 3.66 -22 4.32 -22 5 C-23.09 4.84 -24.19 4.67 -25.31 4.5 C-28.88 3.93 -28.88 3.93 -32 4 C-33.69 2.5 -33.69 2.5 -35 1 C-34.31 1.01 -33.62 1.02 -32.91 1.03 C-29.75 1.07 -26.59 1.1 -23.44 1.12 C-21.81 1.15 -21.81 1.15 -20.15 1.18 C-14.21 1.21 -5.23 -2.09 0 0 Z \",fill:\"#331445\",transform:\"translate(221,1098)\"})),_path1570||(_path1570=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-3.31 19.21 -3.31 19.21 -11.5 25.62 C-15.94 29.1 -15.94 29.1 -20 33 C-20.99 32.34 -21.98 31.68 -23 31 C-22.2 30.51 -21.39 30.01 -20.56 29.5 C-19.37 28.68 -18.18 27.84 -17 27 C-16.29 26.51 -15.58 26.02 -14.84 25.52 C-6.45 19.02 -3.27 9.81 0 0 Z \",fill:\"#371847\",transform:\"translate(279,1055)\"})),_path1571||(_path1571=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.99 5.33 3.98 5.66 5 6 C5.95 8 5.95 8 6.69 10.44 C7.06 11.64 7.06 11.64 7.45 12.87 C8 15 8 15 8 17 C8.77 17.65 8.77 17.65 9.56 18.31 C10.04 18.87 10.51 19.43 11 20 C10.69 22.69 10.69 22.69 10 25 C8.5 23.69 8.5 23.69 7 22 C7 21.01 7 20.02 7 19 C6.34 18.67 5.68 18.34 5 18 C5 17.34 5 16.68 5 16 C4.34 15.67 3.68 15.34 3 15 C2.25 12.67 1.61 10.37 1 8 C0.63 6.69 0.25 5.37 -0.12 4.06 C-0.41 3.05 -0.7 2.04 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0C0E36\",transform:\"translate(1253,995)\"})),_path1572||(_path1572=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.4 0.49 6.4 0.49 9.44 3.06 C10.21 4.02 10.21 4.02 11 5 C7.39 8.61 7.39 8.61 5 10 C1.12 9.81 1.12 9.81 -2 9 C-0.68 8.67 0.64 8.34 2 8 C2 6.68 2 5.36 2 4 C1.01 4.99 0.02 5.98 -1 7 C-1 4.38 -0.69 2.49 0 0 Z \",fill:\"#2A0E3E\",transform:\"translate(1014,725)\"})),_path1573||(_path1573=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.19 2.82 3.39 3.64 3.59 4.48 C3.85 5.56 4.11 6.64 4.38 7.75 C4.63 8.82 4.89 9.88 5.15 10.98 C5.86 13.9 5.86 13.9 7.03 16 C10.12 22.38 10.33 30.97 10 38 C8.17 34.81 7.63 32.08 7.19 28.44 C6.35 22.86 4.53 18.51 2.04 13.49 C0.62 10.08 0.6 7.64 1 4 C0.34 3.67 -0.32 3.34 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#28103A\",transform:\"translate(881,506)\"})),_path1574||(_path1574=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.72 5.17 -1.07 10.08 -3 15 C-3.63 16.23 -4.29 17.44 -5 18.62 C-6.65 21.41 -7.79 23.88 -8.94 26.88 C-10.86 31.86 -13.29 36.41 -16 41 C-17.35 36.96 -16.21 35.73 -14.39 31.93 C-14.11 31.34 -13.83 30.75 -13.54 30.14 C-12.64 28.23 -11.73 26.33 -10.81 24.44 C-6.96 16.38 -3.16 8.36 0 0 Z \",fill:\"#000002\",transform:\"translate(398,500)\"})),_path1575||(_path1575=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.66 -1.32 1.32 -2 2 C-5.57 1.84 -9.07 1.52 -12.62 1.1 C-17.53 0.65 -17.53 0.65 -21.86 2.98 C-22.92 3.98 -22.92 3.98 -24 5 C-24.99 5 -25.98 5 -27 5 C-27.33 4.01 -27.66 3.02 -28 2 C-27.01 1.67 -26.02 1.34 -25 1 C-25 0.34 -25 -0.32 -25 -1 C-17.02 -3.66 -7.99 -1.98 0 0 Z \",fill:\"#392A3F\",transform:\"translate(887,396)\"})),_path1576||(_path1576=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.99 2.37 4.99 2.71 7 3 C8 4 8 4 8.19 6.44 C8 9 8 9 6 11 C3.04 10.77 1.45 10.39 -0.81 8.44 C-1.2 7.96 -1.6 7.49 -2 7 C-1.34 4.69 -0.68 2.38 0 0 Z \",fill:\"#634369\",transform:\"translate(538,384)\"})),_path1577||(_path1577=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5 0.48 7.98 2.03 12 5 C9.51 6.25 8.59 5.78 6 5 C6 6.65 6 8.3 6 10 C5.38 9.79 4.76 9.59 4.12 9.38 C3.42 9.25 2.72 9.13 2 9 C1.34 9.66 0.68 10.32 0 11 C-1.76 5.04 -1.76 5.04 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#321641\",transform:\"translate(775,234)\"})),_path1578||(_path1578=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.18 0.08 5.32 0.41 7.77 2.52 C10.84 5.94 10.84 5.94 12 8 C11.67 8.99 11.34 9.98 11 11 C9.37 10.21 7.75 9.42 6.12 8.62 C4.77 7.96 4.77 7.96 3.38 7.29 C1 6 1 6 -1 4 C-0.62 1.88 -0.62 1.88 0 0 Z \",fill:\"#67486D\",transform:\"translate(645,172)\"})),_path1579||(_path1579=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.8 1.8 2.59 2.6 2.38 3.42 C0.57 10.8 -1.27 18.35 -1 26 C-0.34 26.66 0.32 27.32 1 28 C1 29.32 1 30.64 1 32 C0.34 32 -0.32 32 -1 32 C-0.67 34.64 -0.34 37.28 0 40 C-2.85 37.15 -2.98 34.48 -3.04 30.52 C-3 29.67 -2.96 28.82 -2.91 27.95 C-2.87 27 -2.83 26.06 -2.78 25.08 C-2.73 24.11 -2.68 23.13 -2.62 22.12 C-2.58 21.16 -2.54 20.19 -2.49 19.19 C-2.17 12.69 -1.76 6.29 0 0 Z \",fill:\"#090F36\",transform:\"translate(767,1231)\"})),_path1580||(_path1580=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.27 3.91 0.36 6.18 -1.03 10.01 C-2.32 13.98 -3.25 18 -4.19 22.06 C-4.37 22.84 -4.55 23.61 -4.73 24.41 C-5.16 26.27 -5.58 28.14 -6 30 C-6.66 30 -7.32 30 -8 30 C-8.33 32.97 -8.66 35.94 -9 39 C-11.35 35.48 -11.14 34.87 -10.38 30.88 C-9.47 26.41 -8.07 22.68 -6.08 18.61 C-4.38 14.52 -3.37 10.26 -2.31 5.96 C-1.09 1.09 -1.09 1.09 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(328,776)\"})),_path1581||(_path1581=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.72 1.44 14.73 4.06 22 7 C22 7.66 22 8.32 22 9 C22.99 9.33 23.98 9.66 25 10 C24.67 10.66 24.34 11.32 24 12 C23.13 11.53 22.27 11.05 21.38 10.56 C18.14 8.88 18.14 8.88 14.94 8.5 C11.67 7.94 9.8 6.72 7 5 C6.11 4.86 5.23 4.71 4.31 4.56 C3.17 4.28 3.17 4.28 2 4 C0.86 1.96 0.86 1.96 0 0 Z \",fill:\"#140A1E\",transform:\"translate(1137,660)\"})),_path1582||(_path1582=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z M-5 6 C-6.39 9.43 -7.65 10.7 -11 12.25 C-11.7 12.59 -12.4 12.92 -13.12 13.27 C-15 14 -15 14 -17 14 C-17 14.66 -17 15.32 -17 16 C-19.3 18.92 -20.58 19.9 -24.25 20.75 C-25.61 20.87 -25.61 20.87 -27 21 C-23.41 14.59 -19.38 12.28 -12.74 9.26 C-5.65 6 -5.65 6 -5 6 Z \",fill:\"#867295\",transform:\"translate(702,599)\"})),_path1583||(_path1583=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.64 0.8 1.28 1.61 1.94 2.44 C3.41 4.28 3.41 4.28 5 6 C5.04 8 5.04 10 5 12 C4.01 12.33 3.02 12.66 2 13 C2 13.99 2 14.98 2 16 C1.34 16 0.68 16 0 16 C0 16.99 0 17.98 0 19 C-0.66 18.67 -1.32 18.34 -2 18 C-1.86 15.56 -1.71 13.12 -1.56 10.69 C-1.52 10 -1.48 9.31 -1.44 8.6 C-1.25 5.53 -0.98 2.93 0 0 Z \",fill:\"#70567C\",transform:\"translate(593,343)\"})),_path1584||(_path1584=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.01 0.29 4.01 0.62 6 1 C3.31 3.69 0.62 4.06 -3 5 C-3 5.99 -3 6.98 -3 8 C-3.31 9.34 -3.63 10.68 -4 12 C-6.86 10.72 -9.02 9.47 -11 7 C-11 6.01 -11 5.02 -11 4 C-10.29 3.8 -9.58 3.59 -8.85 3.38 C-7.93 3.11 -7.01 2.84 -6.06 2.56 C-4.69 2.16 -4.69 2.16 -3.29 1.75 C-1.06 1.21 -1.06 1.21 0 0 Z \",fill:\"#321B3A\",transform:\"translate(520,341)\"})),_path1585||(_path1585=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 0.06 2.88 0.06 6 1 C8.24 4.18 9.11 5.98 8.69 9.88 C8.46 10.58 8.23 11.28 8 12 C4.19 11.46 2.36 10.01 0 7 C-0.81 3.81 -0.81 3.81 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#403146\",transform:\"translate(514,299)\"})),_path1586||(_path1586=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.99 2.98 2.91 5.42 4 8.81 C4.33 9.83 4.66 10.85 5 11.89 C5.33 12.92 5.66 13.94 6 15 C6.66 17 7.33 19 8 21 C7.01 21.33 6.02 21.66 5 22 C-1.95 9.4 -1.95 9.4 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#2A1238\",transform:\"translate(142,1193)\"})),_path1587||(_path1587=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-8.79 4.64 -15.97 7.41 -26 7 C-26 6.34 -26 5.68 -26 5 C-22.04 3.97 -18.09 2.95 -14.12 1.94 C-13 1.64 -11.87 1.35 -10.71 1.04 C-9.63 0.77 -8.55 0.5 -7.45 0.21 C-6.45 -0.04 -5.46 -0.3 -4.43 -0.56 C-2 -1 -2 -1 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(320,1146)\"})),_path1588||(_path1588=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.83 8.14 8.38 18.69 8 29 C4.36 22 1.74 14.85 1.15 6.95 C0.97 4.58 0.52 2.31 0 0 Z \",fill:\"#3E1E48\",transform:\"translate(657,1078)\"})),_path1589||(_path1589=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 1 2.38 1 4 2 C3.43 4.87 3.14 5.86 1 8 C-1.38 8.44 -1.38 8.44 -4 8 C-8 3.89 -8 3.89 -8 1 C-5.22 -0.39 -3.08 -0.18 0 0 Z \",fill:\"#0B1240\",transform:\"translate(852,933)\"})),_path1590||(_path1590=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.19 1.6 3.83 4.8 5 8 C6.06 11.32 7.05 14.65 8 18 C7.1 17.47 7.1 17.47 6.19 16.94 C3.89 15.67 3.89 15.67 1 17 C1 16.34 1 15.68 1 15 C0.01 14.67 -0.98 14.34 -2 14 C-1.34 13.34 -0.68 12.68 0 12 C-0.02 9.35 -0.02 9.35 -0.44 6.44 C-0.66 4.63 -0.86 2.82 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#351840\",transform:\"translate(314,928)\"})),_path1591||(_path1591=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.04 1.1 2.07 2.2 2.11 3.33 C2.44 11.15 2.92 18.32 5.48 25.8 C6.06 28.26 5.81 29.64 5 32 C3.99 29.48 2.99 26.96 2 24.44 C1.57 23.38 1.57 23.38 1.13 22.3 C-1.28 16.07 -1.31 10.68 -0.5 4.06 C-0.41 3.29 -0.31 2.52 -0.22 1.72 C-0.15 1.15 -0.07 0.59 0 0 Z \",fill:\"#2C123E\",transform:\"translate(1212,746)\"})),_path1592||(_path1592=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.22 1.25 14.31 5.37 21 10 C22.19 10.77 23.37 11.54 24.56 12.31 C25.37 12.87 26.17 13.43 27 14 C27 14.33 27 14.66 27 15 C21.94 14.7 19.39 13.81 15.69 10.34 C12.53 7.83 8.73 6.48 5 5 C5 4.34 5 3.68 5 3 C2.52 2.01 2.52 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#2B113E\",transform:\"translate(969,697)\"})),_path1593||(_path1593=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.29 3.99 0.68 6.41 -0.84 10.23 C-2 12 -2 12 -5.56 13.44 C-7.26 13.72 -7.26 13.72 -9 14 C-9.99 14.5 -9.99 14.5 -11 15 C-9.25 9.9 -6.67 3.53 -1.84 0.76 C-1.23 0.51 -0.62 0.26 0 0 Z \",fill:\"#371943\",transform:\"translate(375,674)\"})),_path1594||(_path1594=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.61 2.89 1.22 3.77 0.81 4.69 C-3.16 13.97 -6.59 23.49 -10 33 C-10.66 33 -11.32 33 -12 33 C-10.23 25.67 -7.9 18.56 -5.44 11.44 C-5.13 10.54 -4.83 9.65 -4.51 8.73 C-4.07 7.47 -4.07 7.47 -3.62 6.18 C-3.36 5.43 -3.09 4.67 -2.82 3.89 C-2 2 -2 2 0 0 Z \",fill:\"#381A44\",transform:\"translate(388,542)\"})),_path1595||(_path1595=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.81 0.56 1.81 0.56 4 2 C5.78 5.57 7.22 9.08 8 13 C5.19 13.31 5.19 13.31 2 13 C-0.67 10.07 -0.99 8.21 -1.25 4.25 C-1 1 -1 1 0 0 Z \",fill:\"#0B0910\",transform:\"translate(542,507)\"})),_path1596||(_path1596=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.07 0.9 1.07 0.9 1.15 1.83 C1.22 2.63 1.3 3.43 1.38 4.25 C1.44 5.04 1.51 5.83 1.59 6.64 C1.88 9.01 1.88 9.01 3.02 10.98 C4.86 14.76 4.57 18.91 4 23 C2.19 25.44 2.19 25.44 0 27 C-0.58 27.58 -1.15 28.15 -1.75 28.75 C-2.16 29.16 -2.57 29.57 -3 30 C-2.55 26.87 -2.02 24.05 -0.94 21.06 C0.51 16.33 0.18 12.17 -0.56 7.31 C-0.95 4.37 -0.99 2.74 0 0 Z \",fill:\"#2B123D\",transform:\"translate(485,477)\"})),_path1597||(_path1597=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.76 1.5 3.76 1.5 4.88 3.81 C5.98 6.32 5.98 6.32 9 8.5 C11.64 10.7 12.84 11.86 14 15 C7.7 13.6 4.02 11.81 0.25 6.56 C-1 4 -1 4 -0.69 1.69 C-0.46 1.13 -0.23 0.57 0 0 Z \",fill:\"#503D58\",transform:\"translate(885,354)\"})),_path1598||(_path1598=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.19 9.39 11.19 9.39 13 13 C12.01 13.99 11.02 14.98 10 16 C8.02 15.01 6.04 14.02 4 13 C4 12.34 4 11.68 4 11 C3.01 10.67 2.02 10.34 1 10 C1.33 9.34 1.66 8.68 2 8 C2.99 8.66 3.98 9.32 5 10 C3.79 6.57 2.62 4.5 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#291330\",transform:\"translate(766,247)\"})),_path1599||(_path1599=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 2.48 2.35 3.37 2.44 6.81 C2.29 15.97 -1.91 23.98 -6 32 C-7.33 28.01 -6.01 25.43 -4.69 21.62 C-2.3 14.45 -0.86 7.53 0 0 Z \",fill:\"#381A43\",transform:\"translate(585,1175)\"})),_path1600||(_path1600=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.29 20.54 2.29 20.54 -3 26 C-3.03 24.52 -3.05 23.04 -3.06 21.56 C-3.07 20.74 -3.09 19.92 -3.1 19.07 C-3 17 -3 17 -2 16 C-1.79 13.5 -1.62 11.01 -1.5 8.5 C-1.14 1.14 -1.14 1.14 0 0 Z \",fill:\"#421F4E\",transform:\"translate(361,1079)\"})),_path1601||(_path1601=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1.57 5.12 3.16 7 6 C7.19 9.65 6.82 12.95 6.27 16.56 C5.98 20.3 6.69 22.54 8 26 C7.62 28.38 7.62 28.38 7 30 C3.24 25.29 2.52 22.04 2.94 16 C3.28 10.5 2.79 6.87 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A1849\",transform:\"translate(1183,708)\"})),_path1602||(_path1602=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.38 5.39 1.33 7.34 -1 11 C-2.4 13.97 -3.7 16.98 -5 20 C-5.66 20 -6.32 20 -7 20 C-6.34 16.04 -5.68 12.08 -5 8 C-5.99 8.33 -6.98 8.66 -8 9 C-6.6 5.49 -5.36 4.57 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#3A1949\",transform:\"translate(380,667)\"})),_path1603||(_path1603=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.8 2.22 3.07 4.16 4.19 6.81 C7.21 12.12 13.09 17.79 19.04 19.63 C21.03 20.09 23.01 20.54 25 21 C20.53 22.32 16.5 22.19 12 21 C8.94 18.56 8.94 18.56 7 16 C7 15.34 7 14.68 7 14 C6.34 13.67 5.68 13.34 5 13 C4.67 12.01 4.34 11.02 4 10 C3.34 10 2.68 10 2 10 C0.68 6.38 0 3.9 0 0 Z \",fill:\"#2A1336\",transform:\"translate(582,610)\"})),_path1604||(_path1604=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 0.35 2.1 0.7 3.19 1.06 C6.95 1.99 8.37 1.76 12 1 C16.02 2.08 18.24 3.94 21 7 C16.08 8.64 12.65 7.8 8.1 5.59 C5.37 4.11 2.67 2.58 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#381A43\",transform:\"translate(1015,597)\"})),_path1605||(_path1605=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.22 4.04 3.43 7.08 3.62 10.12 C3.69 10.98 3.75 11.84 3.82 12.72 C4.12 17.64 3.99 21.37 2 26 C1.67 26 1.34 26 1 26 C0 18.63 -0.09 11.43 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#401E53\",transform:\"translate(475,437)\"})),_path1606||(_path1606=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C8.43 7.29 8.43 7.29 8 12 C6.35 12.66 4.7 13.32 3 14 C2.01 9.38 1.02 4.76 0 0 Z \",fill:\"#503357\",transform:\"translate(618,429)\"})),_path1607||(_path1607=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 4 2 4 2.96 6 C4.71 9.6 6.42 12.91 9 16 C5.33 14.5 3.31 12.36 0.75 9.38 C0.04 8.56 -0.66 7.74 -1.39 6.9 C-1.92 6.27 -2.45 5.65 -3 5 C-5.96 5.61 -7.38 6.25 -10 8 C-9.67 5.69 -9.34 3.38 -9 1 C-4.54 0.5 -4.54 0.5 0 0 Z \",fill:\"#80719E\",transform:\"translate(547,419)\"})),_path1608||(_path1608=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.67 2.71 5.67 2.71 6 5 C4.89 7.29 4.89 7.29 3.25 9.62 C2.72 10.4 2.19 11.18 1.64 11.98 C0 14 0 14 -3 16 C-6.19 16.12 -6.19 16.12 -9 16 C-8.41 15.76 -7.82 15.52 -7.21 15.27 C-4.57 13.75 -3.39 12.2 -1.69 9.69 C-1.16 8.93 -0.62 8.17 -0.07 7.39 C1.24 4.47 0.91 3.01 0 0 Z \",fill:\"#816786\",transform:\"translate(634,387)\"})),_path1609||(_path1609=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.75 3.5 -5.82 4.26 -9.31 5.69 C-10.09 6.02 -10.86 6.35 -11.65 6.7 C-12.4 7.01 -13.15 7.32 -13.93 7.64 C-14.61 7.92 -15.3 8.21 -16 8.5 C-18.35 9.09 -19.73 8.76 -22 8 C-16.06 2.38 -8.41 -2.65 0 0 Z \",fill:\"#3A2D3E\",transform:\"translate(677,319)\"})),_path1610||(_path1610=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.59 2.25 8.08 4.06 10 9 C10.66 11.31 11.32 13.62 12 16 C17.28 16.33 22.56 16.66 28 17 C28 17.33 28 17.66 28 18 C25.25 18.22 22.5 18.43 19.75 18.62 C18.97 18.69 18.2 18.75 17.39 18.82 C9.7 19.35 9.7 19.35 7 17 C6.6 15.12 6.6 15.12 6.62 12.88 C6.29 7.28 3.63 4.08 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(627,277)\"})),_path1611||(_path1611=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.94 2.46 2.85 3.92 2.75 5.38 C2.68 6.59 2.68 6.59 2.61 7.84 C2 10 2 10 -0.05 11.29 C-1.01 11.64 -1.01 11.64 -2 12 C-3.32 11.01 -4.64 10.02 -6 9 C-5.12 5.72 -4.49 3.49 -2.06 1.06 C-1.38 0.71 -0.7 0.36 0 0 Z \",fill:\"#45224F\",transform:\"translate(489,1200)\"})),_path1612||(_path1612=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.18 3.26 3.07 6.25 4 10 C4.19 10.69 4.38 11.37 4.57 12.08 C6.56 20.31 6.18 28.6 6 37 C5.34 37 4.68 37 4 37 C2.48 33.07 1.91 31 3 27 C3.61 19.82 2.64 13.53 0.66 6.63 C0 4 0 4 0 0 Z \",fill:\"#2C123E\",transform:\"translate(589,1116)\"})),_path1613||(_path1613=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.72 4.34 2.43 8.68 3.14 13.02 C3.38 14.5 3.62 15.98 3.86 17.45 C4.21 19.58 4.56 21.7 4.91 23.83 C5.12 25.11 5.33 26.38 5.54 27.7 C6 31 6 31 6 35 C5.34 35 4.68 35 4 35 C0.78 30.16 0.8 26.31 0.96 20.59 C1.01 16.29 0.77 12.04 0.5 7.75 C0.45 6.99 0.4 6.22 0.35 5.44 C0.24 3.62 0.12 1.81 0 0 Z \",fill:\"#391947\",transform:\"translate(403,875)\"})),_path1614||(_path1614=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.34 4.29 1.67 8.58 2 12.88 C2.1 14.08 2.19 15.28 2.29 16.52 C2.76 22.67 3.11 28.75 2.97 34.92 C3 37.01 3.26 38.94 3.62 41 C3.75 41.99 3.87 42.98 4 44 C3.34 44.66 2.68 45.32 2 46 C0.02 35.8 -0.24 26.03 -0.12 15.69 C-0.11 14.16 -0.11 12.63 -0.1 11.1 C-0.08 7.4 -0.04 3.7 0 0 Z \",fill:\"#2E133E\",transform:\"translate(403,842)\"})),_path1615||(_path1615=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75 2 2.75 2 5 4 C5 4.66 5 5.32 5 6 C3.42 6.05 1.83 6.09 0.25 6.12 C-0.63 6.15 -1.51 6.17 -2.42 6.2 C-5.11 5.99 -6.7 5.37 -9 4 C-8.67 2.35 -8.34 0.7 -8 -1 C-4.55 -2.23 -3.07 -1.95 0 0 Z \",fill:\"#401E4D\",transform:\"translate(950,534)\"})),_path1616||(_path1616=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.73 2.92 4.45 4.85 5.11 6.8 C6.05 9.11 7.2 10.87 8.69 12.88 C11 16 11 16 11 18 C6.56 16.6 4.02 14.52 1 11 C-0.51 7.52 -0.07 3.75 0 0 Z \",fill:\"#170B21\",transform:\"translate(521,439)\"})),_path1617||(_path1617=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.19 1.38 2.19 1.38 4.19 4.38 C4.27 6.71 4.28 9.04 4.19 11.38 C2.85 9.38 1.52 7.38 0.19 5.38 C-3.35 5.07 -6.42 5.33 -9.81 6.38 C-9.81 5.06 -9.81 3.74 -9.81 2.38 C-3.59 -0.8 -3.59 -0.8 0 0 Z \",fill:\"#755A7C\",transform:\"translate(558.8125,363.625)\"})),_path1618||(_path1618=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.97 4.05 3.93 6.1 3.9 8.15 C3.79 10.02 3.79 10.02 5 11 C5.04 13 5.04 15 5 17 C4.01 16.67 3.02 16.34 2 16 C1.32 14 0.65 12 0 10 C-0.99 9.34 -1.98 8.68 -3 8 C-3.38 5.56 -3.38 5.56 -3 3 C-1.5 1.19 -1.5 1.19 0 0 Z \",fill:\"#2F2234\",transform:\"translate(522,353)\"})),_path1619||(_path1619=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 5.61 0 11.22 0 17 C-1.98 16.67 -3.96 16.34 -6 16 C-5.74 13.89 -5.47 11.79 -5.19 9.69 C-5.04 8.52 -4.89 7.34 -4.73 6.14 C-4.14 3.59 -3.28 0 0 0 Z \",fill:\"#66476C\",transform:\"translate(684,294)\"})),_path1620||(_path1620=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C3.66 2.33 4.32 2.66 5 3 C4.43 4.46 3.85 5.92 3.25 7.38 C2.93 8.19 2.6 9 2.27 9.84 C0.81 12.33 -0.34 12.98 -3 14 C-5 11 -5 11 -4.88 9.25 C-3.59 5.95 -1.81 3.04 0 0 Z \",fill:\"#483750\",transform:\"translate(596,255)\"})),_path1621||(_path1621=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.76 0.48 7.23 2.49 10.81 5.56 C11.79 6.39 12.76 7.22 13.77 8.07 C14.51 8.7 15.24 9.34 16 10 C15.01 10 14.02 10 13 10 C13.99 11.32 14.98 12.64 16 14 C12.57 14 12.26 13.67 9.86 11.45 C9.29 10.91 8.71 10.38 8.12 9.83 C7.52 9.27 6.93 8.71 6.31 8.12 C5.71 7.57 5.1 7.01 4.47 6.44 C2.94 5.01 1.46 3.51 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#281135\",transform:\"translate(788,245)\"})),_path1622||(_path1622=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.04 0.93 1.08 1.86 1.12 2.81 C1.7 6.2 1.7 6.2 4.62 7.94 C8.53 9.17 11.04 8.87 15 8 C15.33 8.66 15.66 9.32 16 10 C15.34 10 14.68 10 14 10 C14 10.66 14 11.32 14 12 C4.51 13.45 4.51 13.45 1 12 C-1.62 7.96 -0.9 4.57 0 0 Z \",fill:\"#2C123E\",transform:\"translate(578,111)\"})),_path1623||(_path1623=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.46 2.46 2.77 4.27 3.62 7.62 C3.89 8.63 4.15 9.63 4.41 10.66 C4.61 11.43 4.8 12.21 5 13 C3.35 13.33 1.7 13.66 0 14 C-2.48 10.34 -3.49 7.39 -4 3 C-2.68 2.01 -1.36 1.02 0 0 Z \",fill:\"#45245B\",transform:\"translate(341,1189)\"})),_path1624||(_path1624=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.01 0.29 4.01 0.62 6 1 C6.99 4.63 7.98 8.26 9 12 C7 13 7 13 4.56 12.69 C0.44 9.97 0.05 5.64 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(979,912)\"})),_path1625||(_path1625=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.61 0.33 -1.23 0.65 -1.86 0.99 C-4.7 2.51 -7.54 4.04 -10.38 5.56 C-11.34 6.08 -12.31 6.59 -13.3 7.12 C-19.87 10.67 -25.98 14.59 -32 19 C-32.66 18.67 -33.32 18.34 -34 18 C-26.9 11.99 -19.7 7 -11.38 2.81 C-10.2 2.22 -10.2 2.22 -9.01 1.61 C-3.39 -1.13 -3.39 -1.13 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(775,588)\"})),_path1626||(_path1626=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C7.03 3.09 6.97 4.53 6.56 7.69 C6.46 8.5 6.36 9.3 6.25 10.14 C6.17 10.75 6.09 11.37 6 12 C4.68 12 3.36 12 2 12 C0 10 0 10 -0.2 7.62 C-0.17 6.71 -0.15 5.81 -0.12 4.88 C-0.11 3.96 -0.09 3.05 -0.07 2.12 C-0.05 1.42 -0.02 0.72 0 0 Z \",fill:\"#0C0911\",transform:\"translate(684,295)\"})),_path1627||(_path1627=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.98 -0.66 3.96 -1 6 C-1.78 5.63 -2.57 5.26 -3.38 4.88 C-7.72 3.83 -10.39 4.6 -14.65 5.62 C-17.62 6.1 -19.44 5.54 -22 4 C-19.06 2.34 -16.73 1.7 -13.38 1.44 C-8.67 1.05 -4.86 -0.09 0 0 Z \",fill:\"#513E59\",transform:\"translate(593,265)\"})),_path1628||(_path1628=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.65 1.08 4.17 2.17 6.19 4.25 C8.59 6.6 10.71 8.2 13.5 10 C18.59 13.3 22.5 17.03 26 22 C25.34 22.66 24.68 23.32 24 24 C20.73 21.89 19.82 20.74 19 17 C17.31 14.78 15.87 13.94 13.31 12.75 C7.72 9.8 2.55 5.92 0 0 Z \",fill:\"#2B113E\",transform:\"translate(850,230)\"})),_path1629||(_path1629=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.94 0.5 5.63 1.18 8.06 4.31 C11.26 8.21 14.67 11.77 18.25 15.31 C19.03 16.09 19.03 16.09 19.82 16.87 C21.21 18.25 22.61 19.63 24 21 C25 22 26 23 27 24 C22.5 22.59 20.26 20.34 17 17 C15.74 16.08 14.47 15.19 13.19 14.31 C12.14 13.55 11.08 12.79 10 12 C10 11.34 10 10.68 10 10 C9.34 10 8.68 10 8 10 C7.57 9.24 7.13 8.47 6.69 7.69 C4.79 4.67 3.05 3.73 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#391947\",transform:\"translate(685,77)\"})),_path1630||(_path1630=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.58 3.23 -1.16 3.46 -1.76 3.7 C-6.93 5.86 -11.11 7.91 -15 12 C-15.9 15.01 -15.9 15.01 -16 18 C-16.32 19.34 -16.64 20.67 -17 22 C-18.24 18.28 -18.67 14.86 -18 11 C-15.81 8.25 -15.81 8.25 -13 6 C-12.15 5.28 -11.31 4.56 -10.44 3.81 C-6.61 0.97 -4.86 0 0 0 Z \",fill:\"#472F6B\",transform:\"translate(630,1086)\"})),_path1631||(_path1631=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.66 -1.98 1.32 -3 2 C-2.01 2.99 -1.02 3.98 0 5 C-1.65 6.32 -3.3 7.64 -5 9 C-6.94 8.25 -6.94 8.25 -9 7 C-9.62 5 -9.62 5 -10 3 C-10.66 2.34 -11.32 1.68 -12 1 C-7.54 -0.81 -4.69 -1.12 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(1192,1046)\"})),_path1632||(_path1632=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.98 7.89 2.98 14.11 1 22 C-2.78 21.23 -4.48 19.97 -7 17 C-7 16.34 -7 15.68 -7 15 C-7.99 14.67 -8.98 14.34 -10 14 C-9.01 13.34 -8.02 12.68 -7 12 C-6.59 12.5 -6.17 12.99 -5.75 13.5 C-3.88 15.43 -3.88 15.43 0 15 C0 10.05 0 5.1 0 0 Z \",fill:\"#381944\",transform:\"translate(1225,776)\"})),_path1633||(_path1633=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.59 1.61 1.18 2.22 0.75 2.84 C-4.56 10.9 -8.81 19.32 -13 28 C-13.96 25.44 -14.11 24.31 -13.14 21.7 C-12.49 20.49 -12.49 20.49 -11.81 19.25 C-11.35 18.38 -10.89 17.5 -10.41 16.61 C-9.71 15.32 -9.71 15.32 -9 14 C-6.22 8.62 -6.22 8.62 -4 3 C-3.34 3 -2.68 3 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#2A1237\",transform:\"translate(310,765)\"})),_path1634||(_path1634=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C1.67 3.99 1.34 4.98 1 6 C0.8 11.12 1.29 15.95 2 21 C-1.49 17.97 -3.02 15.53 -4 11 C-3.76 6.37 -3.17 3.44 0 0 Z \",fill:\"#311442\",transform:\"translate(1211,749)\"})),_path1635||(_path1635=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.19 0.13 9.46 2.5 14.36 6.14 C18.33 8.93 22.6 10.97 27 13 C27 13.66 27 14.32 27 15 C27.99 15.33 28.98 15.66 30 16 C29.34 16.33 28.68 16.66 28 17 C25.6 16.08 23.32 15.1 21 14 C19.97 13.55 18.94 13.09 17.88 12.62 C14.66 10.81 12.54 8.67 10 6 C6.9 3.3 3.93 2.16 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#1D0C31\",transform:\"translate(939,700)\"})),_path1636||(_path1636=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.99 2.33 -1.98 2.66 -3 3 C-2.36 3.25 -1.72 3.5 -1.06 3.75 C1 5 1 5 1.88 7 C1.94 7.99 1.94 7.99 2 9 C1.34 9.66 0.68 10.32 0 11 C-0.66 10.01 -1.32 9.02 -2 8 C-4.67 7.64 -4.67 7.64 -7.62 7.81 C-8.63 7.84 -9.63 7.87 -10.66 7.89 C-11.82 7.95 -11.82 7.95 -13 8 C-12.67 7.34 -12.34 6.68 -12 6 C-9.44 5.38 -9.44 5.38 -7 5 C-7.33 4.01 -7.66 3.02 -8 2 C-8.66 1.67 -9.32 1.34 -10 1 C-6.53 -0.16 -3.64 -0.07 0 0 Z \",fill:\"#2B123D\",transform:\"translate(623,628)\"})),_path1637||(_path1637=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.72 2.53 15.36 5.25 23 8 C21 10 21 10 18.56 10.25 C16 10 16 10 13 8 C11.53 7.48 10.05 7.01 8.56 6.56 C5.24 5.49 2.52 4.52 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#25112E\",transform:\"translate(1113,603)\"})),_path1638||(_path1638=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.98 0.66 3.96 1 6 C0.34 6 -0.32 6 -1 6 C-1.66 8.31 -2.32 10.62 -3 13 C-4.32 12.67 -5.64 12.34 -7 12 C-6.91 10.56 -6.8 9.12 -6.69 7.69 C-6.63 6.89 -6.57 6.09 -6.51 5.26 C-5.61 1.25 -4.07 0 0 0 Z \",fill:\"#4F4141\",transform:\"translate(873,436)\"})),_path1639||(_path1639=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.55 4.42 2.09 5.83 1.62 7.25 C1.37 8.04 1.11 8.83 0.85 9.64 C0.05 11.87 -0.9 13.91 -2 16 C-3.32 15.34 -4.64 14.68 -6 14 C-4.51 9.03 -2.4 4.58 0 0 Z \",fill:\"#71577C\",transform:\"translate(907,383)\"})),_path1640||(_path1640=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.91 4.89 -0.63 8.59 -2.6 13.11 C-4 16 -4 16 -6.06 19.06 C-8.91 23.38 -10.37 28.12 -12 33 C-12.33 33 -12.66 33 -13 33 C-13 31.02 -13 29.04 -13 27 C-12.34 27 -11.68 27 -11 27 C-10.9 26.16 -10.81 25.33 -10.71 24.47 C-9.9 20.5 -8.39 17.11 -6.62 13.5 C-6.17 12.54 -6.17 12.54 -5.7 11.57 C-3.85 7.69 -1.93 3.84 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(534,252)\"})),_path1641||(_path1641=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.48 1.6 -0.96 3.21 -1.44 4.81 C-1.7 5.71 -1.97 6.6 -2.25 7.52 C-2.8 9.35 -3.39 11.18 -4 13 C-4.99 12.67 -5.98 12.34 -7 12 C-6.67 11.01 -6.34 10.02 -6 9 C-6.66 9 -7.32 9 -8 9 C-8.25 3.38 -8.25 3.38 -6 0 C-3 -1 -3 -1 0 0 Z \",fill:\"#230F37\",transform:\"translate(583,128)\"})),_path1642||(_path1642=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.01 1.47 7.52 4.28 11 8 C10.67 8.99 10.34 9.98 10 11 C9.38 10.34 8.76 9.68 8.12 9 C6.24 6.77 6.24 6.77 4 7 C4.33 9.31 4.66 11.62 5 14 C4.34 13.67 3.68 13.34 3 13 C3 12.34 3 11.68 3 11 C2.34 11 1.68 11 1 11 C-1.43 3.57 -1.43 3.57 0 0 Z \",fill:\"#2C123E\",transform:\"translate(428,939)\"})),_path1643||(_path1643=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.23 4.36 C1.93 24.07 1.93 24.07 -4 30 C-3.75 28.95 -3.75 28.95 -3.49 27.88 C-2.97 24.8 -3.01 22.05 -3.12 18.94 C-3.2 12.25 -1.93 6.37 0 0 Z \",fill:\"#311343\",transform:\"translate(596,777)\"})),_path1644||(_path1644=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.02 4.01 -0.99 6.01 -2 8 C-2.5 9.54 -2.98 11.08 -3.44 12.62 C-4.62 16.28 -5.69 18.79 -9 21 C-11.13 20.59 -11.13 20.59 -13 20 C-12.56 19.39 -12.13 18.79 -11.68 18.16 C-7.49 12.27 -3.63 6.25 0 0 Z \",fill:\"#381A43\",transform:\"translate(340,724)\"})),_path1645||(_path1645=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.22 3.65 0.65 4.39 -0.88 7.81 C-3.21 13.22 -3.21 13.22 -4 19 C-1.92 21.68 0.17 23.11 3 25 C2.67 25.99 2.34 26.98 2 28 C0.68 27.05 -0.63 26.09 -1.94 25.12 C-2.67 24.59 -3.4 24.06 -4.15 23.51 C-6.61 21.5 -6.95 20.49 -7.28 17.34 C-6.94 13.23 -5.42 10.18 -3.5 6.62 C-3 5.66 -3 5.66 -2.49 4.68 C-1.67 3.12 -0.84 1.56 0 0 Z \",fill:\"#401F54\",transform:\"translate(323,683)\"})),_path1646||(_path1646=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31 0.98 2.63 1.96 3.94 2.94 C4.67 3.48 5.4 4.03 6.15 4.59 C8 6 8 6 9 7 C8.82 9.69 8.38 12.33 8 15 C6.14 14.87 6.14 14.87 4 14 C2.73 11.35 2.73 11.35 1.75 8.06 C1.41 6.98 1.08 5.9 0.73 4.79 C0 2 0 2 0 0 Z \",fill:\"#2F153C\",transform:\"translate(868,582)\"})),_path1647||(_path1647=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.38 3.97 7.64 8.53 11.06 13.34 C12.64 15.5 14.25 17.54 16 19.56 C18 22 18 22 18 24 C18.66 24 19.32 24 20 24 C20.66 25.65 21.32 27.3 22 29 C18.35 27.75 17.22 27.33 15 24 C15 23.01 15 22.02 15 21 C14.34 21 13.68 21 13 21 C11.69 19.4 11.69 19.4 10.21 17.17 C9.68 16.37 9.15 15.57 8.61 14.75 C8.06 13.9 7.51 13.06 6.94 12.19 C6.38 11.35 5.83 10.52 5.26 9.66 C1.14 3.42 1.14 3.42 0 0 Z \",fill:\"#2C123D\",transform:\"translate(983,553)\"})),_path1648||(_path1648=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3 2.66 3 3.32 3 4 C-5.41 4.5 -5.41 4.5 -14 5 C-7.54 -1.46 -7.54 -1.46 0 0 Z \",fill:\"#795E82\",transform:\"translate(622,401)\"})),_path1649||(_path1649=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.47 4.41 0.44 7.69 -1 12 C-5.54 15.12 -8.36 16.55 -14 16 C-12.26 14.17 -10.51 12.62 -8.5 11.06 C-4.69 7.92 -2.48 4.24 0 0 Z \",fill:\"#402F47\",transform:\"translate(875,375)\"})),_path1650||(_path1650=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.53 3.07 2.53 3.07 2.94 5.69 C3.52 8.98 4.09 11.17 5.62 14.19 C7.36 17.74 7.51 20.09 7 24 C4.97 26.21 4.97 26.21 3 28 C3.07 26.89 3.07 26.89 3.14 25.76 C3.39 18.87 2.6 13.78 -0.22 7.47 C-1.13 4.58 -0.82 2.88 0 0 Z \",fill:\"#67486D\",transform:\"translate(889,365)\"})),_path1651||(_path1651=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.32 2 3.64 2 5 C1.01 5.5 1.01 5.5 0 6 C-0.26 7.95 -0.52 9.9 -0.71 11.86 C-1.1 14.72 -1.99 17.31 -3 20 C-4.98 18.68 -6.96 17.36 -9 16 C-8 14 -8 14 -6 11 C-5.67 10.01 -5.34 9.02 -5 8 C-4.34 8 -3.68 8 -3 8 C-2.01 5.36 -1.02 2.72 0 0 Z \",fill:\"#705275\",transform:\"translate(898,343)\"})),_path1652||(_path1652=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C-2.97 6.5 -2.97 6.5 -6 6 C-5.67 6.66 -5.34 7.32 -5 8 C-6.75 8.69 -6.75 8.69 -9 9 C-11.25 7.69 -11.25 7.69 -13 6 C-13 5.34 -13 4.68 -13 4 C-8.69 1.69 -4.94 0 0 0 Z \",fill:\"#54335B\",transform:\"translate(683,326)\"})),_path1653||(_path1653=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.36 1.56 0.72 2.36 1.09 C3.15 1.43 3.94 1.77 4.75 2.12 C6.68 3.46 6.68 3.46 7.45 5.61 C7.52 6.22 7.6 6.83 7.68 7.46 C6.69 7.13 5.7 6.8 4.68 6.46 C4.68 7.12 4.68 7.78 4.68 8.46 C3.22 7.98 1.76 7.5 0.3 7.02 C-0.51 6.76 -1.32 6.49 -2.16 6.21 C-4.32 5.46 -4.32 5.46 -6.32 4.46 C-6.32 3.47 -6.32 2.48 -6.32 1.46 C-3.91 -0.1 -2.86 -0.66 0 0 Z \",fill:\"#1C1420\",transform:\"translate(519.32421875,309.5390625)\"})),_path1654||(_path1654=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.42 3.29 0.86 4.94 1.31 C6.31 1.68 6.31 1.68 7.71 2.05 C8.47 2.36 9.22 2.68 10 3 C10.33 3.99 10.66 4.98 11 6 C8.69 8.5 8.69 8.5 6 11 C5.01 11 4.02 11 3 11 C2.5 9.35 2 7.71 1.5 6.06 C1.08 4.69 1.08 4.69 0.66 3.29 C0 1 0 1 0 0 Z \",fill:\"#6F5174\",transform:\"translate(824,300)\"})),_path1655||(_path1655=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C4.11 8.12 5.71 15.57 5 23 C4.34 23.66 3.68 24.32 3 25 C2.93 24.04 2.93 24.04 2.85 23.07 C2.78 22.24 2.7 21.41 2.62 20.56 C2.56 19.74 2.49 18.92 2.41 18.07 C2.28 17.38 2.14 16.7 2 16 C1.34 15.67 0.68 15.34 0 15 C-1.05 10.05 -1.47 4.89 0 0 Z \",fill:\"#291138\",transform:\"translate(930,268)\"})),_path1656||(_path1656=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 0.34 1.14 0.34 2.31 0.69 C3.06 2.38 3.06 2.38 3.31 4.69 C1.38 7.44 1.38 7.44 -0.69 9.69 C-4.56 8.81 -4.56 8.81 -5.69 7.69 C-5.99 4.85 -6.04 3.25 -4.5 0.81 C-2.69 -0.31 -2.69 -0.31 0 0 Z \",fill:\"#4C2A5B\",transform:\"translate(714.6875,160.3125)\"})),_path1657||(_path1657=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.66 2 -1.32 2 -2 2 C-0.68 4.31 0.64 6.62 2 9 C1.01 9.99 0.02 10.98 -1 12 C-1.4 10.55 -1.4 10.55 -1.81 9.06 C-2.2 8.05 -2.6 7.04 -3 6 C-3.99 5.67 -4.98 5.34 -6 5 C-6 5.66 -6 6.32 -6 7 C-6.66 7 -7.32 7 -8 7 C-10 1.12 -10 1.12 -10 0 C-6.34 -0.75 -3.58 -1.24 0 0 Z \",fill:\"#240F38\",transform:\"translate(720,48)\"})),_path1658||(_path1658=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.7 1.37 -5.41 2.72 -8.12 4.06 C-8.89 4.45 -9.65 4.84 -10.43 5.24 C-15.02 7.48 -17.88 8.56 -23 7 C-23 6.01 -23 5.02 -23 4 C-21.76 3.86 -20.52 3.71 -19.25 3.56 C-15.06 3.08 -15.06 3.08 -11 2 C-10.67 1.34 -10.34 0.68 -10 0 C-6.18 -0.78 -3.73 -1.24 0 0 Z \",fill:\"#311244\",transform:\"translate(410,1225)\"})),_path1659||(_path1659=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C8.5 3.73 8.13 5.81 6 9 C3.16 7.73 0.86 6.55 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#0A123C\",transform:\"translate(816,1205)\"})),_path1660||(_path1660=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.2 0.13 10.74 0.81 15.38 3.28 C17.86 4.45 19.96 4.66 22.69 4.88 C23.58 4.95 24.47 5.02 25.39 5.1 C26.4 5.18 26.4 5.18 27.44 5.25 C27.44 5.58 27.44 5.91 27.44 6.25 C21.46 7.74 16.11 8.42 10.69 5.31 C5.58 2.42 0.19 2.44 -5.56 2.25 C-3.56 0.25 -3.56 0.25 0 0 Z \",fill:\"#401D4F\",transform:\"translate(290.5625,1133.75)\"})),_path1661||(_path1661=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.13 3 C6.23 8.41 7.57 13.21 8 19 C7.34 19.33 6.68 19.66 6 20 C5.62 18.9 5.62 18.9 5.23 17.77 C4.89 16.79 4.54 15.82 4.19 14.81 C3.85 13.85 3.51 12.89 3.17 11.89 C2.07 8.95 2.07 8.95 0.34 6.28 C-1 4 -1 4 -0.69 1.69 C-0.46 1.13 -0.23 0.57 0 0 Z \",fill:\"#1C0B31\",transform:\"translate(1266,1017)\"})),_path1662||(_path1662=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 5 4 C5.99 4.33 6.98 4.66 8 5 C8 7.64 8 10.28 8 13 C3.49 10.68 1.06 7.94 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#311243\",transform:\"translate(1272,959)\"})),_path1663||(_path1663=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.52 3.04 2.49 5.42 3.38 8.62 C4.69 13.17 6.32 17.5 8.13 21.87 C9.86 26.11 10.09 29.43 10 34 C8.31 31.46 7.44 29.7 6.49 26.88 C6.23 26.09 5.96 25.3 5.69 24.48 C5.42 23.66 5.15 22.84 4.88 22 C4.6 21.18 4.32 20.36 4.04 19.52 C3.77 18.73 3.51 17.94 3.24 17.12 C3 16.41 2.76 15.69 2.52 14.95 C2 13 2 13 2 10 C1.34 10 0.68 10 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#46265C\",transform:\"translate(536,932)\"})),_path1664||(_path1664=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.29 0.64 0.58 1.28 0.88 1.94 C1.83 4.15 1.83 4.15 4 5 C3.51 8.12 3 11 2 14 C1.01 13.67 0.02 13.34 -1 13 C-1 12.34 -1 11.68 -1 11 C-1.66 11 -2.32 11 -3 11 C-3.33 13.64 -3.66 16.28 -4 19 C-4.33 19 -4.66 19 -5 19 C-4.55 11.97 -2.88 6.42 0 0 Z \",fill:\"#1A0C1F\",transform:\"translate(204,832)\"})),_path1665||(_path1665=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.18 1.49 1.18 1.49 2 4 C1.19 6.86 0.32 9.4 -0.81 12.12 C-1.24 13.22 -1.24 13.22 -1.68 14.33 C-2.71 16.93 -3.75 19.5 -5 22 C-5.66 22 -6.32 22 -7 22 C-6.72 20.1 -6.42 18.21 -6.12 16.31 C-5.96 15.26 -5.8 14.2 -5.63 13.11 C-4.62 8.15 -2.68 4.27 0 0 Z \",fill:\"#060929\",transform:\"translate(592,812)\"})),_path1666||(_path1666=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.39 2.39 4.97 3.72 5.31 7.12 C5 10 5 10 3 12 C0.94 11.75 0.94 11.75 -1 11 C-2.39 8.23 -2.19 6.07 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#000002\",transform:\"translate(661,633)\"})),_path1667||(_path1667=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3.75 2 3.75 2 6 C1.34 6 0.68 6 0 6 C0.06 6.83 0.12 7.65 0.19 8.5 C-0.04 12.72 -0.78 16.36 -3 20 C-5.69 21 -5.69 21 -8 21 C-8.33 18.69 -8.66 16.38 -9 14 C-8.34 14.66 -7.68 15.32 -7 16 C-5.04 14.04 -4.19 12.46 -3 10 C-2.67 9.67 -2.34 9.34 -2 9 C-1.79 7.67 -1.63 6.34 -1.5 5 C-1.11 1.11 -1.11 1.11 0 0 Z \",fill:\"#30153F\",transform:\"translate(869,536)\"})),_path1668||(_path1668=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43 2.86 0.6 4.93 0 8 C0.66 8 1.32 8 2 8 C2 8.66 2 9.32 2 10 C3.32 10.33 4.64 10.66 6 11 C4.4 11.08 2.79 11.14 1.19 11.19 C0.29 11.22 -0.6 11.26 -1.52 11.29 C-4 11 -4 11 -5.82 9.61 C-7 8 -7 8 -7.06 6.06 C-5.47 2.96 -2.94 1.75 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(606,454)\"})),_path1669||(_path1669=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.55 0.25 1.1 0.49 1.67 0.75 C1.42 4.16 0.41 4.99 -2.14 7.43 C-6.71 10.75 -6.71 10.75 -9.33 10.75 C-10.94 9.25 -10.94 9.25 -12.33 7.75 C-10.76 6.38 -9.17 5.03 -7.58 3.68 C-6.26 2.55 -6.26 2.55 -4.91 1.4 C-2.33 -0.25 -2.33 -0.25 0 0 Z \",fill:\"#1F1622\",transform:\"translate(672.328125,366.25390625)\"})),_path1670||(_path1670=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C8.67 4.65 8.34 6.3 8 8 C7.01 8 6.02 8 5 8 C4.67 8.66 4.34 9.32 4 10 C1.66 9.74 -0.68 9.41 -3 9 C-3.33 8.34 -3.66 7.68 -4 7 C-2.68 7 -1.36 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#342539\",transform:\"translate(600,316)\"})),_path1671||(_path1671=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.53 2.53 2.43 3.86 2.75 7.38 C2.9 8.81 2.9 8.81 3.05 10.27 C3 13.13 2.48 14.6 1 17 C0.34 16.01 -0.32 15.02 -1 14 C-1.66 14 -2.32 14 -3 14 C-3.08 9.84 -2.98 6.05 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#140D18\",transform:\"translate(504,299)\"})),_path1672||(_path1672=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-3.32 4.11 -4.67 3.77 -8 3 C-8.66 3 -9.32 3 -10 3 C-9.45 6.95 -8.61 10.35 -7 14 C-10.54 10.7 -12.78 8.28 -13.25 3.38 C-13 1 -13 1 -11 -1 C-6.62 -2.17 -4.06 -2.03 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(759,199)\"})),_path1673||(_path1673=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.39 2.96 4.74 5.94 7 9 C6.67 9.66 6.34 10.32 6 11 C5.34 10.34 4.68 9.68 4 9 C1.57 8.54 1.57 8.54 -1.12 8.38 C-2.04 8.3 -2.95 8.23 -3.88 8.15 C-4.58 8.1 -5.28 8.05 -6 8 C-6.12 5.62 -6.12 5.62 -6 3 C-3.86 0.86 -2.87 0.57 0 0 Z \",fill:\"#401F54\",transform:\"translate(796,186)\"})),_path1674||(_path1674=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31 3.92 0.54 7.1 -0.19 11.06 C-0.32 11.83 -0.46 12.59 -0.6 13.38 C-1.73 19.28 -3.51 24.54 -6 30 C-6.6 31.54 -7.18 33.08 -7.75 34.62 C-8.16 35.74 -8.57 36.85 -9 38 C-9.33 38 -9.66 38 -10 38 C-9.75 32.76 -9.24 29.07 -6.62 24.5 C-3.34 18.5 -2.58 12.24 -1.58 5.56 C-1 2 -1 2 0 0 Z \",fill:\"#401D4F\",transform:\"translate(391,1054)\"})),_path1675||(_path1675=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 5.94 1 11.88 1 18 C0.34 18 -0.32 18 -1 18 C-1.28 18.97 -1.28 18.97 -1.57 19.96 C-3 22 -3 22 -6.08 22.57 C-7.93 22.63 -7.93 22.63 -9.81 22.69 C-14 22.84 -17.92 23.04 -22 24 C-21 22 -21 22 -18.38 20.94 C-15 20 -15 20 -11.44 19.5 C-8.21 19.03 -5.83 18.62 -3 17 C-1.12 13.25 -0.65 9.85 -0.38 5.69 C-0.3 4.62 -0.23 3.55 -0.15 2.45 C-0.1 1.64 -0.05 0.83 0 0 Z \",fill:\"#401F54\",transform:\"translate(401,878)\"})),_path1676||(_path1676=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.68 5.72 9.54 14.54 11 23 C10.67 23.99 10.34 24.98 10 26 C0 7.53 0 7.53 0 0 Z \",fill:\"#2C133A\",transform:\"translate(1194,857)\"})),_path1677||(_path1677=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06 0.76 1.11 1.52 1.17 2.31 C1.42 5.77 1.68 9.23 1.94 12.69 C2.02 13.89 2.11 15.08 2.2 16.32 C2.29 17.48 2.38 18.63 2.46 19.82 C2.54 20.89 2.62 21.95 2.7 23.05 C2.98 25.76 3.44 28.34 4 31 C4.06 32.6 4.09 34.21 4.06 35.81 C4.05 36.6 4.04 37.39 4.04 38.21 C4.02 39.09 4.02 39.09 4 40 C-0.7 31.45 -0.27 21.3 -0.12 11.81 C-0.12 10.67 -0.11 9.53 -0.1 8.35 C-0.07 5.57 -0.04 2.78 0 0 Z \",fill:\"#1F0D31\",transform:\"translate(407,842)\"})),_path1678||(_path1678=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 -0.06 5.5 C-1.72 9.7 -3.99 13.37 -6.37 17.19 C-9.31 22.26 -11.63 27.64 -14 33 C-15 30 -15.31 28.12 -15 25 C-14.01 23.99 -13.01 22.99 -12 22 C-7.3 15.07 -3.64 7.52 0 0 Z \",fill:\"#3B174B\",transform:\"translate(547,776)\"})),_path1679||(_path1679=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.72 2.72 3.72 5.4 5 9 C4.92 12.5 4.3 13.65 2 16.31 C0 18 0 18 -1 18 C-1.03 16.06 -1.05 14.13 -1.06 12.19 C-1.07 11.11 -1.09 10.03 -1.1 8.92 C-1 6 -1 6 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#27103A\",transform:\"translate(600,774)\"})),_path1680||(_path1680=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.13 1.26 2.27 2.53 2.4 3.83 C2.58 5.49 2.76 7.15 2.94 8.81 C3.02 9.65 3.11 10.48 3.2 11.34 C3.29 12.14 3.38 12.94 3.46 13.77 C3.54 14.51 3.62 15.25 3.7 16.01 C3.97 18.2 3.97 18.2 5 21 C5.04 23.33 5.04 25.67 5 28 C3.5 26.88 3.5 26.88 2 25 C2 23 2 21 2 19 C1.35 16.2 0.57 13.45 -0.25 10.68 C-1.71 5.49 -1.71 5.49 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#1C1420\",transform:\"translate(665,650)\"})),_path1681||(_path1681=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 0.88 4.75 0.88 7 2 C7 2.66 7 3.32 7 4 C7.76 4.1 8.53 4.21 9.31 4.31 C12.18 5.05 13.23 5.67 15 8 C15 8.66 15 9.32 15 10 C13.56 9.69 12.12 9.38 10.69 9.06 C9.89 8.89 9.09 8.71 8.26 8.54 C6 8 6 8 3 7 C1.31 3.44 1.31 3.44 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(943,630)\"})),_path1682||(_path1682=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C4.62 2 9.24 2 14 2 C8.96 4.52 5.88 5.12 0.31 5.06 C-1.46 5.05 -1.46 5.05 -3.26 5.04 C-4.17 5.02 -5.07 5.01 -6 5 C-6.33 4.34 -6.66 3.68 -7 3 C-9.64 3 -12.28 3 -15 3 C-12.54 0.54 -11.47 0.64 -8.06 0.38 C-6.75 0.26 -6.75 0.26 -5.41 0.15 C-3.61 0.04 -1.8 0 0 0 Z \",fill:\"#170B22\",transform:\"translate(639,626)\"})),_path1683||(_path1683=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -3.11 4.39 C-3.98 4.82 -4.85 5.25 -5.75 5.69 C-7.04 6.34 -7.04 6.34 -8.36 7.01 C-11.11 8.04 -13.09 8.19 -16 8 C-16 7.34 -16 6.68 -16 6 C-16.99 5.67 -17.98 5.34 -19 5 C-18.31 4.81 -17.63 4.61 -16.92 4.41 C-16.02 4.15 -15.12 3.89 -14.19 3.62 C-13.29 3.37 -12.4 3.11 -11.48 2.85 C-2.81 -0.12 -2.81 -0.12 0 0 Z \",fill:\"#010103\",transform:\"translate(696,614)\"})),_path1684||(_path1684=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.94 0.38 2.94 0.38 6 1 C7.24 3.48 6.98 4.82 6.69 7.56 C6.57 8.77 6.57 8.77 6.45 10 C6.3 10.66 6.15 11.32 6 12 C5.01 12.5 5.01 12.5 4 13 C4 12.34 4 11.68 4 11 C3.34 11 2.68 11 2 11 C0.81 7.12 0 4.08 0 0 Z \",fill:\"#150D19\",transform:\"translate(580,597)\"})),_path1685||(_path1685=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.21 1.53 0.41 2.31 0.62 C3.16 4 3.42 6.3 2.31 9.62 C-2.44 8.75 -2.44 8.75 -4.69 7.62 C-5.31 4.56 -5.31 4.56 -5.69 1.62 C-2.69 -0.38 -2.69 -0.38 0 0 Z \",fill:\"#72587D\",transform:\"translate(560.6875,534.375)\"})),_path1686||(_path1686=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 0.94 2.5 0.94 5 3 C5.58 6.05 5.55 8.95 5 12 C4.34 12.66 3.68 13.32 3 14 C2.01 14 1.02 14 0 14 C0.09 12.64 0.09 12.64 0.19 11.25 C-0.02 7.71 -0.65 6.55 -3 4 C-2.01 3.67 -1.02 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#755B7D\",transform:\"translate(854,532)\"})),_path1687||(_path1687=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31 4.3 0.46 7.94 -0.44 12.25 C-0.59 13 -0.73 13.74 -0.88 14.51 C-1.25 16.34 -1.62 18.17 -2 20 C-3.32 19.34 -4.64 18.68 -6 18 C-5.41 12.49 -4.43 7.35 -3 2 C-2.01 2.33 -1.02 2.66 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#230F36\",transform:\"translate(432,393)\"})),_path1688||(_path1688=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.87 1.45 0.87 1.45 0.75 2.92 C0.64 4.19 0.54 5.45 0.44 6.75 C0.33 8 0.23 9.26 0.12 10.55 C0.02 13.49 0.3 15.24 1 18 C0.66 20.36 0.66 20.36 0.06 22.75 C-0.13 23.55 -0.33 24.35 -0.53 25.17 C-0.76 26.08 -0.76 26.08 -1 27 C-1.66 27 -2.32 27 -3 27 C-4.12 21.36 -3.74 16.86 -2.62 11.25 C-2.49 10.5 -2.35 9.74 -2.2 8.96 C-1.63 5.9 -0.99 2.96 0 0 Z \",fill:\"#160725\",transform:\"translate(443,341)\"})),_path1689||(_path1689=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.15 2.71 4.95 6.16 6.94 9.75 C7.27 10.35 7.61 10.94 7.95 11.55 C8.63 12.76 9.3 13.96 9.97 15.17 C10.68 16.43 11.41 17.69 12.15 18.94 C15 23.8 15 23.8 15 26 C14.34 26 13.68 26 13 26 C11.44 23.9 10.02 21.83 8.62 19.62 C8.22 18.99 7.82 18.36 7.4 17.71 C0 5.82 0 5.82 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(798,309)\"})),_path1690||(_path1690=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.22 0.33 9.38 3.39 13 7 C13 7.99 13 8.98 13 10 C8.85 9.39 5.54 8.28 2 6 C0.62 2.81 0.62 2.81 0 0 Z \",fill:\"#311640\",transform:\"translate(791,253)\"})),_path1691||(_path1691=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.99 2.66 1.98 3 3 C4.14 2.5 4.14 2.5 5.31 2 C8 1 8 1 11 1 C9.76 2.32 8.51 3.63 7.25 4.94 C6.55 5.67 5.86 6.4 5.14 7.15 C2.98 9.02 1.81 9.72 -1 10 C-1.66 9.67 -2.32 9.34 -3 9 C-2.5 5.27 -2.13 3.19 0 0 Z \",fill:\"#28103B\",transform:\"translate(527,150)\"})),_path1692||(_path1692=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.15 4.67 2.51 7 4 C6.01 4.5 6.01 4.5 5 5 C4.44 4.67 3.89 4.34 3.31 4 C-0.16 2.5 -2.39 3.05 -6 4 C-9.74 6.76 -10.84 8.24 -11.81 12.81 C-11.87 13.86 -11.94 14.92 -12 16 C-12.99 15.34 -13.98 14.68 -15 14 C-15.53 10.86 -15.31 9.46 -13.54 6.8 C-12.59 5.78 -12.59 5.78 -11.62 4.75 C-11 4.06 -10.37 3.38 -9.73 2.67 C-6.6 -0.35 -4.27 -0.4 0 0 Z \",fill:\"#472F6B\",transform:\"translate(856,118)\"})),_path1693||(_path1693=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.7 0.21 9.41 0.96 14 2 C13.34 3.65 12.68 5.3 12 7 C9.36 7 6.72 7 4 7 C3.67 6.01 3.34 5.02 3 4 C1 2.31 1 2.31 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#70577E\",transform:\"translate(1082,1273)\"})),_path1694||(_path1694=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.32 10.18 0.35 19.93 -1 30 C-2.32 30 -3.64 30 -5 30 C-4.47 25.46 -3.58 21.13 -2.5 16.69 C-1.18 11.13 -0.37 5.7 0 0 Z \",fill:\"#76597A\",transform:\"translate(1109,1250)\"})),_path1695||(_path1695=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.92 2.77 1.04 5.24 1 8.12 C0.71 11.8 0.71 11.8 2 14 C2.07 16.55 2.09 19.07 2.06 21.62 C2.06 22.33 2.05 23.04 2.05 23.77 C2.04 25.51 2.02 27.26 2 29 C1.34 28.67 0.68 28.34 0 28 C-0.23 25.8 -0.36 23.59 -0.44 21.38 C-0.73 15.43 -0.73 15.43 -2.62 9.88 C-4 7 -4 7 -3.88 4.75 C-2.87 2.74 -1.69 1.47 0 0 Z \",fill:\"#3E1D52\",transform:\"translate(609,1109)\"})),_path1696||(_path1696=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.06 0.25 10.71 2.4 16 7 C15.67 7.99 15.34 8.98 15 10 C11.44 8.69 8.4 7.12 5.25 5 C4.47 4.48 3.69 3.97 2.89 3.44 C1 2 1 2 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(912,683)\"})),_path1697||(_path1697=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.83 0.45 7.76 1.29 11 5 C11.72 8.06 11.86 10.83 12 14 C18.93 16.97 18.93 16.97 26 20 C20.43 21.39 16.98 19.61 12 17 C8.76 14.08 8.1 12.7 7.5 8.38 C7.35 4.97 7.35 4.97 5.12 3.19 C4.42 2.8 3.72 2.4 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#482859\",transform:\"translate(1061,649)\"})),_path1698||(_path1698=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8 1.05 8 1.05 10.88 4.18 C10.88 4.84 10.88 5.5 10.88 6.18 C4.67 6.51 0.6 5.63 -5.12 3.18 C-3.46 1.13 -2.69 0.23 0 0 Z \",fill:\"#80719D\",transform:\"translate(705.12109375,556.8203125)\"})),_path1699||(_path1699=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.41 3.72 2.41 3.72 2.62 7.06 C2.7 8.17 2.77 9.27 2.85 10.41 C2.9 11.26 2.95 12.12 3 13 C2.01 12.01 1.02 11.02 0 10 C-0.33 11.65 -0.66 13.3 -1 15 C-3.25 12.95 -4 11.99 -5 9 C-4.04 5.17 -3.09 2.53 0 0 Z \",fill:\"#351447\",transform:\"translate(870,547)\"})),_path1700||(_path1700=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C1.45 3.94 -1.01 5.98 -4.25 8.62 C-5.65 9.79 -5.65 9.79 -7.08 10.98 C-10.02 13.01 -12.57 14.06 -16 15 C-13.43 10.47 -11.36 8.36 -6.74 6.01 C-4.68 4.91 -4.68 4.91 -2.25 2.25 C-1.51 1.51 -0.76 0.76 0 0 Z \",fill:\"#867396\",transform:\"translate(880,399)\"})),_path1701||(_path1701=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4 2 C3.83 6.49 3.43 8.51 0.44 11.94 C-0.37 12.62 -1.17 13.3 -2 14 C-3.12 12.33 -3.12 12.33 -4 10 C-3.32 7.42 -3.32 7.42 -2.12 4.75 C-1.74 3.86 -1.35 2.97 -0.95 2.05 C-0.63 1.37 -0.32 0.7 0 0 Z \",fill:\"#7D6790\",transform:\"translate(868,373)\"})),_path1702||(_path1702=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.72 1.92 2.44 1.83 3.19 1.75 C6 2 6 2 8.56 4.06 C10.79 6.3 10.79 6.3 13.31 5.75 C14.15 5.38 14.15 5.38 15 5 C15.33 6.32 15.66 7.64 16 9 C14.54 9.22 13.08 9.43 11.62 9.62 C10.81 9.74 10 9.86 9.16 9.98 C8.45 9.98 7.74 9.99 7 10 C6.34 9.34 5.68 8.68 5 8 C3.67 7.32 2.34 6.65 1 6 C0 5 0 5 -0.06 2.44 C-0.04 1.63 -0.02 0.83 0 0 Z \",fill:\"#58395F\",transform:\"translate(871,346)\"})),_path1703||(_path1703=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.47 1.12 2.47 1.12 5 3 C5.56 5.85 5.56 5.85 5.44 9.06 C5.42 10.13 5.39 11.19 5.37 12.29 C5 15 5 15 3 17 C1.68 17 0.36 17 -1 17 C-1.33 15.02 -1.66 13.04 -2 11 C-1.01 10.67 -0.02 10.34 1 10 C1.66 9.67 2.32 9.34 3 9 C2.01 6.03 1.02 3.06 0 0 Z \",fill:\"#2F163B\",transform:\"translate(853,330)\"})),_path1704||(_path1704=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.97 6.24 -0.55 12.25 -3.2 17.96 C-4.97 22.48 -5.91 27.29 -7 32 C-7.33 32 -7.66 32 -8 32 C-8 28.04 -8 24.08 -8 20 C-7.34 20 -6.68 20 -6 20 C-5.39 17.63 -4.84 15.26 -4.32 12.87 C-4.07 11.74 -3.82 10.6 -3.56 9.44 C-3.32 8.3 -3.07 7.17 -2.82 6 C-2 3 -2 3 0 0 Z \",fill:\"#29103B\",transform:\"translate(452,321)\"})),_path1705||(_path1705=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.62 2.88 0.62 2.88 1 6 C0.34 6.66 -0.32 7.32 -1 8 C-3.16 7.98 -3.16 7.98 -5.62 7.62 C-6.44 7.51 -7.26 7.4 -8.1 7.29 C-8.73 7.19 -9.35 7.1 -10 7 C-10 6.01 -10 5.02 -10 4 C-3.38 0 -3.38 0 0 0 Z \",fill:\"#857295\",transform:\"translate(766,269)\"})),_path1706||(_path1706=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C-0.59 1.56 -2.88 1.05 -5.3 0.01 C-8.26 -1.1 -10.86 -1.51 -14 -1.81 C-15.01 -1.92 -16.02 -2.03 -17.06 -2.14 C-20.53 -1.97 -22.11 -0.84 -25 1 C-27.75 1.36 -30.21 1.14 -33 1 C-24.86 -7.14 -9.04 -5.55 0 0 Z \",fill:\"#07020D\",transform:\"translate(665,53)\"})),_path1707||(_path1707=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.32 1.66 3.77 5.41 4.94 8.75 C6.61 13.5 8.33 17.7 11 22 C11 22.66 11 23.32 11 24 C12.32 24.66 13.64 25.32 15 26 C15 27.65 15 29.3 15 31 C11.34 27.75 9.16 24.05 6.94 19.75 C6.59 19.08 6.24 18.41 5.88 17.72 C0 6.34 0 6.34 0 0 Z \",fill:\"#000002\",transform:\"translate(108,1195)\"})),_path1708||(_path1708=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.07 2.33 1.07 2.33 0.12 3.69 C-3.65 9.57 -4.43 14.54 -5 21.38 C-5.49 27.17 -6.21 32.46 -8 38 C-8.99 37.67 -9.98 37.34 -11 37 C-10.53 35.87 -10.05 34.73 -9.56 33.56 C-7.87 29.05 -7.36 24.78 -7 20 C-6.45 12.64 -5.76 5.25 0 0 Z \",fill:\"#48295F\",transform:\"translate(527,1121)\"})),_path1709||(_path1709=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-1.35 5.91 -2.8 6.94 -6.44 8 C-10.78 8 -11.83 6.79 -15 4 C-14.08 3.8 -13.17 3.59 -12.23 3.38 C-11.04 3.11 -9.85 2.84 -8.62 2.56 C-6.85 2.16 -6.85 2.16 -5.04 1.75 C-2.11 1.14 -2.11 1.14 0 0 Z \",fill:\"#0B133D\",transform:\"translate(883,995)\"})),_path1710||(_path1710=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C3.69 17.47 3.69 17.47 0 23 C-4.09 16.86 -1.75 8.85 -0.44 2.12 C-0.29 1.42 -0.15 0.72 0 0 Z \",fill:\"#251034\",transform:\"translate(572,862)\"})),_path1711||(_path1711=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 3.62 0.54 4.64 -1 8 C-1.66 8 -2.32 8 -3 8 C-3.09 8.71 -3.18 9.41 -3.28 10.14 C-4.14 13.56 -5.62 15.88 -7.56 18.81 C-8.2 19.79 -8.84 20.76 -9.5 21.77 C-10 22.51 -10.49 23.24 -11 24 C-11.99 23.67 -12.98 23.34 -14 23 C-13.34 23 -12.68 23 -12 23 C-12 21.68 -12 20.36 -12 19 C-12 17.68 -12 16.36 -12 15 C-11.43 14.81 -10.86 14.61 -10.27 14.41 C-7.07 12.42 -5.59 9.56 -3.75 6.38 C-3.39 5.76 -3.02 5.15 -2.65 4.52 C-1.76 3.02 -0.88 1.51 0 0 Z \",fill:\"#38154A\",transform:\"translate(545,777)\"})),_path1712||(_path1712=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.07 4.69 4.45 9.98 5 16 C4.62 19.75 4.62 19.75 4 23 C3.91 25.67 3.95 28.32 4 31 C3.67 31 3.34 31 3 31 C2.5 26.58 2 22.17 1.5 17.75 C1.36 16.5 1.21 15.24 1.07 13.95 C0.86 12.14 0.86 12.14 0.66 10.3 C0.53 9.19 0.4 8.08 0.28 6.93 C0 4 0 4 0 0 Z \",fill:\"#381946\",transform:\"translate(1221,744)\"})),_path1713||(_path1713=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6 3.2 0.2 5.68 -0.83 8.98 C-3 14.6 -6.01 19.78 -9 25 C-9.33 24.34 -9.66 23.68 -10 23 C-9.26 21.08 -9.26 21.08 -8.12 18.81 C-6.26 14.83 -5.58 11.37 -5 7 C-2.56 1.28 -2.56 1.28 0 0 Z \",fill:\"#381848\",transform:\"translate(350,723)\"})),_path1714||(_path1714=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C3.66 2.33 4.32 2.66 5 3 C3.72 4.67 2.42 6.34 1.12 8 C0.41 8.93 -0.31 9.86 -1.05 10.81 C-1.7 11.53 -2.34 12.26 -3 13 C-3.66 13 -4.32 13 -5 13 C-5.33 14.65 -5.66 16.3 -6 18 C-6.66 18 -7.32 18 -8 18 C-6.52 11.35 -3.38 5.88 0 0 Z \",fill:\"#401F4B\",transform:\"translate(375,575)\"})),_path1715||(_path1715=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3 2.66 3 3.32 3 4 C0.73 5.98 0.73 5.98 -2.25 8.19 C-3.22 8.92 -4.2 9.66 -5.2 10.42 C-8 12 -8 12 -10.36 11.74 C-10.9 11.49 -11.44 11.25 -12 11 C-12 10.34 -12 9.68 -12 9 C-10.03 7.38 -8.07 5.86 -6 4.38 C-5.43 3.95 -4.86 3.53 -4.27 3.1 C-2.85 2.06 -1.42 1.03 0 0 Z \",fill:\"#523F5A\",transform:\"translate(770,564)\"})),_path1716||(_path1716=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12 0 2.12 0 5 1 C7.25 3.5 9.14 6.2 11 9 C10.67 9.66 10.34 10.32 10 11 C7.94 11.62 7.94 11.62 6 12 C5.77 11.05 5.55 10.1 5.31 9.12 C4.31 5.81 4.31 5.81 1.38 4.62 C0.59 4.42 -0.19 4.21 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#322537\",transform:\"translate(528,440)\"})),_path1717||(_path1717=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.85 0.01 1.85 0.01 3.73 0.01 C6.81 0.31 6.81 0.31 8.81 2.31 C7.94 2.29 7.07 2.27 6.18 2.24 C5.03 2.22 3.87 2.21 2.69 2.19 C1.55 2.16 0.41 2.14 -0.76 2.12 C-4.28 2.32 -6.95 2.94 -10.19 4.31 C-11.3 6.54 -11.35 7.84 -11.38 10.31 C-11.39 11.01 -11.4 11.71 -11.42 12.44 C-11.35 14.56 -11.35 14.56 -9.19 16.31 C-10.84 15.98 -12.49 15.65 -14.19 15.31 C-15.21 12.17 -15.2 10.35 -14.06 7.25 C-13.83 6.58 -13.6 5.91 -13.37 5.21 C-10.2 0.12 -5.56 -0.08 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(593.1875,404.6875)\"})),_path1718||(_path1718=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.66 4 3.32 4 4 4 C4 4.66 4 5.32 4 6 C3.01 6 2.02 6 1 6 C1 6.99 1 7.98 1 9 C6.94 9.99 6.94 9.99 13 11 C13 11.99 13 12.98 13 14 C12.45 13.83 11.89 13.67 11.32 13.5 C8.74 12.94 6.45 12.94 3.81 13 C2.21 13.04 0.6 13.05 -1 13 C-2 12 -2 12 -2.19 8.19 C-2.16 4.96 -1.83 2.74 0 0 Z \",fill:\"#291137\",transform:\"translate(932,331)\"})),_path1719||(_path1719=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.43 -0.39 4.73 -0.19 7.62 1.81 C9.46 3.51 11.28 5.19 13 7 C9.88 8.31 9.88 8.31 6 9 C3.25 7.72 2.09 6.35 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#2E2132\",transform:\"translate(616,300)\"})),_path1720||(_path1720=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28 3.83 0.53 5.44 -0.91 9.08 C-2.57 12.01 -5.19 13.24 -8 15 C-9.89 18.1 -9.89 18.1 -11 21 C-11.33 21 -11.66 21 -12 21 C-12.51 16.29 -11.09 14.19 -8.25 10.5 C-7.55 9.58 -6.86 8.66 -6.14 7.72 C-4.11 5.14 -2.06 2.56 0 0 Z \",fill:\"#442150\",transform:\"translate(504,283)\"})),_path1721||(_path1721=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.37 1.2 -0.74 2.39 -1.12 3.62 C-2.16 7.65 -1.73 10.15 0 14 C-2.97 12.8 -4.66 11.76 -6 8.8 C-6.74 6.54 -7.41 4.29 -8 2 C-4.77 -0.15 -3.72 -0.2 0 0 Z \",fill:\"#755A7C\",transform:\"translate(637,266)\"})),_path1722||(_path1722=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 0.25 1.14 0.25 2.31 0.5 C5.01 1 6.44 0.85 9 0 C8.34 2.31 7.68 4.62 7 7 C3.67 8.11 1.38 7.84 -2 7 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#1C1420\",transform:\"translate(609,257)\"})),_path1723||(_path1723=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-1.83 3.31 -2.65 3.62 -3.5 3.94 C-4.33 4.29 -5.15 4.64 -6 5 C-6.89 7.04 -6.89 7.04 -7 9 C-7.62 9.12 -8.24 9.25 -8.88 9.38 C-11.19 9.87 -11.19 9.87 -13 12 C-13.42 14.5 -13.42 14.5 -13 17 C-12.01 17.66 -11.02 18.32 -10 19 C-12.38 19.12 -12.38 19.12 -15 19 C-15.66 18.34 -16.32 17.68 -17 17 C-16.67 11.66 -13.83 9.38 -10.14 5.87 C-3.43 0 -3.43 0 0 0 Z \",fill:\"#2C123E\",transform:\"translate(609,76)\"})),_path1724||(_path1724=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.97 2.2 2.95 3.5 3.25 6.47 C3.16 7.82 3.16 7.82 3.07 9.2 C2.99 10.67 2.99 10.67 2.91 12.17 C2.84 13.19 2.76 14.2 2.69 15.25 C2.63 16.28 2.57 17.31 2.5 18.38 C2.35 20.92 2.18 23.46 2 26 C1.67 26 1.34 26 1 26 C1 23.69 1 21.38 1 19 C0.34 19 -0.32 19 -1 19 C-1.03 16.4 -1.05 13.79 -1.06 11.19 C-1.07 10.45 -1.08 9.71 -1.09 8.95 C-1.1 5.7 -1.04 3.11 0 0 Z \",fill:\"#42204C\",transform:\"translate(666,1125)\"})),_path1725||(_path1725=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.31 0.64 0.62 1.28 0.94 1.94 C1.83 3.94 1.83 3.94 3 5 C3.24 7.86 3.42 10.7 3.56 13.56 C3.61 14.37 3.65 15.18 3.69 16.01 C3.8 18 3.9 20 4 22 C3.01 21.67 2.02 21.34 1 21 C-0.28 17.16 -0.4 13.39 -0.62 9.38 C-0.68 8.59 -0.73 7.8 -0.78 6.98 C-0.9 4.99 -0.95 3 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#190D26\",transform:\"translate(666,1107)\"})),_path1726||(_path1726=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.3 2.64 1.6 3.28 0.88 3.94 C-2.14 6.92 -4.31 10.34 -6.57 13.91 C-7.9 15.86 -9.28 17.4 -11 19 C-10.67 18.03 -10.34 17.06 -10 16.06 C-8.95 13.38 -8.95 13.38 -9 12 C-9 8.46 -8.28 7.64 -6.19 4.88 C-5.67 4.17 -5.14 3.47 -4.61 2.74 C-3 1 -3 1 0 0 Z \",fill:\"#311541\",transform:\"translate(134,1104)\"})),_path1727||(_path1727=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.4 7.24 -1.08 14 -3 21 C-3.26 21.96 -3.52 22.93 -3.79 23.92 C-5.73 30.73 -5.73 30.73 -8 33 C-9.77 29.46 -8.06 25.67 -7 22 C-6.06 19.55 -5.04 17.13 -4.02 14.71 C-2.22 9.93 -1.13 4.97 0 0 Z \",fill:\"#31163F\",transform:\"translate(375,1080)\"})),_path1728||(_path1728=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.73 -0 1.47 -0.01 2.22 -0.01 C6.81 -0 11.16 0.37 15.69 1.12 C12.25 3.22 9.59 3.36 5.61 3.32 C3.87 3.31 3.87 3.31 2.09 3.3 C0.89 3.28 -0.32 3.27 -1.56 3.25 C-3.4 3.24 -3.4 3.24 -5.27 3.22 C-8.28 3.2 -11.3 3.17 -14.31 3.12 C-10.38 -0.8 -5.27 -0.03 0 0 Z \",fill:\"#000002\",transform:\"translate(167.3125,1090.875)\"})),_path1729||(_path1729=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.33 1.32 5.66 2.64 6 4 C6.66 4 7.32 4 8 4 C7.31 5.94 7.31 5.94 6 8 C3.56 8.88 3.56 8.88 1 9 C0.01 8.34 -0.98 7.68 -2 7 C-2 6.34 -2 5.68 -2 5 C-1.34 5 -0.68 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#0B113F\",transform:\"translate(894,1085)\"})),_path1730||(_path1730=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.55 3.06 4.75 5.46 5.81 10 C6.07 11.03 6.32 12.06 6.58 13.12 C6.98 15.86 6.91 17.43 6 20 C4.79 17.8 3.61 15.59 2.44 13.38 C1.92 12.45 1.92 12.45 1.4 11.5 C-0.82 7.24 -1.3 4.63 0 0 Z \",fill:\"#381A43\",transform:\"translate(566,1074)\"})),_path1731||(_path1731=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.62 -0.58 15.1 0.74 23 6 C19.54 5.78 16.08 5.52 12.62 5.25 C11.64 5.19 10.66 5.13 9.64 5.06 C8.7 4.99 7.76 4.91 6.79 4.83 C5.49 4.73 5.49 4.73 4.15 4.64 C2 4 2 4 0.7 1.95 C0.47 1.31 0.24 0.66 0 0 Z \",fill:\"#836B8B\",transform:\"translate(1135,1035)\"})),_path1732||(_path1732=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.25 4.28 11.02 7.92 12.88 15.62 C13 18.91 12.82 20.33 11 23 C11.02 21.91 11.04 20.81 11.06 19.69 C10.43 14.03 6.72 10.6 3.03 6.52 C1.15 4.18 0.38 2.92 0 0 Z \",fill:\"#45224F\",transform:\"translate(581,1031)\"})),_path1733||(_path1733=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8 3.97 8 6.94 8 10 C5.03 9.5 5.03 9.5 2 9 C2.33 8.01 2.66 7.02 3 6 C1.68 5.34 0.36 4.68 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#290E3D\",transform:\"translate(1272,1006)\"})),_path1734||(_path1734=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.32 0.94 4.71 1.55 6.62 4.5 C7.03 5.47 7.45 6.44 7.88 7.44 C8.31 8.41 8.74 9.37 9.18 10.37 C10 13 10 13 9 16 C8.67 15.34 8.34 14.68 8 14 C5.98 12.87 5.98 12.87 4 12 C4 10.68 4 9.36 4 8 C3.01 7.67 2.02 7.34 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#2F163C\",transform:\"translate(318,944)\"})),_path1735||(_path1735=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.98 2 3.96 2 6 2 C3.43 4.57 1.52 4.54 -2 5 C-2 5.66 -2 6.32 -2 7 C-4.64 7 -7.28 7 -10 7 C-10 6.67 -10 6.34 -10 6 C-8.35 5.67 -6.7 5.34 -5 5 C-6.32 4.67 -7.64 4.34 -9 4 C-8 1 -8 1 -5.62 -0.25 C-3 -1 -3 -1 0 0 Z \",fill:\"#0B123D\",transform:\"translate(1142,899)\"})),_path1736||(_path1736=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 0.62 1.88 0.62 4 2 C5.88 6.04 6.26 8.73 5 13 C2.63 12.05 1.25 11.35 -0.25 9.25 C-1.2 6.4 -1.2 3.99 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0A123C\",transform:\"translate(677,852)\"})),_path1737||(_path1737=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2.33 2.32 2.66 3 3 C1.98 2.91 1.98 2.91 0.94 2.81 C-2.1 3.01 -4.17 3.87 -6.91 5.13 C-12.94 7.64 -19.43 9.53 -26 9 C-26 9.66 -26 10.32 -26 11 C-26.99 10.67 -27.98 10.34 -29 10 C-29.69 7.94 -29.69 7.94 -30 6 C-28.68 5.34 -27.36 4.68 -26 4 C-25.67 4.99 -25.34 5.98 -25 7 C-20.41 6.45 -16.35 5.56 -12 4 C-10.44 3.48 -8.88 2.96 -7.31 2.44 C-6.57 2.19 -5.82 1.94 -5.05 1.68 C-3.37 1.12 -1.68 0.56 0 0 Z \",fill:\"#0E0F3A\",transform:\"translate(792,789)\"})),_path1738||(_path1738=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.47 1.75 10.76 3.66 16 6 C16 6.99 16 7.98 16 9 C16.66 9.33 17.32 9.66 18 10 C11.35 9.09 5.04 7.75 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#42204C\",transform:\"translate(1175,627)\"})),_path1739||(_path1739=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.01 1.99 0.02 3.01 0.03 C4.15 0.04 4.15 0.04 5.31 0.06 C5.64 1.05 5.97 2.04 6.31 3.06 C4.88 3.57 3.44 4.07 2 4.56 C0.8 4.98 0.8 4.98 -0.43 5.41 C-2.69 6.06 -2.69 6.06 -5.69 6.06 C-5.69 5.4 -5.69 4.74 -5.69 4.06 C-6.68 3.73 -7.67 3.4 -8.69 3.06 C-8.69 2.4 -8.69 1.74 -8.69 1.06 C-5.54 0.01 -3.3 -0.04 0 0 Z \",fill:\"#18121C\",transform:\"translate(674.6875,619.9375)\"})),_path1740||(_path1740=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5 2.99 5 3.98 5 5 C5.6 5.23 6.2 5.45 6.81 5.69 C9 7 9 7 10.38 9.31 C12.05 12.09 13.92 13.74 16.45 15.74 C19.82 18.48 22.59 21.39 25 25 C14.82 20.54 5.43 9.51 0 0 Z \",fill:\"#381947\",transform:\"translate(939,602)\"})),_path1741||(_path1741=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.53 7.1 1.85 11.62 -1.48 18.07 C-3.24 20.3 -4.23 20.66 -7 21 C-6.74 16.6 -6.4 14.47 -3.5 11.06 C-0.3 7.15 -0.26 4.95 0 0 Z \",fill:\"#755B7C\",transform:\"translate(594,581)\"})),_path1742||(_path1742=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.04 1.66 5.58 3.48 8.12 5.81 C12.57 9.75 17.74 12.32 23 15 C23 15.66 23 16.32 23 17 C24.46 18.63 24.46 18.63 26 20 C21.82 18.91 19 17.43 15.77 14.56 C13.53 12.59 11.21 10.74 8.88 8.88 C8.05 8.21 7.22 7.55 6.37 6.87 C4.84 5.66 3.29 4.5 1.7 3.38 C1.14 2.93 0.58 2.47 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A1849\",transform:\"translate(1011,577)\"})),_path1743||(_path1743=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.38 1.99 0.71 3.99 1 6 C0 7 0 7 -3.06 7.06 C-4.03 7.04 -5 7.02 -6 7 C-6 6.34 -6 5.68 -6 5 C-6.66 4.67 -7.32 4.34 -8 4 C-7.67 3.34 -7.34 2.68 -7 2 C-7.99 2.33 -8.98 2.66 -10 3 C-10 2.01 -10 1.02 -10 0 C-6.31 -1.23 -3.79 -0.64 0 0 Z \",fill:\"#241B28\",transform:\"translate(712,262)\"})),_path1744||(_path1744=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.58 5.43 11.21 11.22 13 19 C12.01 19.99 11.02 20.98 10 22 C8 18.17 6.52 14.19 5 10.14 C4.2 7.84 4.2 7.84 2 7 C1.27 4.69 0.6 2.35 0 0 Z \",fill:\"#311640\",transform:\"translate(836,222)\"})),_path1745||(_path1745=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.41 0.38 7.46 1.99 11 6 C12.14 7.14 12.14 7.14 13.31 8.31 C13.87 8.87 14.43 9.43 15 10 C14.67 10.66 14.34 11.32 14 12 C13.42 11.34 12.85 10.68 12.25 10 C10 7.56 10 7.56 6 8 C5.67 8.66 5.34 9.32 5 10 C4.16 8.9 3.33 7.8 2.5 6.69 C2.04 6.07 1.57 5.46 1.09 4.82 C0 3 0 3 0 0 Z \",fill:\"#2F163D\",transform:\"translate(830,212)\"})),_path1746||(_path1746=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.91 0.24 3.81 0.48 5.71 0.73 C7.16 0.9 8.61 1.04 10.07 1.15 C15.4 1.59 18.6 3.16 23 6 C23 6.33 23 6.66 23 7 C8.7 5.51 8.7 5.51 4 3 C2.68 2.63 1.34 2.29 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#090E36\",transform:\"translate(1054,764)\"})),_path1747||(_path1747=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.01 3.8 2.01 3.8 1 4.62 C-1.31 6.9 -1.31 6.9 -1.25 10.25 C-1.17 11.16 -1.09 12.07 -1 13 C1.97 13.5 1.97 13.5 5 14 C5 14.66 5 15.32 5 16 C4.34 16 3.68 16 3 16 C3 16.66 3 17.32 3 18 C0.98 17.4 -1.02 16.73 -3 16 C-4.4 13.21 -3.97 11.1 -3.75 8 C-3.68 6.93 -3.62 5.86 -3.55 4.75 C-3.37 3.84 -3.19 2.93 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#351547\",transform:\"translate(583,687)\"})),_path1748||(_path1748=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.63 1.52 4.84 2.84 7 5 C7.27 7.69 7.09 10.29 7 13 C6.01 13.33 5.02 13.66 4 14 C-0.08 8.68 -0.08 8.68 0.31 5.31 C0.54 4.55 0.77 3.79 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#311939\",transform:\"translate(1199,688)\"})),_path1749||(_path1749=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C2.32 2.67 3.64 2.34 5 2 C7.41 5.51 8.37 7.73 8 12 C7.34 12 6.68 12 6 12 C5.67 11.34 5.34 10.68 5 10 C4.34 10.66 3.68 11.32 3 12 C0.89 10.29 0.06 9.48 -0.29 6.74 C-0.26 5.94 -0.22 5.14 -0.19 4.31 C-0.16 3.5 -0.13 2.7 -0.11 1.86 C-0.07 1.25 -0.04 0.63 0 0 Z \",fill:\"#391A45\",transform:\"translate(860,554)\"})),_path1750||(_path1750=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2 0 2 -1.21 3.3 C-5.31 6.75 -9.53 9.76 -14.08 12.61 C-16.27 14.02 -16.27 14.02 -18 17 C-18.99 17 -19.98 17 -21 17 C-18.04 11.08 -13.58 7.8 -8.09 4.39 C-5.97 3.09 -5.97 3.09 -4.41 1.32 C-3 0 -3 0 0 0 Z \",fill:\"#401E54\",transform:\"translate(941,539)\"})),_path1751||(_path1751=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.73 6.15 -0.82 10.54 -3.5 15.88 C-3.93 16.75 -4.36 17.63 -4.8 18.54 C-5.86 20.7 -6.92 22.85 -8 25 C-8.94 21.68 -8.95 20.02 -7.75 16.75 C-7.47 15.97 -7.18 15.19 -6.89 14.38 C-6.45 13.2 -6.45 13.2 -6 12 C-5.62 10.9 -5.62 10.9 -5.23 9.78 C-3.94 6.09 -2.66 2.9 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(395,530)\"})),_path1752||(_path1752=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.66 10 2.32 10 3 C10.66 3 11.32 3 12 3 C11.67 4.32 11.34 5.64 11 7 C7.95 7.93 6.58 8.3 3.69 6.81 C2 5 2 5 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#593960\",transform:\"translate(600,514)\"})),_path1753||(_path1753=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.03 3.04 2.05 5.08 2.06 7.12 C2.07 8.26 2.09 9.4 2.1 10.57 C2.01 13.81 1.61 16.82 1 20 C-1.38 15.74 -3.21 11.24 -2.75 6.31 C-2.02 4.06 -1.15 2.07 0 0 Z \",fill:\"#514441\",transform:\"translate(858,435)\"})),_path1754||(_path1754=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 4.62 1.66 9.24 2 14 C1.34 14 0.68 14 0 14 C-0.33 16.31 -0.66 18.62 -1 21 C-2.32 20.67 -3.64 20.34 -5 20 C-5 18.68 -5 17.36 -5 16 C-4.01 15.34 -3.02 14.68 -2 14 C-1.95 11.67 -1.96 9.33 -2 7 C-1.48 4.59 -0.77 2.35 0 0 Z \",fill:\"#1E0D31\",transform:\"translate(511,385)\"})),_path1755||(_path1755=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C6.3 9.91 6.3 9.91 4 16 C1.19 13.72 0.08 12.64 -0.39 8.98 C-0.34 7.92 -0.3 6.85 -0.25 5.75 C-0.21 4.67 -0.18 3.59 -0.14 2.48 C-0.09 1.66 -0.05 0.84 0 0 Z \",fill:\"#150A1E\",transform:\"translate(513,374)\"})),_path1756||(_path1756=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.03 11.18 2.03 11.18 1.88 15.69 C2.04 20.13 3.43 23.87 5 28 C-0.53 22.76 -0.53 22.76 -2 19 C-2.01 16.99 -2.01 16.99 -1.69 14.88 C-1.58 14.1 -1.47 13.33 -1.36 12.53 C-1.24 11.69 -1.12 10.86 -1 10 C-0.8 8.15 -0.62 6.29 -0.44 4.44 C-0.35 3.59 -0.27 2.74 -0.18 1.87 C-0.12 1.25 -0.06 0.64 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(886,365)\"})),_path1757||(_path1757=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.71 0.33 1.42 0.65 2.15 0.99 C5.17 2.06 7.38 2.24 10.56 2.19 C11.49 2.18 12.42 2.17 13.38 2.17 C15.73 2.02 17.75 1.66 20 1 C20.33 2.32 20.66 3.64 21 5 C15.77 6.39 8.94 7.61 4.02 4.92 C2.38 3.56 2.38 3.56 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#715376\",transform:\"translate(806,317)\"})),_path1758||(_path1758=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17 0.15 1.17 0.15 2.37 0.3 C4.79 0.66 7.18 1.09 9.56 1.62 C9.56 1.95 9.56 2.29 9.56 2.62 C4.28 2.3 -1 1.96 -6.44 1.62 C-6.44 2.29 -6.44 2.94 -6.44 3.62 C-17 5.14 -17 5.14 -21.44 2.62 C-21.44 2.3 -21.44 1.96 -21.44 1.62 C-20.55 1.56 -19.65 1.5 -18.73 1.44 C-16.98 1.32 -16.98 1.32 -15.19 1.19 C-14.03 1.11 -12.87 1.03 -11.67 0.94 C-8.59 0.73 -8.59 0.73 -6.29 0.07 C-4.05 -0.47 -2.29 -0.29 0 0 Z \",fill:\"#7C6182\",transform:\"translate(663.4375,282.375)\"})),_path1759||(_path1759=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.11 3.36 7.95 6.6 11 11 C11 11.66 11 12.32 11 13 C6.09 12.85 3.54 10.24 0.32 6.86 C-1 5 -1 5 -0.94 2.06 C-0.63 1.38 -0.32 0.7 0 0 Z \",fill:\"#33183D\",transform:\"translate(713,144)\"})),_path1760||(_path1760=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.45 0.03 1.45 0.03 2.94 0.06 C2.94 0.39 2.94 0.72 2.94 1.06 C1.29 1.06 -0.36 1.06 -2.06 1.06 C-1.73 3.37 -1.4 5.68 -1.06 8.06 C-4.03 8.42 -6.22 8.6 -8.8 6.95 C-10.27 5.71 -11.67 4.39 -13.06 3.06 C-12.73 2.4 -12.4 1.74 -12.06 1.06 C-10.76 1.08 -9.46 1.1 -8.12 1.12 C-6.77 1.15 -5.41 1.13 -4.06 1.06 C-3.06 0.06 -3.06 0.06 0 0 Z \",fill:\"#251038\",transform:\"translate(693.0625,67.9375)\"})),_path1761||(_path1761=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.28 6.38 0.32 11.74 -1.38 17.88 C-1.6 18.73 -1.82 19.58 -2.05 20.46 C-3.73 26.73 -3.73 26.73 -6 29 C-5 19.22 -3.3 9.27 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(584,1175)\"})),_path1762||(_path1762=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.85 0.07 -1.85 0.07 -3.73 0.15 C-12.95 0.55 -21.94 1.14 -31 3 C-29.55 0.11 -27.82 -0.09 -24.81 -1.19 C-16.96 -3.72 -7.35 -4.36 0 0 Z \",fill:\"#000002\",transform:\"translate(203,1137)\"})),_path1763||(_path1763=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.56 2.5 1.56 5 4 C5.31 7.75 5.31 7.75 5 11 C2.43 10.51 0.67 9.81 -1.62 8.5 C-6.05 6.53 -10.21 6.27 -15 6 C-15 5.67 -15 5.34 -15 5 C-13.04 4.97 -11.08 4.95 -9.12 4.94 C-8.03 4.93 -6.94 4.91 -5.82 4.9 C-3 5 -3 5 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(293,927)\"})),_path1764||(_path1764=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.87 1.71 1.73 2.41 1.6 3.14 C-0.17 13.4 -0.61 23.62 -1 34 C-3 32 -3 32 -3.23 29.48 C-3.22 28.44 -3.21 27.4 -3.2 26.34 C-3.19 25.21 -3.18 24.09 -3.18 22.94 C-3.16 21.76 -3.14 20.59 -3.12 19.38 C-3.12 18.19 -3.11 17.01 -3.1 15.79 C-3.07 12.86 -3.04 9.93 -3 7 C-2.34 7 -1.68 7 -1 7 C-1.33 6.01 -1.66 5.02 -2 4 C-1.06 1.81 -1.06 1.81 0 0 Z \",fill:\"#000002\",transform:\"translate(283,835)\"})),_path1765||(_path1765=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.28 2.73 1.28 2.73 1 6 C-0.97 8.34 -0.97 8.34 -3.5 10.38 C-4.75 11.41 -4.75 11.41 -6.03 12.46 C-6.68 12.97 -7.33 13.48 -8 14 C-9.94 10.48 -10.18 8.03 -10 4 C-9.01 4.33 -8.02 4.66 -7 5 C-7 5.66 -7 6.32 -7 7 C-3.43 5.12 -1.45 3.83 0 0 Z \",fill:\"#0A123C\",transform:\"translate(1075,837)\"})),_path1766||(_path1766=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.78 0.58 8.73 1.75 13 4 C15 6.56 15 6.56 16 9 C15.67 9.66 15.34 10.32 15 11 C14.64 10.55 14.29 10.1 13.92 9.64 C11.27 7.38 8.64 6.77 5.31 5.81 C4.13 5.47 2.95 5.12 1.74 4.77 C0.38 4.39 0.38 4.39 -1 4 C-0.34 3.67 0.32 3.34 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(929,710)\"})),_path1767||(_path1767=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.91 0.25 -0.91 0.25 -1.84 0.5 C-11.82 4.2 -15.37 13.06 -20 22 C-21.26 18.23 -20.37 16.63 -19 13 C-18.34 13 -17.68 13 -17 13 C-17 11.68 -17 10.36 -17 9 C-16.34 8.34 -15.68 7.68 -15 7 C-14.22 6.17 -13.43 5.35 -12.62 4.5 C-9.32 1.35 -4.61 -2.31 0 0 Z \",fill:\"#715376\",transform:\"translate(710,644)\"})),_path1768||(_path1768=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C4.19 4.06 4.19 4.06 5 7 C3.02 7.66 1.04 8.32 -1 9 C-0.88 10.91 -0.88 10.91 0 13 C2.3 14.75 2.3 14.75 5.06 16.19 C6.72 17.11 8.37 18.04 10 19 C10 19.33 10 19.66 10 20 C5.75 19.75 3.52 19.43 0.19 16.69 C-1.62 14.47 -2.93 12.63 -4 10 C-3.17 9.22 -2.35 8.43 -1.5 7.62 C1.23 5.36 1.23 5.36 1 3 C0.34 2.34 -0.32 1.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2C123E\",transform:\"translate(560,559)\"})),_path1769||(_path1769=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 0.28 1.14 0.28 2.31 0.56 C5.09 1.23 5.09 1.23 8 0 C13.52 2.82 16.55 6.95 20 12 C18.06 11.19 18.06 11.19 16 10 C15.67 9.01 15.34 8.02 15 7 C14.34 7 13.68 7 13 7 C13 6.34 13 5.68 13 5 C11.35 4.67 9.7 4.34 8 4 C7.67 4.66 7.34 5.32 7 6 C4.06 5.25 4.06 5.25 1 4 C0.12 1.88 0.12 1.88 0 0 Z \",fill:\"#2C123E\",transform:\"translate(963,541)\"})),_path1770||(_path1770=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.15 0.61 7.41 1.82 11 4 C13.15 6.9 14.32 9.47 15 13 C15.19 13.74 15.37 14.49 15.56 15.25 C15.71 15.83 15.85 16.4 16 17 C12.96 14.14 10.43 11.28 8 7.88 C5.68 4.68 3.59 2.79 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#785979\",transform:\"translate(546,449)\"})),_path1771||(_path1771=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C4.29 8.43 4.29 8.43 3 12 C2.01 12 1.02 12 0 12 C-0.33 12.66 -0.66 13.32 -1 14 C-1.93 8.58 -2.21 5.2 0 0 Z \",fill:\"#47364F\",transform:\"translate(850,409)\"})),_path1772||(_path1772=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.62 1.94 0.62 4 2 C4.94 4.94 4.94 4.94 5 8 C3.56 9.88 3.56 9.88 2 11 C0.06 10.38 0.06 10.38 -2 9 C-2.94 6.06 -2.94 6.06 -3 3 C-1.56 1.12 -1.56 1.12 0 0 Z \",fill:\"#231A26\",transform:\"translate(533,379)\"})),_path1773||(_path1773=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46 0.14 2.92 0.29 4.38 0.44 C5.59 0.56 5.59 0.56 6.84 0.68 C9 1 9 1 11 2 C16.9 2.37 22.26 1.29 28 0 C27 2 27 2 24.79 2.82 C23.44 3.19 23.44 3.19 22.06 3.56 C18.44 4.55 18.44 4.55 15 6 C12.67 6.04 10.33 6.04 8 6 C8.33 5.34 8.66 4.68 9 4 C4.9 2.98 4.9 2.98 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#3B184B\",transform:\"translate(793,239)\"})),_path1774||(_path1774=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.45 2.9 0.45 4.56 -0.44 7.62 C-0.72 8.63 -1.01 9.63 -1.31 10.66 C-1.65 11.82 -1.65 11.82 -2 13 C-3.32 13 -4.64 13 -6 13 C-6.81 10.38 -6.81 10.38 -7 7 C-5.28 4.01 -3.13 1.56 0 0 Z \",fill:\"#241038\",transform:\"translate(577,107)\"})),_path1775||(_path1775=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.06 4.62 0.06 4.62 -1 7 C-1.66 7 -2.32 7 -3 7 C-3 7.66 -3 8.32 -3 9 C-6.56 11.62 -9.64 12.49 -14 13 C-14 11.35 -14 9.7 -14 8 C-13.38 8.21 -12.76 8.41 -12.12 8.62 C-11.07 8.81 -11.07 8.81 -10 9 C-9.34 8.34 -8.68 7.68 -8 7 C-4.31 4 -4.31 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#321541\",transform:\"translate(567,1237)\"})),_path1776||(_path1776=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.21 1.53 0.41 2.31 0.62 C2.31 2.61 2.31 4.59 2.31 6.62 C-1.15 8.11 -1.15 8.11 -4.69 9.62 C-5.02 6.98 -5.35 4.35 -5.69 1.62 C-2.69 -0.38 -2.69 -0.38 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(1040.6875,1074.375)\"})),_path1777||(_path1777=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.12 1.34 4.85 2.67 6.81 5.44 C7.25 6.03 7.69 6.63 8.14 7.25 C9 9 9 9 8 12 C7.67 12 7.34 12 7 12 C6.67 13.98 6.34 15.96 6 18 C3.72 14.57 2.87 11.24 1.88 7.31 C1.69 6.61 1.51 5.91 1.32 5.19 C0.88 3.46 0.44 1.73 0 0 Z \",fill:\"#2F163C\",transform:\"translate(365,1028)\"})),_path1778||(_path1778=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-6.07 2.77 -11.89 3.1 -18 3 C-17.06 1.06 -17.06 1.06 -15 -1 C-9.65 -2.5 -5.12 -2.23 0 0 Z \",fill:\"#7C5B7B\",transform:\"translate(723,799)\"})),_path1779||(_path1779=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.23 0.65 7.75 2.08 11.62 3.88 C12.75 4.39 13.88 4.9 15.04 5.43 C17.57 6.77 19.17 7.84 21 10 C20.01 10 19.02 10 18 10 C17.67 10.66 17.34 11.32 17 12 C16.44 11.62 15.89 11.25 15.31 10.86 C10.74 7.8 6.15 4.82 1.43 1.98 C0.96 1.66 0.49 1.33 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#230F34\",transform:\"translate(1117,786)\"})),_path1780||(_path1780=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.25 2.37 1.48 4.75 1.69 7.12 C1.76 7.79 1.83 8.46 1.91 9.14 C2.31 13.96 1.49 16.88 -1 21 C-1.33 21 -1.66 21 -2 21 C-2.05 18.06 -2.09 15.13 -2.12 12.19 C-2.14 11.35 -2.16 10.52 -2.18 9.66 C-2.18 8.86 -2.19 8.06 -2.2 7.23 C-2.21 6.49 -2.22 5.75 -2.23 4.99 C-2 3 -2 3 0 0 Z \",fill:\"#80719D\",transform:\"translate(717,570)\"})),_path1781||(_path1781=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.36 2.15 3.58 4.17 5 7 C5.66 7.33 6.32 7.66 7 8 C7.63 10.07 7.63 10.07 8.12 12.56 C8.29 13.39 8.46 14.22 8.63 15.07 C8.75 15.7 8.88 16.34 9 17 C6.62 17.19 6.62 17.19 4 17 C1.76 13.63 1.95 12 2.06 8.07 C1.97 5.15 1.08 2.69 0 0 Z \",fill:\"#43214E\",transform:\"translate(1018,517)\"})),_path1782||(_path1782=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.43 5.27 1.43 5.27 1 8 C-1.64 10.42 -3.26 10.95 -6.81 11.19 C-7.53 11.13 -8.26 11.06 -9 11 C-9.33 9.02 -9.66 7.04 -10 5 C-9.01 5.33 -8.02 5.66 -7 6 C-6.01 5.01 -5.02 4.02 -4 3 C-3.67 3.66 -3.34 4.32 -3 5 C-2.01 5 -1.02 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#28142E\",transform:\"translate(897,443)\"})),_path1783||(_path1783=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -3.33 4.42 C-4.77 5.08 -4.77 5.08 -6.25 5.75 C-7.68 6.42 -7.68 6.42 -9.14 7.11 C-12.26 8.08 -13.91 7.93 -17 7 C-17 6.34 -17 5.68 -17 5 C-15.11 4.16 -13.21 3.32 -11.31 2.5 C-10.26 2.04 -9.2 1.57 -8.11 1.09 C-5.14 0.05 -3.11 -0.23 0 0 Z \",fill:\"#150F18\",transform:\"translate(663,375)\"})),_path1784||(_path1784=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 2 3.64 2 5 2 C5.18 5.95 5.09 8.6 3 12 C1.68 11.67 0.36 11.34 -1 11 C-2.26 6.71 -1.63 4.12 0 0 Z \",fill:\"#0D0A12\",transform:\"translate(682,342)\"})),_path1785||(_path1785=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.01 5.63 1.02 9.26 0 13 C-1.32 13.33 -2.64 13.66 -4 14 C-3.66 8.62 -3.31 4.47 0 0 Z \",fill:\"#291C2D\",transform:\"translate(863,310)\"})),_path1786||(_path1786=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.75 0.88 5.75 0.88 8 2 C8 2.66 8 3.32 8 4 C10.64 4.66 13.28 5.32 16 6 C16 6.33 16 6.66 16 7 C11.54 7.5 11.54 7.5 7 8 C6.67 7.01 6.34 6.02 6 5 C0.06 4.01 0.06 4.01 -6 3 C-6 2.67 -6 2.34 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#634369\",transform:\"translate(649,296)\"})),_path1787||(_path1787=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.85 2.91 1.07 5.31 0.88 8.33 C0.83 9.13 0.78 9.93 0.73 10.75 C0.68 11.57 0.62 12.4 0.56 13.25 C0.51 14.09 0.46 14.93 0.4 15.8 C0.28 17.86 0.14 19.93 0 22 C-1.86 22.59 -1.86 22.59 -4 23 C-6.25 21.56 -6.25 21.56 -8 20 C-7.5 18.51 -7.5 18.51 -7 17 C-7 17.66 -7 18.32 -7 19 C-5.68 19 -4.36 19 -3 19 C-2.95 18.13 -2.9 17.26 -2.85 16.37 C-2.78 15.21 -2.7 14.06 -2.62 12.88 C-2.56 11.74 -2.49 10.6 -2.41 9.43 C-2.01 6.05 -1.19 3.18 0 0 Z \",fill:\"#755A7C\",transform:\"translate(539,290)\"})),_path1788||(_path1788=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.01 2.66 -0.98 3.32 -2 4 C-1.67 4.66 -1.34 5.32 -1 6 C-1.66 6 -2.32 6 -3 6 C-3 6.66 -3 7.32 -3 8 C-3.99 8 -4.98 8 -6 8 C-6 8.66 -6 9.32 -6 10 C-7.32 10 -8.64 10 -10 10 C-9.67 8.68 -9.34 7.36 -9 6 C-9.99 5.67 -10.98 5.34 -12 5 C-9.31 3.21 -7.34 2.34 -4.31 1.38 C-3.5 1.11 -2.7 0.85 -1.86 0.59 C-1.25 0.39 -0.63 0.2 0 0 Z \",fill:\"#36293C\",transform:\"translate(659,247)\"})),_path1789||(_path1789=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.75 5.02 13.29 10.86 15.38 20.06 C15.58 21.36 15.79 22.66 16 24 C15.34 23.67 14.68 23.34 14 23 C14 22.34 14 21.68 14 21 C13.34 21 12.68 21 12 21 C11.83 20.42 11.66 19.84 11.48 19.24 C9.15 11.72 6.29 6.89 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#452354\",transform:\"translate(845,160)\"})),_path1790||(_path1790=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.07 0.83 1.15 1.67 1.23 2.53 C2.04 9.51 3.2 14.42 7.56 20 C10.61 24.24 11.24 27.84 11 33 C9.22 30.32 8.53 28.69 7.69 25.69 C6.23 21.12 4.2 18.53 1 15 C-1.21 11.6 -1.1 9.22 -0.62 5.25 C-0.51 4.27 -0.4 3.28 -0.29 2.27 C-0.19 1.52 -0.1 0.77 0 0 Z \",fill:\"#452254\",transform:\"translate(591,1046)\"})),_path1791||(_path1791=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.36 2.24 3.75 3.21 5.12 6.88 C5.46 7.74 5.79 8.6 6.13 9.49 C6.88 11.65 7.49 13.77 8 16 C6.33 16 4.67 16 3 16 C1.31 13.75 1.31 13.75 0 11 C0.38 9.12 0.38 9.12 1 7 C0.73 4.66 0.4 2.32 0 0 Z \",fill:\"#070C30\",transform:\"translate(645,1044)\"})),_path1792||(_path1792=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.01 4.29 2.02 8.58 1 13 C0.67 13 0.34 13 0 13 C-0.33 17.29 -0.66 21.58 -1 26 C-1.33 26 -1.66 26 -2 26 C-2.06 22.6 -2.09 19.21 -2.12 15.81 C-2.14 14.85 -2.16 13.89 -2.18 12.9 C-2.18 11.97 -2.19 11.04 -2.2 10.08 C-2.21 9.23 -2.22 8.37 -2.23 7.5 C-1.97 4.69 -1.16 2.55 0 0 Z \",fill:\"#0B123F\",transform:\"translate(946,979)\"})),_path1793||(_path1793=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.12 1.56 3.82 4.61 5.12 7.69 C5.4 8.3 5.68 8.91 5.96 9.54 C7.68 13.52 8.3 16.69 8 21 C7.01 20.34 6.02 19.68 5 19 C4.63 17.01 4.3 15.01 4 13 C3.34 12.67 2.68 12.34 2 12 C0.58 7.91 -0.26 4.33 0 0 Z \",fill:\"#0F1541\",transform:\"translate(1185,844)\"})),_path1794||(_path1794=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.04 5.41 C-0.42 6.77 -0.9 8.14 -1.38 9.5 C-1.61 10.19 -1.84 10.88 -2.09 11.59 C-3.82 16.63 -3.82 16.63 -5 19 C-5.66 19 -6.32 19 -7 19 C-7.33 20.32 -7.66 21.64 -8 23 C-9.18 14.6 -5.01 8.09 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#240F37\",transform:\"translate(584,819)\"})),_path1795||(_path1795=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-1.62 6.15 -4.22 8.15 -7.06 10 C-12.16 13.42 -12.16 13.42 -14.75 18.75 C-14.83 19.49 -14.91 20.24 -15 21 C-15.33 21 -15.66 21 -16 21 C-16.34 17.44 -16.13 15.28 -14.62 12 C-11.54 8.47 -8.34 6.6 -4.24 4.39 C-1.73 3.05 -1.73 3.05 0 0 Z \",fill:\"#8A7896\",transform:\"translate(664,575)\"})),_path1796||(_path1796=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 2.74 3.04 C4.1 9.18 4.11 12.49 1 18 C-0.32 17.67 -1.64 17.34 -3 17 C-2.78 16.44 -2.57 15.89 -2.34 15.31 C-0.39 9.95 0.31 5.7 0 0 Z \",fill:\"#1A0B27\",transform:\"translate(413,452)\"})),_path1797||(_path1797=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.49 1.37 6.3 3.21 9 7 C9.45 7.51 9.9 8.01 10.36 8.53 C14.08 12.97 14.47 16.33 14.18 22.06 C14.12 22.7 14.06 23.34 14 24 C13.67 24 13.34 24 13 24 C12.94 22.8 12.88 21.61 12.81 20.38 C12.12 14.64 8.99 11.99 5 8 C1.33 2.67 1.33 2.67 0 0 Z \",fill:\"#715376\",transform:\"translate(547,451)\"})),_path1798||(_path1798=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.26 0.97 4.72 1.59 6.69 4.44 C7.12 5.28 7.55 6.13 8 7 C8.99 8.49 8.99 8.49 10 10 C8.35 10.66 6.7 11.32 5 12 C1.35 8.12 0.41 5.29 0 0 Z \",fill:\"#523059\",transform:\"translate(504,343)\"})),_path1799||(_path1799=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C5 1.66 5 2.32 5 3 C6.11 3.12 7.23 3.25 8.38 3.38 C12 4 12 4 14 6 C14 6.99 14 7.98 14 9 C9.33 9.73 6.52 7.83 2.67 5.48 C0.7 3.73 0.37 2.57 0 0 Z \",fill:\"#7B6082\",transform:\"translate(819,341)\"})),_path1800||(_path1800=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.75 5.75 -1.75 5.75 -4 8 C-7.12 7.62 -7.12 7.62 -10 7 C-10 5.68 -10 4.36 -10 3 C-6.67 0.34 -4.22 -0.36 0 0 Z \",fill:\"#6B4D71\",transform:\"translate(665,333)\"})),_path1801||(_path1801=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.89 3.5 -3.51 5.99 -7 8 C-8.32 8 -9.64 8 -11 8 C-11.33 6.35 -11.66 4.7 -12 3 C-4.71 -1.71 -4.71 -1.71 0 0 Z \",fill:\"#1E1621\",transform:\"translate(660,235)\"})),_path1802||(_path1802=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75 0.96 5.5 1.91 8.25 2.88 C9.03 3.14 9.8 3.41 10.61 3.69 C11.36 3.96 12.11 4.22 12.89 4.49 C13.58 4.73 14.27 4.97 14.99 5.22 C17 6 17 6 19.1 7.07 C21.5 8.25 23.59 8.41 26.25 8.62 C27.14 8.7 28.03 8.77 28.95 8.85 C29.97 8.93 29.97 8.93 31 9 C31 9.33 31 9.66 31 10 C23.38 10.79 17.07 9.73 9.94 7.19 C8.83 6.8 8.83 6.8 7.7 6.4 C4.12 5.05 1.57 3.82 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#381945\",transform:\"translate(343,1210)\"})),_path1803||(_path1803=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2.35 3.93 3.47 4.44 7.31 C3.94 11.49 2.84 14.24 1 18 C0.67 18 0.34 18 0 18 C-0.89 14.19 -1.13 10.66 -1.12 6.75 C-1.13 5.69 -1.13 4.64 -1.13 3.55 C-1 1 -1 1 0 0 Z \",fill:\"#080D31\",transform:\"translate(669,1131)\"})),_path1804||(_path1804=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.38 0.98 2.75 1.96 3.14 2.96 C5.74 9.67 8.29 16.09 12.21 22.17 C13.21 24.49 12.83 25.67 12 28 C0 4.79 0 4.79 0 0 Z \",fill:\"#0A123C\",transform:\"translate(1212,901)\"})),_path1805||(_path1805=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.14 3.71 3.23 6.41 3.31 9.12 C3.38 10.27 3.38 10.27 3.44 11.43 C3.53 15.69 3.26 18.22 0.48 21.55 C-0.34 22.36 -1.16 23.17 -2 24 C-2.99 23.67 -3.98 23.34 -5 23 C-3.76 21.76 -3.76 21.76 -2.5 20.5 C1.78 14.7 0.37 6.84 0 0 Z \",fill:\"#452355\",transform:\"translate(512,867)\"})),_path1806||(_path1806=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.32 4.32 4.16 11.95 4.71 17.8 C5.01 20.05 5.52 22.13 6.12 24.31 C6.95 27.79 7 28.8 6 32 C1.62 21.84 0.83 10.94 0 0 Z \",fill:\"#311640\",transform:\"translate(275,871)\"})),_path1807||(_path1807=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.9 1.88 2.81 2.76 2.71 3.67 C2.6 4.83 2.49 5.99 2.38 7.19 C2.26 8.34 2.14 9.48 2.02 10.67 C2 14.03 2.53 16.01 4 19 C0.84 17.63 0.01 17.01 -2 14 C-2.01 11.91 -2.01 11.91 -1.69 9.62 C-1.58 8.83 -1.47 8.04 -1.36 7.23 C-0.97 4.8 -0.54 2.4 0 0 Z \",fill:\"#452355\",transform:\"translate(1129,622)\"})),_path1808||(_path1808=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.64 -0.21 12.53 0.49 19 2 C18.67 2.66 18.34 3.32 18 4 C15.73 4.05 13.46 4.09 11.19 4.12 C9.29 4.16 9.29 4.16 7.36 4.2 C4 4 4 4 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#0A080E\",transform:\"translate(606,512)\"})),_path1809||(_path1809=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.99 2.33 1.98 2.66 3 3 C-0.29 2.92 -3.58 2.81 -6.88 2.69 C-7.81 2.66 -8.75 2.64 -9.71 2.62 C-10.61 2.58 -11.51 2.55 -12.43 2.51 C-13.26 2.49 -14.08 2.46 -14.94 2.43 C-17 2 -17 2 -19 -1 C-12.44 -3.1 -6.42 -1.8 0 0 Z \",fill:\"#483750\",transform:\"translate(590,485)\"})),_path1810||(_path1810=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67 0.06 1.67 0.06 3.38 0.12 C3.5 0.76 3.62 1.4 3.75 2.06 C3.96 2.74 4.16 3.42 4.38 4.12 C5.03 4.45 5.7 4.79 6.38 5.12 C5.69 5.19 5 5.25 4.29 5.31 C2.94 5.43 2.94 5.43 1.56 5.56 C0.22 5.68 0.22 5.68 -1.14 5.81 C-3.75 6.06 -3.75 6.06 -6.62 7.12 C-5.84 2.16 -5.49 0.19 0 0 Z \",fill:\"#624268\",transform:\"translate(573.625,438.875)\"})),_path1811||(_path1811=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-12.78 5.13 -12.78 5.13 -17.12 5.56 C-19.99 5.76 -19.99 5.76 -21.81 7.38 C-22.92 8.89 -23.96 10.44 -25 12 C-24.94 9.19 -24.94 9.19 -24 6 C-21.59 4.66 -19.58 3.87 -17 3 C-16.19 2.64 -15.39 2.27 -14.56 1.9 C-9.16 -0.52 -5.77 -1.5 0 0 Z \",fill:\"#7D6282\",transform:\"translate(671,203)\"})),_path1812||(_path1812=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.41 5.11 0.26 9.76 -1.44 14.62 C-1.65 15.27 -1.87 15.91 -2.1 16.57 C-3.3 20.09 -4.58 23.56 -6 27 C-7.15 23.6 -6.83 21.5 -5.82 18.09 C-5.55 17.16 -5.28 16.23 -5 15.28 C-4.71 14.32 -4.42 13.36 -4.12 12.38 C-3.84 11.41 -3.56 10.44 -3.27 9.45 C-1.18 2.37 -1.18 2.37 0 0 Z \",fill:\"#2F163C\",transform:\"translate(526,200)\"})),_path1813||(_path1813=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.57 3.14 8.57 3.14 12 5 C10.25 6.56 10.25 6.56 8 8 C5.75 7.69 5.75 7.69 4 7 C4 6.34 4 5.68 4 5 C3.22 5.21 2.43 5.41 1.62 5.62 C0.76 5.75 -0.11 5.87 -1 6 C-1.66 5.34 -2.32 4.68 -3 4 C-2.01 2.68 -1.02 1.36 0 0 Z \",fill:\"#371746\",transform:\"translate(567,140)\"})),_path1814||(_path1814=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.65 1.32 3.3 2 5 C-1.96 5 -5.92 5 -10 5 C-9 1 -9 1 -7.25 -0.31 C-4.35 -1.2 -2.83 -1.12 0 0 Z \",fill:\"#351547\",transform:\"translate(313,1275)\"})),_path1815||(_path1815=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C1.86 2.3 1.86 2.3 0.69 3.62 C-5.4 10.95 -6.12 18.16 -6.56 27.31 C-6.61 28.15 -6.65 28.98 -6.69 29.85 C-6.8 31.9 -6.9 33.95 -7 36 C-7.33 36 -7.66 36 -8 36 C-9.94 22.22 -7.84 12.91 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#301243\",transform:\"translate(144,1151)\"})),_path1816||(_path1816=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.66 2.66 1.32 3 2 C3.66 2 4.32 2 5 2 C3.55 5.79 1.85 9.39 0 13 C-1.32 12.67 -2.64 12.34 -4 12 C-3.34 7.61 -1.81 4.02 0 0 Z \",fill:\"#240F2F\",transform:\"translate(113,1129)\"})),_path1817||(_path1817=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.99 3.3 1.98 5 3 C5 2.34 5 1.68 5 1 C5.66 1 6.32 1 7 1 C8.51 2.86 8.51 2.86 10.12 5.31 C10.66 6.11 11.2 6.91 11.76 7.74 C13 10 13 10 13 13 C9.12 11.25 9.12 11.25 8 9 C7.22 8.55 6.43 8.09 5.62 7.62 C2.96 5.98 1.62 4.65 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2E153D\",transform:\"translate(435,964)\"})),_path1818||(_path1818=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 3.15 0.99 3.93 0.22 7.01 C0.04 7.77 -0.14 8.53 -0.33 9.31 C-0.53 10.09 -0.73 10.88 -0.94 11.69 C-1.13 12.48 -1.33 13.28 -1.53 14.1 C-2.01 16.07 -2.51 18.04 -3 20 C-5.42 17.58 -5.61 16.36 -6 13 C-5.56 10.19 -5.56 10.19 -5 8 C-4.34 8 -3.68 8 -3 8 C-2.88 7.05 -2.75 6.1 -2.62 5.12 C-2 2 -2 2 0 0 Z \",fill:\"#220F36\",transform:\"translate(284,822)\"})),_path1819||(_path1819=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.93 0.63 5.36 1.59 8 3 C8.66 2.34 9.32 1.68 10 1 C9.88 2.88 9.88 2.88 9 5 C6 6.12 6 6.12 3 7 C2.67 7.66 2.34 8.32 2 9 C1.01 9 0.02 9 -1 9 C-1.33 7.02 -1.66 5.04 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#0A123C\",transform:\"translate(958,720)\"})),_path1820||(_path1820=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C4.73 3.09 5.45 3.19 6.2 3.29 C9.43 4.11 11.22 5.37 13.81 7.44 C14.6 8.05 15.39 8.67 16.21 9.31 C16.8 9.87 17.39 10.42 18 11 C18 11.66 18 12.32 18 13 C14.4 11.66 11.28 9.99 8 8 C7.01 7.67 6.02 7.34 5 7 C5 6.01 5 5.02 5 4 C2.52 3.01 2.52 3.01 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#401D50\",transform:\"translate(981,665)\"})),_path1821||(_path1821=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.74 3.17 4.09 5.54 3.44 8.75 C1.47 11.83 -0.53 12.17 -4 13 C-3.52 11.21 -3.04 9.42 -2.56 7.62 C-2.3 6.63 -2.03 5.63 -1.75 4.6 C-1 2 -1 2 0 0 Z \",fill:\"#231029\",transform:\"translate(351,607)\"})),_path1822||(_path1822=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.67 2.31 0.34 4.62 0 7 C-0.99 7.33 -1.98 7.66 -3 8 C-3.8 9.87 -3.8 9.87 -4.19 12.06 C-4.35 12.8 -4.5 13.53 -4.67 14.29 C-4.78 14.85 -4.89 15.42 -5 16 C-5.66 16 -6.32 16 -7 16 C-8.23 10.83 -8.23 10.83 -8 8 C-5.19 5.19 -5.19 5.19 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#765878\",transform:\"translate(593,584)\"})),_path1823||(_path1823=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.27 0.02 2.54 0.04 3.86 0.05 C5.32 0.09 5.32 0.09 6.81 0.12 C6.81 0.79 6.81 1.44 6.81 2.12 C5.16 2.12 3.51 2.12 1.81 2.12 C2.14 3.12 2.47 4.11 2.81 5.12 C0.96 4.85 0.96 4.85 -0.94 4.56 C-3.95 4.18 -6.29 4.04 -9.19 5.12 C-9.52 4.13 -9.85 3.14 -10.19 2.12 C-6.45 -0.37 -4.44 -0.08 0 0 Z \",fill:\"#1D1520\",transform:\"translate(577.1875,443.875)\"})),_path1824||(_path1824=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 1 1 1 1.06 4.06 C1.04 5.03 1.02 6 1 7 C-5.88 6.12 -5.88 6.12 -7 5 C-7.04 3.33 -7.04 1.67 -7 0 C-4.32 -1.34 -2.85 -0.73 0 0 Z \",fill:\"#0B0910\",transform:\"translate(532,358)\"})),_path1825||(_path1825=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.38 5.95 0.07 10.45 -2 16 C-2.33 16.99 -2.66 17.98 -3 19 C-3.66 19 -4.32 19 -5 19 C-3.84 3.84 -3.84 3.84 0 0 Z \",fill:\"#1B0B29\",transform:\"translate(449,322)\"})),_path1826||(_path1826=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 2.4 1.09 4.79 1.12 7.19 C1.14 7.86 1.16 8.53 1.18 9.23 C1.22 13.29 0.8 16.35 -1 20 C-2.56 19 -2.56 19 -4 17 C-3.79 10.95 -2.08 5.65 0 0 Z \",fill:\"#694D6E\",transform:\"translate(846,315)\"})),_path1827||(_path1827=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 0.01 1.5 0.01 3.04 0.03 C3.81 0.04 4.58 0.05 5.38 0.06 C5.38 0.39 5.38 0.72 5.38 1.06 C7.05 1.5 7.05 1.5 8.75 1.94 C12.38 3.06 12.38 3.06 14.38 5.06 C8.43 4.73 2.5 4.4 -3.62 4.06 C-3.62 3.4 -3.62 2.74 -3.62 2.06 C-4.95 1.73 -6.26 1.4 -7.62 1.06 C-4.98 -0.26 -2.95 -0.03 0 0 Z \",fill:\"#503E58\",transform:\"translate(689.625,244.9375)\"})),_path1828||(_path1828=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.15 2.22 2.86 3.24 3.19 6.25 C2.2 6.25 1.21 6.25 0.19 6.25 C-0.65 5.26 -0.65 5.26 -1.5 4.25 C-4.92 1.29 -7.38 1.95 -11.81 2.25 C-12.14 1.26 -12.47 0.27 -12.81 -0.75 C-8.08 -2.21 -4.31 -2.68 0 0 Z \",fill:\"#472961\",transform:\"translate(502.8125,244.75)\"})),_path1829||(_path1829=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C9.33 2.34 9.66 1.68 10 1 C11.32 1 12.64 1 14 1 C13.62 3.44 13.62 3.44 13 6 C10.49 7.25 9.71 6.85 7.06 6.12 C6.37 5.94 5.68 5.76 4.97 5.57 C3.3 5.09 1.65 4.55 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(679,1116)\"})),_path1830||(_path1830=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.32 6.84 -2.57 9.45 -8.07 12.74 C-10.14 13.86 -10.14 13.86 -11 16 C-11.99 15.67 -12.98 15.34 -14 15 C-10.82 10.95 -7.56 7.62 -3.55 4.39 C-1.75 2.89 -1.75 2.89 0 0 Z \",fill:\"#432152\",transform:\"translate(351,1112)\"})),_path1831||(_path1831=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C5.59 3.18 5.41 6.54 5 10 C3.5 12.5 3.5 12.5 2 14 C1.34 13.67 0.68 13.34 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#0B133D\",transform:\"translate(1068,891)\"})),_path1832||(_path1832=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.49 6.97 2.61 11.64 0 17 C-1 14 -1 14 -0.44 11.06 C0.29 8.07 0.29 8.07 -1.06 5.88 C-1.37 5.26 -1.68 4.64 -2 4 C-1.12 1.75 -1.12 1.75 0 0 Z \",fill:\"#28103B\",transform:\"translate(441,745)\"})),_path1833||(_path1833=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C1.99 7.25 -0.08 12.81 -4 19 C-4.99 19 -5.98 19 -7 19 C-7 18.01 -7 17.02 -7 16 C-6.34 16 -5.68 16 -5 16 C-2.54 10.75 -1.1 5.69 0 0 Z \",fill:\"#765A7A\",transform:\"translate(681,680)\"})),_path1834||(_path1834=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -0.5 6.25 C-1.13 9.94 -1.13 9.94 -0.69 13.44 C-1.13 18.49 -3.74 21.26 -7 25 C-7 22 -7 22 -5.5 19.5 C-3.96 15.91 -3.9 14.25 -4.06 10.44 C-4.2 6.43 -4.2 5.33 -2 1.81 C-1.34 1.21 -0.68 0.62 0 0 Z \",fill:\"#846D8D\",transform:\"translate(826,677)\"})),_path1835||(_path1835=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 0.94 2.62 0.94 5 2 C6.29 10.57 6.29 10.57 5 14 C4.34 14 3.68 14 3 14 C2.67 11.36 2.34 8.72 2 6 C0.35 6 -1.3 6 -3 6 C-2.62 3.56 -2.62 3.56 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#715376\",transform:\"translate(560,529)\"})),_path1836||(_path1836=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02 0.6 4.02 1.27 6 2 C6.33 2.66 6.66 3.32 7 4 C7.66 4 8.32 4 9 4 C11 7 11 7 11 10 C10.4 9.83 9.8 9.67 9.19 9.5 C6.89 8.89 6.89 8.89 4 9 C0 2.25 0 2.25 0 0 Z \",fill:\"#2A1336\",transform:\"translate(526,454)\"})),_path1837||(_path1837=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C4.89 4.15 4.76 6.29 4.62 8.44 C4.56 9.63 4.49 10.83 4.41 12.06 C4.28 13.03 4.14 14 4 15 C3.01 15.5 3.01 15.5 2 16 C0.43 10.98 -0.55 6.25 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#593B60\",transform:\"translate(567,282)\"})),_path1838||(_path1838=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.98 3.96 5.96 7.92 8 12 C5 13 5 13 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#826988\",transform:\"translate(769,269)\"})),_path1839||(_path1839=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.98 0.66 3.96 1 6 C-2.3 6 -5.6 6 -9 6 C-8 2 -8 2 -5.62 0.19 C-3 -1 -3 -1 0 0 Z \",fill:\"#45224F\",transform:\"translate(534,1274)\"})),_path1840||(_path1840=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 2.78 3.01 C3.02 3.87 3.26 4.73 3.51 5.62 C3.77 6.56 4.04 7.49 4.31 8.46 C4.58 9.44 4.85 10.42 5.12 11.44 C5.54 12.91 5.54 12.91 5.96 14.41 C8 21.69 8 21.69 8 24 C7.34 24 6.68 24 6 24 C5.34 22.35 4.68 20.7 4 19 C3.34 19 2.68 19 2 19 C2.23 18.22 2.45 17.43 2.69 16.62 C3.06 12.3 2.08 9.33 0.69 5.27 C0 3 0 3 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(181,1224)\"})),_path1841||(_path1841=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.47 3.39 6.71 6.89 9.81 10.62 C10.6 11.57 11.39 12.51 12.21 13.48 C14 16 14 16 14 19 C8.93 16.06 6.12 12.92 3 8 C2.4 7.09 1.8 6.18 1.19 5.25 C0 3 0 3 0 0 Z \",fill:\"#000002\",transform:\"translate(157,1221)\"})),_path1842||(_path1842=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.34 0.96 0.34 0.96 0.69 1.94 C1.12 2.62 1.55 3.3 2 4 C3.65 4.33 5.3 4.66 7 5 C6.34 9.62 5.68 14.24 5 19 C4.67 19 4.34 19 4 19 C3.92 17.74 3.83 16.48 3.75 15.19 C3.54 12.99 3.54 12.99 3 11 C1.69 9.97 0.36 8.96 -1 8 C-1.32 4.87 -1.41 2.83 0 0 Z \",fill:\"#411F4F\",transform:\"translate(379,1107)\"})),_path1843||(_path1843=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.67 2.38 4.15 4.87 5.75 8.06 C6.2 8.94 6.65 9.82 7.11 10.72 C7.4 11.47 7.7 12.23 8 13 C7.67 13.66 7.34 14.32 7 15 C5.76 13.5 4.53 12.01 3.29 10.51 C2.25 9.29 1.13 8.13 0 7 C-0.33 7.66 -0.66 8.32 -1 9 C-2.76 5.91 -3 4.77 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#321641\",transform:\"translate(366,1022)\"})),_path1844||(_path1844=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.82 0.01 1.64 0.03 2.49 0.04 C4.5 0.08 6.5 0.13 8.5 0.19 C8.5 0.52 8.5 0.85 8.5 1.19 C5.67 1.67 2.83 2.15 0 2.62 C-0.79 2.76 -1.58 2.89 -2.4 3.03 C-7.42 3.88 -12.44 4.59 -17.5 5.19 C-17.5 4.53 -17.5 3.87 -17.5 3.19 C-11.4 0.52 -6.61 -0.21 0 0 Z \",fill:\"#0C103A\",transform:\"translate(718.5,817.8125)\"})),_path1845||(_path1845=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.72 1.44 14.73 4.06 22 7 C22 7.33 22 7.66 22 8 C14.79 7.43 7.67 5.84 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#070C30\",transform:\"translate(1045,758)\"})),_path1846||(_path1846=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.75 5.88 -0.75 5.88 -3 7 C-3.43 7.99 -3.43 7.99 -3.88 9 C-4.25 9.66 -4.62 10.32 -5 11 C-6.33 11.33 -7.67 11.67 -9 12 C-10.18 13.87 -10.18 13.87 -11 16 C-11.66 16.99 -12.32 17.98 -13 19 C-13.66 18.67 -14.32 18.34 -15 18 C-13.93 16.37 -12.84 14.74 -11.75 13.12 C-10.85 11.77 -10.85 11.77 -9.92 10.38 C-8 8 -6.74 7.2 -4 6 C-2.85 4.03 -2.85 4.03 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(270,737)\"})),_path1847||(_path1847=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3.31 1.1 6.3 1.06 9.75 C1.05 10.73 1.04 11.72 1.04 12.73 C1.02 13.48 1.01 14.23 1 15 C1.66 15.33 2.32 15.66 3 16 C1.72 17.71 0.38 19.37 -1 21 C-1.66 21 -2.32 21 -3 21 C-2.67 17.37 -2.34 13.74 -2 10 C-2.99 10.5 -2.99 10.5 -4 11 C-3.52 9.54 -3.04 8.08 -2.56 6.62 C-2.3 5.81 -2.03 5 -1.75 4.16 C-1 2 -1 2 0 0 Z \",fill:\"#351048\",transform:\"translate(564,719)\"})),_path1848||(_path1848=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.19 3.88 2.19 3.88 2 7 C1.01 7.66 0.02 8.32 -1 9 C-1.33 8.34 -1.66 7.68 -2 7 C-3.32 7 -4.64 7 -6 7 C-6.66 8.65 -7.32 10.3 -8 12 C-8.66 11.67 -9.32 11.34 -10 11 C-4.99 2.02 -4.99 2.02 0 0 Z \",fill:\"#2B113E\",transform:\"translate(458,696)\"})),_path1849||(_path1849=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56 0.54 7.97 1.79 12 4 C9.61 5.89 7.93 7.02 5 8 C2.88 7.44 2.88 7.44 1 6 C0.25 2.88 0.25 2.88 0 0 Z \",fill:\"#28103B\",transform:\"translate(596,646)\"})),_path1850||(_path1850=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0.66 7.26 1.32 11 2 C11 2.66 11 3.32 11 4 C3.71 8.57 3.71 8.57 -1 8 C-0.65 7.24 -0.3 6.47 0.06 5.69 C1.32 2.95 1.32 2.95 0 0 Z \",fill:\"#1B0E29\",transform:\"translate(972,634)\"})),_path1851||(_path1851=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.52 2.46 1.04 3.92 0.56 5.38 C0.3 6.19 0.03 7 -0.25 7.84 C-1 10 -1 10 -2 12 C-3.32 12 -4.64 12 -6 12 C-7.14 8.59 -6.87 8 -5.56 4.81 C-5.28 4.1 -4.99 3.38 -4.69 2.64 C-4.46 2.1 -4.24 1.56 -4 1 C-3.34 1.99 -2.68 2.98 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#180C22\",transform:\"translate(915,395)\"})),_path1852||(_path1852=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.99 1.67 3.98 1.34 5 1 C6.67 3.96 7.33 6.37 7.62 9.75 C7.7 10.55 7.77 11.35 7.85 12.17 C7.93 13.08 7.93 13.08 8 14 C6.35 13.67 4.7 13.34 3 13 C3.33 12.01 3.66 11.02 4 10 C3.36 9.22 2.72 8.43 2.06 7.62 C-0.23 4.71 -0.41 3.59 0 0 Z \",fill:\"#1B0E28\",transform:\"translate(923,330)\"})),_path1853||(_path1853=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.64 0.66 1.28 1.32 1.94 2 C5.09 5.17 8.45 8.09 11.82 11.04 C13.95 12.96 15.99 14.95 18 17 C14.67 15.67 11.33 14.33 8 13 C8 12.34 8 11.68 8 11 C7.24 10.86 6.47 10.71 5.69 10.56 C1.95 8.39 1.63 5.92 0.48 1.9 C0.32 1.27 0.16 0.65 0 0 Z \",fill:\"#230F38\",transform:\"translate(873,266)\"})),_path1854||(_path1854=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3 2.66 3 3.32 3 4 C-1.29 4.66 -5.58 5.32 -10 6 C-9.67 4.02 -9.34 2.04 -9 0 C-5.49 -1.17 -3.56 -0.85 0 0 Z \",fill:\"#050408\",transform:\"translate(702,262)\"})),_path1855||(_path1855=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 4 3 C3.67 3.66 3.34 4.32 3 5 C2.34 5 1.68 5 1 5 C0.77 5.54 0.55 6.07 0.31 6.62 C-1.43 9.79 -3.64 12.27 -6 15 C-6.66 14.01 -7.32 13.02 -8 12 C-7.51 11.3 -7.01 10.6 -6.5 9.88 C-5.86 8.97 -5.22 8.06 -4.56 7.12 C-3.92 6.22 -3.29 5.32 -2.63 4.38 C-1 2.12 -1 2.12 0 0 Z \",fill:\"#0C0711\",transform:\"translate(512,125)\"})),_path1856||(_path1856=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.31 1.94 0.31 4 1 C5.1 4.29 4.8 5.71 4 9 C2.02 9 0.04 9 -2 9 C-2.25 3.38 -2.25 3.38 0 0 Z \",fill:\"#090F36\",transform:\"translate(711,1271)\"})),_path1857||(_path1857=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-12 14.18 -12 14.18 -22 15 C-18.87 12.53 -15.6 10.58 -12.12 8.62 C-7.67 6.06 -3.78 3.47 0 0 Z \",fill:\"#281137\",transform:\"translate(403,1206)\"})),_path1858||(_path1858=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-8.08 11 -8.08 11 -13 11 C-13.33 11.99 -13.66 12.98 -14 14 C-16.38 15.25 -16.38 15.25 -19 16 C-19.99 15.67 -20.98 15.34 -22 15 C-21.34 15 -20.68 15 -20 15 C-20 14.34 -20 13.68 -20 13 C-19.28 12.61 -18.55 12.23 -17.8 11.83 C-11.48 8.46 -11.48 8.46 -5.44 4.62 C-3 3 -3 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#3A174A\",transform:\"translate(339,1158)\"})),_path1859||(_path1859=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.11 3.32 3.94 3.93 2.75 7.06 C2.37 8.1 2.37 8.1 1.98 9.16 C1 11 1 11 -2 13 C-3.25 9.88 -3.25 9.88 -4 6 C-2.31 2.56 -2.31 2.56 0 0 Z \",fill:\"#2A1238\",transform:\"translate(267,1067)\"})),_path1860||(_path1860=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.31 4.31 4.96 8.13 5 14 C4.56 17.06 4.56 17.06 4 19 C3.34 18.34 2.68 17.68 2 17 C2.06 15.95 2.12 14.9 2.19 13.81 C1.94 8.71 0.19 6.9 -3 3 C-2.01 2.01 -1.02 1.02 0 0 Z \",fill:\"#31173C\",transform:\"translate(281,1012)\"})),_path1861||(_path1861=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.21 -0.09 5.91 0.15 9 1 C9.66 1 10.32 1 11 1 C10.67 2.32 10.34 3.64 10 5 C5.54 6.15 2.16 6.08 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#3B174B\",transform:\"translate(1210,866)\"})),_path1862||(_path1862=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.66 2 -1.32 2 -2 2 C-2.89 3.69 -2.89 3.69 -3 6 C-1.15 9.24 -1.15 9.24 1 12 C-3.35 12 -4.93 9.94 -8 7 C-8.88 4.69 -8.88 4.69 -9 3 C-5.56 0.71 -4.28 0 0 0 Z \",fill:\"#0B103B\",transform:\"translate(667,829)\"})),_path1863||(_path1863=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.44 4.32 -0.2 6.97 -2 11 C-3.54 13.78 -5.24 16.35 -7 19 C-6.74 11.94 -6.17 6.81 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#29113A\",transform:\"translate(287,811)\"})),_path1864||(_path1864=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.19 1.57 0.37 2.38 0.56 C4.97 1.26 4.97 1.26 7 0 C9.06 0.67 9.06 0.67 11.44 1.75 C12.22 2.1 13 2.44 13.81 2.8 C15.98 3.99 17.35 5.17 19 7 C19.56 7.56 20.11 8.11 20.69 8.69 C21.12 9.12 21.55 9.55 22 10 C19 10 19 10 17.31 8.62 C14.04 6.33 10.9 5.84 7 5 C7 4.34 7 3.68 7 3 C6.03 2.88 5.06 2.75 4.06 2.62 C3.05 2.42 2.04 2.21 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#2A1338\",transform:\"translate(1080,768)\"})),_path1865||(_path1865=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 6.27 0 12.54 0 19 C-2.3 16.7 -2.46 15.62 -3.06 12.5 C-3.72 9.15 -3.72 9.15 -5 6 C-4.72 4.32 -4.39 2.65 -4 1 C-1 0 -1 0 0 0 Z \",fill:\"#401D4F\",transform:\"translate(924,555)\"})),_path1866||(_path1866=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6 -0.05 3.21 -0.09 4.81 -0.12 C5.71 -0.15 6.6 -0.17 7.52 -0.2 C10 0 10 0 13 2 C12.01 3.32 11.02 4.64 10 6 C7.03 5.5 7.03 5.5 4 5 C3.67 4.01 3.34 3.02 3 2 C2.01 1.67 1.02 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(554,518)\"})),_path1867||(_path1867=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.33 3.7 0.67 6.32 -0.31 10.06 C-0.71 11.63 -0.71 11.63 -1.11 13.22 C-2 16 -2 16 -4 19 C-4.38 20.66 -4.73 22.32 -5 24 C-5.33 24 -5.66 24 -6 24 C-7.1 19.59 -7.08 15.52 -7 11 C-5.51 11.99 -5.51 11.99 -4 13 C-2.53 8.7 -1.23 4.38 0 0 Z \",fill:\"#1B0E28\",transform:\"translate(867,477)\"})),_path1868||(_path1868=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.86 4.7 4.86 4.7 5.31 8.88 C5 12 5 12 3 14.38 C2.34 14.91 1.68 15.45 1 16 C0.34 15.67 -0.32 15.34 -1 15 C-0.34 14.01 0.32 13.02 1 12 C0.65 11.42 0.3 10.85 -0.06 10.25 C-1.16 7.6 -0.88 6.65 0 4 C0 3.34 0 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#826887\",transform:\"translate(640,476)\"})),_path1869||(_path1869=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.94 2.43 3.57 4.24 4 8 C4.04 10.33 4.05 12.67 4 15 C3.67 14.34 3.34 13.68 3 13 C2.34 13 1.68 13 1 13 C0.73 12.28 0.46 11.56 0.19 10.81 C-0.99 8.02 -2.39 5.56 -4 3 C-3.34 3 -2.68 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#504340\",transform:\"translate(882,431)\"})),_path1870||(_path1870=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69 2.49 1 4.38 1 7 C3.64 7.66 6.28 8.32 9 9 C6.1 10.93 5.1 11.3 1.81 11.62 C0.55 11.75 -0.7 11.87 -2 12 C-3.35 5.72 -3.35 5.72 -1.56 2.06 C-1.05 1.38 -0.53 0.7 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(578,412)\"})),_path1871||(_path1871=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 4 3 C3.69 5.94 3.33 8.35 2 11 C-0.48 10.01 -0.48 10.01 -3 9 C-3.26 5.85 -3.25 4.38 -1.5 1.69 C-1 1.13 -0.51 0.57 0 0 Z \",fill:\"#5B3A61\",transform:\"translate(900,396)\"})),_path1872||(_path1872=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.32 0.62 5.48 1.81 8.19 3.81 C8.88 4.31 9.58 4.82 10.29 5.33 C12.21 7.21 12.62 8.38 13 11 C8.82 12.39 6.87 10.82 3 9 C3.99 8.01 4.98 7.02 6 6 C5.01 5.2 4.02 4.39 3 3.56 C2.01 2.72 1.02 1.87 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#351546\",transform:\"translate(813,280)\"})),_path1873||(_path1873=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95 1.14 4.88 2.67 7 5 C1.71 8.08 1.71 8.08 -1.88 7.69 C-2.58 7.46 -3.28 7.23 -4 7 C-3.4 4.98 -2.73 2.98 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#403146\",transform:\"translate(586,268)\"})),_path1874||(_path1874=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.87 1.57 6.17 3.97 9 7 C9.95 7.99 9.95 7.99 10.91 9 C11.56 9.7 12.21 10.4 12.88 11.12 C13.49 11.79 14.11 12.45 14.74 13.13 C15.16 13.75 15.57 14.37 16 15 C15.67 15.99 15.34 16.98 15 18 C13.25 16.27 11.5 14.54 9.75 12.81 C9.26 12.33 8.77 11.85 8.26 11.35 C5.28 8.39 2.47 5.41 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#381946\",transform:\"translate(690,118)\"})),_path1875||(_path1875=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.76 0.43 -1.53 0.87 -2.31 1.31 C-4.94 2.81 -4.94 2.81 -6.5 4.56 C-8.46 6.44 -10.46 7.07 -13 8 C-14.34 8.65 -15.68 9.31 -17 10 C-17.33 9.01 -17.66 8.02 -18 7 C-16.44 6.04 -14.88 5.08 -13.31 4.12 C-12.44 3.59 -11.57 3.06 -10.68 2.51 C-3.91 -1.3 -3.91 -1.3 0 0 Z \",fill:\"#271138\",transform:\"translate(324,1221)\"})),_path1876||(_path1876=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.32 0 5.39 0.47 7.92 2.67 C11.3 6.38 13.32 8.93 14 14 C12.83 13.05 11.66 12.09 10.5 11.12 C9.85 10.59 9.2 10.06 8.53 9.51 C8.03 9.01 7.52 8.51 7 8 C7 7.34 7 6.68 7 6 C6.4 5.71 5.8 5.42 5.19 5.12 C3 4 3 4 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#452355\",transform:\"translate(281,1214)\"})),_path1877||(_path1877=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.69 1.34 2.99 2.16 4 5 C4.24 7.92 4.19 10.82 4.12 13.75 C4.12 14.54 4.11 15.34 4.1 16.15 C4.07 18.1 4.04 20.05 4 22 C3.34 21.67 2.68 21.34 2 21 C1.59 18.96 1.59 18.96 1.37 16.31 C1.28 15.36 1.2 14.42 1.11 13.45 C1.03 12.45 0.96 11.46 0.88 10.44 C0.79 9.44 0.7 8.44 0.61 7.42 C0.4 4.94 0.2 2.47 0 0 Z \",fill:\"#3A164B\",transform:\"translate(609,1137)\"})),_path1878||(_path1878=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.28 7.41 3.26 14.47 3 22 C-1.16 17.84 -1.14 11.66 -1.19 6.06 C-1.15 1.15 -1.15 1.15 0 0 Z \",fill:\"#2A1238\",transform:\"translate(279,875)\"})),_path1879||(_path1879=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.95 1 9.9 1 15 C0.34 15 -0.32 15 -1 15 C-1.66 16.32 -2.32 17.64 -3 19 C-3.08 16.77 -3.14 14.54 -3.19 12.31 C-3.22 11.07 -3.26 9.83 -3.29 8.55 C-2.98 4.81 -2.25 2.96 0 0 Z \",fill:\"#3E1B4E\",transform:\"translate(1279,828)\"})),_path1880||(_path1880=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.39 1.25 6.23 2.68 9.19 4.75 C14.01 8.04 18.97 11.04 24 14 C23.67 14.66 23.34 15.32 23 16 C14.73 12.27 5.14 7.71 0 0 Z \",fill:\"#091038\",transform:\"translate(1131,796)\"})),_path1881||(_path1881=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C3.75 4.62 4.51 2.63 6 0 C7 2 7 2 6.06 5.12 C5.71 6.07 5.36 7.02 5 8 C4.34 8 3.68 8 3 8 C2.67 10.31 2.34 12.62 2 15 C1.71 14.36 1.42 13.72 1.12 13.06 C0.17 10.85 0.17 10.85 -2 10 C-1.34 6.7 -0.68 3.4 0 0 Z \",fill:\"#311640\",transform:\"translate(338,730)\"})),_path1882||(_path1882=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.56 3.95 -1.66 6.76 -4 10 C-4.99 10.33 -5.98 10.66 -7 11 C-8.03 7.71 -8.2 6.42 -6.69 3.25 C-4.45 0.26 -3.75 0 0 0 Z \",fill:\"#2A1238\",transform:\"translate(351,714)\"})),_path1883||(_path1883=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.31 2 5.62 2 8 2 C7.4 4.35 6.73 6.69 6 9 C5.01 9.5 5.01 9.5 4 10 C1 9 1 9 -0.69 5.94 C-1.12 4.97 -1.55 4 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#250F37\",transform:\"translate(664,711)\"})),_path1884||(_path1884=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.26 4.35 12.01 9.22 17 15 C17 15.66 17 16.32 17 17 C14.56 16.19 14.56 16.19 12 15 C11.67 14.01 11.34 13.02 11 12 C10.01 11.67 9.02 11.34 8 11 C6.21 9.26 6.21 9.26 4.38 7.12 C3.76 6.43 3.15 5.73 2.52 5.01 C1 3 1 3 0 0 Z \",fill:\"#391A46\",transform:\"translate(1166,691)\"})),_path1885||(_path1885=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C4.99 4.35 6.99 5.68 9 7 C10.37 8.3 11.72 9.62 13 11 C10.77 11.7 10.77 11.7 8 12 C5.76 10.74 5.76 10.74 3.69 8.88 C2.99 8.27 2.29 7.67 1.57 7.05 C-0.36 4.52 -0.32 3.11 0 0 Z \",fill:\"#200E2A\",transform:\"translate(1046,549)\"})),_path1886||(_path1886=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.09 5.28 0.09 8 1 C9.95 3.22 10.8 5.25 12 8 C8.37 7.67 4.74 7.34 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#44214E\",transform:\"translate(948,539)\"})),_path1887||(_path1887=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.37 0.43 0.74 0.87 1.12 1.31 C3.51 3.46 6.1 4.65 9 6 C7.38 8.04 5.71 10.04 4 12 C3.34 12 2.68 12 2 12 C-0.6 8.1 -0.15 4.53 0 0 Z \",fill:\"#302235\",transform:\"translate(542,484)\"})),_path1888||(_path1888=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.83 0.56 -1.65 1.11 -2.5 1.69 C-5.27 3.75 -5.27 3.75 -5.31 6.75 C-5.21 7.49 -5.11 8.24 -5 9 C-3.68 9.66 -2.36 10.32 -1 11 C-3.64 11 -6.28 11 -9 11 C-10.1 7.61 -10.06 6.16 -8.81 2.75 C-7 0 -7 0 -5 -0.94 C-3 -1 -3 -1 0 0 Z \",fill:\"#72587C\",transform:\"translate(587,423)\"})),_path1889||(_path1889=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.08 2.27 2.14 4.54 2.19 6.81 C2.22 8.08 2.26 9.34 2.29 10.64 C2 14 2 14 0.69 15.91 C-1.75 17.49 -4.15 17.68 -7 18 C-5.62 16.5 -5.62 16.5 -4 15 C-3.34 15 -2.68 15 -2 15 C-1.34 10.05 -0.68 5.1 0 0 Z \",fill:\"#755B7C\",transform:\"translate(563,387)\"})),_path1890||(_path1890=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 1.32 5 2.64 5 4 C5.66 4.66 6.32 5.32 7 6 C3.78 8.15 2.72 8.29 -1 8 C-2 7 -2 7 -2.06 4.44 C-2.04 3.63 -2.02 2.83 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(651,329)\"})),_path1891||(_path1891=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.49 1.2 4.68 2.45 7 4 C9.28 4.45 9.28 4.45 11.69 4.62 C12.9 4.74 12.9 4.74 14.14 4.85 C14.75 4.9 15.37 4.95 16 5 C16 6.65 16 8.3 16 10 C14.04 9.6 12.08 9.18 10.12 8.75 C9.03 8.52 7.94 8.29 6.82 8.05 C4 7 4 7 2.74 5.08 C2.5 4.39 2.25 3.71 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#705275\",transform:\"translate(552,308)\"})),_path1892||(_path1892=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 1.75 2.06 1.75 4 4 C3.75 6.25 3.75 6.25 3 8 C0.36 8 -2.28 8 -5 8 C-4.65 4.76 -4.44 3.38 -1.94 1.19 C-1.3 0.8 -0.66 0.4 0 0 Z \",fill:\"#6F567D\",transform:\"translate(603,305)\"})),_path1893||(_path1893=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.59 0 15.18 0 23 0 C23 0.66 23 1.32 23 2 C16.25 3.12 16.25 3.12 14 2 C11.63 1.93 9.25 1.92 6.88 1.94 C5.59 1.95 4.31 1.96 2.99 1.96 C2 1.98 1.02 1.99 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1C151F\",transform:\"translate(653,256)\"})),_path1894||(_path1894=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12 0.94 2.12 0.94 4 2 C1.58 2.81 -0.83 3.63 -3.25 4.44 C-3.93 4.67 -4.61 4.9 -5.32 5.13 C-8.52 6.21 -11.7 7.26 -15 8 C-15.66 7.01 -16.32 6.02 -17 5 C-15.68 5 -14.36 5 -13 5 C-13 4.34 -13 3.68 -13 3 C-5.38 1 -5.38 1 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#291236\",transform:\"translate(598,121)\"})),_path1895||(_path1895=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C-1.96 5 -5.92 5 -10 5 C-7.29 -0.43 -5.81 -0.36 0 0 Z \",fill:\"#44214F\",transform:\"translate(473,1275)\"})),_path1896||(_path1896=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 2.27 1.09 4.54 1.12 6.81 C1.15 8.08 1.17 9.34 1.2 10.64 C1 14 1 14 -1 17 C-1 16.34 -1 15.68 -1 15 C-2.32 14.67 -3.64 14.34 -5 14 C-3.46 9.28 -1.92 4.58 0 0 Z \",fill:\"#2F163D\",transform:\"translate(290,1241)\"})),_path1897||(_path1897=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.66 2 -1.32 2 -2 2 C-2.06 2.95 -2.12 3.9 -2.19 4.88 C-3.06 11.16 -6.53 16.8 -10 22 C-10.66 21.67 -11.32 21.34 -12 21 C-12 19 -12 19 -10 17 C-7.59 12.82 -6.42 8.17 -5 3.58 C-3.82 0.53 -3.25 0 0 0 Z \",fill:\"#3A164A\",transform:\"translate(599,1223)\"})),_path1898||(_path1898=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.57 5.36 6.68 12.63 5.88 19.19 C5.59 20.12 5.3 21.04 5 22 C4.34 22.33 3.68 22.66 3 23 C2.96 21.84 2.96 21.84 2.92 20.66 C2.54 13.73 1.56 8.96 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(604,1089)\"})),_path1899||(_path1899=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.47 3.71 2.67 6.7 2 11 C-0.99 16.66 -0.99 16.66 -5 18 C-4.73 17.26 -4.46 16.51 -4.19 15.75 C-2.54 10.56 -1.28 5.29 0 0 Z \",fill:\"#301243\",transform:\"translate(227,858)\"})),_path1900||(_path1900=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.23 0.76 2.45 1.53 2.69 2.31 C4.27 5.56 5.9 6.29 9 8 C9 8.66 9 9.32 9 10 C9.99 10.33 10.98 10.66 12 11 C11.67 11.66 11.34 12.32 11 13 C8.31 13 8.31 13 5 12 C1.62 8.19 0 5.12 0 0 Z \",fill:\"#401F54\",transform:\"translate(1238,815)\"})),_path1901||(_path1901=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.13 3.29 -1.99 4 -5.12 5.75 C-6.55 6.37 -6.55 6.37 -8 7 C-8 6.01 -8 5.02 -8 4 C-2.74 0 -2.74 0 0 0 Z M-12 6 C-11.01 6 -10.02 6 -9 6 C-9.33 6.99 -9.66 7.98 -10 9 C-10.66 8.67 -11.32 8.34 -12 8 C-12 7.34 -12 6.68 -12 6 Z M-12 8 C-12.66 9.32 -13.32 10.64 -14 12 C-15.65 12 -17.3 12 -19 12 C-19.33 11.34 -19.66 10.68 -20 10 C-17.09 8.74 -15.2 8 -12 8 Z \",fill:\"#6E5074\",transform:\"translate(748,582)\"})),_path1902||(_path1902=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.99 2.64 1.98 4 3 C3.48 5.76 2.89 8.33 2 11 C0.68 11 -0.64 11 -2 11 C-3.15 7.45 -3.09 6.2 -1.56 2.69 C-1.05 1.8 -0.53 0.91 0 0 Z \",fill:\"#846B8B\",transform:\"translate(907,393)\"})),_path1903||(_path1903=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.42 1.43 1.81 2.87 2.19 4.31 C2.41 5.11 2.63 5.91 2.86 6.74 C3 9 3 9 1.69 10.79 C0 12 0 12 -2.25 12.06 C-6.21 10.53 -8.94 7.88 -12 5 C-11.67 4.34 -11.34 3.68 -11 3 C-9.57 4.27 -8.14 5.54 -6.7 6.81 C-4.77 8.31 -4.77 8.31 -1 9 C-0.67 6.03 -0.34 3.06 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(547,391)\"})),_path1904||(_path1904=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.62 0.37 1.24 0.74 1.88 1.12 C2.87 1.12 3.86 1.12 4.88 1.12 C4.88 2.12 4.88 3.11 4.88 4.12 C5.53 4.45 6.2 4.79 6.88 5.12 C2.88 5.12 -1.12 5.12 -5.12 5.12 C-5.12 4.13 -5.12 3.14 -5.12 2.12 C-5.78 1.8 -6.45 1.46 -7.12 1.12 C-2.67 -1.1 -2.67 -1.1 0 0 Z \",fill:\"#1F1722\",transform:\"translate(531.125,352.875)\"})),_path1905||(_path1905=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.42 -0.05 4.83 -0.09 7.25 -0.12 C7.93 -0.14 8.61 -0.16 9.32 -0.18 C13.06 -0.21 15.82 -0.08 19 2 C19 2.66 19 3.32 19 4 C16.39 3.91 13.79 3.81 11.19 3.69 C10.45 3.66 9.71 3.64 8.95 3.62 C3.45 3.35 3.45 3.35 0.99 1.46 C0.66 0.98 0.34 0.5 0 0 Z \",fill:\"#19111D\",transform:\"translate(636,299)\"})),_path1906||(_path1906=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2 1.32 2 2 2 C2 3.32 2 4.64 2 6 C0.67 5.75 0.67 5.75 -0.69 5.5 C-3.54 5.07 -6.13 4.92 -9 5 C-8.75 3.12 -8.75 3.12 -8 1 C-5.09 -1.11 -3.35 -1.2 0 0 Z \",fill:\"#4E3C56\",transform:\"translate(592,284)\"})),_path1907||(_path1907=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.66 8 1.32 8 2 C7.07 2.27 6.14 2.54 5.19 2.81 C2.05 3.71 2.05 3.71 0.56 5.56 C-1.92 7.85 -4.74 7.69 -8 8 C-8 7.34 -8 6.68 -8 6 C-2.59 2 -2.59 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#140E17\",transform:\"translate(658,242)\"})),_path1908||(_path1908=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.25 4.87 2.4 10.48 1.5 16.12 C1.33 16.74 1.17 17.36 1 18 C0.01 18 -0.98 18 -2 18 C-2.23 11.72 -1.4 6.12 0 0 Z \",fill:\"#341A3E\",transform:\"translate(440,1117)\"})),_path1909||(_path1909=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12 0.94 2.12 0.94 4 2 C-1.34 4.86 -6.08 6.73 -12 8 C-12 7.34 -12 6.68 -12 6 C-12.66 5.67 -13.32 5.34 -14 5 C-13.16 4.72 -12.31 4.45 -11.45 4.16 C-10.35 3.8 -9.25 3.44 -8.12 3.06 C-7.03 2.7 -5.94 2.34 -4.82 1.97 C-2.09 1.1 -2.09 1.1 0 0 Z \",fill:\"#1E0D2A\",transform:\"translate(249,1086)\"})),_path1910||(_path1910=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.98 2.56 4.52 5.38 6 9 C5.69 11.38 5.69 11.38 5 13 C4.01 12.67 3.02 12.34 2 12 C2 11.34 2 10.68 2 10 C1.34 9.67 0.68 9.34 0 9 C-1.37 6.27 -1.13 4.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0D0F39\",transform:\"translate(590,933)\"})),_path1911||(_path1911=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.68 0.29 3.34 0.63 5 1 C9.05 1.84 11.99 2.06 16 1 C16.33 1.66 16.66 2.32 17 3 C10.85 4.82 5.4 5.24 -1 5 C-1 1 -1 1 0 0 Z \",fill:\"#311244\",transform:\"translate(245,911)\"})),_path1912||(_path1912=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.23 6.14 0.86 12.1 -1 18 C-1.66 18.33 -2.32 18.66 -3 19 C-4.03 14.41 -3.85 11.21 -2.62 6.69 C-2.21 5.12 -2.21 5.12 -1.79 3.51 C-1 1 -1 1 0 0 Z \",fill:\"#311541\",transform:\"translate(277,826)\"})),_path1913||(_path1913=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.78 3.33 2.49 6.24 3 10 C3.99 9.34 4.98 8.68 6 8 C6.99 9.49 6.99 9.49 8 11 C5.71 17.65 5.71 17.65 3 19 C1.21 12.68 0.46 6.55 0 0 Z \",fill:\"#401F55\",transform:\"translate(1229,773)\"})),_path1914||(_path1914=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 1.72 1.13 1.72 2 4 C0.22 9.47 -3.2 13.85 -8 17 C-6.33 10.84 -3.12 5.52 0 0 Z \",fill:\"#401E4E\",transform:\"translate(341,747)\"})),_path1915||(_path1915=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 0.25 2.88 0.25 6 1 C7.38 3.06 7.38 3.06 8 5 C5.81 6.19 5.81 6.19 3 7 C0.19 5.62 0.19 5.62 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#867396\",transform:\"translate(854,661)\"})),_path1916||(_path1916=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.06 1.21 8.92 2.6 13 6 C13.88 8.75 13.88 8.75 14 11 C12.35 11.33 10.7 11.66 9 12 C9 11.28 9 10.56 9 9.81 C7.61 5.91 5.26 5.02 1.71 3.11 C1.15 2.75 0.58 2.38 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#755B7D\",transform:\"translate(592,557)\"})),_path1917||(_path1917=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 3 5 C2.4 7.35 1.74 9.69 1 12 C-1 10.62 -1 10.62 -3 9 C-3 8.34 -3 7.68 -3 7 C-3.66 6.67 -4.32 6.34 -5 6 C-4.34 6 -3.68 6 -3 6 C-3 5.34 -3 4.68 -3 4 C-3.66 3.67 -4.32 3.34 -5 3 C-3.35 2.01 -1.7 1.02 0 0 Z \",fill:\"#1C0E28\",transform:\"translate(867,456)\"})),_path1918||(_path1918=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.69 1.46 5.16 3.3 7.25 6.62 C7.77 7.44 8.29 8.26 8.83 9.1 C9.21 9.73 9.6 10.35 10 11 C9.01 11.33 8.02 11.66 7 12 C7 11.01 7 10.02 7 9 C6.22 8.69 5.43 8.38 4.62 8.06 C2 7 2 7 0 6 C0 5.34 0 4.68 0 4 C-0.99 3.67 -1.98 3.34 -3 3 C-2.01 2.01 -1.02 1.02 0 0 Z \",fill:\"#6B4C70\",transform:\"translate(543,448)\"})),_path1919||(_path1919=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.85 0.2 -1.71 0.41 -2.59 0.62 C-3.69 0.89 -4.8 1.16 -5.94 1.44 C-7.04 1.7 -8.14 1.97 -9.28 2.25 C-11.89 2.73 -11.89 2.73 -13 4 C-13.07 5.52 -13.08 7.04 -13.06 8.56 C-13.05 9.39 -13.04 10.22 -13.04 11.07 C-13.02 11.7 -13.01 12.34 -13 13 C-15.06 11.31 -15.06 11.31 -17 9 C-17.09 5.45 -16.05 4.06 -13.88 1.25 C-9.17 -2.43 -5.15 -2.9 0 0 Z \",fill:\"#6C4D71\",transform:\"translate(578,436)\"})),_path1920||(_path1920=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 4.62 1.32 9.24 2 14 C0.35 13.01 -1.3 12.02 -3 11 C-3.33 11 -3.66 11 -4 11 C-4.33 8.03 -4.66 5.06 -5 2 C-1 0 -1 0 0 0 Z \",fill:\"#4D3C55\",transform:\"translate(524,421)\"})),_path1921||(_path1921=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 0.25 1.88 0.25 4 1 C6.5 4.57 6.43 8.55 6.62 12.75 C6.66 13.45 6.7 14.14 6.74 14.86 C6.84 16.58 6.92 18.29 7 20 C6.67 20 6.34 20 6 20 C5.74 18.64 5.74 18.64 5.48 17.26 C5.24 16.08 5 14.9 4.75 13.69 C4.52 12.52 4.29 11.34 4.05 10.14 C2.91 6.74 2.05 5.75 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#7C5C7B\",transform:\"translate(558,359)\"})),_path1922||(_path1922=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.08 0.19 2.16 0.39 3.27 0.59 C4.09 0.75 4.91 0.9 5.75 1.06 C6.08 2.38 6.41 3.7 6.75 5.06 C3.94 5.25 3.94 5.25 0.75 5.06 C0.28 4.57 -0.2 4.07 -0.69 3.56 C-2.33 1.65 -2.33 1.65 -5.94 1.88 C-7.03 1.94 -8.12 2 -9.25 2.06 C-9.58 1.4 -9.91 0.74 -10.25 0.06 C-6.6 -1.21 -3.76 -0.69 0 0 Z \",fill:\"#291236\",transform:\"translate(891.25,291.9375)\"})),_path1923||(_path1923=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.4 4.1 1.18 5.73 -1.12 9.25 C-3.25 12.56 -3.04 14.62 -2.25 18.44 C-1.86 19.96 -1.45 21.49 -1 23 C-1.66 23.33 -2.32 23.66 -3 24 C-5.4 19.81 -6.79 16.84 -6 12 C-4.84 10.12 -3.55 8.42 -2.18 6.68 C-0.67 4.54 -0.24 2.59 0 0 Z \",fill:\"#715376\",transform:\"translate(552,280)\"})),_path1924||(_path1924=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C-3.61 4 -9.22 4 -15 4 C-10.57 -0.43 -5.91 -0.2 0 0 Z \",fill:\"#382B3D\",transform:\"translate(684,245)\"})),_path1925||(_path1925=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56 0.23 1.11 0.45 1.69 0.69 C0 4.36 -1.09 5.57 -4.75 7.44 C-7.28 8.33 -9.69 9.16 -12.31 9.69 C-11.67 9.09 -11.03 8.49 -10.38 7.88 C-8.11 5.78 -8.11 5.78 -7.31 2.69 C-3.19 -0.43 -3.19 -0.43 0 0 Z \",fill:\"#1B0C29\",transform:\"translate(592.3125,79.3125)\"})),_path1926||(_path1926=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.52 0.63 10.27 2.51 15.38 4.56 C16.21 4.89 17.04 5.22 17.89 5.56 C19.93 6.37 21.97 7.18 24 8 C24 8.66 24 9.32 24 10 C18.89 8.93 13.93 7.77 9 6 C9 5.34 9 4.68 9 4 C8.44 3.88 7.89 3.75 7.31 3.62 C4.78 2.94 2.42 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#000002\",transform:\"translate(779,64)\"})),_path1927||(_path1927=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C-2.67 6.67 -7.33 11.33 -12 16 C-12.99 15.67 -13.98 15.34 -15 15 C-10 10 -5 5 0 0 Z \",fill:\"#401D4F\",transform:\"translate(583,1254)\"})),_path1928||(_path1928=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.36 3.74 11.07 9.3 12.7 15.79 C12.85 16.88 12.85 16.88 13 18 C9.07 16.51 8 14.62 6 11 C4.42 8.65 2.82 6.32 1.21 3.99 C0 2 0 2 0 0 Z \",fill:\"#331445\",transform:\"translate(123,1217)\"})),_path1929||(_path1929=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.52 8.35 -0.04 15.91 -2 24 C-4.91 19.63 -3.87 16.02 -3 11 C-2.39 9.31 -1.73 7.64 -1 6 C-0.62 4.01 -0.28 2.01 0 0 Z \",fill:\"#321641\",transform:\"translate(446,1113)\"})),_path1930||(_path1930=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 4.29 1.66 8.58 2 13 C2.99 12.67 3.98 12.34 5 12 C4.52 16.71 4.03 20.67 2 25 C1.67 25 1.34 25 1 25 C0.17 19.28 -0.13 13.77 -0.06 8 C-0.06 7.23 -0.05 6.45 -0.05 5.65 C-0.04 3.77 -0.02 1.88 0 0 Z \",fill:\"#2F163C\",transform:\"translate(441,1103)\"})),_path1931||(_path1931=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 3.64 3 6.28 3 9 C0 10 0 10 -3 9 C-3.19 5.62 -3.19 5.62 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#0E0F3A\",transform:\"translate(932,907)\"})),_path1932||(_path1932=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 0.44 2.06 0.44 4 1 C3.67 1.99 3.34 2.98 3 4 C2.43 3.97 1.86 3.93 1.28 3.89 C-4.39 3.7 -7.91 4.56 -13 7 C-13.99 7 -14.98 7 -16 7 C-15.67 6.01 -15.34 5.02 -15 4 C-13.68 4 -12.36 4 -11 4 C-11 3.34 -11 2.68 -11 2 C-9.93 1.91 -9.93 1.91 -8.85 1.82 C-7.47 1.69 -7.47 1.69 -6.06 1.56 C-5.15 1.48 -4.23 1.4 -3.29 1.32 C-1.04 1.24 -1.04 1.24 0 0 Z \",fill:\"#080E35\",transform:\"translate(829,763)\"})),_path1933||(_path1933=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.99 1.34 3.98 0.68 5 0 C4.94 1.73 4.94 1.73 4 4 C1.65 5.59 -0.57 6.94 -3.06 8.25 C-3.73 8.61 -4.39 8.98 -5.07 9.35 C-6.71 10.25 -8.35 11.12 -10 12 C-8.42 8.5 -7.39 7.7 -4 6 C-2.85 4.03 -2.85 4.03 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#857195\",transform:\"translate(707,595)\"})),_path1934||(_path1934=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 1.38 1.5 1.38 3 3 C3 3.66 3 4.32 3 5 C3.99 5.33 4.98 5.66 6 6 C7.36 6.97 8.69 7.96 10 9 C5.98 10.15 4.44 10.22 0.62 8.31 C-0.67 7.17 -0.67 7.17 -2 6 C-2 4.68 -2 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0C0912\",transform:\"translate(553,537)\"})),_path1935||(_path1935=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.09 2.99 3.17 3.98 3.26 5 C4.06 12.84 5.28 18.5 10 25 C9.67 25.66 9.34 26.32 9 27 C8.34 26.67 7.68 26.34 7 26 C7 25.01 7 24.02 7 23 C6.01 22.67 5.02 22.34 4 22 C2.15 17.17 1.66 12.44 1.22 7.31 C0.98 4.83 0.57 2.43 0 0 Z \",fill:\"#3B184B\",transform:\"translate(948,489)\"})),_path1936||(_path1936=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.99 1.34 2.98 1 4 C0.48 9.03 0.22 12.79 3 17.12 C3.66 17.74 4.32 18.36 5 19 C2.69 19 2.69 19 0 18 C-2.54 14.16 -3.27 10.16 -2.81 5.62 C-2 2 -2 2 0 0 Z \",fill:\"#70577E\",transform:\"translate(570,462)\"})),_path1937||(_path1937=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.12 1.75 1.12 1.75 2 4 C1.19 5.81 1.19 5.81 0 8 C-0.14 9.11 -0.29 10.23 -0.44 11.38 C-1.02 15.12 -2.16 17.71 -4 21 C-4.66 20.34 -5.32 19.68 -6 19 C-5.19 16.21 -4.38 13.42 -3.56 10.62 C-3.33 9.83 -3.1 9.04 -2.87 8.22 C-2.64 7.46 -2.42 6.7 -2.19 5.91 C-1.99 5.21 -1.78 4.51 -1.57 3.79 C-1 2 -1 2 0 0 Z \",fill:\"#29103B\",transform:\"translate(420,450)\"})),_path1938||(_path1938=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.26 2.17 3.87 3.28 5.52 6.72 C5.96 7.65 6.41 8.58 6.87 9.54 C7.55 11.01 7.55 11.01 8.25 12.5 C8.72 13.48 9.19 14.45 9.68 15.46 C12.24 20.87 12.24 20.87 13 23 C12.67 23.66 12.34 24.32 12 25 C8.04 20.73 6.44 17.74 5 12 C4.02 9.99 3.02 7.99 2 6 C2 5.34 2 4.68 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#000002\",transform:\"translate(970,418)\"})),_path1939||(_path1939=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C4.44 4.72 4.44 4.72 7 6 C6.67 7.32 6.34 8.64 6 10 C4.68 10.33 3.36 10.66 2 11 C2 10.34 2 9.68 2 9 C1.34 9 0.68 9 0 9 C0 8.34 0 7.68 0 7 C-0.66 6.67 -1.32 6.34 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#2F1838\",transform:\"translate(907,405)\"})),_path1940||(_path1940=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.08 2.44 1.14 4.87 1.19 7.31 C1.23 8.35 1.23 8.35 1.26 9.4 C1.34 14.54 1.34 14.54 -0.45 16.98 C-2 18 -2 18 -3 18 C-3.32 11.28 -2.48 6.24 0 0 Z \",fill:\"#301342\",transform:\"translate(456,307)\"})),_path1941||(_path1941=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76 0.17 1.53 0.33 2.31 0.5 C4 1 4 1 6 3 C3.69 3.66 1.38 4.32 -1 5 C-1.33 4.34 -1.66 3.68 -2 3 C-3.98 3 -5.96 3 -8 3 C-8.33 1.68 -8.66 0.36 -9 -1 C-5.8 -2.6 -3.3 -1.03 0 0 Z \",fill:\"#604766\",transform:\"translate(540,314)\"})),_path1942||(_path1942=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C1.89 4.49 0.74 7.77 -1 11 C-1.66 11 -2.32 11 -3 11 C-3 10.34 -3 9.68 -3 9 C-3.66 9 -4.32 9 -5 9 C-4.52 4.69 -3.25 2.83 0 0 Z \",fill:\"#483650\",transform:\"translate(877,309)\"})),_path1943||(_path1943=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 4.3 4 7.6 4 11 C3.01 11 2.02 11 1 11 C0.88 10.07 0.88 10.07 0.75 9.12 C0.19 6.82 0.19 6.82 -2.06 5.75 C-2.7 5.5 -3.34 5.25 -4 5 C-2.68 3.35 -1.36 1.7 0 0 Z \",fill:\"#221926\",transform:\"translate(688,268)\"})),_path1944||(_path1944=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46 0.11 2.92 0.24 4.38 0.38 C5.59 0.48 5.59 0.48 6.84 0.59 C9 1 9 1 11 3 C12.65 3.71 14.32 4.38 16 5 C16 5.66 16 6.32 16 7 C11.71 6.01 7.42 5.02 3 4 C3 3.34 3 2.68 3 2 C2.01 1.67 1.02 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#281138\",transform:\"translate(763,59)\"})),_path1945||(_path1945=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.55 4.6 -1.23 6.19 -4.44 8.31 C-5.22 8.84 -6 9.38 -6.81 9.93 C-9 11 -9 11 -12 10 C-9.62 7.5 -7.05 5.41 -4.31 3.31 C-3.5 2.69 -2.7 2.07 -1.86 1.43 C-1.25 0.96 -0.63 0.48 0 0 Z \",fill:\"#1F0E2F\",transform:\"translate(401,1204)\"})),_path1946||(_path1946=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.26 -2.48 6.12 -5.25 9.06 C-5.74 9.6 -6.23 10.15 -6.74 10.71 C-9.27 13.44 -11.49 15.65 -15 17 C-12.46 10.13 -12.46 10.13 -8 8 C-6.54 6.67 -5.12 5.29 -3.75 3.88 C-3.04 3.15 -2.34 2.43 -1.61 1.68 C-1.08 1.13 -0.55 0.57 0 0 Z \",fill:\"#3B194C\",transform:\"translate(354,1146)\"})),_path1947||(_path1947=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.22 1.56 6.42 4.41 9 8 C9 9.32 9 10.64 9 12 C6.37 11.63 5.26 11.31 3.52 9.26 C3.1 8.55 2.68 7.85 2.25 7.12 C1.61 6.08 1.61 6.08 0.95 5.01 C0 3 0 3 0 0 Z \",fill:\"#090F36\",transform:\"translate(665,1071)\"})),_path1948||(_path1948=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.56 2.31 0.56 5 2 C6.5 5 6.5 5 7.17 6.86 C8.52 10.34 10.36 13.57 12.11 16.86 C12.4 17.57 12.7 18.27 13 19 C12.67 19.66 12.34 20.32 12 21 C7.69 14.14 3.45 7.34 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(558,1071)\"})),_path1949||(_path1949=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3 2.32 3 3 3 C2.48 8.87 1.24 13.55 -1 19 C-2.04 15.87 -1.93 15.01 -1 12 C-1.66 11.67 -2.32 11.34 -3 11 C-2.11 7.3 -1.05 3.65 0 0 Z \",fill:\"#311640\",transform:\"translate(278,1044)\"})),_path1950||(_path1950=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.95 0 9.9 0 15 C-0.33 14.01 -0.66 13.02 -1 12 C-1.99 12.33 -2.98 12.66 -4 13 C-5.14 9.59 -4.87 9 -3.56 5.81 C-3.28 5.1 -2.99 4.38 -2.69 3.64 C-2.46 3.1 -2.24 2.56 -2 2 C-2.66 1.67 -3.32 1.34 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#211038\",transform:\"translate(1280,1039)\"})),_path1951||(_path1951=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 1.25 2.44 1.25 5 3 C5.62 5.12 5.62 5.12 6 7 C6.99 7.33 7.98 7.66 9 8 C10.19 11.56 10.19 11.56 11 15 C5.29 12.63 3.07 7.45 0.69 2 C0.46 1.34 0.23 0.68 0 0 Z \",fill:\"#452355\",transform:\"translate(336,981)\"})),_path1952||(_path1952=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6 4.81 -0.96 8.88 -3.1 13.24 C-4.27 15.51 -5.47 17.76 -6.69 20 C-7.1 20.77 -7.52 21.55 -7.95 22.35 C-8.96 24.23 -9.98 26.12 -11 28 C-12 25 -12 25 -10.49 21.52 C-9.77 20.14 -9.05 18.75 -8.31 17.38 C-7.57 15.94 -6.82 14.5 -6.08 13.05 C-5.72 12.36 -5.36 11.66 -4.99 10.95 C-3.17 7.37 -1.58 3.69 0 0 Z \",fill:\"#000002\",transform:\"translate(217,804)\"})),_path1953||(_path1953=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.59 11.67 1.59 11.67 -3 16 C-3.74 16.76 -4.49 17.53 -5.25 18.31 C-5.83 18.87 -6.4 19.43 -7 20 C-6.61 16.72 -5.99 14.98 -4.06 12.25 C-1.53 8.27 -0.78 4.6 0 0 Z \",fill:\"#311540\",transform:\"translate(289,797)\"})),_path1954||(_path1954=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.99 2.55 -5.16 3.36 -9 4 C-9.99 4.37 -10.98 4.74 -12 5.12 C-15.19 6.06 -16.86 5.92 -20 5 C-19.67 4.01 -19.34 3.02 -19 2 C-18.11 1.91 -18.11 1.91 -17.21 1.82 C-12.2 1.29 -12.2 1.29 -7.25 0.44 C-4.79 -0.04 -2.5 -0.07 0 0 Z \",fill:\"#0A123C\",transform:\"translate(786,791)\"})),_path1955||(_path1955=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.67 2.52 1.34 3.05 1 3.59 C-0.67 7.62 0.02 11.72 0.22 16 C0 19 0 19 -1.5 20.9 C-2 21.26 -2.49 21.63 -3 22 C-3.66 21.67 -4.32 21.34 -5 21 C-4.52 20.25 -4.52 20.25 -4.03 19.48 C-2.4 15.57 -2.57 11.49 -2.43 7.31 C-2.2 2.2 -2.2 2.2 0 0 Z \",fill:\"#0C0E37\",transform:\"translate(1017,755)\"})),_path1956||(_path1956=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.34 0.29 4.67 0.62 7 1 C8.06 3.38 8.06 3.38 9 6 C8.67 6.66 8.34 7.32 8 8 C4.62 7.31 4.62 7.31 1 6 C-0.44 3.38 -0.44 3.38 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#452254\",transform:\"translate(1059,709)\"})),_path1957||(_path1957=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.13 7.51 2.13 7.51 1.5 9.94 C0.9 12.43 0.9 14.69 0.94 17.25 C0.95 18.59 0.95 18.59 0.96 19.95 C0.98 20.63 0.99 21.3 1 22 C-2.13 18.87 -1.85 15.29 -2 11 C-1.56 1.56 -1.56 1.56 0 0 Z \",fill:\"#351048\",transform:\"translate(470,689)\"})),_path1958||(_path1958=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.52 -0.62 4.14 -2.75 6.81 C-5.33 10.12 -7.71 13.48 -10 17 C-10 12.37 -8.99 8.18 -7 4 C-4.73 2.01 -2.84 1.18 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(695,673)\"})),_path1959||(_path1959=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.97 1 5.94 1 9 C0.34 9 -0.32 9 -1 9 C-1.66 10.32 -2.32 11.64 -3 13 C-4.86 9.87 -5.2 7.63 -5 4 C-4.36 3.71 -3.72 3.42 -3.06 3.12 C-0.85 2.17 -0.85 2.17 0 0 Z \",fill:\"#100A16\",transform:\"translate(666,641)\"})),_path1960||(_path1960=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 1.06 1.5 1.06 3 3 C3.19 6.69 3.19 6.69 3 10 C2.4 10.14 1.8 10.29 1.19 10.44 C-0.56 10.89 -2.29 11.43 -4 12 C-3.46 7.44 -2.21 4.03 0 0 Z \",fill:\"#391946\",transform:\"translate(407,490)\"})),_path1961||(_path1961=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.04 1.57 0.08 2.38 0.12 C3 2.5 3 2.5 3.38 5.12 C2.72 5.79 2.05 6.44 1.38 7.12 C-1.25 6.75 -1.25 6.75 -3.62 6.12 C-4.25 4.25 -4.25 4.25 -4.62 2.12 C-2.62 0.12 -2.62 0.12 0 0 Z \",fill:\"#28103B\",transform:\"translate(936.625,486.875)\"})),_path1962||(_path1962=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.22 0.5 2.43 0.99 3.69 1.5 C6.92 2.72 9.5 3.33 13 3 C13.33 2.01 13.66 1.02 14 0 C14.33 0.66 14.66 1.32 15 2 C13.35 3.65 11.7 5.3 10 7 C9.5 6.67 9.01 6.34 8.5 6 C4.91 4.56 1.86 4.87 -2 5 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#6E5275\",transform:\"translate(544,479)\"})),_path1963||(_path1963=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.71 3.43 5.81 7.62 8.25 12 C8.72 12.82 9.19 13.64 9.68 14.48 C10.12 15.27 10.56 16.06 11.02 16.88 C11.42 17.59 11.83 18.31 12.24 19.05 C13 21 13 21 12 24 C11.34 22.35 10.68 20.7 10 19 C9.34 19 8.68 19 8 19 C7.34 16.69 6.68 14.38 6 12 C5.34 12 4.68 12 4 12 C3.34 9.36 2.68 6.72 2 4 C1.34 4 0.68 4 0 4 C-0.33 3.01 -0.66 2.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#000002\",transform:\"translate(988,453)\"})),_path1964||(_path1964=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.49 0.99 1.49 0.99 3 2 C3 3.32 3 4.64 3 6 C4.32 5.34 5.64 4.68 7 4 C8.12 6.25 8.12 6.25 9 9 C8.12 11.31 8.12 11.31 7 13 C6.34 13 5.68 13 5 13 C4.67 12.01 4.34 11.02 4 10 C3.01 9.34 2.02 8.68 1 8 C0.3 5.34 0.22 2.76 0 0 Z \",fill:\"#1F0E30\",transform:\"translate(482,393)\"})),_path1965||(_path1965=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.66 1.32 4.32 2.64 5 4 C3.35 5.98 1.7 7.96 0 10 C-0.33 9.34 -0.66 8.68 -1 8 C-1.99 8 -2.98 8 -4 8 C-2.88 5.03 -1.78 2.67 0 0 Z \",fill:\"#312436\",transform:\"translate(675,359)\"})),_path1966||(_path1966=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 1.5 1.88 1.5 2.62 5.12 C2.71 6.24 2.79 7.35 2.88 8.5 C1.88 8.83 0.89 9.16 -0.12 9.5 C-1.12 8.84 -2.11 8.18 -3.12 7.5 C-3.31 4.38 -3.31 4.38 -3.12 1.5 C-3.78 1.17 -4.45 0.84 -5.12 0.5 C-2.12 -0.5 -2.12 -0.5 0 0 Z \",fill:\"#514441\",transform:\"translate(943.125,345.5)\"})),_path1967||(_path1967=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.66 8 1.32 8 2 C8.66 2 9.32 2 10 2 C9.34 3.65 8.68 5.3 8 7 C5.69 7.31 5.69 7.31 3 7 C1.18 4.62 0 3.04 0 0 Z \",fill:\"#2F2134\",transform:\"translate(605,306)\"})),_path1968||(_path1968=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.31 2.19 1.31 2.19 1 5 C-1.64 8.23 -3.74 10.53 -8 11 C-7.7 7.41 -7.23 6.22 -4.56 3.69 C-2 2 -2 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A1B45\",transform:\"translate(502,292)\"})),_path1969||(_path1969=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.65 0.66 3.3 1 5 C-2.63 5.66 -6.26 6.32 -10 7 C-10.33 6.34 -10.66 5.68 -11 5 C-10.01 4.67 -9.02 4.34 -8 4 C-7.3 2.68 -6.63 1.35 -6 0 C-3.51 -1.25 -2.59 -0.78 0 0 Z \",fill:\"#140E17\",transform:\"translate(643,253)\"})),_path1970||(_path1970=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.8 0.54 5.47 2.2 8 5 C7.22 5.29 6.43 5.58 5.62 5.88 C2.9 6.85 2.9 6.85 1 9 C0.67 7.68 0.34 6.36 0 5 C-0.66 5 -1.32 5 -2 5 C-2.33 5.66 -2.66 6.32 -3 7 C-3.33 5.68 -3.66 4.36 -4 3 C-2.35 3 -0.7 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#1D0C2C\",transform:\"translate(551,112)\"})),_path1971||(_path1971=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.19 2.5 1.19 5 3 C5.31 5.69 5.31 5.69 5 8 C2.69 8 0.38 8 -2 8 C-2.69 5.69 -2.69 5.69 -3 3 C-1.56 1.19 -1.56 1.19 0 0 Z \",fill:\"#090F36\",transform:\"translate(764,1272)\"})),_path1972||(_path1972=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56 2.01 7.76 4.19 11 8 C11 8.99 11 9.98 11 11 C8 11 8 11 5.5 8.56 C4.67 7.72 3.85 6.87 3 6 C2.01 5.67 1.02 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(926,1269)\"})),_path1973||(_path1973=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0 3 0 5.69 2.31 C8 5 8 5 8 8 C7.34 8 6.68 8 6 8 C6 8.99 6 9.98 6 11 C5.34 11 4.68 11 4 11 C1.38 7.44 0.51 4.36 0 0 Z \",fill:\"#25102D\",transform:\"translate(105,1185)\"})),_path1974||(_path1974=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.87 0.57 3.86 0.86 6 3 C5.62 5.62 5.62 5.62 5 8 C2.62 7.75 2.62 7.75 0 7 C-1.31 4.94 -1.31 4.94 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#0D0F3B\",transform:\"translate(889,1104)\"})),_path1975||(_path1975=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-1.12 6.06 -1.12 6.06 -4 8 C-7.31 7.75 -7.31 7.75 -10 7 C-10.33 6.01 -10.66 5.02 -11 4 C-10.29 3.88 -9.58 3.76 -8.85 3.63 C-7.93 3.47 -7.01 3.3 -6.06 3.12 C-5.15 2.96 -4.23 2.8 -3.29 2.63 C-2.53 2.42 -1.78 2.22 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#0E0F3A\",transform:\"translate(975,978)\"})),_path1976||(_path1976=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.26 0.53 0.52 1.05 0.78 1.6 C2.87 5.72 5.13 9.75 7.34 13.81 C8.74 16.51 9.94 19.16 11 22 C6.09 18.73 4.35 15.18 2 10 C1.4 8.93 0.8 7.86 0.19 6.75 C-1 4 -1 4 -0.69 1.62 C-0.46 1.09 -0.23 0.55 0 0 Z \",fill:\"#291234\",transform:\"translate(282,897)\"})),_path1977||(_path1977=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.52 4.1 -2.65 5.96 -5.56 8.75 C-6.8 9.95 -6.8 9.95 -8.07 11.17 C-8.7 11.78 -9.34 12.38 -10 13 C-10 9.42 -9.07 8.77 -7 6 C-7 5.01 -7 4.02 -7 3 C-4.47 0.64 -3.53 0 0 0 Z \",fill:\"#391A46\",transform:\"translate(254,771)\"})),_path1978||(_path1978=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C5.49 14.56 5.49 14.56 5 21 C4.34 21.66 3.68 22.32 3 23 C2.34 23 1.68 23 1 23 C1 22.34 1 21.68 1 21 C1.66 21 2.32 21 3 21 C2.86 19.54 2.71 18.08 2.56 16.62 C2.44 15.41 2.44 15.41 2.32 14.16 C2.11 11.96 2.11 11.96 1 10 C1 8 1 6 1 4 C0.56 1.73 0.56 1.73 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(660,669)\"})),_path1979||(_path1979=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.98 0.89 0.96 1.79 0.94 2.71 C1.1 12.26 3.22 17.3 10 24 C9.34 24.33 8.68 24.66 8 25 C1.81 18.36 -1.31 13.13 -2 4 C-1.34 4 -0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#472758\",transform:\"translate(1149,642)\"})),_path1980||(_path1980=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.58 2.89 2.46 5.53 3.12 8.75 C3.29 9.55 3.46 10.35 3.63 11.17 C3.81 12.08 3.81 12.08 4 13 C2.68 13.33 1.36 13.66 0 14 C-0.53 12.57 -1.05 11.13 -1.56 9.69 C-1.85 8.89 -2.14 8.09 -2.44 7.26 C-3 5 -3 5 -2 2 C-1.34 2.33 -0.68 2.66 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#2B1339\",transform:\"translate(876,594)\"})),_path1981||(_path1981=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.01 1.5 2.01 1.5 1 2 C1.99 3.49 1.99 3.49 3 5 C3.42 6.65 3.77 8.32 4.06 10 C4.57 12.79 5.1 15.3 6 18 C6.04 20 6.04 22 6 24 C3.71 21.71 3.58 20.73 3 17.62 C2.54 15.17 2.12 13.22 0.95 11.01 C-0.19 8.6 -0.2 6.9 -0.12 4.25 C-0.11 3.45 -0.09 2.65 -0.07 1.83 C-0.05 1.22 -0.02 0.62 0 0 Z \",fill:\"#240D38\",transform:\"translate(898,568)\"})),_path1982||(_path1982=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.68 1.48 4.68 1.48 6.31 4.12 C6.54 4.74 6.77 5.36 7 6 C5.35 7.32 3.7 8.64 2 10 C-0.13 6.8 -0.59 4.77 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#846E8F\",transform:\"translate(873,431)\"})),_path1983||(_path1983=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C1.61 6.42 -0.4 9.08 -4 12 C-6.31 11.81 -6.31 11.81 -8 11 C-8 10.34 -8 9.68 -8 9 C-7.22 8.94 -6.43 8.88 -5.62 8.81 C-4.33 8.41 -4.33 8.41 -3 8 C-1.66 5.65 -1.66 5.65 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#7C6E9D\",transform:\"translate(606,340)\"})),_path1984||(_path1984=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.67 3.96 4.34 7.92 4 12 C3.01 11.67 2.02 11.34 1 11 C-0.2 8.59 -0.1 7.05 -0.06 4.38 C-0.05 3.56 -0.04 2.74 -0.04 1.9 C-0.02 1.27 -0.01 0.65 0 0 Z \",fill:\"#160A1F\",transform:\"translate(499,336)\"})),_path1985||(_path1985=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 5.28 2 10.56 2 16 C1.01 15.67 0.02 15.34 -1 15 C-1.03 12.88 -1.05 10.75 -1.06 8.62 C-1.07 7.44 -1.09 6.26 -1.1 5.04 C-1 2 -1 2 0 0 Z \",fill:\"#261137\",transform:\"translate(497,318)\"})),_path1986||(_path1986=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.69 -0.38 2.69 -0.38 6 0 C8.06 1.82 9.39 3.73 11 6 C6.16 6.11 2.55 5.52 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#715376\",transform:\"translate(539,310)\"})),_path1987||(_path1987=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.54 9.26 1.77 14 4 C14 4.66 14 5.32 14 6 C4.19 5.38 4.19 5.38 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#160A1E\",transform:\"translate(831,300)\"})),_path1988||(_path1988=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28 2.57 0.78 3.45 0.06 6.19 C-0.92 10.27 -1.18 13.82 -1 18 C0.32 18.33 1.64 18.66 3 19 C3 19.66 3 20.32 3 21 C-1.88 20.12 -1.88 20.12 -3 19 C-3.41 12.81 -3.64 6.74 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(593,292)\"})),_path1989||(_path1989=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.05 3.36 -0.05 3.36 -1.12 4.74 C-2.04 5.93 -2.96 7.12 -3.88 8.31 C-4.34 8.91 -4.8 9.5 -5.27 10.12 C-7.26 12.7 -9.19 15.28 -11 18 C-11.66 17.67 -12.32 17.34 -13 17 C-10.95 11.19 -8.88 8.71 -4 5 C-3.67 4.34 -3.34 3.68 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#482758\",transform:\"translate(504,281)\"})),_path1990||(_path1990=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.57 2.63 1.15 3.94 1.75 C4.67 2.07 5.4 2.4 6.15 2.73 C8 4 8 4 8.75 6.14 C8.84 6.75 8.92 7.37 9 8 C8.01 8.33 7.02 8.66 6 9 C0.26 5.79 0.26 5.79 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#1B0E29\",transform:\"translate(889,276)\"})),_path1991||(_path1991=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.65 0.13 1.3 0.27 1.98 0.4 C6.64 1.34 11.3 2.26 16 3 C13.51 5.39 12.01 6 8.56 6.56 C4.78 5.97 4.35 5.75 2.06 3 C1.38 2.01 0.7 1.02 0 0 Z \",fill:\"#040308\",transform:\"translate(184,1093)\"})),_path1992||(_path1992=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.37 0.49 0.75 0.99 1.13 1.5 C3.77 3.62 5.55 3.23 8.88 3.06 C13.24 2.85 16 3.26 20 5 C23.21 5.17 23.21 5.17 26 5 C24 7 24 7 20.9 7.19 C16.75 6.99 12.68 6.56 8.56 6 C7.47 5.86 7.47 5.86 6.35 5.71 C4.56 5.48 2.78 5.24 1 5 C0.67 4.01 0.34 3.02 0 2 C-0.66 1.67 -1.32 1.34 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#6A4B70\",transform:\"translate(1100,1042)\"})),_path1993||(_path1993=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.43 4.79 0.02 8.54 -2.06 12.88 C-2.61 14.03 -3.16 15.18 -3.72 16.37 C-4.14 17.24 -4.57 18.1 -5 19 C-5.66 18.01 -6.32 17.02 -7 16 C-5.9 11.14 -3.49 7.25 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#0A113B\",transform:\"translate(1034,1016)\"})),_path1994||(_path1994=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-7.41 4.19 -16.68 4.28 -25 4 C-18.09 -0.61 -8.1 -0.27 0 0 Z \",fill:\"#0A0F36\",transform:\"translate(731,814)\"})),_path1995||(_path1995=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.57 2.84 3.57 2.84 3.12 3.69 C1.96 6.08 0.97 8.52 0 11 C-1.65 11 -3.3 11 -5 11 C-3.55 7.21 -1.85 3.61 0 0 Z \",fill:\"#2E1A34\",transform:\"translate(601,791)\"})),_path1996||(_path1996=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C-0.03 6.7 -2.69 11.35 -8 16 C-8.99 16 -9.98 16 -11 16 C-10.2 15.13 -9.39 14.27 -8.56 13.38 C-5.58 9.81 -5 6.61 -5 2 C-4.34 2 -3.68 2 -3 2 C-3 2.99 -3 3.98 -3 5 C-2.34 5 -1.68 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#090F36\",transform:\"translate(1014,783)\"})),_path1997||(_path1997=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.66 1.34 2.32 1 3 C0.01 3 -0.98 3 -2 3 C-2.33 3.66 -2.66 4.32 -3 5 C-4.97 5.3 -6.94 5.58 -8.92 5.78 C-11.32 6.03 -13.65 6.49 -16 7 C-16.33 5.68 -16.66 4.36 -17 3 C-16.11 2.95 -15.22 2.9 -14.3 2.85 C-12.54 2.74 -12.54 2.74 -10.75 2.62 C-9.01 2.52 -9.01 2.52 -7.23 2.41 C-4.25 2.03 -2.6 1.37 0 0 Z \",fill:\"#0D0F39\",transform:\"translate(841,772)\"})),_path1998||(_path1998=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 0.36 1.21 0.36 2.44 0.73 C4.44 1.81 4.44 1.81 5.21 3.93 C5.33 4.86 5.33 4.86 5.44 5.81 C0.71 5.35 -2.73 4.71 -6.56 1.81 C-6.56 1.15 -6.56 0.49 -6.56 -0.19 C-3.88 -1.53 -2.82 -0.89 0 0 Z \",fill:\"#22102D\",transform:\"translate(1115.5625,652.1875)\"})),_path1999||(_path1999=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.02 3.73 3.02 3.73 5 4 C2.21 4.05 -0.58 4.09 -3.38 4.12 C-4.17 4.14 -4.96 4.16 -5.78 4.18 C-7.85 4.19 -9.93 4.1 -12 4 C-12.66 3.34 -13.32 2.68 -14 2 C-4.59 -0.3 -4.59 -0.3 0 0 Z \",fill:\"#1E1129\",transform:\"translate(632,628)\"})),_path2000||(_path2000=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.62 0.88 7.62 0.88 11 2 C8.81 4.56 8.81 4.56 6 7 C3.19 6.81 3.19 6.81 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#897796\",transform:\"translate(669,613)\"})),_path2001||(_path2001=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 0.75 4.75 0.75 7 3 C6.91 7.16 6.24 8.73 3.44 11.88 C2.63 12.58 1.83 13.28 1 14 C0.34 13.67 -0.32 13.34 -1 13 C-0.32 12.09 0.36 11.18 1.06 10.25 C3.22 7.32 3.22 7.32 2.88 4.81 C1.92 2.74 1.92 2.74 0 0 Z \",fill:\"#816786\",transform:\"translate(638,560)\"})),_path2002||(_path2002=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-3.3 6.1 -4.4 5.87 -7.69 5.06 C-8.5 4.87 -9.3 4.67 -10.14 4.47 C-10.75 4.32 -11.37 4.16 -12 4 C-9 0.66 -4.39 -2.2 0 0 Z \",fill:\"#785979\",transform:\"translate(598,477)\"})),_path2003||(_path2003=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.64 0.74 1.28 1.49 1.94 2.25 C5.34 5.7 9.55 7.26 14 9 C14 9.66 14 10.32 14 11 C9.22 10.42 5.17 9.45 1 7 C0.06 3.31 0.06 3.31 0 0 Z \",fill:\"#5E3D64\",transform:\"translate(668,333)\"})),_path2004||(_path2004=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.19 1.57 0.37 2.38 0.56 C4.97 1.26 4.97 1.26 7 0 C7 2.97 7 5.94 7 9 C6.01 9 5.02 9 4 9 C3.73 8.38 3.46 7.76 3.19 7.12 C2.04 4.7 2.04 4.7 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#856B8A\",transform:\"translate(916,326)\"})),_path2005||(_path2005=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C0.32 5.34 0.65 7.67 1 10 C0.34 10 -0.32 10 -1 10 C-1.25 9.22 -1.5 8.43 -1.75 7.62 C-3.19 4.6 -3.97 4.19 -7 3 C-7.99 2.34 -8.98 1.68 -10 1 C-6.15 -1.57 -4.41 -0.83 0 0 Z \",fill:\"#16101A\",transform:\"translate(635,314)\"})),_path2006||(_path2006=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.83 0.5 1.67 1.01 1.5 1.52 C0.69 5.54 1 9.61 1.13 13.69 C1.16 15.46 1.08 17.23 1 19 C0.34 19.66 -0.32 20.32 -1 21 C-1 18.36 -1 15.72 -1 13 C-1.66 13 -2.32 13 -3 13 C-2.01 8.71 -1.02 4.42 0 0 Z \",fill:\"#371A42\",transform:\"translate(474,226)\"})),_path2007||(_path2007=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.15 0.93 2.3 1.87 3.44 2.81 C4.08 3.33 4.71 3.86 5.37 4.39 C7 6 7 6 8 9 C6.35 9.33 4.7 9.66 3 10 C1.35 8.02 -0.3 6.04 -2 4 C-1.01 4 -0.02 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#28132F\",transform:\"translate(735,216)\"})),_path2008||(_path2008=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.26 1.56 1.26 1.56 0.5 2.14 C-1.61 4.76 -1.2 6.5 -1 9.81 C-0.85 14.88 -1.2 17.8 -4 22 C-5.4 17.81 -4.57 14.32 -4 10 C-3.88 8.72 -3.75 7.44 -3.62 6.12 C-2.99 2.96 -2.55 1.88 0 0 Z \",fill:\"#795979\",transform:\"translate(570,168)\"})),_path2009||(_path2009=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.12 0.64 0.25 1.28 0.38 1.94 C0.68 2.96 0.68 2.96 1 4 C1.66 4.33 2.32 4.66 3 5 C1.71 6.38 0.37 7.71 -1 9 C-1.66 9 -2.32 9 -3 9 C-3.33 9.99 -3.66 10.98 -4 12 C-4.66 10.68 -5.32 9.36 -6 8 C-5.34 8 -4.68 8 -4 8 C-3.9 7.24 -3.79 6.47 -3.69 5.69 C-2.96 2.83 -2.23 1.84 0 0 Z \",fill:\"#381A43\",transform:\"translate(552,1246)\"})),_path2010||(_path2010=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.57 2.57 2.54 4.48 3 8 C3.66 8 4.32 8 5 8 C5.99 10.97 6.98 13.94 8 17 C7.34 17 6.68 17 6 17 C-1.24 7.19 -1.24 7.19 -0.69 2.12 C-0.46 1.42 -0.23 0.72 0 0 Z \",fill:\"#341446\",transform:\"translate(136,1192)\"})),_path2011||(_path2011=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-7.85 4.39 -15.2 4.24 -24 4 C-24 3.67 -24 3.34 -24 3 C-21.5 2.49 -19 1.99 -16.5 1.5 C-15.8 1.36 -15.11 1.21 -14.39 1.07 C-9.51 0.12 -4.97 -0.13 0 0 Z \",fill:\"#190B24\",transform:\"translate(221,1096)\"})),_path2012||(_path2012=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 2.56 1.94 2.56 3 5 C-4.62 4.12 -4.62 4.12 -8 3 C-8.33 2.01 -8.66 1.02 -9 0 C-5.78 -1.61 -3.41 -0.84 0 0 Z \",fill:\"#1B0C29\",transform:\"translate(186,1094)\"})),_path2013||(_path2013=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-2.23 4.11 -3.53 4.16 -6 4.19 C-7.05 4.21 -7.05 4.21 -8.12 4.23 C-10 4 -10 4 -12 2 C-11.67 1.34 -11.34 0.68 -11 0 C-3.82 -1.27 -3.82 -1.27 0 0 Z \",fill:\"#795F82\",transform:\"translate(1119,1038)\"})),_path2014||(_path2014=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62 0.38 2.62 0.38 5 1 C5.62 2.88 5.62 2.88 6 5 C5.34 5.66 4.68 6.32 4 7 C1.38 6.62 1.38 6.62 -1 6 C-1.62 4.12 -1.62 4.12 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#0D0F38\",transform:\"translate(585,881)\"})),_path2015||(_path2015=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-1.98 8.99 -3.96 9.98 -6 11 C-5.91 9.54 -5.8 8.08 -5.69 6.62 C-5.63 5.81 -5.57 5 -5.51 4.16 C-4.78 1.07 -3.18 0 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(753,798)\"})),_path2016||(_path2016=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.36 7.24 2.36 7.24 0.81 10.5 C-1 12 -1 12 -3.69 12.25 C-4.45 12.17 -5.21 12.09 -6 12 C-6 11.34 -6 10.68 -6 10 C-6.66 10 -7.32 10 -8 10 C-7.67 9.01 -7.34 8.02 -7 7 C-5.35 7 -3.7 7 -2 7 C-2.33 7.99 -2.66 8.98 -3 10 C-2.34 10 -1.68 10 -1 10 C-0.67 6.7 -0.34 3.4 0 0 Z \",fill:\"#080E35\",transform:\"translate(1017,766)\"})),_path2017||(_path2017=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4 3.01 4.1 5.04 4.06 8.19 C4.05 9.09 4.04 9.99 4.04 10.92 C4.02 11.61 4.01 12.29 4 13 C3.01 12.67 2.02 12.34 1 12 C-0.62 8.32 -0.07 3.93 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(1218,756)\"})),_path2018||(_path2018=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-0.96 4.96 -4.92 8.92 -9 13 C-9.33 12.01 -9.66 11.02 -10 10 C-8.71 8.52 -7.42 7.04 -6.12 5.56 C-5.41 4.74 -4.69 3.92 -3.95 3.07 C-2 1 -2 1 0 0 Z \",fill:\"#28132F\",transform:\"translate(658,728)\"})),_path2019||(_path2019=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C-5.49 4.57 -13.15 5.39 -22 5 C-22.33 4.34 -22.66 3.68 -23 3 C-21.64 2.93 -21.64 2.93 -20.25 2.85 C-11.96 2.36 -11.96 2.36 -3.81 0.81 C-1.93 0.41 -1.93 0.41 0 0 Z \",fill:\"#421F4F\",transform:\"translate(1041,637)\"})),_path2020||(_path2020=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.37 6.42 3.37 6.42 1.5 9.38 C1 9.91 0.51 10.45 0 11 C-1.32 10.67 -2.64 10.34 -4 10 C-2.68 6.7 -1.36 3.4 0 0 Z \",fill:\"#2B1E30\",transform:\"translate(824,506)\"})),_path2021||(_path2021=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.67 2.64 2.34 5.28 2 8 C1.34 8 0.68 8 0 8 C-0.4 9.11 -0.4 9.11 -0.81 10.25 C-1.94 12.87 -3.21 14.8 -5 17 C-4.46 10.82 -2.45 5.67 0 0 Z \",fill:\"#46354D\",transform:\"translate(828,491)\"})),_path2022||(_path2022=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3 7.94 3 13.88 3 20 C2.67 20 2.34 20 2 20 C1.87 19.39 1.73 18.77 1.6 18.14 C1.42 17.33 1.24 16.52 1.06 15.69 C0.89 14.89 0.71 14.09 0.54 13.26 C0 10.85 0 10.85 -1 8 C-0.84 5.3 -0.4 2.68 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(479,446)\"})),_path2023||(_path2023=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 2.99 4 3.98 4 5 C4.66 5.66 5.32 6.32 6 7 C1.98 7.84 -1.02 8.05 -5 7 C-3.89 3.66 -2.53 2.36 0 0 Z \",fill:\"#2C1E32\",transform:\"translate(830,379)\"})),_path2024||(_path2024=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-2.18 3.12 -2.18 3.12 -3.38 3.25 C-6.15 3.73 -6.15 3.73 -7.31 6.06 C-7.65 7.02 -7.65 7.02 -8 8 C-8.66 7.34 -9.32 6.68 -10 6 C-9.75 2.94 -9.75 2.94 -9 0 C-5.93 -1.53 -3.3 -0.55 0 0 Z \",fill:\"#795E82\",transform:\"translate(909,361)\"})),_path2025||(_path2025=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.12 4.88 1.12 4.88 0 6 C-1.68 6.23 -3.37 6.41 -5.06 6.56 C-5.98 6.65 -6.9 6.73 -7.85 6.82 C-8.56 6.88 -9.27 6.94 -10 7 C-10.33 5.68 -10.66 4.36 -11 3 C-5.55 2.5 -5.55 2.5 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#513158\",transform:\"translate(645,341)\"})),_path2026||(_path2026=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 0.58 3.76 0.24 6.06 -0.5 C5.25 1.44 5.25 1.44 4.06 3.5 C1.06 4.5 1.06 4.5 -0.69 3.81 C-4.44 3.29 -6.81 5.52 -9.94 7.5 C-10.27 6.18 -10.6 4.86 -10.94 3.5 C-8.86 2.95 -7.09 2.5 -4.94 2.5 C-4.94 1.84 -4.94 1.18 -4.94 0.5 C-1.94 -0.5 -1.94 -0.5 0 0 Z \",fill:\"#201723\",transform:\"translate(590.9375,280.5)\"})),_path2027||(_path2027=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 1.65 3.96 3.3 6 5 C5.01 6.32 4.02 7.64 3 9 C1.02 8.34 -0.96 7.68 -3 7 C-2.62 4.06 -2.62 4.06 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#361844\",transform:\"translate(814,281)\"})),_path2028||(_path2028=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.86 3.42 6.93 6.34 9.12 11.85 C10.01 14.2 10.01 14.2 11.81 16.94 C12.2 17.62 12.6 18.3 13 19 C12.67 19.66 12.34 20.32 12 21 C11.34 19.68 10.68 18.36 10 17 C9.34 17 8.68 17 8 17 C6.5 13.63 6 11.8 6 8 C5.34 8 4.68 8 4 8 C3.67 7.01 3.34 6.02 3 5 C2.48 4.48 1.97 3.97 1.44 3.44 C0.96 2.96 0.49 2.49 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(758,222)\"})),_path2029||(_path2029=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 3 5 C-2.4 3.85 -7.71 2.58 -13 1 C-13 0.67 -13 0.34 -13 0 C-4.17 -1.35 -4.17 -1.35 0 0 Z \",fill:\"#411E4E\",transform:\"translate(842,93)\"})),_path2030||(_path2030=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 0.99 4.46 0.99 9 2 C9 2.99 9 3.98 9 5 C3.58 6.23 3.58 6.23 0.62 5.06 C0.09 4.71 -0.45 4.36 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#3B174B\",transform:\"translate(632,73)\"})),_path2031||(_path2031=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.1 4.41 2.08 8.48 2 13 C0.68 13 -0.64 13 -2 13 C-2.05 11.58 -2.09 10.17 -2.12 8.75 C-2.15 7.96 -2.17 7.17 -2.2 6.36 C-1.98 3.79 -1.29 2.21 0 0 Z \",fill:\"#594760\",transform:\"translate(1011,1267)\"})),_path2032||(_path2032=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3.33 2.32 3.66 3 4 C0.42 6.65 -1.92 8.94 -5 11 C-5.68 9.23 -5.68 9.23 -6 7 C-4.79 5.08 -4.79 5.08 -3.06 3.25 C-2.5 2.64 -1.93 2.02 -1.35 1.39 C-0.9 0.93 -0.46 0.47 0 0 Z \",fill:\"#2F163C\",transform:\"translate(561,1236)\"})),_path2033||(_path2033=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.96 2 7.92 2 12 C2.66 12 3.32 12 4 12 C3.67 14.64 3.34 17.28 3 20 C2.34 19.67 1.68 19.34 1 19 C-0.02 14.69 -0.11 10.54 -0.06 6.12 C-0.05 4.97 -0.04 3.82 -0.04 2.63 C-0.02 1.76 -0.01 0.9 0 0 Z \",fill:\"#0A123C\",transform:\"translate(843,1185)\"})),_path2034||(_path2034=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.82 -0.59 7.75 0.34 11.52 3.23 C14.31 6.56 14.82 10.75 15 15 C14.67 15.66 14.34 16.32 14 17 C12.43 15.43 12.39 13.57 11.94 11.44 C11.67 10.2 11.67 10.2 11.4 8.93 C11.27 8.3 11.14 7.66 11 7 C10.01 7 9.02 7 8 7 C8 6.01 8 5.02 8 4 C7.34 4 6.68 4 6 4 C5.67 3.34 5.34 2.68 5 2 C2.47 1.34 2.47 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#311540\",transform:\"translate(227,1148)\"})),_path2035||(_path2035=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.53 6.25 0.03 8.2 -3 11 C-3.66 9.35 -4.32 7.7 -5 6 C-3.35 4.02 -1.7 2.04 0 0 Z \",fill:\"#1E0E30\",transform:\"translate(149,1148)\"})),_path2036||(_path2036=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17 3.43 0.81 5.54 -0.21 8.98 C-0.49 9.92 -0.76 10.85 -1.04 11.82 C-1.34 12.78 -1.63 13.75 -1.94 14.75 C-2.23 15.73 -2.52 16.72 -2.82 17.73 C-3.54 20.16 -4.26 22.58 -5 25 C-5.33 25 -5.66 25 -6 25 C-6.35 18.62 -5.28 13.93 -3 8 C-2.71 7.23 -2.43 6.45 -2.13 5.65 C-1.43 3.76 -0.72 1.88 0 0 Z \",fill:\"#472758\",transform:\"translate(433,1138)\"})),_path2037||(_path2037=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.99 -0.32 9.64 0.32 15 3 C13 5 13 5 10 5.19 C7 5 7 5 5 4 C5 3.34 5 2.68 5 2 C3.35 1.67 1.7 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#100918\",transform:\"translate(215,1139)\"})),_path2038||(_path2038=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C-1.53 6.42 -5.62 9.14 -11 11 C-11.99 10.67 -12.98 10.34 -14 10 C-13.46 9.77 -12.91 9.54 -12.36 9.3 C-7.69 7.17 -5.41 5.68 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#2C123D\",transform:\"translate(342,1133)\"})),_path2039||(_path2039=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.99 3 4.98 3 6 3 C6.33 6.3 6.66 9.6 7 13 C6.34 13 5.68 13 5 13 C2.71 10.44 1.61 8.36 1 5 C0.81 4.09 0.63 3.18 0.44 2.25 C0.29 1.51 0.15 0.76 0 0 Z \",fill:\"#381A43\",transform:\"translate(308,914)\"})),_path2040||(_path2040=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.76 1.49 5.45 3.54 7.75 6.81 C8.67 8.09 8.67 8.09 9.61 9.39 C11.12 12.22 11.29 13.85 11 17 C8.58 14.09 6.68 11.37 5 8 C4.51 7.53 4.01 7.05 3.5 6.56 C1.6 4.58 0.9 2.56 0 0 Z \",fill:\"#452351\",transform:\"translate(1206,694)\"})),_path2041||(_path2041=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.12 2.31 0.12 5 1 C7.36 4.66 8 6.6 8 11 C7.01 11 6.02 11 5 11 C5.33 12.32 5.66 13.64 6 15 C5.34 15 4.68 15 4 15 C3.91 11.8 4.09 9.07 5 6 C3.68 6 2.36 6 1 6 C1 4.68 1 3.36 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#280F3B\",transform:\"translate(938,674)\"})),_path2042||(_path2042=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46 0.4 2.92 0.82 4.38 1.25 C5.19 1.48 6 1.71 6.84 1.95 C9.46 3.22 9.99 4.32 11 7 C9 8 9 8 7.09 7.62 C4.93 6.87 2.97 6.15 1 5 C0 2.31 0 2.31 0 0 Z \",fill:\"#1B0A32\",transform:\"translate(924,605)\"})),_path2043||(_path2043=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.51 1.27 3 2.54 3.5 3.81 C3.92 4.87 3.92 4.87 4.34 5.96 C5 8 5 8 5 11 C2.03 10.5 2.03 10.5 -1 10 C-1.33 8.02 -1.66 6.04 -2 4 C-1.34 4 -0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#1E1522\",transform:\"translate(581,587)\"})),_path2044||(_path2044=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.4 4.59 10.71 9.28 16 14 C15.01 14.33 14.02 14.66 13 15 C11.39 13.56 9.79 12.13 8.19 10.69 C7.29 9.89 6.4 9.09 5.48 8.26 C4.66 7.52 3.84 6.77 3 6 C2.4 5.47 1.8 4.94 1.18 4.39 C0 3 0 3 0 0 Z \",fill:\"#42204D\",transform:\"translate(976,563)\"})),_path2045||(_path2045=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.06 0.44 2.06 0.44 4 1 C4.69 2.81 4.69 2.81 5 5 C3.56 6.75 3.56 6.75 2 8 C0.68 7.34 -0.64 6.68 -2 6 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#634369\",transform:\"translate(553,468)\"})),_path2046||(_path2046=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C5.12 5.75 5.12 5.75 4 8 C1.56 7.62 1.56 7.62 -1 7 C-1.33 6.34 -1.66 5.68 -2 5 C-1.06 2.38 -1.06 2.38 0 0 Z \",fill:\"#311540\",transform:\"translate(527,468)\"})),_path2047||(_path2047=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.65 5.84 1.5 9.01 -2.12 13.75 C-5.14 17.25 -8.32 20.22 -12 23 C-10.49 19.57 -8.46 17.12 -6 14.31 C-2.1 9.56 -0.78 6.05 0 0 Z \",fill:\"#80719E\",transform:\"translate(741,396)\"})),_path2048||(_path2048=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.92 1.07 4.78 1.78 7 4 C7 4.99 7 5.98 7 7 C4.36 7.33 1.72 7.66 -1 8 C-1.04 5.67 -1.04 3.33 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#1D1420\",transform:\"translate(519,372)\"})),_path2049||(_path2049=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.46 0.02 2.46 0.02 5.38 0.38 C8.65 0.75 11.69 1 15 1 C15 1.66 15 2.32 15 3 C8.33 5.64 4.58 4.3 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#806787\",transform:\"translate(561,351)\"})),_path2050||(_path2050=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.75 3.75 3.69 7.98 4 13 C3.01 13.5 3.01 13.5 2 14 C2 13.34 2 12.68 2 12 C1.34 12 0.68 12 0 12 C-0.19 10.19 -0.38 8.38 -0.56 6.56 C-0.67 5.55 -0.77 4.54 -0.88 3.5 C-0.92 2.68 -0.96 1.85 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2A1237\",transform:\"translate(832,331)\"})),_path2051||(_path2051=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0.19 2 0.19 4 1 C4.66 1.99 5.32 2.98 6 4 C5.01 4 4.02 4 3 4 C3 4.66 3 5.32 3 6 C2.34 6 1.68 6 1 6 C1 7.65 1 9.3 1 11 C-0.5 9.88 -0.5 9.88 -2 8 C-2.31 4.94 -2.31 4.94 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#755B7D\",transform:\"translate(648,325)\"})),_path2052||(_path2052=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 3.75 5.31 C3.97 8.55 3.84 10.9 3 14 C2.01 14 1.02 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#775878\",transform:\"translate(780,269)\"})),_path2053||(_path2053=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 0 6 C-1.85 6.73 -1.85 6.73 -4.06 7.19 C-4.8 7.35 -5.53 7.5 -6.29 7.67 C-7.13 7.83 -7.13 7.83 -8 8 C-5.74 0 -5.74 0 0 0 Z \",fill:\"#211924\",transform:\"translate(632,254)\"})),_path2054||(_path2054=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.38 6.58 5.55 12.21 6 20 C4 17 4 17 4 14 C3.34 14 2.68 14 2 14 C0.41 9.13 -0.21 5.19 0 0 Z \",fill:\"#341840\",transform:\"translate(911,175)\"})),_path2055||(_path2055=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-0.59 3.99 -1.18 3.98 -1.79 3.96 C-6 3.92 -9.89 3.94 -14 5 C-8.77 -0.37 -7.46 -1.24 0 0 Z \",fill:\"#290E3D\",transform:\"translate(554,130)\"})),_path2056||(_path2056=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.6 3.91 2.6 3.91 3.06 7.62 C3.22 8.83 3.37 10.04 3.54 11.29 C3.69 12.51 3.84 13.74 4 15 C4.32 17.33 4.66 19.67 5 22 C4.34 22 3.68 22 3 22 C2.3 19.09 1.62 16.17 0.94 13.25 C0.74 12.42 0.54 11.6 0.33 10.75 C0.15 9.95 -0.03 9.15 -0.22 8.33 C-0.4 7.59 -0.57 6.86 -0.75 6.11 C-1.02 3.8 -0.7 2.2 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(280,1258)\"})),_path2057||(_path2057=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.49 2.97 0.49 6 1 C6 1.66 6 2.32 6 3 C6.66 3.06 7.32 3.12 8 3.19 C12.19 4.32 15.43 6.6 19 9 C12.07 9 5.46 5.04 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#0E133C\",transform:\"translate(1254,1066)\"})),_path2058||(_path2058=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-1.14 7.62 -4.98 11.66 -9 16 C-9.66 15.67 -10.32 15.34 -11 15 C-9.36 12.69 -7.71 10.37 -6.06 8.06 C-5.59 7.4 -5.13 6.74 -4.64 6.06 C-1.11 1.11 -1.11 1.11 0 0 Z \",fill:\"#391A46\",transform:\"translate(284,717)\"})),_path2059||(_path2059=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.52 1.18 1.52 1.18 3 3 C3.07 5.48 3.07 5.48 2.69 8.19 C2.57 9.09 2.45 9.99 2.32 10.92 C2.22 11.61 2.11 12.29 2 13 C1.01 13 0.02 13 -1 13 C-1.03 11.02 -1.05 9.04 -1.06 7.06 C-1.07 5.96 -1.09 4.86 -1.1 3.72 C-1 1 -1 1 0 0 Z \",fill:\"#2C123E\",transform:\"translate(573,690)\"})),_path2060||(_path2060=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.37 0.76 8.54 2.01 12.75 3.38 C13.43 3.58 14.12 3.79 14.82 4.01 C16.58 4.58 18.3 5.28 20 6 C20.33 6.99 20.66 7.98 21 9 C14.22 7.1 7.32 5.15 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#06030A\",transform:\"translate(1150,617)\"})),_path2061||(_path2061=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.02 0.74 1.02 0.74 2.06 1.5 C5.62 3.32 8.04 3.07 12 3 C14.94 4 14.94 4 17 5 C16.67 5.99 16.34 6.98 16 8 C15.34 7.67 14.68 7.34 14 7 C12.56 6.87 11.13 6.77 9.69 6.69 C5.4 6.26 3.02 5.22 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#856B8A\",transform:\"translate(672,468)\"})),_path2062||(_path2062=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 1.06 5.19 C2.39 10.58 5.67 12.76 10 16 C9.01 16.33 8.02 16.66 7 17 C2.45 14.31 -0.6 11.32 -2.12 6.25 C-2 3 -2 3 0 0 Z \",fill:\"#775979\",transform:\"translate(560,439)\"})),_path2063||(_path2063=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.2 3.63 3.86 5.87 2 9 C1.01 9 0.02 9 -1 9 C-1 8.01 -1 7.02 -1 6 C-1.66 5.67 -2.32 5.34 -3 5 C-1.75 2.5 -1.75 2.5 0 0 Z \",fill:\"#6E5072\",transform:\"translate(871,425)\"})),_path2064||(_path2064=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.26 0.46 2.26 0.46 4.69 1.38 C5.5 1.67 6.3 1.97 7.14 2.27 C7.75 2.51 8.37 2.75 9 3 C8.67 3.66 8.34 4.32 8 5 C1.96 6.37 1.96 6.37 -1.44 5.06 C-1.95 4.71 -2.47 4.36 -3 4 C-3 3.34 -3 2.68 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#776484\",transform:\"translate(817,381)\"})),_path2065||(_path2065=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.01 3.01 2.6 5.82 3 10 C1.02 10.99 1.02 10.99 -1 12 C-2.12 7.31 -1.81 4.46 0 0 Z \",fill:\"#816786\",transform:\"translate(569,378)\"})),_path2066||(_path2066=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.05 2.79 2.09 4.58 2.12 6.38 C2.15 7.37 2.17 8.37 2.2 9.4 C2 12 2 12 0 14 C-0.99 12.02 -1.98 10.04 -3 8 C-2.34 8 -1.68 8 -1 8 C-1.33 5.69 -1.66 3.38 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#302335\",transform:\"translate(534,357)\"})),_path2067||(_path2067=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.5 2.97 0.5 6 1 C5.68 4.57 5.36 6.56 3.06 9.38 C1 11 1 11 -1 11 C-0.35 7.51 1.1 4.97 3 2 C2.01 2 1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(611,341)\"})),_path2068||(_path2068=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C6.12 5.75 6.12 5.75 5 8 C3.35 7.67 1.7 7.34 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#6E5378\",transform:\"translate(595,315)\"})),_path2069||(_path2069=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 3.3 1.34 6.6 1 10 C-3.29 8.93 -3.75 8.49 -6 5 C-5.67 4.34 -5.34 3.68 -5 3 C-2.44 2.38 -2.44 2.38 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#291235\",transform:\"translate(914,302)\"})),_path2070||(_path2070=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C0.01 12.5 0.01 12.5 -1 13 C-1 11.02 -1 9.04 -1 7 C-2.98 7.33 -4.96 7.66 -7 8 C-5.74 4.23 -4.34 3.92 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#351547\",transform:\"translate(526,178)\"})),_path2071||(_path2071=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.19 2.79 6.29 6.7 7.75 11.44 C7.83 11.95 7.91 12.47 8 13 C4.35 11.75 3.22 11.33 1 8 C0.46 5.34 0.27 2.71 0 0 Z \",fill:\"#452351\",transform:\"translate(882,128)\"})),_path2072||(_path2072=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 5 2 C4.67 2.66 4.34 3.32 4 4 C-0.62 4 -5.24 4 -10 4 C-10.33 3.34 -10.66 2.68 -11 2 C-7.28 -0.48 -4.3 -0.44 0 0 Z \",fill:\"#1C0B31\",transform:\"translate(552,124)\"})),_path2073||(_path2073=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3 1 -3 1 -5.12 0.56 C-12.34 -0.85 -19.76 0.15 -27 1 C-24.2 -1.8 -21.21 -1.83 -17.44 -2.31 C-16.72 -2.41 -16 -2.5 -15.26 -2.59 C-9.44 -3.21 -5.36 -2.49 0 0 Z \",fill:\"#2C123E\",transform:\"translate(738,76)\"})),_path2074||(_path2074=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.44 0.19 3.44 0.19 7 1 C8.44 3.06 8.44 3.06 9 5 C6.81 5.81 6.81 5.81 4 6 C1.19 3.56 1.19 3.56 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(512,1264)\"})),_path2075||(_path2075=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-6.81 3.94 -11 4.24 -17 3 C-17.66 2.34 -18.32 1.68 -19 1 C-16.96 0.83 -14.92 0.66 -12.88 0.5 C-11.17 0.36 -11.17 0.36 -9.43 0.22 C-6.27 0.02 -3.16 -0.04 0 0 Z \",fill:\"#200E31\",transform:\"translate(380,1219)\"})),_path2076||(_path2076=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.8 0.6 8.81 1.98 13.25 3.88 C13.87 4.13 14.5 4.39 15.14 4.65 C18.52 6.1 19.91 6.86 22 10 C19.03 9.51 19.03 9.51 16 9 C16 8.34 16 7.68 16 7 C15.47 6.88 14.94 6.76 14.39 6.63 C11.46 5.86 8.62 4.9 5.75 3.94 C4.67 3.58 3.59 3.21 2.48 2.84 C1.25 2.42 1.25 2.42 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0E1440\",transform:\"translate(1206,1043)\"})),_path2077||(_path2077=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.81 0.11 1.62 0.22 2.45 0.34 C3.37 0.48 3.37 0.48 4.31 0.62 C1.96 1.85 -0.21 2.8 -2.75 3.62 C-5.83 4.53 -5.83 4.53 -8.69 6.62 C-9.68 6.29 -10.67 5.97 -11.69 5.62 C-5.48 -0.79 -5.48 -0.79 0 0 Z \",fill:\"#341546\",transform:\"translate(266.6875,921.375)\"})),_path2078||(_path2078=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.84 1.96 4.67 3.92 5.5 5.88 C6.2 7.51 6.2 7.51 6.91 9.18 C8 12 8 12 8 14 C8.66 14 9.32 14 10 14 C10 15.65 10 17.3 10 19 C5.88 16.94 3.75 11.13 2.27 6.92 C1.81 5.29 1.4 3.64 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#2E143D\",transform:\"translate(1179,830)\"})),_path2079||(_path2079=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.14 1.11 1.29 2.23 1.44 3.38 C1.78 6.82 1.78 6.82 3 9 C1.68 9 0.36 9 -1 9 C-1 11.31 -1 13.62 -1 16 C-3.14 12.8 -3.23 11.98 -3.12 8.31 C-3.11 7.5 -3.09 6.7 -3.07 5.86 C-3.05 5.25 -3.02 4.63 -3 4 C-2.01 3.67 -1.02 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#311541\",transform:\"translate(265,823)\"})),_path2080||(_path2080=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.99 3.66 6.74 7.04 9 12 C8.1 14.21 8.1 14.21 7 16 C5.83 13.9 4.66 11.8 3.5 9.69 C3.17 9.09 2.83 8.5 2.49 7.88 C0.93 5.04 0 3.29 0 0 Z \",fill:\"#421F4F\",transform:\"translate(506,780)\"})),_path2081||(_path2081=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.59 6.26 -1.75 9.72 -5 14 C-5.66 13.01 -6.32 12.02 -7 11 C-5.22 6.96 -2.6 3.54 0 0 Z \",fill:\"#31173D\",transform:\"translate(284,711)\"})),_path2082||(_path2082=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.62 5.12 1.62 5.12 1 8 C0.34 8 -0.32 8 -1 8 C-1.33 8.99 -1.66 9.98 -2 11 C-2.66 11 -3.32 11 -4 11 C-4.37 7.06 -4.3 5.43 -2 2.12 C-1.34 1.42 -0.68 0.72 0 0 Z \",fill:\"#6A4D6F\",transform:\"translate(676,685)\"})),_path2083||(_path2083=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.98 4.05 2.08 7.84 2 12 C0.68 12.33 -0.64 12.66 -2 13 C-2.05 11.4 -2.09 9.79 -2.12 8.19 C-2.15 7.29 -2.17 6.4 -2.2 5.48 C-2 3 -2 3 0 0 Z \",fill:\"#331543\",transform:\"translate(480,514)\"})),_path2084||(_path2084=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.88 2.62 3.88 2.62 5 6 C5.17 7.83 5.27 9.66 5.31 11.5 C5.37 12.94 5.37 12.94 5.43 14.41 C5 17 5 17 2.98 18.84 C2.33 19.23 1.67 19.61 1 20 C0.34 19.67 -0.32 19.34 -1 19 C-0.01 18.67 0.98 18.34 2 18 C2.05 15.94 2.09 13.88 2.12 11.81 C2.15 10.66 2.17 9.52 2.2 8.33 C2 5.08 1.39 2.91 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(612,431)\"})),_path2085||(_path2085=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.99 3.3 3.98 6.6 5 10 C4.01 10 3.02 10 2 10 C1.67 11.65 1.34 13.3 1 15 C0.34 14.67 -0.32 14.34 -1 14 C-0.93 13.24 -0.86 12.48 -0.78 11.7 C-0.69 10.71 -0.6 9.71 -0.5 8.69 C-0.41 7.7 -0.31 6.72 -0.22 5.7 C0.04 2.95 0.04 2.95 0 0 Z \",fill:\"#604366\",transform:\"translate(853,420)\"})),_path2086||(_path2086=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.68 0.43 1.36 0.87 2.06 1.31 C2.06 2.3 2.06 3.29 2.06 4.31 C1.12 4.51 1.12 4.51 0.16 4.71 C-1.06 4.98 -1.06 4.98 -2.31 5.25 C-3.12 5.42 -3.94 5.6 -4.77 5.78 C-6.97 6.24 -6.97 6.24 -8.94 7.31 C-9.27 6.32 -9.6 5.33 -9.94 4.31 C-3.86 -0.9 -3.86 -0.9 0 0 Z \",fill:\"#4A394F\",transform:\"translate(891.9375,423.6875)\"})),_path2087||(_path2087=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.33 2.98 2.66 4 3 C3.67 5.31 3.34 7.62 3 10 C2.34 10 1.68 10 1 10 C1 10.99 1 11.98 1 13 C-1 12 -1 12 -1.75 9.88 C-2.07 6.22 -1.15 3.45 0 0 Z \",fill:\"#180E1F\",transform:\"translate(917,381)\"})),_path2088||(_path2088=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C-2.97 6.5 -2.97 6.5 -6 6 C-6 6.66 -6 7.32 -6 8 C-6.66 8 -7.32 8 -8 8 C-7.34 5.69 -6.68 3.38 -6 1 C-1.12 0 -1.12 0 0 0 Z \",fill:\"#7D6790\",transform:\"translate(909,363)\"})),_path2089||(_path2089=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 0.99 4.46 0.99 9 2 C9.33 3.32 9.66 4.64 10 6 C7.03 6 4.06 6 1 6 C0.67 5.34 0.34 4.68 0 4 C0.66 4 1.32 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#140E17\",transform:\"translate(673,308)\"})),_path2090||(_path2090=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.86 3.13 5.2 5.37 5 9 C1.53 7.02 1.53 7.02 -2 5 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#321641\",transform:\"translate(903,289)\"})),_path2091||(_path2091=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.69 1.25 8.73 3.04 13 7 C12.67 7.66 12.34 8.32 12 9 C4.9 7.29 4.9 7.29 2.31 3.44 C1.88 2.8 1.44 2.16 0.99 1.5 C0.5 0.76 0.5 0.76 0 0 Z \",fill:\"#200E32\",transform:\"translate(799,254)\"})),_path2092||(_path2092=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C0.66 3.33 1.32 3.66 2 4 C-2.62 4 -7.24 4 -12 4 C-11.01 3.67 -10.02 3.34 -9 3 C-9 2.34 -9 1.68 -9 1 C-3.38 -1.12 -3.38 -1.12 0 0 Z \",fill:\"#857194\",transform:\"translate(665,252)\"})),_path2093||(_path2093=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C1.42 4.17 0.55 5.73 -2.69 7.31 C-3.45 7.54 -4.21 7.77 -5 8 C-5.93 4.99 -6.04 4.13 -5 1 C-3.68 1 -2.36 1 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(586,134)\"})),_path2094||(_path2094=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.38 1.06 2.38 1.06 5 3 C6.31 6.69 6.31 6.69 7 10 C5.02 9.01 3.04 8.02 1 7 C1 6.34 1 5.68 1 5 C-0.32 4.34 -1.64 3.68 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#31173C\",transform:\"translate(741,121)\"})),_path2095||(_path2095=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.5 3.89 -3.7 5.47 -7.12 7.75 C-8.49 8.67 -8.49 8.67 -9.88 9.61 C-10.93 10.3 -10.93 10.3 -12 11 C-12.66 10.67 -13.32 10.34 -14 10 C-12.33 8.33 -10.67 6.67 -9 5 C-8.3 4.26 -7.6 3.52 -6.88 2.75 C-4.68 0.7 -3.02 0 0 0 Z \",fill:\"#3A1849\",transform:\"translate(150,1098)\"})),_path2096||(_path2096=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C3.2 6.65 3.1 12.25 3 18 C2.34 17.67 1.68 17.34 1 17 C0.61 14.42 0.49 11.86 0.34 9.25 C0.23 8.51 0.12 7.77 0 7 C-0.66 6.67 -1.32 6.34 -2 6 C-1.34 5.01 -0.68 4.02 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#2C123E\",transform:\"translate(444,1095)\"})),_path2097||(_path2097=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.6 0.19 1.2 0.37 1.81 0.56 C4.16 1.22 4.16 1.22 7 0 C7 0.66 7 1.32 7 2 C7.66 2 8.32 2 9 2 C9.33 3.65 9.66 5.3 10 7 C7.25 6.88 7.25 6.88 4 6 C1.62 2.94 1.62 2.94 0 0 Z \",fill:\"#28103B\",transform:\"translate(453,965)\"})),_path2098||(_path2098=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95 2.46 3.74 4.7 4.69 8.38 C4.94 9.31 5.19 10.25 5.45 11.21 C5.98 13.89 6.1 16.28 6 19 C5.34 19.33 4.68 19.66 4 20 C3.33 17.23 2.66 14.46 2 11.69 C1.81 10.9 1.62 10.12 1.42 9.31 C1.24 8.55 1.06 7.79 0.88 7.01 C0.71 6.32 0.54 5.62 0.37 4.9 C0 3 0 3 0 0 Z \",fill:\"#452355\",transform:\"translate(564,888)\"})),_path2099||(_path2099=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.09 2.83 0.96 4.17 0.25 7.19 C-0.16 8.12 -0.58 9.04 -1 10 C-1.99 10.33 -2.98 10.66 -4 11 C-4.33 8.36 -4.66 5.72 -5 3 C-3.35 2.01 -1.7 1.02 0 0 Z \",fill:\"#0A123C\",transform:\"translate(974,867)\"})),_path2100||(_path2100=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.32 4.08 2.32 4.08 1.62 5.19 C-0.05 7.92 -0.05 7.92 -1.06 10.75 C-2 13 -2 13 -4 14 C-3.46 8.72 -2.23 4.74 0 0 Z \",fill:\"#311442\",transform:\"translate(589,805)\"})),_path2101||(_path2101=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.25 0.38 8.62 2.28 13 5 C13 5.99 13 6.98 13 8 C5.84 6.24 5.84 6.24 3 3 C0.9 1.82 0.9 1.82 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(559,764)\"})),_path2102||(_path2102=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.69 2.98 8.85 6.31 13 10 C9 10 7.2 8.27 4 6 C3.67 6.66 3.34 7.32 3 8 C2.67 7.01 2.34 6.02 2 5 C1.34 5 0.68 5 0 5 C-0.33 4.01 -0.66 3.02 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#2A103D\",transform:\"translate(929,663)\"})),_path2103||(_path2103=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.21 4.82 -0.21 4.82 -1.94 8.12 C-2.5 9.22 -3.07 10.32 -3.65 11.45 C-4.1 12.29 -4.54 13.13 -5 14 C-7 11 -7 11 -6.44 8.12 C-4.82 4.61 -2.87 2.57 0 0 Z \",fill:\"#412D48\",transform:\"translate(840,484)\"})),_path2104||(_path2104=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.99 3 2.98 3 4 3 C6.42 7.83 5.36 14.65 4 19.69 C3.67 20.45 3.34 21.21 3 22 C2.67 22 2.34 22 2 22 C2.11 21.04 2.21 20.07 2.32 19.08 C2.5 17.18 2.5 17.18 2.69 15.25 C2.82 14 2.94 12.74 3.07 11.45 C2.99 7.63 2.38 6.81 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#28132E\",transform:\"translate(921,365)\"})),_path2105||(_path2105=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.47 -0.4 4.78 -0.14 7.75 1.81 C10 4 10 4 11 7 C7.62 6.75 7.62 6.75 4 6 C2.56 3.94 2.56 3.94 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#806787\",transform:\"translate(623,375)\"})),_path2106||(_path2106=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.33 0.99 5.66 1.98 6 3 C6.99 3.33 7.98 3.66 9 4 C7.35 5.32 5.7 6.64 4 8 C3.67 7.01 3.34 6.02 3 5 C2.01 5 1.02 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#2E1A35\",transform:\"translate(922,363)\"})),_path2107||(_path2107=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.65 3.3 3.3 5 5 C0.38 4.34 -4.24 3.68 -9 3 C-9 2.34 -9 1.68 -9 1 C-5.86 -0.57 -3.46 -0.35 0 0 Z \",fill:\"#7A5F82\",transform:\"translate(602,358)\"})),_path2108||(_path2108=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.89 2.31 2.76 4.63 2.62 6.94 C2.52 8.87 2.52 8.87 2.41 10.84 C2.28 11.88 2.14 12.93 2 14 C1.01 14.5 1.01 14.5 0 15 C-1 9.65 -0.85 5.38 0 0 Z \",fill:\"#4B3952\",transform:\"translate(859,324)\"})),_path2109||(_path2109=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 2.97 1.66 5.94 2 9 C0.68 9.33 -0.64 9.66 -2 10 C-2.33 10.66 -2.66 11.32 -3 12 C-3.66 12 -4.32 12 -5 12 C-4.52 7.01 -3.03 3.98 0 0 Z \",fill:\"#0D0A11\",transform:\"translate(618,322)\"})),_path2110||(_path2110=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.93 3.01 6.04 3.87 5 7 C3.35 7 1.7 7 0 7 C-1.12 2.25 -1.12 2.25 0 0 Z \",fill:\"#0B0910\",transform:\"translate(490,317)\"})),_path2111||(_path2111=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 0.02 2 0.05 3.02 0.07 C4.53 0.1 4.53 0.1 6.06 0.12 C6.83 0.15 7.6 0.17 8.4 0.2 C8.4 1.85 8.4 3.5 8.4 5.2 C3.91 4.54 -0.27 3.49 -4.6 2.2 C-2.6 0.2 -2.6 0.2 0 0 Z \",fill:\"#513E58\",transform:\"translate(643.6015625,301.8046875)\"})),_path2112||(_path2112=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 0.02 2.27 0.04 3.44 0.06 C-0.19 5.81 -0.19 5.81 -3.56 8.06 C-4.55 8.06 -5.54 8.06 -6.56 8.06 C-4.38 0.08 -4.38 0.08 0 0 Z \",fill:\"#2F153D\",transform:\"translate(872.5625,293.9375)\"})),_path2113||(_path2113=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.3 2.64 -6.6 5.28 -10 8 C-10.66 7.67 -11.32 7.34 -12 7 C-11.34 6.01 -10.68 5.02 -10 4 C-10.33 3.34 -10.66 2.68 -11 2 C-9.54 1.47 -8.09 0.95 -6.62 0.44 C-5.81 0.15 -5 -0.14 -4.16 -0.44 C-2 -1 -2 -1 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(603,76)\"})),_path2114||(_path2114=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0.6 4.63 1.51 6.48 3.96 C10.12 10.1 10.12 10.1 9.63 13.79 C9.32 14.89 9.32 14.89 9 16 C6.86 12.79 5.54 9.61 4.1 6.06 C3.04 3.69 3.04 3.69 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#090E35\",transform:\"translate(643,1041)\"})),_path2115||(_path2115=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.2 1.6 1.38 3.21 1.56 4.81 C1.67 5.71 1.77 6.6 1.88 7.52 C2 10 2 10 1 13 C1.66 13 2.32 13 3 13 C2.62 15.44 2.62 15.44 2 18 C1.34 18.33 0.68 18.66 0 19 C-1.1 14.75 -0.93 11.04 -0.56 6.69 C-0.46 5.43 -0.36 4.18 -0.25 2.89 C-0.17 1.93 -0.09 0.98 0 0 Z \",fill:\"#0B113B\",transform:\"translate(946,1000)\"})),_path2116||(_path2116=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.3 3.91 3.16 8.13 4.19 12.5 C4.38 13.26 4.57 14.02 4.76 14.8 C4.94 15.54 5.11 16.27 5.29 17.03 C5.45 17.7 5.61 18.36 5.78 19.05 C6.03 21.27 5.66 22.88 5 25 C-0.74 8.29 -0.74 8.29 0 0 Z \",fill:\"#361A40\",transform:\"translate(574,914)\"})),_path2117||(_path2117=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 3.41 0.89 3.98 -0.36 7.2 C-0.67 7.99 -0.98 8.79 -1.3 9.61 C-1.64 10.44 -1.97 11.27 -2.31 12.12 C-2.63 12.96 -2.96 13.8 -3.29 14.66 C-5.74 20.87 -5.74 20.87 -8 22 C-6.64 14 -3.57 7.26 0 0 Z \",fill:\"#000002\",transform:\"translate(296,795)\"})),_path2118||(_path2118=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.69 1.9 14.18 4.99 21 9 C19.23 9.64 19.23 9.64 17 10 C15.14 9.11 15.14 9.11 13.25 7.75 C10.41 5.83 7.8 4.44 4.56 3.31 C1 2 1 2 0 0 Z \",fill:\"#091139\",transform:\"translate(1104,782)\"})),_path2119||(_path2119=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.33 1.67 1.67 3.33 1 5 C0.6 6.02 0.2 7.03 -0.22 8.08 C-0.64 9.12 -1.06 10.17 -1.5 11.25 C-1.92 12.31 -2.35 13.36 -2.78 14.45 C-4 17 -4 17 -6 18 C-4.24 11.89 -2.3 5.93 0 0 Z \",fill:\"#261039\",transform:\"translate(426,751)\"})),_path2120||(_path2120=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.37 -0.23 5.41 -0.34 8.38 1.38 C8.91 1.91 9.45 2.45 10 3 C10 3.66 10 4.32 10 5 C10.99 5.33 11.98 5.66 13 6 C13 6.66 13 7.32 13 8 C7.47 6.46 4.02 4.02 0 0 Z \",fill:\"#220E36\",transform:\"translate(1032,749)\"})),_path2121||(_path2121=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.91 4.78 5.2 7.55 4 13 C0.25 9.25 0.31 5.02 0 0 Z \",fill:\"#3F1D4D\",transform:\"translate(1221,738)\"})),_path2122||(_path2122=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.86 1.57 6.08 4.08 9 7 C11.95 9.4 14.97 11.71 18 14 C17.01 14.5 17.01 14.5 16 15 C9.24 12.24 4.38 6.64 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#2A113B\",transform:\"translate(917,615)\"})),_path2123||(_path2123=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.25 3.51 0.78 5.33 -0.75 8.69 C-1.1 9.48 -1.44 10.26 -1.8 11.07 C-3 13 -3 13 -6 14 C-5.06 8.32 -4.14 4.28 0 0 Z \",fill:\"#2F163B\",transform:\"translate(377,566)\"})),_path2124||(_path2124=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.29 1.43 3.29 1.43 4.62 3.31 C5.07 3.93 5.52 4.54 5.98 5.18 C7 7 7 7 7 10 C4.83 9.49 3 9 1 8 C0.41 5.35 0.26 2.71 0 0 Z \",fill:\"#160A20\",transform:\"translate(567,561)\"})),_path2125||(_path2125=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.69 2.38 -0.69 2.38 -2 5 C-4.62 6.31 -4.62 6.31 -7 7 C-7.99 5.68 -8.98 4.36 -10 3 C-9.67 2.34 -9.34 1.68 -9 1 C-5.98 0.45 -3.07 0 0 0 Z \",fill:\"#846A8A\",transform:\"translate(571,548)\"})),_path2126||(_path2126=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.38 0 5.43 0.5 7.99 2.74 C11.59 6.69 11.59 6.69 13 9 C12.67 9.99 12.34 10.98 12 12 C8 8 4 4 0 0 Z \",fill:\"#290E3D\",transform:\"translate(972,547)\"})),_path2127||(_path2127=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 3.64 0.67 4.33 -0.94 7.69 C-1.32 8.5 -1.7 9.3 -2.09 10.14 C-2.39 10.75 -2.69 11.37 -3 12 C-3.99 11.67 -4.98 11.34 -6 11 C-5.25 4.38 -5.25 4.38 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#2F163B\",transform:\"translate(411,478)\"})),_path2128||(_path2128=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 -0.12 2.88 -0.12 6 0 C6.66 0.66 7.32 1.32 8 2 C6.35 4.31 4.7 6.62 3 9 C0.9 6.64 0.03 5.45 -0.19 2.25 C-0.13 1.51 -0.06 0.76 0 0 Z \",fill:\"#3D2E43\",transform:\"translate(515,409)\"})),_path2129||(_path2129=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.95 1.69 0.95 1.69 -0.12 2.4 C-6.75 7.14 -6.75 7.14 -9.62 14.5 C-9.79 16 -9.93 17.5 -10 19 C-10.33 19 -10.66 19 -11 19 C-11.78 10.06 -11.78 10.06 -8.88 6.12 C-5.96 3.97 -3.06 1.92 0 0 Z \",fill:\"#8A7896\",transform:\"translate(752,369)\"})),_path2130||(_path2130=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 3.3 -0.66 6.6 -1 10 C-4.4 8.87 -5.05 7.87 -7 5 C-6.19 3.06 -6.19 3.06 -5 1 C-2 0 -2 0 0 0 Z \",fill:\"#715479\",transform:\"translate(901,368)\"})),_path2131||(_path2131=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.67 0.78 12.67 0.78 18 3 C17.34 3.66 16.68 4.32 16 5 C13.22 4.65 10.6 4.21 7.88 3.62 C7.12 3.47 6.37 3.32 5.59 3.16 C3.72 2.79 1.86 2.39 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7E6589\",transform:\"translate(593,361)\"})),_path2132||(_path2132=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.37 3.23 -0.27 3.47 -0.92 3.71 C-3.18 4.82 -3.18 4.82 -3.83 7.16 C-4.04 8.38 -4.04 8.38 -4.25 9.62 C-4.4 10.44 -4.55 11.26 -4.7 12.1 C-4.85 13.04 -4.85 13.04 -5 14 C-5.66 13.67 -6.32 13.34 -7 13 C-6.67 10.36 -6.34 7.72 -6 5 C-6.33 5 -6.66 5 -7 5 C-7 4.01 -7 3.02 -7 2 C-4.35 0.54 -3.11 0 0 0 Z \",fill:\"#4D3F40\",transform:\"translate(925,344)\"})),_path2133||(_path2133=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 3.42 0.87 5.92 0.19 9.44 C-0.07 10.83 -0.07 10.83 -0.33 12.25 C-0.99 14.97 -1.89 17.43 -3 20 C-4.15 18.52 -4.15 18.52 -5 16 C-4.34 13.12 -3.59 10.52 -2.62 7.75 C-2.38 7 -2.13 6.26 -1.88 5.49 C-1.26 3.66 -0.63 1.83 0 0 Z \",fill:\"#694A6E\",transform:\"translate(521,275)\"})),_path2134||(_path2134=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.99 5.94 0.99 12 2 C12.33 2.99 12.66 3.98 13 5 C9.45 6.18 8.3 5.7 4.81 4.56 C3.91 4.28 3.01 3.99 2.08 3.69 C1.39 3.46 0.71 3.24 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#281C2C\",transform:\"translate(771,281)\"})),_path2135||(_path2135=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.08 0.74 8.02 1.83 12 3 C12 3.99 12 4.98 12 6 C7.03 5.5 3.36 4.45 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#372A3B\",transform:\"translate(759,277)\"})),_path2136||(_path2136=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.8 1.73 7.15 4.06 10.56 6.44 C11.14 6.83 11.72 7.23 12.31 7.63 C15.1 9.57 17.72 11.47 20 14 C11.95 11.7 5.94 6.74 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#30163E\",transform:\"translate(790,262)\"})),_path2137||(_path2137=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0.34 4 0.67 6 1 C6 1.33 6 1.66 6 2 C4.44 2.34 2.88 2.67 1.31 3 C0.01 3.28 0.01 3.28 -1.32 3.56 C-3.94 3.99 -6.36 4.08 -9 4 C-6.71 -1.06 -5.28 -1.2 0 0 Z \",fill:\"#322537\",transform:\"translate(645,261)\"})),_path2138||(_path2138=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.23 6.34 4.24 13.58 4 21 C3.34 21 2.68 21 2 21 C1.66 18.63 1.33 16.25 1 13.88 C0.9 13.21 0.81 12.54 0.71 11.86 C0.16 7.87 -0.1 4.02 0 0 Z \",fill:\"#291138\",transform:\"translate(921,220)\"})),_path2139||(_path2139=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.66 4.33 3.32 4.66 4 5 C3.84 5.56 3.67 6.11 3.5 6.69 C2.96 9.19 2.93 11.45 3 14 C2.01 14 1.02 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#856B8A\",transform:\"translate(1013,1266)\"})),_path2140||(_path2140=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 4.96 3.66 8.92 4 13 C3.34 13 2.68 13 2 13 C2 12.34 2 11.68 2 11 C1.34 11 0.68 11 0 11 C-0.84 6.98 -1.05 3.98 0 0 Z \",fill:\"#261230\",transform:\"translate(104,1169)\"})),_path2141||(_path2141=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 1.34 3.64 0.68 5 0 C3.97 2.83 3.32 3.83 0.62 5.27 C-0.29 5.59 -1.19 5.92 -2.12 6.25 C-3.04 6.59 -3.95 6.92 -4.88 7.27 C-5.58 7.51 -6.28 7.75 -7 8 C-7 7.01 -7 6.02 -7 5 C-5.47 3.61 -5.47 3.61 -3.5 2.31 C-2.85 1.88 -2.2 1.44 -1.53 0.99 C-1.03 0.66 -0.52 0.34 0 0 Z \",fill:\"#101035\",transform:\"translate(1058,1068)\"})),_path2142||(_path2142=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.89 6.58 1.95 12.42 1 19 C0.34 19 -0.32 19 -1 19 C-1.33 20.32 -1.66 21.64 -2 23 C-2.11 17.76 -1.7 12.76 -1 7.56 C-0.9 6.83 -0.81 6.1 -0.71 5.35 C-0.48 3.56 -0.24 1.78 0 0 Z \",fill:\"#31163F\",transform:\"translate(371,1047)\"})),_path2143||(_path2143=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.77 2.77 3.52 5.93 4.8 9.59 C6.15 12.29 7.48 13.4 10 15 C9.67 16.32 9.34 17.64 9 19 C6 18 6 18 4.39 14.98 C3.86 13.72 3.33 12.46 2.81 11.19 C2.4 10.24 2.4 10.24 1.99 9.28 C0.57 5.91 0 3.72 0 0 Z \",fill:\"#0F1541\",transform:\"translate(1266,1032)\"})),_path2144||(_path2144=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41 1.41 5.24 2.73 7 6 C7.54 8.99 7.81 11.97 8 15 C5.85 12.24 4.02 9.43 2.31 6.38 C1.88 5.6 1.44 4.82 0.99 4.02 C0 2 0 2 0 0 Z \",fill:\"#351547\",transform:\"translate(369,1026)\"})),_path2145||(_path2145=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.78 0.3 1.78 0.3 3.94 0.88 C4.65 1.06 5.36 1.24 6.09 1.43 C8 2 8 2 10 3 C10.99 3 11.98 3 13 3 C12.67 3.99 12.34 4.98 12 6 C7.81 6.19 4.74 5.97 1 4 C0.34 3.01 -0.32 2.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#381A43\",transform:\"translate(268,923)\"})),_path2146||(_path2146=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.28 4.68 0.55 7.68 -1.5 11.88 C-1.96 12.84 -2.43 13.81 -2.91 14.8 C-3.27 15.53 -3.63 16.25 -4 17 C-4.33 17 -4.66 17 -5 17 C-4.69 10.38 -3.26 5.78 0 0 Z \",fill:\"#2E153B\",transform:\"translate(295,789)\"})),_path2147||(_path2147=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.71 2.69 0.43 3.39 0.13 4.11 C-1.32 7.81 -1.7 11.37 -2.12 15.31 C-2.21 16.05 -2.3 16.79 -2.39 17.56 C-2.6 19.37 -2.8 21.19 -3 23 C-3.33 23 -3.66 23 -4 23 C-4.05 20.44 -4.09 17.88 -4.12 15.31 C-4.15 14.23 -4.15 14.23 -4.18 13.13 C-4.21 8.96 -3.97 5.71 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#3C194D\",transform:\"translate(411,785)\"})),_path2148||(_path2148=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.53 0.73 10.7 2.33 16 4 C16 4.66 16 5.32 16 6 C17.32 6.66 18.64 7.32 20 8 C12.94 6.86 6.28 4.38 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(1026,604)\"})),_path2149||(_path2149=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.9 0.31 0.9 0.31 1.81 0.62 C0.81 3.12 0.13 4.41 -2.12 5.94 C-4.19 6.62 -4.19 6.62 -7.19 5.62 C-5.69 2.17 -4.28 -0.73 0 0 Z \",fill:\"#382B3D\",transform:\"translate(720.1875,597.375)\"})),_path2150||(_path2150=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.56 1.19 1.56 1.19 3 3 C2.69 5.69 2.69 5.69 2 8 C1.42 7.69 0.85 7.38 0.25 7.06 C-1.84 6.07 -3.75 5.48 -6 5 C-4.02 3.35 -2.04 1.7 0 0 Z \",fill:\"#816786\",transform:\"translate(624,546)\"})),_path2151||(_path2151=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.2 5.86 3.88 9.04 2 15 C-0.03 11.65 -0.22 9.13 -0.12 5.25 C-0.1 3.77 -0.1 3.77 -0.07 2.27 C-0.05 1.52 -0.02 0.77 0 0 Z \",fill:\"#28132F\",transform:\"translate(860,531)\"})),_path2152||(_path2152=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.8 0.43 1.61 0.87 2.44 1.31 C2.77 2.63 3.1 3.95 3.44 5.31 C-0.19 4.98 -3.82 4.65 -7.56 4.31 C-6.9 3.98 -6.24 3.65 -5.56 3.31 C-5.23 2.32 -4.9 1.33 -4.56 0.31 C-2.56 -0.69 -2.56 -0.69 0 0 Z \",fill:\"#5E3E64\",transform:\"translate(613.5625,507.6875)\"})),_path2153||(_path2153=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.35 1.17 8.35 1.17 11.06 4.62 C11.37 5.41 11.68 6.19 12 7 C10.56 6.69 9.12 6.38 7.69 6.06 C6.89 5.89 6.09 5.71 5.26 5.54 C3 5 3 5 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#2E153B\",transform:\"translate(871,445)\"})),_path2154||(_path2154=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.72 2.98 1.43 5.96 1.12 8.94 C1.05 9.79 0.97 10.64 0.89 11.51 C0.8 12.32 0.72 13.13 0.63 13.96 C0.56 14.71 0.49 15.46 0.41 16.23 C0.28 16.82 0.14 17.4 0 18 C-0.66 18.33 -1.32 18.66 -2 19 C-2.22 12.27 -1.95 6.46 0 0 Z \",fill:\"#280F3B\",transform:\"translate(432,397)\"})),_path2155||(_path2155=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.66 2.66 1.32 3 2 C6.03 2.66 6.03 2.66 9 3 C9.33 5.31 9.66 7.62 10 10 C9.34 10 8.68 10 8 10 C7.67 9.01 7.34 8.02 7 7 C3.99 5.77 3.99 5.77 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#66476C\",transform:\"translate(538,381)\"})),_path2156||(_path2156=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.39 2.12 8.39 2.12 10.69 5.44 C11.05 8.37 10.62 9.57 9 12 C8.67 9.69 8.34 7.38 8 5 C6.02 5 4.04 5 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(539,379)\"})),_path2157||(_path2157=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5 2.99 5 3.98 5 5 C4.34 5.66 3.68 6.32 3 7 C0.38 6.62 0.38 6.62 -2 6 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(851,378)\"})),_path2158||(_path2158=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.08 0.74 8.02 1.83 12 3 C12.33 4.65 12.66 6.3 13 8 C8.17 6.59 4.28 4.57 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#81688B\",transform:\"translate(822,347)\"})),_path2159||(_path2159=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.45 1.03 10.12 2.25 15 5 C12.77 6.11 11.47 6.16 9 6.19 C7.95 6.21 7.95 6.21 6.88 6.23 C5 6 5 6 3 4 C3.33 3.34 3.66 2.68 4 2 C2.68 1.34 1.36 0.68 0 0 Z \",fill:\"#28162F\",transform:\"translate(800,286)\"})),_path2160||(_path2160=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.14 3.48 2.21 6.21 2.12 10.25 C2.11 11.33 2.09 12.41 2.07 13.52 C2.04 14.75 2.04 14.75 2 16 C0 15 0 15 -1 12 C-1.09 10.31 -1.13 8.63 -1.12 6.94 C-1.13 6.06 -1.13 5.18 -1.13 4.28 C-1 2 -1 2 0 0 Z \",fill:\"#362A3A\",transform:\"translate(683,279)\"})),_path2161||(_path2161=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33 1.47 5.74 3.37 8.44 5.81 C9.61 6.87 9.61 6.87 10.8 7.96 C13.27 10.25 15.66 12.58 18 15 C17.67 15.66 17.34 16.32 17 17 C14.16 14.36 11.33 11.71 8.5 9.06 C7.69 8.31 6.88 7.55 6.04 6.78 C5.28 6.06 4.51 5.34 3.72 4.6 C3.01 3.93 2.29 3.27 1.56 2.58 C0 1 0 1 0 0 Z \",fill:\"#230E38\",transform:\"translate(869,254)\"})),_path2162||(_path2162=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46 -0.08 2.92 -0.14 4.38 -0.19 C5.19 -0.22 6 -0.26 6.84 -0.29 C7.55 -0.2 8.26 -0.1 9 0 C9.66 0.99 10.32 1.98 11 3 C9.57 3.39 8.13 3.76 6.69 4.12 C5.49 4.44 5.49 4.44 4.26 4.76 C2 5 2 5 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#332738\",transform:\"translate(625,244)\"})),_path2163||(_path2163=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.52 -0.4 4.8 -0.13 7.81 1.88 C8.53 2.58 9.26 3.28 10 4 C10 4.66 10 5.32 10 6 C7.03 5.5 7.03 5.5 4 5 C3.67 5.66 3.34 6.32 3 7 C2.01 4.69 1.02 2.38 0 0 Z \",fill:\"#321641\",transform:\"translate(668,101)\"})),_path2164||(_path2164=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1.54 4.57 C-5.66 7.64 -8.7 9.73 -14 10 C-14.33 9.34 -14.66 8.68 -15 8 C-13.82 7.61 -12.65 7.22 -11.44 6.81 C-7.03 5.18 -3.71 2.86 0 0 Z \",fill:\"#2C123E\",transform:\"translate(399,1212)\"})),_path2165||(_path2165=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C1.31 5.69 1.31 5.69 0 9 C-0.54 10.46 -1.09 11.92 -1.62 13.38 C-2.08 14.57 -2.53 15.77 -3 17 C-4.34 12.98 -4.76 9.84 -3.11 5.83 C-2.12 3.86 -1.09 1.92 0 0 Z \",fill:\"#230F36\",transform:\"translate(144,1155)\"})),_path2166||(_path2166=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.58 1.91 2.98 2.9 3.51 6.14 C3.6 7.89 3.6 7.89 3.69 9.69 C3.75 10.87 3.82 12.05 3.89 13.26 C3.92 14.17 3.96 15.07 4 16 C1 14 1 14 0.56 12.12 C0.52 11.42 0.48 10.72 0.44 10 C0.28 6.59 0.28 6.59 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#0D0F38\",transform:\"translate(995,1122)\"})),_path2167||(_path2167=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.65 3.2 6.65 3.2 8.44 7.25 C8.62 8.16 8.81 9.07 9 10 C5.06 8.33 2.21 5.77 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#411E4F\",transform:\"translate(553,1069)\"})),_path2168||(_path2168=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.28 2.31 7.72 4.33 11 8 C10.67 8.66 10.34 9.32 10 10 C3.51 7.67 3.51 7.67 1.06 4.44 C0 2 0 2 0 0 Z \",fill:\"#080D31\",transform:\"translate(627,1025)\"})),_path2169||(_path2169=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.5 1.98 0.5 4 1 C3.67 3.31 3.34 5.62 3 8 C1.68 8.33 0.36 8.66 -1 9 C-1.12 2.25 -1.12 2.25 0 0 Z \",fill:\"#3B174B\",transform:\"translate(393,1022)\"})),_path2170||(_path2170=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.88 2.79 3.88 2.79 4.56 5.06 C4.8 5.87 5.05 6.68 5.3 7.51 C5.53 8.33 5.76 9.15 6 10 C6.23 10.76 6.46 11.52 6.7 12.3 C7.31 14.44 7.31 14.44 8 18 C7.34 18.66 6.68 19.32 6 20 C4.5 14.8 3.08 9.58 1.68 4.36 C1.08 2.01 1.08 2.01 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(282,1013)\"})),_path2171||(_path2171=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.57 2.67 -9.73 4.28 -15 3.62 C-15.66 3.42 -16.32 3.21 -17 3 C-15.68 2.31 -14.34 1.65 -13 1 C-12.26 0.61 -11.51 0.22 -10.75 -0.19 C-6.87 -1.33 -3.97 -0.67 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(785,790)\"})),_path2172||(_path2172=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C6 5 6 5 3 7 C0.81 6.62 0.81 6.62 -1 6 C-1.04 4.33 -1.04 2.67 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#482859\",transform:\"translate(342,780)\"})),_path2173||(_path2173=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.47 3.28 10.47 3.28 15 6 C15.33 6.99 15.66 7.98 16 9 C12.14 8.24 8.8 6.61 5.25 4.94 C4.08 4.39 2.91 3.84 1.7 3.28 C0.81 2.86 -0.08 2.43 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#45245B\",transform:\"translate(1121,736)\"})),_path2174||(_path2174=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.76 6.18 -2.94 9.65 -6 13 C-6.66 13 -7.32 13 -8 13 C-6.81 7.46 -5.4 4.83 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2C1438\",transform:\"translate(292,702)\"})),_path2175||(_path2175=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.18 0.85 2.18 0.85 2.37 1.71 C2.53 2.45 2.7 3.18 2.88 3.94 C3.04 4.67 3.2 5.4 3.37 6.15 C3.83 8.21 3.83 8.21 6 9 C6 9.66 6 10.32 6 11 C3.03 10.5 3.03 10.5 0 10 C0 9.01 0 8.02 0 7 C-0.99 6.67 -1.98 6.34 -3 6 C-2.34 5.34 -1.68 4.68 -1 4 C-0.36 1.93 -0.36 1.93 0 0 Z \",fill:\"#1E0D31\",transform:\"translate(665,703)\"})),_path2176||(_path2176=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.22 -0.54 4.23 -2 7 C-2.25 7.83 -2.5 8.65 -2.75 9.5 C-4.44 12.89 -6.79 14.11 -10 16 C-8.62 12.14 -6.82 9.08 -4.44 5.75 C-3.82 4.88 -3.2 4.01 -2.56 3.11 C-1 1 -1 1 0 0 Z \",fill:\"#3C184C\",transform:\"translate(414,616)\"})),_path2177||(_path2177=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C14.34 1.32 13.68 2.64 13 4 C8.71 3.34 4.42 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1B141F\",transform:\"translate(649,623)\"})),_path2178||(_path2178=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C2.66 3.67 3.32 3.34 4 3 C3.91 4.63 3.8 6.25 3.69 7.88 C3.63 8.78 3.57 9.68 3.51 10.62 C3 13 3 13 0 15 C0 10.05 0 5.1 0 0 Z \",fill:\"#220F32\",transform:\"translate(860,496)\"})),_path2179||(_path2179=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.99 1.34 3.98 0.68 5 0 C4.01 4.62 3.02 9.24 2 14 C-1.34 9.55 -1.39 8.33 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#241038\",transform:\"translate(419,436)\"})),_path2180||(_path2180=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.69 1.62 2.38 2.24 2.06 2.88 C0.6 7.19 0.33 11.48 0 16 C-1.65 16 -3.3 16 -5 16 C-5.33 15.01 -5.66 14.02 -6 13 C-4.68 13 -3.36 13 -2 13 C-1.94 12.23 -1.88 11.46 -1.82 10.66 C-1.73 9.66 -1.65 8.66 -1.56 7.62 C-1.48 6.63 -1.4 5.63 -1.32 4.6 C-1 2 -1 2 0 0 Z \",fill:\"#775C7F\",transform:\"translate(916,363)\"})),_path2181||(_path2181=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11 0.34 1.11 0.34 2.25 0.69 C1.92 2.01 1.59 3.33 1.25 4.69 C-0.73 5.02 -2.71 5.35 -4.75 5.69 C-5.41 4.7 -6.07 3.71 -6.75 2.69 C-4.3 0.41 -3.41 -0.39 0 0 Z \",fill:\"#53315A\",transform:\"translate(521.75,344.3125)\"})),_path2182||(_path2182=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.34 2.68 1.17 4.82 1.19 7.81 C1.2 8.85 1.22 9.89 1.23 10.96 C1 14.04 0.3 16.22 -1 19 C-1.33 19 -1.66 19 -2 19 C-2.05 16.4 -2.09 13.79 -2.12 11.19 C-2.14 10.45 -2.16 9.71 -2.18 8.95 C-2.21 5.09 -2.19 3.29 0 0 Z \",fill:\"#391948\",transform:\"translate(483,337)\"})),_path2183||(_path2183=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.66 1.25 3.32 1.5 4 1.75 C6.64 3.4 7.08 5.09 8 8 C5.16 8 2.76 7.6 0 7 C-0.93 3.99 -1.04 3.13 0 0 Z \",fill:\"#28132F\",transform:\"translate(492,305)\"})),_path2184||(_path2184=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69 3.12 0.69 3.12 1 6 C-0.32 5.67 -1.64 5.34 -3 5 C-3 4.01 -3 3.02 -3 2 C-5.31 1.34 -7.62 0.68 -10 0 C-10 -0.33 -10 -0.66 -10 -1 C-3.38 -2.25 -3.38 -2.25 0 0 Z \",fill:\"#281C2C\",transform:\"translate(515,294)\"})),_path2185||(_path2185=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.13 3.39 0.72 5.54 0 9 C-0.15 13.18 0.01 16.94 1 21 C-1.76 18.68 -2.44 17.13 -2.75 13.56 C-2.87 12.42 -2.87 12.42 -2.98 11.25 C-3.01 7.14 -1.57 3.76 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(464,289)\"})),_path2186||(_path2186=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.01 2.49 2.01 2.49 1 4 C-1.97 4.06 -4.69 3.96 -7.62 3.69 C-8.43 3.63 -9.23 3.57 -10.05 3.5 C-12.04 3.35 -14.02 3.18 -16 3 C-14 1 -14 1 -11.25 0.84 C-9.64 0.89 -9.64 0.89 -8 0.94 C-3.84 1.2 -3.84 1.2 0 0 Z \",fill:\"#775A7B\",transform:\"translate(589,262)\"})),_path2187||(_path2187=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.38 -0.12 3.38 -0.12 7 0 C7.66 0.66 8.32 1.32 9 2 C8.34 3.32 7.68 4.64 7 6 C6.01 6 5.02 6 4 6 C4 5.34 4 4.68 4 4 C3.01 4 2.02 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#3A2C3E\",transform:\"translate(611,250)\"})),_path2188||(_path2188=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.71 0.47 9.16 1.94 14 5 C14 5.66 14 6.32 14 7 C9.28 5.46 4.58 3.92 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(822,85)\"})),_path2189||(_path2189=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.45 0.81 -1.45 0.81 -2.92 1.64 C-4.2 2.37 -5.47 3.09 -6.75 3.81 C-7.7 4.35 -7.7 4.35 -8.67 4.89 C-11.95 6.75 -15.05 8.64 -18 11 C-17.04 7.36 -16.2 6.14 -13.07 3.95 C-11.91 3.34 -10.75 2.74 -9.56 2.12 C-8.41 1.51 -7.26 0.89 -6.07 0.26 C-3 -1 -3 -1 0 0 Z \",fill:\"#311442\",transform:\"translate(622,73)\"})),_path2190||(_path2190=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.43 1.63 0.87 2.25 0.29 2.9 C-0.45 3.72 -1.18 4.53 -1.94 5.38 C-2.67 6.19 -3.4 7 -4.15 7.84 C-6.03 9.86 -6.03 9.86 -7 12 C-7.99 11.67 -8.98 11.34 -10 11 C-9.09 9.72 -8.17 8.45 -7.25 7.19 C-6.74 6.48 -6.23 5.77 -5.7 5.04 C-3.98 2.97 -2.21 1.53 0 0 Z \",fill:\"#391947\",transform:\"translate(562,1233)\"})),_path2191||(_path2191=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6 0.31 3.21 0.62 4.81 0.94 C5.71 1.11 6.6 1.29 7.52 1.46 C10 2 10 2 13 3 C9.8 5.14 8.98 5.23 5.31 5.12 C4.5 5.11 3.7 5.09 2.86 5.07 C1.94 5.04 1.94 5.04 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#44214E\",transform:\"translate(294,1223)\"})),_path2192||(_path2192=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.32 3.6 -0.37 5.2 -1.1 6.78 C-2.83 11.05 -3.86 15.54 -5 20 C-5.33 20 -5.66 20 -6 20 C-5.12 5.12 -5.12 5.12 0 0 Z \",fill:\"#0F1541\",transform:\"translate(1008,1206)\"})),_path2193||(_path2193=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.17 8.14 5.46 15.57 5 24 C4.67 24 4.34 24 4 24 C3.41 18.65 2.86 13.39 3 8 C2.34 7.67 1.68 7.34 1 7 C-0.19 4.56 -0.19 4.56 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#3B174B\",transform:\"translate(109,1167)\"})),_path2194||(_path2194=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.47 0.49 2.47 0.49 5 1 C5 1.66 5 2.32 5 3 C5.99 3.33 6.98 3.66 8 4 C7.67 4.99 7.34 5.98 7 7 C4.69 6.67 2.38 6.34 0 6 C0.66 5.67 1.32 5.34 2 5 C2 4.01 2 3.02 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#281136\",transform:\"translate(233,1143)\"})),_path2195||(_path2195=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.41 3.32 2.74 5.66 3 8 C1.02 8.99 1.02 8.99 -1 10 C-1.66 9.34 -2.32 8.68 -3 8 C-3 3.73 -2.62 3.06 0 0 Z \",fill:\"#090F36\",transform:\"translate(672,1125)\"})),_path2196||(_path2196=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C1.67 3.66 1.34 4.32 1 5 C0.85 6.81 0.75 8.63 0.68 10.45 C0.64 11.52 0.6 12.6 0.56 13.71 C0.5 15.4 0.5 15.4 0.44 17.12 C0.39 18.26 0.35 19.4 0.31 20.57 C0.2 23.38 0.1 26.19 0 29 C-0.33 29 -0.66 29 -1 29 C-1.96 22.39 -1.99 16.09 -1.62 9.44 C-1.58 8.63 -1.54 7.82 -1.49 6.98 C-1.13 1.13 -1.13 1.13 0 0 Z \",fill:\"#0B0F37\",transform:\"translate(674,1097)\"})),_path2197||(_path2197=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.04 2.67 4.04 4.33 4 6 C3 7 3 7 0.44 7.06 C-0.77 7.03 -0.77 7.03 -2 7 C-2.66 5.68 -3.32 4.36 -4 3 C-2.68 3 -1.36 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#2C123E\",transform:\"translate(463,969)\"})),_path2198||(_path2198=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.34 3.64 3.98 7.29 5 12 C3.11 11.82 3.11 11.82 1 11 C-0.05 8.71 -0.05 8.71 -0.75 5.94 C-0.99 5.02 -1.23 4.1 -1.48 3.15 C-1.65 2.44 -1.82 1.73 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#0D0F39\",transform:\"translate(598,952)\"})),_path2199||(_path2199=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.05 1.92 1.09 3.83 1.12 5.75 C1.15 6.82 1.17 7.88 1.2 8.98 C1 11.92 0.53 13.52 -1 16 C-2.11 11.57 -2.22 7.55 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#2E1141\",transform:\"translate(575,835)\"})),_path2200||(_path2200=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.52 1.18 1.52 1.18 3 3 C3.07 5.48 3.07 5.48 2.69 8.19 C2.57 9.09 2.45 9.99 2.32 10.92 C2.22 11.61 2.11 12.29 2 13 C1.01 13.33 0.02 13.66 -1 14 C-1.08 9.17 -0.95 4.76 0 0 Z \",fill:\"#3A1949\",transform:\"translate(530,799)\"})),_path2201||(_path2201=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.16 1.37 3.99 1.99 6 5 C6.12 7.69 6.12 7.69 6 10 C4.68 10 3.36 10 2 10 C1.67 9.34 1.34 8.68 1 8 C1.33 7.01 1.66 6.02 2 5 C1.12 2.34 1.12 2.34 0 0 Z \",fill:\"#3A1849\",transform:\"translate(1130,779)\"})),_path2202||(_path2202=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0 -1.32 0 -2 0 C-1.67 1.65 -1.34 3.3 -1 5 C-2.65 5.33 -4.3 5.66 -6 6 C-6 5.34 -6 4.68 -6 4 C-6.99 4.33 -7.98 4.66 -9 5 C-9 4.34 -9 3.68 -9 3 C-8.34 3 -7.68 3 -7 3 C-7 2.01 -7 1.02 -7 0 C-3.99 -0.93 -3.13 -1.04 0 0 Z \",fill:\"#0A0F36\",transform:\"translate(849,768)\"})),_path2203||(_path2203=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.88 1.75 3.88 1.75 5 4 C5.66 3.67 6.32 3.34 7 3 C8.56 5.81 8.56 5.81 10 9 C9.67 9.99 9.34 10.98 9 12 C8.24 11.2 7.47 10.39 6.69 9.56 C4.21 6.83 4.21 6.83 1 6 C-0.19 3.44 -0.19 3.44 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0D0F38\",transform:\"translate(979,748)\"})),_path2204||(_path2204=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.79 1.26 4.18 2.53 6.12 5.94 C6.64 6.83 7.16 7.73 7.7 8.65 C8.49 10.09 9.27 11.53 10 13 C6.88 11.64 4.99 10.17 2.81 7.56 C2.3 6.97 1.79 6.37 1.27 5.75 C0 4 0 4 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#401F54\",transform:\"translate(1157,706)\"})),_path2205||(_path2205=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.37 4.93 -3.74 6.39 -8 9 C-9.79 10.62 -9.79 10.62 -11 12 C-9.91 6.92 -5.94 0 0 0 Z \",fill:\"#3E1D4A\",transform:\"translate(381,665)\"})),_path2206||(_path2206=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C1.95 4.87 1.33 5.83 -1.44 7.25 C-4 8 -4 8 -7 8 C-4.69 5.36 -2.38 2.72 0 0 Z \",fill:\"#837299\",transform:\"translate(714,589)\"})),_path2207||(_path2207=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.16 2.87 0.99 4.02 0 7.02 C-0.71 8.62 -0.71 8.62 -1.44 10.25 C-1.91 11.33 -2.38 12.41 -2.87 13.52 C-3.24 14.34 -3.62 15.16 -4 16 C-4.66 16 -5.32 16 -6 16 C-5.8 15.42 -5.59 14.84 -5.38 14.24 C-4.14 10.64 -3.04 7.27 -2.44 3.5 C-2.29 2.67 -2.15 1.85 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#482859\",transform:\"translate(420,558)\"})),_path2208||(_path2208=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13.33 1.32 13.66 2.64 14 4 C13.01 4.33 12.02 4.66 11 5 C11.33 3.68 11.66 2.36 12 1 C10.97 1.35 9.94 1.7 8.88 2.06 C5.02 3 2.8 2.93 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#7F6484\",transform:\"translate(561,547)\"})),_path2209||(_path2209=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.72 3.68 1.38 5.34 1 7 C0.96 9 0.95 11 1 13 C0.34 13 -0.32 13 -1 13 C-1.66 13.66 -2.32 14.32 -3 15 C-2.22 4.44 -2.22 4.44 0 0 Z \",fill:\"#28103A\",transform:\"translate(486,499)\"})),_path2210||(_path2210=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.56 3.08 10.56 3.08 15 5 C13.38 6.12 13.38 6.12 11 7 C8 6.25 8 6.25 5 5 C4.24 4.69 3.47 4.38 2.69 4.06 C1 3 1 3 0 0 Z \",fill:\"#7E668A\",transform:\"translate(608,492)\"})),_path2211||(_path2211=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.03 2.79 1.05 3.87 0.06 6.75 C-0.29 7.49 -0.64 8.24 -1 9 C-1.66 9 -2.32 9 -3 9 C-3 9.99 -3 10.98 -3 12 C-3.66 12 -4.32 12 -5 12 C-4.54 8.53 -4.11 5.33 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#230C38\",transform:\"translate(435,384)\"})),_path2212||(_path2212=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.99 6.6 1.98 10 3 C9.67 3.66 9.34 4.32 9 5 C8.34 5 7.68 5 7 5 C6.67 5.99 6.34 6.98 6 8 C3.52 7.01 3.52 7.01 1 6 C1.66 5.34 2.32 4.68 3 4 C2.01 3.34 1.02 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#140E17\",transform:\"translate(611,379)\"})),_path2213||(_path2213=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.49 0.99 1.49 0.99 3 2 C2.34 2 1.68 2 1 2 C2.74 7.39 2.74 7.39 5.75 12.06 C7.71 15.1 6.72 17.61 6 21 C5.67 21 5.34 21 5 21 C4.73 19.8 4.46 18.61 4.19 17.38 C3.5 14.55 2.76 12.55 1.38 9.94 C-0.27 6.43 -0.23 3.83 0 0 Z \",fill:\"#6B4C71\",transform:\"translate(891,367)\"})),_path2214||(_path2214=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.57 2.13 9.67 3.79 13 9 C10.69 9 8.38 9 6 9 C6 8.01 6 7.02 6 6 C4.02 4.64 2.02 3.3 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#856B8A\",transform:\"translate(616,373)\"})),_path2215||(_path2215=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 3.96 3.66 7.92 4 12 C1 10 1 10 0.23 7.87 C0.07 7.07 -0.09 6.26 -0.25 5.44 C-0.42 4.63 -0.59 3.83 -0.77 3 C-0.84 2.34 -0.92 1.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(840,346)\"})),_path2216||(_path2216=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.58 1.65 3.15 1.3 3.75 0.94 C6.36 -0.15 7.39 0.07 10 1 C9.01 2.49 9.01 2.49 8 4 C7.34 4 6.68 4 6 4 C6 4.66 6 5.32 6 6 C4.35 6 2.7 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#867396\",transform:\"translate(652,317)\"})),_path2217||(_path2217=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12 0.38 2.12 0.38 4 1 C3.01 1 2.02 1 1 1 C0.88 1.62 0.75 2.24 0.62 2.88 C0 5 0 5 -2 7 C-5 7.75 -5 7.75 -8 8 C-8.66 7.34 -9.32 6.68 -10 6 C-9.45 5.73 -8.89 5.47 -8.32 5.2 C-7.6 4.84 -6.87 4.49 -6.12 4.12 C-5.41 3.78 -4.69 3.43 -3.95 3.07 C-1.85 2.03 -1.85 2.03 0 0 Z \",fill:\"#58375F\",transform:\"translate(614,299)\"})),_path2218||(_path2218=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89 0.78 1.77 1.57 2.69 2.38 C5.31 4.57 7.72 5.94 11 7 C10.67 7.66 10.34 8.32 10 9 C5.71 7.68 1.42 6.36 -3 5 C-2.34 4.67 -1.68 4.34 -1 4 C-0.35 1.98 -0.35 1.98 0 0 Z \",fill:\"#67496C\",transform:\"translate(793,281)\"})),_path2219||(_path2219=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.62 1.94 0.62 4 2 C4.75 5.12 4.75 5.12 5 8 C2.03 7.67 -0.94 7.34 -4 7 C-3.01 6.34 -2.02 5.68 -1 5 C-1.33 4.34 -1.66 3.68 -2 3 C-1.01 2.67 -0.02 2.34 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#231A27\",transform:\"translate(735,268)\"})),_path2220||(_path2220=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.96 0.61 4.38 1.25 7 3 C7.83 3.17 8.65 3.33 9.5 3.5 C12 4 12 4 15 6 C15 6.66 15 7.32 15 8 C8.93 7.69 4.66 4.65 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#311540\",transform:\"translate(807,257)\"})),_path2221||(_path2221=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.98 1.24 1.96 2.47 1.94 3.75 C1.93 6.66 2.07 9.21 3 12 C2.01 12.5 2.01 12.5 1 13 C0.34 10.69 -0.32 8.38 -1 6 C-1.33 6.99 -1.66 7.98 -2 9 C-2.33 9.99 -2.66 10.98 -3 12 C-4.25 5.38 -4.25 5.38 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3A174A\",transform:\"translate(610,101)\"})),_path2222||(_path2222=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-3.52 7.82 -3.52 7.82 -8 10 C-8.99 10 -9.98 10 -11 10 C-9.73 8.71 -8.46 7.41 -7.19 6.12 C-6.48 5.41 -5.77 4.69 -5.04 3.95 C-3 2 -3 2 0 0 Z \",fill:\"#3E1C4C\",transform:\"translate(297,1231)\"})),_path2223||(_path2223=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.53 4.06 1.12 7.47 -1 11 C-2.32 10.67 -3.64 10.34 -5 10 C-3.33 6.67 -1.67 3.33 0 0 Z \",fill:\"#311342\",transform:\"translate(365,1112)\"})),_path2224||(_path2224=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.28 1.7 0.56 2.4 -0.19 3.12 C-3 5.93 -5.5 8.92 -8 12 C-8.99 11.67 -9.98 11.34 -11 11 C-10.05 9.83 -9.09 8.66 -8.12 7.5 C-7.32 6.53 -7.32 6.53 -6.51 5.53 C-6.01 5.03 -5.51 4.52 -5 4 C-4.34 4 -3.68 4 -3 4 C-3 3.34 -3 2.68 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#361745\",transform:\"translate(140,1102)\"})),_path2225||(_path2225=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.3 2.64 -6.6 5.28 -10 8 C-10.66 7.34 -11.32 6.68 -12 6 C-4.8 -1.6 -4.8 -1.6 0 0 Z \",fill:\"#573C5E\",transform:\"translate(1086,1055)\"})),_path2226||(_path2226=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.57 1.64 2.13 2.28 1.69 2.94 C-0.44 6.81 -1.71 10.79 -3 15 C-3.33 15 -3.66 15 -4 15 C-4.51 8.93 -3.04 5.23 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(951,978)\"})),_path2227||(_path2227=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.47 0.5 2.47 0.5 5 1 C5.36 2.44 5.72 3.87 6.06 5.31 C6.26 6.11 6.46 6.91 6.66 7.74 C7 10 7 10 6 13 C5.73 12.4 5.47 11.79 5.2 11.17 C4.84 10.37 4.49 9.57 4.12 8.75 C3.78 7.96 3.43 7.17 3.07 6.36 C2.1 4.21 1.07 2.1 0 0 Z \",fill:\"#111644\",transform:\"translate(1179,839)\"})),_path2228||(_path2228=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.43 0.6 0.87 1.2 1.31 1.81 C2.77 3.71 4.27 5.35 6 7 C6.66 6.34 7.32 5.68 8 5 C8 6.98 8 8.96 8 11 C5.69 10.88 5.69 10.88 3 10 C0.64 6.34 0 4.4 0 0 Z \",fill:\"#2F163C\",transform:\"translate(1217,779)\"})),_path2229||(_path2229=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 2.06 2.31 2.06 4 4 C-0.71 3.52 -4.67 3.03 -9 1 C-5.66 -1.1 -3.73 -1.31 0 0 Z \",fill:\"#220E37\",transform:\"translate(1027,745)\"})),_path2230||(_path2230=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.21 0.96 9.6 1.88 14 5 C10.99 5.94 8.94 6.04 5.88 5.31 C5.19 5.16 4.51 5.02 3.8 4.86 C1.42 3.72 0.95 2.4 0 0 Z \",fill:\"#1B0E27\",transform:\"translate(1137,660)\"})),_path2231||(_path2231=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.78 4.06 5.78 4.06 6.88 8.81 C6.92 9.86 6.96 10.92 7 12 C3.17 10.55 1.72 8.69 0 5 C-0.19 2.19 -0.19 2.19 0 0 Z \",fill:\"#28103B\",transform:\"translate(896,634)\"})),_path2232||(_path2232=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C-0.98 10.35 -2.96 8.7 -5 7 C-3.68 4.35 -1.9 2.26 0 0 Z \",fill:\"#705678\",transform:\"translate(578,561)\"})),_path2233||(_path2233=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.66 4.38 2.91 6.58 -1 9 C-3.31 8.75 -3.31 8.75 -5 8 C-4.38 7.75 -3.76 7.5 -3.12 7.25 C-0.63 5.78 0.07 4.71 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#67486D\",transform:\"translate(568,517)\"})),_path2234||(_path2234=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 2.64 1.66 5.28 2 8 C2.99 8 3.98 8 5 8 C4.34 10.31 3.68 12.62 3 15 C2.34 15 1.68 15 1 15 C-0.1 11.71 -0.1 9.26 -0.06 5.81 C-0.05 4.73 -0.04 3.64 -0.04 2.52 C-0.02 1.69 -0.01 0.86 0 0 Z \",fill:\"#351148\",transform:\"translate(420,483)\"})),_path2235||(_path2235=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.66 5.28 1.32 8 2 C8.33 3.98 8.66 5.96 9 8 C8.01 8.5 8.01 8.5 7 9 C6.57 8.55 6.13 8.09 5.69 7.62 C3.89 5.8 3.89 5.8 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#715578\",transform:\"translate(852,404)\"})),_path2236||(_path2236=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.75 7.06 -1.4 10.71 -6 16 C-6 12.4 -4.97 10.18 -3.56 6.88 C-3.11 5.8 -2.66 4.72 -2.19 3.62 C-1 1 -1 1 0 0 Z \",fill:\"#674F6D\",transform:\"translate(846,370)\"})),_path2237||(_path2237=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C-0.45 6.8 -0.45 6.8 -3.25 7.81 C-4.12 7.91 -4.12 7.91 -5 8 C-5 6.02 -5 4.04 -5 2 C-2.69 0.88 -2.69 0.88 0 0 Z \",fill:\"#775D82\",transform:\"translate(597,333)\"})),_path2238||(_path2238=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C7.33 1.34 7.66 0.68 8 0 C8.33 0.99 8.66 1.98 9 3 C8.67 3.66 8.34 4.32 8 5 C7.22 4.96 6.43 4.92 5.62 4.88 C2.84 4.71 2.84 4.71 1 7 C0 6 0 6 -0.06 2.94 C-0.04 1.97 -0.02 1 0 0 Z \",fill:\"#5F4066\",transform:\"translate(902,328)\"})),_path2239||(_path2239=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.48 0.31 2.96 0.62 4.44 0.94 C5.26 1.11 6.08 1.29 6.93 1.46 C9 2 9 2 10 3 C10.04 4.67 10.04 6.33 10 8 C5.43 6.03 2.87 4.08 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(914,313)\"})),_path2240||(_path2240=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.38 2.81 2.38 2.81 1 6 C-3.8 9 -3.8 9 -7 9 C-6.67 8.01 -6.34 7.02 -6 6 C-3.94 5.31 -3.94 5.31 -2 5 C-2 4.34 -2 3.68 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#755A7C\",transform:\"translate(550,278)\"})),_path2241||(_path2241=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.67 3.99 2.34 4.98 2 6 C-0.31 6 -2.62 6 -5 6 C-4.75 4.12 -4.75 4.12 -4 2 C-1.94 0.75 -1.94 0.75 0 0 Z \",fill:\"#0B0910\",transform:\"translate(729,267)\"})),_path2242||(_path2242=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.76 3.09 2 4.23 2 8 C0.68 7.67 -0.64 7.34 -2 7 C-2 6.34 -2 5.68 -2 5 C-4.97 4.5 -4.97 4.5 -8 4 C-5.6 1.1 -3.69 0.5 0 0 Z \",fill:\"#231A27\",transform:\"translate(674,258)\"})),_path2243||(_path2243=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-1.31 2.33 -3.62 2.66 -6 3 C-6 2.34 -6 1.68 -6 1 C-9.3 1.66 -12.6 2.32 -16 3 C-12.13 -0.87 -5.1 -1.91 0 0 Z \",fill:\"#715376\",transform:\"translate(700,182)\"})),_path2244||(_path2244=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.9 0.01 1.8 0.02 2.73 0.03 C3.42 0.04 4.1 0.05 4.81 0.06 C5.14 0.72 5.47 1.38 5.81 2.06 C0.85 3.39 -4.1 3.15 -9.19 3.06 C-7.31 -0.68 -3.72 -0.05 0 0 Z \",fill:\"#200E32\",transform:\"translate(621.1875,95.9375)\"})),_path2245||(_path2245=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.28 0.55 6.85 2.02 10.31 4.56 C11.2 5.2 12.08 5.84 12.99 6.5 C13.65 7 14.32 7.49 15 8 C14.01 8.33 13.02 8.66 12 9 C9.97 7.72 7.97 6.38 6 5 C5.07 4.65 4.14 4.3 3.19 3.94 C2.1 3.47 2.1 3.47 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#341446\",transform:\"translate(662,58)\"})),_path2246||(_path2246=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.68 0.29 3.34 0.62 5 1 C5.33 3.31 5.66 5.62 6 8 C4.68 7.67 3.36 7.34 2 7 C1.88 6.2 1.75 5.39 1.62 4.56 C1.32 3.29 1.32 3.29 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#401D4F\",transform:\"translate(193,1260)\"})),_path2247||(_path2247=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.46 3.69 3.01 6.7 4 11 C2.68 11 1.36 11 0 11 C-1 10 -1 10 -1.12 6.62 C-1 3 -1 3 0 0 Z \",fill:\"#271138\",transform:\"translate(142,1193)\"})),_path2248||(_path2248=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5 2.99 5 3.98 5 5 C2.69 5 0.38 5 -2 5 C-2.33 7.31 -2.66 9.62 -3 12 C-3.33 12 -3.66 12 -4 12 C-4.49 4.62 -4.49 4.62 -2 1.5 C-1.34 1.01 -0.68 0.51 0 0 Z \",fill:\"#0B133D\",transform:\"translate(718,1130)\"})),_path2249||(_path2249=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C3.96 2.72 3.92 3.44 3.88 4.19 C4.01 7.21 4.75 9.27 6 12 C5.01 12.33 4.02 12.66 3 13 C2.49 11.59 1.99 10.17 1.5 8.75 C1.08 7.57 1.08 7.57 0.66 6.36 C0 4 0 4 0 0 Z \",fill:\"#210F38\",transform:\"translate(1270,1018)\"})),_path2250||(_path2250=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C6.28 7.96 6.28 7.96 5 12 C4.16 10.57 3.33 9.13 2.5 7.69 C1.8 6.49 1.8 6.49 1.09 5.26 C0 3 0 3 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(354,1008)\"})),_path2251||(_path2251=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12 0.94 2.12 0.94 4 2 C4 3.65 4 5.3 4 7 C2.68 7.33 1.36 7.66 0 8 C-0.66 5.69 -1.32 3.38 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#3B174B\",transform:\"translate(374,1007)\"})),_path2252||(_path2252=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.12 5.12 C2.08 6.07 2.04 7.02 2 8 C-2.31 7.52 -4.17 6.25 -7 3 C-6.67 2.34 -6.34 1.68 -6 1 C-5.07 1.74 -5.07 1.74 -4.12 2.5 C-2.16 4.19 -2.16 4.19 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#381A43\",transform:\"translate(330,965)\"})),_path2253||(_path2253=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05 3.14 0.98 4.76 0.62 8 C0.53 8.87 0.44 9.73 0.35 10.62 C0 13 0 13 -1 16 C-1.66 16 -2.32 16 -3 16 C-2.58 10.4 -2.08 5.28 0 0 Z \",fill:\"#3A1A49\",transform:\"translate(317,813)\"})),_path2254||(_path2254=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.44 3.62 -8.21 5.33 -14 5 C-14.33 4.01 -14.66 3.02 -15 2 C-13.44 1.66 -11.88 1.33 -10.31 1 C-9.44 0.81 -8.57 0.63 -7.68 0.44 C-5.06 0.01 -2.64 -0.08 0 0 Z \",fill:\"#0D0F3A\",transform:\"translate(742,813)\"})),_path2255||(_path2255=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C1.67 3.66 1.34 4.32 1 5 C-1.64 5 -4.28 5 -7 5 C-6.67 4.01 -6.34 3.02 -6 2 C-6.33 1.34 -6.66 0.68 -7 0 C-4.33 -1.33 -2.83 -0.67 0 0 Z \",fill:\"#090F36\",transform:\"translate(689,805)\"})),_path2256||(_path2256=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.25 0.25 2.25 0.25 4 1 C3.43 3.87 3.14 4.86 1 7 C-1.06 6.75 -1.06 6.75 -3 6 C-3.33 5.34 -3.66 4.68 -4 4 C-2.25 1.94 -2.25 1.94 0 0 Z \",fill:\"#401D4F\",transform:\"translate(1094,743)\"})),_path2257||(_path2257=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 2.97 4.46 2.97 9 6 C8.01 6.5 8.01 6.5 7 7 C7 7.66 7 8.32 7 9 C6.01 9 5.02 9 4 9 C0 3.86 0 3.86 0 0 Z \",fill:\"#381A44\",transform:\"translate(1006,703)\"})),_path2258||(_path2258=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.23 3.68 0.23 3.68 -1.02 5.66 C-1.46 6.37 -1.91 7.08 -2.37 7.81 C-2.85 8.56 -3.32 9.3 -3.81 10.06 C-4.28 10.81 -4.74 11.55 -5.22 12.32 C-8.73 17.86 -8.73 17.86 -11 19 C-11 18.01 -11 17.02 -11 16 C-10.34 16 -9.68 16 -9 16 C-8.73 15.28 -8.47 14.57 -8.19 13.83 C-6.98 10.96 -5.56 8.41 -3.94 5.75 C-3.41 4.88 -2.88 4.01 -2.34 3.11 C-1 1 -1 1 0 0 Z \",fill:\"#3B174B\",transform:\"translate(370,692)\"})),_path2259||(_path2259=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88 -0.19 2.88 -0.19 6 0 C8 3 8 3 8 7 C7.01 6.67 6.02 6.34 5 6 C5 5.34 5 4.68 5 4 C3.35 3.67 1.7 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#1D0D2D\",transform:\"translate(649,629)\"})),_path2260||(_path2260=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-0.45 3.7 -1.91 4.38 -3.38 5.06 C-4.19 5.45 -5 5.83 -5.84 6.22 C-6.55 6.48 -7.26 6.74 -8 7 C-8.66 6.67 -9.32 6.34 -10 6 C-6.7 4.02 -3.4 2.04 0 0 Z \",fill:\"#7D6282\",transform:\"translate(734,587)\"})),_path2261||(_path2261=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.36 0.51 7.44 1.38 11 4 C11 4.66 11 5.32 11 6 C6.87 5.39 3.67 3.96 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8A7896\",transform:\"translate(653,550)\"})),_path2262||(_path2262=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.2 2.65 -6.39 4.94 -10 7 C-10.33 6.01 -10.66 5.02 -11 4 C-4.45 -1.48 -4.45 -1.48 0 0 Z \",fill:\"#593960\",transform:\"translate(611,531)\"})),_path2263||(_path2263=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C5.33 2.32 5.66 3.64 6 5 C5.01 5 4.02 5 3 5 C2.67 6.98 2.34 8.96 2 11 C-0.33 7.37 -0.16 4.23 0 0 Z \",fill:\"#160A1F\",transform:\"translate(539,503)\"})),_path2264||(_path2264=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C1.95 4.62 1.35 5.79 -1.12 7.25 C-1.74 7.5 -2.36 7.75 -3 8 C-3.99 7.01 -4.98 6.02 -6 5 C-4.02 3.35 -2.04 1.7 0 0 Z \",fill:\"#493851\",transform:\"translate(564,487)\"})),_path2265||(_path2265=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.64 3.65 C5.17 4.74 5.7 5.82 6.25 6.94 C6.79 8.02 7.33 9.1 7.89 10.21 C8.26 11.13 8.62 12.05 9 13 C8.67 13.66 8.34 14.32 8 15 C4.48 12.76 3.19 10.83 1.75 6.94 C1.41 6.06 1.08 5.18 0.73 4.28 C0 2 0 2 0 0 Z \",fill:\"#28103B\",transform:\"translate(518,474)\"})),_path2266||(_path2266=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.34 2.66 0.68 3.32 0 4 C-0.14 4.78 -0.29 5.57 -0.44 6.38 C-1.07 9.31 -2.01 10.78 -4 13 C-4.99 13.5 -4.99 13.5 -6 14 C-5.41 9.29 -3.44 3.44 0 0 Z \",fill:\"#3B174B\",transform:\"translate(441,456)\"})),_path2267||(_path2267=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.28 3.64 2.33 6.83 2.38 11.06 C2.4 12.29 2.43 13.52 2.46 14.79 C2 18 2 18 -0.02 19.93 C-0.68 20.29 -1.33 20.64 -2 21 C-2.66 20.34 -3.32 19.68 -4 19 C-3.35 18.33 -2.69 17.65 -2.02 16.96 C0.51 13.25 0.42 11.12 0.25 6.69 C0.21 5.43 0.18 4.18 0.14 2.89 C0.09 1.93 0.05 0.98 0 0 Z \",fill:\"#7C5C7B\",transform:\"translate(574,379)\"})),_path2268||(_path2268=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.67 5.3 4.27 10.47 5 16 C4.34 16 3.68 16 3 16 C-0.43 10.86 -0.1 5.99 0 0 Z \",fill:\"#060929\",transform:\"translate(489,380)\"})),_path2269||(_path2269=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67 -0.04 3.33 -0.04 5 0 C6 1 6 1 6.06 3.56 C6.04 4.37 6.02 5.17 6 6 C5.05 5.81 4.1 5.63 3.12 5.44 C0.1 4.71 0.1 4.71 -2 6 C-2 4.68 -2 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#836F91\",transform:\"translate(903,369)\"})),_path2270||(_path2270=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.07 1.33 0.14 2.01 0.22 C3.34 0.36 3.34 0.36 4.69 0.5 C5.99 0.64 5.99 0.64 7.32 0.78 C9.9 0.99 12.42 1.04 15 1 C15 1.66 15 2.32 15 3 C12.65 4.18 11.18 4.13 8.56 4.12 C7.39 4.13 7.39 4.13 6.19 4.13 C4 4 4 4 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#1F0E30\",transform:\"translate(844,303)\"})),_path2271||(_path2271=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.55 -0.18 7.88 0 12 2 C11.67 2.66 11.34 3.32 11 4 C3.57 4.29 3.57 4.29 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3C2E41\",transform:\"translate(694,258)\"})),_path2272||(_path2272=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C5 1.99 5 2.98 5 4 C5.66 4.33 6.32 4.66 7 5 C8.35 6.31 9.69 7.64 11 9 C6.17 8.59 4.1 6.62 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#311442\",transform:\"translate(853,230)\"})),_path2273||(_path2273=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.99 6.6 1.98 10 3 C7.33 4.78 4.97 5.88 2 7 C1.67 6.34 1.34 5.68 1 5 C0.67 5 0.34 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#806685\",transform:\"translate(648,230)\"})),_path2274||(_path2274=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.48 7.88 -1.09 15.34 -3 23 C-3.33 23 -3.66 23 -4 23 C-3.66 14.81 -3.03 7.64 0 0 Z \",fill:\"#381A45\",transform:\"translate(520,213)\"})),_path2275||(_path2275=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.18 4.38 0.1 8.68 -1 13 C-1.66 13 -2.32 13 -3 13 C-3.45 4.24 -3.45 4.24 0 0 Z \",fill:\"#2A1238\",transform:\"translate(536,169)\"})),_path2276||(_path2276=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.39 4.99 -0.71 7.74 -3 11 C-4.19 9.31 -4.19 9.31 -5 7 C-3.65 4.15 -2.23 2.23 0 0 Z \",fill:\"#341047\",transform:\"translate(514,141)\"})),_path2277||(_path2277=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.19 1.94 0.19 4 1 C6.11 3.96 6.2 6.44 6 10 C4.45 7.68 3.2 5.49 2 3 C-1.74 4.25 -2.19 5.63 -4 9 C-4.33 8.34 -4.66 7.68 -5 7 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#0B1240\",transform:\"translate(907,1257)\"})),_path2278||(_path2278=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.64 0.28 -1.28 0.55 -1.93 0.84 C-2.76 1.2 -3.59 1.56 -4.44 1.94 C-5.26 2.3 -6.08 2.66 -6.93 3.03 C-8.94 3.83 -8.94 3.83 -10 5 C-12.67 5.14 -15.32 5.04 -18 5 C-15.04 3.49 -12.06 2.1 -9 0.81 C-8.15 0.45 -7.31 0.08 -6.44 -0.29 C-3.8 -1.06 -2.54 -0.92 0 0 Z \",fill:\"#381945\",transform:\"translate(221,1151)\"})),_path2279||(_path2279=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.62 3 0.62 3 -1 5 C-1.66 5 -2.32 5 -3 5 C-3.33 5.99 -3.66 6.98 -4 8 C-5.63 9.39 -5.63 9.39 -7.56 10.69 C-8.52 11.34 -8.52 11.34 -9.5 12.01 C-10 12.34 -10.49 12.66 -11 13 C-9.66 10.1 -8.15 7.79 -6.06 5.38 C-5.56 4.78 -5.05 4.19 -4.54 3.59 C-3 2 -3 2 0 0 Z \",fill:\"#3C1C49\",transform:\"translate(346,1121)\"})),_path2280||(_path2280=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.95 4.39 6.87 9.5 9 15 C8.67 15.66 8.34 16.32 8 17 C7.71 16.2 7.42 15.39 7.12 14.56 C6.27 11.87 6.27 11.87 4 11 C3.07 9.34 2.2 7.65 1.38 5.94 C0.93 5.02 0.48 4.1 0.02 3.15 C-0.48 2.09 -0.48 2.09 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#090F36\",transform:\"translate(598,969)\"})),_path2281||(_path2281=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.53 3.07 2.64 5.7 3.62 8.94 C3.89 9.77 4.15 10.61 4.41 11.46 C5.01 14.06 5.1 16.34 5 19 C2.87 15.81 2.5 13.73 2 10 C1.34 10 0.68 10 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#442357\",transform:\"translate(536,932)\"})),_path2282||(_path2282=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 2.24 3.87 4.39 5.25 7.44 C5.61 8.2 5.96 8.96 6.33 9.75 C7.08 12.28 6.87 13.54 6 16 C4.99 14.28 3.99 12.55 3 10.81 C2.44 9.85 1.89 8.89 1.31 7.89 C-0.02 4.95 -0.28 3.18 0 0 Z \",fill:\"#0E1440\",transform:\"translate(1206,890)\"})),_path2283||(_path2283=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.27 3.1 5.98 5.95 8 10 C8 10.99 8 11.98 8 13 C7.34 13 6.68 13 6 13 C5.02 11.24 4.05 9.48 3.07 7.73 C1.99 5.84 1.99 5.84 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#261037\",transform:\"translate(1174,824)\"})),_path2284||(_path2284=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 3.64 3 6.28 3 9 C1.02 9.99 1.02 9.99 -1 11 C-1.09 7.17 -0.88 3.73 0 0 Z \",fill:\"#3B184B\",transform:\"translate(1277,819)\"})),_path2285||(_path2285=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C2.93 3.69 2.93 3.69 3.88 3.38 C4.93 3.19 4.93 3.19 6 3 C6.66 3.66 7.32 4.32 8 5 C6.02 5.66 4.04 6.32 2 7 C2.33 7.66 2.66 8.32 3 9 C2.01 9.33 1.02 9.66 0 10 C-0.66 9.01 -1.32 8.02 -2 7 C-1.67 6.67 -1.34 6.34 -1 6 C-1 5.17 -1 4.35 -1 3.5 C-1 1 -1 1 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(856,758)\"})),_path2286||(_path2286=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.12 0.56 0.25 1.11 0.38 1.69 C1.06 4.22 1.99 6.58 3 9 C2.34 9 1.68 9 1 9 C0.67 9.66 0.34 10.32 0 11 C-2.06 11.62 -2.06 11.62 -4 12 C-3.34 7.61 -1.81 4.02 0 0 Z \",fill:\"#261038\",transform:\"translate(431,739)\"})),_path2287||(_path2287=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.62 4.04 -2.29 6.04 -4 8 C-4.66 8 -5.32 8 -6 8 C-6 8.66 -6 9.32 -6 10 C-7.32 10.33 -8.64 10.66 -10 11 C-8.55 7.56 -6.72 5.64 -3.88 3.25 C-3.15 2.64 -2.43 2.02 -1.68 1.39 C-0.85 0.7 -0.85 0.7 0 0 Z \",fill:\"#0F0F31\",transform:\"translate(878,728)\"})),_path2288||(_path2288=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C0.01 4.66 -0.98 5.32 -2 6 C-2.33 6.99 -2.66 7.98 -3 9 C-4.32 8.67 -5.64 8.34 -7 8 C-6.88 6.25 -6.88 6.25 -6 4 C-2.94 1.75 -2.94 1.75 0 0 Z \",fill:\"#241038\",transform:\"translate(442,725)\"})),_path2289||(_path2289=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.34 0.29 4.67 0.62 7 1 C6.01 1.5 6.01 1.5 5 2 C5.45 2.45 5.91 2.91 6.38 3.38 C7.58 4.58 8.79 5.79 10 7 C6.45 6.39 3.23 5.62 0 4 C-0.33 3.01 -0.66 2.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#381A43\",transform:\"translate(1104,650)\"})),_path2290||(_path2290=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1.62 5.12 C-4.44 7.35 -6.47 7.68 -10 8 C-9.24 6.85 -8.47 5.7 -7.69 4.56 C-7.26 3.92 -6.83 3.29 -6.39 2.63 C-4.53 0.44 -2.84 0 0 0 Z \",fill:\"#836F91\",transform:\"translate(685,612)\"})),_path2291||(_path2291=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.25 8.75 1.25 8.75 -1 11 C-1.99 8.03 -2.98 5.06 -4 2 C-3.01 2.33 -2.02 2.66 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#1F1328\",transform:\"translate(586,606)\"})),_path2292||(_path2292=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.99 3.3 1.98 5 3 C4.67 4.65 4.34 6.3 4 8 C4.66 8.33 5.32 8.66 6 9 C6 10.65 6 12.3 6 14 C5.34 14 4.68 14 4 14 C3.33 12.04 2.66 10.08 2 8.12 C1.63 7.03 1.26 5.94 0.88 4.82 C0 2 0 2 0 0 Z \",fill:\"#301839\",transform:\"translate(868,582)\"})),_path2293||(_path2293=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.98 3.07 3.96 4.46 4.25 8.81 C4.17 9.86 4.09 10.92 4 12 C1.39 9.48 -0.89 6.95 -3 4 C-2.67 3.34 -2.34 2.68 -2 2 C-1.34 2.33 -0.68 2.66 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#1B0D28\",transform:\"translate(564,555)\"})),_path2294||(_path2294=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C0.35 3.65 -1.3 5.3 -3 7 C-2.65 7.76 -2.3 8.53 -1.94 9.31 C-1 12 -1 12 -2 15 C-6 9.5 -6 9.5 -6 5 C-2.79 2 -2.79 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#856B8A\",transform:\"translate(871,412)\"})),_path2295||(_path2295=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6 2.66 6 3.32 6 4 C7.32 4.33 8.64 4.66 10 5 C9.01 6.49 9.01 6.49 8 8 C7.01 8 6.02 8 5 8 C5 7.34 5 6.68 5 6 C4.34 6 3.68 6 3 6 C2.01 4.02 1.02 2.04 0 0 Z \",fill:\"#857193\",transform:\"translate(849,384)\"})),_path2296||(_path2296=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.07 -0.51 9.77 0.96 15 4 C14.67 4.99 14.34 5.98 14 7 C13.48 6.73 12.97 6.46 12.44 6.19 C10.47 5.23 8.46 4.35 6.44 3.5 C3 2 3 2 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(632,374)\"})),_path2297||(_path2297=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.63 1 7.26 1 11 C0.34 11 -0.32 11 -1 11 C-1 11.66 -1 12.32 -1 13 C-1.66 13 -2.32 13 -3 13 C-3 9.7 -3 6.4 -3 3 C-2.01 3.5 -2.01 3.5 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#7C6283\",transform:\"translate(846,330)\"})),_path2298||(_path2298=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.33 2.98 2.66 4 3 C4.33 5.31 4.66 7.62 5 10 C4.34 10 3.68 10 3 10 C3 9.34 3 8.68 3 8 C2.01 8 1.02 8 0 8 C-2 5 -2 5 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#201723\",transform:\"translate(565,317)\"})),_path2299||(_path2299=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 5.61 3.32 11.22 4 17 C2.16 14.24 1.28 12.19 0.31 9.06 C0.04 8.21 -0.23 7.35 -0.51 6.47 C-1.02 3.89 -0.85 2.46 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(937,304)\"})),_path2300||(_path2300=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26 0.23 2.52 0.45 3.81 0.69 C3.03 1.31 2.25 1.93 1.44 2.56 C-1.16 4.59 -1.16 4.59 -3.19 6.69 C-3.52 5.7 -3.85 4.71 -4.19 3.69 C-5.18 3.36 -6.17 3.03 -7.19 2.69 C-5.15 -0.49 -3.5 -0.46 0 0 Z \",fill:\"#7D6282\",transform:\"translate(884.1875,296.3125)\"})),_path2301||(_path2301=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.39 0.66 7.98 2.19 12 4 C12 4.66 12 5.32 12 6 C7.28 5.54 3.83 4.9 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1F0E31\",transform:\"translate(845,290)\"})),_path2302||(_path2302=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.39 0.45 6.7 1.11 10 2 C10 2.99 10 3.98 10 5 C3.6 5.49 3.6 5.49 0.56 3 C0.05 2.34 -0.47 1.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#614167\",transform:\"translate(582,287)\"})),_path2303||(_path2303=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-3.39 5.07 -3.39 5.07 -6.06 4.75 C-8.12 3.96 -10.04 3 -12 2 C-10.56 1.66 -9.13 1.33 -7.69 1 C-6.89 0.81 -6.09 0.63 -5.26 0.44 C-3 0 -3 0 0 0 Z \",fill:\"#5A4861\",transform:\"translate(583,266)\"})),_path2304||(_path2304=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C1.32 5.92 1.32 5.92 0.12 9.19 C-0.26 10.27 -0.65 11.36 -1.05 12.48 C-1.52 13.73 -1.52 13.73 -2 15 C-2.33 15 -2.66 15 -3 15 C-3.55 4.44 -3.55 4.44 0 0 Z \",fill:\"#3E1E4A\",transform:\"translate(478,225)\"})),_path2305||(_path2305=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C0.02 4.31 -1.96 6.62 -4 9 C-4.99 8.67 -5.98 8.34 -7 8 C-5.99 4.6 -5.35 3.24 -2.38 1.19 C-1.59 0.8 -0.81 0.4 0 0 Z \",fill:\"#291237\",transform:\"translate(547,155)\"})),_path2306||(_path2306=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.22 2.34 3.42 3.67 2.62 5 C2.18 5.74 1.74 6.49 1.29 7.25 C0.65 8.12 0.65 8.12 0 9 C-0.66 9 -1.32 9 -2 9 C-1.12 2.25 -1.12 2.25 0 0 Z \",fill:\"#270F3A\",transform:\"translate(497,152)\"})),_path2307||(_path2307=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.93 0.63 5.36 1.59 8 3 C8 3.66 8 4.32 8 5 C8.66 5.33 9.32 5.66 10 6 C8.38 6.81 8.38 6.81 6 7 C2.75 4.69 2.75 4.69 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#200F27\",transform:\"translate(169,1240)\"})),_path2308||(_path2308=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-3.94 6.44 -3.94 6.44 -10 12 C-10.66 11.67 -11.32 11.34 -12 11 C-10.74 7.22 -9.27 6.56 -6 4.38 C-2.85 2.37 -2.85 2.37 0 0 Z \",fill:\"#080D31\",transform:\"translate(1052,1075)\"})),_path2309||(_path2309=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.38 3.25 3.38 3.25 3 6 C0 8.31 0 8.31 -3 10 C-2.25 2.25 -2.25 2.25 0 0 Z \",fill:\"#281231\",transform:\"translate(262,1075)\"})),_path2310||(_path2310=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.19 0.6 8.01 1.57 12 3 C12 3.66 12 4.32 12 5 C4.15 5.3 4.15 5.3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#705275\",transform:\"translate(1118,1042)\"})),_path2311||(_path2311=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.29 4.12 4.26 7.67 4 12 C3.01 12.49 3.01 12.49 2 13 C1.47 11.21 0.95 9.42 0.44 7.62 C0.15 6.63 -0.14 5.63 -0.44 4.6 C-1 2 -1 2 0 0 Z \",fill:\"#1E0D31\",transform:\"translate(1270,1024)\"})),_path2312||(_path2312=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11 0.15 1.11 0.15 2.25 0.31 C1.57 0.81 0.89 1.3 0.19 1.81 C-3.54 4.98 -6.6 8.58 -9.75 12.31 C-10.41 11.98 -11.07 11.65 -11.75 11.31 C-10.54 9.87 -9.33 8.42 -8.11 6.98 C-6.92 5.52 -5.83 3.98 -4.75 2.44 C-2.75 0.31 -2.75 0.31 0 0 Z \",fill:\"#0B133D\",transform:\"translate(929.75,847.6875)\"})),_path2313||(_path2313=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.5 3.65 8.63 7.26 12 12 C11.67 12.99 11.34 13.98 11 15 C10.44 14.28 9.89 13.56 9.31 12.81 C7.06 9.95 7.06 9.95 4.38 7.5 C2.03 5.03 1.01 3.22 0 0 Z \",fill:\"#472555\",transform:\"translate(1239,731)\"})),_path2314||(_path2314=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.99 3.3 1.98 5 3 C4.67 4.65 4.34 6.3 4 8 C2.68 7.67 1.36 7.34 0 7 C-0.38 5.01 -0.71 3.01 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2C123E\",transform:\"translate(572,704)\"})),_path2315||(_path2315=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44 0.94 2.44 0.94 3.75 3 C4.09 3.96 4.09 3.96 4.44 4.94 C3.45 5.43 3.45 5.43 2.44 5.94 C0.75 5.33 -0.92 4.66 -2.56 3.94 C-3.55 3.61 -4.54 3.28 -5.56 2.94 C-3.73 0.52 -3.11 -0.08 0 0 Z \",fill:\"#080D31\",transform:\"translate(943.5625,702.0625)\"})),_path2316||(_path2316=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.51 6.07 0.04 9.77 -3 15 C-3.66 15 -4.32 15 -5 15 C-4.67 13.68 -4.34 12.36 -4 11 C-3.34 11 -2.68 11 -2 11 C-2.04 9.74 -2.08 8.48 -2.12 7.19 C-2.24 3.71 -2.06 3.09 0 0 Z \",fill:\"#715376\",transform:\"translate(679,682)\"})),_path2317||(_path2317=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.36 0.12 1.36 0.12 2.75 0.25 C1.75 3.25 1.75 3.25 0 4.5 C-2.78 5.43 -4.47 5.02 -7.25 4.25 C-4.84 1.28 -3.9 0.3 0 0 Z \",fill:\"#0B0910\",transform:\"translate(693.25,613.75)\"})),_path2318||(_path2318=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86 4.29 2.35 7.96 1.5 12.94 C1.33 13.62 1.17 14.3 1 15 C0.34 15 -0.32 15 -1 15 C-1.03 13.25 -1.05 11.5 -1.06 9.75 C-1.07 8.78 -1.09 7.8 -1.1 6.8 C-1.01 4.34 -0.71 2.34 0 0 Z \",fill:\"#421F4F\",transform:\"translate(431,558)\"})),_path2319||(_path2319=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.67 6.35 0.8 10.03 -1 14 C-1.66 14 -2.32 14 -3 14 C-2.69 11.85 -2.38 9.71 -2.06 7.56 C-1.89 6.37 -1.71 5.17 -1.54 3.94 C-1 1 -1 1 0 0 Z \",fill:\"#70567D\",transform:\"translate(562,465)\"})),_path2320||(_path2320=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.47 1.15 4.05 2.05 6 4 C5.69 6.81 5.69 6.81 5 10 C4.81 10.95 4.63 11.9 4.44 12.88 C4.29 13.58 4.15 14.28 4 15 C3.01 14.67 2.02 14.34 1 14 C1.88 10.12 1.88 10.12 3 9 C3.33 6.54 3.33 6.54 3 4 C2.01 3.34 1.02 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#755A7C\",transform:\"translate(590,434)\"})),_path2321||(_path2321=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.26 0.55 0.51 1.1 0.77 1.67 C2.19 4.37 3.86 6.77 5.62 9.25 C6.57 10.59 6.57 10.59 7.54 11.95 C8.02 12.63 8.5 13.3 9 14 C8.01 14.33 7.02 14.66 6 15 C1.8 9.84 0.35 6.65 0 0 Z \",fill:\"#785D7F\",transform:\"translate(595,388)\"})),_path2322||(_path2322=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5 2.65 5 4.3 5 6 C3.35 6.33 1.7 6.66 0 7 C-1.12 2.25 -1.12 2.25 0 0 Z \",fill:\"#140E17\",transform:\"translate(531,388)\"})),_path2323||(_path2323=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C10.67 0.99 10.34 1.98 10 3 C6.7 3 3.4 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#000002\",transform:\"translate(624,384)\"})),_path2324||(_path2324=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 2 -2 4 -3 6 C-1.35 6.33 0.3 6.66 2 7 C0.02 7.99 0.02 7.99 -2 9 C-2.99 8.34 -3.98 7.68 -5 7 C-5 6.34 -5 5.68 -5 5 C-5.66 4.67 -6.32 4.34 -7 4 C-3.38 0 -3.38 0 0 0 Z \",fill:\"#7E6485\",transform:\"translate(860,381)\"})),_path2325||(_path2325=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-1.04 5 -1.04 7 -1 9 C-1.99 9.5 -1.99 9.5 -3 10 C-3.66 7.36 -4.32 4.72 -5 2 C-5.66 2 -6.32 2 -7 2 C-7 1.34 -7 0.68 -7 0 C-3.87 -1.04 -3.01 -0.93 0 0 Z \",fill:\"#140D17\",transform:\"translate(520,372)\"})),_path2326||(_path2326=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 2.65 3 4.3 3 6 C2.01 6.5 2.01 6.5 1 7 C0.34 7.99 -0.32 8.98 -1 10 C-2.25 3.38 -2.25 3.38 0 0 Z \",fill:\"#140E17\",transform:\"translate(512,359)\"})),_path2327||(_path2327=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 2 8 4 12 6 C12 6.99 12 7.98 12 9 C6.04 7.72 3.52 4.66 0 0 Z \",fill:\"#846E8F\",transform:\"translate(823,349)\"})),_path2328||(_path2328=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.11 3.29 0.24 4.94 0.38 C5.85 0.44 6.77 0.51 7.71 0.59 C8.85 0.79 8.85 0.79 10 1 C10.33 1.66 10.66 2.32 11 3 C6.05 4.49 6.05 4.49 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#211824\",transform:\"translate(622,331)\"})),_path2329||(_path2329=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C7.86 3.41 6.96 4.12 4 6 C3.34 6 2.68 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#64486B\",transform:\"translate(598,325)\"})),_path2330||(_path2330=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-5.4 6.08 -5.4 6.08 -8.44 5.69 C-8.95 5.46 -9.47 5.23 -10 5 C-4.5 0 -4.5 0 0 0 Z \",fill:\"#4C3B54\",transform:\"translate(665,322)\"})),_path2331||(_path2331=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 0.03 1.21 0.03 2.44 0.06 C3.12 1.88 3.12 1.88 3.44 4.06 C2.12 5.81 2.12 5.81 0.44 7.06 C-0.22 7.06 -0.88 7.06 -1.56 7.06 C-2.22 5.08 -2.88 3.1 -3.56 1.06 C-2.56 0.06 -2.56 0.06 0 0 Z \",fill:\"#694A6F\",transform:\"translate(675.5625,320.9375)\"})),_path2332||(_path2332=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11 0.34 1.11 0.34 2.25 0.69 C1.26 1.18 1.26 1.18 0.25 1.69 C0.25 2.35 0.25 3.01 0.25 3.69 C0.91 4.02 1.57 4.35 2.25 4.69 C0 5.38 0 5.38 -2.75 5.69 C-5.06 4.25 -5.06 4.25 -6.75 2.69 C-4.3 0.41 -3.41 -0.39 0 0 Z \",fill:\"#0B0910\",transform:\"translate(596.75,271.3125)\"})),_path2333||(_path2333=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C6.64 2 9.28 2 12 2 C12 2.66 12 3.32 12 4 C6.77 6.02 6.77 6.02 3.75 5.94 C1.17 4.56 0.83 2.71 0 0 Z \",fill:\"#140E17\",transform:\"translate(596,271)\"})),_path2334||(_path2334=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.12 5.62 3.12 5.62 2 9 C1.01 9 0.02 9 -1 9 C-2.26 5.23 -1.37 3.63 0 0 Z \",fill:\"#30163D\",transform:\"translate(531,180)\"})),_path2335||(_path2335=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.08 0.33 4.62 0.63 6.88 2.81 C8 5 8 5 7 9 C3.37 9 -0.26 9 -4 9 C-4 8.67 -4 8.34 -4 8 C-1.36 7.67 1.28 7.34 4 7 C4 5.68 4 4.36 4 3 C2.08 1.23 2.08 1.23 0 0 Z \",fill:\"#321641\",transform:\"translate(654,84)\"})),_path2336||(_path2336=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.44 0.45 2.88 0.91 4.31 1.38 C5.11 1.63 5.91 1.89 6.74 2.15 C9 3 9 3 12 5 C8.67 6.11 6.38 5.84 3 5 C3 4.34 3 3.68 3 3 C2.01 3 1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#381846\",transform:\"translate(814,80)\"})),_path2337||(_path2337=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2.33 2.32 2.66 3 3 C1.35 4.65 -0.3 6.3 -2 8 C-3.65 7.01 -5.3 6.02 -7 5 C-6.67 4.34 -6.34 3.68 -6 3 C-4.02 3 -2.04 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#1F0D31\",transform:\"translate(684,62)\"})),_path2338||(_path2338=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.99 3.3 1.98 5 3 C4.67 3.99 4.34 4.98 4 6 C2.02 6 0.04 6 -2 6 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#090F36\",transform:\"translate(772,1274)\"})),_path2339||(_path2339=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.24 3.61 0.79 6.41 0.12 10.12 C-0.06 11.18 -0.24 12.23 -0.43 13.32 C-1 16 -1 16 -2 18 C-2.66 18 -3.32 18 -4 18 C-2.07 5.33 -2.07 5.33 0 0 Z \",fill:\"#3A1949\",transform:\"translate(606,1190)\"})),_path2340||(_path2340=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.96 2 7.92 2 12 C-1 9 -1 9 -1.25 5.44 C-1 2 -1 2 0 0 Z \",fill:\"#7C648C\",transform:\"translate(1012,1160)\"})),_path2341||(_path2341=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C2.38 3.91 -0.72 5.89 -4 8 C-4.66 7.67 -5.32 7.34 -6 7 C-4.02 4.69 -2.04 2.38 0 0 Z \",fill:\"#28132F\",transform:\"translate(201,1152)\"})),_path2342||(_path2342=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.49 0.99 1.49 0.99 3 2 C2.67 5.63 2.34 9.26 2 13 C-1 9 -1 9 -1.07 6.64 C-0.95 5.85 -0.82 5.06 -0.69 4.25 C-0.57 3.45 -0.45 2.65 -0.32 1.83 C-0.22 1.22 -0.11 0.62 0 0 Z \",fill:\"#401D50\",transform:\"translate(362,1070)\"})),_path2343||(_path2343=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 2.64 4.66 5.28 5 8 C4.01 8 3.02 8 2 8 C0.24 4.91 0 3.77 0 0 Z \",fill:\"#101643\",transform:\"translate(1275,1051)\"})),_path2344||(_path2344=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.62 1.94 0.62 4 2 C4.88 4.94 4.88 4.94 5 8 C4.01 9.49 4.01 9.49 3 11 C1.68 10.01 0.36 9.02 -1 8 C-0.34 8 0.32 8 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#3A1949\",transform:\"translate(331,965)\"})),_path2345||(_path2345=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06 0.69 1.12 1.37 1.18 2.08 C1.27 2.98 1.35 3.88 1.44 4.81 C1.52 5.71 1.6 6.6 1.68 7.52 C1.93 10.13 1.93 10.13 3 13 C2.66 15.26 2.66 15.26 2.06 17.69 C1.77 18.9 1.77 18.9 1.47 20.14 C1.32 20.75 1.16 21.37 1 22 C-0.16 17.78 -0.38 13.66 -0.62 9.31 C-0.68 8.53 -0.73 7.74 -0.78 6.94 C-0.9 4.96 -0.95 2.98 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3A1849\",transform:\"translate(380,934)\"})),_path2346||(_path2346=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.61 2.61 3.44 5.53 4.62 8.94 C4.85 9.57 5.08 10.2 5.32 10.86 C6.33 13.71 7 15.95 7 19 C1.87 13.06 0.85 7.71 0 0 Z \",fill:\"#2C123E\",transform:\"translate(434,925)\"})),_path2347||(_path2347=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.3 2 6.6 2 10 C-0.06 8.31 -0.06 8.31 -2 6 C-1.7 1.7 -1.7 1.7 0 0 Z \",fill:\"#381A43\",transform:\"translate(1278,920)\"})),_path2348||(_path2348=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.06 3.06 -6.51 3.83 -10.75 4.31 C-11.49 4.21 -12.24 4.11 -13 4 C-13.66 3.01 -14.32 2.02 -15 1 C-14.05 1.02 -13.1 1.04 -12.12 1.06 C-7.95 0.98 -4.37 -0.08 0 0 Z \",fill:\"#3B174B\",transform:\"translate(286,758)\"})),_path2349||(_path2349=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.19 0.59 1.39 1.18 1.59 1.79 C2.94 5.91 4.32 10 6 14 C5.34 14.66 4.68 15.32 4 16 C0.67 10.42 -0.46 6.5 0 0 Z \",fill:\"#45224F\",transform:\"translate(1219,718)\"})),_path2350||(_path2350=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.99 2.33 -1.98 2.66 -3 3 C-1.68 3.66 -0.36 4.32 1 5 C-1.97 4.67 -4.94 4.34 -8 4 C-8 3.34 -8 2.68 -8 2 C-8.66 1.67 -9.32 1.34 -10 1 C-6.53 -0.16 -3.64 -0.07 0 0 Z \",fill:\"#281630\",transform:\"translate(623,628)\"})),_path2351||(_path2351=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.91 1.46 3.36 3.51 4.69 6.44 C5.15 7.43 5.6 8.41 6.07 9.43 C6.38 10.28 6.69 11.13 7 12 C6.67 12.66 6.34 13.32 6 14 C3.56 12.62 3.56 12.62 1 10 C0.26 6.67 0.07 3.4 0 0 Z \",fill:\"#321640\",transform:\"translate(870,575)\"})),_path2352||(_path2352=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C2.64 1.67 5.28 1.34 8 1 C8 1.66 8 2.32 8 3 C3.05 3 -1.9 3 -7 3 C-7 2.34 -7 1.68 -7 1 C-4.54 -0.23 -2.72 -0.07 0 0 Z \",fill:\"#150F19\",transform:\"translate(578,543)\"})),_path2353||(_path2353=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.34 1.98 3.68 3.96 3 6 C2.01 6 1.02 6 0 6 C-0.33 6.99 -0.66 7.98 -1 9 C-0.67 6.03 -0.34 3.06 0 0 Z \",fill:\"#1B0E25\",transform:\"translate(545,520)\"})),_path2354||(_path2354=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.15 6.15 6.15 6.15 6.19 10.38 C6.2 11.17 6.22 11.96 6.23 12.77 C6 15 6 15 4 18 C4.05 17.42 4.09 16.84 4.14 16.24 C4.41 10.48 3.59 7.71 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#6C4D71\",transform:\"translate(554,461)\"})),_path2355||(_path2355=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 1.88 4.75 1.88 7 3 C7 3.99 7 4.98 7 6 C7.66 6.33 8.32 6.66 9 7 C8.01 7.33 7.02 7.66 6 8 C2.81 6.31 2.81 6.31 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#403047\",transform:\"translate(543,454)\"})),_path2356||(_path2356=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.01 -0.52 4.87 -1.5 7.69 C-1.92 8.9 -1.92 8.9 -2.34 10.14 C-2.56 10.75 -2.78 11.37 -3 12 C-3.66 12 -4.32 12 -5 12 C-5.81 9.31 -5.81 9.31 -6 6 C-3.62 3.19 -3.62 3.19 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7D6282\",transform:\"translate(880,411)\"})),_path2357||(_path2357=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.5 1.98 0.5 4 1 C3.67 1.66 3.34 2.32 3 3 C2.34 2.67 1.68 2.34 1 2 C2.65 5.3 4.3 8.6 6 12 C2.15 10.72 1.58 9.21 -0.28 5.79 C-1 4 -1 4 -0.75 1.56 C-0.5 1.05 -0.25 0.53 0 0 Z \",fill:\"#58385F\",transform:\"translate(606,411)\"})),_path2358||(_path2358=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.7 4.11 6.7 4.11 7.94 7.81 C7.96 8.53 7.98 9.26 8 10 C5.5 8.62 5.5 8.62 3 7 C3 6.34 3 5.68 3 5 C1.68 4.34 0.36 3.68 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(852,406)\"})),_path2359||(_path2359=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2.33 5.32 2.66 6 3 C5.01 4.49 5.01 4.49 4 6 C0.88 6.19 0.88 6.19 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#53415C\",transform:\"translate(856,399)\"})),_path2360||(_path2360=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.12 5.75 3.12 5.75 2 8 C0.68 7.34 -0.64 6.68 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#68496E\",transform:\"translate(903,391)\"})),_path2361||(_path2361=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.99 1 3.98 1 5 1 C5.33 1.99 5.66 2.98 6 4 C5.01 5.49 5.01 5.49 4 7 C1.52 6.01 1.52 6.01 -1 5 C-1 2 -1 2 0 0 Z \",fill:\"#381A43\",transform:\"translate(854,374)\"})),_path2362||(_path2362=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.05 4.75 1.83 8.59 1.06 13.38 C0.77 15.24 0.77 15.24 0.47 17.15 C0.32 18.09 0.16 19.03 0 20 C-0.33 20 -0.66 20 -1 20 C-2.17 12.86 -1.59 7.04 0 0 Z \",fill:\"#060A2B\",transform:\"translate(491,360)\"})),_path2363||(_path2363=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.99 1.1 3.85 1.68 5.25 4.62 C5.5 5.41 5.75 6.19 6 7 C5.34 7.66 4.68 8.32 4 9 C1.44 6.75 1.44 6.75 -1 4 C-0.81 1.69 -0.81 1.69 0 0 Z \",fill:\"#483750\",transform:\"translate(885,354)\"})),_path2364||(_path2364=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.37 9.41 1.37 9.41 -1 14 C-1.66 13.67 -2.32 13.34 -3 13 C-2.69 11.21 -2.38 9.42 -2.06 7.62 C-1.89 6.63 -1.71 5.63 -1.54 4.6 C-1 2 -1 2 0 0 Z \",fill:\"#2F153D\",transform:\"translate(486,335)\"})),_path2365||(_path2365=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.47 1.49 3.47 1.49 7 3 C7 2.34 7 1.68 7 1 C8.32 1.33 9.64 1.66 11 2 C11 2.99 11 3.98 11 5 C9.74 5.04 8.48 5.08 7.19 5.12 C6.48 5.15 5.77 5.17 5.04 5.2 C3 5 3 5 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#251038\",transform:\"translate(933,337)\"})),_path2366||(_path2366=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 3 4 C-2.37 4.97 -2.37 4.97 -5 5 C-7 3.56 -7 3.56 -8 2 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#231925\",transform:\"translate(552,315)\"})),_path2367||(_path2367=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.99 8 1.98 8 3 C6 5 6 5 2.88 5.12 C1.45 5.06 1.45 5.06 0 5 C0 4.34 0 3.68 0 3 C0.99 2.67 1.98 2.34 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#503D58\",transform:\"translate(674,314)\"})),_path2368||(_path2368=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.84 0.45 7.5 1.6 11 5 C11 5.66 11 6.32 11 7 C8.69 6.34 6.38 5.68 4 5 C4 4.34 4 3.68 4 3 C2.68 2.67 1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#67486D\",transform:\"translate(653,295)\"})),_path2369||(_path2369=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.35 4.04 1.35 4.04 0 7 C-2.88 9.12 -2.88 9.12 -6 11 C-6.99 11.66 -7.98 12.32 -9 13 C-7.51 9.72 -5.61 7.07 -3.38 4.25 C-2.74 3.45 -2.11 2.65 -1.46 1.83 C-0.98 1.22 -0.5 0.62 0 0 Z \",fill:\"#462452\",transform:\"translate(504,283)\"})),_path2370||(_path2370=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C5 1.66 5 2.32 5 3 C5.68 3.27 6.36 3.54 7.06 3.81 C10.4 5.16 13.7 6.58 17 8 C17 8.33 17 8.66 17 9 C11.51 8.56 8.42 7.24 4 4 C2.68 3.31 1.35 2.62 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#816786\",transform:\"translate(693,284)\"})),_path2371||(_path2371=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.32 -1.32 2.64 -2 4 C-6.55 4.37 -6.55 4.37 -8.81 2.5 C-9.2 2 -9.6 1.51 -10 1 C-3.71 -1.43 -3.71 -1.43 0 0 Z \",fill:\"#211824\",transform:\"translate(608,276)\"})),_path2372||(_path2372=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.55 -0.37 4.55 -0.37 6.81 1.5 C7.2 2 7.6 2.49 8 3 C5.69 4.56 5.69 4.56 3 6 C2.01 5.67 1.02 5.34 0 5 C-0.33 4.01 -0.66 3.02 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#0B0910\",transform:\"translate(583,275)\"})),_path2373||(_path2373=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63 0.11 3.25 0.24 4.88 0.38 C5.78 0.44 6.68 0.51 7.62 0.59 C10 1 10 1 12 3 C3.43 4.29 3.43 4.29 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#8A7896\",transform:\"translate(693,275)\"})),_path2374||(_path2374=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.19 3.06 C4.46 3.7 4.72 4.34 5 5 C4.01 5.33 3.02 5.66 2 6 C2.33 6.66 2.66 7.32 3 8 C0.69 8 -1.62 8 -4 8 C-3.01 7.67 -2.02 7.34 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#140E17\",transform:\"translate(732,266)\"})),_path2375||(_path2375=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5 3.32 5 4.64 5 6 C-1.93 5.5 -1.93 5.5 -9 5 C-9 4.67 -9 4.34 -9 4 C-4.54 3.5 -4.54 3.5 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#786087\",transform:\"translate(698,242)\"})),_path2376||(_path2376=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.31 2.66 4.62 3 7 C0 8 0 8 -3 7 C-1.12 1.12 -1.12 1.12 0 0 Z \",fill:\"#2A0E3E\",transform:\"translate(527,150)\"})),_path2377||(_path2377=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.77 0.09 3.54 0.2 5.31 0.31 C6.3 0.37 7.28 0.43 8.3 0.49 C11.24 1.05 12.18 1.69 14 4 C13.01 4.33 12.02 4.66 11 5 C10.4 4.69 9.8 4.38 9.19 4.06 C6.37 2.69 4.1 2.86 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#3A1949\",transform:\"translate(648,96)\"})),_path2378||(_path2378=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.01 0.29 4.01 0.62 6 1 C6.33 2.32 6.66 3.64 7 5 C6.4 4.79 5.8 4.59 5.19 4.38 C2.72 3.69 2.72 3.69 0 6 C-0.38 4.34 -0.71 2.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0E0F3A\",transform:\"translate(922,1222)\"})),_path2379||(_path2379=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -2.74 3.95 C-3.8 4.31 -3.8 4.31 -4.88 4.69 C-5.92 5.06 -5.92 5.06 -6.99 5.45 C-9 6 -9 6 -12 6 C-11 3 -11 3 -9.26 2.05 C-8.55 1.81 -7.85 1.56 -7.12 1.31 C-6.43 1.06 -5.73 0.81 -5.01 0.55 C-3 0 -3 0 0 0 Z \",fill:\"#3A1949\",transform:\"translate(286,1148)\"})),_path2380||(_path2380=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C0.19 4.96 -2.18 7.44 -6 9 C-5.67 8.4 -5.34 7.8 -5 7.19 C-3.79 4.95 -3.79 4.95 -4 2 C-2.68 1.34 -1.36 0.68 0 0 Z \",fill:\"#2C1439\",transform:\"translate(134,1104)\"})),_path2381||(_path2381=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C8.34 1.32 7.68 2.64 7 4 C5.35 4 3.7 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0E1440\",transform:\"translate(1014,1095)\"})),_path2382||(_path2382=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.89 0.03 1.89 0.03 3.81 0.06 C3.81 1.05 3.81 2.04 3.81 3.06 C0.51 3.06 -2.79 3.06 -6.19 3.06 C-6.52 2.4 -6.85 1.74 -7.19 1.06 C-4.44 0.15 -2.83 -0.05 0 0 Z \",fill:\"#401F55\",transform:\"translate(430.1875,1093.9375)\"})),_path2383||(_path2383=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.43 2.22 6.47 4.78 9 9 C8.67 9.66 8.34 10.32 8 11 C5 7.25 5 7.25 5 5 C3.02 5 1.04 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#2D143D\",transform:\"translate(575,1092)\"})),_path2384||(_path2384=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.21 6.41 1.16 11.93 -1 18 C-1.33 18 -1.66 18 -2 18 C-2.05 15.94 -2.09 13.88 -2.12 11.81 C-2.15 10.66 -2.17 9.52 -2.2 8.33 C-2 5.08 -1.39 2.91 0 0 Z \",fill:\"#3C1D48\",transform:\"translate(364,1079)\"})),_path2385||(_path2385=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 4 4 4 5.56 5.62 C7.16 7.23 7.16 7.23 10 9 C9.67 9.99 9.34 10.98 9 12 C7.68 10.95 6.37 9.89 5.06 8.81 C4.33 8.22 3.6 7.63 2.85 7.02 C0.7 4.67 0.34 3.12 0 0 Z \",fill:\"#44214E\",transform:\"translate(326,971)\"})),_path2386||(_path2386=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.99 1.28 7.58 3.17 11 7 C10.01 7.5 10.01 7.5 9 8 C4.35 6.22 2.18 4.48 0 0 Z \",fill:\"#421F4F\",transform:\"translate(228,940)\"})),_path2387||(_path2387=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.46 0.99 4.46 0.99 9 2 C9 2.99 9 3.98 9 5 C3.5 5.37 3.5 5.37 1.12 3.62 C0 2 0 2 0 0 Z \",fill:\"#0B1240\",transform:\"translate(918,937)\"})),_path2388||(_path2388=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.83 5.72 2.12 11.22 2 17 C1.01 16.67 0.02 16.34 -1 16 C-0.67 10.72 -0.34 5.44 0 0 Z \",fill:\"#1B0E29\",transform:\"translate(572,862)\"})),_path2389||(_path2389=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.53 1.34 8.78 5.55 12 10 C12 10.66 12 11.32 12 12 C8.6 10.87 7.71 9.81 5.44 7.12 C4.54 6.08 4.54 6.08 3.62 5.01 C2 3 2 3 0 0 Z \",fill:\"#341545\",transform:\"translate(1169,818)\"})),_path2390||(_path2390=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.71 2.7 2.42 3.4 2.12 4.12 C0.98 7.05 -0.03 10.01 -1 13 C-1.66 12.67 -2.32 12.34 -3 12 C-2.01 8.04 -1.02 4.08 0 0 Z \",fill:\"#0A113B\",transform:\"translate(989,813)\"})),_path2391||(_path2391=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 2.98 1.34 4.96 1 7 C0.01 7 -0.98 7 -2 7 C-2 7.66 -2 8.32 -2 9 C-2.66 9 -3.32 9 -4 9 C-3.35 5.51 -1.9 2.97 0 0 Z \",fill:\"#3A184B\",transform:\"translate(415,776)\"})),_path2392||(_path2392=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.66 0.5 9.88 1.55 15 4 C13.36 5.15 13.36 5.15 11 6 C8.2 5.1 8.2 5.1 5.25 3.62 C4.27 3.14 3.28 2.66 2.27 2.16 C1.52 1.78 0.77 1.4 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#1C0D2D\",transform:\"translate(1083,772)\"})),_path2393||(_path2393=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.18 -0.22 5.44 -0.25 8.38 1.06 C10 3 10 3 10.31 6.56 C10 10 10 10 9 12 C8.34 11.67 7.68 11.34 7 11 C7.33 8.69 7.66 6.38 8 4 C6.87 3.71 5.73 3.42 4.56 3.12 C3.39 2.75 2.21 2.38 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#290E3D\",transform:\"translate(1034,735)\"})),_path2394||(_path2394=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.75 3.38 1.75 3.38 1 6 C-1.06 7.31 -1.06 7.31 -3 8 C-3.75 6.25 -3.75 6.25 -4 4 C-2.06 1.75 -2.06 1.75 0 0 Z \",fill:\"#230C38\",transform:\"translate(660,710)\"})),_path2395||(_path2395=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67 0.97 3.34 1.95 5 2.94 C6.39 3.76 6.39 3.76 7.81 4.59 C8.53 5.06 9.26 5.52 10 6 C10 6.33 10 6.66 10 7 C3.55 6.39 3.55 6.39 1.06 4.62 C0 3 0 3 0 0 Z \",fill:\"#2A103D\",transform:\"translate(986,705)\"})),_path2396||(_path2396=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.24 4.97 -2.39 9.43 -5 14 C-5.66 13.01 -6.32 12.02 -7 11 C-5.88 9.16 -4.76 7.33 -3.62 5.5 C-3 4.48 -2.37 3.46 -1.73 2.41 C-1.16 1.61 -0.59 0.82 0 0 Z \",fill:\"#3F1C4E\",transform:\"translate(402,632)\"})),_path2397||(_path2397=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56 0.54 7.97 1.79 12 4 C11.67 4.99 11.34 5.98 11 7 C9.35 6.22 7.71 5.42 6.06 4.62 C5.15 4.18 4.23 3.74 3.29 3.29 C1 2 1 2 0 0 Z \",fill:\"#2C123C\",transform:\"translate(1101,598)\"})),_path2398||(_path2398=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.2 0.28 4 1 6.14 3.5 C6.84 4.51 7.53 5.52 8.25 6.56 C8.96 7.57 9.66 8.59 10.39 9.63 C10.92 10.41 11.45 11.19 12 12 C11.67 12.66 11.34 13.32 11 14 C9.54 12.42 8.08 10.84 6.62 9.25 C5.81 8.37 5 7.49 4.16 6.58 C2.34 4.4 1.1 2.59 0 0 Z \",fill:\"#361548\",transform:\"translate(982,548)\"})),_path2399||(_path2399=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.59 -0.66 4.11 -3 6.69 C-3.56 7.31 -4.11 7.93 -4.69 8.57 C-5.12 9.04 -5.55 9.52 -6 10 C-6.99 9.34 -7.98 8.68 -9 8 C-6.35 4.37 -3.98 2.1 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(938,531)\"})),_path2400||(_path2400=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.21 3.61 -6.44 3.06 -10 3 C-10.33 2.01 -10.66 1.02 -11 0 C-3.38 -1.12 -3.38 -1.12 0 0 Z \",fill:\"#251B29\",transform:\"translate(634,513)\"})),_path2401||(_path2401=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.99 8 1.98 8 3 C8.99 3.33 9.98 3.66 11 4 C3.57 4.29 3.57 4.29 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1C141F\",transform:\"translate(583,511)\"})),_path2402||(_path2402=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2 2.98 2 4 2 C3.62 4.94 3.62 4.94 3 8 C2.01 8.5 2.01 8.5 1 9 C0.34 8.67 -0.32 8.34 -1 8 C-0.67 5.36 -0.34 2.72 0 0 Z \",fill:\"#5E3D64\",transform:\"translate(543,494)\"})),_path2403||(_path2403=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.21 5.19 0.59 9.13 -1 14 C-1.66 13.34 -2.32 12.68 -3 12 C-2.67 7.65 -1.8 3.97 0 0 Z \",fill:\"#000002\",transform:\"translate(417,439)\"})),_path2404||(_path2404=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2 2.98 2 4 2 C3.34 3.65 2.68 5.3 2 7 C0.68 7 -0.64 7 -2 7 C-2.33 6.01 -2.66 5.02 -3 4 C-1.56 1.81 -1.56 1.81 0 0 Z \",fill:\"#19121C\",transform:\"translate(523,410)\"})),_path2405||(_path2405=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.94 0.81 2.94 0.81 6 2 C6.33 2.99 6.66 3.98 7 5 C3.45 6.15 2.2 6.09 -1.31 4.56 C-2.2 4.05 -3.09 3.53 -4 3 C-2.68 2.34 -1.36 1.68 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#7D668D\",transform:\"translate(619,370)\"})),_path2406||(_path2406=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.87 0.56 0.87 0.56 1.75 1.12 C-1.19 3.63 -3.43 4.59 -7.25 5.12 C-7 3.25 -7 3.25 -6.25 1.12 C-3.78 -0.75 -2.93 -1.14 0 0 Z \",fill:\"#68496E\",transform:\"translate(916.25,360.875)\"})),_path2407||(_path2407=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.2 2.05 1.39 4.1 1.59 6.15 C1.72 6.76 1.86 7.37 2 8 C2.66 8.33 3.32 8.66 4 9 C4 11.31 4 13.62 4 16 C2.02 14.92 2.02 14.92 0 13 C-0.39 9.86 -0.39 9.86 -0.25 6.31 C-0.21 5.13 -0.18 3.95 -0.14 2.74 C-0.09 1.83 -0.05 0.93 0 0 Z \",fill:\"#523E5A\",transform:\"translate(900,338)\"})),_path2408||(_path2408=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.81 0.48 0.81 0.48 1.64 0.96 C4.42 2.18 6.73 2.41 9.75 2.62 C11.23 2.74 11.23 2.74 12.73 2.85 C13.48 2.9 14.23 2.95 15 3 C15 3.99 15 4.98 15 6 C14.17 5.75 14.17 5.75 13.33 5.5 C10.73 4.94 8.4 4.9 5.75 4.94 C4.41 4.95 4.41 4.95 3.05 4.96 C2.37 4.98 1.7 4.99 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#28132F\",transform:\"translate(930,339)\"})),_path2409||(_path2409=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.98 1.05 0.96 2.1 0.94 3.19 C0.99 6.33 1.27 8.97 2 12 C0.06 11.31 0.06 11.31 -2 10 C-2.94 7.69 -2.94 7.69 -3 5 C-1.62 2.19 -1.62 2.19 0 0 Z \",fill:\"#2A1138\",transform:\"translate(856,321)\"})),_path2410||(_path2410=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.99 0.48 6.85 0.89 11 4 C7.37 4 3.74 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#694B6F\",transform:\"translate(652,303)\"})),_path2411||(_path2411=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 0.43 6.92 1.33 10 5 C7.03 4.67 4.06 4.34 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#1D1521\",transform:\"translate(783,284)\"})),_path2412||(_path2412=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.42 1.35 6.34 3.26 9 7 C7.02 7.33 5.04 7.66 3 8 C2.01 5.36 1.02 2.72 0 0 Z \",fill:\"#3D2D43\",transform:\"translate(737,268)\"})),_path2413||(_path2413=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-1.08 4.67 -3.25 5.57 -8 6 C-7 3 -7 3 -3.56 1.25 C-2.39 0.84 -1.21 0.43 0 0 Z \",fill:\"#231A25\",transform:\"translate(615,271)\"})),_path2414||(_path2414=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.69 0.18 5.33 0.62 8 1 C7.55 1.43 7.09 1.87 6.62 2.31 C4.8 4.11 4.8 4.11 3 7 C2.34 6.67 1.68 6.34 1 6 C1 5.01 1 4.02 1 3 C0.34 2.34 -0.32 1.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#36293B\",transform:\"translate(658,233)\"})),_path2415||(_path2415=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C3.99 2.33 4.98 2.66 6 3 C4.68 4.65 3.36 6.3 2 8 C0.44 6.25 0.44 6.25 -1 4 C-0.69 1.75 -0.69 1.75 0 0 Z \",fill:\"#381A43\",transform:\"translate(751,203)\"})),_path2416||(_path2416=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.25 -0.31 3.25 -0.31 7 0 C9.44 2.5 9.44 2.5 11 5 C9.54 4.94 8.08 4.85 6.62 4.75 C5.81 4.7 5 4.66 4.16 4.61 C2 4 2 4 0.71 1.95 C0.48 1.31 0.24 0.66 0 0 Z \",fill:\"#291330\",transform:\"translate(706,189)\"})),_path2417||(_path2417=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.12 2 1.12 4 3 C4.38 6.06 4.38 6.06 4 9 C3.34 9.66 2.68 10.32 2 11 C0.12 7.74 -0.58 4.74 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#251130\",transform:\"translate(175,1219)\"})),_path2418||(_path2418=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.02 1.99 0.02 1.99 -2 3 C-2 3.66 -2 4.32 -2 5 C-2.99 5.66 -3.98 6.32 -5 7 C-5.58 9.19 -5.58 9.19 -5.69 11.62 C-5.75 12.44 -5.82 13.26 -5.89 14.1 C-5.92 14.73 -5.96 15.35 -6 16 C-6.33 16 -6.66 16 -7 16 C-7.41 12.25 -7.62 8.73 -7 5 C-4.86 2.47 -3 1.55 0 0 Z \",fill:\"#6E4F73\",transform:\"translate(1117,1141)\"})),_path2419||(_path2419=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.76 0.04 1.76 0.04 3.55 0.08 C4.44 0.12 5.33 0.15 6.25 0.19 C6.25 0.52 6.25 0.85 6.25 1.19 C0.49 2.49 -4.84 3.44 -10.75 3.19 C-7.26 -0.1 -4.69 -0.14 0 0 Z \",fill:\"#0B0910\",transform:\"translate(206.75,1095.8125)\"})),_path2420||(_path2420=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.5 3.69 -1.1 5.6 -4 8 C-4.99 7.67 -5.98 7.34 -7 7 C-6.61 4.2 -6.2 3.18 -4.06 1.25 C-2 0 -2 0 0 0 Z \",fill:\"#080E35\",transform:\"translate(1041,1083)\"})),_path2421||(_path2421=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.49 3.79 -3.62 5.77 -7 8 C-7.99 7.67 -8.98 7.34 -10 7 C-3.24 0 -3.24 0 0 0 Z \",fill:\"#5F3E65\",transform:\"translate(1058,1076)\"})),_path2422||(_path2422=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.98 0 3.96 0 6 C-0.66 6 -1.32 6 -2 6 C-2 7.65 -2 9.3 -2 11 C-2.33 11 -2.66 11 -3 11 C-3.66 8.03 -4.32 5.06 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#0C103B\",transform:\"translate(908,1059)\"})),_path2423||(_path2423=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C-4.07 7.88 -4.07 7.88 -7.94 8.38 C-8.62 8.25 -9.3 8.13 -10 8 C-6.67 5.33 -3.33 2.67 0 0 Z \",fill:\"#5E4165\",transform:\"translate(1093,1046)\"})),_path2424||(_path2424=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.34 1.42 1.67 2.83 2 4.25 C2.19 5.04 2.37 5.83 2.56 6.64 C3 9 3 9 3 13 C2.01 12.67 1.02 12.34 0 12 C-0.76 7.68 -1.16 4.26 0 0 Z \",fill:\"#43204E\",transform:\"translate(570,901)\"})),_path2425||(_path2425=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.88 -1.38 5.47 -3.5 8.69 C-4.15 9.68 -4.8 10.68 -5.47 11.7 C-6.23 12.84 -6.23 12.84 -7 14 C-7.33 13.34 -7.66 12.68 -8 12 C-6.32 7.25 -3.84 3.29 0 0 Z \",fill:\"#1A0C29\",transform:\"translate(590,814)\"})),_path2426||(_path2426=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.29 4.35 C-0.07 5.24 -0.44 6.14 -0.81 7.06 C-1.17 7.96 -1.53 8.86 -1.89 9.79 C-3 12 -3 12 -5 13 C-4.12 5.25 -4.12 5.25 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#3B1C47\",transform:\"translate(332,764)\"})),_path2427||(_path2427=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.75 1.94 0.75 4 2 C4.75 4.12 4.75 4.12 5 6 C3.68 6.33 2.36 6.66 1 7 C0.34 5.02 -0.32 3.04 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(309,713)\"})),_path2428||(_path2428=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.25 3.12 6.25 3.12 7.62 7.06 C7.89 7.8 8.15 8.53 8.41 9.29 C8.61 9.85 8.8 10.42 9 11 C5.29 9.56 4.05 7.88 2.25 4.38 C1.82 3.56 1.39 2.74 0.95 1.9 C0.64 1.27 0.32 0.65 0 0 Z \",fill:\"#371943\",transform:\"translate(998,700)\"})),_path2429||(_path2429=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 2.64 1.1 4.68 1.06 7.62 C1.05 8.63 1.04 9.63 1.04 10.66 C1.02 11.43 1.01 12.21 1 13 C0.34 13 -0.32 13 -1 13 C-2.18 10.65 -2.17 9.12 -2.19 6.5 C-2.2 5.71 -2.22 4.91 -2.23 4.09 C-2 2 -2 2 0 0 Z \",fill:\"#867396\",transform:\"translate(822,680)\"})),_path2430||(_path2430=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.33 2.98 2.66 4 3 C3.67 4.32 3.34 5.64 3 7 C1.35 7 -0.3 7 -2 7 C-2.33 6.34 -2.66 5.68 -3 5 C-2.34 5 -1.68 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#27103A\",transform:\"translate(911,674)\"})),_path2431||(_path2431=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88 0.19 1.88 0.19 4 1 C5.25 3.56 5.25 3.56 6 6 C5.01 6.5 5.01 6.5 4 7 C1.38 6.06 1.38 6.06 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#28103B\",transform:\"translate(577,638)\"})),_path2432||(_path2432=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.86 1.9 0.86 1.9 -0.31 2.81 C-2.93 4.81 -2.93 4.81 -4.56 6.81 C-5.04 7.2 -5.51 7.6 -6 8 C-8.19 7.69 -8.19 7.69 -10 7 C-8.68 6.34 -7.36 5.68 -6 5 C-6 4.34 -6 3.68 -6 3 C-4.04 1.93 -2.03 0.93 0 0 Z \",fill:\"#816786\",transform:\"translate(691,610)\"})),_path2433||(_path2433=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.82 1.5 5.54 3.8 8 7 C8.66 7.33 9.32 7.66 10 8 C10 8.66 10 9.32 10 10 C7.01 8.64 4.71 7.05 2.25 4.88 C1.64 4.34 1.02 3.8 0.39 3.24 C-0.07 2.83 -0.53 2.42 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#39164A\",transform:\"translate(995,561)\"})),_path2434||(_path2434=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.85 5.83 2.48 10.45 0 16 C-0.33 16 -0.66 16 -1 16 C-1.1 10.55 -1.13 5.36 0 0 Z \",fill:\"#3A164B\",transform:\"translate(474,540)\"})),_path2435||(_path2435=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.66 1.67 3.32 1.34 4 1 C4.66 2.65 5.32 4.3 6 6 C4.35 6 2.7 6 1 6 C0.67 6.99 0.34 7.98 0 9 C-1.12 3.38 -1.12 3.38 0 0 Z \",fill:\"#312436\",transform:\"translate(842,448)\"})),_path2436||(_path2436=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.65 3 3.3 3 5 C2.34 5 1.68 5 1 5 C0.34 6.65 -0.32 8.3 -1 10 C-1.33 10 -1.66 10 -2 10 C-2.18 6.05 -2.09 3.4 0 0 Z \",fill:\"#1C1421\",transform:\"translate(914,390)\"})),_path2437||(_path2437=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C4.34 3.98 3.68 5.96 3 8 C1.35 7.01 -0.3 6.02 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#867396\",transform:\"translate(846,375)\"})),_path2438||(_path2438=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.89 2.81 1.76 4.63 1.62 6.44 C1.56 7.45 1.49 8.46 1.41 9.5 C1.28 10.32 1.14 11.15 1 12 C0.01 12.5 0.01 12.5 -1 13 C-1.99 12.67 -2.98 12.34 -4 12 C-4.69 9.94 -4.69 9.94 -5 8 C-2.52 8.5 -2.52 8.5 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#715477\",transform:\"translate(914,364)\"})),_path2439||(_path2439=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.77 1.39 3.4 3.34 5 6 C6.61 8.05 8.3 10.02 10 12 C7 12 7 12 4.44 10.5 C1.15 7.13 0.84 4.59 0 0 Z \",fill:\"#65476B\",transform:\"translate(577,355)\"})),_path2440||(_path2440=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 1.65 1.34 3.3 1 5 C3.48 5.99 3.48 5.99 6 7 C5.67 7.66 5.34 8.32 5 9 C2.69 8.01 0.38 7.02 -2 6 C-1.49 3.83 -1 2 0 0 Z \",fill:\"#060A2B\",transform:\"translate(502,359)\"})),_path2441||(_path2441=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.98 0.99 4.65 1.97 7 4 C7.33 4.99 7.66 5.98 8 7 C4 7 4 7 1.75 5.19 C0 3 0 3 0 0 Z \",fill:\"#271B2C\",transform:\"translate(509,345)\"})),_path2442||(_path2442=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.65 3.3 3.3 5 5 C3.62 7 3.62 7 2 9 C1.34 9 0.68 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#160B1F\",transform:\"translate(923,335)\"})),_path2443||(_path2443=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.5 1.98 0.5 4 1 C3.84 2.07 3.67 3.14 3.5 4.25 C2.91 8.03 2.91 8.03 3 12 C2.34 12 1.68 12 1 12 C-1.1 8.54 -1.1 8.54 -0.62 6 C-0.42 5.34 -0.21 4.68 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#705376\",transform:\"translate(643,328)\"})),_path2444||(_path2444=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C1.67 1.66 1.34 2.32 1 3 C2.65 2.67 4.3 2.34 6 2 C5.34 3.65 4.68 5.3 4 7 C2.68 7 1.36 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#6C4E71\",transform:\"translate(592,328)\"})),_path2445||(_path2445=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.36 2.36 2.49 3.78 3 7 C1.35 7.33 -0.3 7.66 -2 8 C-2.12 5.12 -2.12 5.12 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#5C3C62\",transform:\"translate(510,285)\"})),_path2446||(_path2446=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.09 1.36 4.9 3.3 7 7 C7.75 10.38 7.75 10.38 8 13 C5 12 5 12 4.12 10.29 C3.9 9.6 3.67 8.9 3.44 8.19 C2.46 5.33 1.44 2.66 0 0 Z \",fill:\"#2B113C\",transform:\"translate(847,236)\"})),_path2447||(_path2447=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2 0.15 1.2 0.15 2.42 0.31 C3.03 0.39 3.63 0.48 4.25 0.56 C1.04 2.47 -1.29 2.79 -5 2.69 C-5.89 2.67 -6.78 2.65 -7.7 2.63 C-8.72 2.6 -8.72 2.6 -9.75 2.56 C-8.75 0.56 -8.75 0.56 -6.98 -0.09 C-4.51 -0.47 -2.48 -0.33 0 0 Z \",fill:\"#1C0B31\",transform:\"translate(556.75,135.4375)\"})),_path2448||(_path2448=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C0.67 10.68 0.34 9.36 0 8 C-0.66 8 -1.32 8 -2 8 C-2.33 6.02 -2.66 4.04 -3 2 C-2.34 2 -1.68 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#7C6182\",transform:\"translate(1016,1254)\"})),_path2449||(_path2449=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.54 1.42 4.34 2.68 6 6 C8.03 7.27 8.03 7.27 10 8 C10 8.99 10 9.98 10 11 C5.86 7.7 2.41 4.83 0 0 Z \",fill:\"#2B1339\",transform:\"translate(159,1230)\"})),_path2450||(_path2450=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.19 3.44 2.19 3.44 1 6 C0.01 6.33 -0.98 6.66 -2 7 C-3.37 8.29 -4.71 9.62 -6 11 C-4.55 6.89 -2.49 3.57 0 0 Z \",fill:\"#351447\",transform:\"translate(129,1114)\"})),_path2451||(_path2451=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.56 3.56 4.93 5.21 5.12 10.25 C5.08 11.16 5.04 12.07 5 13 C4.67 12.01 4.34 11.02 4 10 C3.01 10.33 2.02 10.66 1 11 C0.67 7.37 0.34 3.74 0 0 Z \",fill:\"#241038\",transform:\"translate(582,1109)\"})),_path2452||(_path2452=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.16 1.37 3.99 1.99 6 5 C6.12 8.19 6.12 8.19 6 11 C3.46 9.73 3.11 8.58 1.88 6.06 C1.52 5.35 1.17 4.64 0.8 3.91 C0 2 0 2 0 0 Z \",fill:\"#755B7D\",transform:\"translate(1191,1105)\"})),_path2453||(_path2453=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.6 3.34 -1.68 5.5 -4 8 C-4.99 8 -5.98 8 -7 8 C-6.44 4.11 -4.34 0 0 0 Z \",fill:\"#401F55\",transform:\"translate(294,1082)\"})),_path2454||(_path2454=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C0.01 12.49 0.01 12.49 -1 13 C-1.22 11.59 -1.43 10.17 -1.62 8.75 C-1.74 7.96 -1.86 7.17 -1.98 6.36 C-2 3.68 -1.37 2.27 0 0 Z \",fill:\"#452355\",transform:\"translate(363,1030)\"})),_path2455||(_path2455=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86 1.28 5.02 2.53 7 5 C7 8.11 6.46 9.35 5 12 C4.55 10.76 4.09 9.52 3.62 8.25 C2.56 5.41 1.45 2.67 0 0 Z \",fill:\"#2B113D\",transform:\"translate(419,935)\"})),_path2456||(_path2456=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.86 2.12 3.72 4.25 4.56 6.38 C5.28 8.15 5.28 8.15 6 9.96 C7 13 7 13 6 15 C5.18 13.44 4.37 11.88 3.56 10.31 C3.11 9.44 2.66 8.57 2.19 7.68 C1.04 5.09 0.44 2.79 0 0 Z \",fill:\"#0A1036\",transform:\"translate(1212,901)\"})),_path2457||(_path2457=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.41 4.14 4.51 9.45 3.55 14.25 C3.37 14.83 3.19 15.4 3 16 C2.52 14.75 2.04 13.5 1.56 12.25 C1.3 11.55 1.03 10.86 0.75 10.14 C-0.59 6.33 -1.26 3.92 0 0 Z \",fill:\"#30163E\",transform:\"translate(278,887)\"})),_path2458||(_path2458=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.07 2.04 7.07 2.04 9 5 C8.69 7.19 8.69 7.19 8 9 C7.75 8.38 7.51 7.76 7.25 7.12 C5.77 4.6 4.59 4.21 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#1E0E2B\",transform:\"translate(1165,818)\"})),_path2459||(_path2459=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C-1.81 4.47 -4.29 3.43 -8 2 C-8 1.34 -8 0.68 -8 0 C-4.71 -1.1 -3.29 -0.8 0 0 Z \",fill:\"#090F36\",transform:\"translate(1051,762)\"})),_path2460||(_path2460=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-6.62 3.12 -6.62 3.12 -10 2 C-10 1.34 -10 0.68 -10 0 C-6.31 -1.23 -3.79 -0.64 0 0 Z \",fill:\"#0E0F3A\",transform:\"translate(902,752)\"})),_path2461||(_path2461=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 4.3 2 7.6 2 11 C1.34 11 0.68 11 0 11 C-0.33 11.99 -0.66 12.98 -1 14 C-2.46 11.09 -1.64 9.04 -1.06 5.88 C-0.77 4.23 -0.77 4.23 -0.47 2.55 C-0.32 1.71 -0.16 0.87 0 0 Z \",fill:\"#321145\",transform:\"translate(595,691)\"})),_path2462||(_path2462=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C5.33 2.65 5.66 4.3 6 6 C3.13 5.43 2.14 5.14 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#39154B\",transform:\"translate(503,668)\"})),_path2463||(_path2463=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C4.19 4.06 4.19 4.06 5 7 C4.05 7.27 3.1 7.54 2.12 7.81 C-1.25 8.75 -1.25 8.75 -3 12 C-3.33 11.34 -3.66 10.68 -4 10 C-3.17 9.22 -2.35 8.43 -1.5 7.62 C1.23 5.36 1.23 5.36 1 3 C0.34 2.34 -0.32 1.68 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2B113D\",transform:\"translate(560,559)\"})),_path2464||(_path2464=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.87 0.34 0.87 0.34 1.75 0.69 C0.75 3.69 0.75 3.69 -1.69 4.94 C-4.25 5.69 -4.25 5.69 -6.25 4.69 C-6.25 4.03 -6.25 3.37 -6.25 2.69 C-3.03 -0.42 -3.03 -0.42 0 0 Z \",fill:\"#4E3C56\",transform:\"translate(786.25,554.3125)\"})),_path2465||(_path2465=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C5.66 3.64 6.32 6.28 7 9 C2.97 7.66 2.12 5.58 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5F3F65\",transform:\"translate(550,531)\"})),_path2466||(_path2466=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.04 1.22 7.49 2.63 11 5 C11 5.33 11 5.66 11 6 C3.26 5.26 3.26 5.26 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#66476C\",transform:\"translate(549,521)\"})),_path2467||(_path2467=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.51 6.44 0.51 6.44 -1 12 C-1.66 12 -2.32 12 -3 12 C-2.89 10.37 -2.76 8.75 -2.62 7.12 C-2.56 6.22 -2.49 5.32 -2.41 4.38 C-2 2 -2 2 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(407,499)\"})),_path2468||(_path2468=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.34 4.31 2.68 6.62 2 9 C1.01 9 0.02 9 -1 9 C-0.67 7.35 -0.34 5.7 0 4 C-0.66 3.67 -1.32 3.34 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#221926\",transform:\"translate(831,487)\"})),_path2469||(_path2469=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 3.3 1.66 6.6 2 10 C0.68 9.67 -0.64 9.34 -2 9 C-2 7.02 -2 5.04 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#160A1F\",transform:\"translate(541,486)\"})),_path2470||(_path2470=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.85 0.67 2.69 1.35 2.54 2.04 C1.92 5.47 1.66 8.84 1.44 12.31 C1.35 13.57 1.27 14.82 1.18 16.11 C1.12 17.07 1.06 18.02 1 19 C0.67 19 0.34 19 0 19 C0 12.73 0 6.46 0 0 Z \",fill:\"#230F37\",transform:\"translate(537,473)\"})),_path2471||(_path2471=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.28 2.14 -2.56 2.29 -3.88 2.44 C-6.26 2.71 -7.84 2.92 -10 4 C-10.33 2.68 -10.66 1.36 -11 0 C-6.98 -0.84 -3.98 -1.05 0 0 Z \",fill:\"#514441\",transform:\"translate(869,431)\"})),_path2472||(_path2472=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.69 3.06 3.69 3.06 4 5 C1.52 6.49 1.52 6.49 -1 8 C-1.04 5.67 -1.04 3.33 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#53405B\",transform:\"translate(850,409)\"})),_path2473||(_path2473=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 7.59 1 15.18 1 23 C0.01 22.67 -0.98 22.34 -2 22 C-1.67 21.34 -1.34 20.68 -1 20 C-0.85 18.48 -0.75 16.96 -0.68 15.43 C-0.64 14.53 -0.6 13.64 -0.56 12.71 C-0.5 11.31 -0.5 11.31 -0.44 9.88 C-0.39 8.93 -0.35 7.99 -0.31 7.01 C-0.2 4.67 -0.1 2.34 0 0 Z \",fill:\"#3D1B4C\",transform:\"translate(481,394)\"})),_path2474||(_path2474=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33 1.67 6.67 3.33 10 5 C9.67 5.99 9.34 6.98 9 8 C1.29 4 1.29 4 0 0 Z \",fill:\"#856B8A\",transform:\"translate(598,392)\"})),_path2475||(_path2475=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.01 5.62 0.02 10.24 -1 15 C-1.33 15 -1.66 15 -2 15 C-2 11.04 -2 7.08 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#240F38\",transform:\"translate(446,338)\"})),_path2476||(_path2476=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.35 3.32 6.48 7.2 8 13 C4.32 9.72 2.25 6.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#82719A\",transform:\"translate(812,335)\"})),_path2477||(_path2477=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.5 2.48 0.5 5 1 C4.67 2.65 4.34 4.3 4 6 C2.68 6 1.36 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#160F19\",transform:\"translate(543,333)\"})),_path2478||(_path2478=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C4.67 2.66 4.34 3.32 4 4 C1.71 4.63 1.71 4.63 -1.06 5.12 C-1.98 5.29 -2.9 5.46 -3.85 5.63 C-4.91 5.81 -4.91 5.81 -6 6 C-6 5.01 -6 4.02 -6 3 C-5.01 3.33 -4.02 3.66 -3 4 C-2.67 3.34 -2.34 2.68 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#302235\",transform:\"translate(604,328)\"})),_path2479||(_path2479=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.82 -0.19 8.5 0.24 13 2 C13 2.33 13 2.66 13 3 C8.54 3.5 8.54 3.5 4 4 C3.67 3.01 3.34 2.02 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#422F4A\",transform:\"translate(652,300)\"})),_path2480||(_path2480=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.99 2.64 1.98 4 3 C3.67 3.99 3.34 4.98 3 6 C0.06 5.62 0.06 5.62 -3 5 C-3.33 4.34 -3.66 3.68 -4 3 C-2.68 2.67 -1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3D1D48\",transform:\"translate(780,252)\"})),_path2481||(_path2481=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -2.5 5.69 C-3.32 6.45 -4.15 7.21 -5 8 C-7 7 -7 7 -8 5 C-5.8 2.47 -4.26 1.65 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#1C0C2C\",transform:\"translate(505,146)\"})),_path2482||(_path2482=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C-2.62 2.66 -7.24 3.32 -12 4 C-12.33 3.34 -12.66 2.68 -13 2 C-8.52 0.57 -4.76 -0.44 0 0 Z \",fill:\"#321641\",transform:\"translate(608,116)\"})),_path2483||(_path2483=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.48 0.99 2.48 0.99 5 2 C5 3.65 5 5.3 5 7 C4.01 7.33 3.02 7.66 2 8 C0 1.12 0 1.12 0 0 Z \",fill:\"#785979\",transform:\"translate(1013,1242)\"})),_path2484||(_path2484=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.42 2.42 2.53 3.8 3.12 7.12 C3.29 8.04 3.46 8.95 3.63 9.88 C3.81 10.93 3.81 10.93 4 12 C1.76 9.79 -0.27 7.64 -2 5 C-2 4.01 -2 3.02 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#351547\",transform:\"translate(113,1191)\"})),_path2485||(_path2485=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -2.19 5.38 C-3.12 6.24 -4.04 7.11 -5 8 C-5.93 8.93 -6.86 9.86 -7.81 10.81 C-8.53 11.53 -9.26 12.26 -10 13 C-8.66 8.96 -6.95 6.61 -3.88 3.69 C-3.15 2.99 -2.43 2.29 -1.68 1.57 C-1.13 1.05 -0.57 0.54 0 0 Z \",fill:\"#3D1A4E\",transform:\"translate(456,1179)\"})),_path2486||(_path2486=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.62 1 9.24 1 14 C0.34 14 -0.32 14 -1 14 C-1.33 14.66 -1.66 15.32 -2 16 C-2 13.69 -2 11.38 -2 9 C-1.34 9 -0.68 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#674A71\",transform:\"translate(1013,1146)\"})),_path2487||(_path2487=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 6 C3.32 6.33 4.64 6.66 6 7 C5.34 8.32 4.68 9.64 4 11 C-0.62 5.63 -0.62 5.63 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#0A113E\",transform:\"translate(1253,1004)\"})),_path2488||(_path2488=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.68 0.23 -1.35 0.46 -2.05 0.7 C-7.32 2.63 -10.95 4 -14 9 C-13.45 5.63 -12.95 3.92 -11 1 C-8.91 0.23 -8.91 0.23 -6.5 -0.25 C-5.31 -0.51 -5.31 -0.51 -4.09 -0.77 C-2 -1 -2 -1 0 0 Z \",fill:\"#0B133D\",transform:\"translate(680,981)\"})),_path2489||(_path2489=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.38 2 1.38 4 3 C4 3.66 4 4.32 4 5 C4.66 5 5.32 5 6 5 C6 5.66 6 6.32 6 7 C6.66 7 7.32 7 8 7 C8 7.99 8 8.98 8 10 C4.73 9.03 3.25 8.34 1.19 5.56 C0 3 0 3 0 0 Z \",fill:\"#281137\",transform:\"translate(1216,905)\"})),_path2490||(_path2490=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C1.12 7.75 1.12 7.75 0 10 C-0.99 9.67 -1.98 9.34 -3 9 C-2.01 6.03 -1.02 3.06 0 0 Z \",fill:\"#290E3C\",transform:\"translate(427,859)\"})),_path2491||(_path2491=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1 5 0 9 -1 13 C-3 10 -3 10 -2.75 7.06 C-2.1 4.4 -1.36 2.35 0 0 Z \",fill:\"#2A1238\",transform:\"translate(208,839)\"})),_path2492||(_path2492=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.33 2.32 5.66 3.64 6 5 C3.03 4.5 3.03 4.5 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3F1C4D\",transform:\"translate(1151,801)\"})),_path2493||(_path2493=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C-1.32 6.67 -2.64 6.34 -4 6 C-3.67 5.34 -3.34 4.68 -3 4 C-3.99 4 -4.98 4 -6 4 C-6 3.34 -6 2.68 -6 2 C-3 0 -3 0 0 0 Z \",fill:\"#351547\",transform:\"translate(594,795)\"})),_path2494||(_path2494=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C1.34 4 0.68 4 0 4 C0.19 4.72 0.37 5.44 0.56 6.19 C1.02 9.13 0.74 11.14 0 14 C-0.66 14 -1.32 14 -2 14 C-2.21 8.81 -1.59 4.87 0 0 Z \",fill:\"#280F3B\",transform:\"translate(436,777)\"})),_path2495||(_path2495=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.65 1.78 2.3 2.57 1.94 3.38 C1.63 4.24 1.32 5.11 1 6 C1.33 6.66 1.66 7.32 2 8 C-0.31 7.34 -2.62 6.68 -5 6 C-2.25 1.12 -2.25 1.12 0 0 Z \",fill:\"#0C0F37\",transform:\"translate(862,752)\"})),_path2496||(_path2496=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 4 1 4 0.22 5.92 C-0.85 7.61 -1.93 9.31 -3 11 C-3.66 10.01 -4.32 9.02 -5 8 C-3.35 5.36 -1.7 2.72 0 0 Z \",fill:\"#331345\",transform:\"translate(449,701)\"})),_path2497||(_path2497=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94 0.75 1.94 0.75 4 2 C4.75 4.12 4.75 4.12 5 6 C3.06 6.56 3.06 6.56 1 7 C0 6 0 6 -0.06 2.94 C-0.04 1.97 -0.02 1 0 0 Z \",fill:\"#28103B\",transform:\"translate(910,656)\"})),_path2498||(_path2498=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 3.56 5.38 7.65 7 12 C6.67 12.66 6.34 13.32 6 14 C5.38 13.05 4.76 12.1 4.12 11.12 C2.18 8.06 2.18 8.06 0 6 C-0.12 2.88 -0.12 2.88 0 0 Z \",fill:\"#230C38\",transform:\"translate(896,642)\"})),_path2499||(_path2499=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.89 1.6 0.76 3.21 0.62 4.81 C0.56 5.71 0.49 6.6 0.41 7.52 C0 10 0 10 -2 13 C-3.42 5.63 -3.42 5.63 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#422154\",transform:\"translate(478,511)\"})),_path2500||(_path2500=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C2.63 3.29 2.63 3.29 3.12 6.06 C3.29 6.98 3.46 7.9 3.63 8.85 C3.75 9.56 3.88 10.27 4 11 C3.01 11.66 2.02 12.32 1 13 C0.67 8.71 0.34 4.42 0 0 Z \",fill:\"#170925\",transform:\"translate(413,452)\"})),_path2501||(_path2501=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.67 2.65 2.34 4.3 2 6 C0.02 6 -1.96 6 -4 6 C-4.33 5.34 -4.66 4.68 -5 4 C-3.68 4 -2.36 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#7A5F83\",transform:\"translate(566,456)\"})),_path2502||(_path2502=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78 0.25 1.57 0.5 2.38 0.75 C2.71 1.41 3.03 2.07 3.38 2.75 C-1.06 4.84 -1.06 4.84 -3.94 4.38 C-4.49 4.17 -5.05 3.96 -5.62 3.75 C-5.62 3.09 -5.62 2.43 -5.62 1.75 C-2.62 -0.25 -2.62 -0.25 0 0 Z \",fill:\"#0C0A11\",transform:\"translate(572.625,444.25)\"})),_path2503||(_path2503=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 1.99 3.34 2.98 3 4 C0.69 4.62 0.69 4.62 -2 5 C-2.99 4.34 -3.98 3.68 -5 3 C-4.67 2.34 -4.34 1.68 -4 1 C-2.02 1.5 -2.02 1.5 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1D1520\",transform:\"translate(852,441)\"})),_path2504||(_path2504=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.99 3 2.98 3 4 C2.34 4 1.68 4 1 4 C1 4.66 1 5.32 1 6 C1.66 6.33 2.32 6.66 3 7 C1.68 7 0.36 7 -1 7 C-2.75 5 -2.75 5 -4 3 C-2.19 1.44 -2.19 1.44 0 0 Z \",fill:\"#2A1238\",transform:\"translate(915,428)\"})),_path2505||(_path2505=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-1.32 8.34 -2.64 7.68 -4 7 C-3.67 5.02 -3.34 3.04 -3 1 C-3.99 0.67 -4.98 0.34 -6 0 C-4 -1 -4 -1 0 0 Z \",fill:\"#65476B\",transform:\"translate(878,424)\"})),_path2506||(_path2506=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.32 2.64 2.64 4 4 C3.01 4.99 2.02 5.98 1 7 C-0.32 5.68 -1.64 4.36 -3 3 C-2.01 2.01 -1.02 1.02 0 0 Z \",fill:\"#0B0910\",transform:\"translate(587,360)\"})),_path2507||(_path2507=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.65 3.3 3.3 5 5 C3.35 5.66 1.7 6.32 0 7 C-0.66 6.01 -1.32 5.02 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#5E3D64\",transform:\"translate(509,348)\"})),_path2508||(_path2508=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.2 3.95 C2.13 5.96 2.07 7.98 2 10 C1.01 10.33 0.02 10.66 -1 11 C-1.12 3.38 -1.12 3.38 0 0 Z \",fill:\"#6D4F72\",transform:\"translate(593,343)\"})),_path2509||(_path2509=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.32 2.64 2.64 4 4 C3.01 4.99 2.02 5.98 1 7 C-0.38 5.71 -1.71 4.37 -3 3 C-3 2.34 -3 1.68 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#715376\",transform:\"translate(625,336)\"})),_path2510||(_path2510=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.13 3.19 2.5 5.27 3 9 C2.34 9 1.68 9 1 9 C0.67 9.66 0.34 10.32 0 11 C-0.84 6.98 -1.05 3.98 0 0 Z M-2 11 C-1.01 11.5 -1.01 11.5 0 12 C-0.99 12.5 -0.99 12.5 -2 13 C-2 12.34 -2 11.68 -2 11 Z \",fill:\"#857294\",transform:\"translate(847,330)\"})),_path2511||(_path2511=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.83 4.05 6.38 7.97 8 14 C4.7 11.8 4 10.49 2.31 7 C1.88 6.11 1.44 5.23 0.99 4.31 C0 2 0 2 0 0 Z \",fill:\"#755B7D\",transform:\"translate(808,324)\"})),_path2512||(_path2512=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02 0.6 4.02 1.27 6 2 C7.53 5.07 6.55 7.7 6 11 C4 8 4 8 4 4 C2.68 3.34 1.36 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#624468\",transform:\"translate(589,311)\"})),_path2513||(_path2513=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C2.66 2.14 3.32 2.29 4 2.44 C6 3 6 3 8 6 C5.36 6 2.72 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#1A0D27\",transform:\"translate(491,309)\"})),_path2514||(_path2514=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C2 1.66 2 2.32 2 3 C2.99 2.67 3.98 2.34 5 2 C5.33 3.98 5.66 5.96 6 8 C5.01 8 4.02 8 3 8 C0.43 5.43 0.46 3.52 0 0 Z \",fill:\"#57455E\",transform:\"translate(514,292)\"})),_path2515||(_path2515=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.71 1.35 2.96 2.81 4.12 5.56 C4.48 6.39 4.83 7.22 5.2 8.07 C5.46 8.7 5.73 9.34 6 10 C1.86 8.21 0.34 5.84 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#705376\",transform:\"translate(628,269)\"})),_path2516||(_path2516=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21 0.03 1.21 0.03 2.44 0.06 C2.44 1.05 2.44 2.04 2.44 3.06 C0.44 4.75 0.44 4.75 -1.56 6.06 C-2.22 4.41 -2.88 2.76 -3.56 1.06 C-2.56 0.06 -2.56 0.06 0 0 Z \",fill:\"#1C1420\",transform:\"translate(623.5625,268.9375)\"})),_path2517||(_path2517=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14 3.4 0.84 5.77 0.06 9.25 C-0.13 10.14 -0.33 11.03 -0.53 11.95 C-0.68 12.63 -0.84 13.3 -1 14 C-1.66 13.67 -2.32 13.34 -3 13 C-2.45 8.43 -1.58 4.33 0 0 Z \",fill:\"#3C1C47\",transform:\"translate(471,252)\"})),_path2518||(_path2518=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-0.32 6.78 -0.32 6.78 -3.75 7.88 C-4.49 7.92 -5.24 7.96 -6 8 C-5.34 7.01 -4.68 6.02 -4 5 C-3.34 5 -2.68 5 -2 5 C-2.33 4.01 -2.66 3.02 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#201723\",transform:\"translate(662,244)\"})),_path2519||(_path2519=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.91 1.3 4.58 2.99 6.75 6.44 C7.38 7.43 8.02 8.41 8.67 9.43 C9.11 10.28 9.55 11.13 10 12 C9.67 12.66 9.34 13.32 9 14 C5.26 9.7 2.66 5 0 0 Z \",fill:\"#391947\",transform:\"translate(895,148)\"})),_path2520||(_path2520=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.07 2.33 1.07 2.33 0.12 3.69 C-1.65 6.46 -2.91 8.91 -4 12 C-5.37 9.26 -5.13 7.03 -5 4 C-3.73 1.47 -2.59 1.02 0 0 Z \",fill:\"#1B0D28\",transform:\"translate(522,118)\"})),_path2521||(_path2521=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.33 3 1.66 3 2 C3.99 2.33 4.98 2.66 6 3 C2.17 4.8 -0.78 5.2 -5 5 C-3.35 3.35 -1.7 1.7 0 0 Z \",fill:\"#251038\",transform:\"translate(583,102)\"})),_path2522||(_path2522=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C1.49 5.51 0.91 7.77 0.12 10.19 C-0.07 10.84 -0.27 11.5 -0.48 12.17 C-0.98 13.78 -1.49 15.39 -2 17 C-2.33 17 -2.66 17 -3 17 C-2.49 11.15 -1.55 5.67 0 0 Z \",fill:\"#000002\",transform:\"translate(287,817)\"})),_path2523||(_path2523=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.69 3.64 -1.62 6.28 -4 9 C-4 5 -2.27 3.2 0 0 Z \",fill:\"#000002\",transform:\"translate(318,758)\"})),_path2524||(_path2524=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.29 1 8.58 1 13 C0.67 13 0.34 13 0 13 C-0.2 11.4 -0.38 9.79 -0.56 8.19 C-0.72 6.85 -0.72 6.85 -0.88 5.48 C-1 3 -1 3 0 0 Z \",fill:\"#000002\",transform:\"translate(142,1177)\"})),_path2525||(_path2525=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.65 3 3.3 3 5 C2.01 5 1.02 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#755B7D\",transform:\"translate(166,119)\"})),_path2526||(_path2526=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C0.67 7 0.34 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#000002\",transform:\"translate(281,873)\"})),_path2527||(_path2527=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.49 0.99 1.49 0.99 3 2 C2.67 2.99 2.34 3.98 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#000002\",transform:\"translate(1004,483)\"})),_path2528||(_path2528=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C0.67 6 0.34 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#000002\",transform:\"translate(142,1170)\"})),_path2529||(_path2529=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C0.67 6 0.34 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#000002\",transform:\"translate(282,882)\"})),_path2530||(_path2530=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.49 0.99 0.49 2 1 C1.67 1.66 1.34 2.32 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#000002\",transform:\"translate(151,1212)\"})),_path2531||(_path2531=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C1.67 1.66 1.34 2.32 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#000002\",transform:\"translate(1015,502)\"})),_path2532||(_path2532=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C1.67 1.66 1.34 2.32 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#000002\",transform:\"translate(1008,490)\"})),_path2533||(_path2533=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 4 1 4 1 4 Z \",fill:\"#000002\",transform:\"translate(935,272)\"})),_path2534||(_path2534=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#000002\",transform:\"translate(174,1263)\"})),_path2535||(_path2535=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 3 1 Z \",fill:\"#000002\",transform:\"translate(214,924)\"})),_path2536||(_path2536=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2537||(_path2537=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2538||(_path2538=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.5 0.99 0.5 2 1 C1.01 1.5 1.01 1.5 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#755B7D\",transform:\"translate(165,117)\"})),_path2539||(_path2539=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2540||(_path2540=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2541||(_path2541=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2542||(_path2542=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2543||(_path2543=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2544||(_path2544=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#3A1A49\",transform:\"translate(0,0)\"})),_path2545||(_path2545=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2546||(_path2546=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2547||(_path2547=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2548||(_path2548=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2549||(_path2549=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2550||(_path2550=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2551||(_path2551=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2552||(_path2552=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2553||(_path2553=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2554||(_path2554=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2555||(_path2555=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2556||(_path2556=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 2 1 Z \",fill:\"#000002\",transform:\"translate(935,278)\"})),_path2557||(_path2557=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2558||(_path2558=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2559||(_path2559=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2560||(_path2560=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2561||(_path2561=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2562||(_path2562=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2563||(_path2563=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2564||(_path2564=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2565||(_path2565=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2566||(_path2566=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2567||(_path2567=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2568||(_path2568=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2569||(_path2569=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2570||(_path2570=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2571||(_path2571=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2572||(_path2572=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2573||(_path2573=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2574||(_path2574=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2575||(_path2575=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2576||(_path2576=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2577||(_path2577=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2578||(_path2578=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2579||(_path2579=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2580||(_path2580=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2581||(_path2581=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2582||(_path2582=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2583||(_path2583=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2584||(_path2584=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2585||(_path2585=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2586||(_path2586=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2587||(_path2587=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2588||(_path2588=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2589||(_path2589=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#381A43\",transform:\"translate(0,0)\"})),_path2590||(_path2590=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#381A43\",transform:\"translate(0,0)\"})),_path2591||(_path2591=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2592||(_path2592=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2593||(_path2593=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2594||(_path2594=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2595||(_path2595=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2596||(_path2596=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2597||(_path2597=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2598||(_path2598=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2599||(_path2599=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2600||(_path2600=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2601||(_path2601=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2602||(_path2602=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2603||(_path2603=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2604||(_path2604=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2605||(_path2605=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2606||(_path2606=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2607||(_path2607=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2608||(_path2608=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2609||(_path2609=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2610||(_path2610=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2611||(_path2611=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2612||(_path2612=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2613||(_path2613=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2614||(_path2614=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2615||(_path2615=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2616||(_path2616=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2617||(_path2617=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2618||(_path2618=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2619||(_path2619=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2620||(_path2620=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2621||(_path2621=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2622||(_path2622=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2623||(_path2623=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2624||(_path2624=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2625||(_path2625=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#000002\",transform:\"translate(0,0)\"})),_path2626||(_path2626=/*#__PURE__*/React.createElement(\"path\",{d:\"\",fill:\"#755B7D\",transform:\"translate(0,0)\"})));}const ForwardRef=/*#__PURE__*/React.forwardRef(SvgHeaderImg);export default __webpack_public_path__+\"static/media/header-img.7a841aa5553d3560afb17a56495a4496.svg\";export{ForwardRef as ReactComponent};","var _excluded = [\"color\", \"size\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ArrowRightCircle = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var color = _ref.color,\n      size = _ref.size,\n      title = _ref.title,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 16 16\",\n    width: size,\n    height: size,\n    fill: color\n  }, rest), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z\"\n  }));\n});\nArrowRightCircle.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  title: PropTypes.string\n};\nArrowRightCircle.defaultProps = {\n  color: 'currentColor',\n  size: '1em',\n  title: null\n};\nexport default ArrowRightCircle;","import { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport headerImg from \"../assets/img/header-img.svg\";\nimport { ArrowRightCircle } from 'react-bootstrap-icons';\nimport 'animate.css';\nimport TrackVisibility from 'react-on-screen';\n\nexport const Banner = () => {\n  const [loopNum, setLoopNum] = useState(0);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [text, setText] = useState('');\n  const [delta, setDelta] = useState(300 - Math.random() * 100);\n  const [index, setIndex] = useState(1);\n  const toRotate = [ \"Desarrollo Web\", \"Desarrollo Full-Stack\"];\n  const period = 2000;\n\n  useEffect(() => {\n    let ticker = setInterval(() => {\n      tick();\n    }, delta);\n\n    return () => { clearInterval(ticker) };\n  }, [text])\n\n  const tick = () => {\n    let i = loopNum % toRotate.length;\n    let fullText = toRotate[i];\n    let updatedText = isDeleting ? fullText.substring(0, text.length - 1) : fullText.substring(0, text.length + 1);\n\n    setText(updatedText);\n\n    if (isDeleting) {\n      setDelta(prevDelta => prevDelta / 2);\n    }\n\n    if (!isDeleting && updatedText === fullText) {\n      setIsDeleting(true);\n      setIndex(prevIndex => prevIndex - 1);\n      setDelta(period);\n    } else if (isDeleting && updatedText === '') {\n      setIsDeleting(false);\n      setLoopNum(loopNum + 1);\n      setIndex(1);\n      setDelta(200);\n    } else {\n      setIndex(prevIndex => prevIndex + 1);\n    }\n  }\n\n  return (\n    <section className=\"banner\" id=\"home\">\n      <Container>\n        <Row className=\"aligh-items-center\">\n          <Col xs={12} md={6} xl={7}>\n            <TrackVisibility>\n              {({ isVisible }) =>\n              <div className={isVisible ? \"animate__animated animate__fadeIn\" : \"\"}>\n                <span className=\"tagline\">Bienvenido a mi Portafolio</span>\n                <h1>{`Hola! soy desarrolladora.`}</h1>\n                <h2><span className=\"txt-rotate\" dataPeriod=\"1000\" ><span className=\"wrap\">{text}</span></span></h2>\n                  <p>Soy una apasionada desarrolladora de software.\nComprometida con aprender y crecer en el campo.\nCreativa, resuelta y lista para contribuir en un entorno\nlaboral que fomente la innovación y el aprendizaje\ncontinuo.</p>\n                  <button onClick={() => console.log('connect')}> Charlemos <ArrowRightCircle size={25} /></button>\n              </div>}\n            </TrackVisibility>\n          </Col>\n          <Col xs={12} md={6} xl={5}>\n            <TrackVisibility>\n              {({ isVisible }) =>\n                <div className={isVisible ? \"animate__animated animate__zoomIn\" : \"\"}>\n                 \n                </div>}\n            </TrackVisibility>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgArrow1(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 28,\n    height: 46,\n    viewBox: \"0 0 28 46\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M26.6332 44.6528C28.4556 42.8565 28.4556 39.9437 26.6332 38.1474L11.2662 23.0001L26.6332 7.85272C28.4556 6.05628 28.4556 3.14374 26.6332 1.3473C24.8107 -0.449099 21.8559 -0.449099 20.0335 1.3473L1.36675 19.7473C-0.455587 21.5438 -0.455587 24.4564 1.36675 26.2527L20.0335 44.6528C21.8559 46.4491 24.8107 46.4491 26.6332 44.6528Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrow1);\nexport default __webpack_public_path__ + \"static/media/arrow1.1088f8313e5637897aff2414e5938141.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgArrow2(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 28,\n    height: 46,\n    viewBox: \"0 0 28 46\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M1.36683 44.6528C-0.455609 42.8565 -0.455609 39.9437 1.36683 38.1474L16.7338 23.0001L1.36683 7.85272C-0.455609 6.05628 -0.455609 3.14374 1.36683 1.3473C3.18931 -0.449099 6.14407 -0.449099 7.96655 1.3473L26.6332 19.7473C28.4556 21.5438 28.4556 24.4564 26.6332 26.2527L7.96655 44.6528C6.14407 46.4491 3.18931 46.4491 1.36683 44.6528Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrow2);\nexport default __webpack_public_path__ + \"static/media/arrow2.b3d03e1b04ec1904a5658aea5776433c.svg\";\nexport { ForwardRef as ReactComponent };","import meter_php from \"../assets/img/meter-php.png\";\nimport meter_js from \"../assets/img/meter-js.png\";\nimport meter_html from \"../assets/img/meter-html.png\";\nimport meter_jquery from \"../assets/img/meter-jquery.png\";\nimport meter_mysql from \"../assets/img/meter-mysql.webp\";\nimport meter_react from \"../assets/img/meter-reactjs.jpg\";\nimport meter_css from \"../assets/img/meter-css.png\";\nimport meter_github from \"../assets/img/meter-git.jpg\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport arrow1 from \"../assets/img/arrow1.svg\";\nimport arrow2 from \"../assets/img/arrow2.svg\";\nimport colorSharp from \"../assets/img/color-sharp.png\";\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport React from \"react\";\n\nexport const Skills = () => {\n  const responsive = {\n    superLargeDesktop: {\n      // the naming can be any, depends on you.\n      breakpoint: { max: 4000, min: 3000 },\n      items: 5,\n    },\n    desktop: {\n      breakpoint: { max: 3000, min: 1024 },\n      items: 3,\n    },\n    tablet: {\n      breakpoint: { max: 1024, min: 464 },\n      items: 2,\n    },\n    mobile: {\n      breakpoint: { max: 464, min: 0 },\n      items: 1,\n    },\n  };\n\n  return (\n    <section className=\"skill\" id=\"skills\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"skill-bx wow zoomIn\">\n              <h2>Habilidades</h2>\n              <p>\n                Poseo paciencia y habilidad para abordar problemas\n                con soluciones innovadoras, respaldado por una\n                comunicación efectiva y una colaboración activa , \n                asegurando un enfoque integral y exitoso en cada\n                proyecto.\n              </p>\n         \n               \n      \n            <React.Fragment >\n              <div className=\"skills-img\">\n              <Row className=\"mb-4\">\n              <Col sm={3}>\n              <div className=\"\">\n                  <img src={meter_php} className=\"img\"alt=\"Image\" />\n                  <h3>PHP</h3>\n                </div>\n               \n              </Col>\n              <Col sm={3}>\n              <div className=\"item\">\n                  <img src={meter_js} className=\"img\" alt=\"Image\" />\n                  <h3>JAVASCRIPT</h3>\n                </div>\n               \n              </Col>\n              <Col sm={3}>\n              <div className=\"item\">\n                  <img src={meter_jquery}  className=\"img\" alt=\"Image\" />\n                  <h3>JQUERY</h3>\n                </div>\n               \n              </Col>\n              <Col sm={3}>\n              <div className=\"item\">\n                  <img src={meter_react}   className=\"img\" alt=\"Image\" />\n                  <h3>REACTJS</h3>\n                </div>\n               \n              </Col>\n              </Row>\n              <Row className=\"mb-4\">\n              <Col sm={3}>\n              <div className=\"item\">\n                  <img src={meter_html}  className=\"img\" alt=\"Image\" />\n                  <h3>HTML5</h3>\n                </div>\n               \n              </Col>\n              <Col sm={3}>\n             \n              <div className=\"item\">\n                  <img src={meter_css}  className=\"img\" alt=\"Image\" />\n                  <h3>CSS</h3>\n                </div>\n               \n              </Col>\n              <Col sm={3}>\n              <div className=\"item\">\n                  <img src={meter_mysql}   className=\"img\"alt=\"Image\" />\n                  <h3>MYSQL</h3>\n                </div>\n              </Col>\n              <Col sm={3}>\n              \n              <div className=\"item\">\n                  <img src={meter_github} className=\"img\" alt=\"Image\" />\n                  <h3>Git/GitHub</h3>\n                </div>\n               \n              </Col>\n              </Row>\n              </div>\n\n            </React.Fragment>\n     \n     \n\n\n\n\n            \n            </div>\n          </div>\n        </div>\n      </div>\n      <img className=\"background-image-left\" src={colorSharp} alt=\"Image\" />\n    </section>\n  );\n};\n","function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { useCallback, useRef, useState } from 'react';\nexport function defaultKey(key) {\n  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);\n}\nfunction useUncontrolledProp(propValue, defaultValue, handler) {\n  const wasPropRef = useRef(propValue !== undefined);\n  const [stateValue, setState] = useState(defaultValue);\n  const isProp = propValue !== undefined;\n  const wasProp = wasPropRef.current;\n  wasPropRef.current = isProp;\n\n  /**\n   * If a prop switches from controlled to Uncontrolled\n   * reset its value to the defaultValue\n   */\n  if (!isProp && wasProp && stateValue !== defaultValue) {\n    setState(defaultValue);\n  }\n  return [isProp ? propValue : stateValue, useCallback((...args) => {\n    const [value, ...rest] = args;\n    let returnValue = handler == null ? void 0 : handler(value, ...rest);\n    setState(value);\n    return returnValue;\n  }, [handler])];\n}\nexport { useUncontrolledProp };\nexport function useUncontrolled(props, config) {\n  return Object.keys(config).reduce((result, fieldName) => {\n    const _ref = result,\n      _defaultKey = defaultKey(fieldName),\n      {\n        [_defaultKey]: defaultValue,\n        [fieldName]: propsValue\n      } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, [_defaultKey, fieldName].map(_toPropertyKey));\n    const handlerName = config[fieldName];\n    const [value, handler] = useUncontrolledProp(propsValue, defaultValue, props[handlerName]);\n    return Object.assign({}, rest, {\n      [fieldName]: value,\n      [handlerName]: handler\n    });\n  }, props);\n}","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\nconst IsSSRContext = React.createContext(false);\n\nexport interface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n// This is only used in React < 18.\nfunction LegacySSRProvider(props: SSRProviderProps): React.JSX.Element {\n  let cur = useContext(SSRContext);\n  let counter = useCounter(cur === defaultContext);\n  let [isSSR, setIsSSR] = useState(true);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${counter}`,\n    current: 0\n  }), [cur, counter]);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof document !== 'undefined') {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return (\n    <SSRContext.Provider value={value}>\n      <IsSSRContext.Provider value={isSSR}>\n        {props.children}\n      </IsSSRContext.Provider>\n    </SSRContext.Provider>\n  );\n}\n\nlet warnedAboutSSRProvider = false;\n\n/**\n * When using SSR with React Aria in React 16 or 17, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): React.JSX.Element {\n  if (typeof React['useId'] === 'function') {\n    if (process.env.NODE_ENV !== 'test' && !warnedAboutSSRProvider) {\n      console.warn('In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.');\n      warnedAboutSSRProvider = true;\n    }\n    return <>{props.children}</>;\n  }\n  return <LegacySSRProvider {...props} />;\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nlet componentIds = new WeakMap();\n\nfunction useCounter(isDisabled = false) {\n  let ctx = useContext(SSRContext);\n  let ref = useRef<number | null>(null);\n  // eslint-disable-next-line rulesdir/pure-render\n  if (ref.current === null && !isDisabled) {\n    // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n    let currentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?.ReactCurrentOwner?.current;\n    if (currentOwner) {\n      let prevComponentValue = componentIds.get(currentOwner);\n      if (prevComponentValue == null) {\n        // On the first render, and first call to useId, store the id and state in our weak map.\n        componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });\n      } else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        componentIds.delete(currentOwner);\n      }\n    }\n\n    // eslint-disable-next-line rulesdir/pure-render\n    ref.current = ++ctx.current;\n  }\n\n  // eslint-disable-next-line rulesdir/pure-render\n  return ref.current;\n}\n\nfunction useLegacySSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  let counter = useCounter(!!defaultId);\n  let prefix = ctx === defaultContext && process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${ctx.prefix}`;\n  return defaultId || `${prefix}-${counter}`;\n}\n\nfunction useModernSSRSafeId(defaultId?: string): string {\n  // @ts-ignore\n  let id = React.useId();\n  let [didSSR] = useState(useIsSSR());\n  let prefix = didSSR || process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${defaultContext.prefix}`;\n  return defaultId || `${prefix}-${id}`;\n}\n\n// Use React.useId in React 18 if available, otherwise fall back to our old implementation.\n/** @private */\nexport const useSSRSafeId = typeof React['useId'] === 'function' ? useModernSSRSafeId : useLegacySSRSafeId;\n\nfunction getSnapshot() {\n  return false;\n}\n\nfunction getServerSnapshot() {\n  return true;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction subscribe(onStoreChange: () => void): () => void {\n  // noop\n  return () => {};\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n  if (typeof React['useSyncExternalStore'] === 'function') {\n    return React['useSyncExternalStore'](subscribe, getSnapshot, getServerSnapshot);\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useContext(IsSSRContext);\n}\n","const _excluded = [\"active\", \"eventKey\", \"mountOnEnter\", \"transition\", \"unmountOnExit\", \"role\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\"],\n  _excluded2 = [\"activeKey\", \"getControlledId\", \"getControllerId\"],\n  _excluded3 = [\"as\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport NoopTransition from './NoopTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useTabPanel(_ref) {\n  let {\n      active,\n      eventKey,\n      mountOnEnter,\n      transition,\n      unmountOnExit,\n      role = 'tabpanel',\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const context = useContext(TabContext);\n  if (!context) return [Object.assign({}, props, {\n    role\n  }), {\n    eventKey,\n    isActive: active,\n    mountOnEnter,\n    transition,\n    unmountOnExit,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited\n  }];\n  const {\n      activeKey,\n      getControlledId,\n      getControllerId\n    } = context,\n    rest = _objectWithoutPropertiesLoose(context, _excluded2);\n  const key = makeEventKey(eventKey);\n  return [Object.assign({}, props, {\n    role,\n    id: getControlledId(eventKey),\n    'aria-labelledby': getControllerId(eventKey)\n  }), {\n    eventKey,\n    isActive: active == null && key != null ? makeEventKey(activeKey) === key : active,\n    transition: transition || rest.transition,\n    mountOnEnter: mountOnEnter != null ? mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: unmountOnExit != null ? unmountOnExit : rest.unmountOnExit,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited\n  }];\n}\nconst TabPanel = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(_ref2, ref) => {\n  let {\n      as: Component = 'div'\n    } = _ref2,\n    props = _objectWithoutPropertiesLoose(_ref2, _excluded3);\n  const [tabPanelProps, {\n    isActive,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    mountOnEnter,\n    unmountOnExit,\n    transition: Transition = NoopTransition\n  }] = useTabPanel(props);\n  // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't\n  // conflict with the top level one.\n  return /*#__PURE__*/_jsx(TabContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: null,\n      children: /*#__PURE__*/_jsx(Transition, {\n        in: isActive,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n        mountOnEnter: mountOnEnter,\n        unmountOnExit: unmountOnExit,\n        children: /*#__PURE__*/_jsx(Component, Object.assign({}, tabPanelProps, {\n          ref: ref,\n          hidden: !isActive,\n          \"aria-hidden\": !isActive\n        }))\n      })\n    })\n  });\n});\nTabPanel.displayName = 'TabPanel';\nexport default TabPanel;","import * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport { useSSRSafeId } from './ssr';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\nimport TabPanel from './TabPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Tabs = props => {\n  const {\n    id: userId,\n    generateChildId: generateCustomChildId,\n    onSelect: propsOnSelect,\n    activeKey: propsActiveKey,\n    defaultActiveKey,\n    transition,\n    mountOnEnter,\n    unmountOnExit,\n    children\n  } = props;\n  const [activeKey, onSelect] = useUncontrolledProp(propsActiveKey, defaultActiveKey, propsOnSelect);\n  const id = useSSRSafeId(userId);\n  const generateChildId = useMemo(() => generateCustomChildId || ((key, type) => id ? `${id}-${type}-${key}` : null), [id, generateCustomChildId]);\n  const tabContext = useMemo(() => ({\n    onSelect,\n    activeKey,\n    transition,\n    mountOnEnter: mountOnEnter || false,\n    unmountOnExit: unmountOnExit || false,\n    getControlledId: key => generateChildId(key, 'tabpane'),\n    getControllerId: key => generateChildId(key, 'tab')\n  }), [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/_jsx(TabContext.Provider, {\n    value: tabContext,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: onSelect || null,\n      children: children\n    })\n  });\n};\nTabs.Panel = TabPanel;\nexport default Tabs;","import NoopTransition from '@restart/ui/NoopTransition';\nimport Fade from './Fade';\nexport default function getTabTransitionComponent(transition) {\n  if (typeof transition === 'boolean') {\n    return transition ? Fade : NoopTransition;\n  }\n  return transition;\n}","import * as React from 'react';\nimport Tabs from '@restart/ui/Tabs';\nimport getTabTransitionComponent from './getTabTransitionComponent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabContainer = ({\n  transition,\n  ...props\n}) => /*#__PURE__*/_jsx(Tabs, {\n  ...props,\n  transition: getTabTransitionComponent(transition)\n});\nTabContainer.displayName = 'TabContainer';\nexport default TabContainer;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabContent = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nTabContent.displayName = 'TabContent';\nexport default TabContent;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport TabContext from '@restart/ui/TabContext';\nimport { useTabPanel } from '@restart/ui/TabPanel';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport getTabTransitionComponent from './getTabTransitionComponent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabPane = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  transition,\n  ...props\n}, ref) => {\n  const [{\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    ...rest\n  }, {\n    isActive,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    mountOnEnter,\n    unmountOnExit,\n    transition: Transition = Fade\n  }] = useTabPanel({\n    ...props,\n    transition: getTabTransitionComponent(transition)\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n\n  // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't\n  // conflict with the top level one.\n  return /*#__PURE__*/_jsx(TabContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: null,\n      children: /*#__PURE__*/_jsx(Transition, {\n        in: isActive,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n        mountOnEnter: mountOnEnter,\n        unmountOnExit: unmountOnExit,\n        children: /*#__PURE__*/_jsx(Component, {\n          ...rest,\n          ref: ref,\n          className: classNames(className, prefix, isActive && 'active')\n        })\n      })\n    })\n  });\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import PropTypes from 'prop-types';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n/* eslint-disable react/no-unused-prop-types */\nconst propTypes = {\n  eventKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Content for the tab title.\n   */\n  title: PropTypes.node.isRequired,\n  /**\n   * The disabled state of the tab.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Class to pass to the underlying nav link.\n   */\n  tabClassName: PropTypes.string,\n  /**\n   * Object containing attributes to pass to underlying nav link.\n   */\n  tabAttrs: PropTypes.object\n};\nconst Tab = () => {\n  throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n};\nTab.propTypes = propTypes;\nexport default Object.assign(Tab, {\n  Container: TabContainer,\n  Content: TabContent,\n  Pane: TabPane\n});","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;","import { Col } from \"react-bootstrap\";\n\nimport Button from 'react-bootstrap/Button';\n\nexport const ProjectCard = ({ title, description,tools, imgUrl,github }) => {\n  return (\n    <Col size={12} sm={6} md={4}>\n      <div className=\"proj-imgbx\">\n        <img src={imgUrl} />\n        <div className=\"proj-txtx\">\n          <h4>{title}</h4>\n          <span>{description}</span>\n          <p >{tools}</p>\n          <Button target=\"_blank\" variant=\"dark\"  href={github}>\n            github      \n      </Button>\n        </div>\n      </div>\n    </Col>\n  )\n}","import { Container, Row, Col, Tab, Nav } from \"react-bootstrap\";\nimport { ProjectCard } from \"./ProjectCard\";\nimport projImg1 from \"../assets/img/project-img1.jpg\";\nimport projImg2 from \"../assets/img/project-img2.png\";\nimport projImg3 from \"../assets/img/project-img3.png\";\nimport colorSharp2 from \"../assets/img/color-sharp2.png\";\nimport 'animate.css';\nimport TrackVisibility from 'react-on-screen';\n\nexport const Projects = () => {\n\n  const projects = [\n    {\n      title: \"Sistema de Gestion\",\n      description: \"Sistema de gestion para un mercado multirubro.\",\n      tools: \"HTML, CSS, BOOTSTRAP,JS,JQUERY,AJAX,MYSQL \",\n      imgUrl: projImg1,\n      github: \"https://github.com/Belen-Sosa/sistemaGestion\"\n\n    }\n   \n  ];\n\n  return (\n    <section className=\"project\" id=\"projects\">\n      <Container>\n        <Row>\n          <Col size={12}>\n        \n              <div >\n                <h2>Proyectos</h2>\n                <p></p>\n                <Tab.Container id=\"projects-tabs\" defaultActiveKey=\"first\">\n                  <Nav variant=\"pills\" className=\"nav-pills mb-5 justify-content-center align-items-center\" id=\"pills-tab\">\n                    <Nav.Item>\n                      <Nav.Link eventKey=\"first\">pag 1</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                      <Nav.Link eventKey=\"second\">pag 2</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                      <Nav.Link eventKey=\"third\">pag3</Nav.Link>\n                    </Nav.Item>\n                  </Nav>\n                  <Tab.Content id=\"slideInUp\" >\n                    <Tab.Pane eventKey=\"first\">\n                      <Row>\n                        {\n                          projects.map((project, index) => {\n                            return (\n                              <ProjectCard\n                                key={index}\n                                {...project}\n                                />\n                            )\n                          })\n                        }\n                      </Row>\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"second\">\n                      <p>proximamente...</p>\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"third\">\n                      <p>proximamente...</p>\n                    </Tab.Pane>\n                  </Tab.Content>\n                </Tab.Container>\n              </div>\n          </Col>\n        </Row>\n      </Container>\n      <img className=\"background-image-right\" src={colorSharp2}></img>\n    </section>\n  )\n}","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _path25, _path26, _path27, _path28, _path29, _path30, _path31, _path32, _path33, _path34, _path35, _path36, _path37, _path38, _path39, _path40, _path41, _path42, _path43, _path44, _path45, _path46, _path47, _path48, _path49, _path50, _path51, _path52, _path53, _path54, _path55, _path56, _path57, _path58, _path59, _path60, _path61, _path62, _path63, _path64, _path65, _path66, _path67, _path68, _path69, _path70, _path71, _path72, _path73, _path74, _path75, _path76, _path77, _path78, _path79, _path80, _path81, _path82, _path83, _path84, _path85, _path86, _path87, _path88, _path89, _path90, _path91, _path92, _path93, _path94, _path95, _path96, _path97, _path98, _path99, _path100, _path101, _path102, _path103, _path104, _path105, _path106, _path107, _path108, _path109, _path110, _path111, _path112, _path113, _path114, _path115, _path116, _path117, _path118, _path119, _path120, _path121, _path122, _path123, _path124, _path125, _path126, _path127, _path128, _path129, _path130, _path131, _path132, _path133, _path134, _path135, _path136, _path137, _path138, _path139, _path140, _path141, _path142, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgContactImg(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 785,\n    height: 589,\n    viewBox: \"0 0 785 589\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M542.825 172.118C488.653 121.258 425.185 108.128 408.415 105.449C419.717 74.9198 437.173 29.5363 441.52 22.8209C444.332 22.4672 447.164 22.3049 449.997 22.3352C462.319 22.3352 488.703 24.8975 526.908 42.0963C582.083 66.9317 596.747 94.8651 599.656 101.698L542.825 172.118Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M449.997 25.6847C462.052 25.6847 487.901 28.2134 525.487 45.1443C575.329 67.6183 591.43 92.7384 595.71 101.229L542.508 167.228C516.192 143.508 485.466 125.218 452.087 113.404C439.364 108.817 426.291 105.272 412.996 102.803C425.486 69.1925 439.062 34.5939 443.627 25.9526C445.115 25.8187 447.255 25.6847 450.03 25.6847H449.997ZM450.03 18.986C446.633 18.9146 443.237 19.1501 439.882 19.6894C435.969 20.9956 403.867 108.179 403.867 108.179C403.867 108.179 480.059 115.966 543.177 177.041L603.368 102.317C603.368 102.317 593.336 68.3887 528.129 39.0485C489.957 21.8497 463.356 18.9525 449.897 18.9525L450.03 18.986Z\",\n    fill: \"#A0C6F4\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M415.019 114.961C415.019 114.961 489.941 122.531 536.087 164.984\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M479.691 111.294L507.647 56.8671L536.372 113.622L479.691 111.294Z\",\n    fill: \"#A0C6F4\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M485.125 110.523L513.081 56.0967L541.805 112.851L485.125 110.523Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M458.909 15.6701C458.909 15.6701 542.942 23.3066 595.108 85.4033\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M501.828 256.856C497.214 253.506 494.188 251.179 494.188 251.179C495.458 249.504 515.672 227.917 527.376 210.534C527.376 210.534 503.701 258.246 501.828 256.856Z\",\n    fill: \"white\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M215.435 99.6547C217.692 103.423 218.678 101.915 225.182 101.329C231.686 100.743 240.949 105.583 244.193 113.605C247.436 121.626 246.45 122.866 244.694 123.87C242.939 124.875 230.449 126.382 229.947 128.894\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M383.92 507.369L378.085 497.505L357.419 532.02L362.837 536.207L383.92 507.369Z\",\n    fill: \"#F9865F\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.667 421.878C246.667 421.878 235.95 404.444 240.548 395.887L274.723 399.554L246.667 421.878Z\",\n    fill: \"#F9865F\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.667 421.878L248.707 426.6L242.404 451.251C242.005 452.774 242.044 454.378 242.514 455.879C242.984 457.381 243.867 458.72 245.062 459.742L276.312 413.471C277.744 411.341 278.371 408.77 278.08 406.219C277.789 403.668 276.599 401.305 274.723 399.554L267.734 393.057L246.667 421.878Z\",\n    fill: \"black\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.948 128.961C239.729 128.727 252.135 128.107 249.644 120.588C247.152 113.069 237.94 94.5136 216.789 100.09C216.789 100.09 209.349 106.303 218.645 117.49C227.941 128.677 229.948 128.961 229.948 128.961Z\",\n    fill: \"#2A1E33\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M279.472 399.889C279.472 399.889 262.752 350.487 276.897 328.8C288.601 310.898 326.688 340.003 331.905 343.872L359.175 294.603C359.175 294.603 352.888 285.761 337.439 277.103C321.99 268.445 258.137 242.521 228.125 289.947C217.04 307.465 216.873 382.674 238.157 411.495L279.472 399.889Z\",\n    fill: \"#3B3B5F\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M279.472 399.889C279.472 399.889 262.752 350.487 276.897 328.8C288.601 310.897 326.688 340.003 331.905 343.872\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M359.175 294.603C346.769 307.682 310.002 371.386 301.726 401.782C290.674 442.51 294.837 476.288 355.63 542.454L385.007 499.582C385.007 499.582 364.341 468.165 368.287 438.541C373.872 395.686 404.318 354.137 419.717 327.778L359.175 294.603Z\",\n    fill: \"#3B3B5F\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M363.84 300.129L412.712 338.563L427.325 316.323L363.84 300.129Z\",\n    fill: \"#8C3C6C\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M644.599 259.736C652.223 261.377 658.03 264.286 662.021 268.461C666.017 272.648 664.211 274.825 662.757 276.098C661.302 277.37 655.667 275.913 650.768 271.559C645.87 267.205 644.599 259.736 644.599 259.736Z\",\n    fill: \"#FF8A66\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M494.188 251.179C495.458 249.504 515.672 227.917 527.376 210.534C527.376 210.534 562.739 250.224 566.584 251.514C568.005 251.982 576.616 251.865 587.451 251.765C605.642 251.564 629.835 251.38 635.186 254.076C643.713 258.329 648.829 260.473 650.952 266.452C653.076 272.43 653.929 276.332 648.829 276.684C642.86 277.119 639.031 269.432 639.031 269.432C633.409 272.457 627.555 275.027 621.526 277.119C621.526 277.119 576.198 294.737 545.902 286.213C537.659 283.885 494.188 251.179 494.188 251.179Z\",\n    fill: \"#F9865F\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M219.431 92.638C215.552 94.1285 213.178 95.9036 215.435 99.6549C217.692 103.406 218.678 101.916 225.182 101.33C231.686 100.743 240.949 105.583 244.193 113.605C247.436 121.627 246.45 122.866 244.694 123.871C242.939 124.875 230.449 126.383 229.948 128.895C229.446 131.407 234.964 138.792 246.517 138.306L249.259 137.804C249.259 137.804 273.452 161.467 276.964 164.967C280.475 168.467 306.19 185.934 320.435 189.484C331.203 192.18 353.039 188.714 366.147 186.135C372.517 184.879 376.848 183.857 376.848 183.857C376.848 183.857 367 166.089 364.993 138.792C364.993 138.792 341.452 142.577 325.802 146.026C325.802 146.026 289.286 125.629 271.53 116.603C271.53 116.603 256.014 97.5783 248.757 95.0663C241.501 92.5543 224.681 90.6452 219.431 92.638Z\",\n    fill: \"#F9865F\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M366.08 186.218C372.45 184.962 376.781 183.941 376.781 183.941C376.781 183.941 364.86 168.869 362.87 141.605C362.87 141.605 357.486 147.416 359.158 162.873C361.265 182.4 366.08 186.218 366.08 186.218Z\",\n    fill: \"white\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M362.368 138.541C362.368 138.541 362.703 171.917 371.631 185.833L374.825 184.544C374.825 184.544 332.774 233.829 319.164 266.033C316.941 271.308 406.492 328.599 419.717 327.795C419.717 327.795 463.356 261.093 478.237 241.315L494.288 253.775C494.288 253.775 525.738 221.855 527.426 210.535C527.426 210.535 497.046 173.508 472.251 162.656C447.455 151.804 425.068 133.249 398.366 133.835C375.259 134.187 362.368 138.541 362.368 138.541Z\",\n    fill: \"#471C36\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M494.221 253.774L478.187 241.315L480.745 234.348L494.221 253.774Z\",\n    fill: \"white\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M518.632 121.827C515.823 130.586 507.714 155.89 498.668 159.005C489.623 162.12 480.277 158.218 480.277 158.218L470.646 163.141C469.576 166.373 461.968 169.153 452.154 169.539C444.881 169.823 440.45 160.462 442.607 153.696C443.593 150.581 447.288 135.275 447.288 135.275C447.288 135.275 455.08 106.538 462.336 100.609C469.593 94.6809 476.247 88.786 495.391 96.5398C524.551 108.396 518.632 121.827 518.632 121.827Z\",\n    fill: \"#F9865F\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M460.497 123.083C459.21 128.442 453.642 139.194 449.98 137.251C446.319 135.309 445.048 130.385 447.623 120.923C450.198 111.461 452.354 89.992 459.644 86.1235C466.934 82.255 470.161 86.7599 470.161 86.7599C470.161 86.7599 466.934 71.085 476.381 68.9247C476.381 68.9247 479.591 67.4342 478.304 78.1689C479.554 75.2171 481.754 72.7685 484.553 71.212C487.352 69.6555 490.59 69.0803 493.753 69.5778C505.457 70.8673 509.62 87.413 509.62 87.413C509.959 86.0464 510.769 84.8434 511.907 84.0162C513.044 83.189 514.437 82.7907 515.84 82.8914C521.207 82.8914 529.366 90.8461 527.426 99.6381C527.426 99.6381 541.153 95.3342 548.443 106.337C555.733 117.339 554.88 129.33 537.291 134.053C518.899 138.993 519.067 117.507 516.274 114.71C513.482 111.913 510.489 108.698 500.19 112.567C489.89 116.435 479.156 105.047 479.156 105.047C479.156 105.047 477.484 118.796 475.729 120.119C473.973 121.442 470.579 123.134 471.432 116.686C472.284 110.239 473.371 110.875 472.719 109.167C472.067 107.459 469.175 102.016 463.072 106.806C456.217 112.064 460.497 123.083 460.497 123.083Z\",\n    fill: \"#2A1E33\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M463.423 125.461C459.327 122.112 456.484 115.949 460.079 109.887C463.674 103.825 469.576 103.004 471.365 105.298C473.154 107.593 473.856 111.461 472.167 116.05\",\n    stroke: \"#2A1E33\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M362.853 536.207L364.893 540.913L358.59 565.564C358.191 567.086 358.23 568.691 358.7 570.192C359.17 571.694 360.053 573.033 361.248 574.055L392.464 527.783C393.897 525.654 394.524 523.083 394.232 520.532C393.941 517.981 392.751 515.618 390.876 513.867L383.887 507.369L362.853 536.207Z\",\n    fill: \"black\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M470.161 86.7597C470.161 86.7597 467.753 78.9724 460.581 76.9126\",\n    stroke: \"#2A1E33\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M318.094 263.672L404.67 142.543\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M440.366 151.017C437.24 155.086 435.819 172.57 450.181 173.692C458.372 174.508 466.61 172.696 473.706 168.517\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M248.674 95.1499C248.674 95.1499 258.572 108.263 260.127 112.935\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path31 || (_path31 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M619.252 271.04C619.252 271.04 625.939 276.483 639.031 269.365C643.796 266.803 640.402 260.758 634.35 262.265C628.297 263.772 621.141 261.511 621.141 261.511\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path32 || (_path32 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M646.873 260.49C646.873 260.49 653.21 267.909 653.042 272.313\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path33 || (_path33 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M553.509 259.686C553.509 259.686 559.244 252.033 566.584 251.514\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path34 || (_path34 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M311.657 158.469C311.657 158.469 315.001 148.019 325.735 146.11\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path35 || (_path35 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M340.733 317.027L327.926 341.494C327.926 341.494 285.725 413.019 300.054 459.239\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path36 || (_path36 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M378.118 399.085L419.634 327.795C419.634 327.795 474.057 248.734 479.624 237.664L498.836 202.077\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path37 || (_path37 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M323.913 271.275C323.913 271.275 397.764 325.199 419.65 327.795\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path38 || (_path38 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M362.368 138.541C362.368 138.541 362.368 172.386 371.414 186.252\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path39 || (_path39 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M525.002 205.175C522.678 219.109 491.863 248.399 491.863 248.399\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path40 || (_path40 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M295.004 378.872C297.424 378.872 299.385 376.908 299.385 374.484C299.385 372.061 297.424 370.097 295.004 370.097C292.585 370.097 290.624 372.061 290.624 374.484C290.624 376.908 292.585 378.872 295.004 378.872Z\",\n    fill: \"white\"\n  })), _path41 || (_path41 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M706.379 468.852L703.954 452.055L718.25 461.584L710.776 463.208L706.379 468.852Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path42 || (_path42 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M231.954 182.099C204.851 158.134 160.059 217.87 323.913 408.011C418.463 517.702 492.783 527.532 502.815 489.367C520.872 420.906 455.665 403.607 479.942 430.418C515.221 469.405 615.556 477.644 690.344 441.27C764.129 405.365 718.768 349.616 714.187 346.35\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path43 || (_path43 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M691.582 445.306C694.001 445.306 695.962 443.342 695.962 440.919C695.962 438.495 694.001 436.531 691.582 436.531C689.162 436.531 687.201 438.495 687.201 440.919C687.201 443.342 689.162 445.306 691.582 445.306Z\",\n    fill: \"white\"\n  })), _path44 || (_path44 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M627.779 476.773L757.742 403.389\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path45 || (_path45 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.663 190.037C237.082 190.037 239.043 188.072 239.043 185.649C239.043 183.226 237.082 181.261 234.663 181.261C232.243 181.261 230.282 183.226 230.282 185.649C230.282 188.072 232.243 190.037 234.663 190.037Z\",\n    fill: \"white\"\n  })), _path46 || (_path46 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M346.468 104.394C351.667 104.394 355.881 100.173 355.881 94.9656C355.881 89.7585 351.667 85.5372 346.468 85.5372C341.269 85.5372 337.055 89.7585 337.055 94.9656C337.055 100.173 341.269 104.394 346.468 104.394Z\",\n    fill: \"#FF6D66\"\n  })), _path47 || (_path47 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M175.792 23.1059C174.971 23.1026 174.168 23.3433 173.484 23.7977C172.8 24.252 172.266 24.8995 171.949 25.6581C171.633 26.4166 171.548 27.2522 171.706 28.059C171.865 28.8657 172.258 29.6073 172.837 30.1898C173.417 30.7723 174.155 31.1695 174.96 31.3312C175.765 31.4928 176.6 31.4115 177.358 31.0977C178.117 30.7838 178.766 30.2515 179.222 29.5682C179.678 28.8848 179.922 28.0812 179.922 27.2591C179.922 26.1605 179.487 25.1066 178.713 24.3282C177.939 23.5498 176.889 23.1103 175.792 23.1059Z\",\n    fill: \"#A0C6F4\"\n  })), _path48 || (_path48 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M729.87 537.53C732.151 537.53 734 535.678 734 533.394C734 531.109 732.151 529.257 729.87 529.257C727.589 529.257 725.74 531.109 725.74 533.394C725.74 535.678 727.589 537.53 729.87 537.53Z\",\n    fill: \"#FAD8B0\"\n  })), _path49 || (_path49 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M655.985 346.333L611.494 325.45C610.709 325.062 610.051 324.459 609.594 323.712C609.138 322.964 608.902 322.103 608.915 321.227C608.927 320.35 609.187 319.496 609.664 318.761C610.141 318.027 610.816 317.443 611.611 317.077L694.307 280.636C694.886 280.379 695.513 280.247 696.146 280.247C696.779 280.247 697.406 280.379 697.985 280.636L754.833 305.053L655.985 346.333Z\",\n    fill: \"#2A1E33\"\n  })), _path50 || (_path50 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M653.293 277.672C653.393 296.093 656.035 346.334 656.035 346.334L754.883 304.986L752.659 235.069C752.63 234.077 752.356 233.108 751.863 232.248C751.369 231.388 750.671 230.664 749.83 230.14C748.989 229.616 748.031 229.309 747.043 229.245C746.055 229.182 745.066 229.364 744.165 229.777L659.078 268.629C657.342 269.412 655.871 270.684 654.844 272.289C653.817 273.895 653.278 275.765 653.293 277.672Z\",\n    fill: \"#121212\"\n  })), _path51 || (_path51 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M655.985 346.333L754.833 304.986L752.609 235.068C752.609 235.068 751.957 227.432 744.115 229.776\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path52 || (_path52 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M703.82 296.076L710.492 280.284\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path53 || (_path53 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M710.492 296.076L717.163 280.284\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path54 || (_path54 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M193.599 468.4C195.879 468.4 197.728 466.548 197.728 464.263C197.728 461.979 195.879 460.127 193.599 460.127C191.318 460.127 189.469 461.979 189.469 464.263C189.469 466.548 191.318 468.4 193.599 468.4Z\",\n    fill: \"#FF6D66\"\n  })), _path55 || (_path55 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M542.257 490.556C545.433 490.556 548.008 487.976 548.008 484.795C548.008 481.613 545.433 479.034 542.257 479.034C539.08 479.034 536.505 481.613 536.505 484.795C536.505 487.976 539.08 490.556 542.257 490.556Z\",\n    fill: \"#FF6D66\"\n  })), _path56 || (_path56 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M236.468 525.707C252.84 533.243 270.667 537.073 288.684 536.927C289.019 536.93 289.349 537.003 289.653 537.142C289.957 537.281 290.229 537.483 290.45 537.734C290.671 537.985 290.836 538.281 290.935 538.6C291.035 538.92 291.065 539.258 291.025 539.59L287.414 568.26C287.342 568.758 287.113 569.219 286.761 569.578C286.41 569.936 285.953 570.173 285.457 570.253C278.134 571.643 248.674 575.696 226.57 556.856C226.234 556.567 225.986 556.189 225.856 555.765C225.726 555.341 225.718 554.889 225.835 554.461L233.124 527.114C233.225 526.782 233.398 526.477 233.63 526.219C233.862 525.962 234.148 525.759 234.467 525.625C234.786 525.49 235.131 525.428 235.477 525.442C235.823 525.457 236.161 525.547 236.468 525.707Z\",\n    fill: \"#FFF7DC\"\n  })), _path57 || (_path57 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M239.06 534.08C239.06 534.08 251.8 552.016 256.348 554.595C260.896 557.174 285.441 542.504 285.441 542.504\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path58 || (_path58 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M268.37 552.117L281.762 565.899\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path59 || (_path59 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M249.761 549.454L234.094 553.724\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path60 || (_path60 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M646.505 186.402H631.541V201.391H646.505V186.402Z\",\n    fill: \"#FFE1C0\"\n  })), _path61 || (_path61 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M633.564 388.518L638.011 396.239L642.459 403.959H633.564H624.686L629.116 396.239L633.564 388.518Z\",\n    fill: \"#A0C6F4\"\n  })), _path62 || (_path62 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M274.004 46.7521L275.175 11.718C275.041 8.36868 276.378 7.41411 278.385 6.96195C287.882 4.86861 316.84 -1.57885 348.157 7.71556C352.219 8.92132 352.086 11.0649 352.019 13.0075L350.899 46.4004C350.817 47.0244 350.606 47.6244 350.279 48.1617C349.951 48.6989 349.515 49.1616 348.999 49.5197C348.482 49.8779 347.896 50.1236 347.279 50.2411C346.661 50.3586 346.026 50.3452 345.415 50.2019C334.032 48.8374 322.567 48.2778 311.106 48.5272C300.082 48.4801 289.074 49.3709 278.201 51.1899C275.091 51.776 273.921 49.4985 274.004 46.7521Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path63 || (_path63 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M284.571 41.728L302.863 20.2922L323.094 40.3045C316.105 37.9432 284.571 41.728 284.571 41.728Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path64 || (_path64 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M314.048 30.1393L328.829 18.2827L341.285 27.1919L341.753 41.1084L323.077 40.2041\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path65 || (_path65 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M292.472 18.6138C292.642 16.9298 291.178 15.4027 289.203 15.2028C287.228 15.0028 285.489 16.2058 285.319 17.8898C285.149 19.5738 286.613 21.101 288.588 21.3009C290.563 21.5009 292.302 20.2978 292.472 18.6138Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path66 || (_path66 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M627.461 501.776L639.717 524.451C641.004 526.477 640.553 527.633 639.432 528.671C634.182 533.544 618.182 548.382 594.774 554.176C591.748 554.93 591.029 553.506 590.36 552.25L578.656 530.631C578.479 530.202 578.393 529.742 578.403 529.279C578.412 528.816 578.518 528.359 578.713 527.939C578.908 527.519 579.188 527.144 579.535 526.837C579.882 526.531 580.288 526.3 580.729 526.159C588.468 522.794 595.956 518.877 603.134 514.436C610.204 510.402 616.917 505.769 623.197 500.587C624.869 498.912 626.541 500.001 627.461 501.776Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path67 || (_path67 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M622.646 508.96L618.984 529.375L598.72 524.2C603.986 523.061 622.646 508.96 622.646 508.96Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path68 || (_path68 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M608.183 527.248L603.184 540.276L591.982 539.255L586.514 530.58L598.703 524.2\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path69 || (_path69 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M629.443 527.599C630.77 526.992 631.429 525.585 630.915 524.458C630.4 523.331 628.908 522.91 627.581 523.517C626.254 524.124 625.595 525.53 626.109 526.658C626.624 527.785 628.116 528.206 629.443 527.599Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path70 || (_path70 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M567.771 114.626L617.58 152.809C617.839 153.009 618.135 153.155 618.451 153.239C618.767 153.323 619.096 153.343 619.42 153.298C619.744 153.252 620.056 153.143 620.337 152.975C620.618 152.808 620.863 152.586 621.057 152.323L628.581 142.107C628.951 141.598 629.11 140.966 629.026 140.342C628.942 139.718 628.621 139.151 628.13 138.758L579.024 99.3866C578.763 99.1785 578.464 99.0256 578.143 98.9371C577.821 98.8486 577.486 98.8264 577.156 98.8718C576.826 98.9172 576.509 99.0293 576.223 99.2013C575.938 99.3733 575.69 99.6016 575.496 99.8723L567.27 111.26C566.9 111.776 566.746 112.417 566.84 113.045C566.933 113.673 567.267 114.24 567.771 114.626Z\",\n    fill: \"white\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path71 || (_path71 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M571.45 112.918L583.521 121.409L590.661 112.885L578.572 102.786L571.45 112.918Z\",\n    fill: \"#FF6D66\"\n  })), _path72 || (_path72 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M588.069 124.725L600.174 134.337L606.662 126.349L594.473 116.452L588.069 124.725Z\",\n    fill: \"#FAD8B0\"\n  })), _path73 || (_path73 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M604.237 138.021L616.326 146.512L622.077 139.11L610.641 129.514L604.237 138.021Z\",\n    fill: \"#A0C6F4\"\n  })), _path74 || (_path74 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M667.171 61.2378L678.523 156.694C678.575 157.196 678.727 157.683 678.97 158.126C679.213 158.568 679.542 158.957 679.938 159.27C680.335 159.582 680.789 159.812 681.276 159.945C681.762 160.077 682.271 160.111 682.77 160.043L701.998 157.397C702.963 157.268 703.839 156.767 704.441 156.001C705.044 155.235 705.325 154.264 705.225 153.294L695.912 57.2689C695.861 56.7616 695.708 56.27 695.461 55.8237C695.215 55.3775 694.881 54.986 694.479 54.6728C694.078 54.3597 693.617 54.1315 693.124 54.002C692.632 53.8725 692.118 53.8445 691.615 53.9196L670.364 57.0344C669.388 57.1759 668.506 57.6957 667.909 58.4819C667.312 59.2681 667.046 60.2578 667.171 61.2378Z\",\n    fill: \"white\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path75 || (_path75 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M672.972 63.4652L676.567 85.8053L693.521 84.5493L691.665 60.4843L672.972 63.4652Z\",\n    fill: \"#FF6D66\"\n  })), _path76 || (_path76 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M677.788 94.3459L680.179 117.908L695.862 116.502L693.688 92.554L677.788 94.3459Z\",\n    fill: \"#91BA83\"\n  })), _path77 || (_path77 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M680.48 126.332L684.074 148.672L698.336 147.098L696.614 124.272L680.48 126.332Z\",\n    fill: \"#FAD8B0\"\n  })), _path78 || (_path78 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M642.392 81.5684L673.825 174.127C673.953 174.504 674.154 174.852 674.417 175.15C674.681 175.449 675.001 175.692 675.359 175.865C675.717 176.038 676.105 176.137 676.502 176.158C676.899 176.179 677.296 176.121 677.671 175.986L697.367 168.886C698.094 168.62 698.691 168.083 699.033 167.388C699.376 166.692 699.438 165.891 699.206 165.151L669.695 71.6879C669.571 71.2998 669.37 70.9409 669.104 70.6328C668.838 70.3248 668.512 70.0739 668.147 69.8955C667.781 69.717 667.383 69.6147 666.977 69.5947C666.57 69.5746 666.164 69.6372 665.783 69.7788L644.181 77.8004C643.447 78.0655 642.847 78.6102 642.512 79.3158C642.177 80.0214 642.134 80.831 642.392 81.5684Z\",\n    fill: \"white\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path79 || (_path79 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M648.762 83.2597L656.921 104.377L673.24 99.6045L666.435 76.4438L648.762 83.2597Z\",\n    fill: \"#A0C6F4\"\n  })), _path80 || (_path80 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M659.897 112.466L667.12 135.024L682.168 130.368L675.079 107.392L659.897 112.466Z\",\n    fill: \"#F9865F\"\n  })), _path81 || (_path81 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M669.16 143.196L677.319 164.297L690.946 159.775L684.526 137.804L669.16 143.196Z\",\n    fill: \"#FAD8B0\"\n  })), _path82 || (_path82 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M405.472 198.477H246.718C241.657 198.477 237.555 202.586 237.555 207.654V229.174C237.555 234.242 241.657 238.351 246.718 238.351H405.472C410.532 238.351 414.635 234.242 414.635 229.174V207.654C414.635 202.586 410.532 198.477 405.472 198.477Z\",\n    fill: \"#7595EC\"\n  })), _path83 || (_path83 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M345.983 210.216H259.441C257.77 210.216 256.415 211.573 256.415 213.247C256.415 214.922 257.77 216.279 259.441 216.279H345.983C347.654 216.279 349.009 214.922 349.009 213.247C349.009 211.573 347.654 210.216 345.983 210.216Z\",\n    fill: \"white\"\n  })), _path84 || (_path84 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M257.284 224.149H404.402\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path85 || (_path85 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M182.008 123.451L184.511 126.196C185.02 126.753 185.286 127.49 185.252 128.245C185.218 128.999 184.886 129.709 184.33 130.218L180.231 133.968C179.675 134.477 178.939 134.744 178.186 134.71C177.433 134.676 176.724 134.343 176.215 133.786L173.712 131.041L182.008 123.451Z\",\n    fill: \"#91BA83\"\n  })), _path86 || (_path86 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M159.465 118.115L171.272 131.061C171.882 131.73 172.918 131.777 173.587 131.166L181.746 123.7C182.415 123.089 182.462 122.051 181.851 121.382L170.045 108.436C169.435 107.767 168.398 107.72 167.73 108.331L159.57 115.797C158.902 116.408 158.855 117.446 159.465 118.115Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path87 || (_path87 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M147.134 176.941H132.304V190.505H147.134V176.941Z\",\n    fill: \"#FF6D66\"\n  })), _path88 || (_path88 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M132.304 168.215V176.94H123.442\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path89 || (_path89 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M635.771 23.7589H620.94V37.3237H635.771V23.7589Z\",\n    fill: \"#FAD8B0\"\n  })), _path90 || (_path90 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M620.94 15.0339V23.759H612.079\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path91 || (_path91 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M219.531 107.609C65.7089 43.7709 -52.6006 166.725 237.237 354.991C260.06 369.829 295.071 375.087 295.071 375.087\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path92 || (_path92 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M78.0982 116.284C80.5176 116.284 82.4788 114.32 82.4788 111.897C82.4788 109.474 80.5176 107.509 78.0982 107.509C75.6789 107.509 73.7177 109.474 73.7177 111.897C73.7177 114.32 75.6789 116.284 78.0982 116.284Z\",\n    fill: \"white\"\n  })), _path93 || (_path93 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.2096 87.7981L55.0082 83.176L66.0265 89.5063L71.5775 106.638L54.6403 99.5375L50.2096 87.7981Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path94 || (_path94 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.0082 83.176L50.2096 87.798L47.5177 84.5324L52.1156 80.1113L55.0082 83.176Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path95 || (_path95 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.5776 106.638L60.5592 94.5303\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path96 || (_path96 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M98.1954 414.074L110.133 475.768C110.197 476.089 110.324 476.394 110.505 476.665C110.687 476.936 110.921 477.169 111.193 477.349C111.465 477.53 111.77 477.655 112.09 477.717C112.41 477.779 112.74 477.777 113.059 477.711L125.465 475.065C126.087 474.932 126.632 474.562 126.988 474.035C127.343 473.507 127.481 472.862 127.371 472.235L116.771 410.155C116.714 409.827 116.59 409.514 116.408 409.235C116.227 408.956 115.99 408.717 115.714 408.532C115.437 408.348 115.126 408.221 114.799 408.16C114.472 408.1 114.136 408.106 113.812 408.179L100.118 411.227C99.8051 411.287 99.507 411.408 99.2409 411.584C98.9748 411.76 98.7459 411.986 98.5674 412.251C98.3888 412.515 98.264 412.812 98.2002 413.125C98.1364 413.438 98.1347 413.76 98.1954 414.074Z\",\n    fill: \"white\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path97 || (_path97 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M102.125 415.246L105.535 429.631L116.504 428.007L114.163 412.416L102.125 415.246Z\",\n    fill: \"#FF6D66\"\n  })), _path98 || (_path98 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M106.739 435.141L109.414 450.364L119.563 448.706L117.005 433.198L106.739 435.141Z\",\n    fill: \"#FAD8B0\"\n  })), _path99 || (_path99 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M110.016 455.84L113.41 470.225L122.623 468.501L120.433 453.73L110.016 455.84Z\",\n    fill: \"#A0C6F4\"\n  })), _path100 || (_path100 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M440.467 568.662L490.961 555.131L492.9 560.607L441.821 573.887L440.467 568.662Z\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path101 || (_path101 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M433.444 561.595L434.916 566.184\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path102 || (_path102 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M432.023 564.592L436.287 563.119\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path103 || (_path103 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M431.003 579.129L433.745 587.804\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path104 || (_path104 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M428.663 584.622L436.253 582.21\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path105 || (_path105 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M419.45 564.827L423.045 576.315\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path106 || (_path106 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M415.889 571.978L426.522 568.578\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path107 || (_path107 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.1794 19.1032L40.2278 4.65078L41.5487 1L73.7009 15.8208L72.1794 19.1032Z\",\n    stroke: \"white\",\n    strokeWidth: 0.67,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path108 || (_path108 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.8315 25.7684L74.0186 22.754\",\n    stroke: \"white\",\n    strokeWidth: 0.67,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path109 || (_path109 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M74.8378 24.8139L71.9955 23.7589\",\n    stroke: \"white\",\n    strokeWidth: 0.67,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path110 || (_path110 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M81.5258 17.6964L83.7829 12.0361\",\n    stroke: \"white\",\n    strokeWidth: 0.67,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path111 || (_path111 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M85.0704 15.8377L80.1213 13.8616\",\n    stroke: \"white\",\n    strokeWidth: 0.67,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path112 || (_path112 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M81.4589 30.0389L84.4685 22.5532\",\n    stroke: \"white\",\n    strokeWidth: 0.67,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path113 || (_path113 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M86.3411 27.8449L79.3856 25.0817\",\n    stroke: \"white\",\n    strokeWidth: 0.67,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path114 || (_path114 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M191.643 289.478C169.104 273.234 146.967 247.98 156.681 222.039C156.681 222.039 172.214 211.673 196.809 224.635L221.421 237.664L191.643 289.478Z\",\n    fill: \"url(#paint0_linear_16_174)\"\n  })), _path115 || (_path115 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M181.427 397.712C171.278 392.906 128.007 370.331 120.299 331.764C113.611 298.471 139.092 253.54 151.833 233.678C151.013 260.021 177.431 282.328 190.171 291.505C201.012 299.489 212.974 305.821 225.667 310.295L181.427 397.712Z\",\n    fill: \"white\"\n  })), _path116 || (_path116 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M149.893 241.516C152.652 259.033 165.994 277.17 188.7 293.548C198.945 301.121 210.202 307.215 222.139 311.651L180.34 394.38C167.566 388.016 129.829 366.48 122.79 331.278C116.955 302.022 136.751 263.22 149.927 241.516H149.893ZM156.715 222.04C156.715 222.04 108.813 286.883 117.875 332.266C126.937 377.65 182.614 400.928 182.614 400.928L229.212 308.821C214.649 303.479 205.186 299.125 191.676 289.378C169.138 273.134 147.001 247.88 156.715 221.939V222.04Z\",\n    fill: \"url(#paint1_linear_16_174)\"\n  })), _path117 || (_path117 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M144.091 259.719C145.496 268.154 148.824 276.151 153.818 283.087C158.811 290.024 165.336 295.712 172.883 299.71\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path118 || (_path118 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M186.794 309.022L212.793 322.972\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path119 || (_path119 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M147.803 296.93C147.803 296.93 156.163 315.536 183.082 327.627\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path120 || (_path120 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M126.435 299.711C126.435 299.711 127.372 319.254 140.363 325.769\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path121 || (_path121 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M156.163 231.82C156.163 231.82 153.755 256.94 191.642 289.479\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path122 || (_path122 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M170.091 236.475C170.091 236.475 182.162 235.537 199.802 248.566\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path123 || (_path123 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M113.243 316.558C112.474 329.001 114.029 374.099 179.236 402.87\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path124 || (_path124 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M529.684 291.471L502.029 346.987C502.029 346.987 520.789 353.903 506.125 375.456C506.125 375.456 540.802 389.858 563.491 352.463C586.18 315.067 529.684 291.471 529.684 291.471Z\",\n    fill: \"url(#paint2_linear_16_174)\"\n  })), _path125 || (_path125 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M466.382 461.148C452.388 461.148 437.624 455.421 422.459 444.117L474.191 358.24L504.972 377.649L505.172 377.733C510.552 379.711 516.245 380.698 521.976 380.647C531.697 380.707 541.191 377.701 549.112 372.056L511.292 436.949C511.208 437.067 494.923 461.199 466.382 461.199V461.148Z\",\n    fill: \"white\"\n  })), _path126 || (_path126 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M475.027 361.757L503.45 379.693L503.818 379.927L504.203 380.078C509.89 382.184 515.912 383.239 521.976 383.193C528.943 383.219 535.838 381.77 542.207 378.939L509.202 435.493C508.132 437.067 492.816 458.637 466.399 458.637C453.508 458.637 439.865 453.529 425.787 443.447L475.027 361.757ZM563.491 352.446C550.667 373.58 534.031 378.169 521.976 378.169C516.572 378.214 511.204 377.289 506.125 375.439L473.371 354.79L419.216 444.754C437.307 458.72 453.14 463.744 466.399 463.744C496.679 463.744 513.465 438.256 513.465 438.256L563.491 352.53V352.446Z\",\n    fill: \"url(#paint3_linear_16_174)\"\n  })), _path127 || (_path127 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M502.029 346.986C502.029 346.986 522.661 354.288 506.125 375.456\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path128 || (_path128 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M472.719 352.848C472.719 352.848 500.825 378.637 516.375 378.453C531.924 378.269 550.182 374.585 560.933 355.996\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path129 || (_path129 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M476.18 386.207C476.18 386.207 495.458 403.355 517.027 397.846\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path130 || (_path130 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M496.428 411.83C496.428 411.83 506.543 419.416 520.688 412.231\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path131 || (_path131 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M449.88 422.414C449.88 422.414 473.288 445.675 509.988 430.335\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path132 || (_path132 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M462.587 399.722C462.587 399.722 472.117 406.554 478.086 408.732\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path133 || (_path133 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M534.432 307.581C534.432 307.581 555.75 314.565 558.308 342.749\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path134 || (_path134 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M545.149 342.398C545.149 342.398 554.964 357.62 538.378 372.826\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path135 || (_path135 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M421.122 440.567C421.122 440.567 474.625 507.687 513.499 429.196\",\n    stroke: \"white\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path136 || (_path136 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.7438 274.138H47.2168\",\n    stroke: \"#FF6D66\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path137 || (_path137 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M729.87 123.803H742.343\",\n    stroke: \"#FF6D66\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path138 || (_path138 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M395.223 38.0605H407.713\",\n    stroke: \"#FAD8B0\",\n    strokeMiterlimit: 10\n  })), _path139 || (_path139 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M753.696 188.63L765.968 190.84\",\n    stroke: \"#FAD8B0\",\n    strokeMiterlimit: 10\n  })), _path140 || (_path140 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.504 500.503H275.994\",\n    stroke: \"#A0C6F4\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path141 || (_path141 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M780.581 348.829C782.862 348.829 784.711 346.977 784.711 344.692C784.711 342.408 782.862 340.556 780.581 340.556C778.3 340.556 776.451 342.408 776.451 344.692C776.451 346.977 778.3 348.829 780.581 348.829Z\",\n    fill: \"#91BA83\"\n  })), _path142 || (_path142 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.12979 150.18C6.41061 150.18 8.25959 148.328 8.25959 146.043C8.25959 143.759 6.41061 141.907 4.12979 141.907C1.84897 141.907 0 143.759 0 146.043C0 148.328 1.84897 150.18 4.12979 150.18Z\",\n    fill: \"#91BA83\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_16_174\",\n    x1: 150.244,\n    y1: 250.024,\n    x2: 229.354,\n    y2: 250.297,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#AA367C\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#4A2FBD\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint1_linear_16_174\",\n    x1: 109.878,\n    y1: 301.97,\n    x2: 242.514,\n    y2: 302.276,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#AA367C\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#4A2FBD\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint2_linear_16_174\",\n    x1: 497.955,\n    y1: 330.243,\n    x2: 576.769,\n    y2: 330.466,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#AA367C\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#4A2FBD\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint3_linear_16_174\",\n    x1: 410.422,\n    y1: 402.211,\n    x2: 580.551,\n    y2: 403.021,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#AA367C\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#4A2FBD\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgContactImg);\nexport default __webpack_public_path__ + \"static/media/contact-img.62aa99e0f3b968b5d1ce9eb047f34fc7.svg\";\nexport { ForwardRef as ReactComponent };","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.11.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { useState,useRef } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport contactImg from \"../assets/img/contact-img.svg\";\nimport emailjs from '@emailjs/browser';\n\n\nexport const Contact = () => {\n  const formInitialDetails = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    message: ''\n  }\n  const [formDetails, setFormDetails] = useState(formInitialDetails);\n  const [buttonText, setButtonText] = useState('Enviar');\n  const [status, setStatus] = useState({});\n\n  const onFormUpdate = (category, value) => {\n      setFormDetails({\n        ...formDetails,\n        [category]: value\n      })\n   \n  }\n  const refForm= useRef();\n\n  const handleSubmit = async (e) => {\n\n    e.preventDefault();\n    setButtonText(\"Enviando...\");\n    const service_id= \"contact-portfolio-detail\";\n    const template_id= \"template_wwjqr1a\";\n    const apikey=  \"DuA5ZaY3PnirfeV5s\";\n    \n    \n    emailjs.sendForm(service_id,template_id,refForm.current,apikey)\n    .then(result =>   setStatus({ succes: true, message: 'Message sent successfully'}))\n    .catch(error=> setStatus({ succes: false, message: 'Something went wrong, please try again later.'}))\n     \n    \n    \n    setButtonText(\"Enviar\");\n    \n    setFormDetails(formInitialDetails);\n\n    \n   \n  };\n\n  return (\n    <section className=\"contact\" id=\"connect\">\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col size={12} md={6}>\n        \n                <img  src={contactImg} alt=\"Contact Us\"/>\n              \n          \n          </Col>\n          <Col size={12} md={6}>\n            \n                <div>\n                <h2>Pongamonos en contacto</h2>\n                <form  ref={refForm}onSubmit={handleSubmit}>\n                  <Row>\n                    <Col size={12} sm={6} className=\"px-1\">\n                      <input type=\"text\" name=\"first_name\"value={formDetails.firstName} placeholder=\"Nombre\" onChange={(e) => onFormUpdate('firstName', e.target.value)} />\n                    </Col>\n                    <Col size={12} sm={6} className=\"px-1\">\n                      <input type=\"text\"  name=\"last_name\"value={formDetails.lasttName} placeholder=\"Apellido\" onChange={(e) => onFormUpdate('lastName', e.target.value)}/>\n                    </Col>\n                    <Col size={12} sm={6} className=\"px-1\">\n                      <input type=\"email\" name=\"email\" value={formDetails.email} placeholder=\"Email\" onChange={(e) => onFormUpdate('email', e.target.value)} />\n                    </Col>\n                    <Col size={12} sm={6} className=\"px-1\">\n                      <input type=\"tel\" name=\"phone\" value={formDetails.phone} placeholder=\"Telefono\" onChange={(e) => onFormUpdate('phone', e.target.value)}/>\n                    </Col>\n                    <Col size={12} className=\"px-1\">\n                      <textarea rows=\"6\" name=\"messaje\" value={formDetails.message} placeholder=\"Mensaje\" onChange={(e) => onFormUpdate('message', e.target.value)}></textarea>\n                      <button type=\"submit\"><span>{buttonText}</span></button>\n                    </Col>\n                    {\n                      status.message &&\n                      <Col>\n                        <p className={status.success === false ? \"danger\" : \"success\"}>{status.message}</p>\n                      </Col>\n                    }\n                  </Row>\n                </form>\n              </div>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}","import { Container, Row, Col } from \"react-bootstrap\";\nimport logo from \"../assets/img/logo.svg\";\nimport navIcon1 from \"../assets/img/nav-icon1.svg\";\nimport navIcon2 from \"../assets/img/nav-icon2.svg\";\nimport navIcon3 from \"../assets/img/nav-icon3.svg\";\n\nexport const Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <Container>\n        <Row className=\"align-items-center\">\n     \n          <Col size={12} sm={6}>\n            <h1>JBS</h1>\n          </Col>\n          <Col size={12} sm={6} className=\"text-center text-sm-end\">\n            <div className=\"social-icon\">\n              <a href=\"#\"><img src={navIcon1} alt=\"Icon\" /></a>\n             \n            </div>\n            <p>Copyright 2023. Todos los derechos reservados</p>\n          </Col>\n        </Row>\n      </Container>\n    </footer>\n  )\n}","import logo from './logo.svg';\nimport './App.css';\nimport  {NavBar} from './components/NavBar';\nimport  {Banner} from './components/Banner';\nimport  { Skills } from \"./components/Skills\";\nimport {Projects} from \"./components/Projects\";\nimport {Contact} from \"./components/Contact.js\";\nimport { Footer } from \"./components/Footer\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Banner />\n      <Skills />\n      <Projects />\n      <Contact />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","FUNC_ERROR_TEXT","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","freeGlobal","global","freeSelf","self","root","Function","objectToString","nativeMax","Math","max","nativeMin","min","now","Date","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","thisArg","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","remainingWait","debounced","isInvoking","this","leadingEdge","toNumber","isObject","cancel","clearTimeout","flush","value","type","isObjectLike","isSymbol","other","valueOf","isBinary","test","slice","defineProperty","_len","validators","_key","_createChainableTypeChecker2","_len2","_key2","forEach","validator","obj","_createChainableTypeChecker","require","__esModule","validate","checkType","isRequired","props","propName","componentName","location","propFullName","componentNameSafe","propFullNameSafe","concat","chainedCheckType","bind","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","secret","err","getShim","ReactPropTypes","array","bigint","bool","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","aa","ca","p","encodeURIComponent","da","Set","ea","fa","ha","add","ia","window","document","createElement","ja","ka","la","ma","v","g","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","sanitizeURL","removeEmptyString","z","split","toLowerCase","ra","sa","toUpperCase","ta","pa","isNaN","qa","oa","removeAttribute","setAttribute","setAttributeNS","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","A","assign","Ma","stack","trim","match","Na","Oa","prepareStackTrace","set","Reflect","construct","l","h","k","displayName","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","constructor","get","configurable","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","fb","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","style","indexOf","setProperty","keys","charAt","substring","tb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","ub","vb","is","wb","xb","target","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","addEventListener","removeEventListener","Nb","m","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","B","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","C","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Map","Pc","Qc","Rc","Sc","delete","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","shift","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","fd","gd","hd","id","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","String","fromCharCode","code","repeat","locale","which","Rd","Td","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","password","range","search","tel","text","url","week","me","ne","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","offset","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","href","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","start","end","selectionStart","selectionEnd","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","animation","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","nf","Ub","instance","listener","D","of","has","pf","qf","rf","random","sf","capture","passive","n","t","J","x","u","w","F","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","Gf","Hf","Promise","Jf","queueMicrotask","resolve","then","catch","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","E","G","Vf","H","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","I","zg","Ag","Bg","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","defaultProps","Mg","Ng","Og","Pg","Qg","Rg","_currentValue","Sg","childLanes","Tg","dependencies","firstContext","lanes","Ug","Vg","context","memoizedValue","next","Wg","Xg","Yg","interleaved","Zg","$g","ah","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","bh","ch","eventTime","lane","payload","callback","dh","K","eh","fh","gh","q","r","y","hh","ih","jh","Component","refs","kh","nh","isMounted","_reactInternals","enqueueSetState","L","lh","mh","enqueueReplaceState","enqueueForceUpdate","oh","shouldComponentUpdate","isPureReactComponent","ph","contextType","state","updater","qh","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","rh","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","sh","ref","_owner","_stringRef","th","uh","vh","index","wh","xh","yh","implementation","zh","Ah","done","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","tagName","Jh","Kh","Lh","M","Mh","revealOrder","Nh","Oh","_workInProgressVersionPrimary","Ph","ReactCurrentDispatcher","Qh","Rh","N","O","P","Sh","Th","Uh","Vh","Q","Wh","Xh","Yh","Zh","$h","ai","bi","ci","baseQueue","queue","di","ei","fi","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","gi","hi","ii","ji","ki","getSnapshot","li","mi","R","ni","lastEffect","stores","oi","pi","qi","ri","create","destroy","deps","si","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","Ci","Di","Ei","Fi","Gi","Hi","Ii","Ji","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ki","message","digest","Li","Mi","console","Ni","WeakMap","Oi","Pi","Qi","Ri","getDerivedStateFromError","componentDidCatch","Si","componentStack","Ti","pingCache","Ui","Vi","Wi","Xi","ReactCurrentOwner","Yi","Zi","$i","aj","bj","compare","cj","dj","ej","baseLanes","cachePool","transitions","fj","gj","hj","ij","jj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","kj","lj","pendingContext","mj","Aj","Bj","Cj","Dj","nj","oj","pj","fallback","qj","rj","tj","dataset","dgst","uj","vj","_reactRetry","sj","subtreeFlags","wj","xj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","yj","Ej","S","Fj","Gj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","size","createElementNS","autoFocus","createTextNode","T","Hj","Ij","Jj","Kj","U","Lj","WeakSet","V","Mj","W","Nj","Oj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","insertBefore","_reactRootContainer","Xj","X","Yj","Zj","ak","onCommitFiberUnmount","componentWillUnmount","bk","ck","dk","ek","fk","isHidden","gk","hk","display","ik","jk","kk","lk","__reactInternalSnapshotBeforeUpdate","src","Wk","mk","ceil","nk","ok","pk","Y","Z","qk","rk","sk","tk","uk","Infinity","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","Pk","finishedWork","finishedLanes","Qk","timeoutHandle","Rk","Sk","Tk","Uk","Vk","mutableReadLanes","Bc","Pj","onCommitFiberRoot","mc","onRecoverableError","Xk","onPostCommitFiberRoot","Yk","Zk","al","isReactComponent","pendingChildren","bl","mutableSourceEagerHydrationData","cl","cache","pendingSuspenseBoundaries","el","fl","gl","hl","il","jl","zj","$k","ll","reportError","ml","_internalRoot","nl","ol","pl","ql","sl","rl","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","tl","usingClientEntryPoint","Events","ul","findFiberByHostInstance","bundleType","version","rendererPackageName","vl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","wl","isDisabled","supportsFiber","inject","createPortal","dl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","React","LeftArrow","_a","customLeftArrow","getState","previous","rtl","cloneElement","carouselState","rtlClassName","className","RightArrow","customRightArrow","__extends","extendStatics","setPrototypeOf","__proto__","__","utils_1","types_1","Dots_1","Arrows_1","CarouselItems_1","common_1","defaultTransitionDuration","defaultTransition","Carousel","_super","_this","containerRef","createRef","listRef","itemWidth","slidesToShow","currentSlide","totalItems","Children","count","deviceType","domLoaded","transform","containerWidth","onResize","handleDown","handleMove","handleOut","onKeyUp","handleEnter","setIsInThrottle","throttle","transitionDuration","goToSlide","onMove","initialX","lastX","isAnimationAllowed","direction","initialY","isInThrottle","transformPlaceHolder","resetTotalItems","notEnoughChildren","setState","setContainerAndItemWidth","setTransformDirectly","position","withAnimation","additionalTransfrom","currentTransform","getTransform","setAnimationDirectly","animationAllowed","customTransition","setItemsToShow","keyBoardControl","autoPlay","setInterval","autoPlaySpeed","setClones","forResizing","resetCurrentSlide","childrenArr","toArray","initialSlide","getInitialSlideInInfiniteMode","clones","getClones","correctItemsPosition","shouldCorrectItemPosition","responsive","item","breakpoint","items","widths","innerWidth","screen","screenWidth","offsetWidth","itemWidth_1","getItemClientSideWidth","infinite","setToDomDirectly","nextTransform","_b","itemsToShowTimeout","clearInterval","clonesTimeout","correctClonesPosition","rewind","isInRightEnd","rewindBuffer","isInThrottleTimeout","resetAutoplayInterval","rewindWithAnimation","checkClonesPosition","isReachingTheEnd","isReachingTheStart","nextSlide","nextPosition","transformTimeout","slidesHavePassed","afterChange","beforeChange","populateNextSlides","nextSlides","previousSlide","shouldResetAutoplay","afterChangeTimeout","populatePreviousSlides","afterChangeTimeout2","afterChangeTimeout3","resetMoveStatus","getCords","parsePosition","isMouseMoveEvent","swipeable","draggable","diffX","diffY","abs","populateSlidesOnMouseTouchMove","canContinue","shouldDisableOnMobile","shouldDisableOnDesktop","minimumTouchDrag","round","isInViewport","getBoundingClientRect","_c","_d","bottom","_e","right","innerHeight","clientHeight","clientWidth","isChildOfCarousel","Element","HTMLInputElement","pauseOnHover","slide","skipCallbacks","skipBeforeChange","skipAfterChange","renderLeftArrow","disbaled","renderRightArrow","renderButtonGroups","customButtonGroup","slideIndex","renderDotsList","renderCarouselItems","arrows","renderArrowsWhenDisabled","removeArrowOnDeviceType","containerClass","sliderClass","renderDotsOutside","renderButtonGroupOutside","getInitialState","shouldRenderOnSSR","shouldRenderAtAll","isLeftEndReach","isInLeftEnd","isRightEndReach","shouldShowArrows","disableLeftArrow","disableRightArrow","Fragment","dir","onMouseMove","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","slidesToSlide","itemClass","showDots","dotListClass","focusOnSelect","centerMode","itemAriaLabel","partialVisbile","partialVisible","flexBisis","domFullyLoaded","partialVisibilityGutter","warn","map","getIfSlideIsVisbile","ariaLabel","clones_1","dots_1","customDot","numberOfDotsToShow","getSlidesToSlide","nextSlidesTable","getLookupTableForNextSlides","lookupTable","getOriginalIndexLookupTableByClones","currentSlides","fill","_","isActive","cloneIndex","maximumNextSlide","possibileNextSlides","active","getOriginalCounterPart","table","firstBeginningOfClones","firstEndOfClones","firstCount","secondBeginningOfClones","secondEndOfClones","secondCount","originalEnd","originalCounter","totalSlides","originalFirstSlide","elementWidth_1","getTransformForCenterMode","getTransformForPartialVsibile","shouldRemoveRightGutter","baseTransform","ssr","Boolean","getWidthFromDeviceType","getPartialVisibilityGutter","slidesToScroll","device","serverSideDeviceType","clientSideDeviceType","gutter","paritialVisibilityGutter","toFixed","throttle_1","throwError_1","throwError","next_1","previous_1","mouseOrTouchMove_1","slidesHavePassedRight","slidesHavePassedLeft","isMovingLeft","translateXLimit","nextTranslate","isLastSlide","nextMaximumSlides","common_2","additionalSlides","limit","inThrottle","_react","newObj","desc","_interopRequireWildcard","_propTypes","_interopRequireDefault","_lodash","_shallowequal","_extends","TrackVisibility","_PureComponent","subClass","superClass","isVisible","_ref","windowWidth","windowHeight","_this$props","partialVisibility","topThreshold","leftThreshold","widthCheck","heightCheck","isComponentVisible","nodeRef","html","once","boundingClientRect","removeListener","setNodeRef","ownProps","propTypes","throttleCb","throttleInterval","_proto","attachListener","prevProps","getChildProps","_this2","childProps","getChildren","_this3","_this$props2","Tag","PureComponent","component","currentProp","Number","isInteger","_default","__self","__source","jsx","jsxs","forceUpdate","escape","_status","_result","only","Profiler","StrictMode","Suspense","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","navigator","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","objA","objB","compareContext","ret","keysA","keysB","bHasOwnProperty","idx","valueA","valueB","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","leafPrototypes","getProto","getPrototypeOf","ns","def","getOwnPropertyNames","definition","o","chunkId","all","reduce","promises","miniCssF","globalThis","prop","inProgress","dataWebpackPrefix","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","onScriptComplete","prev","onerror","onload","doneFns","fn","head","toStringTag","installedChunks","j","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","some","chunkLoadingGlobal","makeEventKey","eventKey","excluded","sourceKeys","defaultKey","substr","_toPropertyKey","hint","prim","toPrimitive","res","_toPrimitive","useUncontrolled","config","fieldName","_extends2","Utils","propsValue","rest","_objectWithoutPropertiesLoose","handlerName","_useUncontrolledProp","propValue","handler","wasPropRef","_useState","stateValue","isProp","wasProp","useUncontrolledProp","nextProps","prevState","nextState","__reactInternalSnapshotFlag","__reactInternalSnapshot","__suppressDeprecationWarning","DEFAULT_BREAKPOINTS","DEFAULT_MIN_BREAKPOINT","ThemeContext","prefixes","breakpoints","minBreakpoint","useBootstrapPrefix","prefix","defaultPrefix","useBootstrapBreakpoints","useBootstrapMinBreakpoint","NavbarBrand","bsPrefix","as","_jsx","getComputedStyle","psuedoElement","doc","ownerWindow","rUpper","msPattern","hyphenateStyleName","hyphenate","supportedTransforms","property","css","transforms","getPropertyValue","isTransform","removeProperty","cssText","_setPrototypeOf","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","_React$Component","initialStatus","appear","isMounting","enter","appearStatus","in","unmountOnExit","mountOnEnter","status","nextCallback","updateStatus","nextStatus","cancelNextCallback","getTimeouts","exit","mounting","ReactDOM","forceReflow","performEnter","performExit","appearing","_ref2","maybeNode","maybeAppearing","timeouts","enterTimeout","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","onExit","onExiting","onExited","setNextCallback","_this4","doesNotHaveTimeoutOrListener","addEndListener","_ref3","maybeNextCallback","TransitionGroupContext","noop","optionsSupported","onceSupported","canUseDOM","eventName","wrappedHandler","__once","onceHandler","emulateTransitionEnd","duration","padding","called","handle","createEvent","initEvent","triggerEvent","remove","listen","transitionEnd","str","mult","parseFloat","parseDuration","removeEmulate","transitionEndListener","funcs","filter","acc","triggerBrowserReflow","offsetHeight","toFnRef","refA","refB","mergeRefs","childRef","mergedRef","useMergedRefs","attachRef","componentOrElement","normalize","handleEntering","handleEntered","handleExit","handleExiting","handleExited","handleAddEndListener","innerProps","MARGINS","getDefaultDimensionValue","dimension","elem","margins","collapseStyles","Collapse","inProp","getDimensionValue","computedDimension","createChainedFunction","scroll","TransitionWrapper","role","NavbarCollapse","NavbarContext","expanded","useEventCallback","useCommittedRef","NavbarToggle","label","onToggle","handleClick","isReactNative","product","matchersByWindow","getMatcher","query","targetWindow","matchers","mql","matchMedia","refCount","media","useMediaQuery","matches","setMatches","handleChange","addListener","breakpointValues","names","and","getMaxQuery","getNext","breakpointOrMap","breakpointMap","entries","getMinQuery","createBreakpointHook","xs","sm","xl","xxl","useWillUnmount","onUnmount","valueRef","useUpdatedRef","ATTRIBUTE_PREFIX","dataAttr","OPEN_DATA_ATTRIBUTE","handleContainerOverflow","isRTL","modals","getScrollbarWidth","getBodyScrollbarWidth","getElement","setModalAttributes","_modal","removeModalAttributes","setContainerStyle","containerState","paddingProp","container","scrollBarWidth","reset","removeContainerStyle","modal","modalIdx","isTopModal","Context","useWindow","resolveContainerRef","hasEnteredRef","combinedRef","ImperativeTransition","exited","setExited","onTransition","isInitialRef","handleTransition","useIsomorphicEffect","stale","initial","isStale","onFinish","renderTransition","runTransition","NoopTransition","_excluded","manager","useModalManager","provided","modalManager","ModalManager","getManager","dialog","backdrop","setDialogRef","setBackdropRef","Modal","show","keyboard","onBackdropClick","onEscapeKeyDown","backdropTransition","runBackdropTransition","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","providedManager","onShow","onHide","onResolved","resolvedRef","setRef","earlyRef","nextRef","useWaitForDOMRef","mounted","useMounted","prevShow","usePrevious","lastFocusRef","handleShow","removeKeydownListenerRef","handleDocumentKeyDown","removeFocusListenerRef","handleEnforceFocus","_modal$dialog$ownerDo","_modal$dialog","currentActiveElement","handleHide","_lastFocusRef$current","handleBackdropClick","isEscKey","dialogProps","tabIndex","backdropElement","_Fragment","_jsxs","Manager","fadeStyles","Fade","transitionClasses","isAppearing","OffcanvasBody","transitionStyles","OffcanvasToggling","variant","CloseButton","AbstractModalHeader","closeLabel","closeVariant","closeButton","ModalContext","OffcanvasHeader","DivStyledAsH5","OffcanvasTitle","qsa","selector","replaceClassName","origClass","classToRemove","RegExp","Selector","BootstrapModalManager","adjustAndStore","adjust","actual","restore","super","classList","baseVal","hasClass","addClass","marginProp","removeClass","sharedManager","DialogTransition","BackdropTransition","Offcanvas","ariaLabelledby","placement","backdropClassName","propsManager","renderStaticNode","showOffcanvas","setShowOffcanvas","hideResponsiveOffcanvas","useBreakpoint","modalContext","backdropProps","BaseModal","visibility","getSharedManager","Body","Header","Title","NavbarOffcanvas","NavbarText","Navbar","initialBsPrefix","expand","fixed","sticky","onSelect","collapseOnSelect","controlledProps","handleCollapse","expandClass","navbarContext","SelectableContext","Brand","Text","Toggle","Container","fluid","suffix","NavContext","useButtonProps","rel","isTrivialHref","onKeyDown","Button","asProp","buttonProps","useNavItem","parentOnSelect","navContext","tabContext","TabContext","contextControllerId","getControllerId","contextControlledId","getControlledId","activeKey","NavItem","EVENT_KEY_ATTR","Nav","useForceUpdate","needsRefocusRef","listNode","getNextActiveTab","currentListNode","activeChild","querySelector","nextIndex","handleSelect","nextActiveChild","Item","Anchor","handleKeyDown","NavLink","navItemProps","uncontrolledProps","justify","navbar","navbarScroll","navbarBsPrefix","cardHeaderBsPrefix","isNavbar","cardHeaderContext","CardHeaderContext","BaseNav","Link","Action","PopStateEventType","invariant","warning","cond","getHistoryState","usr","createLocation","to","pathname","hash","parsePath","createPath","path","parsedPath","hashIndex","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","v5Compat","globalHistory","history","Pop","getIndex","handlePop","delta","createURL","origin","URL","replaceState","encodeLocation","Push","historyState","pushState","DOMException","Replace","go","ResultType","matchPath","pattern","caseSensitive","matcher","compiledParams","endsWith","params","regexpSource","paramName","isOptional","compilePath","matchedPathname","pathnameBase","captureGroups","splatValue","decodeURIComponent","safelyDecodeURIComponent","stripBasename","basename","startsWith","startIndex","nextChar","getInvalidPathError","field","dest","getPathContributingMatches","route","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","fromSegments","toSegments","routePathnameIndex","fromPathname","relativePath","segments","segment","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","joinPaths","paths","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","useInRouterContext","useLocation","UNSAFE_invariant","useIsomorphicLayoutEffect","static","useNavigate","router","useDataRouterContext","DataRouterHook","UseNavigateStable","useCurrentRouteId","DataRouterStateHook","activeRef","navigate","fromRouteId","useNavigateStable","dataRouterContext","future","routePathnamesJson","UNSAFE_getResolveToMatches","parse","relative","useNavigateUnstable","useResolvedPath","_temp2","hookName","ctx","useRouteContext","thisRoute","Router","_ref5","basenameProp","locationProp","navigationType","staticProp","navigationContext","locationContext","trailingPathname","ViewTransitionContext","isTransitioning","startTransitionImpl","BrowserRouter","_ref4","historyRef","createBrowserHistory","setStateImpl","v7_startTransition","newState","isBrowser","ABSOLUTE_URL_REGEX","_ref7","absoluteHref","reloadDocument","preventScrollReset","unstable_viewTransition","UNSAFE_NavigationContext","isExternal","currentUrl","targetUrl","protocol","_temp","joinedPathname","useHref","internalOnClick","replaceProp","isModifiedEvent","shouldProcessLinkClick","useLinkClickHandler","_ref8","ariaCurrentProp","classNameProp","styleProp","_excluded2","routerState","UNSAFE_DataRouterStateContext","opts","vtContext","useViewTransitionState","currentPath","currentLocation","nextPath","nextLocation","nextLocationPathname","navigation","endSlashPosition","isPending","renderProps","ariaCurrent","UNSAFE_DataRouterContext","__assign","hashFragment","observer","asyncTimerId","scrollFunction","disconnect","isInteractiveElement","hasAttribute","getElAndScroll","getElementById","originalTabIndex","preventScroll","blur","genericHashLink","As","linkHash","passDownProps","isExact","filteredProps","getOwnPropertySymbols","propertyIsEnumerable","__rest","elementId","smooth","scrollIntoView","behavior","MutationObserver","observe","attributes","childList","subtree","HashLink","NavBar","activeLink","setActiveLink","scrolled","setScrolled","onScroll","scrollY","onUpdateActiveLink","navIcon1","alt","Row","decoratedBsPrefix","sizePrefix","brkPoint","cols","infix","Col","colProps","spans","span","useCol","_objectWithoutProperties","sourceSymbolKeys","ArrowRightCircle","title","xmlns","viewBox","fillRule","Banner","loopNum","setLoopNum","isDeleting","setIsDeleting","setText","setDelta","setIndex","toRotate","ticker","tick","fullText","updatedText","prevDelta","prevIndex","dataPeriod","Skills","meter_php","meter_react","meter_css","meter_mysql","meter_github","colorSharp","$b5e257d569688ac6$var$defaultContext","$b5e257d569688ac6$var$SSRContext","$73SJx$react","$b5e257d569688ac6$var$IsSSRContext","$b5e257d569688ac6$var$canUseDOM","$b5e257d569688ac6$var$componentIds","$b5e257d569688ac6$var$useCounter","$73SJx$useContext","$73SJx$useRef","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","currentOwner","prevComponentValue","$b5e257d569688ac6$export$619500959fc48b26","defaultId","didSSR","$73SJx$useState","$b5e257d569688ac6$var$subscribe","$b5e257d569688ac6$var$getSnapshot","$b5e257d569688ac6$var$getServerSnapshot","counter","onStoreChange","_excluded3","useTabPanel","TabPanel","tabPanelProps","hidden","Tabs","userId","generateChildId","generateCustomChildId","propsOnSelect","propsActiveKey","defaultActiveKey","useSSRSafeId","Panel","getTabTransitionComponent","TabContainer","TabContent","TabPane","tabClassName","tabAttrs","Tab","Content","Pane","ProjectCard","description","tools","imgUrl","github","Projects","projects","projImg1","project","colorSharp2","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","responseText","sendPost","headers","xhr","XMLHttpRequest","responseStatus","open","setRequestHeader","send","sendForm","uID","_userID","currentForm","findHTMLForm","formData","FormData","append","Contact","formInitialDetails","firstName","lastName","phone","formDetails","setFormDetails","buttonText","setButtonText","setStatus","onFormUpdate","category","refForm","contactImg","onSubmit","async","emailjs","succes","placeholder","onChange","lasttName","rows","success","Footer","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","App","reportWebVitals"],"sourceRoot":""}